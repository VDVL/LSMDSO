
DynamicInclinometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b20c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0801b398  0801b398  0002b398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba28  0801ba28  000313b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba28  0801ba28  0002ba28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba30  0801ba30  000313b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba30  0801ba30  0002ba30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba34  0801ba34  0002ba34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013b8  20000000  0801ba38  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001160  200013b8  0801cdf0  000313b8  2**3
                  ALLOC
 10 ._user_heap_stack 00008200  20002518  0801cdf0  00032518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000313b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042168  00000000  00000000  000313e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005942  00000000  00000000  00073550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003678  00000000  00000000  00078e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003428  00000000  00000000  0007c510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d332  00000000  00000000  0007f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000312ce  00000000  00000000  000acc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110c67  00000000  00000000  000ddf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a3  00000000  00000000  001eeb9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f3b0  00000000  00000000  001eec44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200013b8 	.word	0x200013b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0801b37c 	.word	0x0801b37c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200013bc 	.word	0x200013bc
 80001c4:	0801b37c 	.word	0x0801b37c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	; 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_ldivmod>:
 8000dec:	b97b      	cbnz	r3, 8000e0e <__aeabi_ldivmod+0x22>
 8000dee:	b972      	cbnz	r2, 8000e0e <__aeabi_ldivmod+0x22>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bfbe      	ittt	lt
 8000df4:	2000      	movlt	r0, #0
 8000df6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dfa:	e006      	blt.n	8000e0a <__aeabi_ldivmod+0x1e>
 8000dfc:	bf08      	it	eq
 8000dfe:	2800      	cmpeq	r0, #0
 8000e00:	bf1c      	itt	ne
 8000e02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e06:	f04f 30ff 	movne.w	r0, #4294967295
 8000e0a:	f000 b9bf 	b.w	800118c <__aeabi_idiv0>
 8000e0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e16:	2900      	cmp	r1, #0
 8000e18:	db09      	blt.n	8000e2e <__aeabi_ldivmod+0x42>
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db1a      	blt.n	8000e54 <__aeabi_ldivmod+0x68>
 8000e1e:	f000 f84d 	bl	8000ebc <__udivmoddi4>
 8000e22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e2a:	b004      	add	sp, #16
 8000e2c:	4770      	bx	lr
 8000e2e:	4240      	negs	r0, r0
 8000e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db1b      	blt.n	8000e70 <__aeabi_ldivmod+0x84>
 8000e38:	f000 f840 	bl	8000ebc <__udivmoddi4>
 8000e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e44:	b004      	add	sp, #16
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	4770      	bx	lr
 8000e54:	4252      	negs	r2, r2
 8000e56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e5a:	f000 f82f 	bl	8000ebc <__udivmoddi4>
 8000e5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e66:	b004      	add	sp, #16
 8000e68:	4240      	negs	r0, r0
 8000e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6e:	4770      	bx	lr
 8000e70:	4252      	negs	r2, r2
 8000e72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e76:	f000 f821 	bl	8000ebc <__udivmoddi4>
 8000e7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e82:	b004      	add	sp, #16
 8000e84:	4252      	negs	r2, r2
 8000e86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_uldivmod>:
 8000e8c:	b953      	cbnz	r3, 8000ea4 <__aeabi_uldivmod+0x18>
 8000e8e:	b94a      	cbnz	r2, 8000ea4 <__aeabi_uldivmod+0x18>
 8000e90:	2900      	cmp	r1, #0
 8000e92:	bf08      	it	eq
 8000e94:	2800      	cmpeq	r0, #0
 8000e96:	bf1c      	itt	ne
 8000e98:	f04f 31ff 	movne.w	r1, #4294967295
 8000e9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ea0:	f000 b974 	b.w	800118c <__aeabi_idiv0>
 8000ea4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eac:	f000 f806 	bl	8000ebc <__udivmoddi4>
 8000eb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb8:	b004      	add	sp, #16
 8000eba:	4770      	bx	lr

08000ebc <__udivmoddi4>:
 8000ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec0:	9d08      	ldr	r5, [sp, #32]
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	468e      	mov	lr, r1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d14d      	bne.n	8000f66 <__udivmoddi4+0xaa>
 8000eca:	428a      	cmp	r2, r1
 8000ecc:	4694      	mov	ip, r2
 8000ece:	d969      	bls.n	8000fa4 <__udivmoddi4+0xe8>
 8000ed0:	fab2 f282 	clz	r2, r2
 8000ed4:	b152      	cbz	r2, 8000eec <__udivmoddi4+0x30>
 8000ed6:	fa01 f302 	lsl.w	r3, r1, r2
 8000eda:	f1c2 0120 	rsb	r1, r2, #32
 8000ede:	fa20 f101 	lsr.w	r1, r0, r1
 8000ee2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee6:	ea41 0e03 	orr.w	lr, r1, r3
 8000eea:	4094      	lsls	r4, r2
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	0c21      	lsrs	r1, r4, #16
 8000ef2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ef6:	fa1f f78c 	uxth.w	r7, ip
 8000efa:	fb08 e316 	mls	r3, r8, r6, lr
 8000efe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f02:	fb06 f107 	mul.w	r1, r6, r7
 8000f06:	4299      	cmp	r1, r3
 8000f08:	d90a      	bls.n	8000f20 <__udivmoddi4+0x64>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f12:	f080 811f 	bcs.w	8001154 <__udivmoddi4+0x298>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 811c 	bls.w	8001154 <__udivmoddi4+0x298>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f28:	fb08 3310 	mls	r3, r8, r0, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb00 f707 	mul.w	r7, r0, r7
 8000f34:	42a7      	cmp	r7, r4
 8000f36:	d90a      	bls.n	8000f4e <__udivmoddi4+0x92>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f40:	f080 810a 	bcs.w	8001158 <__udivmoddi4+0x29c>
 8000f44:	42a7      	cmp	r7, r4
 8000f46:	f240 8107 	bls.w	8001158 <__udivmoddi4+0x29c>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	1be4      	subs	r4, r4, r7
 8000f54:	2600      	movs	r6, #0
 8000f56:	b11d      	cbz	r5, 8000f60 <__udivmoddi4+0xa4>
 8000f58:	40d4      	lsrs	r4, r2
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000f60:	4631      	mov	r1, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d909      	bls.n	8000f7e <__udivmoddi4+0xc2>
 8000f6a:	2d00      	cmp	r5, #0
 8000f6c:	f000 80ef 	beq.w	800114e <__udivmoddi4+0x292>
 8000f70:	2600      	movs	r6, #0
 8000f72:	e9c5 0100 	strd	r0, r1, [r5]
 8000f76:	4630      	mov	r0, r6
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	fab3 f683 	clz	r6, r3
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	d14a      	bne.n	800101c <__udivmoddi4+0x160>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d302      	bcc.n	8000f90 <__udivmoddi4+0xd4>
 8000f8a:	4282      	cmp	r2, r0
 8000f8c:	f200 80f9 	bhi.w	8001182 <__udivmoddi4+0x2c6>
 8000f90:	1a84      	subs	r4, r0, r2
 8000f92:	eb61 0303 	sbc.w	r3, r1, r3
 8000f96:	2001      	movs	r0, #1
 8000f98:	469e      	mov	lr, r3
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d0e0      	beq.n	8000f60 <__udivmoddi4+0xa4>
 8000f9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000fa2:	e7dd      	b.n	8000f60 <__udivmoddi4+0xa4>
 8000fa4:	b902      	cbnz	r2, 8000fa8 <__udivmoddi4+0xec>
 8000fa6:	deff      	udf	#255	; 0xff
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	f040 8092 	bne.w	80010d6 <__udivmoddi4+0x21a>
 8000fb2:	eba1 010c 	sub.w	r1, r1, ip
 8000fb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fba:	fa1f fe8c 	uxth.w	lr, ip
 8000fbe:	2601      	movs	r6, #1
 8000fc0:	0c20      	lsrs	r0, r4, #16
 8000fc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000fca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fce:	fb0e f003 	mul.w	r0, lr, r3
 8000fd2:	4288      	cmp	r0, r1
 8000fd4:	d908      	bls.n	8000fe8 <__udivmoddi4+0x12c>
 8000fd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000fda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fde:	d202      	bcs.n	8000fe6 <__udivmoddi4+0x12a>
 8000fe0:	4288      	cmp	r0, r1
 8000fe2:	f200 80cb 	bhi.w	800117c <__udivmoddi4+0x2c0>
 8000fe6:	4643      	mov	r3, r8
 8000fe8:	1a09      	subs	r1, r1, r0
 8000fea:	b2a4      	uxth	r4, r4
 8000fec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ff4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ff8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ffc:	45a6      	cmp	lr, r4
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x156>
 8001000:	eb1c 0404 	adds.w	r4, ip, r4
 8001004:	f100 31ff 	add.w	r1, r0, #4294967295
 8001008:	d202      	bcs.n	8001010 <__udivmoddi4+0x154>
 800100a:	45a6      	cmp	lr, r4
 800100c:	f200 80bb 	bhi.w	8001186 <__udivmoddi4+0x2ca>
 8001010:	4608      	mov	r0, r1
 8001012:	eba4 040e 	sub.w	r4, r4, lr
 8001016:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x9a>
 800101c:	f1c6 0720 	rsb	r7, r6, #32
 8001020:	40b3      	lsls	r3, r6
 8001022:	fa22 fc07 	lsr.w	ip, r2, r7
 8001026:	ea4c 0c03 	orr.w	ip, ip, r3
 800102a:	fa20 f407 	lsr.w	r4, r0, r7
 800102e:	fa01 f306 	lsl.w	r3, r1, r6
 8001032:	431c      	orrs	r4, r3
 8001034:	40f9      	lsrs	r1, r7
 8001036:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800103a:	fa00 f306 	lsl.w	r3, r0, r6
 800103e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001042:	0c20      	lsrs	r0, r4, #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fb09 1118 	mls	r1, r9, r8, r1
 800104c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001050:	fb08 f00e 	mul.w	r0, r8, lr
 8001054:	4288      	cmp	r0, r1
 8001056:	fa02 f206 	lsl.w	r2, r2, r6
 800105a:	d90b      	bls.n	8001074 <__udivmoddi4+0x1b8>
 800105c:	eb1c 0101 	adds.w	r1, ip, r1
 8001060:	f108 3aff 	add.w	sl, r8, #4294967295
 8001064:	f080 8088 	bcs.w	8001178 <__udivmoddi4+0x2bc>
 8001068:	4288      	cmp	r0, r1
 800106a:	f240 8085 	bls.w	8001178 <__udivmoddi4+0x2bc>
 800106e:	f1a8 0802 	sub.w	r8, r8, #2
 8001072:	4461      	add	r1, ip
 8001074:	1a09      	subs	r1, r1, r0
 8001076:	b2a4      	uxth	r4, r4
 8001078:	fbb1 f0f9 	udiv	r0, r1, r9
 800107c:	fb09 1110 	mls	r1, r9, r0, r1
 8001080:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001084:	fb00 fe0e 	mul.w	lr, r0, lr
 8001088:	458e      	cmp	lr, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x1e2>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f100 34ff 	add.w	r4, r0, #4294967295
 8001094:	d26c      	bcs.n	8001170 <__udivmoddi4+0x2b4>
 8001096:	458e      	cmp	lr, r1
 8001098:	d96a      	bls.n	8001170 <__udivmoddi4+0x2b4>
 800109a:	3802      	subs	r0, #2
 800109c:	4461      	add	r1, ip
 800109e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010a2:	fba0 9402 	umull	r9, r4, r0, r2
 80010a6:	eba1 010e 	sub.w	r1, r1, lr
 80010aa:	42a1      	cmp	r1, r4
 80010ac:	46c8      	mov	r8, r9
 80010ae:	46a6      	mov	lr, r4
 80010b0:	d356      	bcc.n	8001160 <__udivmoddi4+0x2a4>
 80010b2:	d053      	beq.n	800115c <__udivmoddi4+0x2a0>
 80010b4:	b15d      	cbz	r5, 80010ce <__udivmoddi4+0x212>
 80010b6:	ebb3 0208 	subs.w	r2, r3, r8
 80010ba:	eb61 010e 	sbc.w	r1, r1, lr
 80010be:	fa01 f707 	lsl.w	r7, r1, r7
 80010c2:	fa22 f306 	lsr.w	r3, r2, r6
 80010c6:	40f1      	lsrs	r1, r6
 80010c8:	431f      	orrs	r7, r3
 80010ca:	e9c5 7100 	strd	r7, r1, [r5]
 80010ce:	2600      	movs	r6, #0
 80010d0:	4631      	mov	r1, r6
 80010d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d6:	f1c2 0320 	rsb	r3, r2, #32
 80010da:	40d8      	lsrs	r0, r3
 80010dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e0:	fa21 f303 	lsr.w	r3, r1, r3
 80010e4:	4091      	lsls	r1, r2
 80010e6:	4301      	orrs	r1, r0
 80010e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010ec:	fa1f fe8c 	uxth.w	lr, ip
 80010f0:	fbb3 f0f7 	udiv	r0, r3, r7
 80010f4:	fb07 3610 	mls	r6, r7, r0, r3
 80010f8:	0c0b      	lsrs	r3, r1, #16
 80010fa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010fe:	fb00 f60e 	mul.w	r6, r0, lr
 8001102:	429e      	cmp	r6, r3
 8001104:	fa04 f402 	lsl.w	r4, r4, r2
 8001108:	d908      	bls.n	800111c <__udivmoddi4+0x260>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001112:	d22f      	bcs.n	8001174 <__udivmoddi4+0x2b8>
 8001114:	429e      	cmp	r6, r3
 8001116:	d92d      	bls.n	8001174 <__udivmoddi4+0x2b8>
 8001118:	3802      	subs	r0, #2
 800111a:	4463      	add	r3, ip
 800111c:	1b9b      	subs	r3, r3, r6
 800111e:	b289      	uxth	r1, r1
 8001120:	fbb3 f6f7 	udiv	r6, r3, r7
 8001124:	fb07 3316 	mls	r3, r7, r6, r3
 8001128:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800112c:	fb06 f30e 	mul.w	r3, r6, lr
 8001130:	428b      	cmp	r3, r1
 8001132:	d908      	bls.n	8001146 <__udivmoddi4+0x28a>
 8001134:	eb1c 0101 	adds.w	r1, ip, r1
 8001138:	f106 38ff 	add.w	r8, r6, #4294967295
 800113c:	d216      	bcs.n	800116c <__udivmoddi4+0x2b0>
 800113e:	428b      	cmp	r3, r1
 8001140:	d914      	bls.n	800116c <__udivmoddi4+0x2b0>
 8001142:	3e02      	subs	r6, #2
 8001144:	4461      	add	r1, ip
 8001146:	1ac9      	subs	r1, r1, r3
 8001148:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800114c:	e738      	b.n	8000fc0 <__udivmoddi4+0x104>
 800114e:	462e      	mov	r6, r5
 8001150:	4628      	mov	r0, r5
 8001152:	e705      	b.n	8000f60 <__udivmoddi4+0xa4>
 8001154:	4606      	mov	r6, r0
 8001156:	e6e3      	b.n	8000f20 <__udivmoddi4+0x64>
 8001158:	4618      	mov	r0, r3
 800115a:	e6f8      	b.n	8000f4e <__udivmoddi4+0x92>
 800115c:	454b      	cmp	r3, r9
 800115e:	d2a9      	bcs.n	80010b4 <__udivmoddi4+0x1f8>
 8001160:	ebb9 0802 	subs.w	r8, r9, r2
 8001164:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001168:	3801      	subs	r0, #1
 800116a:	e7a3      	b.n	80010b4 <__udivmoddi4+0x1f8>
 800116c:	4646      	mov	r6, r8
 800116e:	e7ea      	b.n	8001146 <__udivmoddi4+0x28a>
 8001170:	4620      	mov	r0, r4
 8001172:	e794      	b.n	800109e <__udivmoddi4+0x1e2>
 8001174:	4640      	mov	r0, r8
 8001176:	e7d1      	b.n	800111c <__udivmoddi4+0x260>
 8001178:	46d0      	mov	r8, sl
 800117a:	e77b      	b.n	8001074 <__udivmoddi4+0x1b8>
 800117c:	3b02      	subs	r3, #2
 800117e:	4461      	add	r1, ip
 8001180:	e732      	b.n	8000fe8 <__udivmoddi4+0x12c>
 8001182:	4630      	mov	r0, r6
 8001184:	e709      	b.n	8000f9a <__udivmoddi4+0xde>
 8001186:	4464      	add	r4, ip
 8001188:	3802      	subs	r0, #2
 800118a:	e742      	b.n	8001012 <__udivmoddi4+0x156>

0800118c <__aeabi_idiv0>:
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d103      	bne.n	80011a8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	e030      	b.n	800120a <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	7b1a      	ldrb	r2, [r3, #12]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <HTS221_RegisterBusIO+0x84>)
 80011e4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HTS221_RegisterBusIO+0x88>)
 80011ea:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4798      	blx	r3
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	e002      	b.n	800120a <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08001847 	.word	0x08001847
 8001218:	080018a9 	.word	0x080018a9

0800121c <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800122a:	2b00      	cmp	r3, #0
 800122c:	d108      	bne.n	8001240 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 faa4 	bl	800177c <HTS221_Initialize>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e004      	b.n	800124a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001260:	2b01      	cmp	r3, #1
 8001262:	d111      	bne.n	8001288 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f878 	bl	800135a <HTS221_HUM_Disable>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	e00d      	b.n	8001292 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f95f 	bl	800153a <HTS221_TEMP_Disable>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e004      	b.n	8001292 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	331c      	adds	r3, #28
 80012a8:	6839      	ldr	r1, [r7, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fc28 	bl	8001b00 <hts221_device_id_get>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e000      	b.n	80012be <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HTS221_GetCapabilities+0x44>)
 80012ee:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4a06      	ldr	r2, [pc, #24]	; (800130c <HTS221_GetCapabilities+0x44>)
 80012f4:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	41480000 	.word	0x41480000

08001310 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e015      	b.n	8001352 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10b      	bne.n	8001348 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	331c      	adds	r3, #28
 8001334:	2101      	movs	r1, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fbf3 	bl	8001b22 <hts221_power_on_set>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e004      	b.n	8001352 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	e015      	b.n	800139c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10b      	bne.n	8001392 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	331c      	adds	r3, #28
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fbce 	bl	8001b22 <hts221_power_on_set>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	e004      	b.n	800139c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f96f 	bl	8001694 <HTS221_GetOutputDataRate>
 80013b6:	4603      	mov	r3, r0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80013cc:	ed97 0a00 	vldr	s0, [r7]
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f9a3 	bl	800171c <HTS221_SetOutputDataRate>
 80013d6:	4603      	mov	r3, r0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	331c      	adds	r3, #28
 80013ee:	f107 020c 	add.w	r2, r7, #12
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fc58 	bl	8001caa <hts221_hum_adc_point_0_get>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	e06b      	b.n	80014de <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f103 021c 	add.w	r2, r3, #28
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	3304      	adds	r3, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4610      	mov	r0, r2
 8001416:	f000 fbaa 	bl	8001b6e <hts221_hum_rh_point_0_get>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	e05b      	b.n	80014de <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f103 021c 	add.w	r2, r3, #28
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	3308      	adds	r3, #8
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f000 fc5c 	bl	8001cf2 <hts221_hum_adc_point_1_get>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	e04b      	b.n	80014de <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f103 021c 	add.w	r2, r3, #28
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	330c      	adds	r3, #12
 8001452:	4619      	mov	r1, r3
 8001454:	4610      	mov	r0, r2
 8001456:	f000 fba8 	bl	8001baa <hts221_hum_rh_point_1_get>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	e03b      	b.n	80014de <HTS221_HUM_GetHumidity+0xfe>
 8001466:	2300      	movs	r3, #0
 8001468:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	331c      	adds	r3, #28
 800146e:	f107 021c 	add.w	r2, r7, #28
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fafd 	bl	8001a74 <hts221_humidity_raw_get>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	e02b      	b.n	80014de <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001486:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f99a 	bl	80017d4 <Linear_Interpolation>
 80014a0:	eef0 7a40 	vmov.f32	s15, s0
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d503      	bpl.n	80014c2 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80014e8 <HTS221_HUM_GetHumidity+0x108>
 80014cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	dd02      	ble.n	80014dc <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HTS221_HUM_GetHumidity+0x10c>)
 80014da:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	42c80000 	.word	0x42c80000
 80014ec:	42c80000 	.word	0x42c80000

080014f0 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e015      	b.n	8001532 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10b      	bne.n	8001528 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	331c      	adds	r3, #28
 8001514:	2101      	movs	r1, #1
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fb03 	bl	8001b22 <hts221_power_on_set>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e004      	b.n	8001532 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e015      	b.n	800157c <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10b      	bne.n	8001572 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	331c      	adds	r3, #28
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fade 	bl	8001b22 <hts221_power_on_set>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 800156c:	f04f 33ff 	mov.w	r3, #4294967295
 8001570:	e004      	b.n	800157c <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f87f 	bl	8001694 <HTS221_GetOutputDataRate>
 8001596:	4603      	mov	r3, r0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80015ac:	ed97 0a00 	vldr	s0, [r7]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f8b3 	bl	800171c <HTS221_SetOutputDataRate>
 80015b6:	4603      	mov	r3, r0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	331c      	adds	r3, #28
 80015ce:	f107 020c 	add.w	r2, r7, #12
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fbb0 	bl	8001d3a <hts221_temp_adc_point_0_get>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	e052      	b.n	800168c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f103 021c 	add.w	r2, r3, #28
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	3304      	adds	r3, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4610      	mov	r0, r2
 80015f6:	f000 faf6 	bl	8001be6 <hts221_temp_deg_point_0_get>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	e042      	b.n	800168c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f103 021c 	add.w	r2, r3, #28
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	3308      	adds	r3, #8
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f000 fbb4 	bl	8001d82 <hts221_temp_adc_point_1_get>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	e032      	b.n	800168c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f103 021c 	add.w	r2, r3, #28
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	330c      	adds	r3, #12
 8001632:	4619      	mov	r1, r3
 8001634:	4610      	mov	r0, r2
 8001636:	f000 fb07 	bl	8001c48 <hts221_temp_deg_point_1_get>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	e022      	b.n	800168c <HTS221_TEMP_GetTemperature+0xcc>
 8001646:	2300      	movs	r3, #0
 8001648:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	331c      	adds	r3, #28
 800164e:	f107 021c 	add.w	r2, r7, #28
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fa30 	bl	8001aba <hts221_temperature_raw_get>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	e012      	b.n	800168c <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001666:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f8aa 	bl	80017d4 <Linear_Interpolation>
 8001680:	eef0 7a40 	vmov.f32	s15, s0
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	331c      	adds	r3, #28
 80016a6:	f107 020b 	add.w	r2, r7, #11
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f983 	bl	80019b8 <hts221_data_rate_get>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	e025      	b.n	800170a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80016be:	7afb      	ldrb	r3, [r7, #11]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d81d      	bhi.n	8001700 <HTS221_GetOutputDataRate+0x6c>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <HTS221_GetOutputDataRate+0x38>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	080016e7 	.word	0x080016e7
 80016d4:	080016f1 	.word	0x080016f1
 80016d8:	080016f9 	.word	0x080016f9
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
      break;
 80016e4:	e010      	b.n	8001708 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016ec:	601a      	str	r2, [r3, #0]
      break;
 80016ee:	e00b      	b.n	8001708 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HTS221_GetOutputDataRate+0x80>)
 80016f4:	601a      	str	r2, [r3, #0]
      break;
 80016f6:	e007      	b.n	8001708 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HTS221_GetOutputDataRate+0x84>)
 80016fc:	601a      	str	r2, [r3, #0]
      break;
 80016fe:	e003      	b.n	8001708 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	60fb      	str	r3, [r7, #12]
      break;
 8001706:	bf00      	nop
  }

  return ret;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40e00000 	.word	0x40e00000
 8001718:	41480000 	.word	0x41480000

0800171c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001728:	edd7 7a00 	vldr	s15, [r7]
 800172c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	d801      	bhi.n	800173e <HTS221_SetOutputDataRate+0x22>
 800173a:	2301      	movs	r3, #1
 800173c:	e00b      	b.n	8001756 <HTS221_SetOutputDataRate+0x3a>
 800173e:	edd7 7a00 	vldr	s15, [r7]
 8001742:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d801      	bhi.n	8001754 <HTS221_SetOutputDataRate+0x38>
 8001750:	2302      	movs	r3, #2
 8001752:	e000      	b.n	8001756 <HTS221_SetOutputDataRate+0x3a>
 8001754:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001756:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	331c      	adds	r3, #28
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f902 	bl	800196a <hts221_data_rate_set>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	e000      	b.n	8001774 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	331c      	adds	r3, #28
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f9c9 	bl	8001b22 <hts221_power_on_set>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e017      	b.n	80017cc <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	331c      	adds	r3, #28
 80017a0:	2101      	movs	r1, #1
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f940 	bl	8001a28 <hts221_block_data_update_set>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	e00b      	b.n	80017cc <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80017b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffaf 	bl	800171c <HTS221_SetOutputDataRate>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	e000      	b.n	80017cc <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f0:	edd7 7a00 	vldr	s15, [r7]
 80017f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	edd3 7a01 	vldr	s15, [r3, #4]
 8001804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	ed93 6a00 	vldr	s12, [r3]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	edd3 7a03 	vldr	s15, [r3, #12]
 8001814:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001818:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800181c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	edd3 6a02 	vldr	s13, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001830:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001834:	eef0 7a66 	vmov.f32	s15, s13
}
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001846:	b590      	push	{r4, r7, lr}
 8001848:	b087      	sub	sp, #28
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	461a      	mov	r2, r3
 8001852:	460b      	mov	r3, r1
 8001854:	72fb      	strb	r3, [r7, #11]
 8001856:	4613      	mov	r3, r2
 8001858:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10e      	bne.n	8001884 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	695c      	ldr	r4, [r3, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	7b1b      	ldrb	r3, [r3, #12]
 800186e:	b298      	uxth	r0, r3
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001876:	b2db      	uxtb	r3, r3
 8001878:	b299      	uxth	r1, r3
 800187a:	893b      	ldrh	r3, [r7, #8]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	47a0      	blx	r4
 8001880:	4603      	mov	r3, r0
 8001882:	e00d      	b.n	80018a0 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	695c      	ldr	r4, [r3, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	7b1b      	ldrb	r3, [r3, #12]
 800188c:	b298      	uxth	r0, r3
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001894:	b2db      	uxtb	r3, r3
 8001896:	b299      	uxth	r1, r3
 8001898:	893b      	ldrh	r3, [r7, #8]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	47a0      	blx	r4
 800189e:	4603      	mov	r3, r0
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}

080018a8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	461a      	mov	r2, r3
 80018b4:	460b      	mov	r3, r1
 80018b6:	72fb      	strb	r3, [r7, #11]
 80018b8:	4613      	mov	r3, r2
 80018ba:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10e      	bne.n	80018e6 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	691c      	ldr	r4, [r3, #16]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	7b1b      	ldrb	r3, [r3, #12]
 80018d0:	b298      	uxth	r0, r3
 80018d2:	7afb      	ldrb	r3, [r7, #11]
 80018d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	b299      	uxth	r1, r3
 80018dc:	893b      	ldrh	r3, [r7, #8]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	47a0      	blx	r4
 80018e2:	4603      	mov	r3, r0
 80018e4:	e00d      	b.n	8001902 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	691c      	ldr	r4, [r3, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	7b1b      	ldrb	r3, [r3, #12]
 80018ee:	b298      	uxth	r0, r3
 80018f0:	7afb      	ldrb	r3, [r7, #11]
 80018f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	b299      	uxth	r1, r3
 80018fa:	893b      	ldrh	r3, [r7, #8]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	47a0      	blx	r4
 8001900:	4603      	mov	r3, r0
  }
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}

0800190a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 800190a:	b590      	push	{r4, r7, lr}
 800190c:	b087      	sub	sp, #28
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	461a      	mov	r2, r3
 8001916:	460b      	mov	r3, r1
 8001918:	72fb      	strb	r3, [r7, #11]
 800191a:	4613      	mov	r3, r2
 800191c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	685c      	ldr	r4, [r3, #4]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6898      	ldr	r0, [r3, #8]
 8001926:	893b      	ldrh	r3, [r7, #8]
 8001928:	7af9      	ldrb	r1, [r7, #11]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	47a0      	blx	r4
 800192e:	6178      	str	r0, [r7, #20]

  return ret;
 8001930:	697b      	ldr	r3, [r7, #20]
}
 8001932:	4618      	mov	r0, r3
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}

0800193a <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800193a:	b590      	push	{r4, r7, lr}
 800193c:	b087      	sub	sp, #28
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	461a      	mov	r2, r3
 8001946:	460b      	mov	r3, r1
 8001948:	72fb      	strb	r3, [r7, #11]
 800194a:	4613      	mov	r3, r2
 800194c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681c      	ldr	r4, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6898      	ldr	r0, [r3, #8]
 8001956:	893b      	ldrh	r3, [r7, #8]
 8001958:	7af9      	ldrb	r1, [r7, #11]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	47a0      	blx	r4
 800195e:	6178      	str	r0, [r7, #20]

  return ret;
 8001960:	697b      	ldr	r3, [r7, #20]
}
 8001962:	4618      	mov	r0, r3
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}

0800196a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001976:	f107 0208 	add.w	r2, r7, #8
 800197a:	2301      	movs	r3, #1
 800197c:	2120      	movs	r1, #32
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffc3 	bl	800190a <hts221_read_reg>
 8001984:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10f      	bne.n	80019ac <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	b2da      	uxtb	r2, r3
 8001994:	7a3b      	ldrb	r3, [r7, #8]
 8001996:	f362 0301 	bfi	r3, r2, #0, #2
 800199a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800199c:	f107 0208 	add.w	r2, r7, #8
 80019a0:	2301      	movs	r3, #1
 80019a2:	2120      	movs	r1, #32
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ffc8 	bl	800193a <hts221_write_reg>
 80019aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80019c2:	f107 0208 	add.w	r2, r7, #8
 80019c6:	2301      	movs	r3, #1
 80019c8:	2120      	movs	r1, #32
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff9d 	bl	800190a <hts221_read_reg>
 80019d0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80019d2:	7a3b      	ldrb	r3, [r7, #8]
 80019d4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d81a      	bhi.n	8001a14 <hts221_data_rate_get+0x5c>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <hts221_data_rate_get+0x2c>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	080019fd 	.word	0x080019fd
 80019ec:	08001a05 	.word	0x08001a05
 80019f0:	08001a0d 	.word	0x08001a0d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
      break;
 80019fa:	e00f      	b.n	8001a1c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
      break;
 8001a02:	e00b      	b.n	8001a1c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	e007      	b.n	8001a1c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	701a      	strb	r2, [r3, #0]
      break;
 8001a12:	e003      	b.n	8001a1c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	2204      	movs	r2, #4
 8001a18:	701a      	strb	r2, [r3, #0]
      break;
 8001a1a:	bf00      	nop
  }

  return ret;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop

08001a28 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a34:	f107 0208 	add.w	r2, r7, #8
 8001a38:	2301      	movs	r3, #1
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff64 	bl	800190a <hts221_read_reg>
 8001a42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	7a3b      	ldrb	r3, [r7, #8]
 8001a54:	f362 0382 	bfi	r3, r2, #2, #1
 8001a58:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a5a:	f107 0208 	add.w	r2, r7, #8
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2120      	movs	r1, #32
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff69 	bl	800193a <hts221_write_reg>
 8001a68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001a7e:	f107 0208 	add.w	r2, r7, #8
 8001a82:	2302      	movs	r3, #2
 8001a84:	2128      	movs	r1, #40	; 0x28
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff3f 	bl	800190a <hts221_read_reg>
 8001a8c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001a8e:	7a7b      	ldrb	r3, [r7, #9]
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	7a3b      	ldrb	r3, [r7, #8]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	801a      	strh	r2, [r3, #0]

  return ret;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001ac4:	f107 0208 	add.w	r2, r7, #8
 8001ac8:	2302      	movs	r3, #2
 8001aca:	212a      	movs	r1, #42	; 0x2a
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff1c 	bl	800190a <hts221_read_reg>
 8001ad2:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001ad4:	7a7b      	ldrb	r3, [r7, #9]
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	7a3b      	ldrb	r3, [r7, #8]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	801a      	strh	r2, [r3, #0]

  return ret;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	210f      	movs	r1, #15
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fefa 	bl	800190a <hts221_read_reg>
 8001b16:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b18:	68fb      	ldr	r3, [r7, #12]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001b2e:	f107 0208 	add.w	r2, r7, #8
 8001b32:	2301      	movs	r3, #1
 8001b34:	2120      	movs	r1, #32
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fee7 	bl	800190a <hts221_read_reg>
 8001b3c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10f      	bne.n	8001b64 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	7a3b      	ldrb	r3, [r7, #8]
 8001b4e:	f362 13c7 	bfi	r3, r2, #7, #1
 8001b52:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001b54:	f107 0208 	add.w	r2, r7, #8
 8001b58:	2301      	movs	r3, #1
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff feec 	bl	800193a <hts221_write_reg>
 8001b62:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b64:	68fb      	ldr	r3, [r7, #12]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001b78:	f107 020b 	add.w	r2, r7, #11
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	2130      	movs	r1, #48	; 0x30
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fec2 	bl	800190a <hts221_read_reg>
 8001b86:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b92:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001bb4:	f107 020b 	add.w	r2, r7, #11
 8001bb8:	2301      	movs	r3, #1
 8001bba:	2131      	movs	r1, #49	; 0x31
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fea4 	bl	800190a <hts221_read_reg>
 8001bc2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001bf0:	f107 020f 	add.w	r2, r7, #15
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2132      	movs	r1, #50	; 0x32
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fe86 	bl	800190a <hts221_read_reg>
 8001bfe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d11b      	bne.n	8001c3e <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001c06:	f107 0210 	add.w	r2, r7, #16
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	2135      	movs	r1, #53	; 0x35
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fe7b 	bl	800190a <hts221_read_reg>
 8001c14:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001c16:	7c3b      	ldrb	r3, [r7, #16]
 8001c18:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001c20:	7cfb      	ldrb	r3, [r7, #19]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	4413      	add	r3, r2
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c30:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001c3e:	697b      	ldr	r3, [r7, #20]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001c52:	f107 020f 	add.w	r2, r7, #15
 8001c56:	2301      	movs	r3, #1
 8001c58:	2133      	movs	r1, #51	; 0x33
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fe55 	bl	800190a <hts221_read_reg>
 8001c60:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11b      	bne.n	8001ca0 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001c68:	f107 0210 	add.w	r2, r7, #16
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	2135      	movs	r1, #53	; 0x35
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fe4a 	bl	800190a <hts221_read_reg>
 8001c76:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8001c78:	7c3b      	ldrb	r3, [r7, #16]
 8001c7a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001c82:	7cfb      	ldrb	r3, [r7, #19]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	4413      	add	r3, r2
 8001c8a:	ee07 3a90 	vmov	s15, r3
 8001c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c92:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001ca0:	697b      	ldr	r3, [r7, #20]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001cb4:	f107 0208 	add.w	r2, r7, #8
 8001cb8:	2302      	movs	r3, #2
 8001cba:	2136      	movs	r1, #54	; 0x36
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fe24 	bl	800190a <hts221_read_reg>
 8001cc2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001cc4:	7a7b      	ldrb	r3, [r7, #9]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	7a3b      	ldrb	r3, [r7, #8]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001cd6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001cfc:	f107 0208 	add.w	r2, r7, #8
 8001d00:	2302      	movs	r3, #2
 8001d02:	213a      	movs	r1, #58	; 0x3a
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fe00 	bl	800190a <hts221_read_reg>
 8001d0a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001d0c:	7a7b      	ldrb	r3, [r7, #9]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	7a3b      	ldrb	r3, [r7, #8]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001d1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001d30:	68fb      	ldr	r3, [r7, #12]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001d44:	f107 0208 	add.w	r2, r7, #8
 8001d48:	2302      	movs	r3, #2
 8001d4a:	213c      	movs	r1, #60	; 0x3c
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fddc 	bl	800190a <hts221_read_reg>
 8001d52:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001d54:	7a7b      	ldrb	r3, [r7, #9]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	7a3b      	ldrb	r3, [r7, #8]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001d66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001d78:	68fb      	ldr	r3, [r7, #12]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001d8c:	f107 0208 	add.w	r2, r7, #8
 8001d90:	2302      	movs	r3, #2
 8001d92:	213e      	movs	r1, #62	; 0x3e
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fdb8 	bl	800190a <hts221_read_reg>
 8001d9a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001d9c:	7a7b      	ldrb	r3, [r7, #9]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	7a3b      	ldrb	r3, [r7, #8]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001dae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e04d      	b.n	8001e84 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7b1a      	ldrb	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <LIS2DW12_RegisterBusIO+0xc4>)
 8001e24:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <LIS2DW12_RegisterBusIO+0xc8>)
 8001e2a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d103      	bne.n	8001e42 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e020      	b.n	8001e84 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4798      	blx	r3
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e016      	b.n	8001e84 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d112      	bne.n	8001e84 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001e68:	2305      	movs	r3, #5
 8001e6a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2121      	movs	r1, #33	; 0x21
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fd87 	bl	8002986 <LIS2DW12_Write_Reg>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	08002d19 	.word	0x08002d19
 8001e94:	08002d4f 	.word	0x08002d4f

08001e98 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	331c      	adds	r3, #28
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fa94 	bl	80033d4 <lis2dw12_auto_increment_set>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e04b      	b.n	8001f50 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	331c      	adds	r3, #28
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 f9a8 	bl	8003214 <lis2dw12_block_data_update_set>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e03f      	b.n	8001f50 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	331c      	adds	r3, #28
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f001 faa2 	bl	8003420 <lis2dw12_fifo_mode_set>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	e033      	b.n	8001f50 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	331c      	adds	r3, #28
 8001eec:	2104      	movs	r1, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 ff78 	bl	8002de4 <lis2dw12_power_mode_set>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e027      	b.n	8001f50 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <LIS2DW12_Init+0xc0>)
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	331c      	adds	r3, #28
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 f869 	bl	8002ff4 <lis2dw12_data_rate_set>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	e010      	b.n	8001f50 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	331c      	adds	r3, #28
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 f993 	bl	8003260 <lis2dw12_full_scale_set>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	e004      	b.n	8001f50 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	42c80000 	.word	0x42c80000

08001f5c <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f888 	bl	800207a <LIS2DW12_ACC_Disable>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	e010      	b.n	8001f98 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	331c      	adds	r3, #28
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 f9fe 	bl	80033b2 <lis2dw12_device_id_get>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	e000      	b.n	8001fc4 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2200      	movs	r2, #0
 8001fec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <LIS2DW12_GetCapabilities+0x58>)
 800200c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	44c80000 	.word	0x44c80000

08002028 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e019      	b.n	8002072 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002050:	461a      	mov	r2, r3
 8002052:	eeb0 0a67 	vmov.f32	s0, s15
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fcb0 	bl	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e004      	b.n	8002072 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e010      	b.n	80020b2 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	331c      	adds	r3, #28
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f000 ffac 	bl	8002ff4 <lis2dw12_data_rate_set>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e004      	b.n	80020b2 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	331c      	adds	r3, #28
 80020ce:	f107 020b 	add.w	r2, r7, #11
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f001 f8e9 	bl	80032ac <lis2dw12_full_scale_get>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	e0a0      	b.n	8002228 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	331c      	adds	r3, #28
 80020ea:	f107 020a 	add.w	r2, r7, #10
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fec5 	bl	8002e80 <lis2dw12_power_mode_get>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002100:	e092      	b.n	8002228 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8002102:	7abb      	ldrb	r3, [r7, #10]
 8002104:	2b1b      	cmp	r3, #27
 8002106:	f200 8087 	bhi.w	8002218 <LIS2DW12_ACC_GetSensitivity+0x15c>
 800210a:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <LIS2DW12_ACC_GetSensitivity+0x54>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002181 	.word	0x08002181
 8002114:	080021cd 	.word	0x080021cd
 8002118:	080021cd 	.word	0x080021cd
 800211c:	080021cd 	.word	0x080021cd
 8002120:	080021cd 	.word	0x080021cd
 8002124:	08002219 	.word	0x08002219
 8002128:	08002219 	.word	0x08002219
 800212c:	08002219 	.word	0x08002219
 8002130:	08002181 	.word	0x08002181
 8002134:	080021cd 	.word	0x080021cd
 8002138:	080021cd 	.word	0x080021cd
 800213c:	080021cd 	.word	0x080021cd
 8002140:	08002219 	.word	0x08002219
 8002144:	08002219 	.word	0x08002219
 8002148:	08002219 	.word	0x08002219
 800214c:	08002219 	.word	0x08002219
 8002150:	08002181 	.word	0x08002181
 8002154:	080021cd 	.word	0x080021cd
 8002158:	080021cd 	.word	0x080021cd
 800215c:	080021cd 	.word	0x080021cd
 8002160:	080021cd 	.word	0x080021cd
 8002164:	08002219 	.word	0x08002219
 8002168:	08002219 	.word	0x08002219
 800216c:	08002219 	.word	0x08002219
 8002170:	08002181 	.word	0x08002181
 8002174:	080021cd 	.word	0x080021cd
 8002178:	080021cd 	.word	0x080021cd
 800217c:	080021cd 	.word	0x080021cd
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d81a      	bhi.n	80021bc <LIS2DW12_ACC_GetSensitivity+0x100>
 8002186:	a201      	add	r2, pc, #4	; (adr r2, 800218c <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	0800219d 	.word	0x0800219d
 8002190:	080021a5 	.word	0x080021a5
 8002194:	080021ad 	.word	0x080021ad
 8002198:	080021b5 	.word	0x080021b5
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4a24      	ldr	r2, [pc, #144]	; (8002230 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80021a0:	601a      	str	r2, [r3, #0]
          break;
 80021a2:	e012      	b.n	80021ca <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4a23      	ldr	r2, [pc, #140]	; (8002234 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80021a8:	601a      	str	r2, [r3, #0]
          break;
 80021aa:	e00e      	b.n	80021ca <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4a22      	ldr	r2, [pc, #136]	; (8002238 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 80021b0:	601a      	str	r2, [r3, #0]
          break;
 80021b2:	e00a      	b.n	80021ca <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4a21      	ldr	r2, [pc, #132]	; (800223c <LIS2DW12_ACC_GetSensitivity+0x180>)
 80021b8:	601a      	str	r2, [r3, #0]
          break;
 80021ba:	e006      	b.n	80021ca <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4a20      	ldr	r2, [pc, #128]	; (8002240 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80021c0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	60fb      	str	r3, [r7, #12]
          break;
 80021c8:	bf00      	nop
      }
      break;
 80021ca:	e02c      	b.n	8002226 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80021cc:	7afb      	ldrb	r3, [r7, #11]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d81a      	bhi.n	8002208 <LIS2DW12_ACC_GetSensitivity+0x14c>
 80021d2:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021f1 	.word	0x080021f1
 80021e0:	080021f9 	.word	0x080021f9
 80021e4:	08002201 	.word	0x08002201
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <LIS2DW12_ACC_GetSensitivity+0x188>)
 80021ec:	601a      	str	r2, [r3, #0]
          break;
 80021ee:	e012      	b.n	8002216 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 80021f4:	601a      	str	r2, [r3, #0]
          break;
 80021f6:	e00e      	b.n	8002216 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80021fc:	601a      	str	r2, [r3, #0]
          break;
 80021fe:	e00a      	b.n	8002216 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002204:	601a      	str	r2, [r3, #0]
          break;
 8002206:	e006      	b.n	8002216 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <LIS2DW12_ACC_GetSensitivity+0x184>)
 800220c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	60fb      	str	r3, [r7, #12]
          break;
 8002214:	bf00      	nop
      }
      break;
 8002216:	e006      	b.n	8002226 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <LIS2DW12_ACC_GetSensitivity+0x184>)
 800221c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	60fb      	str	r3, [r7, #12]
      break;
 8002224:	bf00      	nop
  }

  return ret;
 8002226:	68fb      	ldr	r3, [r7, #12]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	3f79db23 	.word	0x3f79db23
 8002234:	3ff9db23 	.word	0x3ff9db23
 8002238:	4079db23 	.word	0x4079db23
 800223c:	40f9db23 	.word	0x40f9db23
 8002240:	bf800000 	.word	0xbf800000
 8002244:	3e79db23 	.word	0x3e79db23
 8002248:	3ef9db23 	.word	0x3ef9db23

0800224c <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	331c      	adds	r3, #28
 800225e:	f107 020b 	add.w	r2, r7, #11
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f000 ff0b 	bl	8003080 <lis2dw12_data_rate_get>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
 8002274:	e1d4      	b.n	8002620 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	331c      	adds	r3, #28
 800227a:	f107 020a 	add.w	r2, r7, #10
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fdfd 	bl	8002e80 <lis2dw12_power_mode_get>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	e1c6      	b.n	8002620 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8002292:	7afb      	ldrb	r3, [r7, #11]
 8002294:	2b32      	cmp	r3, #50	; 0x32
 8002296:	f200 81bb 	bhi.w	8002610 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	0800236d 	.word	0x0800236d
 80022a4:	08002377 	.word	0x08002377
 80022a8:	08002415 	.word	0x08002415
 80022ac:	0800241d 	.word	0x0800241d
 80022b0:	08002425 	.word	0x08002425
 80022b4:	0800242d 	.word	0x0800242d
 80022b8:	08002435 	.word	0x08002435
 80022bc:	0800243d 	.word	0x0800243d
 80022c0:	080024d9 	.word	0x080024d9
 80022c4:	08002575 	.word	0x08002575
 80022c8:	08002611 	.word	0x08002611
 80022cc:	08002611 	.word	0x08002611
 80022d0:	08002611 	.word	0x08002611
 80022d4:	08002611 	.word	0x08002611
 80022d8:	08002611 	.word	0x08002611
 80022dc:	08002611 	.word	0x08002611
 80022e0:	08002611 	.word	0x08002611
 80022e4:	08002611 	.word	0x08002611
 80022e8:	0800236d 	.word	0x0800236d
 80022ec:	08002611 	.word	0x08002611
 80022f0:	08002611 	.word	0x08002611
 80022f4:	08002611 	.word	0x08002611
 80022f8:	08002611 	.word	0x08002611
 80022fc:	08002611 	.word	0x08002611
 8002300:	08002611 	.word	0x08002611
 8002304:	08002611 	.word	0x08002611
 8002308:	08002611 	.word	0x08002611
 800230c:	08002611 	.word	0x08002611
 8002310:	08002611 	.word	0x08002611
 8002314:	08002611 	.word	0x08002611
 8002318:	08002611 	.word	0x08002611
 800231c:	08002611 	.word	0x08002611
 8002320:	08002611 	.word	0x08002611
 8002324:	08002611 	.word	0x08002611
 8002328:	08002611 	.word	0x08002611
 800232c:	08002611 	.word	0x08002611
 8002330:	08002611 	.word	0x08002611
 8002334:	08002611 	.word	0x08002611
 8002338:	08002611 	.word	0x08002611
 800233c:	08002611 	.word	0x08002611
 8002340:	08002611 	.word	0x08002611
 8002344:	08002611 	.word	0x08002611
 8002348:	08002611 	.word	0x08002611
 800234c:	08002611 	.word	0x08002611
 8002350:	08002611 	.word	0x08002611
 8002354:	08002611 	.word	0x08002611
 8002358:	08002611 	.word	0x08002611
 800235c:	08002611 	.word	0x08002611
 8002360:	08002611 	.word	0x08002611
 8002364:	08002611 	.word	0x08002611
 8002368:	0800236d 	.word	0x0800236d
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
      break;
 8002374:	e153      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002376:	7abb      	ldrb	r3, [r7, #10]
 8002378:	2b1b      	cmp	r3, #27
 800237a:	d843      	bhi.n	8002404 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 800237c:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	080023fd 	.word	0x080023fd
 8002388:	080023fd 	.word	0x080023fd
 800238c:	080023fd 	.word	0x080023fd
 8002390:	080023fd 	.word	0x080023fd
 8002394:	080023f5 	.word	0x080023f5
 8002398:	08002405 	.word	0x08002405
 800239c:	08002405 	.word	0x08002405
 80023a0:	08002405 	.word	0x08002405
 80023a4:	080023fd 	.word	0x080023fd
 80023a8:	080023fd 	.word	0x080023fd
 80023ac:	080023fd 	.word	0x080023fd
 80023b0:	080023fd 	.word	0x080023fd
 80023b4:	08002405 	.word	0x08002405
 80023b8:	08002405 	.word	0x08002405
 80023bc:	08002405 	.word	0x08002405
 80023c0:	08002405 	.word	0x08002405
 80023c4:	080023fd 	.word	0x080023fd
 80023c8:	080023fd 	.word	0x080023fd
 80023cc:	080023fd 	.word	0x080023fd
 80023d0:	080023fd 	.word	0x080023fd
 80023d4:	080023f5 	.word	0x080023f5
 80023d8:	08002405 	.word	0x08002405
 80023dc:	08002405 	.word	0x08002405
 80023e0:	08002405 	.word	0x08002405
 80023e4:	080023fd 	.word	0x080023fd
 80023e8:	080023fd 	.word	0x080023fd
 80023ec:	080023fd 	.word	0x080023fd
 80023f0:	080023fd 	.word	0x080023fd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4a8c      	ldr	r2, [pc, #560]	; (8002628 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80023f8:	601a      	str	r2, [r3, #0]
          break;
 80023fa:	e00a      	b.n	8002412 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4a8b      	ldr	r2, [pc, #556]	; (800262c <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8002400:	601a      	str	r2, [r3, #0]
          break;
 8002402:	e006      	b.n	8002412 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4a8a      	ldr	r2, [pc, #552]	; (8002630 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002408:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	60fb      	str	r3, [r7, #12]
          break;
 8002410:	bf00      	nop
      }
      break;
 8002412:	e104      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4a84      	ldr	r2, [pc, #528]	; (8002628 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002418:	601a      	str	r2, [r3, #0]
      break;
 800241a:	e100      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4a85      	ldr	r2, [pc, #532]	; (8002634 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8002420:	601a      	str	r2, [r3, #0]
      break;
 8002422:	e0fc      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4a84      	ldr	r2, [pc, #528]	; (8002638 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8002428:	601a      	str	r2, [r3, #0]
      break;
 800242a:	e0f8      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4a83      	ldr	r2, [pc, #524]	; (800263c <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8002430:	601a      	str	r2, [r3, #0]
      break;
 8002432:	e0f4      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4a82      	ldr	r2, [pc, #520]	; (8002640 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002438:	601a      	str	r2, [r3, #0]
      break;
 800243a:	e0f0      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 800243c:	7abb      	ldrb	r3, [r7, #10]
 800243e:	2b1b      	cmp	r3, #27
 8002440:	d842      	bhi.n	80024c8 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8002442:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	080024c1 	.word	0x080024c1
 800244c:	080024c1 	.word	0x080024c1
 8002450:	080024c1 	.word	0x080024c1
 8002454:	080024c1 	.word	0x080024c1
 8002458:	080024b9 	.word	0x080024b9
 800245c:	080024c9 	.word	0x080024c9
 8002460:	080024c9 	.word	0x080024c9
 8002464:	080024c9 	.word	0x080024c9
 8002468:	080024c1 	.word	0x080024c1
 800246c:	080024c1 	.word	0x080024c1
 8002470:	080024c1 	.word	0x080024c1
 8002474:	080024c1 	.word	0x080024c1
 8002478:	080024c9 	.word	0x080024c9
 800247c:	080024c9 	.word	0x080024c9
 8002480:	080024c9 	.word	0x080024c9
 8002484:	080024c9 	.word	0x080024c9
 8002488:	080024c1 	.word	0x080024c1
 800248c:	080024c1 	.word	0x080024c1
 8002490:	080024c1 	.word	0x080024c1
 8002494:	080024c1 	.word	0x080024c1
 8002498:	080024b9 	.word	0x080024b9
 800249c:	080024c9 	.word	0x080024c9
 80024a0:	080024c9 	.word	0x080024c9
 80024a4:	080024c9 	.word	0x080024c9
 80024a8:	080024c1 	.word	0x080024c1
 80024ac:	080024c1 	.word	0x080024c1
 80024b0:	080024c1 	.word	0x080024c1
 80024b4:	080024c1 	.word	0x080024c1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4a62      	ldr	r2, [pc, #392]	; (8002644 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 80024bc:	601a      	str	r2, [r3, #0]
          break;
 80024be:	e00a      	b.n	80024d6 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4a5f      	ldr	r2, [pc, #380]	; (8002640 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80024c4:	601a      	str	r2, [r3, #0]
          break;
 80024c6:	e006      	b.n	80024d6 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4a59      	ldr	r2, [pc, #356]	; (8002630 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80024cc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	60fb      	str	r3, [r7, #12]
          break;
 80024d4:	bf00      	nop
      }
      break;
 80024d6:	e0a2      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80024d8:	7abb      	ldrb	r3, [r7, #10]
 80024da:	2b1b      	cmp	r3, #27
 80024dc:	d842      	bhi.n	8002564 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	0800255d 	.word	0x0800255d
 80024e8:	0800255d 	.word	0x0800255d
 80024ec:	0800255d 	.word	0x0800255d
 80024f0:	0800255d 	.word	0x0800255d
 80024f4:	08002555 	.word	0x08002555
 80024f8:	08002565 	.word	0x08002565
 80024fc:	08002565 	.word	0x08002565
 8002500:	08002565 	.word	0x08002565
 8002504:	0800255d 	.word	0x0800255d
 8002508:	0800255d 	.word	0x0800255d
 800250c:	0800255d 	.word	0x0800255d
 8002510:	0800255d 	.word	0x0800255d
 8002514:	08002565 	.word	0x08002565
 8002518:	08002565 	.word	0x08002565
 800251c:	08002565 	.word	0x08002565
 8002520:	08002565 	.word	0x08002565
 8002524:	0800255d 	.word	0x0800255d
 8002528:	0800255d 	.word	0x0800255d
 800252c:	0800255d 	.word	0x0800255d
 8002530:	0800255d 	.word	0x0800255d
 8002534:	08002555 	.word	0x08002555
 8002538:	08002565 	.word	0x08002565
 800253c:	08002565 	.word	0x08002565
 8002540:	08002565 	.word	0x08002565
 8002544:	0800255d 	.word	0x0800255d
 8002548:	0800255d 	.word	0x0800255d
 800254c:	0800255d 	.word	0x0800255d
 8002550:	0800255d 	.word	0x0800255d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4a3c      	ldr	r2, [pc, #240]	; (8002648 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002558:	601a      	str	r2, [r3, #0]
          break;
 800255a:	e00a      	b.n	8002572 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4a38      	ldr	r2, [pc, #224]	; (8002640 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002560:	601a      	str	r2, [r3, #0]
          break;
 8002562:	e006      	b.n	8002572 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4a32      	ldr	r2, [pc, #200]	; (8002630 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002568:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	60fb      	str	r3, [r7, #12]
          break;
 8002570:	bf00      	nop
      }
      break;
 8002572:	e054      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002574:	7abb      	ldrb	r3, [r7, #10]
 8002576:	2b1b      	cmp	r3, #27
 8002578:	d842      	bhi.n	8002600 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	080025f9 	.word	0x080025f9
 8002584:	080025f9 	.word	0x080025f9
 8002588:	080025f9 	.word	0x080025f9
 800258c:	080025f9 	.word	0x080025f9
 8002590:	080025f1 	.word	0x080025f1
 8002594:	08002601 	.word	0x08002601
 8002598:	08002601 	.word	0x08002601
 800259c:	08002601 	.word	0x08002601
 80025a0:	080025f9 	.word	0x080025f9
 80025a4:	080025f9 	.word	0x080025f9
 80025a8:	080025f9 	.word	0x080025f9
 80025ac:	080025f9 	.word	0x080025f9
 80025b0:	08002601 	.word	0x08002601
 80025b4:	08002601 	.word	0x08002601
 80025b8:	08002601 	.word	0x08002601
 80025bc:	08002601 	.word	0x08002601
 80025c0:	080025f9 	.word	0x080025f9
 80025c4:	080025f9 	.word	0x080025f9
 80025c8:	080025f9 	.word	0x080025f9
 80025cc:	080025f9 	.word	0x080025f9
 80025d0:	080025f1 	.word	0x080025f1
 80025d4:	08002601 	.word	0x08002601
 80025d8:	08002601 	.word	0x08002601
 80025dc:	08002601 	.word	0x08002601
 80025e0:	080025f9 	.word	0x080025f9
 80025e4:	080025f9 	.word	0x080025f9
 80025e8:	080025f9 	.word	0x080025f9
 80025ec:	080025f9 	.word	0x080025f9
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4a16      	ldr	r2, [pc, #88]	; (800264c <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 80025f4:	601a      	str	r2, [r3, #0]
          break;
 80025f6:	e00a      	b.n	800260e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4a11      	ldr	r2, [pc, #68]	; (8002640 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80025fc:	601a      	str	r2, [r3, #0]
          break;
 80025fe:	e006      	b.n	800260e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002604:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	60fb      	str	r3, [r7, #12]
          break;
 800260c:	bf00      	nop
      }
      break;
 800260e:	e006      	b.n	800261e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4a07      	ldr	r2, [pc, #28]	; (8002630 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002614:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	60fb      	str	r3, [r7, #12]
      break;
 800261c:	bf00      	nop
  }

  return ret;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	41480000 	.word	0x41480000
 800262c:	3fcccccd 	.word	0x3fcccccd
 8002630:	bf800000 	.word	0xbf800000
 8002634:	41c80000 	.word	0x41c80000
 8002638:	42480000 	.word	0x42480000
 800263c:	42c80000 	.word	0x42c80000
 8002640:	43480000 	.word	0x43480000
 8002644:	43c80000 	.word	0x43c80000
 8002648:	44480000 	.word	0x44480000
 800264c:	44c80000 	.word	0x44c80000

08002650 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	ed97 0a00 	vldr	s0, [r7]
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f805 	bl	8002674 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002680:	460b      	mov	r3, r1
 8002682:	71fb      	strb	r3, [r7, #7]
 8002684:	4613      	mov	r3, r2
 8002686:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800268e:	2b01      	cmp	r3, #1
 8002690:	d109      	bne.n	80026a6 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002692:	79ba      	ldrb	r2, [r7, #6]
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	4619      	mov	r1, r3
 8002698:	ed97 0a02 	vldr	s0, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f98d 	bl	80029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	e008      	b.n	80026b8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80026a6:	79ba      	ldrb	r2, [r7, #6]
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4619      	mov	r1, r3
 80026ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fa9f 	bl	8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80026b6:	4603      	mov	r3, r0
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	331c      	adds	r3, #28
 80026d2:	f107 020b 	add.w	r2, r7, #11
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fde7 	bl	80032ac <lis2dw12_full_scale_get>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	e027      	b.n	800273a <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d81b      	bhi.n	8002728 <LIS2DW12_ACC_GetFullScale+0x68>
 80026f0:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <LIS2DW12_ACC_GetFullScale+0x38>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	08002709 	.word	0x08002709
 80026fc:	08002711 	.word	0x08002711
 8002700:	08002719 	.word	0x08002719
 8002704:	08002721 	.word	0x08002721
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2202      	movs	r2, #2
 800270c:	601a      	str	r2, [r3, #0]
      break;
 800270e:	e013      	b.n	8002738 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2204      	movs	r2, #4
 8002714:	601a      	str	r2, [r3, #0]
      break;
 8002716:	e00f      	b.n	8002738 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2208      	movs	r2, #8
 800271c:	601a      	str	r2, [r3, #0]
      break;
 800271e:	e00b      	b.n	8002738 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2210      	movs	r2, #16
 8002724:	601a      	str	r2, [r3, #0]
      break;
 8002726:	e007      	b.n	8002738 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f04f 32ff 	mov.w	r2, #4294967295
 800272e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
 8002734:	60fb      	str	r3, [r7, #12]
      break;
 8002736:	bf00      	nop
  }

  return ret;
 8002738:	68fb      	ldr	r3, [r7, #12]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop

08002744 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b02      	cmp	r3, #2
 8002752:	dd0b      	ble.n	800276c <LIS2DW12_ACC_SetFullScale+0x28>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b04      	cmp	r3, #4
 8002758:	dd06      	ble.n	8002768 <LIS2DW12_ACC_SetFullScale+0x24>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b08      	cmp	r3, #8
 800275e:	dc01      	bgt.n	8002764 <LIS2DW12_ACC_SetFullScale+0x20>
 8002760:	2302      	movs	r3, #2
 8002762:	e004      	b.n	800276e <LIS2DW12_ACC_SetFullScale+0x2a>
 8002764:	2303      	movs	r3, #3
 8002766:	e002      	b.n	800276e <LIS2DW12_ACC_SetFullScale+0x2a>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <LIS2DW12_ACC_SetFullScale+0x2a>
 800276c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800276e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	331c      	adds	r3, #28
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fd71 	bl	8003260 <lis2dw12_full_scale_set>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	e000      	b.n	800278c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	331c      	adds	r3, #28
 80027a6:	f107 020b 	add.w	r2, r7, #11
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fb67 	bl	8002e80 <lis2dw12_power_mode_get>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	e089      	b.n	80028d2 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	331c      	adds	r3, #28
 80027c2:	f107 020c 	add.w	r2, r7, #12
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fda7 	bl	800331c <lis2dw12_acceleration_raw_get>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
 80027d8:	e07b      	b.n	80028d2 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	2b1b      	cmp	r3, #27
 80027de:	d873      	bhi.n	80028c8 <LIS2DW12_ACC_GetAxesRaw+0x134>
 80027e0:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 80027e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e6:	bf00      	nop
 80027e8:	08002859 	.word	0x08002859
 80027ec:	08002891 	.word	0x08002891
 80027f0:	08002891 	.word	0x08002891
 80027f4:	08002891 	.word	0x08002891
 80027f8:	08002891 	.word	0x08002891
 80027fc:	080028c9 	.word	0x080028c9
 8002800:	080028c9 	.word	0x080028c9
 8002804:	080028c9 	.word	0x080028c9
 8002808:	08002859 	.word	0x08002859
 800280c:	08002891 	.word	0x08002891
 8002810:	08002891 	.word	0x08002891
 8002814:	08002891 	.word	0x08002891
 8002818:	080028c9 	.word	0x080028c9
 800281c:	080028c9 	.word	0x080028c9
 8002820:	080028c9 	.word	0x080028c9
 8002824:	080028c9 	.word	0x080028c9
 8002828:	08002859 	.word	0x08002859
 800282c:	08002891 	.word	0x08002891
 8002830:	08002891 	.word	0x08002891
 8002834:	08002891 	.word	0x08002891
 8002838:	08002891 	.word	0x08002891
 800283c:	080028c9 	.word	0x080028c9
 8002840:	080028c9 	.word	0x080028c9
 8002844:	080028c9 	.word	0x080028c9
 8002848:	08002859 	.word	0x08002859
 800284c:	08002891 	.word	0x08002891
 8002850:	08002891 	.word	0x08002891
 8002854:	08002891 	.word	0x08002891
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002858:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	da00      	bge.n	8002862 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8002860:	330f      	adds	r3, #15
 8002862:	111b      	asrs	r3, r3, #4
 8002864:	b21a      	sxth	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800286a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800286e:	2b00      	cmp	r3, #0
 8002870:	da00      	bge.n	8002874 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8002872:	330f      	adds	r3, #15
 8002874:	111b      	asrs	r3, r3, #4
 8002876:	b21a      	sxth	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800287c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	da00      	bge.n	8002886 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8002884:	330f      	adds	r3, #15
 8002886:	111b      	asrs	r3, r3, #4
 8002888:	b21a      	sxth	r2, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	809a      	strh	r2, [r3, #4]
      break;
 800288e:	e01f      	b.n	80028d0 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002890:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	da00      	bge.n	800289a <LIS2DW12_ACC_GetAxesRaw+0x106>
 8002898:	3303      	adds	r3, #3
 800289a:	109b      	asrs	r3, r3, #2
 800289c:	b21a      	sxth	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80028a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	da00      	bge.n	80028ac <LIS2DW12_ACC_GetAxesRaw+0x118>
 80028aa:	3303      	adds	r3, #3
 80028ac:	109b      	asrs	r3, r3, #2
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80028b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da00      	bge.n	80028be <LIS2DW12_ACC_GetAxesRaw+0x12a>
 80028bc:	3303      	adds	r3, #3
 80028be:	109b      	asrs	r3, r3, #2
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	809a      	strh	r2, [r3, #4]
      break;
 80028c6:	e003      	b.n	80028d0 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	617b      	str	r3, [r7, #20]
      break;
 80028ce:	bf00      	nop
  }

  return ret;
 80028d0:	697b      	ldr	r3, [r7, #20]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop

080028dc <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	4619      	mov	r1, r3
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ff4e 	bl	8002794 <LIS2DW12_ACC_GetAxesRaw>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	e03c      	b.n	800297e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fbd6 	bl	80020bc <LIS2DW12_ACC_GetSensitivity>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e030      	b.n	800297e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800291c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002928:	edd7 7a03 	vldr	s15, [r7, #12]
 800292c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002934:	ee17 2a90 	vmov	r2, s15
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800293c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002948:	edd7 7a03 	vldr	s15, [r7, #12]
 800294c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002954:	ee17 2a90 	vmov	r2, s15
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800295c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002968:	edd7 7a03 	vldr	s15, [r7, #12]
 800296c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002974:	ee17 2a90 	vmov	r2, s15
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
 8002992:	4613      	mov	r3, r2
 8002994:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f103 001c 	add.w	r0, r3, #28
 800299c:	1cba      	adds	r2, r7, #2
 800299e:	78f9      	ldrb	r1, [r7, #3]
 80029a0:	2301      	movs	r3, #1
 80029a2:	f000 fa07 	bl	8002db4 <lis2dw12_write_reg>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	e000      	b.n	80029b4 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80029c8:	460b      	mov	r3, r1
 80029ca:	71fb      	strb	r3, [r7, #7]
 80029cc:	4613      	mov	r3, r2
 80029ce:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d80b      	bhi.n	80029f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80029d8:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	08002a1d 	.word	0x08002a1d
 80029e4:	08002a49 	.word	0x08002a49
 80029e8:	08002a75 	.word	0x08002a75
 80029ec:	08002aa1 	.word	0x08002aa1
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80029f0:	79bb      	ldrb	r3, [r7, #6]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d002      	beq.n	80029fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80029f6:	2304      	movs	r3, #4
 80029f8:	75fb      	strb	r3, [r7, #23]
          break;
 80029fa:	e002      	b.n	8002a02 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80029fc:	2314      	movs	r3, #20
 80029fe:	75fb      	strb	r3, [r7, #23]
          break;
 8002a00:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a06:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d400      	bmi.n	8002a16 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002a14:	e05a      	b.n	8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002a16:	4b6f      	ldr	r3, [pc, #444]	; (8002bd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002a18:	60bb      	str	r3, [r7, #8]
      break;
 8002a1a:	e057      	b.n	8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8002a1c:	79bb      	ldrb	r3, [r7, #6]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d002      	beq.n	8002a28 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002a22:	2303      	movs	r3, #3
 8002a24:	75fb      	strb	r3, [r7, #23]
          break;
 8002a26:	e002      	b.n	8002a2e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002a28:	2313      	movs	r3, #19
 8002a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8002a2c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002a2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a32:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002bd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	dc00      	bgt.n	8002a42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002a40:	e044      	b.n	8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002a42:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002a44:	60bb      	str	r3, [r7, #8]
      break;
 8002a46:	e041      	b.n	8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002a48:	79bb      	ldrb	r3, [r7, #6]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d002      	beq.n	8002a54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	75fb      	strb	r3, [r7, #23]
          break;
 8002a52:	e002      	b.n	8002a5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002a54:	2312      	movs	r3, #18
 8002a56:	75fb      	strb	r3, [r7, #23]
          break;
 8002a58:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002a5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a5e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002bd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	dc00      	bgt.n	8002a6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002a6c:	e02e      	b.n	8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002a70:	60bb      	str	r3, [r7, #8]
      break;
 8002a72:	e02b      	b.n	8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002a74:	79bb      	ldrb	r3, [r7, #6]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d002      	beq.n	8002a80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8002a7e:	e002      	b.n	8002a86 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002a80:	2311      	movs	r3, #17
 8002a82:	75fb      	strb	r3, [r7, #23]
          break;
 8002a84:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002a86:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a8a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002bd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	dc00      	bgt.n	8002a9a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002a98:	e018      	b.n	8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002a9a:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002a9c:	60bb      	str	r3, [r7, #8]
      break;
 8002a9e:	e015      	b.n	8002acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002aa0:	79bb      	ldrb	r3, [r7, #6]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d002      	beq.n	8002aac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
          break;
 8002aaa:	e002      	b.n	8002ab2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002aac:	2310      	movs	r3, #16
 8002aae:	75fb      	strb	r3, [r7, #23]
          break;
 8002ab0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ab6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002bd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	dc00      	bgt.n	8002ac6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002ac4:	e001      	b.n	8002aca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002ac6:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002acc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ad0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002be0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	d801      	bhi.n	8002ae2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e04d      	b.n	8002b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af2:	d801      	bhi.n	8002af8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e042      	b.n	8002b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002af8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002afc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b08:	d801      	bhi.n	8002b0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e037      	b.n	8002b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b12:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002be4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	d801      	bhi.n	8002b24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e02c      	b.n	8002b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b28:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002be8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	d801      	bhi.n	8002b3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002b36:	2305      	movs	r3, #5
 8002b38:	e021      	b.n	8002b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b3e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002bd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	d801      	bhi.n	8002b50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002b4c:	2306      	movs	r3, #6
 8002b4e:	e016      	b.n	8002b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b54:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002bec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b60:	d801      	bhi.n	8002b66 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e00b      	b.n	8002b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b66:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b6a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002bf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b76:	d801      	bhi.n	8002b7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002b78:	2308      	movs	r3, #8
 8002b7a:	e000      	b.n	8002b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b7c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002b7e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	331c      	adds	r3, #28
 8002b84:	7dba      	ldrb	r2, [r7, #22]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fa33 	bl	8002ff4 <lis2dw12_data_rate_set>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
 8002b98:	e018      	b.n	8002bcc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	331c      	adds	r3, #28
 8002b9e:	7dfa      	ldrb	r2, [r7, #23]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f91e 	bl	8002de4 <lis2dw12_power_mode_set>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	e00b      	b.n	8002bcc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	79ba      	ldrb	r2, [r7, #6]
 8002bc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	41480000 	.word	0x41480000
 8002bd8:	43480000 	.word	0x43480000
 8002bdc:	43480000 	.word	0x43480000
 8002be0:	3fcccccd 	.word	0x3fcccccd
 8002be4:	42480000 	.word	0x42480000
 8002be8:	42c80000 	.word	0x42c80000
 8002bec:	43c80000 	.word	0x43c80000
 8002bf0:	44480000 	.word	0x44480000

08002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c00:	460b      	mov	r3, r1
 8002c02:	71fb      	strb	r3, [r7, #7]
 8002c04:	4613      	mov	r3, r2
 8002c06:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	79fa      	ldrb	r2, [r7, #7]
 8002c0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	79ba      	ldrb	r2, [r7, #6]
 8002c14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002c18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c1c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002cdc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c28:	d801      	bhi.n	8002c2e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002c2c:	e04d      	b.n	8002cca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002c2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c32:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3e:	d801      	bhi.n	8002c44 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002c40:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002c42:	e042      	b.n	8002cca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c48:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	d801      	bhi.n	8002c5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002c58:	e037      	b.n	8002cca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002c5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c5e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002cec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6a:	d801      	bhi.n	8002c70 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002c6c:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002c6e:	e02c      	b.n	8002cca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002c70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c74:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	d801      	bhi.n	8002c86 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002c84:	e021      	b.n	8002cca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002c86:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c8a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002cfc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	d801      	bhi.n	8002c9c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002c9a:	e016      	b.n	8002cca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cac:	d801      	bhi.n	8002cb2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002cb0:	e00b      	b.n	8002cca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002cb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cb6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002d0c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc2:	d801      	bhi.n	8002cc8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002cc6:	e000      	b.n	8002cca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	3fcccccd 	.word	0x3fcccccd
 8002ce0:	3fcccccd 	.word	0x3fcccccd
 8002ce4:	41480000 	.word	0x41480000
 8002ce8:	41c80000 	.word	0x41c80000
 8002cec:	42480000 	.word	0x42480000
 8002cf0:	42480000 	.word	0x42480000
 8002cf4:	42c80000 	.word	0x42c80000
 8002cf8:	42c80000 	.word	0x42c80000
 8002cfc:	43480000 	.word	0x43480000
 8002d00:	43480000 	.word	0x43480000
 8002d04:	43c80000 	.word	0x43c80000
 8002d08:	43c80000 	.word	0x43c80000
 8002d0c:	44480000 	.word	0x44480000
 8002d10:	44480000 	.word	0x44480000
 8002d14:	44c80000 	.word	0x44c80000

08002d18 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	460b      	mov	r3, r1
 8002d26:	72fb      	strb	r3, [r7, #11]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	695c      	ldr	r4, [r3, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	7b1b      	ldrb	r3, [r3, #12]
 8002d38:	b298      	uxth	r0, r3
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
 8002d3c:	b299      	uxth	r1, r3
 8002d3e:	893b      	ldrh	r3, [r7, #8]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	47a0      	blx	r4
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd90      	pop	{r4, r7, pc}

08002d4e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d4e:	b590      	push	{r4, r7, lr}
 8002d50:	b087      	sub	sp, #28
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	72fb      	strb	r3, [r7, #11]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	691c      	ldr	r4, [r3, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	7b1b      	ldrb	r3, [r3, #12]
 8002d6e:	b298      	uxth	r0, r3
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	b299      	uxth	r1, r3
 8002d74:	893b      	ldrh	r3, [r7, #8]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	47a0      	blx	r4
 8002d7a:	4603      	mov	r3, r0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd90      	pop	{r4, r7, pc}

08002d84 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	460b      	mov	r3, r1
 8002d92:	72fb      	strb	r3, [r7, #11]
 8002d94:	4613      	mov	r3, r2
 8002d96:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685c      	ldr	r4, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6898      	ldr	r0, [r3, #8]
 8002da0:	893b      	ldrh	r3, [r7, #8]
 8002da2:	7af9      	ldrb	r1, [r7, #11]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	47a0      	blx	r4
 8002da8:	6178      	str	r0, [r7, #20]

  return ret;
 8002daa:	697b      	ldr	r3, [r7, #20]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}

08002db4 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	72fb      	strb	r3, [r7, #11]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681c      	ldr	r4, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6898      	ldr	r0, [r3, #8]
 8002dd0:	893b      	ldrh	r3, [r7, #8]
 8002dd2:	7af9      	ldrb	r1, [r7, #11]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	47a0      	blx	r4
 8002dd8:	6178      	str	r0, [r7, #20]

  return ret;
 8002dda:	697b      	ldr	r3, [r7, #20]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}

08002de4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002df0:	f107 0210 	add.w	r2, r7, #16
 8002df4:	2301      	movs	r3, #1
 8002df6:	2120      	movs	r1, #32
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffc3 	bl	8002d84 <lis2dw12_read_reg>
 8002dfe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	7c3b      	ldrb	r3, [r7, #16]
 8002e12:	f362 0383 	bfi	r3, r2, #2, #2
 8002e16:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	7c3b      	ldrb	r3, [r7, #16]
 8002e22:	f362 0301 	bfi	r3, r2, #0, #2
 8002e26:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e28:	f107 0210 	add.w	r2, r7, #16
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	2120      	movs	r1, #32
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ffbf 	bl	8002db4 <lis2dw12_write_reg>
 8002e36:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d107      	bne.n	8002e4e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002e3e:	f107 020c 	add.w	r2, r7, #12
 8002e42:	2301      	movs	r3, #1
 8002e44:	2125      	movs	r1, #37	; 0x25
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff9c 	bl	8002d84 <lis2dw12_read_reg>
 8002e4c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d110      	bne.n	8002e76 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	7b3b      	ldrb	r3, [r7, #12]
 8002e60:	f362 0382 	bfi	r3, r2, #2, #1
 8002e64:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002e66:	f107 020c 	add.w	r2, r7, #12
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	2125      	movs	r1, #37	; 0x25
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffa0 	bl	8002db4 <lis2dw12_write_reg>
 8002e74:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002e76:	697b      	ldr	r3, [r7, #20]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e8a:	f107 0210 	add.w	r2, r7, #16
 8002e8e:	2301      	movs	r3, #1
 8002e90:	2120      	movs	r1, #32
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff76 	bl	8002d84 <lis2dw12_read_reg>
 8002e98:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 80a3 	bne.w	8002fe8 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002ea2:	f107 020c 	add.w	r2, r7, #12
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	2125      	movs	r1, #37	; 0x25
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ff6a 	bl	8002d84 <lis2dw12_read_reg>
 8002eb0:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002eb2:	7b3b      	ldrb	r3, [r7, #12]
 8002eb4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	011a      	lsls	r2, r3, #4
 8002ebc:	7c3b      	ldrb	r3, [r7, #16]
 8002ebe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002ec8:	7c3a      	ldrb	r2, [r7, #16]
 8002eca:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002ece:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002ed0:	4413      	add	r3, r2
 8002ed2:	2b1b      	cmp	r3, #27
 8002ed4:	f200 8084 	bhi.w	8002fe0 <lis2dw12_power_mode_get+0x160>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <lis2dw12_power_mode_get+0x60>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002f71 	.word	0x08002f71
 8002ee4:	08002f69 	.word	0x08002f69
 8002ee8:	08002f61 	.word	0x08002f61
 8002eec:	08002f59 	.word	0x08002f59
 8002ef0:	08002f51 	.word	0x08002f51
 8002ef4:	08002fe1 	.word	0x08002fe1
 8002ef8:	08002fe1 	.word	0x08002fe1
 8002efc:	08002fe1 	.word	0x08002fe1
 8002f00:	08002f91 	.word	0x08002f91
 8002f04:	08002f89 	.word	0x08002f89
 8002f08:	08002f81 	.word	0x08002f81
 8002f0c:	08002f79 	.word	0x08002f79
 8002f10:	08002fe1 	.word	0x08002fe1
 8002f14:	08002fe1 	.word	0x08002fe1
 8002f18:	08002fe1 	.word	0x08002fe1
 8002f1c:	08002fe1 	.word	0x08002fe1
 8002f20:	08002fb9 	.word	0x08002fb9
 8002f24:	08002fb1 	.word	0x08002fb1
 8002f28:	08002fa9 	.word	0x08002fa9
 8002f2c:	08002fa1 	.word	0x08002fa1
 8002f30:	08002f99 	.word	0x08002f99
 8002f34:	08002fe1 	.word	0x08002fe1
 8002f38:	08002fe1 	.word	0x08002fe1
 8002f3c:	08002fe1 	.word	0x08002fe1
 8002f40:	08002fd9 	.word	0x08002fd9
 8002f44:	08002fd1 	.word	0x08002fd1
 8002f48:	08002fc9 	.word	0x08002fc9
 8002f4c:	08002fc1 	.word	0x08002fc1
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2204      	movs	r2, #4
 8002f54:	701a      	strb	r2, [r3, #0]
        break;
 8002f56:	e048      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	701a      	strb	r2, [r3, #0]
        break;
 8002f5e:	e044      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2202      	movs	r2, #2
 8002f64:	701a      	strb	r2, [r3, #0]
        break;
 8002f66:	e040      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
        break;
 8002f6e:	e03c      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
        break;
 8002f76:	e038      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	220b      	movs	r2, #11
 8002f7c:	701a      	strb	r2, [r3, #0]
        break;
 8002f7e:	e034      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	220a      	movs	r2, #10
 8002f84:	701a      	strb	r2, [r3, #0]
        break;
 8002f86:	e030      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2209      	movs	r2, #9
 8002f8c:	701a      	strb	r2, [r3, #0]
        break;
 8002f8e:	e02c      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2208      	movs	r2, #8
 8002f94:	701a      	strb	r2, [r3, #0]
        break;
 8002f96:	e028      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2214      	movs	r2, #20
 8002f9c:	701a      	strb	r2, [r3, #0]
        break;
 8002f9e:	e024      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2213      	movs	r2, #19
 8002fa4:	701a      	strb	r2, [r3, #0]
        break;
 8002fa6:	e020      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2212      	movs	r2, #18
 8002fac:	701a      	strb	r2, [r3, #0]
        break;
 8002fae:	e01c      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2211      	movs	r2, #17
 8002fb4:	701a      	strb	r2, [r3, #0]
        break;
 8002fb6:	e018      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	701a      	strb	r2, [r3, #0]
        break;
 8002fbe:	e014      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	221b      	movs	r2, #27
 8002fc4:	701a      	strb	r2, [r3, #0]
        break;
 8002fc6:	e010      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	221a      	movs	r2, #26
 8002fcc:	701a      	strb	r2, [r3, #0]
        break;
 8002fce:	e00c      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2219      	movs	r2, #25
 8002fd4:	701a      	strb	r2, [r3, #0]
        break;
 8002fd6:	e008      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2218      	movs	r2, #24
 8002fdc:	701a      	strb	r2, [r3, #0]
        break;
 8002fde:	e004      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	701a      	strb	r2, [r3, #0]
        break;
 8002fe6:	e000      	b.n	8002fea <lis2dw12_power_mode_get+0x16a>
    }
  }
 8002fe8:	bf00      	nop

  return ret;
 8002fea:	697b      	ldr	r3, [r7, #20]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003000:	f107 0210 	add.w	r2, r7, #16
 8003004:	2301      	movs	r3, #1
 8003006:	2120      	movs	r1, #32
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff febb 	bl	8002d84 <lis2dw12_read_reg>
 800300e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	b2da      	uxtb	r2, r3
 800301e:	7c3b      	ldrb	r3, [r7, #16]
 8003020:	f362 1307 	bfi	r3, r2, #4, #4
 8003024:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003026:	f107 0210 	add.w	r2, r7, #16
 800302a:	2301      	movs	r3, #1
 800302c:	2120      	movs	r1, #32
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fec0 	bl	8002db4 <lis2dw12_write_reg>
 8003034:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800303c:	f107 020c 	add.w	r2, r7, #12
 8003040:	2301      	movs	r3, #1
 8003042:	2122      	movs	r1, #34	; 0x22
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fe9d 	bl	8002d84 <lis2dw12_read_reg>
 800304a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d110      	bne.n	8003074 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	b2da      	uxtb	r2, r3
 800305c:	7b3b      	ldrb	r3, [r7, #12]
 800305e:	f362 0301 	bfi	r3, r2, #0, #2
 8003062:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003064:	f107 020c 	add.w	r2, r7, #12
 8003068:	2301      	movs	r3, #1
 800306a:	2122      	movs	r1, #34	; 0x22
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff fea1 	bl	8002db4 <lis2dw12_write_reg>
 8003072:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003074:	697b      	ldr	r3, [r7, #20]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800308a:	f107 0210 	add.w	r2, r7, #16
 800308e:	2301      	movs	r3, #1
 8003090:	2120      	movs	r1, #32
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fe76 	bl	8002d84 <lis2dw12_read_reg>
 8003098:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 80b3 	bne.w	8003208 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80030a2:	f107 020c 	add.w	r2, r7, #12
 80030a6:	2301      	movs	r3, #1
 80030a8:	2122      	movs	r1, #34	; 0x22
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff fe6a 	bl	8002d84 <lis2dw12_read_reg>
 80030b0:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80030b2:	7b3b      	ldrb	r3, [r7, #12]
 80030b4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	7c3a      	ldrb	r2, [r7, #16]
 80030be:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	4413      	add	r3, r2
 80030c6:	2b32      	cmp	r3, #50	; 0x32
 80030c8:	f200 809a 	bhi.w	8003200 <lis2dw12_data_rate_get+0x180>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <lis2dw12_data_rate_get+0x54>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080031a1 	.word	0x080031a1
 80030d8:	080031a9 	.word	0x080031a9
 80030dc:	080031b1 	.word	0x080031b1
 80030e0:	080031b9 	.word	0x080031b9
 80030e4:	080031c1 	.word	0x080031c1
 80030e8:	080031c9 	.word	0x080031c9
 80030ec:	080031d1 	.word	0x080031d1
 80030f0:	080031d9 	.word	0x080031d9
 80030f4:	080031e1 	.word	0x080031e1
 80030f8:	080031e9 	.word	0x080031e9
 80030fc:	08003201 	.word	0x08003201
 8003100:	08003201 	.word	0x08003201
 8003104:	08003201 	.word	0x08003201
 8003108:	08003201 	.word	0x08003201
 800310c:	08003201 	.word	0x08003201
 8003110:	08003201 	.word	0x08003201
 8003114:	08003201 	.word	0x08003201
 8003118:	08003201 	.word	0x08003201
 800311c:	080031f9 	.word	0x080031f9
 8003120:	08003201 	.word	0x08003201
 8003124:	08003201 	.word	0x08003201
 8003128:	08003201 	.word	0x08003201
 800312c:	08003201 	.word	0x08003201
 8003130:	08003201 	.word	0x08003201
 8003134:	08003201 	.word	0x08003201
 8003138:	08003201 	.word	0x08003201
 800313c:	08003201 	.word	0x08003201
 8003140:	08003201 	.word	0x08003201
 8003144:	08003201 	.word	0x08003201
 8003148:	08003201 	.word	0x08003201
 800314c:	08003201 	.word	0x08003201
 8003150:	08003201 	.word	0x08003201
 8003154:	08003201 	.word	0x08003201
 8003158:	08003201 	.word	0x08003201
 800315c:	08003201 	.word	0x08003201
 8003160:	08003201 	.word	0x08003201
 8003164:	08003201 	.word	0x08003201
 8003168:	08003201 	.word	0x08003201
 800316c:	08003201 	.word	0x08003201
 8003170:	08003201 	.word	0x08003201
 8003174:	08003201 	.word	0x08003201
 8003178:	08003201 	.word	0x08003201
 800317c:	08003201 	.word	0x08003201
 8003180:	08003201 	.word	0x08003201
 8003184:	08003201 	.word	0x08003201
 8003188:	08003201 	.word	0x08003201
 800318c:	08003201 	.word	0x08003201
 8003190:	08003201 	.word	0x08003201
 8003194:	08003201 	.word	0x08003201
 8003198:	08003201 	.word	0x08003201
 800319c:	080031f1 	.word	0x080031f1
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
        break;
 80031a6:	e030      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
        break;
 80031ae:	e02c      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2202      	movs	r2, #2
 80031b4:	701a      	strb	r2, [r3, #0]
        break;
 80031b6:	e028      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2203      	movs	r2, #3
 80031bc:	701a      	strb	r2, [r3, #0]
        break;
 80031be:	e024      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2204      	movs	r2, #4
 80031c4:	701a      	strb	r2, [r3, #0]
        break;
 80031c6:	e020      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2205      	movs	r2, #5
 80031cc:	701a      	strb	r2, [r3, #0]
        break;
 80031ce:	e01c      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2206      	movs	r2, #6
 80031d4:	701a      	strb	r2, [r3, #0]
        break;
 80031d6:	e018      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2207      	movs	r2, #7
 80031dc:	701a      	strb	r2, [r3, #0]
        break;
 80031de:	e014      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2208      	movs	r2, #8
 80031e4:	701a      	strb	r2, [r3, #0]
        break;
 80031e6:	e010      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2209      	movs	r2, #9
 80031ec:	701a      	strb	r2, [r3, #0]
        break;
 80031ee:	e00c      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2232      	movs	r2, #50	; 0x32
 80031f4:	701a      	strb	r2, [r3, #0]
        break;
 80031f6:	e008      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2212      	movs	r2, #18
 80031fc:	701a      	strb	r2, [r3, #0]
        break;
 80031fe:	e004      	b.n	800320a <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
        break;
 8003206:	e000      	b.n	800320a <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003208:	bf00      	nop

  return ret;
 800320a:	697b      	ldr	r3, [r7, #20]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003220:	f107 0208 	add.w	r2, r7, #8
 8003224:	2301      	movs	r3, #1
 8003226:	2121      	movs	r1, #33	; 0x21
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fdab 	bl	8002d84 <lis2dw12_read_reg>
 800322e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	b2da      	uxtb	r2, r3
 800323e:	7a3b      	ldrb	r3, [r7, #8]
 8003240:	f362 03c3 	bfi	r3, r2, #3, #1
 8003244:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003246:	f107 0208 	add.w	r2, r7, #8
 800324a:	2301      	movs	r3, #1
 800324c:	2121      	movs	r1, #33	; 0x21
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fdb0 	bl	8002db4 <lis2dw12_write_reg>
 8003254:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800326c:	f107 0208 	add.w	r2, r7, #8
 8003270:	2301      	movs	r3, #1
 8003272:	2125      	movs	r1, #37	; 0x25
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fd85 	bl	8002d84 <lis2dw12_read_reg>
 800327a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	b2da      	uxtb	r2, r3
 800328a:	7a3b      	ldrb	r3, [r7, #8]
 800328c:	f362 1305 	bfi	r3, r2, #4, #2
 8003290:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003292:	f107 0208 	add.w	r2, r7, #8
 8003296:	2301      	movs	r3, #1
 8003298:	2125      	movs	r1, #37	; 0x25
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fd8a 	bl	8002db4 <lis2dw12_write_reg>
 80032a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80032b6:	f107 0208 	add.w	r2, r7, #8
 80032ba:	2301      	movs	r3, #1
 80032bc:	2125      	movs	r1, #37	; 0x25
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fd60 	bl	8002d84 <lis2dw12_read_reg>
 80032c4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80032c6:	7a3b      	ldrb	r3, [r7, #8]
 80032c8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d81a      	bhi.n	8003308 <lis2dw12_full_scale_get+0x5c>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <lis2dw12_full_scale_get+0x2c>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032e9 	.word	0x080032e9
 80032dc:	080032f1 	.word	0x080032f1
 80032e0:	080032f9 	.word	0x080032f9
 80032e4:	08003301 	.word	0x08003301
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
      break;
 80032ee:	e00f      	b.n	8003310 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
      break;
 80032f6:	e00b      	b.n	8003310 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
      break;
 80032fe:	e007      	b.n	8003310 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2203      	movs	r2, #3
 8003304:	701a      	strb	r2, [r3, #0]
      break;
 8003306:	e003      	b.n	8003310 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
      break;
 800330e:	bf00      	nop
  }

  return ret;
 8003310:	68fb      	ldr	r3, [r7, #12]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop

0800331c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003326:	f107 020c 	add.w	r2, r7, #12
 800332a:	2306      	movs	r3, #6
 800332c:	2128      	movs	r1, #40	; 0x28
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fd28 	bl	8002d84 <lis2dw12_read_reg>
 8003334:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003336:	7b7b      	ldrb	r3, [r7, #13]
 8003338:	b21a      	sxth	r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003344:	b29b      	uxth	r3, r3
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	b29a      	uxth	r2, r3
 800334a:	7b3b      	ldrb	r3, [r7, #12]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4413      	add	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	b21a      	sxth	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	3302      	adds	r3, #2
 800335e:	b212      	sxth	r2, r2
 8003360:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	3302      	adds	r3, #2
 8003366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336a:	b29b      	uxth	r3, r3
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	b29a      	uxth	r2, r3
 8003370:	7bbb      	ldrb	r3, [r7, #14]
 8003372:	b29b      	uxth	r3, r3
 8003374:	4413      	add	r3, r2
 8003376:	b29a      	uxth	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	3302      	adds	r3, #2
 800337c:	b212      	sxth	r2, r2
 800337e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003380:	7c7a      	ldrb	r2, [r7, #17]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	3304      	adds	r3, #4
 8003386:	b212      	sxth	r2, r2
 8003388:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	3304      	adds	r3, #4
 800338e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003392:	b29b      	uxth	r3, r3
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	b29a      	uxth	r2, r3
 8003398:	7c3b      	ldrb	r3, [r7, #16]
 800339a:	b29b      	uxth	r3, r3
 800339c:	4413      	add	r3, r2
 800339e:	b29a      	uxth	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	3304      	adds	r3, #4
 80033a4:	b212      	sxth	r2, r2
 80033a6:	801a      	strh	r2, [r3, #0]

  return ret;
 80033a8:	697b      	ldr	r3, [r7, #20]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80033bc:	2301      	movs	r3, #1
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	210f      	movs	r1, #15
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fcde 	bl	8002d84 <lis2dw12_read_reg>
 80033c8:	60f8      	str	r0, [r7, #12]

  return ret;
 80033ca:	68fb      	ldr	r3, [r7, #12]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80033e0:	f107 0208 	add.w	r2, r7, #8
 80033e4:	2301      	movs	r3, #1
 80033e6:	2121      	movs	r1, #33	; 0x21
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fccb 	bl	8002d84 <lis2dw12_read_reg>
 80033ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10f      	bne.n	8003416 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	7a3b      	ldrb	r3, [r7, #8]
 8003400:	f362 0382 	bfi	r3, r2, #2, #1
 8003404:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003406:	f107 0208 	add.w	r2, r7, #8
 800340a:	2301      	movs	r3, #1
 800340c:	2121      	movs	r1, #33	; 0x21
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fcd0 	bl	8002db4 <lis2dw12_write_reg>
 8003414:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800342c:	f107 0208 	add.w	r2, r7, #8
 8003430:	2301      	movs	r3, #1
 8003432:	212e      	movs	r1, #46	; 0x2e
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff fca5 	bl	8002d84 <lis2dw12_read_reg>
 800343a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10f      	bne.n	8003462 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	b2da      	uxtb	r2, r3
 800344a:	7a3b      	ldrb	r3, [r7, #8]
 800344c:	f362 1347 	bfi	r3, r2, #5, #3
 8003450:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003452:	f107 0208 	add.w	r2, r7, #8
 8003456:	2301      	movs	r3, #1
 8003458:	212e      	movs	r1, #46	; 0x2e
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff fcaa 	bl	8002db4 <lis2dw12_write_reg>
 8003460:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d103      	bne.n	8003488 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e063      	b.n	8003550 <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	7b1a      	ldrb	r2, [r3, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a26      	ldr	r2, [pc, #152]	; (800355c <LIS2MDL_RegisterBusIO+0xf0>)
 80034c4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a25      	ldr	r2, [pc, #148]	; (8003560 <LIS2MDL_RegisterBusIO+0xf4>)
 80034ca:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	e036      	b.n	8003550 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4798      	blx	r3
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e02c      	b.n	8003550 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d028      	beq.n	8003550 <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d123      	bne.n	8003550 <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d10d      	bne.n	800352c <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003510:	2334      	movs	r3, #52	; 0x34
 8003512:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	461a      	mov	r2, r3
 8003518:	2162      	movs	r1, #98	; 0x62
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fb1b 	bl	8003b56 <LIS2MDL_Write_Reg>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d014      	beq.n	8003550 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295
 800352a:	e012      	b.n	8003552 <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d101      	bne.n	8003538 <LIS2MDL_RegisterBusIO+0xcc>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	e00c      	b.n	8003552 <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	331c      	adds	r3, #28
 800353c:	2101      	movs	r1, #1
 800353e:	4618      	mov	r0, r3
 8003540:	f000 ff70 	bl	8004424 <lis2mdl_i2c_interface_set>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295
 800354e:	e000      	b.n	8003552 <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 8003550:	68fb      	ldr	r3, [r7, #12]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	08003bad 	.word	0x08003bad
 8003560:	08003c2f 	.word	0x08003c2f

08003564 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d144      	bne.n	80035fe <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003574:	f107 0208 	add.w	r2, r7, #8
 8003578:	2301      	movs	r3, #1
 800357a:	2162      	movs	r1, #98	; 0x62
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fb97 	bl	8003cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003588:	f04f 33ff 	mov.w	r3, #4294967295
 800358c:	e06c      	b.n	8003668 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800358e:	f107 020c 	add.w	r2, r7, #12
 8003592:	2301      	movs	r3, #1
 8003594:	2160      	movs	r1, #96	; 0x60
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fb8a 	bl	8003cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
 80035a6:	e05f      	b.n	8003668 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80035a8:	7a3b      	ldrb	r3, [r7, #8]
 80035aa:	f043 0310 	orr.w	r3, r3, #16
 80035ae:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80035b0:	7a3b      	ldrb	r3, [r7, #8]
 80035b2:	f36f 0341 	bfc	r3, #1, #1
 80035b6:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80035b8:	7b3b      	ldrb	r3, [r7, #12]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f362 0301 	bfi	r3, r2, #0, #2
 80035c0:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80035c2:	7b3b      	ldrb	r3, [r7, #12]
 80035c4:	f043 030c 	orr.w	r3, r3, #12
 80035c8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80035ca:	f107 0208 	add.w	r2, r7, #8
 80035ce:	2301      	movs	r3, #1
 80035d0:	2162      	movs	r1, #98	; 0x62
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fcab 	bl	8003f2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295
 80035e2:	e041      	b.n	8003668 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80035e4:	f107 020c 	add.w	r2, r7, #12
 80035e8:	2301      	movs	r3, #1
 80035ea:	2160      	movs	r1, #96	; 0x60
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fc9e 	bl	8003f2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d032      	beq.n	800365e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	e034      	b.n	8003668 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	331c      	adds	r3, #28
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fe65 	bl	80042d4 <lis2mdl_block_data_update_set>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003610:	f04f 33ff 	mov.w	r3, #4294967295
 8003614:	e028      	b.n	8003668 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	331c      	adds	r3, #28
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fdd4 	bl	80041ca <lis2mdl_operating_mode_set>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
 800362c:	e01c      	b.n	8003668 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	331c      	adds	r3, #28
 8003632:	2103      	movs	r1, #3
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fdee 	bl	8004216 <lis2mdl_data_rate_set>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	e010      	b.n	8003668 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	331c      	adds	r3, #28
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fec3 	bl	80043d8 <lis2mdl_self_test_set>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	e004      	b.n	8003668 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8a5 	bl	80037c8 <LIS2MDL_MAG_Disable>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003684:	f04f 33ff 	mov.w	r3, #4294967295
 8003688:	e004      	b.n	8003694 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d10b      	bne.n	80036c6 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80036ae:	2301      	movs	r3, #1
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	214f      	movs	r1, #79	; 0x4f
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fafb 	bl	8003cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295
 80036c4:	e00c      	b.n	80036e0 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	331c      	adds	r3, #28
 80036ca:	6839      	ldr	r1, [r7, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fe72 	bl	80043b6 <lis2mdl_device_id_get>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	e000      	b.n	80036e0 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2200      	movs	r2, #0
 800370e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2232      	movs	r2, #50	; 0x32
 800371a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4a04      	ldr	r2, [pc, #16]	; (8003740 <LIS2MDL_GetCapabilities+0x58>)
 8003730:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	42c80000 	.word	0x42c80000

08003744 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e032      	b.n	80037c0 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d11d      	bne.n	800379e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003762:	f107 020c 	add.w	r2, r7, #12
 8003766:	2301      	movs	r3, #1
 8003768:	2160      	movs	r1, #96	; 0x60
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 faa0 	bl	8003cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295
 800377a:	e021      	b.n	80037c0 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 800377c:	7b3b      	ldrb	r3, [r7, #12]
 800377e:	f36f 0301 	bfc	r3, #0, #2
 8003782:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003784:	f107 020c 	add.w	r2, r7, #12
 8003788:	2301      	movs	r3, #1
 800378a:	2160      	movs	r1, #96	; 0x60
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fbce 	bl	8003f2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00e      	beq.n	80037b6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	e010      	b.n	80037c0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	331c      	adds	r3, #28
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fd10 	bl	80041ca <lis2mdl_operating_mode_set>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	e004      	b.n	80037c0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e033      	b.n	8003846 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d11e      	bne.n	8003824 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80037e6:	f107 020c 	add.w	r2, r7, #12
 80037ea:	2301      	movs	r3, #1
 80037ec:	2160      	movs	r1, #96	; 0x60
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa5e 	bl	8003cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	e022      	b.n	8003846 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003800:	7b3b      	ldrb	r3, [r7, #12]
 8003802:	2202      	movs	r2, #2
 8003804:	f362 0301 	bfi	r3, r2, #0, #2
 8003808:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800380a:	f107 020c 	add.w	r2, r7, #12
 800380e:	2301      	movs	r3, #1
 8003810:	2160      	movs	r1, #96	; 0x60
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fb8b 	bl	8003f2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00e      	beq.n	800383c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	e010      	b.n	8003846 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	331c      	adds	r3, #28
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fccd 	bl	80041ca <lis2mdl_operating_mode_set>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295
 800383a:	e004      	b.n	8003846 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800385e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	331c      	adds	r3, #28
 8003882:	f107 020b 	add.w	r2, r7, #11
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fceb 	bl	8004264 <lis2mdl_data_rate_get>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
 8003898:	e023      	b.n	80038e2 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800389a:	7afb      	ldrb	r3, [r7, #11]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d81b      	bhi.n	80038d8 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038c1 	.word	0x080038c1
 80038b0:	080038c9 	.word	0x080038c9
 80038b4:	080038d1 	.word	0x080038d1
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80038bc:	601a      	str	r2, [r3, #0]
      break;
 80038be:	e00f      	b.n	80038e0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80038c4:	601a      	str	r2, [r3, #0]
      break;
 80038c6:	e00b      	b.n	80038e0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80038cc:	601a      	str	r2, [r3, #0]
      break;
 80038ce:	e007      	b.n	80038e0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80038d4:	601a      	str	r2, [r3, #0]
      break;
 80038d6:	e003      	b.n	80038e0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80038d8:	f04f 33ff 	mov.w	r3, #4294967295
 80038dc:	60fb      	str	r3, [r7, #12]
      break;
 80038de:	bf00      	nop
  }

  return ret;
 80038e0:	68fb      	ldr	r3, [r7, #12]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	41200000 	.word	0x41200000
 80038f0:	41a00000 	.word	0x41a00000
 80038f4:	42480000 	.word	0x42480000
 80038f8:	42c80000 	.word	0x42c80000

080038fc <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003908:	edd7 7a00 	vldr	s15, [r7]
 800390c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	d801      	bhi.n	800391e <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800391a:	2300      	movs	r3, #0
 800391c:	e016      	b.n	800394c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800391e:	edd7 7a00 	vldr	s15, [r7]
 8003922:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392e:	d801      	bhi.n	8003934 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003930:	2301      	movs	r3, #1
 8003932:	e00b      	b.n	800394c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003934:	edd7 7a00 	vldr	s15, [r7]
 8003938:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80039c0 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 800393c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003944:	d801      	bhi.n	800394a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8003946:	2302      	movs	r3, #2
 8003948:	e000      	b.n	800394c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800394a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 800394c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d121      	bne.n	800399a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003956:	f107 020c 	add.w	r2, r7, #12
 800395a:	2301      	movs	r3, #1
 800395c:	2160      	movs	r1, #96	; 0x60
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f9a6 	bl	8003cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	e022      	b.n	80039b6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	b2da      	uxtb	r2, r3
 8003978:	7b3b      	ldrb	r3, [r7, #12]
 800397a:	f362 0383 	bfi	r3, r2, #2, #2
 800397e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003980:	f107 020c 	add.w	r2, r7, #12
 8003984:	2301      	movs	r3, #1
 8003986:	2160      	movs	r1, #96	; 0x60
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fad0 	bl	8003f2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00f      	beq.n	80039b4 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	e00d      	b.n	80039b6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	331c      	adds	r3, #28
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fc37 	bl	8004216 <lis2mdl_data_rate_set>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	e000      	b.n	80039b6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	42480000 	.word	0x42480000

080039c4 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2232      	movs	r2, #50	; 0x32
 80039d2:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	331c      	adds	r3, #28
 8003a08:	f107 0208 	add.w	r2, r7, #8
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fc86 	bl	8004320 <lis2mdl_magnetic_raw_get>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	e00c      	b.n	8003a3a <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003a20:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003a28:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003a30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b088      	sub	sp, #32
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d137      	bne.n	8003ac4 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003a54:	f107 0218 	add.w	r2, r7, #24
 8003a58:	2306      	movs	r3, #6
 8003a5a:	2168      	movs	r1, #104	; 0x68
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f927 	bl	8003cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	e06f      	b.n	8003b4e <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003a6e:	7e7b      	ldrb	r3, [r7, #25]
 8003a70:	b21b      	sxth	r3, r3
 8003a72:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003a74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	7e3b      	ldrb	r3, [r7, #24]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003a8a:	7efb      	ldrb	r3, [r7, #27]
 8003a8c:	b21b      	sxth	r3, r3
 8003a8e:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003a90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	7ebb      	ldrb	r3, [r7, #26]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	b21b      	sxth	r3, r3
 8003aa4:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003aa6:	7f7b      	ldrb	r3, [r7, #29]
 8003aa8:	b21b      	sxth	r3, r3
 8003aaa:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003aac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	7f3b      	ldrb	r3, [r7, #28]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	b21b      	sxth	r3, r3
 8003ac0:	82bb      	strh	r3, [r7, #20]
 8003ac2:	e00d      	b.n	8003ae0 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	331c      	adds	r3, #28
 8003ac8:	f107 0210 	add.w	r2, r7, #16
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fc26 	bl	8004320 <lis2mdl_magnetic_raw_get>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	e036      	b.n	8003b4e <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003ae0:	f107 030c 	add.w	r3, r7, #12
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff feb1 	bl	800384e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003aec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003af8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b04:	ee17 2a90 	vmov	r2, s15
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003b0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b10:	ee07 3a90 	vmov	s15, r3
 8003b14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b24:	ee17 2a90 	vmov	r2, s15
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003b2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b44:	ee17 2a90 	vmov	r2, s15
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	70fb      	strb	r3, [r7, #3]
 8003b62:	4613      	mov	r3, r2
 8003b64:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d10b      	bne.n	8003b86 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003b6e:	1cba      	adds	r2, r7, #2
 8003b70:	78f9      	ldrb	r1, [r7, #3]
 8003b72:	2301      	movs	r3, #1
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f9da 	bl	8003f2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003b80:	f04f 33ff 	mov.w	r3, #4294967295
 8003b84:	e00e      	b.n	8003ba4 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f103 001c 	add.w	r0, r3, #28
 8003b8c:	1cba      	adds	r2, r7, #2
 8003b8e:	78f9      	ldrb	r1, [r7, #3]
 8003b90:	2301      	movs	r3, #1
 8003b92:	f000 fb02 	bl	800419a <lis2mdl_write_reg>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	e000      	b.n	8003ba4 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	460b      	mov	r3, r1
 8003bba:	72fb      	strb	r3, [r7, #11]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10e      	bne.n	8003bea <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	695c      	ldr	r4, [r3, #20]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	7b1b      	ldrb	r3, [r3, #12]
 8003bd4:	b298      	uxth	r0, r3
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	b299      	uxth	r1, r3
 8003be0:	893b      	ldrh	r3, [r7, #8]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	47a0      	blx	r4
 8003be6:	4603      	mov	r3, r0
 8003be8:	e01d      	b.n	8003c26 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d10b      	bne.n	8003c0a <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	695c      	ldr	r4, [r3, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	7b1b      	ldrb	r3, [r3, #12]
 8003bfa:	b298      	uxth	r0, r3
 8003bfc:	7afb      	ldrb	r3, [r7, #11]
 8003bfe:	b299      	uxth	r1, r3
 8003c00:	893b      	ldrh	r3, [r7, #8]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	47a0      	blx	r4
 8003c06:	4603      	mov	r3, r0
 8003c08:	e00d      	b.n	8003c26 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	695c      	ldr	r4, [r3, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	7b1b      	ldrb	r3, [r3, #12]
 8003c12:	b298      	uxth	r0, r3
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	b299      	uxth	r1, r3
 8003c1e:	893b      	ldrh	r3, [r7, #8]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	47a0      	blx	r4
 8003c24:	4603      	mov	r3, r0
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}

08003c2e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003c2e:	b590      	push	{r4, r7, lr}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	72fb      	strb	r3, [r7, #11]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10e      	bne.n	8003c6c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	691c      	ldr	r4, [r3, #16]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	7b1b      	ldrb	r3, [r3, #12]
 8003c56:	b298      	uxth	r0, r3
 8003c58:	7afb      	ldrb	r3, [r7, #11]
 8003c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	b299      	uxth	r1, r3
 8003c62:	893b      	ldrh	r3, [r7, #8]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	47a0      	blx	r4
 8003c68:	4603      	mov	r3, r0
 8003c6a:	e01d      	b.n	8003ca8 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d10b      	bne.n	8003c8c <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	691c      	ldr	r4, [r3, #16]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	7b1b      	ldrb	r3, [r3, #12]
 8003c7c:	b298      	uxth	r0, r3
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
 8003c80:	b299      	uxth	r1, r3
 8003c82:	893b      	ldrh	r3, [r7, #8]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	47a0      	blx	r4
 8003c88:	4603      	mov	r3, r0
 8003c8a:	e00d      	b.n	8003ca8 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	691c      	ldr	r4, [r3, #16]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	7b1b      	ldrb	r3, [r3, #12]
 8003c94:	b298      	uxth	r0, r3
 8003c96:	7afb      	ldrb	r3, [r7, #11]
 8003c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	b299      	uxth	r1, r3
 8003ca0:	893b      	ldrh	r3, [r7, #8]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	47a0      	blx	r4
 8003ca6:	4603      	mov	r3, r0
  }
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd90      	pop	{r4, r7, pc}

08003cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08c      	sub	sp, #48	; 0x30
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	72fb      	strb	r3, [r7, #11]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003cca:	2340      	movs	r3, #64	; 0x40
 8003ccc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003cd6:	233d      	movs	r3, #61	; 0x3d
 8003cd8:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003cda:	2315      	movs	r3, #21
 8003cdc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003ce0:	2316      	movs	r3, #22
 8003ce2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003ce6:	2317      	movs	r3, #23
 8003ce8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003cec:	2314      	movs	r3, #20
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003cf2:	2344      	movs	r3, #68	; 0x44
 8003cf4:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003cfc:	2339      	movs	r3, #57	; 0x39
 8003cfe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003d08:	2329      	movs	r3, #41	; 0x29
 8003d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003d0e:	231e      	movs	r3, #30
 8003d10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003d1a:	893b      	ldrh	r3, [r7, #8]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003d20:	2310      	movs	r3, #16
 8003d22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003d2c:	2340      	movs	r3, #64	; 0x40
 8003d2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f103 001c 	add.w	r0, r3, #28
 8003d38:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003d3c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003d40:	2301      	movs	r3, #1
 8003d42:	f000 fa2a 	bl	800419a <lis2mdl_write_reg>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	e0e9      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f103 001c 	add.w	r0, r3, #28
 8003d58:	f107 021f 	add.w	r2, r7, #31
 8003d5c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003d60:	2301      	movs	r3, #1
 8003d62:	f000 fa1a 	bl	800419a <lis2mdl_write_reg>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d70:	e0d9      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f103 001c 	add.w	r0, r3, #28
 8003d78:	f107 020b 	add.w	r2, r7, #11
 8003d7c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003d80:	2301      	movs	r3, #1
 8003d82:	f000 fa0a 	bl	800419a <lis2mdl_write_reg>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d90:	e0c9      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f103 001c 	add.w	r0, r3, #28
 8003d98:	f107 021d 	add.w	r2, r7, #29
 8003d9c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003da0:	2301      	movs	r3, #1
 8003da2:	f000 f9fa 	bl	800419a <lis2mdl_write_reg>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295
 8003db0:	e0b9      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f103 001c 	add.w	r0, r3, #28
 8003db8:	f107 021e 	add.w	r2, r7, #30
 8003dbc:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f000 f9ea 	bl	800419a <lis2mdl_write_reg>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd0:	e0a9      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f103 001c 	add.w	r0, r3, #28
 8003dd8:	f107 0220 	add.w	r2, r7, #32
 8003ddc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003de0:	2301      	movs	r3, #1
 8003de2:	f000 f9da 	bl	800419a <lis2mdl_write_reg>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003dec:	f04f 33ff 	mov.w	r3, #4294967295
 8003df0:	e099      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f103 001c 	add.w	r0, r3, #28
 8003df8:	f107 021c 	add.w	r2, r7, #28
 8003dfc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003e00:	2301      	movs	r3, #1
 8003e02:	f000 f9b2 	bl	800416a <lis2mdl_read_reg>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e10:	e089      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003e12:	7f3b      	ldrb	r3, [r7, #28]
 8003e14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d102      	bne.n	8003e22 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003e1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003e20:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f103 001c 	add.w	r0, r3, #28
 8003e28:	f107 021c 	add.w	r2, r7, #28
 8003e2c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003e30:	2301      	movs	r3, #1
 8003e32:	f000 f9b2 	bl	800419a <lis2mdl_write_reg>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	e071      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f103 001c 	add.w	r0, r3, #28
 8003e48:	f107 0214 	add.w	r2, r7, #20
 8003e4c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003e50:	2306      	movs	r3, #6
 8003e52:	f000 f98a 	bl	800416a <lis2mdl_read_reg>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e60:	e061      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f103 001c 	add.w	r0, r3, #28
 8003e68:	f107 021b 	add.w	r2, r7, #27
 8003e6c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003e70:	2301      	movs	r3, #1
 8003e72:	f000 f97a 	bl	800416a <lis2mdl_read_reg>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e051      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003e82:	7efa      	ldrb	r2, [r7, #27]
 8003e84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003e88:	4013      	ands	r3, r2
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d1e6      	bne.n	8003e62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f103 001c 	add.w	r0, r3, #28
 8003e9a:	f107 021b 	add.w	r2, r7, #27
 8003e9e:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f000 f961 	bl	800416a <lis2mdl_read_reg>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	e038      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003eb4:	7efa      	ldrb	r2, [r7, #27]
 8003eb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003eba:	4013      	ands	r3, r2
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d1e6      	bne.n	8003e94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f103 001c 	add.w	r0, r3, #28
 8003ecc:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003ed0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f000 f960 	bl	800419a <lis2mdl_write_reg>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	e01f      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f103 001c 	add.w	r0, r3, #28
 8003eec:	893b      	ldrh	r3, [r7, #8]
 8003eee:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	f000 f939 	bl	800416a <lis2mdl_read_reg>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	e010      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f103 001c 	add.w	r0, r3, #28
 8003f0a:	f107 0220 	add.w	r2, r7, #32
 8003f0e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003f12:	2301      	movs	r3, #1
 8003f14:	f000 f941 	bl	800419a <lis2mdl_write_reg>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	e000      	b.n	8003f26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3730      	adds	r7, #48	; 0x30
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b08c      	sub	sp, #48	; 0x30
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	72fb      	strb	r3, [r7, #11]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003f48:	2340      	movs	r3, #64	; 0x40
 8003f4a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003f54:	233c      	movs	r3, #60	; 0x3c
 8003f56:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003f58:	2315      	movs	r3, #21
 8003f5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003f5e:	2316      	movs	r3, #22
 8003f60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003f64:	2317      	movs	r3, #23
 8003f66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003f6e:	2314      	movs	r3, #20
 8003f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003f74:	2344      	movs	r3, #68	; 0x44
 8003f76:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003f78:	2339      	movs	r3, #57	; 0x39
 8003f7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003f84:	2329      	movs	r3, #41	; 0x29
 8003f86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003f8a:	231e      	movs	r3, #30
 8003f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003f96:	2310      	movs	r3, #16
 8003f98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003fa2:	2340      	movs	r3, #64	; 0x40
 8003fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003fa8:	230e      	movs	r3, #14
 8003faa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f103 001c 	add.w	r0, r3, #28
 8003fb4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003fb8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f000 f8ec 	bl	800419a <lis2mdl_write_reg>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fcc:	e0c9      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f103 001c 	add.w	r0, r3, #28
 8003fd4:	f107 021f 	add.w	r2, r7, #31
 8003fd8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f000 f8dc 	bl	800419a <lis2mdl_write_reg>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fec:	e0b9      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f103 001c 	add.w	r0, r3, #28
 8003ff4:	f107 020b 	add.w	r2, r7, #11
 8003ff8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f000 f8cc 	bl	800419a <lis2mdl_write_reg>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	e0a9      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f103 001c 	add.w	r0, r3, #28
 8004014:	f107 021e 	add.w	r2, r7, #30
 8004018:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800401c:	2301      	movs	r3, #1
 800401e:	f000 f8bc 	bl	800419a <lis2mdl_write_reg>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	e099      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f103 001c 	add.w	r0, r3, #28
 8004034:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8004038:	2301      	movs	r3, #1
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	f000 f8ad 	bl	800419a <lis2mdl_write_reg>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	e08a      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f103 001c 	add.w	r0, r3, #28
 8004052:	f107 021d 	add.w	r2, r7, #29
 8004056:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800405a:	2301      	movs	r3, #1
 800405c:	f000 f89d 	bl	800419a <lis2mdl_write_reg>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
 800406a:	e07a      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f103 001c 	add.w	r0, r3, #28
 8004072:	f107 0220 	add.w	r2, r7, #32
 8004076:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800407a:	2301      	movs	r3, #1
 800407c:	f000 f88d 	bl	800419a <lis2mdl_write_reg>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004086:	f04f 33ff 	mov.w	r3, #4294967295
 800408a:	e06a      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f103 001c 	add.w	r0, r3, #28
 8004092:	f107 021c 	add.w	r2, r7, #28
 8004096:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800409a:	2301      	movs	r3, #1
 800409c:	f000 f865 	bl	800416a <lis2mdl_read_reg>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	e05a      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80040ac:	7f3b      	ldrb	r3, [r7, #28]
 80040ae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d102      	bne.n	80040bc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80040b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040ba:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f103 001c 	add.w	r0, r3, #28
 80040c2:	f107 021c 	add.w	r2, r7, #28
 80040c6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80040ca:	2301      	movs	r3, #1
 80040cc:	f000 f865 	bl	800419a <lis2mdl_write_reg>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	e042      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f103 001c 	add.w	r0, r3, #28
 80040e2:	f107 0214 	add.w	r2, r7, #20
 80040e6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80040ea:	2306      	movs	r3, #6
 80040ec:	f000 f83d 	bl	800416a <lis2mdl_read_reg>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	e032      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f103 001c 	add.w	r0, r3, #28
 8004102:	f107 021b 	add.w	r2, r7, #27
 8004106:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800410a:	2301      	movs	r3, #1
 800410c:	f000 f82d 	bl	800416a <lis2mdl_read_reg>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	e022      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 800411c:	7efa      	ldrb	r2, [r7, #27]
 800411e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004122:	4013      	ands	r3, r2
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800412a:	429a      	cmp	r2, r3
 800412c:	d1e6      	bne.n	80040fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f103 001c 	add.w	r0, r3, #28
 8004134:	f107 021b 	add.w	r2, r7, #27
 8004138:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800413c:	2301      	movs	r3, #1
 800413e:	f000 f814 	bl	800416a <lis2mdl_read_reg>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004148:	f04f 33ff 	mov.w	r3, #4294967295
 800414c:	e009      	b.n	8004162 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 800414e:	7efa      	ldrb	r2, [r7, #27]
 8004150:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004154:	4013      	ands	r3, r2
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800415c:	429a      	cmp	r2, r3
 800415e:	d1e6      	bne.n	800412e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3730      	adds	r7, #48	; 0x30
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800416a:	b590      	push	{r4, r7, lr}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	461a      	mov	r2, r3
 8004176:	460b      	mov	r3, r1
 8004178:	72fb      	strb	r3, [r7, #11]
 800417a:	4613      	mov	r3, r2
 800417c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685c      	ldr	r4, [r3, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6898      	ldr	r0, [r3, #8]
 8004186:	893b      	ldrh	r3, [r7, #8]
 8004188:	7af9      	ldrb	r1, [r7, #11]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	47a0      	blx	r4
 800418e:	6178      	str	r0, [r7, #20]

  return ret;
 8004190:	697b      	ldr	r3, [r7, #20]
}
 8004192:	4618      	mov	r0, r3
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	bd90      	pop	{r4, r7, pc}

0800419a <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800419a:	b590      	push	{r4, r7, lr}
 800419c:	b087      	sub	sp, #28
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	461a      	mov	r2, r3
 80041a6:	460b      	mov	r3, r1
 80041a8:	72fb      	strb	r3, [r7, #11]
 80041aa:	4613      	mov	r3, r2
 80041ac:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681c      	ldr	r4, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6898      	ldr	r0, [r3, #8]
 80041b6:	893b      	ldrh	r3, [r7, #8]
 80041b8:	7af9      	ldrb	r1, [r7, #11]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	47a0      	blx	r4
 80041be:	6178      	str	r0, [r7, #20]

  return ret;
 80041c0:	697b      	ldr	r3, [r7, #20]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd90      	pop	{r4, r7, pc}

080041ca <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80041d6:	f107 0208 	add.w	r2, r7, #8
 80041da:	2301      	movs	r3, #1
 80041dc:	2160      	movs	r1, #96	; 0x60
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ffc3 	bl	800416a <lis2mdl_read_reg>
 80041e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10f      	bne.n	800420c <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	7a3b      	ldrb	r3, [r7, #8]
 80041f6:	f362 0301 	bfi	r3, r2, #0, #2
 80041fa:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80041fc:	f107 0208 	add.w	r2, r7, #8
 8004200:	2301      	movs	r3, #1
 8004202:	2160      	movs	r1, #96	; 0x60
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ffc8 	bl	800419a <lis2mdl_write_reg>
 800420a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800420c:	68fb      	ldr	r3, [r7, #12]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004222:	f107 0208 	add.w	r2, r7, #8
 8004226:	2301      	movs	r3, #1
 8004228:	2160      	movs	r1, #96	; 0x60
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff ff9d 	bl	800416a <lis2mdl_read_reg>
 8004230:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10f      	bne.n	8004258 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	b2da      	uxtb	r2, r3
 8004240:	7a3b      	ldrb	r3, [r7, #8]
 8004242:	f362 0383 	bfi	r3, r2, #2, #2
 8004246:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004248:	f107 0208 	add.w	r2, r7, #8
 800424c:	2301      	movs	r3, #1
 800424e:	2160      	movs	r1, #96	; 0x60
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ffa2 	bl	800419a <lis2mdl_write_reg>
 8004256:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004258:	68fb      	ldr	r3, [r7, #12]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800426e:	f107 0208 	add.w	r2, r7, #8
 8004272:	2301      	movs	r3, #1
 8004274:	2160      	movs	r1, #96	; 0x60
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ff77 	bl	800416a <lis2mdl_read_reg>
 800427c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800427e:	7a3b      	ldrb	r3, [r7, #8]
 8004280:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b03      	cmp	r3, #3
 8004288:	d81a      	bhi.n	80042c0 <lis2mdl_data_rate_get+0x5c>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <lis2mdl_data_rate_get+0x2c>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042a9 	.word	0x080042a9
 8004298:	080042b1 	.word	0x080042b1
 800429c:	080042b9 	.word	0x080042b9
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
      break;
 80042a6:	e00f      	b.n	80042c8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
      break;
 80042ae:	e00b      	b.n	80042c8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2202      	movs	r2, #2
 80042b4:	701a      	strb	r2, [r3, #0]
      break;
 80042b6:	e007      	b.n	80042c8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2203      	movs	r2, #3
 80042bc:	701a      	strb	r2, [r3, #0]
      break;
 80042be:	e003      	b.n	80042c8 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
      break;
 80042c6:	bf00      	nop
  }

  return ret;
 80042c8:	68fb      	ldr	r3, [r7, #12]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop

080042d4 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80042e0:	f107 0208 	add.w	r2, r7, #8
 80042e4:	2301      	movs	r3, #1
 80042e6:	2162      	movs	r1, #98	; 0x62
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ff3e 	bl	800416a <lis2mdl_read_reg>
 80042ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	7a3b      	ldrb	r3, [r7, #8]
 8004300:	f362 1304 	bfi	r3, r2, #4, #1
 8004304:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004306:	f107 0208 	add.w	r2, r7, #8
 800430a:	2301      	movs	r3, #1
 800430c:	2162      	movs	r1, #98	; 0x62
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff ff43 	bl	800419a <lis2mdl_write_reg>
 8004314:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 800432a:	f107 020c 	add.w	r2, r7, #12
 800432e:	2306      	movs	r3, #6
 8004330:	2168      	movs	r1, #104	; 0x68
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ff19 	bl	800416a <lis2mdl_read_reg>
 8004338:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800433a:	7b7b      	ldrb	r3, [r7, #13]
 800433c:	b21a      	sxth	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004348:	b29b      	uxth	r3, r3
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	b29a      	uxth	r2, r3
 800434e:	7b3b      	ldrb	r3, [r7, #12]
 8004350:	b29b      	uxth	r3, r3
 8004352:	4413      	add	r3, r2
 8004354:	b29b      	uxth	r3, r3
 8004356:	b21a      	sxth	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	3302      	adds	r3, #2
 8004362:	b212      	sxth	r2, r2
 8004364:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	3302      	adds	r3, #2
 800436a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800436e:	b29b      	uxth	r3, r3
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	b29a      	uxth	r2, r3
 8004374:	7bbb      	ldrb	r3, [r7, #14]
 8004376:	b29b      	uxth	r3, r3
 8004378:	4413      	add	r3, r2
 800437a:	b29a      	uxth	r2, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	3302      	adds	r3, #2
 8004380:	b212      	sxth	r2, r2
 8004382:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004384:	7c7a      	ldrb	r2, [r7, #17]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	3304      	adds	r3, #4
 800438a:	b212      	sxth	r2, r2
 800438c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	3304      	adds	r3, #4
 8004392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004396:	b29b      	uxth	r3, r3
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	b29a      	uxth	r2, r3
 800439c:	7c3b      	ldrb	r3, [r7, #16]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	3304      	adds	r3, #4
 80043a8:	b212      	sxth	r2, r2
 80043aa:	801a      	strh	r2, [r3, #0]

  return ret;
 80043ac:	697b      	ldr	r3, [r7, #20]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80043c0:	2301      	movs	r3, #1
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	214f      	movs	r1, #79	; 0x4f
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fecf 	bl	800416a <lis2mdl_read_reg>
 80043cc:	60f8      	str	r0, [r7, #12]

  return ret;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80043e4:	f107 0208 	add.w	r2, r7, #8
 80043e8:	2301      	movs	r3, #1
 80043ea:	2162      	movs	r1, #98	; 0x62
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff febc 	bl	800416a <lis2mdl_read_reg>
 80043f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	b2da      	uxtb	r2, r3
 8004402:	7a3b      	ldrb	r3, [r7, #8]
 8004404:	f362 0341 	bfi	r3, r2, #1, #1
 8004408:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800440a:	f107 0208 	add.w	r2, r7, #8
 800440e:	2301      	movs	r3, #1
 8004410:	2162      	movs	r1, #98	; 0x62
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fec1 	bl	800419a <lis2mdl_write_reg>
 8004418:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004430:	f107 0208 	add.w	r2, r7, #8
 8004434:	2301      	movs	r3, #1
 8004436:	2162      	movs	r1, #98	; 0x62
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff fe96 	bl	800416a <lis2mdl_read_reg>
 800443e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	b2da      	uxtb	r2, r3
 800444e:	7a3b      	ldrb	r3, [r7, #8]
 8004450:	f362 1345 	bfi	r3, r2, #5, #1
 8004454:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004456:	f107 0208 	add.w	r2, r7, #8
 800445a:	2301      	movs	r3, #1
 800445c:	2162      	movs	r1, #98	; 0x62
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fe9b 	bl	800419a <lis2mdl_write_reg>
 8004464:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d103      	bne.n	800448c <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e04d      	b.n	8004528 <LPS22HH_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	7b1a      	ldrb	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	699a      	ldr	r2, [r3, #24]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <LPS22HH_RegisterBusIO+0xc4>)
 80044c8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <LPS22HH_RegisterBusIO+0xc8>)
 80044ce:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e020      	b.n	8004528 <LPS22HH_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4798      	blx	r3
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <LPS22HH_RegisterBusIO+0x8a>
    {
      ret = LPS22HH_ERROR;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	e016      	b.n	8004528 <LPS22HH_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d112      	bne.n	8004528 <LPS22HH_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10d      	bne.n	8004528 <LPS22HH_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800450c:	2301      	movs	r3, #1
 800450e:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004510:	7afb      	ldrb	r3, [r7, #11]
 8004512:	461a      	mov	r2, r3
 8004514:	2110      	movs	r1, #16
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f9df 	bl	80048da <LPS22HH_Write_Reg>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <LPS22HH_RegisterBusIO+0xb8>
          {
            ret = LPS22HH_ERROR;
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004528:	68fb      	ldr	r3, [r7, #12]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	08004c03 	.word	0x08004c03
 8004538:	08004c39 	.word	0x08004c39

0800453c <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800454a:	2b00      	cmp	r3, #0
 800454c:	d108      	bne.n	8004560 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fb0e 	bl	8004b70 <LPS22HH_Initialize>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
 800455e:	e004      	b.n	800456a <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004580:	2b01      	cmp	r3, #1
 8004582:	d111      	bne.n	80045a8 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f877 	bl	8004678 <LPS22HH_PRESS_Disable>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8004590:	f04f 33ff 	mov.w	r3, #4294967295
 8004594:	e00d      	b.n	80045b2 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f918 	bl	80047cc <LPS22HH_TEMP_Disable>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	e004      	b.n	80045b2 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	331c      	adds	r3, #28
 80045c8:	6839      	ldr	r1, [r7, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fd1a 	bl	8005004 <lps22hh_device_id_get>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	e000      	b.n	80045de <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2200      	movs	r2, #0
 80045f6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2201      	movs	r2, #1
 80045fc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	4a05      	ldr	r2, [pc, #20]	; (800462c <LPS22HH_GetCapabilities+0x44>)
 8004616:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	4a04      	ldr	r2, [pc, #16]	; (800462c <LPS22HH_GetCapabilities+0x44>)
 800461c:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	43480000 	.word	0x43480000

08004630 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e014      	b.n	8004670 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f103 021c 	add.w	r2, r3, #28
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 fb93 	bl	8004d80 <lps22hh_data_rate_set>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8004660:	f04f 33ff 	mov.w	r3, #4294967295
 8004664:	e004      	b.n	8004670 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	e024      	b.n	80046d8 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11a      	bne.n	80046ce <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f103 021c 	add.w	r2, r3, #28
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	332b      	adds	r3, #43	; 0x2b
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 fbb9 	bl	8004e1c <lps22hh_data_rate_get>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295
 80046b4:	e010      	b.n	80046d8 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	331c      	adds	r3, #28
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fb5f 	bl	8004d80 <lps22hh_data_rate_set>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
 80046cc:	e004      	b.n	80046d8 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f90f 	bl	8004910 <LPS22HH_GetOutputDataRate>
 80046f2:	4603      	mov	r3, r0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800470e:	2b01      	cmp	r3, #1
 8004710:	d106      	bne.n	8004720 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004712:	ed97 0a00 	vldr	s0, [r7]
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f95e 	bl	80049d8 <LPS22HH_SetOutputDataRate_When_Enabled>
 800471c:	4603      	mov	r3, r0
 800471e:	e005      	b.n	800472c <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004720:	ed97 0a00 	vldr	s0, [r7]
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f9c9 	bl	8004abc <LPS22HH_SetOutputDataRate_When_Disabled>
 800472a:	4603      	mov	r3, r0
  }
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800473e:	f107 030c 	add.w	r3, r7, #12
 8004742:	2204      	movs	r2, #4
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f014 fde4 	bl	8019314 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	331c      	adds	r3, #28
 8004750:	f107 020c 	add.w	r2, r7, #12
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fc08 	bl	8004f6c <lps22hh_pressure_raw_get>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
 8004766:	e009      	b.n	800477c <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fab0 	bl	8004cd0 <lps22hh_from_lsb_to_hpa>
 8004770:	eef0 7a40 	vmov.f32	s15, s0
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e014      	b.n	80047c4 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f103 021c 	add.w	r2, r3, #28
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f000 fae9 	bl	8004d80 <lps22hh_data_rate_set>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	e004      	b.n	80047c4 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e024      	b.n	800482c <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d11a      	bne.n	8004822 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 021c 	add.w	r2, r3, #28
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	332b      	adds	r3, #43	; 0x2b
 80047f6:	4619      	mov	r1, r3
 80047f8:	4610      	mov	r0, r2
 80047fa:	f000 fb0f 	bl	8004e1c <lps22hh_data_rate_get>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004804:	f04f 33ff 	mov.w	r3, #4294967295
 8004808:	e010      	b.n	800482c <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	331c      	adds	r3, #28
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fab5 	bl	8004d80 <lps22hh_data_rate_set>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 800481c:	f04f 33ff 	mov.w	r3, #4294967295
 8004820:	e004      	b.n	800482c <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800483e:	6839      	ldr	r1, [r7, #0]
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f865 	bl	8004910 <LPS22HH_GetOutputDataRate>
 8004846:	4603      	mov	r3, r0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004862:	2b01      	cmp	r3, #1
 8004864:	d106      	bne.n	8004874 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004866:	ed97 0a00 	vldr	s0, [r7]
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8b4 	bl	80049d8 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004870:	4603      	mov	r3, r0
 8004872:	e005      	b.n	8004880 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004874:	ed97 0a00 	vldr	s0, [r7]
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f91f 	bl	8004abc <LPS22HH_SetOutputDataRate_When_Disabled>
 800487e:	4603      	mov	r3, r0
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004892:	f107 030c 	add.w	r3, r7, #12
 8004896:	2202      	movs	r2, #2
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f014 fd3a 	bl	8019314 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	331c      	adds	r3, #28
 80048a4:	f107 020c 	add.w	r2, r7, #12
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fb87 	bl	8004fbe <lps22hh_temperature_raw_get>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ba:	e00a      	b.n	80048d2 <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80048bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fa1d 	bl	8004d00 <lps22hh_from_lsb_to_celsius>
 80048c6:	eef0 7a40 	vmov.f32	s15, s0
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	70fb      	strb	r3, [r7, #3]
 80048e6:	4613      	mov	r3, r2
 80048e8:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f103 001c 	add.w	r0, r3, #28
 80048f0:	1cba      	adds	r2, r7, #2
 80048f2:	78f9      	ldrb	r1, [r7, #3]
 80048f4:	2301      	movs	r3, #1
 80048f6:	f000 f9d2 	bl	8004c9e <lps22hh_write_reg>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8004900:	f04f 33ff 	mov.w	r3, #4294967295
 8004904:	e000      	b.n	8004908 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	331c      	adds	r3, #28
 8004922:	f107 020b 	add.w	r2, r7, #11
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fa77 	bl	8004e1c <lps22hh_data_rate_get>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8004934:	f04f 33ff 	mov.w	r3, #4294967295
 8004938:	e03d      	b.n	80049b6 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	2b07      	cmp	r3, #7
 800493e:	d835      	bhi.n	80049ac <LPS22HH_GetOutputDataRate+0x9c>
 8004940:	a201      	add	r2, pc, #4	; (adr r2, 8004948 <LPS22HH_GetOutputDataRate+0x38>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	08004969 	.word	0x08004969
 800494c:	08004973 	.word	0x08004973
 8004950:	0800497d 	.word	0x0800497d
 8004954:	08004985 	.word	0x08004985
 8004958:	0800498d 	.word	0x0800498d
 800495c:	08004995 	.word	0x08004995
 8004960:	0800499d 	.word	0x0800499d
 8004964:	080049a5 	.word	0x080049a5
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
      break;
 8004970:	e020      	b.n	80049b4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004978:	601a      	str	r2, [r3, #0]
      break;
 800497a:	e01b      	b.n	80049b4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <LPS22HH_GetOutputDataRate+0xb0>)
 8004980:	601a      	str	r2, [r3, #0]
      break;
 8004982:	e017      	b.n	80049b4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	4a0f      	ldr	r2, [pc, #60]	; (80049c4 <LPS22HH_GetOutputDataRate+0xb4>)
 8004988:	601a      	str	r2, [r3, #0]
      break;
 800498a:	e013      	b.n	80049b4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <LPS22HH_GetOutputDataRate+0xb8>)
 8004990:	601a      	str	r2, [r3, #0]
      break;
 8004992:	e00f      	b.n	80049b4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	4a0d      	ldr	r2, [pc, #52]	; (80049cc <LPS22HH_GetOutputDataRate+0xbc>)
 8004998:	601a      	str	r2, [r3, #0]
      break;
 800499a:	e00b      	b.n	80049b4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <LPS22HH_GetOutputDataRate+0xc0>)
 80049a0:	601a      	str	r2, [r3, #0]
      break;
 80049a2:	e007      	b.n	80049b4 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	4a0b      	ldr	r2, [pc, #44]	; (80049d4 <LPS22HH_GetOutputDataRate+0xc4>)
 80049a8:	601a      	str	r2, [r3, #0]
      break;
 80049aa:	e003      	b.n	80049b4 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
 80049b0:	60fb      	str	r3, [r7, #12]
      break;
 80049b2:	bf00      	nop
  }

  return ret;
 80049b4:	68fb      	ldr	r3, [r7, #12]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	41200000 	.word	0x41200000
 80049c4:	41c80000 	.word	0x41c80000
 80049c8:	42480000 	.word	0x42480000
 80049cc:	42960000 	.word	0x42960000
 80049d0:	42c80000 	.word	0x42c80000
 80049d4:	43480000 	.word	0x43480000

080049d8 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80049e4:	edd7 7a00 	vldr	s15, [r7]
 80049e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f4:	d801      	bhi.n	80049fa <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e037      	b.n	8004a6a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80049fa:	edd7 7a00 	vldr	s15, [r7]
 80049fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	d801      	bhi.n	8004a10 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e02c      	b.n	8004a6a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004a10:	edd7 7a00 	vldr	s15, [r7]
 8004a14:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a20:	d801      	bhi.n	8004a26 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e021      	b.n	8004a6a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004a26:	edd7 7a00 	vldr	s15, [r7]
 8004a2a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004ab0 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8004a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a36:	d801      	bhi.n	8004a3c <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	e016      	b.n	8004a6a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004a3c:	edd7 7a00 	vldr	s15, [r7]
 8004a40:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004ab4 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8004a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4c:	d801      	bhi.n	8004a52 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8004a4e:	2305      	movs	r3, #5
 8004a50:	e00b      	b.n	8004a6a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004a52:	edd7 7a00 	vldr	s15, [r7]
 8004a56:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004ab8 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8004a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	d801      	bhi.n	8004a68 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8004a64:	2306      	movs	r3, #6
 8004a66:	e000      	b.n	8004a6a <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004a68:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004a6a:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	331c      	adds	r3, #28
 8004a70:	7bfa      	ldrb	r2, [r7, #15]
 8004a72:	4611      	mov	r1, r2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 f983 	bl	8004d80 <lps22hh_data_rate_set>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8004a80:	f04f 33ff 	mov.w	r3, #4294967295
 8004a84:	e00f      	b.n	8004aa6 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f103 021c 	add.w	r2, r3, #28
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	332b      	adds	r3, #43	; 0x2b
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f000 f9c2 	bl	8004e1c <lps22hh_data_rate_get>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	e000      	b.n	8004aa6 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	42480000 	.word	0x42480000
 8004ab4:	42960000 	.word	0x42960000
 8004ab8:	42c80000 	.word	0x42c80000

08004abc <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004ac8:	edd7 7a00 	vldr	s15, [r7]
 8004acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad8:	d801      	bhi.n	8004ade <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e037      	b.n	8004b4e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004ade:	edd7 7a00 	vldr	s15, [r7]
 8004ae2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aee:	d801      	bhi.n	8004af4 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e02c      	b.n	8004b4e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004af4:	edd7 7a00 	vldr	s15, [r7]
 8004af8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b04:	d801      	bhi.n	8004b0a <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8004b06:	2303      	movs	r3, #3
 8004b08:	e021      	b.n	8004b4e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004b0a:	edd7 7a00 	vldr	s15, [r7]
 8004b0e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004b64 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8004b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1a:	d801      	bhi.n	8004b20 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	e016      	b.n	8004b4e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004b20:	edd7 7a00 	vldr	s15, [r7]
 8004b24:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004b68 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8004b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	d801      	bhi.n	8004b36 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004b32:	2305      	movs	r3, #5
 8004b34:	e00b      	b.n	8004b4e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004b36:	edd7 7a00 	vldr	s15, [r7]
 8004b3a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004b6c <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8004b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b46:	d801      	bhi.n	8004b4c <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8004b48:	2306      	movs	r3, #6
 8004b4a:	e000      	b.n	8004b4e <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004b4c:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	42480000 	.word	0x42480000
 8004b68:	42960000 	.word	0x42960000
 8004b6c:	42c80000 	.word	0x42c80000

08004b70 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	331c      	adds	r3, #28
 8004b7c:	2111      	movs	r1, #17
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fa9d 	bl	80050be <lps22hh_i3c_interface_set>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8004b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8e:	e034      	b.n	8004bfa <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	331c      	adds	r3, #28
 8004b94:	2110      	movs	r1, #16
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 f8f2 	bl	8004d80 <lps22hh_data_rate_set>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8004ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba6:	e028      	b.n	8004bfa <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	331c      	adds	r3, #28
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fa5f 	bl	8005072 <lps22hh_lp_bandwidth_set>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbe:	e01c      	b.n	8004bfa <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	331c      	adds	r3, #28
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f8b4 	bl	8004d34 <lps22hh_block_data_update_set>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	e010      	b.n	8004bfa <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	331c      	adds	r3, #28
 8004bdc:	2101      	movs	r1, #1
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fa21 	bl	8005026 <lps22hh_auto_increment_set>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	e004      	b.n	8004bfa <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HH_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c02:	b590      	push	{r4, r7, lr}
 8004c04:	b087      	sub	sp, #28
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	460b      	mov	r3, r1
 8004c10:	72fb      	strb	r3, [r7, #11]
 8004c12:	4613      	mov	r3, r2
 8004c14:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	695c      	ldr	r4, [r3, #20]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	7b1b      	ldrb	r3, [r3, #12]
 8004c22:	b298      	uxth	r0, r3
 8004c24:	7afb      	ldrb	r3, [r7, #11]
 8004c26:	b299      	uxth	r1, r3
 8004c28:	893b      	ldrh	r3, [r7, #8]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	47a0      	blx	r4
 8004c2e:	4603      	mov	r3, r0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd90      	pop	{r4, r7, pc}

08004c38 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	461a      	mov	r2, r3
 8004c44:	460b      	mov	r3, r1
 8004c46:	72fb      	strb	r3, [r7, #11]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	691c      	ldr	r4, [r3, #16]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	7b1b      	ldrb	r3, [r3, #12]
 8004c58:	b298      	uxth	r0, r3
 8004c5a:	7afb      	ldrb	r3, [r7, #11]
 8004c5c:	b299      	uxth	r1, r3
 8004c5e:	893b      	ldrh	r3, [r7, #8]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	47a0      	blx	r4
 8004c64:	4603      	mov	r3, r0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd90      	pop	{r4, r7, pc}

08004c6e <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004c6e:	b590      	push	{r4, r7, lr}
 8004c70:	b087      	sub	sp, #28
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	72fb      	strb	r3, [r7, #11]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685c      	ldr	r4, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6898      	ldr	r0, [r3, #8]
 8004c8a:	893b      	ldrh	r3, [r7, #8]
 8004c8c:	7af9      	ldrb	r1, [r7, #11]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	47a0      	blx	r4
 8004c92:	6178      	str	r0, [r7, #20]

  return ret;
 8004c94:	697b      	ldr	r3, [r7, #20]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}

08004c9e <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004c9e:	b590      	push	{r4, r7, lr}
 8004ca0:	b087      	sub	sp, #28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	460b      	mov	r3, r1
 8004cac:	72fb      	strb	r3, [r7, #11]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681c      	ldr	r4, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6898      	ldr	r0, [r3, #8]
 8004cba:	893b      	ldrh	r3, [r7, #8]
 8004cbc:	7af9      	ldrb	r1, [r7, #11]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	47a0      	blx	r4
 8004cc2:	6178      	str	r0, [r7, #20]

  return ret;
 8004cc4:	697b      	ldr	r3, [r7, #20]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd90      	pop	{r4, r7, pc}
	...

08004cd0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004cfc <lps22hh_from_lsb_to_hpa+0x2c>
 8004ce6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004cea:	eef0 7a66 	vmov.f32	s15, s13
}
 8004cee:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	49800000 	.word	0x49800000

08004d00 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d16:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004d30 <lps22hh_from_lsb_to_celsius+0x30>
 8004d1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d1e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004d22:	eeb0 0a67 	vmov.f32	s0, s15
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	42c80000 	.word	0x42c80000

08004d34 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004d40:	f107 0208 	add.w	r2, r7, #8
 8004d44:	2301      	movs	r3, #1
 8004d46:	2110      	movs	r1, #16
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ff90 	bl	8004c6e <lps22hh_read_reg>
 8004d4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	7a3b      	ldrb	r3, [r7, #8]
 8004d60:	f362 0341 	bfi	r3, r2, #1, #1
 8004d64:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004d66:	f107 0208 	add.w	r2, r7, #8
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	2110      	movs	r1, #16
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ff95 	bl	8004c9e <lps22hh_write_reg>
 8004d74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004d8c:	f107 0210 	add.w	r2, r7, #16
 8004d90:	2301      	movs	r3, #1
 8004d92:	2110      	movs	r1, #16
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ff6a 	bl	8004c6e <lps22hh_read_reg>
 8004d9a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004da2:	f107 020c 	add.w	r2, r7, #12
 8004da6:	2301      	movs	r3, #1
 8004da8:	2111      	movs	r1, #17
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff ff5f 	bl	8004c6e <lps22hh_read_reg>
 8004db0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10f      	bne.n	8004dd8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	7c3b      	ldrb	r3, [r7, #16]
 8004dc2:	f362 1306 	bfi	r3, r2, #4, #3
 8004dc6:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004dc8:	f107 0210 	add.w	r2, r7, #16
 8004dcc:	2301      	movs	r3, #1
 8004dce:	2110      	movs	r1, #16
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ff64 	bl	8004c9e <lps22hh_write_reg>
 8004dd6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d119      	bne.n	8004e12 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	7b3b      	ldrb	r3, [r7, #12]
 8004dea:	f362 0341 	bfi	r3, r2, #1, #1
 8004dee:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	7b3b      	ldrb	r3, [r7, #12]
 8004dfc:	f362 0300 	bfi	r3, r2, #0, #1
 8004e00:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004e02:	f107 020c 	add.w	r2, r7, #12
 8004e06:	2301      	movs	r3, #1
 8004e08:	2111      	movs	r1, #17
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff ff47 	bl	8004c9e <lps22hh_write_reg>
 8004e10:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004e12:	697b      	ldr	r3, [r7, #20]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004e26:	f107 0210 	add.w	r2, r7, #16
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2110      	movs	r1, #16
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ff1d 	bl	8004c6e <lps22hh_read_reg>
 8004e34:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d107      	bne.n	8004e4c <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004e3c:	f107 020c 	add.w	r2, r7, #12
 8004e40:	2301      	movs	r3, #1
 8004e42:	2111      	movs	r1, #17
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff ff12 	bl	8004c6e <lps22hh_read_reg>
 8004e4a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 8086 	bne.w	8004f60 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004e54:	f107 020c 	add.w	r2, r7, #12
 8004e58:	2301      	movs	r3, #1
 8004e5a:	2111      	movs	r1, #17
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff06 	bl	8004c6e <lps22hh_read_reg>
 8004e62:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004e64:	7b3b      	ldrb	r3, [r7, #12]
 8004e66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	011a      	lsls	r2, r3, #4
 8004e6e:	7b3b      	ldrb	r3, [r7, #12]
 8004e70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8004e7a:	7c3a      	ldrb	r2, [r7, #16]
 8004e7c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004e80:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004e82:	4413      	add	r3, r2
 8004e84:	2b15      	cmp	r3, #21
 8004e86:	d867      	bhi.n	8004f58 <lps22hh_data_rate_get+0x13c>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <lps22hh_data_rate_get+0x74>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ee9 	.word	0x08004ee9
 8004e94:	08004ef9 	.word	0x08004ef9
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004f09 	.word	0x08004f09
 8004ea0:	08004f11 	.word	0x08004f11
 8004ea4:	08004f19 	.word	0x08004f19
 8004ea8:	08004f49 	.word	0x08004f49
 8004eac:	08004f51 	.word	0x08004f51
 8004eb0:	08004ef1 	.word	0x08004ef1
 8004eb4:	08004f59 	.word	0x08004f59
 8004eb8:	08004f59 	.word	0x08004f59
 8004ebc:	08004f59 	.word	0x08004f59
 8004ec0:	08004f59 	.word	0x08004f59
 8004ec4:	08004f59 	.word	0x08004f59
 8004ec8:	08004f59 	.word	0x08004f59
 8004ecc:	08004f59 	.word	0x08004f59
 8004ed0:	08004f59 	.word	0x08004f59
 8004ed4:	08004f21 	.word	0x08004f21
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f41 	.word	0x08004f41
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
        break;
 8004eee:	e038      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	701a      	strb	r2, [r3, #0]
        break;
 8004ef6:	e034      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
        break;
 8004efe:	e030      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2202      	movs	r2, #2
 8004f04:	701a      	strb	r2, [r3, #0]
        break;
 8004f06:	e02c      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	701a      	strb	r2, [r3, #0]
        break;
 8004f0e:	e028      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2204      	movs	r2, #4
 8004f14:	701a      	strb	r2, [r3, #0]
        break;
 8004f16:	e024      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	701a      	strb	r2, [r3, #0]
        break;
 8004f1e:	e020      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2211      	movs	r2, #17
 8004f24:	701a      	strb	r2, [r3, #0]
        break;
 8004f26:	e01c      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2212      	movs	r2, #18
 8004f2c:	701a      	strb	r2, [r3, #0]
        break;
 8004f2e:	e018      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2213      	movs	r2, #19
 8004f34:	701a      	strb	r2, [r3, #0]
        break;
 8004f36:	e014      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2214      	movs	r2, #20
 8004f3c:	701a      	strb	r2, [r3, #0]
        break;
 8004f3e:	e010      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2215      	movs	r2, #21
 8004f44:	701a      	strb	r2, [r3, #0]
        break;
 8004f46:	e00c      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2206      	movs	r2, #6
 8004f4c:	701a      	strb	r2, [r3, #0]
        break;
 8004f4e:	e008      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2207      	movs	r2, #7
 8004f54:	701a      	strb	r2, [r3, #0]
        break;
 8004f56:	e004      	b.n	8004f62 <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
        break;
 8004f5e:	e000      	b.n	8004f62 <lps22hh_data_rate_get+0x146>
    }
  }
 8004f60:	bf00      	nop

  return ret;
 8004f62:	697b      	ldr	r3, [r7, #20]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004f76:	f107 0208 	add.w	r2, r7, #8
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	2128      	movs	r1, #40	; 0x28
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fe75 	bl	8004c6e <lps22hh_read_reg>
 8004f84:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004f86:	7abb      	ldrb	r3, [r7, #10]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	7a7a      	ldrb	r2, [r7, #9]
 8004f96:	441a      	add	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	7a3a      	ldrb	r2, [r7, #8]
 8004fa4:	441a      	add	r2, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	021a      	lsls	r2, r3, #8
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	601a      	str	r2, [r3, #0]

  return ret;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8004fc8:	f107 0208 	add.w	r2, r7, #8
 8004fcc:	2302      	movs	r3, #2
 8004fce:	212b      	movs	r1, #43	; 0x2b
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fe4c 	bl	8004c6e <lps22hh_read_reg>
 8004fd6:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004fd8:	7a7b      	ldrb	r3, [r7, #9]
 8004fda:	b21a      	sxth	r2, r3
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	7a3b      	ldrb	r3, [r7, #8]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	b21a      	sxth	r2, r3
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	801a      	strh	r2, [r3, #0]

  return ret;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800500e:	2301      	movs	r3, #1
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	210f      	movs	r1, #15
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fe2a 	bl	8004c6e <lps22hh_read_reg>
 800501a:	60f8      	str	r0, [r7, #12]

  return ret;
 800501c:	68fb      	ldr	r3, [r7, #12]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005032:	f107 0208 	add.w	r2, r7, #8
 8005036:	2301      	movs	r3, #1
 8005038:	2111      	movs	r1, #17
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fe17 	bl	8004c6e <lps22hh_read_reg>
 8005040:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10f      	bne.n	8005068 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	b2da      	uxtb	r2, r3
 8005050:	7a3b      	ldrb	r3, [r7, #8]
 8005052:	f362 1304 	bfi	r3, r2, #4, #1
 8005056:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005058:	f107 0208 	add.w	r2, r7, #8
 800505c:	2301      	movs	r3, #1
 800505e:	2111      	movs	r1, #17
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff fe1c 	bl	8004c9e <lps22hh_write_reg>
 8005066:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005068:	68fb      	ldr	r3, [r7, #12]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	460b      	mov	r3, r1
 800507c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800507e:	f107 0208 	add.w	r2, r7, #8
 8005082:	2301      	movs	r3, #1
 8005084:	2110      	movs	r1, #16
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fdf1 	bl	8004c6e <lps22hh_read_reg>
 800508c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10f      	bne.n	80050b4 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	b2da      	uxtb	r2, r3
 800509c:	7a3b      	ldrb	r3, [r7, #8]
 800509e:	f362 0383 	bfi	r3, r2, #2, #2
 80050a2:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80050a4:	f107 0208 	add.w	r2, r7, #8
 80050a8:	2301      	movs	r3, #1
 80050aa:	2110      	movs	r1, #16
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fdf6 	bl	8004c9e <lps22hh_write_reg>
 80050b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050b4:	68fb      	ldr	r3, [r7, #12]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	460b      	mov	r3, r1
 80050c8:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80050ca:	f107 0208 	add.w	r2, r7, #8
 80050ce:	2301      	movs	r3, #1
 80050d0:	210e      	movs	r1, #14
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fdcb 	bl	8004c6e <lps22hh_read_reg>
 80050d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d118      	bne.n	8005112 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	7a3b      	ldrb	r3, [r7, #8]
 80050ea:	f362 0341 	bfi	r3, r2, #1, #1
 80050ee:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	7a3b      	ldrb	r3, [r7, #8]
 80050fc:	f362 13c7 	bfi	r3, r2, #7, #1
 8005100:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005102:	f107 0208 	add.w	r2, r7, #8
 8005106:	2301      	movs	r3, #1
 8005108:	210e      	movs	r1, #14
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff fdc7 	bl	8004c9e <lps22hh_write_reg>
 8005110:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005112:	68fb      	ldr	r3, [r7, #12]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d103      	bne.n	8005138 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005130:	f04f 33ff 	mov.w	r3, #4294967295
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e04d      	b.n	80051d4 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	7b1a      	ldrb	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <LSM6DSO_RegisterBusIO+0xc4>)
 8005174:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <LSM6DSO_RegisterBusIO+0xc8>)
 800517a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 800518a:	f04f 33ff 	mov.w	r3, #4294967295
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e020      	b.n	80051d4 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4798      	blx	r3
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e016      	b.n	80051d4 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d112      	bne.n	80051d4 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10d      	bne.n	80051d4 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80051b8:	230c      	movs	r3, #12
 80051ba:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80051bc:	7afb      	ldrb	r3, [r7, #11]
 80051be:	461a      	mov	r2, r3
 80051c0:	2112      	movs	r1, #18
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 ff59 	bl	800607a <LSM6DSO_Write_Reg>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80051d4:	68fb      	ldr	r3, [r7, #12]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	0800651d 	.word	0x0800651d
 80051e4:	08006553 	.word	0x08006553

080051e8 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	331c      	adds	r3, #28
 80051f4:	2180      	movs	r1, #128	; 0x80
 80051f6:	4618      	mov	r0, r3
 80051f8:	f001 fe97 	bl	8006f2a <lsm6dso_i3c_disable_set>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
 8005206:	e060      	b.n	80052ca <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	331c      	adds	r3, #28
 800520c:	2101      	movs	r1, #1
 800520e:	4618      	mov	r0, r3
 8005210:	f001 fe65 	bl	8006ede <lsm6dso_auto_increment_set>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800521a:	f04f 33ff 	mov.w	r3, #4294967295
 800521e:	e054      	b.n	80052ca <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	331c      	adds	r3, #28
 8005224:	2101      	movs	r1, #1
 8005226:	4618      	mov	r0, r3
 8005228:	f001 fd66 	bl	8006cf8 <lsm6dso_block_data_update_set>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8005232:	f04f 33ff 	mov.w	r3, #4294967295
 8005236:	e048      	b.n	80052ca <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	331c      	adds	r3, #28
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f001 feb9 	bl	8006fb6 <lsm6dso_fifo_mode_set>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800524a:	f04f 33ff 	mov.w	r3, #4294967295
 800524e:	e03c      	b.n	80052ca <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2204      	movs	r2, #4
 8005254:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	331c      	adds	r3, #28
 800525c:	2100      	movs	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f001 fa20 	bl	80066a4 <lsm6dso_xl_data_rate_set>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800526a:	f04f 33ff 	mov.w	r3, #4294967295
 800526e:	e02c      	b.n	80052ca <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	331c      	adds	r3, #28
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f001 f9b6 	bl	80065e8 <lsm6dso_xl_full_scale_set>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8005282:	f04f 33ff 	mov.w	r3, #4294967295
 8005286:	e020      	b.n	80052ca <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2204      	movs	r2, #4
 800528c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	331c      	adds	r3, #28
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f001 fbd0 	bl	8006a3c <lsm6dso_gy_data_rate_set>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80052a2:	f04f 33ff 	mov.w	r3, #4294967295
 80052a6:	e010      	b.n	80052ca <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	331c      	adds	r3, #28
 80052ac:	2106      	movs	r1, #6
 80052ae:	4618      	mov	r0, r3
 80052b0:	f001 fb5c 	bl	800696c <lsm6dso_gy_full_scale_set>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80052ba:	f04f 33ff 	mov.w	r3, #4294967295
 80052be:	e004      	b.n	80052ca <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f888 	bl	80053f0 <LSM6DSO_ACC_Disable>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	e015      	b.n	8005318 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fc2e 	bl	8005b4e <LSM6DSO_GYRO_Disable>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	e00c      	b.n	8005318 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	331c      	adds	r3, #28
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f001 fdc3 	bl	8006ebc <lsm6dso_device_id_get>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 800533c:	f04f 33ff 	mov.w	r3, #4294967295
 8005340:	e000      	b.n	8005344 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2201      	movs	r2, #1
 8005360:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2200      	movs	r2, #0
 8005366:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005374:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2210      	movs	r2, #16
 800537a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <LSM6DSO_GetCapabilities+0x58>)
 8005386:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4a06      	ldr	r2, [pc, #24]	; (80053a4 <LSM6DSO_GetCapabilities+0x58>)
 800538c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	45d02000 	.word	0x45d02000

080053a8 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e014      	b.n	80053e8 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f103 021c 	add.w	r2, r3, #28
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f001 f969 	bl	80066a4 <lsm6dso_xl_data_rate_set>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
 80053dc:	e004      	b.n	80053e8 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e01f      	b.n	8005446 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f103 021c 	add.w	r2, r3, #28
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	332b      	adds	r3, #43	; 0x2b
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f001 fa42 	bl	800689c <lsm6dso_xl_data_rate_get>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	e010      	b.n	8005446 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	331c      	adds	r3, #28
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f001 f93a 	bl	80066a4 <lsm6dso_xl_data_rate_set>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	e004      	b.n	8005446 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	331c      	adds	r3, #28
 8005462:	f107 020b 	add.w	r2, r7, #11
 8005466:	4611      	mov	r1, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f001 f8e3 	bl	8006634 <lsm6dso_xl_full_scale_get>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005474:	f04f 33ff 	mov.w	r3, #4294967295
 8005478:	e023      	b.n	80054c2 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800547a:	7afb      	ldrb	r3, [r7, #11]
 800547c:	2b03      	cmp	r3, #3
 800547e:	d81b      	bhi.n	80054b8 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	08005499 	.word	0x08005499
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054a1 	.word	0x080054a1
 8005494:	080054a9 	.word	0x080054a9
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	4a0c      	ldr	r2, [pc, #48]	; (80054cc <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800549c:	601a      	str	r2, [r3, #0]
      break;
 800549e:	e00f      	b.n	80054c0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80054a4:	601a      	str	r2, [r3, #0]
      break;
 80054a6:	e00b      	b.n	80054c0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80054ac:	601a      	str	r2, [r3, #0]
      break;
 80054ae:	e007      	b.n	80054c0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80054b4:	601a      	str	r2, [r3, #0]
      break;
 80054b6:	e003      	b.n	80054c0 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80054b8:	f04f 33ff 	mov.w	r3, #4294967295
 80054bc:	60fb      	str	r3, [r7, #12]
      break;
 80054be:	bf00      	nop
  }

  return ret;
 80054c0:	68fb      	ldr	r3, [r7, #12]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	3d79db23 	.word	0x3d79db23
 80054d0:	3df9db23 	.word	0x3df9db23
 80054d4:	3e79db23 	.word	0x3e79db23
 80054d8:	3ef9db23 	.word	0x3ef9db23

080054dc <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	331c      	adds	r3, #28
 80054ee:	f107 020b 	add.w	r2, r7, #11
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f9d1 	bl	800689c <lsm6dso_xl_data_rate_get>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005500:	f04f 33ff 	mov.w	r3, #4294967295
 8005504:	e054      	b.n	80055b0 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8005506:	7afb      	ldrb	r3, [r7, #11]
 8005508:	2b0b      	cmp	r3, #11
 800550a:	d84c      	bhi.n	80055a6 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	08005545 	.word	0x08005545
 8005518:	08005557 	.word	0x08005557
 800551c:	0800555f 	.word	0x0800555f
 8005520:	08005567 	.word	0x08005567
 8005524:	0800556f 	.word	0x0800556f
 8005528:	08005577 	.word	0x08005577
 800552c:	0800557f 	.word	0x0800557f
 8005530:	08005587 	.word	0x08005587
 8005534:	0800558f 	.word	0x0800558f
 8005538:	08005597 	.word	0x08005597
 800553c:	0800559f 	.word	0x0800559f
 8005540:	0800554f 	.word	0x0800554f
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
      break;
 800554c:	e02f      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8005552:	601a      	str	r2, [r3, #0]
      break;
 8005554:	e02b      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 800555a:	601a      	str	r2, [r3, #0]
      break;
 800555c:	e027      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8005562:	601a      	str	r2, [r3, #0]
      break;
 8005564:	e023      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 800556a:	601a      	str	r2, [r3, #0]
      break;
 800556c:	e01f      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8005572:	601a      	str	r2, [r3, #0]
      break;
 8005574:	e01b      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 800557a:	601a      	str	r2, [r3, #0]
      break;
 800557c:	e017      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8005582:	601a      	str	r2, [r3, #0]
      break;
 8005584:	e013      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800558a:	601a      	str	r2, [r3, #0]
      break;
 800558c:	e00f      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	4a11      	ldr	r2, [pc, #68]	; (80055d8 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8005592:	601a      	str	r2, [r3, #0]
      break;
 8005594:	e00b      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	4a10      	ldr	r2, [pc, #64]	; (80055dc <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800559a:	601a      	str	r2, [r3, #0]
      break;
 800559c:	e007      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	4a0f      	ldr	r2, [pc, #60]	; (80055e0 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80055a2:	601a      	str	r2, [r3, #0]
      break;
 80055a4:	e003      	b.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295
 80055aa:	60fb      	str	r3, [r7, #12]
      break;
 80055ac:	bf00      	nop
  }

  return ret;
 80055ae:	68fb      	ldr	r3, [r7, #12]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	3fcccccd 	.word	0x3fcccccd
 80055bc:	41480000 	.word	0x41480000
 80055c0:	41d00000 	.word	0x41d00000
 80055c4:	42500000 	.word	0x42500000
 80055c8:	42d00000 	.word	0x42d00000
 80055cc:	43500000 	.word	0x43500000
 80055d0:	43d08000 	.word	0x43d08000
 80055d4:	44504000 	.word	0x44504000
 80055d8:	44d06000 	.word	0x44d06000
 80055dc:	45505000 	.word	0x45505000
 80055e0:	45d05800 	.word	0x45d05800

080055e4 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80055f0:	2100      	movs	r1, #0
 80055f2:	ed97 0a00 	vldr	s0, [r7]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f806 	bl	8005608 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80055fc:	4603      	mov	r3, r0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	ed87 0a02 	vstr	s0, [r7, #8]
 8005614:	460b      	mov	r3, r1
 8005616:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	2b02      	cmp	r3, #2
 8005624:	f000 80ea 	beq.w	80057fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8005628:	2b02      	cmp	r3, #2
 800562a:	f300 8163 	bgt.w	80058f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8005632:	2b01      	cmp	r3, #1
 8005634:	d074      	beq.n	8005720 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8005636:	e15d      	b.n	80058f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f103 001c 	add.w	r0, r3, #28
 800563e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005642:	2301      	movs	r3, #1
 8005644:	2114      	movs	r1, #20
 8005646:	f000 ff9f 	bl	8006588 <lsm6dso_read_reg>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8005650:	f04f 33ff 	mov.w	r3, #4294967295
 8005654:	e16c      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8005656:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800565a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d025      	beq.n	80056b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800566a:	2b01      	cmp	r3, #1
 800566c:	d10b      	bne.n	8005686 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	331c      	adds	r3, #28
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 f815 	bl	80066a4 <lsm6dso_xl_data_rate_set>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
 8005684:	e154      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800568a:	f36f 13c7 	bfc	r3, #7, #1
 800568e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f103 001c 	add.w	r0, r3, #28
 8005698:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800569c:	2301      	movs	r3, #1
 800569e:	2114      	movs	r1, #20
 80056a0:	f000 ff8a 	bl	80065b8 <lsm6dso_write_reg>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80056aa:	f04f 33ff 	mov.w	r3, #4294967295
 80056ae:	e13f      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f103 001c 	add.w	r0, r3, #28
 80056b6:	f107 0220 	add.w	r2, r7, #32
 80056ba:	2301      	movs	r3, #1
 80056bc:	2115      	movs	r1, #21
 80056be:	f000 ff63 	bl	8006588 <lsm6dso_read_reg>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	e130      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80056ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d014      	beq.n	8005706 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80056dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056e0:	f36f 1304 	bfc	r3, #4, #1
 80056e4:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f103 001c 	add.w	r0, r3, #28
 80056ee:	f107 0220 	add.w	r2, r7, #32
 80056f2:	2301      	movs	r3, #1
 80056f4:	2115      	movs	r1, #21
 80056f6:	f000 ff5f 	bl	80065b8 <lsm6dso_write_reg>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8005700:	f04f 33ff 	mov.w	r3, #4294967295
 8005704:	e114      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8005706:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800570a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800570e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	d400      	bmi.n	800571a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8005718:	e0f0      	b.n	80058fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800571a:	4b87      	ldr	r3, [pc, #540]	; (8005938 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
 800571e:	e0ed      	b.n	80058fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f103 001c 	add.w	r0, r3, #28
 8005726:	f107 021c 	add.w	r2, r7, #28
 800572a:	2301      	movs	r3, #1
 800572c:	2114      	movs	r1, #20
 800572e:	f000 ff2b 	bl	8006588 <lsm6dso_read_reg>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	e0f8      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800573e:	7f3b      	ldrb	r3, [r7, #28]
 8005740:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d023      	beq.n	8005792 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005750:	2b01      	cmp	r3, #1
 8005752:	d10b      	bne.n	800576c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	331c      	adds	r3, #28
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f000 ffa2 	bl	80066a4 <lsm6dso_xl_data_rate_set>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	e0e1      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800576c:	7f3b      	ldrb	r3, [r7, #28]
 800576e:	f36f 13c7 	bfc	r3, #7, #1
 8005772:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f103 001c 	add.w	r0, r3, #28
 800577a:	f107 021c 	add.w	r2, r7, #28
 800577e:	2301      	movs	r3, #1
 8005780:	2114      	movs	r1, #20
 8005782:	f000 ff19 	bl	80065b8 <lsm6dso_write_reg>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 800578c:	f04f 33ff 	mov.w	r3, #4294967295
 8005790:	e0ce      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f103 001c 	add.w	r0, r3, #28
 8005798:	f107 0218 	add.w	r2, r7, #24
 800579c:	2301      	movs	r3, #1
 800579e:	2115      	movs	r1, #21
 80057a0:	f000 fef2 	bl	8006588 <lsm6dso_read_reg>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
 80057ae:	e0bf      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80057b0:	7e3b      	ldrb	r3, [r7, #24]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d112      	bne.n	80057e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80057bc:	7e3b      	ldrb	r3, [r7, #24]
 80057be:	f043 0310 	orr.w	r3, r3, #16
 80057c2:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f103 001c 	add.w	r0, r3, #28
 80057ca:	f107 0218 	add.w	r2, r7, #24
 80057ce:	2301      	movs	r3, #1
 80057d0:	2115      	movs	r1, #21
 80057d2:	f000 fef1 	bl	80065b8 <lsm6dso_write_reg>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295
 80057e0:	e0a6      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80057e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80057e6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800593c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80057ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f2:	dc00      	bgt.n	80057f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80057f4:	e082      	b.n	80058fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80057f6:	4b52      	ldr	r3, [pc, #328]	; (8005940 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80057f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fa:	e07f      	b.n	80058fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f103 001c 	add.w	r0, r3, #28
 8005802:	f107 0210 	add.w	r2, r7, #16
 8005806:	2301      	movs	r3, #1
 8005808:	2115      	movs	r1, #21
 800580a:	f000 febd 	bl	8006588 <lsm6dso_read_reg>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8005814:	f04f 33ff 	mov.w	r3, #4294967295
 8005818:	e08a      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800581a:	7c3b      	ldrb	r3, [r7, #16]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d012      	beq.n	800584c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8005826:	7c3b      	ldrb	r3, [r7, #16]
 8005828:	f36f 1304 	bfc	r3, #4, #1
 800582c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f103 001c 	add.w	r0, r3, #28
 8005834:	f107 0210 	add.w	r2, r7, #16
 8005838:	2301      	movs	r3, #1
 800583a:	2115      	movs	r1, #21
 800583c:	f000 febc 	bl	80065b8 <lsm6dso_write_reg>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8005846:	f04f 33ff 	mov.w	r3, #4294967295
 800584a:	e071      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005852:	2b01      	cmp	r3, #1
 8005854:	d108      	bne.n	8005868 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f979 	bl	8005b4e <LSM6DSO_GYRO_Disable>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295
 8005866:	e063      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f103 001c 	add.w	r0, r3, #28
 800586e:	f107 0214 	add.w	r2, r7, #20
 8005872:	2301      	movs	r3, #1
 8005874:	2114      	movs	r1, #20
 8005876:	f000 fe87 	bl	8006588 <lsm6dso_read_reg>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8005880:	f04f 33ff 	mov.w	r3, #4294967295
 8005884:	e054      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8005886:	7d3b      	ldrb	r3, [r7, #20]
 8005888:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d123      	bne.n	80058da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005898:	2b01      	cmp	r3, #1
 800589a:	d10b      	bne.n	80058b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	331c      	adds	r3, #28
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fefe 	bl	80066a4 <lsm6dso_xl_data_rate_set>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295
 80058b2:	e03d      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80058b4:	7d3b      	ldrb	r3, [r7, #20]
 80058b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ba:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f103 001c 	add.w	r0, r3, #28
 80058c2:	f107 0214 	add.w	r2, r7, #20
 80058c6:	2301      	movs	r3, #1
 80058c8:	2114      	movs	r1, #20
 80058ca:	f000 fe75 	bl	80065b8 <lsm6dso_write_reg>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
 80058d8:	e02a      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80058da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80058de:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800593c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80058e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ea:	dc00      	bgt.n	80058ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80058ec:	e006      	b.n	80058fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f2:	e003      	b.n	80058fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80058fa:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d102      	bne.n	800590a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8005904:	f04f 33ff 	mov.w	r3, #4294967295
 8005908:	e012      	b.n	8005930 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005910:	2b01      	cmp	r3, #1
 8005912:	d106      	bne.n	8005922 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005914:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 fbc9 	bl	80060b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800591e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005920:	e005      	b.n	800592e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005922:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fc5a 	bl	80061e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800592c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005930:	4618      	mov	r0, r3
 8005932:	3730      	adds	r7, #48	; 0x30
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	41480000 	.word	0x41480000
 800593c:	43500000 	.word	0x43500000
 8005940:	43500000 	.word	0x43500000

08005944 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	331c      	adds	r3, #28
 8005956:	f107 020b 	add.w	r2, r7, #11
 800595a:	4611      	mov	r1, r2
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fe69 	bl	8006634 <lsm6dso_xl_full_scale_get>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005968:	f04f 33ff 	mov.w	r3, #4294967295
 800596c:	e023      	b.n	80059b6 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800596e:	7afb      	ldrb	r3, [r7, #11]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d81b      	bhi.n	80059ac <LSM6DSO_ACC_GetFullScale+0x68>
 8005974:	a201      	add	r2, pc, #4	; (adr r2, 800597c <LSM6DSO_ACC_GetFullScale+0x38>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	0800598d 	.word	0x0800598d
 8005980:	080059a5 	.word	0x080059a5
 8005984:	08005995 	.word	0x08005995
 8005988:	0800599d 	.word	0x0800599d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2202      	movs	r2, #2
 8005990:	601a      	str	r2, [r3, #0]
      break;
 8005992:	e00f      	b.n	80059b4 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2204      	movs	r2, #4
 8005998:	601a      	str	r2, [r3, #0]
      break;
 800599a:	e00b      	b.n	80059b4 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2208      	movs	r2, #8
 80059a0:	601a      	str	r2, [r3, #0]
      break;
 80059a2:	e007      	b.n	80059b4 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2210      	movs	r2, #16
 80059a8:	601a      	str	r2, [r3, #0]
      break;
 80059aa:	e003      	b.n	80059b4 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	60fb      	str	r3, [r7, #12]
      break;
 80059b2:	bf00      	nop
  }

  return ret;
 80059b4:	68fb      	ldr	r3, [r7, #12]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop

080059c0 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	dd0b      	ble.n	80059e8 <LSM6DSO_ACC_SetFullScale+0x28>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	dd06      	ble.n	80059e4 <LSM6DSO_ACC_SetFullScale+0x24>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	dc01      	bgt.n	80059e0 <LSM6DSO_ACC_SetFullScale+0x20>
 80059dc:	2303      	movs	r3, #3
 80059de:	e004      	b.n	80059ea <LSM6DSO_ACC_SetFullScale+0x2a>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e002      	b.n	80059ea <LSM6DSO_ACC_SetFullScale+0x2a>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e000      	b.n	80059ea <LSM6DSO_ACC_SetFullScale+0x2a>
 80059e8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 80059ea:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	331c      	adds	r3, #28
 80059f0:	7bfa      	ldrb	r2, [r7, #15]
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fdf7 	bl	80065e8 <lsm6dso_xl_full_scale_set>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295
 8005a04:	e000      	b.n	8005a08 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	331c      	adds	r3, #28
 8005a1e:	f107 0208 	add.w	r2, r7, #8
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 f9d8 	bl	8006dda <lsm6dso_acceleration_raw_get>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295
 8005a34:	e00c      	b.n	8005a50 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005a36:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005a3e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005a46:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	331c      	adds	r3, #28
 8005a6c:	f107 0210 	add.w	r2, r7, #16
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f9b1 	bl	8006dda <lsm6dso_acceleration_raw_get>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a82:	e03c      	b.n	8005afe <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fce0 	bl	8005450 <LSM6DSO_ACC_GetSensitivity>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8005a96:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9a:	e030      	b.n	8005afe <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005a9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005aa0:	ee07 3a90 	vmov	s15, r3
 8005aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ab4:	ee17 2a90 	vmov	r2, s15
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005abc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ad4:	ee17 2a90 	vmov	r2, s15
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005adc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ae0:	ee07 3a90 	vmov	s15, r3
 8005ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ae8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005af4:	ee17 2a90 	vmov	r2, s15
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e014      	b.n	8005b46 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f103 021c 	add.w	r2, r3, #28
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f000 ff86 	bl	8006a3c <lsm6dso_gy_data_rate_set>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	e004      	b.n	8005b46 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e01f      	b.n	8005ba4 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f103 021c 	add.w	r2, r3, #28
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	332c      	adds	r3, #44	; 0x2c
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f001 f85f 	bl	8006c34 <lsm6dso_gy_data_rate_get>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b80:	e010      	b.n	8005ba4 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	331c      	adds	r3, #28
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 ff57 	bl	8006a3c <lsm6dso_gy_data_rate_set>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005b94:	f04f 33ff 	mov.w	r3, #4294967295
 8005b98:	e004      	b.n	8005ba4 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	331c      	adds	r3, #28
 8005bbe:	f107 020b 	add.w	r2, r7, #11
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fef7 	bl	80069b8 <lsm6dso_gy_full_scale_get>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd4:	e02d      	b.n	8005c32 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
 8005bd8:	2b06      	cmp	r3, #6
 8005bda:	d825      	bhi.n	8005c28 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8005bdc:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005c09 	.word	0x08005c09
 8005be8:	08005c01 	.word	0x08005c01
 8005bec:	08005c11 	.word	0x08005c11
 8005bf0:	08005c29 	.word	0x08005c29
 8005bf4:	08005c19 	.word	0x08005c19
 8005bf8:	08005c29 	.word	0x08005c29
 8005bfc:	08005c21 	.word	0x08005c21
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	4a0e      	ldr	r2, [pc, #56]	; (8005c3c <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8005c04:	601a      	str	r2, [r3, #0]
      break;
 8005c06:	e013      	b.n	8005c30 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	4a0d      	ldr	r2, [pc, #52]	; (8005c40 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8005c0c:	601a      	str	r2, [r3, #0]
      break;
 8005c0e:	e00f      	b.n	8005c30 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8005c14:	601a      	str	r2, [r3, #0]
      break;
 8005c16:	e00b      	b.n	8005c30 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8005c1c:	601a      	str	r2, [r3, #0]
      break;
 8005c1e:	e007      	b.n	8005c30 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8005c24:	601a      	str	r2, [r3, #0]
      break;
 8005c26:	e003      	b.n	8005c30 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2c:	60fb      	str	r3, [r7, #12]
      break;
 8005c2e:	bf00      	nop
  }

  return ret;
 8005c30:	68fb      	ldr	r3, [r7, #12]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	408c0000 	.word	0x408c0000
 8005c40:	410c0000 	.word	0x410c0000
 8005c44:	418c0000 	.word	0x418c0000
 8005c48:	420c0000 	.word	0x420c0000
 8005c4c:	428c0000 	.word	0x428c0000

08005c50 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	331c      	adds	r3, #28
 8005c62:	f107 020b 	add.w	r2, r7, #11
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 ffe3 	bl	8006c34 <lsm6dso_gy_data_rate_get>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
 8005c78:	e04e      	b.n	8005d18 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	2b0a      	cmp	r3, #10
 8005c7e:	d846      	bhi.n	8005d0e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	08005cbf 	.word	0x08005cbf
 8005c90:	08005cc7 	.word	0x08005cc7
 8005c94:	08005ccf 	.word	0x08005ccf
 8005c98:	08005cd7 	.word	0x08005cd7
 8005c9c:	08005cdf 	.word	0x08005cdf
 8005ca0:	08005ce7 	.word	0x08005ce7
 8005ca4:	08005cef 	.word	0x08005cef
 8005ca8:	08005cf7 	.word	0x08005cf7
 8005cac:	08005cff 	.word	0x08005cff
 8005cb0:	08005d07 	.word	0x08005d07
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
      break;
 8005cbc:	e02b      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8005cc2:	601a      	str	r2, [r3, #0]
      break;
 8005cc4:	e027      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8005cca:	601a      	str	r2, [r3, #0]
      break;
 8005ccc:	e023      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8005cd2:	601a      	str	r2, [r3, #0]
      break;
 8005cd4:	e01f      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8005cda:	601a      	str	r2, [r3, #0]
      break;
 8005cdc:	e01b      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8005ce2:	601a      	str	r2, [r3, #0]
      break;
 8005ce4:	e017      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8005cea:	601a      	str	r2, [r3, #0]
      break;
 8005cec:	e013      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	4a11      	ldr	r2, [pc, #68]	; (8005d38 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8005cf2:	601a      	str	r2, [r3, #0]
      break;
 8005cf4:	e00f      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	4a10      	ldr	r2, [pc, #64]	; (8005d3c <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8005cfa:	601a      	str	r2, [r3, #0]
      break;
 8005cfc:	e00b      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8005d02:	601a      	str	r2, [r3, #0]
      break;
 8005d04:	e007      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	4a0e      	ldr	r2, [pc, #56]	; (8005d44 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8005d0a:	601a      	str	r2, [r3, #0]
      break;
 8005d0c:	e003      	b.n	8005d16 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8005d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d12:	60fb      	str	r3, [r7, #12]
      break;
 8005d14:	bf00      	nop
  }

  return ret;
 8005d16:	68fb      	ldr	r3, [r7, #12]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	41480000 	.word	0x41480000
 8005d24:	41d00000 	.word	0x41d00000
 8005d28:	42500000 	.word	0x42500000
 8005d2c:	42d00000 	.word	0x42d00000
 8005d30:	43500000 	.word	0x43500000
 8005d34:	43d08000 	.word	0x43d08000
 8005d38:	44504000 	.word	0x44504000
 8005d3c:	44d06000 	.word	0x44d06000
 8005d40:	45505000 	.word	0x45505000
 8005d44:	45d05800 	.word	0x45d05800

08005d48 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8005d54:	2100      	movs	r1, #0
 8005d56:	ed97 0a00 	vldr	s0, [r7]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f806 	bl	8005d6c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005d60:	4603      	mov	r3, r0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d028      	beq.n	8005de0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8005d8e:	e05c      	b.n	8005e4a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f103 001c 	add.w	r0, r3, #28
 8005d96:	f107 0214 	add.w	r2, r7, #20
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	2116      	movs	r1, #22
 8005d9e:	f000 fbf3 	bl	8006588 <lsm6dso_read_reg>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005da8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dac:	e06c      	b.n	8005e88 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8005dae:	7d3b      	ldrb	r3, [r7, #20]
 8005db0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d04b      	beq.n	8005e52 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005dba:	7d3b      	ldrb	r3, [r7, #20]
 8005dbc:	f36f 13c7 	bfc	r3, #7, #1
 8005dc0:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f103 001c 	add.w	r0, r3, #28
 8005dc8:	f107 0214 	add.w	r2, r7, #20
 8005dcc:	2301      	movs	r3, #1
 8005dce:	2116      	movs	r1, #22
 8005dd0:	f000 fbf2 	bl	80065b8 <lsm6dso_write_reg>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d03b      	beq.n	8005e52 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8005dda:	f04f 33ff 	mov.w	r3, #4294967295
 8005dde:	e053      	b.n	8005e88 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f103 001c 	add.w	r0, r3, #28
 8005de6:	f107 0210 	add.w	r2, r7, #16
 8005dea:	2301      	movs	r3, #1
 8005dec:	2116      	movs	r1, #22
 8005dee:	f000 fbcb 	bl	8006588 <lsm6dso_read_reg>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8005df8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfc:	e044      	b.n	8005e88 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8005dfe:	7c3b      	ldrb	r3, [r7, #16]
 8005e00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d112      	bne.n	8005e30 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8005e0a:	7c3b      	ldrb	r3, [r7, #16]
 8005e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e10:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f103 001c 	add.w	r0, r3, #28
 8005e18:	f107 0210 	add.w	r2, r7, #16
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	2116      	movs	r1, #22
 8005e20:	f000 fbca 	bl	80065b8 <lsm6dso_write_reg>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8005e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2e:	e02b      	b.n	8005e88 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005e30:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e34:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005e90 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8005e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e40:	dc00      	bgt.n	8005e44 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8005e42:	e007      	b.n	8005e54 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	e004      	b.n	8005e54 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4e:	61fb      	str	r3, [r7, #28]
      break;
 8005e50:	e000      	b.n	8005e54 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8005e52:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d102      	bne.n	8005e62 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e60:	e012      	b.n	8005e88 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d106      	bne.n	8005e7a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005e6c:	ed97 0a06 	vldr	s0, [r7, #24]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fa45 	bl	8006300 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8005e76:	61f8      	str	r0, [r7, #28]
 8005e78:	e005      	b.n	8005e86 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005e7a:	ed97 0a06 	vldr	s0, [r7, #24]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 faca 	bl	8006418 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8005e84:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8005e86:	69fb      	ldr	r3, [r7, #28]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	43500000 	.word	0x43500000
 8005e94:	43500000 	.word	0x43500000

08005e98 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	331c      	adds	r3, #28
 8005eaa:	f107 020b 	add.w	r2, r7, #11
 8005eae:	4611      	mov	r1, r2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fd81 	bl	80069b8 <lsm6dso_gy_full_scale_get>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec0:	e030      	b.n	8005f24 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	2b06      	cmp	r3, #6
 8005ec6:	d828      	bhi.n	8005f1a <LSM6DSO_GYRO_GetFullScale+0x82>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005efd 	.word	0x08005efd
 8005edc:	08005f1b 	.word	0x08005f1b
 8005ee0:	08005f07 	.word	0x08005f07
 8005ee4:	08005f1b 	.word	0x08005f1b
 8005ee8:	08005f11 	.word	0x08005f11
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	227d      	movs	r2, #125	; 0x7d
 8005ef0:	601a      	str	r2, [r3, #0]
      break;
 8005ef2:	e016      	b.n	8005f22 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	22fa      	movs	r2, #250	; 0xfa
 8005ef8:	601a      	str	r2, [r3, #0]
      break;
 8005efa:	e012      	b.n	8005f22 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005f02:	601a      	str	r2, [r3, #0]
      break;
 8005f04:	e00d      	b.n	8005f22 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f0c:	601a      	str	r2, [r3, #0]
      break;
 8005f0e:	e008      	b.n	8005f22 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f16:	601a      	str	r2, [r3, #0]
      break;
 8005f18:	e003      	b.n	8005f22 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8005f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1e:	60fb      	str	r3, [r7, #12]
      break;
 8005f20:	bf00      	nop
  }

  return ret;
 8005f22:	68fb      	ldr	r3, [r7, #12]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b7d      	cmp	r3, #125	; 0x7d
 8005f3a:	dd12      	ble.n	8005f62 <LSM6DSO_GYRO_SetFullScale+0x36>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2bfa      	cmp	r3, #250	; 0xfa
 8005f40:	dd0d      	ble.n	8005f5e <LSM6DSO_GYRO_SetFullScale+0x32>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f48:	dd07      	ble.n	8005f5a <LSM6DSO_GYRO_SetFullScale+0x2e>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f50:	dc01      	bgt.n	8005f56 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8005f52:	2304      	movs	r3, #4
 8005f54:	e006      	b.n	8005f64 <LSM6DSO_GYRO_SetFullScale+0x38>
 8005f56:	2306      	movs	r3, #6
 8005f58:	e004      	b.n	8005f64 <LSM6DSO_GYRO_SetFullScale+0x38>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e002      	b.n	8005f64 <LSM6DSO_GYRO_SetFullScale+0x38>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e000      	b.n	8005f64 <LSM6DSO_GYRO_SetFullScale+0x38>
 8005f62:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8005f64:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	331c      	adds	r3, #28
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fcfc 	bl	800696c <lsm6dso_gy_full_scale_set>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7e:	e000      	b.n	8005f82 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	331c      	adds	r3, #28
 8005f98:	f107 0208 	add.w	r2, r7, #8
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fed0 	bl	8006d44 <lsm6dso_angular_rate_raw_get>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005faa:	f04f 33ff 	mov.w	r3, #4294967295
 8005fae:	e00c      	b.n	8005fca <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005fb0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005fb8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005fc0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	331c      	adds	r3, #28
 8005fe0:	f107 0210 	add.w	r2, r7, #16
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 feac 	bl	8006d44 <lsm6dso_angular_rate_raw_get>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8005ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff6:	e03c      	b.n	8006072 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff fdd4 	bl	8005bac <LSM6DSO_GYRO_GetSensitivity>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295
 800600e:	e030      	b.n	8006072 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006010:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006014:	ee07 3a90 	vmov	s15, r3
 8006018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800601c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006028:	ee17 2a90 	vmov	r2, s15
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006030:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006034:	ee07 3a90 	vmov	s15, r3
 8006038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800603c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006048:	ee17 2a90 	vmov	r2, s15
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006050:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800605c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006068:	ee17 2a90 	vmov	r2, s15
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
 8006086:	4613      	mov	r3, r2
 8006088:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f103 001c 	add.w	r0, r3, #28
 8006090:	1cba      	adds	r2, r7, #2
 8006092:	78f9      	ldrb	r1, [r7, #3]
 8006094:	2301      	movs	r3, #1
 8006096:	f000 fa8f 	bl	80065b8 <lsm6dso_write_reg>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80060a0:	f04f 33ff 	mov.w	r3, #4294967295
 80060a4:	e000      	b.n	80060a8 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80060bc:	edd7 7a00 	vldr	s15, [r7]
 80060c0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80061c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80060c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060cc:	d801      	bhi.n	80060d2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80060ce:	230b      	movs	r3, #11
 80060d0:	e063      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80060d2:	edd7 7a00 	vldr	s15, [r7]
 80060d6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80060da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e2:	d801      	bhi.n	80060e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e058      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80060e8:	edd7 7a00 	vldr	s15, [r7]
 80060ec:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80060f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f8:	d801      	bhi.n	80060fe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e04d      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80060fe:	edd7 7a00 	vldr	s15, [r7]
 8006102:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80061c4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800610a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610e:	d801      	bhi.n	8006114 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006110:	2303      	movs	r3, #3
 8006112:	e042      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006114:	edd7 7a00 	vldr	s15, [r7]
 8006118:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80061c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 800611c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006124:	d801      	bhi.n	800612a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006126:	2304      	movs	r3, #4
 8006128:	e037      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800612a:	edd7 7a00 	vldr	s15, [r7]
 800612e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80061cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613a:	d801      	bhi.n	8006140 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 800613c:	2305      	movs	r3, #5
 800613e:	e02c      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006140:	edd7 7a00 	vldr	s15, [r7]
 8006144:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80061d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800614c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006150:	d801      	bhi.n	8006156 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006152:	2306      	movs	r3, #6
 8006154:	e021      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006156:	edd7 7a00 	vldr	s15, [r7]
 800615a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80061d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 800615e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006166:	d801      	bhi.n	800616c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006168:	2307      	movs	r3, #7
 800616a:	e016      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800616c:	edd7 7a00 	vldr	s15, [r7]
 8006170:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80061d8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617c:	d801      	bhi.n	8006182 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800617e:	2308      	movs	r3, #8
 8006180:	e00b      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006182:	edd7 7a00 	vldr	s15, [r7]
 8006186:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80061dc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800618a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800618e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006192:	d801      	bhi.n	8006198 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006194:	2309      	movs	r3, #9
 8006196:	e000      	b.n	800619a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006198:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800619a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	331c      	adds	r3, #28
 80061a0:	7bfa      	ldrb	r2, [r7, #15]
 80061a2:	4611      	mov	r1, r2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fa7d 	bl	80066a4 <lsm6dso_xl_data_rate_set>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80061b0:	f04f 33ff 	mov.w	r3, #4294967295
 80061b4:	e000      	b.n	80061b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	3fcccccd 	.word	0x3fcccccd
 80061c4:	42500000 	.word	0x42500000
 80061c8:	42d00000 	.word	0x42d00000
 80061cc:	43500000 	.word	0x43500000
 80061d0:	43d08000 	.word	0x43d08000
 80061d4:	44504000 	.word	0x44504000
 80061d8:	44d06000 	.word	0x44d06000
 80061dc:	45505000 	.word	0x45505000

080061e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80061ec:	edd7 7a00 	vldr	s15, [r7]
 80061f0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80062e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80061f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fc:	d801      	bhi.n	8006202 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80061fe:	230b      	movs	r3, #11
 8006200:	e063      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006202:	edd7 7a00 	vldr	s15, [r7]
 8006206:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800620a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800620e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006212:	d801      	bhi.n	8006218 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006214:	2301      	movs	r3, #1
 8006216:	e058      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006218:	edd7 7a00 	vldr	s15, [r7]
 800621c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006228:	d801      	bhi.n	800622e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800622a:	2302      	movs	r3, #2
 800622c:	e04d      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800622e:	edd7 7a00 	vldr	s15, [r7]
 8006232:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80062e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	d801      	bhi.n	8006244 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006240:	2303      	movs	r3, #3
 8006242:	e042      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006244:	edd7 7a00 	vldr	s15, [r7]
 8006248:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80062e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 800624c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006254:	d801      	bhi.n	800625a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006256:	2304      	movs	r3, #4
 8006258:	e037      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800625a:	edd7 7a00 	vldr	s15, [r7]
 800625e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80062ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626a:	d801      	bhi.n	8006270 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 800626c:	2305      	movs	r3, #5
 800626e:	e02c      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006270:	edd7 7a00 	vldr	s15, [r7]
 8006274:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80062f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800627c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006280:	d801      	bhi.n	8006286 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006282:	2306      	movs	r3, #6
 8006284:	e021      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006286:	edd7 7a00 	vldr	s15, [r7]
 800628a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80062f4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800628e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006296:	d801      	bhi.n	800629c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006298:	2307      	movs	r3, #7
 800629a:	e016      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800629c:	edd7 7a00 	vldr	s15, [r7]
 80062a0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80062f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80062a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ac:	d801      	bhi.n	80062b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80062ae:	2308      	movs	r3, #8
 80062b0:	e00b      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80062b2:	edd7 7a00 	vldr	s15, [r7]
 80062b6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80062fc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80062ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c2:	d801      	bhi.n	80062c8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80062c4:	2309      	movs	r3, #9
 80062c6:	e000      	b.n	80062ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80062c8:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	3fcccccd 	.word	0x3fcccccd
 80062e4:	42500000 	.word	0x42500000
 80062e8:	42d00000 	.word	0x42d00000
 80062ec:	43500000 	.word	0x43500000
 80062f0:	43d08000 	.word	0x43d08000
 80062f4:	44504000 	.word	0x44504000
 80062f8:	44d06000 	.word	0x44d06000
 80062fc:	45505000 	.word	0x45505000

08006300 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800630c:	edd7 7a00 	vldr	s15, [r7]
 8006310:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631c:	d801      	bhi.n	8006322 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800631e:	2301      	movs	r3, #1
 8006320:	e058      	b.n	80063d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006322:	edd7 7a00 	vldr	s15, [r7]
 8006326:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800632a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800632e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006332:	d801      	bhi.n	8006338 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006334:	2302      	movs	r3, #2
 8006336:	e04d      	b.n	80063d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006338:	edd7 7a00 	vldr	s15, [r7]
 800633c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80063fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006348:	d801      	bhi.n	800634e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800634a:	2303      	movs	r3, #3
 800634c:	e042      	b.n	80063d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800634e:	edd7 7a00 	vldr	s15, [r7]
 8006352:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006400 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800635a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635e:	d801      	bhi.n	8006364 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006360:	2304      	movs	r3, #4
 8006362:	e037      	b.n	80063d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006364:	edd7 7a00 	vldr	s15, [r7]
 8006368:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006404 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800636c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006374:	d801      	bhi.n	800637a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006376:	2305      	movs	r3, #5
 8006378:	e02c      	b.n	80063d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800637a:	edd7 7a00 	vldr	s15, [r7]
 800637e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006408 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638a:	d801      	bhi.n	8006390 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800638c:	2306      	movs	r3, #6
 800638e:	e021      	b.n	80063d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006390:	edd7 7a00 	vldr	s15, [r7]
 8006394:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800640c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800639c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a0:	d801      	bhi.n	80063a6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80063a2:	2307      	movs	r3, #7
 80063a4:	e016      	b.n	80063d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80063a6:	edd7 7a00 	vldr	s15, [r7]
 80063aa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006410 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80063ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b6:	d801      	bhi.n	80063bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80063b8:	2308      	movs	r3, #8
 80063ba:	e00b      	b.n	80063d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80063bc:	edd7 7a00 	vldr	s15, [r7]
 80063c0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006414 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80063c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063cc:	d801      	bhi.n	80063d2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80063ce:	2309      	movs	r3, #9
 80063d0:	e000      	b.n	80063d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80063d2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80063d4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	331c      	adds	r3, #28
 80063da:	7bfa      	ldrb	r2, [r7, #15]
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fb2c 	bl	8006a3c <lsm6dso_gy_data_rate_set>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80063ea:	f04f 33ff 	mov.w	r3, #4294967295
 80063ee:	e000      	b.n	80063f2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	42500000 	.word	0x42500000
 8006400:	42d00000 	.word	0x42d00000
 8006404:	43500000 	.word	0x43500000
 8006408:	43d08000 	.word	0x43d08000
 800640c:	44504000 	.word	0x44504000
 8006410:	44d06000 	.word	0x44d06000
 8006414:	45505000 	.word	0x45505000

08006418 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006424:	edd7 7a00 	vldr	s15, [r7]
 8006428:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800642c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006434:	d801      	bhi.n	800643a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8006436:	2301      	movs	r3, #1
 8006438:	e058      	b.n	80064ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800643a:	edd7 7a00 	vldr	s15, [r7]
 800643e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800644a:	d801      	bhi.n	8006450 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800644c:	2302      	movs	r3, #2
 800644e:	e04d      	b.n	80064ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006450:	edd7 7a00 	vldr	s15, [r7]
 8006454:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006500 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800645c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006460:	d801      	bhi.n	8006466 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006462:	2303      	movs	r3, #3
 8006464:	e042      	b.n	80064ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006466:	edd7 7a00 	vldr	s15, [r7]
 800646a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006504 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800646e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006476:	d801      	bhi.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006478:	2304      	movs	r3, #4
 800647a:	e037      	b.n	80064ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800647c:	edd7 7a00 	vldr	s15, [r7]
 8006480:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006508 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648c:	d801      	bhi.n	8006492 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800648e:	2305      	movs	r3, #5
 8006490:	e02c      	b.n	80064ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006492:	edd7 7a00 	vldr	s15, [r7]
 8006496:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800650c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800649a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800649e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a2:	d801      	bhi.n	80064a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80064a4:	2306      	movs	r3, #6
 80064a6:	e021      	b.n	80064ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80064a8:	edd7 7a00 	vldr	s15, [r7]
 80064ac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006510 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80064b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b8:	d801      	bhi.n	80064be <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80064ba:	2307      	movs	r3, #7
 80064bc:	e016      	b.n	80064ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80064be:	edd7 7a00 	vldr	s15, [r7]
 80064c2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006514 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80064c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ce:	d801      	bhi.n	80064d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80064d0:	2308      	movs	r3, #8
 80064d2:	e00b      	b.n	80064ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80064d4:	edd7 7a00 	vldr	s15, [r7]
 80064d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006518 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80064dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e4:	d801      	bhi.n	80064ea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80064e6:	2309      	movs	r3, #9
 80064e8:	e000      	b.n	80064ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80064ea:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	42500000 	.word	0x42500000
 8006504:	42d00000 	.word	0x42d00000
 8006508:	43500000 	.word	0x43500000
 800650c:	43d08000 	.word	0x43d08000
 8006510:	44504000 	.word	0x44504000
 8006514:	44d06000 	.word	0x44d06000
 8006518:	45505000 	.word	0x45505000

0800651c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800651c:	b590      	push	{r4, r7, lr}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	461a      	mov	r2, r3
 8006528:	460b      	mov	r3, r1
 800652a:	72fb      	strb	r3, [r7, #11]
 800652c:	4613      	mov	r3, r2
 800652e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	695c      	ldr	r4, [r3, #20]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	7b1b      	ldrb	r3, [r3, #12]
 800653c:	b298      	uxth	r0, r3
 800653e:	7afb      	ldrb	r3, [r7, #11]
 8006540:	b299      	uxth	r1, r3
 8006542:	893b      	ldrh	r3, [r7, #8]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	47a0      	blx	r4
 8006548:	4603      	mov	r3, r0
}
 800654a:	4618      	mov	r0, r3
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd90      	pop	{r4, r7, pc}

08006552 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006552:	b590      	push	{r4, r7, lr}
 8006554:	b087      	sub	sp, #28
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	461a      	mov	r2, r3
 800655e:	460b      	mov	r3, r1
 8006560:	72fb      	strb	r3, [r7, #11]
 8006562:	4613      	mov	r3, r2
 8006564:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	691c      	ldr	r4, [r3, #16]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	7b1b      	ldrb	r3, [r3, #12]
 8006572:	b298      	uxth	r0, r3
 8006574:	7afb      	ldrb	r3, [r7, #11]
 8006576:	b299      	uxth	r1, r3
 8006578:	893b      	ldrh	r3, [r7, #8]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	47a0      	blx	r4
 800657e:	4603      	mov	r3, r0
}
 8006580:	4618      	mov	r0, r3
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	bd90      	pop	{r4, r7, pc}

08006588 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	461a      	mov	r2, r3
 8006594:	460b      	mov	r3, r1
 8006596:	72fb      	strb	r3, [r7, #11]
 8006598:	4613      	mov	r3, r2
 800659a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	685c      	ldr	r4, [r3, #4]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6898      	ldr	r0, [r3, #8]
 80065a4:	893b      	ldrh	r3, [r7, #8]
 80065a6:	7af9      	ldrb	r1, [r7, #11]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	47a0      	blx	r4
 80065ac:	6178      	str	r0, [r7, #20]

  return ret;
 80065ae:	697b      	ldr	r3, [r7, #20]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd90      	pop	{r4, r7, pc}

080065b8 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80065b8:	b590      	push	{r4, r7, lr}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	607a      	str	r2, [r7, #4]
 80065c2:	461a      	mov	r2, r3
 80065c4:	460b      	mov	r3, r1
 80065c6:	72fb      	strb	r3, [r7, #11]
 80065c8:	4613      	mov	r3, r2
 80065ca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681c      	ldr	r4, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6898      	ldr	r0, [r3, #8]
 80065d4:	893b      	ldrh	r3, [r7, #8]
 80065d6:	7af9      	ldrb	r1, [r7, #11]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	47a0      	blx	r4
 80065dc:	6178      	str	r0, [r7, #20]

  return ret;
 80065de:	697b      	ldr	r3, [r7, #20]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd90      	pop	{r4, r7, pc}

080065e8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80065f4:	f107 0208 	add.w	r2, r7, #8
 80065f8:	2301      	movs	r3, #1
 80065fa:	2110      	movs	r1, #16
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff ffc3 	bl	8006588 <lsm6dso_read_reg>
 8006602:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10f      	bne.n	800662a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	b2da      	uxtb	r2, r3
 8006612:	7a3b      	ldrb	r3, [r7, #8]
 8006614:	f362 0383 	bfi	r3, r2, #2, #2
 8006618:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800661a:	f107 0208 	add.w	r2, r7, #8
 800661e:	2301      	movs	r3, #1
 8006620:	2110      	movs	r1, #16
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff ffc8 	bl	80065b8 <lsm6dso_write_reg>
 8006628:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800662a:	68fb      	ldr	r3, [r7, #12]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800663e:	f107 0208 	add.w	r2, r7, #8
 8006642:	2301      	movs	r3, #1
 8006644:	2110      	movs	r1, #16
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff9e 	bl	8006588 <lsm6dso_read_reg>
 800664c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800664e:	7a3b      	ldrb	r3, [r7, #8]
 8006650:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d81a      	bhi.n	8006690 <lsm6dso_xl_full_scale_get+0x5c>
 800665a:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <lsm6dso_xl_full_scale_get+0x2c>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	08006671 	.word	0x08006671
 8006664:	08006679 	.word	0x08006679
 8006668:	08006681 	.word	0x08006681
 800666c:	08006689 	.word	0x08006689
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]
      break;
 8006676:	e00f      	b.n	8006698 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2201      	movs	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
      break;
 800667e:	e00b      	b.n	8006698 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2202      	movs	r2, #2
 8006684:	701a      	strb	r2, [r3, #0]
      break;
 8006686:	e007      	b.n	8006698 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2203      	movs	r2, #3
 800668c:	701a      	strb	r2, [r3, #0]
      break;
 800668e:	e003      	b.n	8006698 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
      break;
 8006696:	bf00      	nop
  }

  return ret;
 8006698:	68fb      	ldr	r3, [r7, #12]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop

080066a4 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80066b4:	f107 030c 	add.w	r3, r7, #12
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fca1 	bl	8007002 <lsm6dso_fsm_enable_get>
 80066c0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f040 80c4 	bne.w	8006852 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80066ca:	7b3b      	ldrb	r3, [r7, #12]
 80066cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80066d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80066d2:	7b3b      	ldrb	r3, [r7, #12]
 80066d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80066d8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80066da:	4313      	orrs	r3, r2
 80066dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80066de:	7b3b      	ldrb	r3, [r7, #12]
 80066e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80066e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80066e6:	4313      	orrs	r3, r2
 80066e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80066ea:	7b3b      	ldrb	r3, [r7, #12]
 80066ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80066f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80066f6:	7b3b      	ldrb	r3, [r7, #12]
 80066f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80066fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80066fe:	4313      	orrs	r3, r2
 8006700:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006702:	7b3b      	ldrb	r3, [r7, #12]
 8006704:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006708:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800670a:	4313      	orrs	r3, r2
 800670c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800670e:	7b3b      	ldrb	r3, [r7, #12]
 8006710:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006714:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006716:	4313      	orrs	r3, r2
 8006718:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800671a:	7b3b      	ldrb	r3, [r7, #12]
 800671c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006720:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006722:	4313      	orrs	r3, r2
 8006724:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006726:	7b7b      	ldrb	r3, [r7, #13]
 8006728:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800672c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800672e:	4313      	orrs	r3, r2
 8006730:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006732:	7b7b      	ldrb	r3, [r7, #13]
 8006734:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006738:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800673a:	4313      	orrs	r3, r2
 800673c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800673e:	7b7b      	ldrb	r3, [r7, #13]
 8006740:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006744:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006746:	4313      	orrs	r3, r2
 8006748:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800674a:	7b7b      	ldrb	r3, [r7, #13]
 800674c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006750:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006752:	4313      	orrs	r3, r2
 8006754:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006756:	7b7b      	ldrb	r3, [r7, #13]
 8006758:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800675c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800675e:	4313      	orrs	r3, r2
 8006760:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006762:	7b7b      	ldrb	r3, [r7, #13]
 8006764:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006768:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800676a:	4313      	orrs	r3, r2
 800676c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800676e:	7b7b      	ldrb	r3, [r7, #13]
 8006770:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006774:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006776:	4313      	orrs	r3, r2
 8006778:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800677a:	7b7b      	ldrb	r3, [r7, #13]
 800677c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006780:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006782:	4313      	orrs	r3, r2
 8006784:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006786:	2b01      	cmp	r3, #1
 8006788:	d163      	bne.n	8006852 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800678a:	f107 030b 	add.w	r3, r7, #11
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc57 	bl	8007044 <lsm6dso_fsm_data_rate_get>
 8006796:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d159      	bne.n	8006852 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d853      	bhi.n	800684c <lsm6dso_xl_data_rate_set+0x1a8>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <lsm6dso_xl_data_rate_set+0x108>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067cf 	.word	0x080067cf
 80067b4:	080067ed 	.word	0x080067ed
 80067b8:	08006817 	.word	0x08006817
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80067c6:	e045      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	75fb      	strb	r3, [r7, #23]
            break;
 80067cc:	e042      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80067d4:	2302      	movs	r3, #2
 80067d6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80067d8:	e03c      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d102      	bne.n	80067e6 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80067e0:	2302      	movs	r3, #2
 80067e2:	75fb      	strb	r3, [r7, #23]
            break;
 80067e4:	e036      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	75fb      	strb	r3, [r7, #23]
            break;
 80067ea:	e033      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80067f2:	2303      	movs	r3, #3
 80067f4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80067f6:	e02d      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d102      	bne.n	8006804 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80067fe:	2303      	movs	r3, #3
 8006800:	75fb      	strb	r3, [r7, #23]
            break;
 8006802:	e027      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d102      	bne.n	8006810 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800680a:	2303      	movs	r3, #3
 800680c:	75fb      	strb	r3, [r7, #23]
            break;
 800680e:	e021      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	75fb      	strb	r3, [r7, #23]
            break;
 8006814:	e01e      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800681c:	2304      	movs	r3, #4
 800681e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006820:	e018      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d102      	bne.n	800682e <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006828:	2304      	movs	r3, #4
 800682a:	75fb      	strb	r3, [r7, #23]
            break;
 800682c:	e012      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d102      	bne.n	800683a <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006834:	2304      	movs	r3, #4
 8006836:	75fb      	strb	r3, [r7, #23]
            break;
 8006838:	e00c      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d102      	bne.n	8006846 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006840:	2304      	movs	r3, #4
 8006842:	75fb      	strb	r3, [r7, #23]
            break;
 8006844:	e006      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	75fb      	strb	r3, [r7, #23]
            break;
 800684a:	e003      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	75fb      	strb	r3, [r7, #23]
            break;
 8006850:	e000      	b.n	8006854 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8006852:	bf00      	nop
    }
  }

  if (ret == 0)
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d107      	bne.n	800686a <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800685a:	f107 0208 	add.w	r2, r7, #8
 800685e:	2301      	movs	r3, #1
 8006860:	2110      	movs	r1, #16
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff fe90 	bl	8006588 <lsm6dso_read_reg>
 8006868:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10f      	bne.n	8006890 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	b2da      	uxtb	r2, r3
 8006878:	7a3b      	ldrb	r3, [r7, #8]
 800687a:	f362 1307 	bfi	r3, r2, #4, #4
 800687e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006880:	f107 0208 	add.w	r2, r7, #8
 8006884:	2301      	movs	r3, #1
 8006886:	2110      	movs	r1, #16
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fe95 	bl	80065b8 <lsm6dso_write_reg>
 800688e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006890:	693b      	ldr	r3, [r7, #16]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop

0800689c <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80068a6:	f107 0208 	add.w	r2, r7, #8
 80068aa:	2301      	movs	r3, #1
 80068ac:	2110      	movs	r1, #16
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff fe6a 	bl	8006588 <lsm6dso_read_reg>
 80068b4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80068b6:	7a3b      	ldrb	r3, [r7, #8]
 80068b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b0b      	cmp	r3, #11
 80068c0:	d84a      	bhi.n	8006958 <lsm6dso_xl_data_rate_get+0xbc>
 80068c2:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <lsm6dso_xl_data_rate_get+0x2c>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	080068f9 	.word	0x080068f9
 80068cc:	08006901 	.word	0x08006901
 80068d0:	08006909 	.word	0x08006909
 80068d4:	08006911 	.word	0x08006911
 80068d8:	08006919 	.word	0x08006919
 80068dc:	08006921 	.word	0x08006921
 80068e0:	08006929 	.word	0x08006929
 80068e4:	08006931 	.word	0x08006931
 80068e8:	08006939 	.word	0x08006939
 80068ec:	08006941 	.word	0x08006941
 80068f0:	08006949 	.word	0x08006949
 80068f4:	08006951 	.word	0x08006951
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	701a      	strb	r2, [r3, #0]
      break;
 80068fe:	e02f      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2201      	movs	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
      break;
 8006906:	e02b      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2202      	movs	r2, #2
 800690c:	701a      	strb	r2, [r3, #0]
      break;
 800690e:	e027      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2203      	movs	r2, #3
 8006914:	701a      	strb	r2, [r3, #0]
      break;
 8006916:	e023      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2204      	movs	r2, #4
 800691c:	701a      	strb	r2, [r3, #0]
      break;
 800691e:	e01f      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2205      	movs	r2, #5
 8006924:	701a      	strb	r2, [r3, #0]
      break;
 8006926:	e01b      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2206      	movs	r2, #6
 800692c:	701a      	strb	r2, [r3, #0]
      break;
 800692e:	e017      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2207      	movs	r2, #7
 8006934:	701a      	strb	r2, [r3, #0]
      break;
 8006936:	e013      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2208      	movs	r2, #8
 800693c:	701a      	strb	r2, [r3, #0]
      break;
 800693e:	e00f      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2209      	movs	r2, #9
 8006944:	701a      	strb	r2, [r3, #0]
      break;
 8006946:	e00b      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	220a      	movs	r2, #10
 800694c:	701a      	strb	r2, [r3, #0]
      break;
 800694e:	e007      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	220b      	movs	r2, #11
 8006954:	701a      	strb	r2, [r3, #0]
      break;
 8006956:	e003      	b.n	8006960 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
      break;
 800695e:	bf00      	nop
  }

  return ret;
 8006960:	68fb      	ldr	r3, [r7, #12]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop

0800696c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006978:	f107 0208 	add.w	r2, r7, #8
 800697c:	2301      	movs	r3, #1
 800697e:	2111      	movs	r1, #17
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff fe01 	bl	8006588 <lsm6dso_read_reg>
 8006986:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10f      	bne.n	80069ae <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	b2da      	uxtb	r2, r3
 8006996:	7a3b      	ldrb	r3, [r7, #8]
 8006998:	f362 0343 	bfi	r3, r2, #1, #3
 800699c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800699e:	f107 0208 	add.w	r2, r7, #8
 80069a2:	2301      	movs	r3, #1
 80069a4:	2111      	movs	r1, #17
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff fe06 	bl	80065b8 <lsm6dso_write_reg>
 80069ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80069ae:	68fb      	ldr	r3, [r7, #12]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80069c2:	f107 0208 	add.w	r2, r7, #8
 80069c6:	2301      	movs	r3, #1
 80069c8:	2111      	movs	r1, #17
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fddc 	bl	8006588 <lsm6dso_read_reg>
 80069d0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80069d2:	7a3b      	ldrb	r3, [r7, #8]
 80069d4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b06      	cmp	r3, #6
 80069dc:	d824      	bhi.n	8006a28 <lsm6dso_gy_full_scale_get+0x70>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <lsm6dso_gy_full_scale_get+0x2c>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a01 	.word	0x08006a01
 80069e8:	08006a09 	.word	0x08006a09
 80069ec:	08006a11 	.word	0x08006a11
 80069f0:	08006a29 	.word	0x08006a29
 80069f4:	08006a19 	.word	0x08006a19
 80069f8:	08006a29 	.word	0x08006a29
 80069fc:	08006a21 	.word	0x08006a21
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
      break;
 8006a06:	e013      	b.n	8006a30 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
      break;
 8006a0e:	e00f      	b.n	8006a30 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2202      	movs	r2, #2
 8006a14:	701a      	strb	r2, [r3, #0]
      break;
 8006a16:	e00b      	b.n	8006a30 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	701a      	strb	r2, [r3, #0]
      break;
 8006a1e:	e007      	b.n	8006a30 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2206      	movs	r2, #6
 8006a24:	701a      	strb	r2, [r3, #0]
      break;
 8006a26:	e003      	b.n	8006a30 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
      break;
 8006a2e:	bf00      	nop
  }

  return ret;
 8006a30:	68fb      	ldr	r3, [r7, #12]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop

08006a3c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006a4c:	f107 030c 	add.w	r3, r7, #12
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fad5 	bl	8007002 <lsm6dso_fsm_enable_get>
 8006a58:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f040 80c4 	bne.w	8006bea <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006a62:	7b3b      	ldrb	r3, [r7, #12]
 8006a64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006a6a:	7b3b      	ldrb	r3, [r7, #12]
 8006a6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006a70:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006a76:	7b3b      	ldrb	r3, [r7, #12]
 8006a78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006a7c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006a82:	7b3b      	ldrb	r3, [r7, #12]
 8006a84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006a8e:	7b3b      	ldrb	r3, [r7, #12]
 8006a90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006a94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006a96:	4313      	orrs	r3, r2
 8006a98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006a9a:	7b3b      	ldrb	r3, [r7, #12]
 8006a9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006aa0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006aa6:	7b3b      	ldrb	r3, [r7, #12]
 8006aa8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006aac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006ab2:	7b3b      	ldrb	r3, [r7, #12]
 8006ab4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006ab8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006aba:	4313      	orrs	r3, r2
 8006abc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006abe:	7b7b      	ldrb	r3, [r7, #13]
 8006ac0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ac4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006aca:	7b7b      	ldrb	r3, [r7, #13]
 8006acc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ad0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006ad6:	7b7b      	ldrb	r3, [r7, #13]
 8006ad8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006adc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006ae2:	7b7b      	ldrb	r3, [r7, #13]
 8006ae4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ae8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006aea:	4313      	orrs	r3, r2
 8006aec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006aee:	7b7b      	ldrb	r3, [r7, #13]
 8006af0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006af4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006af6:	4313      	orrs	r3, r2
 8006af8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006afa:	7b7b      	ldrb	r3, [r7, #13]
 8006afc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006b02:	4313      	orrs	r3, r2
 8006b04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006b06:	7b7b      	ldrb	r3, [r7, #13]
 8006b08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006b12:	7b7b      	ldrb	r3, [r7, #13]
 8006b14:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d163      	bne.n	8006bea <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006b22:	f107 030b 	add.w	r3, r7, #11
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa8b 	bl	8007044 <lsm6dso_fsm_data_rate_get>
 8006b2e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d159      	bne.n	8006bea <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d853      	bhi.n	8006be4 <lsm6dso_gy_data_rate_set+0x1a8>
 8006b3c:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <lsm6dso_gy_data_rate_set+0x108>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006b67 	.word	0x08006b67
 8006b4c:	08006b85 	.word	0x08006b85
 8006b50:	08006baf 	.word	0x08006baf
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d102      	bne.n	8006b60 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006b5e:	e045      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	75fb      	strb	r3, [r7, #23]
            break;
 8006b64:	e042      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006b66:	78fb      	ldrb	r3, [r7, #3]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006b70:	e03c      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d102      	bne.n	8006b7e <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006b78:	2302      	movs	r3, #2
 8006b7a:	75fb      	strb	r3, [r7, #23]
            break;
 8006b7c:	e036      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	75fb      	strb	r3, [r7, #23]
            break;
 8006b82:	e033      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006b8e:	e02d      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d102      	bne.n	8006b9c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006b96:	2303      	movs	r3, #3
 8006b98:	75fb      	strb	r3, [r7, #23]
            break;
 8006b9a:	e027      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d102      	bne.n	8006ba8 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	75fb      	strb	r3, [r7, #23]
            break;
 8006ba6:	e021      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	75fb      	strb	r3, [r7, #23]
            break;
 8006bac:	e01e      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006bb8:	e018      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d102      	bne.n	8006bc6 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	75fb      	strb	r3, [r7, #23]
            break;
 8006bc4:	e012      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d102      	bne.n	8006bd2 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006bcc:	2304      	movs	r3, #4
 8006bce:	75fb      	strb	r3, [r7, #23]
            break;
 8006bd0:	e00c      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d102      	bne.n	8006bde <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006bd8:	2304      	movs	r3, #4
 8006bda:	75fb      	strb	r3, [r7, #23]
            break;
 8006bdc:	e006      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	75fb      	strb	r3, [r7, #23]
            break;
 8006be2:	e003      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	75fb      	strb	r3, [r7, #23]
            break;
 8006be8:	e000      	b.n	8006bec <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006bea:	bf00      	nop
    }
  }

  if (ret == 0)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006bf2:	f107 0208 	add.w	r2, r7, #8
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	2111      	movs	r1, #17
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fcc4 	bl	8006588 <lsm6dso_read_reg>
 8006c00:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10f      	bne.n	8006c28 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	7a3b      	ldrb	r3, [r7, #8]
 8006c12:	f362 1307 	bfi	r3, r2, #4, #4
 8006c16:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006c18:	f107 0208 	add.w	r2, r7, #8
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	2111      	movs	r1, #17
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff fcc9 	bl	80065b8 <lsm6dso_write_reg>
 8006c26:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006c28:	693b      	ldr	r3, [r7, #16]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop

08006c34 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006c3e:	f107 0208 	add.w	r2, r7, #8
 8006c42:	2301      	movs	r3, #1
 8006c44:	2111      	movs	r1, #17
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fc9e 	bl	8006588 <lsm6dso_read_reg>
 8006c4c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8006c4e:	7a3b      	ldrb	r3, [r7, #8]
 8006c50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b0a      	cmp	r3, #10
 8006c58:	d844      	bhi.n	8006ce4 <lsm6dso_gy_data_rate_get+0xb0>
 8006c5a:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <lsm6dso_gy_data_rate_get+0x2c>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c8d 	.word	0x08006c8d
 8006c64:	08006c95 	.word	0x08006c95
 8006c68:	08006c9d 	.word	0x08006c9d
 8006c6c:	08006ca5 	.word	0x08006ca5
 8006c70:	08006cad 	.word	0x08006cad
 8006c74:	08006cb5 	.word	0x08006cb5
 8006c78:	08006cbd 	.word	0x08006cbd
 8006c7c:	08006cc5 	.word	0x08006cc5
 8006c80:	08006ccd 	.word	0x08006ccd
 8006c84:	08006cd5 	.word	0x08006cd5
 8006c88:	08006cdd 	.word	0x08006cdd
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
      break;
 8006c92:	e02b      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
      break;
 8006c9a:	e027      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	701a      	strb	r2, [r3, #0]
      break;
 8006ca2:	e023      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2203      	movs	r2, #3
 8006ca8:	701a      	strb	r2, [r3, #0]
      break;
 8006caa:	e01f      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2204      	movs	r2, #4
 8006cb0:	701a      	strb	r2, [r3, #0]
      break;
 8006cb2:	e01b      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2205      	movs	r2, #5
 8006cb8:	701a      	strb	r2, [r3, #0]
      break;
 8006cba:	e017      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2206      	movs	r2, #6
 8006cc0:	701a      	strb	r2, [r3, #0]
      break;
 8006cc2:	e013      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2207      	movs	r2, #7
 8006cc8:	701a      	strb	r2, [r3, #0]
      break;
 8006cca:	e00f      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2208      	movs	r2, #8
 8006cd0:	701a      	strb	r2, [r3, #0]
      break;
 8006cd2:	e00b      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2209      	movs	r2, #9
 8006cd8:	701a      	strb	r2, [r3, #0]
      break;
 8006cda:	e007      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	220a      	movs	r2, #10
 8006ce0:	701a      	strb	r2, [r3, #0]
      break;
 8006ce2:	e003      	b.n	8006cec <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	701a      	strb	r2, [r3, #0]
      break;
 8006cea:	bf00      	nop
  }

  return ret;
 8006cec:	68fb      	ldr	r3, [r7, #12]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop

08006cf8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006d04:	f107 0208 	add.w	r2, r7, #8
 8006d08:	2301      	movs	r3, #1
 8006d0a:	2112      	movs	r1, #18
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fc3b 	bl	8006588 <lsm6dso_read_reg>
 8006d12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10f      	bne.n	8006d3a <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	7a3b      	ldrb	r3, [r7, #8]
 8006d24:	f362 1386 	bfi	r3, r2, #6, #1
 8006d28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006d2a:	f107 0208 	add.w	r2, r7, #8
 8006d2e:	2301      	movs	r3, #1
 8006d30:	2112      	movs	r1, #18
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fc40 	bl	80065b8 <lsm6dso_write_reg>
 8006d38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8006d4e:	f107 020c 	add.w	r2, r7, #12
 8006d52:	2306      	movs	r3, #6
 8006d54:	2122      	movs	r1, #34	; 0x22
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fc16 	bl	8006588 <lsm6dso_read_reg>
 8006d5c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006d5e:	7b7b      	ldrb	r3, [r7, #13]
 8006d60:	b21a      	sxth	r2, r3
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	7b3b      	ldrb	r3, [r7, #12]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	4413      	add	r3, r2
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	b21a      	sxth	r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006d80:	7bfa      	ldrb	r2, [r7, #15]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	3302      	adds	r3, #2
 8006d86:	b212      	sxth	r2, r2
 8006d88:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	4413      	add	r3, r2
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	3302      	adds	r3, #2
 8006da4:	b212      	sxth	r2, r2
 8006da6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006da8:	7c7a      	ldrb	r2, [r7, #17]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	3304      	adds	r3, #4
 8006dae:	b212      	sxth	r2, r2
 8006db0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	3304      	adds	r3, #4
 8006db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	7c3b      	ldrb	r3, [r7, #16]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	4413      	add	r3, r2
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	b212      	sxth	r2, r2
 8006dce:	801a      	strh	r2, [r3, #0]

  return ret;
 8006dd0:	697b      	ldr	r3, [r7, #20]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b086      	sub	sp, #24
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006de4:	f107 020c 	add.w	r2, r7, #12
 8006de8:	2306      	movs	r3, #6
 8006dea:	2128      	movs	r1, #40	; 0x28
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff fbcb 	bl	8006588 <lsm6dso_read_reg>
 8006df2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006df4:	7b7b      	ldrb	r3, [r7, #13]
 8006df6:	b21a      	sxth	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	7b3b      	ldrb	r3, [r7, #12]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	b21a      	sxth	r2, r3
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006e16:	7bfa      	ldrb	r2, [r7, #15]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	3302      	adds	r3, #2
 8006e1c:	b212      	sxth	r2, r2
 8006e1e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	3302      	adds	r3, #2
 8006e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	4413      	add	r3, r2
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3302      	adds	r3, #2
 8006e3a:	b212      	sxth	r2, r2
 8006e3c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006e3e:	7c7a      	ldrb	r2, [r7, #17]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	3304      	adds	r3, #4
 8006e44:	b212      	sxth	r2, r2
 8006e46:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	7c3b      	ldrb	r3, [r7, #16]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	4413      	add	r3, r2
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	3304      	adds	r3, #4
 8006e62:	b212      	sxth	r2, r2
 8006e64:	801a      	strh	r2, [r3, #0]

  return ret;
 8006e66:	697b      	ldr	r3, [r7, #20]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006e7c:	f107 0208 	add.w	r2, r7, #8
 8006e80:	2301      	movs	r3, #1
 8006e82:	2101      	movs	r1, #1
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fb7f 	bl	8006588 <lsm6dso_read_reg>
 8006e8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10f      	bne.n	8006eb2 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	7a3b      	ldrb	r3, [r7, #8]
 8006e9c:	f362 1387 	bfi	r3, r2, #6, #2
 8006ea0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006ea2:	f107 0208 	add.w	r2, r7, #8
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff fb84 	bl	80065b8 <lsm6dso_write_reg>
 8006eb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	210f      	movs	r1, #15
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff fb5b 	bl	8006588 <lsm6dso_read_reg>
 8006ed2:	60f8      	str	r0, [r7, #12]

  return ret;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006eea:	f107 0208 	add.w	r2, r7, #8
 8006eee:	2301      	movs	r3, #1
 8006ef0:	2112      	movs	r1, #18
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff fb48 	bl	8006588 <lsm6dso_read_reg>
 8006ef8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10f      	bne.n	8006f20 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	7a3b      	ldrb	r3, [r7, #8]
 8006f0a:	f362 0382 	bfi	r3, r2, #2, #1
 8006f0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006f10:	f107 0208 	add.w	r2, r7, #8
 8006f14:	2301      	movs	r3, #1
 8006f16:	2112      	movs	r1, #18
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fb4d 	bl	80065b8 <lsm6dso_write_reg>
 8006f1e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f20:	68fb      	ldr	r3, [r7, #12]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b086      	sub	sp, #24
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006f36:	f107 020c 	add.w	r2, r7, #12
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	2118      	movs	r1, #24
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff fb22 	bl	8006588 <lsm6dso_read_reg>
 8006f44:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d111      	bne.n	8006f70 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	09db      	lsrs	r3, r3, #7
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	7b3b      	ldrb	r3, [r7, #12]
 8006f5a:	f362 0341 	bfi	r3, r2, #1, #1
 8006f5e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006f60:	f107 020c 	add.w	r2, r7, #12
 8006f64:	2301      	movs	r3, #1
 8006f66:	2118      	movs	r1, #24
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff fb25 	bl	80065b8 <lsm6dso_write_reg>
 8006f6e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d107      	bne.n	8006f86 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006f76:	f107 0210 	add.w	r2, r7, #16
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	2162      	movs	r1, #98	; 0x62
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff fb02 	bl	8006588 <lsm6dso_read_reg>
 8006f84:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10f      	bne.n	8006fac <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	7c3b      	ldrb	r3, [r7, #16]
 8006f96:	f362 03c4 	bfi	r3, r2, #3, #2
 8006f9a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006f9c:	f107 0210 	add.w	r2, r7, #16
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	2162      	movs	r1, #98	; 0x62
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fb07 	bl	80065b8 <lsm6dso_write_reg>
 8006faa:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8006fac:	697b      	ldr	r3, [r7, #20]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006fc2:	f107 0208 	add.w	r2, r7, #8
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	210a      	movs	r1, #10
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fadc 	bl	8006588 <lsm6dso_read_reg>
 8006fd0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10f      	bne.n	8006ff8 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	7a3b      	ldrb	r3, [r7, #8]
 8006fe2:	f362 0302 	bfi	r3, r2, #0, #3
 8006fe6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006fe8:	f107 0208 	add.w	r2, r7, #8
 8006fec:	2301      	movs	r3, #1
 8006fee:	210a      	movs	r1, #10
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff fae1 	bl	80065b8 <lsm6dso_write_reg>
 8006ff6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800700c:	2102      	movs	r1, #2
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff ff2e 	bl	8006e70 <lsm6dso_mem_bank_set>
 8007014:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d106      	bne.n	800702a <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 800701c:	2302      	movs	r3, #2
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	2146      	movs	r1, #70	; 0x46
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff fab0 	bl	8006588 <lsm6dso_read_reg>
 8007028:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007030:	2100      	movs	r1, #0
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7ff ff1c 	bl	8006e70 <lsm6dso_mem_bank_set>
 8007038:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800703a:	68fb      	ldr	r3, [r7, #12]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800704e:	2102      	movs	r1, #2
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff ff0d 	bl	8006e70 <lsm6dso_mem_bank_set>
 8007056:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d107      	bne.n	800706e <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 800705e:	f107 0208 	add.w	r2, r7, #8
 8007062:	2301      	movs	r3, #1
 8007064:	215f      	movs	r1, #95	; 0x5f
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff fa8e 	bl	8006588 <lsm6dso_read_reg>
 800706c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d12a      	bne.n	80070ca <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8007074:	7a3b      	ldrb	r3, [r7, #8]
 8007076:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b03      	cmp	r3, #3
 800707e:	d81b      	bhi.n	80070b8 <lsm6dso_fsm_data_rate_get+0x74>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <lsm6dso_fsm_data_rate_get+0x44>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	08007099 	.word	0x08007099
 800708c:	080070a1 	.word	0x080070a1
 8007090:	080070a9 	.word	0x080070a9
 8007094:	080070b1 	.word	0x080070b1
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
        break;
 800709e:	e00f      	b.n	80070c0 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2201      	movs	r2, #1
 80070a4:	701a      	strb	r2, [r3, #0]
        break;
 80070a6:	e00b      	b.n	80070c0 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2202      	movs	r2, #2
 80070ac:	701a      	strb	r2, [r3, #0]
        break;
 80070ae:	e007      	b.n	80070c0 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2203      	movs	r2, #3
 80070b4:	701a      	strb	r2, [r3, #0]
        break;
 80070b6:	e003      	b.n	80070c0 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
        break;
 80070be:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80070c0:	2100      	movs	r1, #0
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fed4 	bl	8006e70 <lsm6dso_mem_bank_set>
 80070c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d103      	bne.n	80070ec <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 80070e4:	f04f 33ff 	mov.w	r3, #4294967295
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	e030      	b.n	800714e <STTS751_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	7b1a      	ldrb	r2, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	695a      	ldr	r2, [r3, #20]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a0c      	ldr	r2, [pc, #48]	; (8007158 <STTS751_RegisterBusIO+0x84>)
 8007128:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a0b      	ldr	r2, [pc, #44]	; (800715c <STTS751_RegisterBusIO+0x88>)
 800712e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d004      	beq.n	8007148 <STTS751_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4798      	blx	r3
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	e002      	b.n	800714e <STTS751_RegisterBusIO+0x7a>
    }
    else
    {
      ret = STTS751_ERROR;
 8007148:	f04f 33ff 	mov.w	r3, #4294967295
 800714c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	080075e1 	.word	0x080075e1
 800715c:	0800764f 	.word	0x0800764f

08007160 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	d127      	bne.n	80071c2 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	331c      	adds	r3, #28
 8007176:	2101      	movs	r1, #1
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fc4c 	bl	8007a16 <stts751_pin_event_route_set>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8007184:	f04f 33ff 	mov.w	r3, #4294967295
 8007188:	e020      	b.n	80071cc <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007190:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	331c      	adds	r3, #28
 8007196:	2103      	movs	r1, #3
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fbaf 	bl	80078fc <stts751_resolution_set>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295
 80071a8:	e010      	b.n	80071cc <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	331c      	adds	r3, #28
 80071ae:	2180      	movs	r1, #128	; 0x80
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 facd 	bl	8007750 <stts751_temp_data_rate_set>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 80071bc:	f04f 33ff 	mov.w	r3, #4294967295
 80071c0:	e004      	b.n	80071cc <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d108      	bne.n	80071f8 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f870 	bl	80072cc <STTS751_TEMP_Disable>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 80071f2:	f04f 33ff 	mov.w	r3, #4294967295
 80071f6:	e004      	b.n	8007202 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	331c      	adds	r3, #28
 8007218:	f107 020c 	add.w	r2, r7, #12
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fc1f 	bl	8007a62 <stts751_device_id_get>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800722a:	f04f 33ff 	mov.w	r3, #4294967295
 800722e:	e003      	b.n	8007238 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8007230:	7b7a      	ldrb	r2, [r7, #13]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2200      	movs	r2, #0
 800724e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2201      	movs	r2, #1
 800725a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007270:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	e012      	b.n	80072c4 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80072a4:	eeb0 0a67 	vmov.f32	s0, s15
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f8b5 	bl	8007418 <STTS751_TEMP_SetOutputDataRate>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295
 80072b8:	e004      	b.n	80072c4 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	e01c      	b.n	800731c <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	332c      	adds	r3, #44	; 0x2c
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f81b 	bl	8007324 <STTS751_TEMP_GetOutputDataRate>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295
 80072f8:	e010      	b.n	800731c <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	331c      	adds	r3, #28
 80072fe:	2180      	movs	r1, #128	; 0x80
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fa25 	bl	8007750 <stts751_temp_data_rate_set>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 800730c:	f04f 33ff 	mov.w	r3, #4294967295
 8007310:	e004      	b.n	800731c <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	331c      	adds	r3, #28
 8007336:	f107 020b 	add.w	r2, r7, #11
 800733a:	4611      	mov	r1, r2
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fa5d 	bl	80077fc <stts751_temp_data_rate_get>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8007348:	f04f 33ff 	mov.w	r3, #4294967295
 800734c:	e060      	b.n	8007410 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800734e:	7afb      	ldrb	r3, [r7, #11]
 8007350:	2b90      	cmp	r3, #144	; 0x90
 8007352:	d021      	beq.n	8007398 <STTS751_TEMP_GetOutputDataRate+0x74>
 8007354:	2b90      	cmp	r3, #144	; 0x90
 8007356:	dc56      	bgt.n	8007406 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007358:	2b09      	cmp	r3, #9
 800735a:	dc1b      	bgt.n	8007394 <STTS751_TEMP_GetOutputDataRate+0x70>
 800735c:	2b00      	cmp	r3, #0
 800735e:	db52      	blt.n	8007406 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007360:	2b09      	cmp	r3, #9
 8007362:	d850      	bhi.n	8007406 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007364:	a201      	add	r2, pc, #4	; (adr r2, 800736c <STTS751_TEMP_GetOutputDataRate+0x48>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	080073a3 	.word	0x080073a3
 8007370:	080073ad 	.word	0x080073ad
 8007374:	080073b7 	.word	0x080073b7
 8007378:	080073c1 	.word	0x080073c1
 800737c:	080073cb 	.word	0x080073cb
 8007380:	080073d5 	.word	0x080073d5
 8007384:	080073df 	.word	0x080073df
 8007388:	080073e9 	.word	0x080073e9
 800738c:	080073f3 	.word	0x080073f3
 8007390:	080073fd 	.word	0x080073fd
 8007394:	2b80      	cmp	r3, #128	; 0x80
 8007396:	d136      	bne.n	8007406 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
      break;
 80073a0:	e035      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 80073a8:	601a      	str	r2, [r3, #0]
      break;
 80073aa:	e030      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 80073b2:	601a      	str	r2, [r3, #0]
      break;
 80073b4:	e02b      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80073bc:	601a      	str	r2, [r3, #0]
      break;
 80073be:	e026      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80073c6:	601a      	str	r2, [r3, #0]
      break;
 80073c8:	e021      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80073d0:	601a      	str	r2, [r3, #0]
      break;
 80073d2:	e01c      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80073da:	601a      	str	r2, [r3, #0]
      break;
 80073dc:	e017      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80073e4:	601a      	str	r2, [r3, #0]
      break;
 80073e6:	e012      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80073ee:	601a      	str	r2, [r3, #0]
      break;
 80073f0:	e00d      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80073f8:	601a      	str	r2, [r3, #0]
      break;
 80073fa:	e008      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007402:	601a      	str	r2, [r3, #0]
      break;
 8007404:	e003      	b.n	800740e <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8007406:	f04f 33ff 	mov.w	r3, #4294967295
 800740a:	60fb      	str	r3, [r7, #12]
      break;
 800740c:	bf00      	nop
  }

  return ret;
 800740e:	68fb      	ldr	r3, [r7, #12]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	331c      	adds	r3, #28
 8007428:	f107 020e 	add.w	r2, r7, #14
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fa8a 	bl	8007948 <stts751_resolution_get>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	e0a5      	b.n	800758c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8007440:	edd7 7a00 	vldr	s15, [r7]
 8007444:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007448:	eef4 7a47 	vcmp.f32	s15, s14
 800744c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007450:	d10e      	bne.n	8007470 <STTS751_TEMP_SetOutputDataRate+0x58>
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d10b      	bne.n	8007470 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	331c      	adds	r3, #28
 800745c:	2101      	movs	r1, #1
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fa4c 	bl	80078fc <stts751_resolution_set>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 800746a:	f04f 33ff 	mov.w	r3, #4294967295
 800746e:	e08d      	b.n	800758c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8007470:	edd7 7a00 	vldr	s15, [r7]
 8007474:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007594 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8007478:	eef4 7a47 	vcmp.f32	s15, s14
 800747c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007480:	d111      	bne.n	80074a6 <STTS751_TEMP_SetOutputDataRate+0x8e>
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d002      	beq.n	800748e <STTS751_TEMP_SetOutputDataRate+0x76>
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d10b      	bne.n	80074a6 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	331c      	adds	r3, #28
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fa31 	bl	80078fc <stts751_resolution_set>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	e072      	b.n	800758c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 80074a6:	edd7 7a00 	vldr	s15, [r7]
 80074aa:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007598 <STTS751_TEMP_SetOutputDataRate+0x180>
 80074ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b6:	d801      	bhi.n	80074bc <STTS751_TEMP_SetOutputDataRate+0xa4>
 80074b8:	2300      	movs	r3, #0
 80074ba:	e058      	b.n	800756e <STTS751_TEMP_SetOutputDataRate+0x156>
 80074bc:	edd7 7a00 	vldr	s15, [r7]
 80074c0:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80074c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074cc:	d801      	bhi.n	80074d2 <STTS751_TEMP_SetOutputDataRate+0xba>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e04d      	b.n	800756e <STTS751_TEMP_SetOutputDataRate+0x156>
 80074d2:	edd7 7a00 	vldr	s15, [r7]
 80074d6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80074da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e2:	d801      	bhi.n	80074e8 <STTS751_TEMP_SetOutputDataRate+0xd0>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e042      	b.n	800756e <STTS751_TEMP_SetOutputDataRate+0x156>
 80074e8:	edd7 7a00 	vldr	s15, [r7]
 80074ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f8:	d801      	bhi.n	80074fe <STTS751_TEMP_SetOutputDataRate+0xe6>
 80074fa:	2303      	movs	r3, #3
 80074fc:	e037      	b.n	800756e <STTS751_TEMP_SetOutputDataRate+0x156>
 80074fe:	edd7 7a00 	vldr	s15, [r7]
 8007502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800750a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750e:	d801      	bhi.n	8007514 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8007510:	2304      	movs	r3, #4
 8007512:	e02c      	b.n	800756e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007514:	edd7 7a00 	vldr	s15, [r7]
 8007518:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800751c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007524:	d801      	bhi.n	800752a <STTS751_TEMP_SetOutputDataRate+0x112>
 8007526:	2305      	movs	r3, #5
 8007528:	e021      	b.n	800756e <STTS751_TEMP_SetOutputDataRate+0x156>
 800752a:	edd7 7a00 	vldr	s15, [r7]
 800752e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753a:	d801      	bhi.n	8007540 <STTS751_TEMP_SetOutputDataRate+0x128>
 800753c:	2306      	movs	r3, #6
 800753e:	e016      	b.n	800756e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007540:	edd7 7a00 	vldr	s15, [r7]
 8007544:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800754c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007550:	d801      	bhi.n	8007556 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007552:	2307      	movs	r3, #7
 8007554:	e00b      	b.n	800756e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007556:	edd7 7a00 	vldr	s15, [r7]
 800755a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800755e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007566:	d801      	bhi.n	800756c <STTS751_TEMP_SetOutputDataRate+0x154>
 8007568:	2308      	movs	r3, #8
 800756a:	e000      	b.n	800756e <STTS751_TEMP_SetOutputDataRate+0x156>
 800756c:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800756e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	331c      	adds	r3, #28
 8007574:	7bfa      	ldrb	r2, [r7, #15]
 8007576:	4611      	mov	r1, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f000 f8e9 	bl	8007750 <stts751_temp_data_rate_set>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8007584:	f04f 33ff 	mov.w	r3, #4294967295
 8007588:	e000      	b.n	800758c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	42000000 	.word	0x42000000
 8007598:	3d800000 	.word	0x3d800000

0800759c <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	331c      	adds	r3, #28
 80075aa:	f107 020e 	add.w	r2, r7, #14
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fa01 	bl	80079b8 <stts751_temperature_raw_get>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295
 80075c0:	e00a      	b.n	80075d8 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 80075c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f8a8 	bl	800771c <stts751_from_lsb_to_celsius>
 80075cc:	eef0 7a40 	vmov.f32	s15, s0
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80075e0:	b590      	push	{r4, r7, lr}
 80075e2:	b089      	sub	sp, #36	; 0x24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	607a      	str	r2, [r7, #4]
 80075ea:	461a      	mov	r2, r3
 80075ec:	460b      	mov	r3, r1
 80075ee:	72fb      	strb	r3, [r7, #11]
 80075f0:	4613      	mov	r3, r2
 80075f2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d11f      	bne.n	8007644 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8007604:	2300      	movs	r3, #0
 8007606:	83fb      	strh	r3, [r7, #30]
 8007608:	e018      	b.n	800763c <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	695c      	ldr	r4, [r3, #20]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	7b1b      	ldrb	r3, [r3, #12]
 8007612:	b298      	uxth	r0, r3
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	b29a      	uxth	r2, r3
 8007618:	8bfb      	ldrh	r3, [r7, #30]
 800761a:	4413      	add	r3, r2
 800761c:	b299      	uxth	r1, r3
 800761e:	8bfb      	ldrh	r3, [r7, #30]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	441a      	add	r2, r3
 8007624:	2301      	movs	r3, #1
 8007626:	47a0      	blx	r4
 8007628:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007630:	f04f 33ff 	mov.w	r3, #4294967295
 8007634:	e007      	b.n	8007646 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007636:	8bfb      	ldrh	r3, [r7, #30]
 8007638:	3301      	adds	r3, #1
 800763a:	83fb      	strh	r3, [r7, #30]
 800763c:	8bfa      	ldrh	r2, [r7, #30]
 800763e:	893b      	ldrh	r3, [r7, #8]
 8007640:	429a      	cmp	r2, r3
 8007642:	d3e2      	bcc.n	800760a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8007644:	69bb      	ldr	r3, [r7, #24]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3724      	adds	r7, #36	; 0x24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd90      	pop	{r4, r7, pc}

0800764e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800764e:	b590      	push	{r4, r7, lr}
 8007650:	b089      	sub	sp, #36	; 0x24
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	461a      	mov	r2, r3
 800765a:	460b      	mov	r3, r1
 800765c:	72fb      	strb	r3, [r7, #11]
 800765e:	4613      	mov	r3, r2
 8007660:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d11f      	bne.n	80076b2 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8007672:	2300      	movs	r3, #0
 8007674:	83fb      	strh	r3, [r7, #30]
 8007676:	e018      	b.n	80076aa <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	691c      	ldr	r4, [r3, #16]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	7b1b      	ldrb	r3, [r3, #12]
 8007680:	b298      	uxth	r0, r3
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	b29a      	uxth	r2, r3
 8007686:	8bfb      	ldrh	r3, [r7, #30]
 8007688:	4413      	add	r3, r2
 800768a:	b299      	uxth	r1, r3
 800768c:	8bfb      	ldrh	r3, [r7, #30]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	441a      	add	r2, r3
 8007692:	2301      	movs	r3, #1
 8007694:	47a0      	blx	r4
 8007696:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 800769e:	f04f 33ff 	mov.w	r3, #4294967295
 80076a2:	e007      	b.n	80076b4 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80076a4:	8bfb      	ldrh	r3, [r7, #30]
 80076a6:	3301      	adds	r3, #1
 80076a8:	83fb      	strh	r3, [r7, #30]
 80076aa:	8bfa      	ldrh	r2, [r7, #30]
 80076ac:	893b      	ldrh	r3, [r7, #8]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d3e2      	bcc.n	8007678 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 80076b2:	69bb      	ldr	r3, [r7, #24]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3724      	adds	r7, #36	; 0x24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd90      	pop	{r4, r7, pc}

080076bc <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80076bc:	b590      	push	{r4, r7, lr}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	461a      	mov	r2, r3
 80076c8:	460b      	mov	r3, r1
 80076ca:	72fb      	strb	r3, [r7, #11]
 80076cc:	4613      	mov	r3, r2
 80076ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	685c      	ldr	r4, [r3, #4]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6898      	ldr	r0, [r3, #8]
 80076d8:	893b      	ldrh	r3, [r7, #8]
 80076da:	7af9      	ldrb	r1, [r7, #11]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	47a0      	blx	r4
 80076e0:	6178      	str	r0, [r7, #20]

  return ret;
 80076e2:	697b      	ldr	r3, [r7, #20]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd90      	pop	{r4, r7, pc}

080076ec <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80076ec:	b590      	push	{r4, r7, lr}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	607a      	str	r2, [r7, #4]
 80076f6:	461a      	mov	r2, r3
 80076f8:	460b      	mov	r3, r1
 80076fa:	72fb      	strb	r3, [r7, #11]
 80076fc:	4613      	mov	r3, r2
 80076fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681c      	ldr	r4, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6898      	ldr	r0, [r3, #8]
 8007708:	893b      	ldrh	r3, [r7, #8]
 800770a:	7af9      	ldrb	r1, [r7, #11]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	47a0      	blx	r4
 8007710:	6178      	str	r0, [r7, #20]

  return ret;
 8007712:	697b      	ldr	r3, [r7, #20]
}
 8007714:	4618      	mov	r0, r3
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	bd90      	pop	{r4, r7, pc}

0800771c <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8007726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007732:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800774c <stts751_from_lsb_to_celsius+0x30>
 8007736:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800773a:	eef0 7a66 	vmov.f32	s15, s13
}
 800773e:	eeb0 0a67 	vmov.f32	s0, s15
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	43800000 	.word	0x43800000

08007750 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800775c:	23aa      	movs	r3, #170	; 0xaa
 800775e:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8007760:	f107 020c 	add.w	r2, r7, #12
 8007764:	2301      	movs	r3, #1
 8007766:	2104      	movs	r1, #4
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff ffa7 	bl	80076bc <stts751_read_reg>
 800776e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10f      	bne.n	8007796 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	b2da      	uxtb	r2, r3
 800777e:	7b3b      	ldrb	r3, [r7, #12]
 8007780:	f362 0303 	bfi	r3, r2, #0, #4
 8007784:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8007786:	f107 020c 	add.w	r2, r7, #12
 800778a:	2301      	movs	r3, #1
 800778c:	2104      	movs	r1, #4
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff ffac 	bl	80076ec <stts751_write_reg>
 8007794:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d107      	bne.n	80077ac <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800779c:	f107 0210 	add.w	r2, r7, #16
 80077a0:	2301      	movs	r3, #1
 80077a2:	2103      	movs	r1, #3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff ff89 	bl	80076bc <stts751_read_reg>
 80077aa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d111      	bne.n	80077d6 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	09db      	lsrs	r3, r3, #7
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	7c3b      	ldrb	r3, [r7, #16]
 80077c0:	f362 1386 	bfi	r3, r2, #6, #1
 80077c4:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 80077c6:	f107 0210 	add.w	r2, r7, #16
 80077ca:	2301      	movs	r3, #1
 80077cc:	2103      	movs	r1, #3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff ff8c 	bl	80076ec <stts751_write_reg>
 80077d4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <stts751_temp_data_rate_set+0xa2>
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	2b90      	cmp	r3, #144	; 0x90
 80077e0:	d107      	bne.n	80077f2 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 80077e2:	f107 020b 	add.w	r2, r7, #11
 80077e6:	2301      	movs	r3, #1
 80077e8:	210f      	movs	r1, #15
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff ff7e 	bl	80076ec <stts751_write_reg>
 80077f0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80077f2:	697b      	ldr	r3, [r7, #20]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8007806:	f107 0210 	add.w	r2, r7, #16
 800780a:	2301      	movs	r3, #1
 800780c:	2104      	movs	r1, #4
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff ff54 	bl	80076bc <stts751_read_reg>
 8007814:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d107      	bne.n	800782c <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800781c:	f107 020c 	add.w	r2, r7, #12
 8007820:	2301      	movs	r3, #1
 8007822:	2103      	movs	r1, #3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ff49 	bl	80076bc <stts751_read_reg>
 800782a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 800782c:	7b3b      	ldrb	r3, [r7, #12]
 800782e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	01db      	lsls	r3, r3, #7
 8007836:	7c3a      	ldrb	r2, [r7, #16]
 8007838:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	4413      	add	r3, r2
 8007840:	2b90      	cmp	r3, #144	; 0x90
 8007842:	d025      	beq.n	8007890 <stts751_temp_data_rate_get+0x94>
 8007844:	2b90      	cmp	r3, #144	; 0x90
 8007846:	dc4f      	bgt.n	80078e8 <stts751_temp_data_rate_get+0xec>
 8007848:	2b09      	cmp	r3, #9
 800784a:	dc1b      	bgt.n	8007884 <stts751_temp_data_rate_get+0x88>
 800784c:	2b00      	cmp	r3, #0
 800784e:	db4b      	blt.n	80078e8 <stts751_temp_data_rate_get+0xec>
 8007850:	2b09      	cmp	r3, #9
 8007852:	d849      	bhi.n	80078e8 <stts751_temp_data_rate_get+0xec>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <stts751_temp_data_rate_get+0x60>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007899 	.word	0x08007899
 8007860:	080078a1 	.word	0x080078a1
 8007864:	080078a9 	.word	0x080078a9
 8007868:	080078b1 	.word	0x080078b1
 800786c:	080078b9 	.word	0x080078b9
 8007870:	080078c1 	.word	0x080078c1
 8007874:	080078c9 	.word	0x080078c9
 8007878:	080078d1 	.word	0x080078d1
 800787c:	080078d9 	.word	0x080078d9
 8007880:	080078e1 	.word	0x080078e1
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d12f      	bne.n	80078e8 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2280      	movs	r2, #128	; 0x80
 800788c:	701a      	strb	r2, [r3, #0]
      break;
 800788e:	e02f      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2290      	movs	r2, #144	; 0x90
 8007894:	701a      	strb	r2, [r3, #0]
      break;
 8007896:	e02b      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
      break;
 800789e:	e027      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2201      	movs	r2, #1
 80078a4:	701a      	strb	r2, [r3, #0]
      break;
 80078a6:	e023      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2202      	movs	r2, #2
 80078ac:	701a      	strb	r2, [r3, #0]
      break;
 80078ae:	e01f      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2203      	movs	r2, #3
 80078b4:	701a      	strb	r2, [r3, #0]
      break;
 80078b6:	e01b      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2204      	movs	r2, #4
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	e017      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2205      	movs	r2, #5
 80078c4:	701a      	strb	r2, [r3, #0]
      break;
 80078c6:	e013      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2206      	movs	r2, #6
 80078cc:	701a      	strb	r2, [r3, #0]
      break;
 80078ce:	e00f      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2207      	movs	r2, #7
 80078d4:	701a      	strb	r2, [r3, #0]
      break;
 80078d6:	e00b      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2208      	movs	r2, #8
 80078dc:	701a      	strb	r2, [r3, #0]
      break;
 80078de:	e007      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2209      	movs	r2, #9
 80078e4:	701a      	strb	r2, [r3, #0]
      break;
 80078e6:	e003      	b.n	80078f0 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2280      	movs	r2, #128	; 0x80
 80078ec:	701a      	strb	r2, [r3, #0]
      break;
 80078ee:	bf00      	nop
  }

  return ret;
 80078f0:	697b      	ldr	r3, [r7, #20]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop

080078fc <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8007908:	f107 0208 	add.w	r2, r7, #8
 800790c:	2301      	movs	r3, #1
 800790e:	2103      	movs	r1, #3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff fed3 	bl	80076bc <stts751_read_reg>
 8007916:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10f      	bne.n	800793e <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	b2da      	uxtb	r2, r3
 8007926:	7a3b      	ldrb	r3, [r7, #8]
 8007928:	f362 0383 	bfi	r3, r2, #2, #2
 800792c:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800792e:	f107 0208 	add.w	r2, r7, #8
 8007932:	2301      	movs	r3, #1
 8007934:	2103      	movs	r1, #3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff fed8 	bl	80076ec <stts751_write_reg>
 800793c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800793e:	68fb      	ldr	r3, [r7, #12]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8007952:	f107 0208 	add.w	r2, r7, #8
 8007956:	2301      	movs	r3, #1
 8007958:	2103      	movs	r1, #3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff feae 	bl	80076bc <stts751_read_reg>
 8007960:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8007962:	7a3b      	ldrb	r3, [r7, #8]
 8007964:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b03      	cmp	r3, #3
 800796c:	d81a      	bhi.n	80079a4 <stts751_resolution_get+0x5c>
 800796e:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <stts751_resolution_get+0x2c>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	0800798d 	.word	0x0800798d
 8007978:	08007995 	.word	0x08007995
 800797c:	08007985 	.word	0x08007985
 8007980:	0800799d 	.word	0x0800799d
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2202      	movs	r2, #2
 8007988:	701a      	strb	r2, [r3, #0]
      break;
 800798a:	e00f      	b.n	80079ac <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
      break;
 8007992:	e00b      	b.n	80079ac <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2201      	movs	r2, #1
 8007998:	701a      	strb	r2, [r3, #0]
      break;
 800799a:	e007      	b.n	80079ac <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2203      	movs	r2, #3
 80079a0:	701a      	strb	r2, [r3, #0]
      break;
 80079a2:	e003      	b.n	80079ac <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2202      	movs	r2, #2
 80079a8:	701a      	strb	r2, [r3, #0]
      break;
 80079aa:	bf00      	nop
  }

  return ret;
 80079ac:	68fb      	ldr	r3, [r7, #12]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop

080079b8 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 80079c2:	f107 0308 	add.w	r3, r7, #8
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	2301      	movs	r3, #1
 80079ca:	2100      	movs	r1, #0
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff fe75 	bl	80076bc <stts751_read_reg>
 80079d2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d118      	bne.n	8007a0c <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 80079da:	f107 0208 	add.w	r2, r7, #8
 80079de:	2301      	movs	r3, #1
 80079e0:	2102      	movs	r1, #2
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7ff fe6a 	bl	80076bc <stts751_read_reg>
 80079e8:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 80079ea:	7a7b      	ldrb	r3, [r7, #9]
 80079ec:	b21a      	sxth	r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	7a3b      	ldrb	r3, [r7, #8]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	4413      	add	r3, r2
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	b21a      	sxth	r2, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8007a22:	f107 0208 	add.w	r2, r7, #8
 8007a26:	2301      	movs	r3, #1
 8007a28:	2103      	movs	r1, #3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fe46 	bl	80076bc <stts751_read_reg>
 8007a30:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10f      	bne.n	8007a58 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	7a3b      	ldrb	r3, [r7, #8]
 8007a42:	f362 13c7 	bfi	r3, r2, #7, #1
 8007a46:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8007a48:	f107 0208 	add.w	r2, r7, #8
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	2103      	movs	r1, #3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff fe4b 	bl	80076ec <stts751_write_reg>
 8007a56:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a58:	68fb      	ldr	r3, [r7, #12]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	2301      	movs	r3, #1
 8007a70:	21fd      	movs	r1, #253	; 0xfd
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff fe22 	bl	80076bc <stts751_read_reg>
 8007a78:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d107      	bne.n	8007a90 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	2301      	movs	r3, #1
 8007a86:	21fe      	movs	r1, #254	; 0xfe
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff fe17 	bl	80076bc <stts751_read_reg>
 8007a8e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d107      	bne.n	8007aa6 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	1c9a      	adds	r2, r3, #2
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	21ff      	movs	r1, #255	; 0xff
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff fe0c 	bl	80076bc <stts751_read_reg>
 8007aa4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	; 0x28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007aba:	2300      	movs	r3, #0
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d06e      	beq.n	8007baa <IKS01A3_ENV_SENSOR_Init+0xfa>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	f200 809d 	bhi.w	8007c0e <IKS01A3_ENV_SENSOR_Init+0x15e>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <IKS01A3_ENV_SENSOR_Init+0x32>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d032      	beq.n	8007b46 <IKS01A3_ENV_SENSOR_Init+0x96>
 8007ae0:	e095      	b.n	8007c0e <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007ae2:	6838      	ldr	r0, [r7, #0]
 8007ae4:	f000 f8e0 	bl	8007ca8 <HTS221_0_Probe>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007aee:	f04f 33ff 	mov.w	r3, #4294967295
 8007af2:	e0cc      	b.n	8007c8e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007af4:	4a68      	ldr	r2, [pc, #416]	; (8007c98 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	4967      	ldr	r1, [pc, #412]	; (8007c9c <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b06:	f107 0108 	add.w	r1, r7, #8
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4798      	blx	r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b14:	f06f 0306 	mvn.w	r3, #6
 8007b18:	e0b9      	b.n	8007c8e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007b1a:	7a3b      	ldrb	r3, [r7, #8]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d103      	bne.n	8007b28 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007b28:	7abb      	ldrb	r3, [r7, #10]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d103      	bne.n	8007b36 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	f043 0304 	orr.w	r3, r3, #4
 8007b34:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007b36:	7a7b      	ldrb	r3, [r7, #9]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d16c      	bne.n	8007c16 <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	f043 0302 	orr.w	r3, r3, #2
 8007b42:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007b44:	e067      	b.n	8007c16 <IKS01A3_ENV_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8007b46:	6838      	ldr	r0, [r7, #0]
 8007b48:	f000 f968 	bl	8007e1c <LPS22HH_0_Probe>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007b52:	f04f 33ff 	mov.w	r3, #4294967295
 8007b56:	e09a      	b.n	8007c8e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007b58:	4a4f      	ldr	r2, [pc, #316]	; (8007c98 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	494e      	ldr	r1, [pc, #312]	; (8007c9c <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b6a:	f107 0108 	add.w	r1, r7, #8
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4798      	blx	r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b78:	f06f 0306 	mvn.w	r3, #6
 8007b7c:	e087      	b.n	8007c8e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007b7e:	7a3b      	ldrb	r3, [r7, #8]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d103      	bne.n	8007b8c <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	f043 0301 	orr.w	r3, r3, #1
 8007b8a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007b8c:	7abb      	ldrb	r3, [r7, #10]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d103      	bne.n	8007b9a <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	f043 0304 	orr.w	r3, r3, #4
 8007b98:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007b9a:	7a7b      	ldrb	r3, [r7, #9]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d13c      	bne.n	8007c1a <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f043 0302 	orr.w	r3, r3, #2
 8007ba6:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007ba8:	e037      	b.n	8007c1a <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8007baa:	6838      	ldr	r0, [r7, #0]
 8007bac:	f000 f9f2 	bl	8007f94 <STTS751_0_Probe>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bba:	e068      	b.n	8007c8e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007bbc:	4a36      	ldr	r2, [pc, #216]	; (8007c98 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	4935      	ldr	r1, [pc, #212]	; (8007c9c <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007bce:	f107 0108 	add.w	r1, r7, #8
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4798      	blx	r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007bdc:	f06f 0306 	mvn.w	r3, #6
 8007be0:	e055      	b.n	8007c8e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007be2:	7a3b      	ldrb	r3, [r7, #8]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d103      	bne.n	8007bf0 <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007bf0:	7abb      	ldrb	r3, [r7, #10]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d103      	bne.n	8007bfe <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	f043 0304 	orr.w	r3, r3, #4
 8007bfc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007bfe:	7a7b      	ldrb	r3, [r7, #9]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d10c      	bne.n	8007c1e <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	f043 0302 	orr.w	r3, r3, #2
 8007c0a:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007c0c:	e007      	b.n	8007c1e <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007c0e:	f06f 0301 	mvn.w	r3, #1
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007c14:	e004      	b.n	8007c20 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007c16:	bf00      	nop
 8007c18:	e002      	b.n	8007c20 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007c1a:	bf00      	nop
 8007c1c:	e000      	b.n	8007c20 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007c1e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	e031      	b.n	8007c8e <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61fb      	str	r3, [r7, #28]
 8007c2e:	e02a      	b.n	8007c86 <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	4013      	ands	r3, r2
 8007c36:	6a3a      	ldr	r2, [r7, #32]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d11e      	bne.n	8007c7a <IKS01A3_ENV_SENSOR_Init+0x1ca>
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	4013      	ands	r3, r2
 8007c42:	6a3a      	ldr	r2, [r7, #32]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d118      	bne.n	8007c7a <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007c48:	4a15      	ldr	r2, [pc, #84]	; (8007ca0 <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c50:	4814      	ldr	r0, [pc, #80]	; (8007ca4 <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	4613      	mov	r3, r2
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	4413      	add	r3, r2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	490e      	ldr	r1, [pc, #56]	; (8007c9c <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4798      	blx	r3
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007c74:	f06f 0304 	mvn.w	r3, #4
 8007c78:	e009      	b.n	8007c8e <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	3301      	adds	r3, #1
 8007c84:	61fb      	str	r3, [r7, #28]
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d9d1      	bls.n	8007c30 <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3728      	adds	r7, #40	; 0x28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20001af8 	.word	0x20001af8
 8007c9c:	20001ac8 	.word	0x20001ac8
 8007ca0:	20001314 	.word	0x20001314
 8007ca4:	20001ad4 	.word	0x20001ad4

08007ca8 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b090      	sub	sp, #64	; 0x40
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8007cb8:	23bf      	movs	r3, #191	; 0xbf
 8007cba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007cbe:	4b49      	ldr	r3, [pc, #292]	; (8007de4 <HTS221_0_Probe+0x13c>)
 8007cc0:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007cc2:	4b49      	ldr	r3, [pc, #292]	; (8007de8 <HTS221_0_Probe+0x140>)
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007cc6:	4b49      	ldr	r3, [pc, #292]	; (8007dec <HTS221_0_Probe+0x144>)
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007cca:	4b49      	ldr	r3, [pc, #292]	; (8007df0 <HTS221_0_Probe+0x148>)
 8007ccc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007cce:	4b49      	ldr	r3, [pc, #292]	; (8007df4 <HTS221_0_Probe+0x14c>)
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007cd2:	f107 0320 	add.w	r3, r7, #32
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4847      	ldr	r0, [pc, #284]	; (8007df8 <HTS221_0_Probe+0x150>)
 8007cda:	f7f9 fa59 	bl	8001190 <HTS221_RegisterBusIO>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ce4:	f06f 0306 	mvn.w	r3, #6
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cea:	e076      	b.n	8007dda <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007cec:	f107 031f 	add.w	r3, r7, #31
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4841      	ldr	r0, [pc, #260]	; (8007df8 <HTS221_0_Probe+0x150>)
 8007cf4:	f7f9 fad1 	bl	800129a <HTS221_ReadID>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007cfe:	f06f 0306 	mvn.w	r3, #6
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d04:	e069      	b.n	8007dda <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8007d06:	7ffb      	ldrb	r3, [r7, #31]
 8007d08:	2bbc      	cmp	r3, #188	; 0xbc
 8007d0a:	d003      	beq.n	8007d14 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007d0c:	f06f 0306 	mvn.w	r3, #6
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d12:	e062      	b.n	8007dda <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007d14:	f107 030c 	add.w	r3, r7, #12
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4837      	ldr	r0, [pc, #220]	; (8007df8 <HTS221_0_Probe+0x150>)
 8007d1c:	f7f9 fad4 	bl	80012c8 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007d20:	7b3b      	ldrb	r3, [r7, #12]
 8007d22:	461a      	mov	r2, r3
 8007d24:	7b7b      	ldrb	r3, [r7, #13]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
 8007d2c:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	4a32      	ldr	r2, [pc, #200]	; (8007dfc <HTS221_0_Probe+0x154>)
 8007d32:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8007d34:	4b32      	ldr	r3, [pc, #200]	; (8007e00 <HTS221_0_Probe+0x158>)
 8007d36:	4a30      	ldr	r2, [pc, #192]	; (8007df8 <HTS221_0_Probe+0x150>)
 8007d38:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007d3a:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <HTS221_0_Probe+0x15c>)
 8007d3c:	4a32      	ldr	r2, [pc, #200]	; (8007e08 <HTS221_0_Probe+0x160>)
 8007d3e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d11d      	bne.n	8007d82 <HTS221_0_Probe+0xda>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d018      	beq.n	8007d82 <HTS221_0_Probe+0xda>
 8007d50:	7b3b      	ldrb	r3, [r7, #12]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d115      	bne.n	8007d82 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007d56:	4b2d      	ldr	r3, [pc, #180]	; (8007e0c <HTS221_0_Probe+0x164>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	4a2d      	ldr	r2, [pc, #180]	; (8007e10 <HTS221_0_Probe+0x168>)
 8007d5c:	492d      	ldr	r1, [pc, #180]	; (8007e14 <HTS221_0_Probe+0x16c>)
 8007d5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007d62:	4b28      	ldr	r3, [pc, #160]	; (8007e04 <HTS221_0_Probe+0x15c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a25      	ldr	r2, [pc, #148]	; (8007e00 <HTS221_0_Probe+0x158>)
 8007d6a:	6812      	ldr	r2, [r2, #0]
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d76:	f06f 0304 	mvn.w	r3, #4
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7c:	e001      	b.n	8007d82 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11d      	bne.n	8007dc4 <HTS221_0_Probe+0x11c>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d018      	beq.n	8007dc4 <HTS221_0_Probe+0x11c>
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d115      	bne.n	8007dc4 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007d98:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <HTS221_0_Probe+0x164>)
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	4a1c      	ldr	r2, [pc, #112]	; (8007e10 <HTS221_0_Probe+0x168>)
 8007d9e:	491e      	ldr	r1, [pc, #120]	; (8007e18 <HTS221_0_Probe+0x170>)
 8007da0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007da4:	4b17      	ldr	r3, [pc, #92]	; (8007e04 <HTS221_0_Probe+0x15c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <HTS221_0_Probe+0x158>)
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	4610      	mov	r0, r2
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007db8:	f06f 0304 	mvn.w	r3, #4
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dbe:	e001      	b.n	8007dc4 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d107      	bne.n	8007dda <HTS221_0_Probe+0x132>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007dd4:	f06f 0304 	mvn.w	r3, #4
 8007dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8007dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3740      	adds	r7, #64	; 0x40
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	0800e49d 	.word	0x0800e49d
 8007de8:	0800e519 	.word	0x0800e519
 8007dec:	0800e5cd 	.word	0x0800e5cd
 8007df0:	0800e569 	.word	0x0800e569
 8007df4:	0800e631 	.word	0x0800e631
 8007df8:	20001b10 	.word	0x20001b10
 8007dfc:	20001b04 	.word	0x20001b04
 8007e00:	20001ac8 	.word	0x20001ac8
 8007e04:	20001af8 	.word	0x20001af8
 8007e08:	200011c0 	.word	0x200011c0
 8007e0c:	20001314 	.word	0x20001314
 8007e10:	20001ad4 	.word	0x20001ad4
 8007e14:	200011e4 	.word	0x200011e4
 8007e18:	200011d0 	.word	0x200011d0

08007e1c <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b090      	sub	sp, #64	; 0x40
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8007e28:	2300      	movs	r3, #0
 8007e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8007e2c:	23bb      	movs	r3, #187	; 0xbb
 8007e2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007e32:	4b4a      	ldr	r3, [pc, #296]	; (8007f5c <LPS22HH_0_Probe+0x140>)
 8007e34:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007e36:	4b4a      	ldr	r3, [pc, #296]	; (8007f60 <LPS22HH_0_Probe+0x144>)
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007e3a:	4b4a      	ldr	r3, [pc, #296]	; (8007f64 <LPS22HH_0_Probe+0x148>)
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007e3e:	4b4a      	ldr	r3, [pc, #296]	; (8007f68 <LPS22HH_0_Probe+0x14c>)
 8007e40:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007e42:	4b4a      	ldr	r3, [pc, #296]	; (8007f6c <LPS22HH_0_Probe+0x150>)
 8007e44:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8007e46:	f107 0320 	add.w	r3, r7, #32
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4848      	ldr	r0, [pc, #288]	; (8007f70 <LPS22HH_0_Probe+0x154>)
 8007e4e:	f7fc fb0f 	bl	8004470 <LPS22HH_RegisterBusIO>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e58:	f06f 0306 	mvn.w	r3, #6
 8007e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e5e:	e078      	b.n	8007f52 <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8007e60:	f107 031f 	add.w	r3, r7, #31
 8007e64:	4619      	mov	r1, r3
 8007e66:	4842      	ldr	r0, [pc, #264]	; (8007f70 <LPS22HH_0_Probe+0x154>)
 8007e68:	f7fc fba7 	bl	80045ba <LPS22HH_ReadID>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e72:	f06f 0306 	mvn.w	r3, #6
 8007e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e78:	e06b      	b.n	8007f52 <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 8007e7a:	7ffb      	ldrb	r3, [r7, #31]
 8007e7c:	2bb3      	cmp	r3, #179	; 0xb3
 8007e7e:	d003      	beq.n	8007e88 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e80:	f06f 0306 	mvn.w	r3, #6
 8007e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e86:	e064      	b.n	8007f52 <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8007e88:	f107 030c 	add.w	r3, r7, #12
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4838      	ldr	r0, [pc, #224]	; (8007f70 <LPS22HH_0_Probe+0x154>)
 8007e90:	f7fc fbaa 	bl	80045e8 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007e94:	7b3b      	ldrb	r3, [r7, #12]
 8007e96:	461a      	mov	r2, r3
 8007e98:	7b7b      	ldrb	r3, [r7, #13]
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	4a33      	ldr	r2, [pc, #204]	; (8007f74 <LPS22HH_0_Probe+0x158>)
 8007ea6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8007ea8:	4b33      	ldr	r3, [pc, #204]	; (8007f78 <LPS22HH_0_Probe+0x15c>)
 8007eaa:	4a31      	ldr	r2, [pc, #196]	; (8007f70 <LPS22HH_0_Probe+0x154>)
 8007eac:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8007eae:	4b33      	ldr	r3, [pc, #204]	; (8007f7c <LPS22HH_0_Probe+0x160>)
 8007eb0:	4a33      	ldr	r2, [pc, #204]	; (8007f80 <LPS22HH_0_Probe+0x164>)
 8007eb2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d11e      	bne.n	8007ef8 <LPS22HH_0_Probe+0xdc>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d019      	beq.n	8007ef8 <LPS22HH_0_Probe+0xdc>
 8007ec4:	7b3b      	ldrb	r3, [r7, #12]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d116      	bne.n	8007ef8 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8007eca:	4b2e      	ldr	r3, [pc, #184]	; (8007f84 <LPS22HH_0_Probe+0x168>)
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	4a2e      	ldr	r2, [pc, #184]	; (8007f88 <LPS22HH_0_Probe+0x16c>)
 8007ed0:	3303      	adds	r3, #3
 8007ed2:	492e      	ldr	r1, [pc, #184]	; (8007f8c <LPS22HH_0_Probe+0x170>)
 8007ed4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8007ed8:	4b28      	ldr	r3, [pc, #160]	; (8007f7c <LPS22HH_0_Probe+0x160>)
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a26      	ldr	r2, [pc, #152]	; (8007f78 <LPS22HH_0_Probe+0x15c>)
 8007ee0:	6852      	ldr	r2, [r2, #4]
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4798      	blx	r3
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007eec:	f06f 0304 	mvn.w	r3, #4
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef2:	e001      	b.n	8007ef8 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8007ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d11e      	bne.n	8007f3c <LPS22HH_0_Probe+0x120>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d019      	beq.n	8007f3c <LPS22HH_0_Probe+0x120>
 8007f08:	7b7b      	ldrb	r3, [r7, #13]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d116      	bne.n	8007f3c <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8007f0e:	4b1d      	ldr	r3, [pc, #116]	; (8007f84 <LPS22HH_0_Probe+0x168>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	4a1d      	ldr	r2, [pc, #116]	; (8007f88 <LPS22HH_0_Probe+0x16c>)
 8007f14:	3303      	adds	r3, #3
 8007f16:	491e      	ldr	r1, [pc, #120]	; (8007f90 <LPS22HH_0_Probe+0x174>)
 8007f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8007f1c:	4b17      	ldr	r3, [pc, #92]	; (8007f7c <LPS22HH_0_Probe+0x160>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a15      	ldr	r2, [pc, #84]	; (8007f78 <LPS22HH_0_Probe+0x15c>)
 8007f24:	6852      	ldr	r2, [r2, #4]
 8007f26:	4610      	mov	r0, r2
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f30:	f06f 0304 	mvn.w	r3, #4
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f36:	e001      	b.n	8007f3c <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8007f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d107      	bne.n	8007f52 <LPS22HH_0_Probe+0x136>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f4c:	f06f 0304 	mvn.w	r3, #4
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8007f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3740      	adds	r7, #64	; 0x40
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	0800e49d 	.word	0x0800e49d
 8007f60:	0800e519 	.word	0x0800e519
 8007f64:	0800e5cd 	.word	0x0800e5cd
 8007f68:	0800e569 	.word	0x0800e569
 8007f6c:	0800e631 	.word	0x0800e631
 8007f70:	20001b3c 	.word	0x20001b3c
 8007f74:	20001b04 	.word	0x20001b04
 8007f78:	20001ac8 	.word	0x20001ac8
 8007f7c:	20001af8 	.word	0x20001af8
 8007f80:	20001260 	.word	0x20001260
 8007f84:	20001314 	.word	0x20001314
 8007f88:	20001ad4 	.word	0x20001ad4
 8007f8c:	20001284 	.word	0x20001284
 8007f90:	20001270 	.word	0x20001270

08007f94 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b090      	sub	sp, #64	; 0x40
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8007fa4:	2395      	movs	r3, #149	; 0x95
 8007fa6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007faa:	4b3f      	ldr	r3, [pc, #252]	; (80080a8 <STTS751_0_Probe+0x114>)
 8007fac:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007fae:	4b3f      	ldr	r3, [pc, #252]	; (80080ac <STTS751_0_Probe+0x118>)
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007fb2:	4b3f      	ldr	r3, [pc, #252]	; (80080b0 <STTS751_0_Probe+0x11c>)
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007fb6:	4b3f      	ldr	r3, [pc, #252]	; (80080b4 <STTS751_0_Probe+0x120>)
 8007fb8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007fba:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <STTS751_0_Probe+0x124>)
 8007fbc:	63bb      	str	r3, [r7, #56]	; 0x38

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8007fbe:	f107 0320 	add.w	r3, r7, #32
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	483d      	ldr	r0, [pc, #244]	; (80080bc <STTS751_0_Probe+0x128>)
 8007fc6:	f7ff f885 	bl	80070d4 <STTS751_RegisterBusIO>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fd0:	f06f 0306 	mvn.w	r3, #6
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd6:	e061      	b.n	800809c <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8007fd8:	f107 031f 	add.w	r3, r7, #31
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4837      	ldr	r0, [pc, #220]	; (80080bc <STTS751_0_Probe+0x128>)
 8007fe0:	f7ff f913 	bl	800720a <STTS751_ReadID>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fea:	f06f 0306 	mvn.w	r3, #6
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff0:	e054      	b.n	800809c <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 8007ff2:	7ffb      	ldrb	r3, [r7, #31]
 8007ff4:	2b53      	cmp	r3, #83	; 0x53
 8007ff6:	d003      	beq.n	8008000 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ff8:	f06f 0306 	mvn.w	r3, #6
 8007ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ffe:	e04d      	b.n	800809c <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008000:	f107 030c 	add.w	r3, r7, #12
 8008004:	4619      	mov	r1, r3
 8008006:	482d      	ldr	r0, [pc, #180]	; (80080bc <STTS751_0_Probe+0x128>)
 8008008:	f7ff f91a 	bl	8007240 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800800c:	7b3b      	ldrb	r3, [r7, #12]
 800800e:	461a      	mov	r2, r3
 8008010:	7b7b      	ldrb	r3, [r7, #13]
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800801a:	4313      	orrs	r3, r2
 800801c:	4a28      	ldr	r2, [pc, #160]	; (80080c0 <STTS751_0_Probe+0x12c>)
 800801e:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008020:	4b28      	ldr	r3, [pc, #160]	; (80080c4 <STTS751_0_Probe+0x130>)
 8008022:	4a26      	ldr	r2, [pc, #152]	; (80080bc <STTS751_0_Probe+0x128>)
 8008024:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8008026:	4b28      	ldr	r3, [pc, #160]	; (80080c8 <STTS751_0_Probe+0x134>)
 8008028:	4a28      	ldr	r2, [pc, #160]	; (80080cc <STTS751_0_Probe+0x138>)
 800802a:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800802c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d11e      	bne.n	8008070 <STTS751_0_Probe+0xdc>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d019      	beq.n	8008070 <STTS751_0_Probe+0xdc>
 800803c:	7b3b      	ldrb	r3, [r7, #12]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d116      	bne.n	8008070 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8008042:	4b23      	ldr	r3, [pc, #140]	; (80080d0 <STTS751_0_Probe+0x13c>)
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	4a23      	ldr	r2, [pc, #140]	; (80080d4 <STTS751_0_Probe+0x140>)
 8008048:	3306      	adds	r3, #6
 800804a:	4923      	ldr	r1, [pc, #140]	; (80080d8 <STTS751_0_Probe+0x144>)
 800804c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8008050:	4b1d      	ldr	r3, [pc, #116]	; (80080c8 <STTS751_0_Probe+0x134>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a1b      	ldr	r2, [pc, #108]	; (80080c4 <STTS751_0_Probe+0x130>)
 8008058:	6892      	ldr	r2, [r2, #8]
 800805a:	4610      	mov	r0, r2
 800805c:	4798      	blx	r3
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008064:	f06f 0304 	mvn.w	r3, #4
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800806a:	e001      	b.n	8008070 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800806c:	2300      	movs	r3, #0
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d107      	bne.n	8008086 <STTS751_0_Probe+0xf2>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008080:	f06f 0304 	mvn.w	r3, #4
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d107      	bne.n	800809c <STTS751_0_Probe+0x108>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008096:	f06f 0304 	mvn.w	r3, #4
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800809c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3740      	adds	r7, #64	; 0x40
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	0800e49d 	.word	0x0800e49d
 80080ac:	0800e519 	.word	0x0800e519
 80080b0:	0800e5cd 	.word	0x0800e5cd
 80080b4:	0800e569 	.word	0x0800e569
 80080b8:	0800e631 	.word	0x0800e631
 80080bc:	20001b68 	.word	0x20001b68
 80080c0:	20001b04 	.word	0x20001b04
 80080c4:	20001ac8 	.word	0x20001ac8
 80080c8:	20001af8 	.word	0x20001af8
 80080cc:	200012f0 	.word	0x200012f0
 80080d0:	20001314 	.word	0x20001314
 80080d4:	20001ad4 	.word	0x20001ad4
 80080d8:	20001300 	.word	0x20001300

080080dc <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08e      	sub	sp, #56	; 0x38
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80080ea:	2301      	movs	r3, #1
 80080ec:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d06e      	beq.n	80081d6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	f200 809d 	bhi.w	800823a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <IKS01A3_MOTION_SENSOR_Init+0x32>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d032      	beq.n	8008172 <IKS01A3_MOTION_SENSOR_Init+0x96>
 800810c:	e095      	b.n	800823a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800810e:	6838      	ldr	r0, [r7, #0]
 8008110:	f000 f9ae 	bl	8008470 <LSM6DSO_0_Probe>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	e0cc      	b.n	80082ba <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008120:	4a68      	ldr	r2, [pc, #416]	; (80082c4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	4967      	ldr	r1, [pc, #412]	; (80082c8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008132:	f107 010c 	add.w	r1, r7, #12
 8008136:	4610      	mov	r0, r2
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008140:	f06f 0306 	mvn.w	r3, #6
 8008144:	e0b9      	b.n	80082ba <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008146:	7b3b      	ldrb	r3, [r7, #12]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d103      	bne.n	8008154 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	f043 0302 	orr.w	r3, r3, #2
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008154:	7b7b      	ldrb	r3, [r7, #13]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d103      	bne.n	8008162 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	f043 0301 	orr.w	r3, r3, #1
 8008160:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d16c      	bne.n	8008242 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	f043 0304 	orr.w	r3, r3, #4
 800816e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008170:	e067      	b.n	8008242 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8008172:	6838      	ldr	r0, [r7, #0]
 8008174:	f000 fa38 	bl	80085e8 <LIS2DW12_0_Probe>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
 8008182:	e09a      	b.n	80082ba <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008184:	4a4f      	ldr	r2, [pc, #316]	; (80082c4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	494e      	ldr	r1, [pc, #312]	; (80082c8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008196:	f107 010c 	add.w	r1, r7, #12
 800819a:	4610      	mov	r0, r2
 800819c:	4798      	blx	r3
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80081a4:	f06f 0306 	mvn.w	r3, #6
 80081a8:	e087      	b.n	80082ba <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80081aa:	7b3b      	ldrb	r3, [r7, #12]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d103      	bne.n	80081b8 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	f043 0302 	orr.w	r3, r3, #2
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80081b8:	7b7b      	ldrb	r3, [r7, #13]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d103      	bne.n	80081c6 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	f043 0301 	orr.w	r3, r3, #1
 80081c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d13c      	bne.n	8008246 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	f043 0304 	orr.w	r3, r3, #4
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80081d4:	e037      	b.n	8008246 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80081d6:	6838      	ldr	r0, [r7, #0]
 80081d8:	f000 faaa 	bl	8008730 <LIS2MDL_0_Probe>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
 80081e6:	e068      	b.n	80082ba <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80081e8:	4a36      	ldr	r2, [pc, #216]	; (80082c4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	4935      	ldr	r1, [pc, #212]	; (80082c8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80081fa:	f107 010c 	add.w	r1, r7, #12
 80081fe:	4610      	mov	r0, r2
 8008200:	4798      	blx	r3
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008208:	f06f 0306 	mvn.w	r3, #6
 800820c:	e055      	b.n	80082ba <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800820e:	7b3b      	ldrb	r3, [r7, #12]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d103      	bne.n	800821c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	f043 0302 	orr.w	r3, r3, #2
 800821a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800821c:	7b7b      	ldrb	r3, [r7, #13]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d103      	bne.n	800822a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	f043 0301 	orr.w	r3, r3, #1
 8008228:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d10c      	bne.n	800824a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f043 0304 	orr.w	r3, r3, #4
 8008236:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008238:	e007      	b.n	800824a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800823a:	f06f 0301 	mvn.w	r3, #1
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008240:	e004      	b.n	800824c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008242:	bf00      	nop
 8008244:	e002      	b.n	800824c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008246:	bf00      	nop
 8008248:	e000      	b.n	800824c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800824a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800824c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	e031      	b.n	80082ba <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008256:	2300      	movs	r3, #0
 8008258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800825a:	e02a      	b.n	80082b2 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	4013      	ands	r3, r2
 8008262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008264:	429a      	cmp	r2, r3
 8008266:	d11e      	bne.n	80082a6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8008268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	4013      	ands	r3, r2
 800826e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008270:	429a      	cmp	r2, r3
 8008272:	d118      	bne.n	80082a6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008274:	4a15      	ldr	r2, [pc, #84]	; (80082cc <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800827c:	4814      	ldr	r0, [pc, #80]	; (80082d0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	4613      	mov	r3, r2
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	4413      	add	r3, r2
 8008286:	440b      	add	r3, r1
 8008288:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	490e      	ldr	r1, [pc, #56]	; (80082c8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008296:	4610      	mov	r0, r2
 8008298:	4798      	blx	r3
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80082a0:	f06f 0304 	mvn.w	r3, #4
 80082a4:	e009      	b.n	80082ba <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	3301      	adds	r3, #1
 80082b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d9d1      	bls.n	800825c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3738      	adds	r7, #56	; 0x38
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20001bc8 	.word	0x20001bc8
 80082c8:	20001b98 	.word	0x20001b98
 80082cc:	20001328 	.word	0x20001328
 80082d0:	20001ba4 	.word	0x20001ba4

080082d4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d903      	bls.n	80082ee <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80082e6:	f06f 0301 	mvn.w	r3, #1
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e029      	b.n	8008342 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80082ee:	4a17      	ldr	r2, [pc, #92]	; (800834c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4013      	ands	r3, r2
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d11d      	bne.n	800833c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008300:	4a13      	ldr	r2, [pc, #76]	; (8008350 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008308:	4812      	ldr	r0, [pc, #72]	; (8008354 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4613      	mov	r3, r2
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	4413      	add	r3, r2
 8008312:	440b      	add	r3, r1
 8008314:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	490f      	ldr	r1, [pc, #60]	; (8008358 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800832e:	f06f 0304 	mvn.w	r3, #4
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	e005      	b.n	8008342 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008336:	2300      	movs	r3, #0
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	e002      	b.n	8008342 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800833c:	f06f 0301 	mvn.w	r3, #1
 8008340:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008342:	697b      	ldr	r3, [r7, #20]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20001bd4 	.word	0x20001bd4
 8008350:	20001328 	.word	0x20001328
 8008354:	20001ba4 	.word	0x20001ba4
 8008358:	20001b98 	.word	0x20001b98

0800835c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b02      	cmp	r3, #2
 800836e:	d903      	bls.n	8008378 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008370:	f06f 0301 	mvn.w	r3, #1
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	e02a      	b.n	80083ce <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008378:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4013      	ands	r3, r2
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	429a      	cmp	r2, r3
 8008388:	d11e      	bne.n	80083c8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800838a:	4a14      	ldr	r2, [pc, #80]	; (80083dc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008392:	4813      	ldr	r0, [pc, #76]	; (80083e0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4613      	mov	r3, r2
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	4413      	add	r3, r2
 800839c:	440b      	add	r3, r1
 800839e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	490f      	ldr	r1, [pc, #60]	; (80083e4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80083b0:	4610      	mov	r0, r2
 80083b2:	4798      	blx	r3
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80083ba:	f06f 0304 	mvn.w	r3, #4
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	e005      	b.n	80083ce <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	e002      	b.n	80083ce <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80083c8:	f06f 0301 	mvn.w	r3, #1
 80083cc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80083ce:	697b      	ldr	r3, [r7, #20]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20001bd4 	.word	0x20001bd4
 80083dc:	20001328 	.word	0x20001328
 80083e0:	20001ba4 	.word	0x20001ba4
 80083e4:	20001b98 	.word	0x20001b98

080083e8 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d903      	bls.n	8008402 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80083fa:	f06f 0301 	mvn.w	r3, #1
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e029      	b.n	8008456 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008402:	4a17      	ldr	r2, [pc, #92]	; (8008460 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4013      	ands	r3, r2
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	429a      	cmp	r2, r3
 8008412:	d11d      	bne.n	8008450 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8008414:	4a13      	ldr	r2, [pc, #76]	; (8008464 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800841c:	4812      	ldr	r0, [pc, #72]	; (8008468 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4613      	mov	r3, r2
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	4413      	add	r3, r2
 8008426:	440b      	add	r3, r1
 8008428:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	490f      	ldr	r1, [pc, #60]	; (800846c <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4610      	mov	r0, r2
 800843a:	4798      	blx	r3
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008442:	f06f 0304 	mvn.w	r3, #4
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	e005      	b.n	8008456 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e002      	b.n	8008456 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008450:	f06f 0301 	mvn.w	r3, #1
 8008454:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008456:	697b      	ldr	r3, [r7, #20]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20001bd4 	.word	0x20001bd4
 8008464:	20001328 	.word	0x20001328
 8008468:	20001ba4 	.word	0x20001ba4
 800846c:	20001b98 	.word	0x20001b98

08008470 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b092      	sub	sp, #72	; 0x48
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008478:	2300      	movs	r3, #0
 800847a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800847c:	2300      	movs	r3, #0
 800847e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8008480:	23d7      	movs	r3, #215	; 0xd7
 8008482:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008486:	4b4a      	ldr	r3, [pc, #296]	; (80085b0 <LSM6DSO_0_Probe+0x140>)
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800848a:	4b4a      	ldr	r3, [pc, #296]	; (80085b4 <LSM6DSO_0_Probe+0x144>)
 800848c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800848e:	4b4a      	ldr	r3, [pc, #296]	; (80085b8 <LSM6DSO_0_Probe+0x148>)
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008492:	4b4a      	ldr	r3, [pc, #296]	; (80085bc <LSM6DSO_0_Probe+0x14c>)
 8008494:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008496:	4b4a      	ldr	r3, [pc, #296]	; (80085c0 <LSM6DSO_0_Probe+0x150>)
 8008498:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800849a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800849e:	4619      	mov	r1, r3
 80084a0:	4848      	ldr	r0, [pc, #288]	; (80085c4 <LSM6DSO_0_Probe+0x154>)
 80084a2:	f7fc fe3b 	bl	800511c <LSM6DSO_RegisterBusIO>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084ac:	f06f 0306 	mvn.w	r3, #6
 80084b0:	647b      	str	r3, [r7, #68]	; 0x44
 80084b2:	e077      	b.n	80085a4 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80084b4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80084b8:	4619      	mov	r1, r3
 80084ba:	4842      	ldr	r0, [pc, #264]	; (80085c4 <LSM6DSO_0_Probe+0x154>)
 80084bc:	f7fc ff30 	bl	8005320 <LSM6DSO_ReadID>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084c6:	f06f 0306 	mvn.w	r3, #6
 80084ca:	647b      	str	r3, [r7, #68]	; 0x44
 80084cc:	e06a      	b.n	80085a4 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 80084ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d2:	2b6c      	cmp	r3, #108	; 0x6c
 80084d4:	d003      	beq.n	80084de <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084d6:	f06f 0306 	mvn.w	r3, #6
 80084da:	647b      	str	r3, [r7, #68]	; 0x44
 80084dc:	e062      	b.n	80085a4 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80084de:	f107 0308 	add.w	r3, r7, #8
 80084e2:	4619      	mov	r1, r3
 80084e4:	4837      	ldr	r0, [pc, #220]	; (80085c4 <LSM6DSO_0_Probe+0x154>)
 80084e6:	f7fc ff31 	bl	800534c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80084ea:	7a7b      	ldrb	r3, [r7, #9]
 80084ec:	461a      	mov	r2, r3
 80084ee:	7a3b      	ldrb	r3, [r7, #8]
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	431a      	orrs	r2, r3
 80084f4:	7abb      	ldrb	r3, [r7, #10]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4313      	orrs	r3, r2
 80084fa:	4a33      	ldr	r2, [pc, #204]	; (80085c8 <LSM6DSO_0_Probe+0x158>)
 80084fc:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80084fe:	4b33      	ldr	r3, [pc, #204]	; (80085cc <LSM6DSO_0_Probe+0x15c>)
 8008500:	4a30      	ldr	r2, [pc, #192]	; (80085c4 <LSM6DSO_0_Probe+0x154>)
 8008502:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008504:	4b32      	ldr	r3, [pc, #200]	; (80085d0 <LSM6DSO_0_Probe+0x160>)
 8008506:	4a33      	ldr	r2, [pc, #204]	; (80085d4 <LSM6DSO_0_Probe+0x164>)
 8008508:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800850a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800850c:	2b00      	cmp	r3, #0
 800850e:	d11d      	bne.n	800854c <LSM6DSO_0_Probe+0xdc>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d018      	beq.n	800854c <LSM6DSO_0_Probe+0xdc>
 800851a:	7a7b      	ldrb	r3, [r7, #9]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d115      	bne.n	800854c <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008520:	4b2d      	ldr	r3, [pc, #180]	; (80085d8 <LSM6DSO_0_Probe+0x168>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	4a2d      	ldr	r2, [pc, #180]	; (80085dc <LSM6DSO_0_Probe+0x16c>)
 8008526:	492e      	ldr	r1, [pc, #184]	; (80085e0 <LSM6DSO_0_Probe+0x170>)
 8008528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800852c:	4b28      	ldr	r3, [pc, #160]	; (80085d0 <LSM6DSO_0_Probe+0x160>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a26      	ldr	r2, [pc, #152]	; (80085cc <LSM6DSO_0_Probe+0x15c>)
 8008534:	6812      	ldr	r2, [r2, #0]
 8008536:	4610      	mov	r0, r2
 8008538:	4798      	blx	r3
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008540:	f06f 0304 	mvn.w	r3, #4
 8008544:	647b      	str	r3, [r7, #68]	; 0x44
 8008546:	e001      	b.n	800854c <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008548:	2300      	movs	r3, #0
 800854a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800854c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800854e:	2b00      	cmp	r3, #0
 8008550:	d11d      	bne.n	800858e <LSM6DSO_0_Probe+0x11e>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d018      	beq.n	800858e <LSM6DSO_0_Probe+0x11e>
 800855c:	7a3b      	ldrb	r3, [r7, #8]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d115      	bne.n	800858e <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008562:	4b1d      	ldr	r3, [pc, #116]	; (80085d8 <LSM6DSO_0_Probe+0x168>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	4a1d      	ldr	r2, [pc, #116]	; (80085dc <LSM6DSO_0_Probe+0x16c>)
 8008568:	491e      	ldr	r1, [pc, #120]	; (80085e4 <LSM6DSO_0_Probe+0x174>)
 800856a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800856e:	4b18      	ldr	r3, [pc, #96]	; (80085d0 <LSM6DSO_0_Probe+0x160>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a15      	ldr	r2, [pc, #84]	; (80085cc <LSM6DSO_0_Probe+0x15c>)
 8008576:	6812      	ldr	r2, [r2, #0]
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008582:	f06f 0304 	mvn.w	r3, #4
 8008586:	647b      	str	r3, [r7, #68]	; 0x44
 8008588:	e001      	b.n	800858e <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800858a:	2300      	movs	r3, #0
 800858c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800858e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008590:	2b00      	cmp	r3, #0
 8008592:	d107      	bne.n	80085a4 <LSM6DSO_0_Probe+0x134>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800859e:	f06f 0304 	mvn.w	r3, #4
 80085a2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80085a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3748      	adds	r7, #72	; 0x48
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	0800e49d 	.word	0x0800e49d
 80085b4:	0800e519 	.word	0x0800e519
 80085b8:	0800e5cd 	.word	0x0800e5cd
 80085bc:	0800e569 	.word	0x0800e569
 80085c0:	0800e631 	.word	0x0800e631
 80085c4:	20001be0 	.word	0x20001be0
 80085c8:	20001bd4 	.word	0x20001bd4
 80085cc:	20001b98 	.word	0x20001b98
 80085d0:	20001bc8 	.word	0x20001bc8
 80085d4:	20001298 	.word	0x20001298
 80085d8:	20001328 	.word	0x20001328
 80085dc:	20001ba4 	.word	0x20001ba4
 80085e0:	200012cc 	.word	0x200012cc
 80085e4:	200012a8 	.word	0x200012a8

080085e8 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b092      	sub	sp, #72	; 0x48
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80085f4:	2300      	movs	r3, #0
 80085f6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 80085f8:	2333      	movs	r3, #51	; 0x33
 80085fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80085fe:	4b3f      	ldr	r3, [pc, #252]	; (80086fc <LIS2DW12_0_Probe+0x114>)
 8008600:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008602:	4b3f      	ldr	r3, [pc, #252]	; (8008700 <LIS2DW12_0_Probe+0x118>)
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008606:	4b3f      	ldr	r3, [pc, #252]	; (8008704 <LIS2DW12_0_Probe+0x11c>)
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800860a:	4b3f      	ldr	r3, [pc, #252]	; (8008708 <LIS2DW12_0_Probe+0x120>)
 800860c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 800860e:	4b3f      	ldr	r3, [pc, #252]	; (800870c <LIS2DW12_0_Probe+0x124>)
 8008610:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8008612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008616:	4619      	mov	r1, r3
 8008618:	483d      	ldr	r0, [pc, #244]	; (8008710 <LIS2DW12_0_Probe+0x128>)
 800861a:	f7f9 fbd7 	bl	8001dcc <LIS2DW12_RegisterBusIO>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008624:	f06f 0306 	mvn.w	r3, #6
 8008628:	647b      	str	r3, [r7, #68]	; 0x44
 800862a:	e062      	b.n	80086f2 <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800862c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008630:	4619      	mov	r1, r3
 8008632:	4837      	ldr	r0, [pc, #220]	; (8008710 <LIS2DW12_0_Probe+0x128>)
 8008634:	f7f9 fcb4 	bl	8001fa0 <LIS2DW12_ReadID>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800863e:	f06f 0306 	mvn.w	r3, #6
 8008642:	647b      	str	r3, [r7, #68]	; 0x44
 8008644:	e055      	b.n	80086f2 <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 8008646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800864a:	2b44      	cmp	r3, #68	; 0x44
 800864c:	d003      	beq.n	8008656 <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800864e:	f06f 0306 	mvn.w	r3, #6
 8008652:	647b      	str	r3, [r7, #68]	; 0x44
 8008654:	e04d      	b.n	80086f2 <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8008656:	f107 0308 	add.w	r3, r7, #8
 800865a:	4619      	mov	r1, r3
 800865c:	482c      	ldr	r0, [pc, #176]	; (8008710 <LIS2DW12_0_Probe+0x128>)
 800865e:	f7f9 fcb5 	bl	8001fcc <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008662:	7a7b      	ldrb	r3, [r7, #9]
 8008664:	461a      	mov	r2, r3
 8008666:	7a3b      	ldrb	r3, [r7, #8]
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	431a      	orrs	r2, r3
 800866c:	7abb      	ldrb	r3, [r7, #10]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4313      	orrs	r3, r2
 8008672:	4a28      	ldr	r2, [pc, #160]	; (8008714 <LIS2DW12_0_Probe+0x12c>)
 8008674:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8008676:	4b28      	ldr	r3, [pc, #160]	; (8008718 <LIS2DW12_0_Probe+0x130>)
 8008678:	4a25      	ldr	r2, [pc, #148]	; (8008710 <LIS2DW12_0_Probe+0x128>)
 800867a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800867c:	4b27      	ldr	r3, [pc, #156]	; (800871c <LIS2DW12_0_Probe+0x134>)
 800867e:	4a28      	ldr	r2, [pc, #160]	; (8008720 <LIS2DW12_0_Probe+0x138>)
 8008680:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11e      	bne.n	80086c6 <LIS2DW12_0_Probe+0xde>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d019      	beq.n	80086c6 <LIS2DW12_0_Probe+0xde>
 8008692:	7a3b      	ldrb	r3, [r7, #8]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d116      	bne.n	80086c6 <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008698:	4b22      	ldr	r3, [pc, #136]	; (8008724 <LIS2DW12_0_Probe+0x13c>)
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	4a22      	ldr	r2, [pc, #136]	; (8008728 <LIS2DW12_0_Probe+0x140>)
 800869e:	3303      	adds	r3, #3
 80086a0:	4922      	ldr	r1, [pc, #136]	; (800872c <LIS2DW12_0_Probe+0x144>)
 80086a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80086a6:	4b1d      	ldr	r3, [pc, #116]	; (800871c <LIS2DW12_0_Probe+0x134>)
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1a      	ldr	r2, [pc, #104]	; (8008718 <LIS2DW12_0_Probe+0x130>)
 80086ae:	6852      	ldr	r2, [r2, #4]
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086ba:	f06f 0304 	mvn.w	r3, #4
 80086be:	647b      	str	r3, [r7, #68]	; 0x44
 80086c0:	e001      	b.n	80086c6 <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80086c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d107      	bne.n	80086dc <LIS2DW12_0_Probe+0xf4>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80086d6:	f06f 0304 	mvn.w	r3, #4
 80086da:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80086dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d107      	bne.n	80086f2 <LIS2DW12_0_Probe+0x10a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80086ec:	f06f 0304 	mvn.w	r3, #4
 80086f0:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80086f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3748      	adds	r7, #72	; 0x48
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	0800e49d 	.word	0x0800e49d
 8008700:	0800e519 	.word	0x0800e519
 8008704:	0800e5cd 	.word	0x0800e5cd
 8008708:	0800e569 	.word	0x0800e569
 800870c:	0800e631 	.word	0x0800e631
 8008710:	20001c10 	.word	0x20001c10
 8008714:	20001bd4 	.word	0x20001bd4
 8008718:	20001b98 	.word	0x20001b98
 800871c:	20001bc8 	.word	0x20001bc8
 8008720:	200011f8 	.word	0x200011f8
 8008724:	20001328 	.word	0x20001328
 8008728:	20001ba4 	.word	0x20001ba4
 800872c:	20001208 	.word	0x20001208

08008730 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b092      	sub	sp, #72	; 0x48
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008738:	2300      	movs	r3, #0
 800873a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800873c:	2300      	movs	r3, #0
 800873e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008740:	233d      	movs	r3, #61	; 0x3d
 8008742:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008746:	4b3f      	ldr	r3, [pc, #252]	; (8008844 <LIS2MDL_0_Probe+0x114>)
 8008748:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800874a:	4b3f      	ldr	r3, [pc, #252]	; (8008848 <LIS2MDL_0_Probe+0x118>)
 800874c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800874e:	4b3f      	ldr	r3, [pc, #252]	; (800884c <LIS2MDL_0_Probe+0x11c>)
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008752:	4b3f      	ldr	r3, [pc, #252]	; (8008850 <LIS2MDL_0_Probe+0x120>)
 8008754:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008756:	4b3f      	ldr	r3, [pc, #252]	; (8008854 <LIS2MDL_0_Probe+0x124>)
 8008758:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800875a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800875e:	4619      	mov	r1, r3
 8008760:	483d      	ldr	r0, [pc, #244]	; (8008858 <LIS2MDL_0_Probe+0x128>)
 8008762:	f7fa fe83 	bl	800346c <LIS2MDL_RegisterBusIO>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800876c:	f06f 0306 	mvn.w	r3, #6
 8008770:	647b      	str	r3, [r7, #68]	; 0x44
 8008772:	e062      	b.n	800883a <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008774:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008778:	4619      	mov	r1, r3
 800877a:	4837      	ldr	r0, [pc, #220]	; (8008858 <LIS2MDL_0_Probe+0x128>)
 800877c:	f7fa ff8e 	bl	800369c <LIS2MDL_ReadID>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008786:	f06f 0306 	mvn.w	r3, #6
 800878a:	647b      	str	r3, [r7, #68]	; 0x44
 800878c:	e055      	b.n	800883a <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 800878e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008792:	2b40      	cmp	r3, #64	; 0x40
 8008794:	d003      	beq.n	800879e <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008796:	f06f 0306 	mvn.w	r3, #6
 800879a:	647b      	str	r3, [r7, #68]	; 0x44
 800879c:	e04d      	b.n	800883a <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800879e:	f107 0308 	add.w	r3, r7, #8
 80087a2:	4619      	mov	r1, r3
 80087a4:	482c      	ldr	r0, [pc, #176]	; (8008858 <LIS2MDL_0_Probe+0x128>)
 80087a6:	f7fa ff9f 	bl	80036e8 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80087aa:	7a7b      	ldrb	r3, [r7, #9]
 80087ac:	461a      	mov	r2, r3
 80087ae:	7a3b      	ldrb	r3, [r7, #8]
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	431a      	orrs	r2, r3
 80087b4:	7abb      	ldrb	r3, [r7, #10]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4313      	orrs	r3, r2
 80087ba:	4a28      	ldr	r2, [pc, #160]	; (800885c <LIS2MDL_0_Probe+0x12c>)
 80087bc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80087be:	4b28      	ldr	r3, [pc, #160]	; (8008860 <LIS2MDL_0_Probe+0x130>)
 80087c0:	4a25      	ldr	r2, [pc, #148]	; (8008858 <LIS2MDL_0_Probe+0x128>)
 80087c2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80087c4:	4b27      	ldr	r3, [pc, #156]	; (8008864 <LIS2MDL_0_Probe+0x134>)
 80087c6:	4a28      	ldr	r2, [pc, #160]	; (8008868 <LIS2MDL_0_Probe+0x138>)
 80087c8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80087ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d11e      	bne.n	800880e <LIS2MDL_0_Probe+0xde>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d019      	beq.n	800880e <LIS2MDL_0_Probe+0xde>
 80087da:	7abb      	ldrb	r3, [r7, #10]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d116      	bne.n	800880e <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80087e0:	4b22      	ldr	r3, [pc, #136]	; (800886c <LIS2MDL_0_Probe+0x13c>)
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	4a22      	ldr	r2, [pc, #136]	; (8008870 <LIS2MDL_0_Probe+0x140>)
 80087e6:	3306      	adds	r3, #6
 80087e8:	4922      	ldr	r1, [pc, #136]	; (8008874 <LIS2MDL_0_Probe+0x144>)
 80087ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 80087ee:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <LIS2MDL_0_Probe+0x134>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a1a      	ldr	r2, [pc, #104]	; (8008860 <LIS2MDL_0_Probe+0x130>)
 80087f6:	6892      	ldr	r2, [r2, #8]
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008802:	f06f 0304 	mvn.w	r3, #4
 8008806:	647b      	str	r3, [r7, #68]	; 0x44
 8008808:	e001      	b.n	800880e <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800880a:	2300      	movs	r3, #0
 800880c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800880e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008810:	2b00      	cmp	r3, #0
 8008812:	d107      	bne.n	8008824 <LIS2MDL_0_Probe+0xf4>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800881e:	f06f 0304 	mvn.w	r3, #4
 8008822:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008826:	2b00      	cmp	r3, #0
 8008828:	d107      	bne.n	800883a <LIS2MDL_0_Probe+0x10a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008834:	f06f 0304 	mvn.w	r3, #4
 8008838:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800883a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800883c:	4618      	mov	r0, r3
 800883e:	3748      	adds	r7, #72	; 0x48
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	0800e49d 	.word	0x0800e49d
 8008848:	0800e519 	.word	0x0800e519
 800884c:	0800e5cd 	.word	0x0800e5cd
 8008850:	0800e569 	.word	0x0800e569
 8008854:	0800e631 	.word	0x0800e631
 8008858:	20001c44 	.word	0x20001c44
 800885c:	20001bd4 	.word	0x20001bd4
 8008860:	20001b98 	.word	0x20001b98
 8008864:	20001bc8 	.word	0x20001bc8
 8008868:	2000122c 	.word	0x2000122c
 800886c:	20001328 	.word	0x20001328
 8008870:	20001ba4 	.word	0x20001ba4
 8008874:	2000123c 	.word	0x2000123c

08008878 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008882:	4b0c      	ldr	r3, [pc, #48]	; (80088b4 <HAL_Init+0x3c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a0b      	ldr	r2, [pc, #44]	; (80088b4 <HAL_Init+0x3c>)
 8008888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800888c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800888e:	2003      	movs	r0, #3
 8008890:	f000 f962 	bl	8008b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008894:	2000      	movs	r0, #0
 8008896:	f000 f80f 	bl	80088b8 <HAL_InitTick>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	71fb      	strb	r3, [r7, #7]
 80088a4:	e001      	b.n	80088aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80088a6:	f005 fbbd 	bl	800e024 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80088aa:	79fb      	ldrb	r3, [r7, #7]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	40022000 	.word	0x40022000

080088b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80088c4:	4b17      	ldr	r3, [pc, #92]	; (8008924 <HAL_InitTick+0x6c>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d023      	beq.n	8008914 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80088cc:	4b16      	ldr	r3, [pc, #88]	; (8008928 <HAL_InitTick+0x70>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b14      	ldr	r3, [pc, #80]	; (8008924 <HAL_InitTick+0x6c>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	4619      	mov	r1, r3
 80088d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088da:	fbb3 f3f1 	udiv	r3, r3, r1
 80088de:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f96d 	bl	8008bc2 <HAL_SYSTICK_Config>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10f      	bne.n	800890e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b0f      	cmp	r3, #15
 80088f2:	d809      	bhi.n	8008908 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088f4:	2200      	movs	r2, #0
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	f000 f937 	bl	8008b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008900:	4a0a      	ldr	r2, [pc, #40]	; (800892c <HAL_InitTick+0x74>)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	e007      	b.n	8008918 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	73fb      	strb	r3, [r7, #15]
 800890c:	e004      	b.n	8008918 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	73fb      	strb	r3, [r7, #15]
 8008912:	e001      	b.n	8008918 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20001340 	.word	0x20001340
 8008928:	20001350 	.word	0x20001350
 800892c:	2000133c 	.word	0x2000133c

08008930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008930:	b480      	push	{r7}
 8008932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008934:	4b06      	ldr	r3, [pc, #24]	; (8008950 <HAL_IncTick+0x20>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	461a      	mov	r2, r3
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <HAL_IncTick+0x24>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4413      	add	r3, r2
 8008940:	4a04      	ldr	r2, [pc, #16]	; (8008954 <HAL_IncTick+0x24>)
 8008942:	6013      	str	r3, [r2, #0]
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	20001340 	.word	0x20001340
 8008954:	20001c70 	.word	0x20001c70

08008958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008958:	b480      	push	{r7}
 800895a:	af00      	add	r7, sp, #0
  return uwTick;
 800895c:	4b03      	ldr	r3, [pc, #12]	; (800896c <HAL_GetTick+0x14>)
 800895e:	681b      	ldr	r3, [r3, #0]
}
 8008960:	4618      	mov	r0, r3
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	20001c70 	.word	0x20001c70

08008970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008978:	f7ff ffee 	bl	8008958 <HAL_GetTick>
 800897c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008988:	d005      	beq.n	8008996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800898a:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <HAL_Delay+0x44>)
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008996:	bf00      	nop
 8008998:	f7ff ffde 	bl	8008958 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d8f7      	bhi.n	8008998 <HAL_Delay+0x28>
  {
  }
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	20001340 	.word	0x20001340

080089b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089c8:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <__NVIC_SetPriorityGrouping+0x44>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089d4:	4013      	ands	r3, r2
 80089d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089ea:	4a04      	ldr	r2, [pc, #16]	; (80089fc <__NVIC_SetPriorityGrouping+0x44>)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	60d3      	str	r3, [r2, #12]
}
 80089f0:	bf00      	nop
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	e000ed00 	.word	0xe000ed00

08008a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a04:	4b04      	ldr	r3, [pc, #16]	; (8008a18 <__NVIC_GetPriorityGrouping+0x18>)
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	0a1b      	lsrs	r3, r3, #8
 8008a0a:	f003 0307 	and.w	r3, r3, #7
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	e000ed00 	.word	0xe000ed00

08008a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	db0b      	blt.n	8008a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	f003 021f 	and.w	r2, r3, #31
 8008a34:	4907      	ldr	r1, [pc, #28]	; (8008a54 <__NVIC_EnableIRQ+0x38>)
 8008a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a3a:	095b      	lsrs	r3, r3, #5
 8008a3c:	2001      	movs	r0, #1
 8008a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8008a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	e000e100 	.word	0xe000e100

08008a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	6039      	str	r1, [r7, #0]
 8008a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	db0a      	blt.n	8008a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	490c      	ldr	r1, [pc, #48]	; (8008aa4 <__NVIC_SetPriority+0x4c>)
 8008a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a76:	0112      	lsls	r2, r2, #4
 8008a78:	b2d2      	uxtb	r2, r2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a80:	e00a      	b.n	8008a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	4908      	ldr	r1, [pc, #32]	; (8008aa8 <__NVIC_SetPriority+0x50>)
 8008a88:	79fb      	ldrb	r3, [r7, #7]
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	3b04      	subs	r3, #4
 8008a90:	0112      	lsls	r2, r2, #4
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	440b      	add	r3, r1
 8008a96:	761a      	strb	r2, [r3, #24]
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	e000e100 	.word	0xe000e100
 8008aa8:	e000ed00 	.word	0xe000ed00

08008aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b089      	sub	sp, #36	; 0x24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	f1c3 0307 	rsb	r3, r3, #7
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	bf28      	it	cs
 8008aca:	2304      	movcs	r3, #4
 8008acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	2b06      	cmp	r3, #6
 8008ad4:	d902      	bls.n	8008adc <NVIC_EncodePriority+0x30>
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	3b03      	subs	r3, #3
 8008ada:	e000      	b.n	8008ade <NVIC_EncodePriority+0x32>
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	43da      	mvns	r2, r3
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	401a      	ands	r2, r3
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008af4:	f04f 31ff 	mov.w	r1, #4294967295
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	fa01 f303 	lsl.w	r3, r1, r3
 8008afe:	43d9      	mvns	r1, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b04:	4313      	orrs	r3, r2
         );
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3724      	adds	r7, #36	; 0x24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
	...

08008b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b24:	d301      	bcc.n	8008b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b26:	2301      	movs	r3, #1
 8008b28:	e00f      	b.n	8008b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b2a:	4a0a      	ldr	r2, [pc, #40]	; (8008b54 <SysTick_Config+0x40>)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b32:	210f      	movs	r1, #15
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	f7ff ff8e 	bl	8008a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b3c:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <SysTick_Config+0x40>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b42:	4b04      	ldr	r3, [pc, #16]	; (8008b54 <SysTick_Config+0x40>)
 8008b44:	2207      	movs	r2, #7
 8008b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	e000e010 	.word	0xe000e010

08008b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff ff29 	bl	80089b8 <__NVIC_SetPriorityGrouping>
}
 8008b66:	bf00      	nop
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b086      	sub	sp, #24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	4603      	mov	r3, r0
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008b80:	f7ff ff3e 	bl	8008a00 <__NVIC_GetPriorityGrouping>
 8008b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	68b9      	ldr	r1, [r7, #8]
 8008b8a:	6978      	ldr	r0, [r7, #20]
 8008b8c:	f7ff ff8e 	bl	8008aac <NVIC_EncodePriority>
 8008b90:	4602      	mov	r2, r0
 8008b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff ff5d 	bl	8008a58 <__NVIC_SetPriority>
}
 8008b9e:	bf00      	nop
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	4603      	mov	r3, r0
 8008bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff ff31 	bl	8008a1c <__NVIC_EnableIRQ>
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7ff ffa2 	bl	8008b14 <SysTick_Config>
 8008bd0:	4603      	mov	r3, r0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e054      	b.n	8008c98 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7f5b      	ldrb	r3, [r3, #29]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d105      	bne.n	8008c04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f005 fa34 	bl	800e06c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2202      	movs	r2, #2
 8008c08:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	791b      	ldrb	r3, [r3, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10c      	bne.n	8008c2c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a22      	ldr	r2, [pc, #136]	; (8008ca0 <HAL_CRC_Init+0xc4>)
 8008c18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 0218 	bic.w	r2, r2, #24
 8008c28:	609a      	str	r2, [r3, #8]
 8008c2a:	e00c      	b.n	8008c46 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6899      	ldr	r1, [r3, #8]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	461a      	mov	r2, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f834 	bl	8008ca4 <HAL_CRCEx_Polynomial_Set>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e028      	b.n	8008c98 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	795b      	ldrb	r3, [r3, #5]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f04f 32ff 	mov.w	r2, #4294967295
 8008c56:	611a      	str	r2, [r3, #16]
 8008c58:	e004      	b.n	8008c64 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6912      	ldr	r2, [r2, #16]
 8008c62:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695a      	ldr	r2, [r3, #20]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699a      	ldr	r2, [r3, #24]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	04c11db7 	.word	0x04c11db7

08008ca4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008cb4:	231f      	movs	r3, #31
 8008cb6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008cb8:	bf00      	nop
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1e5a      	subs	r2, r3, #1
 8008cbe:	613a      	str	r2, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d009      	beq.n	8008cd8 <HAL_CRCEx_Polynomial_Set+0x34>
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f003 031f 	and.w	r3, r3, #31
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d0f0      	beq.n	8008cba <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b18      	cmp	r3, #24
 8008cdc:	d846      	bhi.n	8008d6c <HAL_CRCEx_Polynomial_Set+0xc8>
 8008cde:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008d73 	.word	0x08008d73
 8008ce8:	08008d6d 	.word	0x08008d6d
 8008cec:	08008d6d 	.word	0x08008d6d
 8008cf0:	08008d6d 	.word	0x08008d6d
 8008cf4:	08008d6d 	.word	0x08008d6d
 8008cf8:	08008d6d 	.word	0x08008d6d
 8008cfc:	08008d6d 	.word	0x08008d6d
 8008d00:	08008d6d 	.word	0x08008d6d
 8008d04:	08008d61 	.word	0x08008d61
 8008d08:	08008d6d 	.word	0x08008d6d
 8008d0c:	08008d6d 	.word	0x08008d6d
 8008d10:	08008d6d 	.word	0x08008d6d
 8008d14:	08008d6d 	.word	0x08008d6d
 8008d18:	08008d6d 	.word	0x08008d6d
 8008d1c:	08008d6d 	.word	0x08008d6d
 8008d20:	08008d6d 	.word	0x08008d6d
 8008d24:	08008d55 	.word	0x08008d55
 8008d28:	08008d6d 	.word	0x08008d6d
 8008d2c:	08008d6d 	.word	0x08008d6d
 8008d30:	08008d6d 	.word	0x08008d6d
 8008d34:	08008d6d 	.word	0x08008d6d
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008d6d 	.word	0x08008d6d
 8008d40:	08008d6d 	.word	0x08008d6d
 8008d44:	08008d49 	.word	0x08008d49
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2b06      	cmp	r3, #6
 8008d4c:	d913      	bls.n	8008d76 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008d52:	e010      	b.n	8008d76 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b07      	cmp	r3, #7
 8008d58:	d90f      	bls.n	8008d7a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008d5e:	e00c      	b.n	8008d7a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	2b0f      	cmp	r3, #15
 8008d64:	d90b      	bls.n	8008d7e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008d6a:	e008      	b.n	8008d7e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d70:	e006      	b.n	8008d80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008d72:	bf00      	nop
 8008d74:	e004      	b.n	8008d80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008d76:	bf00      	nop
 8008d78:	e002      	b.n	8008d80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008d7e:	bf00      	nop
  }
  if (status == HAL_OK)
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10d      	bne.n	8008da2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f023 0118 	bic.w	r1, r3, #24
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	371c      	adds	r7, #28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e098      	b.n	8008ef4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	4b4d      	ldr	r3, [pc, #308]	; (8008f00 <HAL_DMA_Init+0x150>)
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d80f      	bhi.n	8008dee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	4b4b      	ldr	r3, [pc, #300]	; (8008f04 <HAL_DMA_Init+0x154>)
 8008dd6:	4413      	add	r3, r2
 8008dd8:	4a4b      	ldr	r2, [pc, #300]	; (8008f08 <HAL_DMA_Init+0x158>)
 8008dda:	fba2 2303 	umull	r2, r3, r2, r3
 8008dde:	091b      	lsrs	r3, r3, #4
 8008de0:	009a      	lsls	r2, r3, #2
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a48      	ldr	r2, [pc, #288]	; (8008f0c <HAL_DMA_Init+0x15c>)
 8008dea:	641a      	str	r2, [r3, #64]	; 0x40
 8008dec:	e00e      	b.n	8008e0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	4b46      	ldr	r3, [pc, #280]	; (8008f10 <HAL_DMA_Init+0x160>)
 8008df6:	4413      	add	r3, r2
 8008df8:	4a43      	ldr	r2, [pc, #268]	; (8008f08 <HAL_DMA_Init+0x158>)
 8008dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfe:	091b      	lsrs	r3, r3, #4
 8008e00:	009a      	lsls	r2, r3, #2
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a42      	ldr	r2, [pc, #264]	; (8008f14 <HAL_DMA_Init+0x164>)
 8008e0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e66:	d039      	beq.n	8008edc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	4a27      	ldr	r2, [pc, #156]	; (8008f0c <HAL_DMA_Init+0x15c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d11a      	bne.n	8008ea8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008e72:	4b29      	ldr	r3, [pc, #164]	; (8008f18 <HAL_DMA_Init+0x168>)
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7a:	f003 031c 	and.w	r3, r3, #28
 8008e7e:	210f      	movs	r1, #15
 8008e80:	fa01 f303 	lsl.w	r3, r1, r3
 8008e84:	43db      	mvns	r3, r3
 8008e86:	4924      	ldr	r1, [pc, #144]	; (8008f18 <HAL_DMA_Init+0x168>)
 8008e88:	4013      	ands	r3, r2
 8008e8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008e8c:	4b22      	ldr	r3, [pc, #136]	; (8008f18 <HAL_DMA_Init+0x168>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6859      	ldr	r1, [r3, #4]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e98:	f003 031c 	and.w	r3, r3, #28
 8008e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea0:	491d      	ldr	r1, [pc, #116]	; (8008f18 <HAL_DMA_Init+0x168>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	600b      	str	r3, [r1, #0]
 8008ea6:	e019      	b.n	8008edc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008ea8:	4b1c      	ldr	r3, [pc, #112]	; (8008f1c <HAL_DMA_Init+0x16c>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb0:	f003 031c 	and.w	r3, r3, #28
 8008eb4:	210f      	movs	r1, #15
 8008eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eba:	43db      	mvns	r3, r3
 8008ebc:	4917      	ldr	r1, [pc, #92]	; (8008f1c <HAL_DMA_Init+0x16c>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008ec2:	4b16      	ldr	r3, [pc, #88]	; (8008f1c <HAL_DMA_Init+0x16c>)
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6859      	ldr	r1, [r3, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	f003 031c 	and.w	r3, r3, #28
 8008ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed6:	4911      	ldr	r1, [pc, #68]	; (8008f1c <HAL_DMA_Init+0x16c>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	40020407 	.word	0x40020407
 8008f04:	bffdfff8 	.word	0xbffdfff8
 8008f08:	cccccccd 	.word	0xcccccccd
 8008f0c:	40020000 	.word	0x40020000
 8008f10:	bffdfbf8 	.word	0xbffdfbf8
 8008f14:	40020400 	.word	0x40020400
 8008f18:	400200a8 	.word	0x400200a8
 8008f1c:	400204a8 	.word	0x400204a8

08008f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d101      	bne.n	8008f40 <HAL_DMA_Start_IT+0x20>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e04b      	b.n	8008fd8 <HAL_DMA_Start_IT+0xb8>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d13a      	bne.n	8008fca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0201 	bic.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 f8e0 	bl	800913e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d008      	beq.n	8008f98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f042 020e 	orr.w	r2, r2, #14
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	e00f      	b.n	8008fb8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0204 	bic.w	r2, r2, #4
 8008fa6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 020a 	orr.w	r2, r2, #10
 8008fb6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0201 	orr.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e005      	b.n	8008fd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffc:	f003 031c 	and.w	r3, r3, #28
 8009000:	2204      	movs	r2, #4
 8009002:	409a      	lsls	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4013      	ands	r3, r2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d026      	beq.n	800905a <HAL_DMA_IRQHandler+0x7a>
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f003 0304 	and.w	r3, r3, #4
 8009012:	2b00      	cmp	r3, #0
 8009014:	d021      	beq.n	800905a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d107      	bne.n	8009034 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0204 	bic.w	r2, r2, #4
 8009032:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009038:	f003 021c 	and.w	r2, r3, #28
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	2104      	movs	r1, #4
 8009042:	fa01 f202 	lsl.w	r2, r1, r2
 8009046:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904c:	2b00      	cmp	r3, #0
 800904e:	d071      	beq.n	8009134 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009058:	e06c      	b.n	8009134 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	f003 031c 	and.w	r3, r3, #28
 8009062:	2202      	movs	r2, #2
 8009064:	409a      	lsls	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4013      	ands	r3, r2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d02e      	beq.n	80090cc <HAL_DMA_IRQHandler+0xec>
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d029      	beq.n	80090cc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0320 	and.w	r3, r3, #32
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10b      	bne.n	800909e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 020a 	bic.w	r2, r2, #10
 8009094:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a2:	f003 021c 	and.w	r2, r3, #28
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	2102      	movs	r1, #2
 80090ac:	fa01 f202 	lsl.w	r2, r1, r2
 80090b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d038      	beq.n	8009134 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80090ca:	e033      	b.n	8009134 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d0:	f003 031c 	and.w	r3, r3, #28
 80090d4:	2208      	movs	r2, #8
 80090d6:	409a      	lsls	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4013      	ands	r3, r2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d02a      	beq.n	8009136 <HAL_DMA_IRQHandler+0x156>
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f003 0308 	and.w	r3, r3, #8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d025      	beq.n	8009136 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 020e 	bic.w	r2, r2, #14
 80090f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fe:	f003 021c 	and.w	r2, r3, #28
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	2101      	movs	r1, #1
 8009108:	fa01 f202 	lsl.w	r2, r1, r2
 800910c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009134:	bf00      	nop
 8009136:	bf00      	nop
}
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800913e:	b480      	push	{r7}
 8009140:	b085      	sub	sp, #20
 8009142:	af00      	add	r7, sp, #0
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	607a      	str	r2, [r7, #4]
 800914a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009150:	f003 021c 	and.w	r2, r3, #28
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009158:	2101      	movs	r1, #1
 800915a:	fa01 f202 	lsl.w	r2, r1, r2
 800915e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b10      	cmp	r3, #16
 800916e:	d108      	bne.n	8009182 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009180:	e007      	b.n	8009192 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	60da      	str	r2, [r3, #12]
}
 8009192:	bf00      	nop
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
	...

080091a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091aa:	2300      	movs	r3, #0
 80091ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091ae:	e17f      	b.n	80094b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	2101      	movs	r1, #1
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	fa01 f303 	lsl.w	r3, r1, r3
 80091bc:	4013      	ands	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 8171 	beq.w	80094aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f003 0303 	and.w	r3, r3, #3
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d005      	beq.n	80091e0 <HAL_GPIO_Init+0x40>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f003 0303 	and.w	r3, r3, #3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d130      	bne.n	8009242 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	2203      	movs	r2, #3
 80091ec:	fa02 f303 	lsl.w	r3, r2, r3
 80091f0:	43db      	mvns	r3, r3
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	4013      	ands	r3, r2
 80091f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	fa02 f303 	lsl.w	r3, r2, r3
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009216:	2201      	movs	r2, #1
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	fa02 f303 	lsl.w	r3, r2, r3
 800921e:	43db      	mvns	r3, r3
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4013      	ands	r3, r2
 8009224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	091b      	lsrs	r3, r3, #4
 800922c:	f003 0201 	and.w	r2, r3, #1
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	fa02 f303 	lsl.w	r3, r2, r3
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	2b03      	cmp	r3, #3
 800924c:	d118      	bne.n	8009280 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009254:	2201      	movs	r2, #1
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	fa02 f303 	lsl.w	r3, r2, r3
 800925c:	43db      	mvns	r3, r3
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	4013      	ands	r3, r2
 8009262:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	08db      	lsrs	r3, r3, #3
 800926a:	f003 0201 	and.w	r2, r3, #1
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	fa02 f303 	lsl.w	r3, r2, r3
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	4313      	orrs	r3, r2
 8009278:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f003 0303 	and.w	r3, r3, #3
 8009288:	2b03      	cmp	r3, #3
 800928a:	d017      	beq.n	80092bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	2203      	movs	r2, #3
 8009298:	fa02 f303 	lsl.w	r3, r2, r3
 800929c:	43db      	mvns	r3, r3
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	4013      	ands	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d123      	bne.n	8009310 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	08da      	lsrs	r2, r3, #3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	3208      	adds	r2, #8
 80092d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	220f      	movs	r2, #15
 80092e0:	fa02 f303 	lsl.w	r3, r2, r3
 80092e4:	43db      	mvns	r3, r3
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	4013      	ands	r3, r2
 80092ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	691a      	ldr	r2, [r3, #16]
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	fa02 f303 	lsl.w	r3, r2, r3
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	4313      	orrs	r3, r2
 8009300:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	08da      	lsrs	r2, r3, #3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3208      	adds	r2, #8
 800930a:	6939      	ldr	r1, [r7, #16]
 800930c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	2203      	movs	r2, #3
 800931c:	fa02 f303 	lsl.w	r3, r2, r3
 8009320:	43db      	mvns	r3, r3
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	4013      	ands	r3, r2
 8009326:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f003 0203 	and.w	r2, r3, #3
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	fa02 f303 	lsl.w	r3, r2, r3
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4313      	orrs	r3, r2
 800933c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 80ac 	beq.w	80094aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009352:	4b5f      	ldr	r3, [pc, #380]	; (80094d0 <HAL_GPIO_Init+0x330>)
 8009354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009356:	4a5e      	ldr	r2, [pc, #376]	; (80094d0 <HAL_GPIO_Init+0x330>)
 8009358:	f043 0301 	orr.w	r3, r3, #1
 800935c:	6613      	str	r3, [r2, #96]	; 0x60
 800935e:	4b5c      	ldr	r3, [pc, #368]	; (80094d0 <HAL_GPIO_Init+0x330>)
 8009360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	60bb      	str	r3, [r7, #8]
 8009368:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800936a:	4a5a      	ldr	r2, [pc, #360]	; (80094d4 <HAL_GPIO_Init+0x334>)
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	089b      	lsrs	r3, r3, #2
 8009370:	3302      	adds	r3, #2
 8009372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009376:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	220f      	movs	r2, #15
 8009382:	fa02 f303 	lsl.w	r3, r2, r3
 8009386:	43db      	mvns	r3, r3
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	4013      	ands	r3, r2
 800938c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009394:	d025      	beq.n	80093e2 <HAL_GPIO_Init+0x242>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a4f      	ldr	r2, [pc, #316]	; (80094d8 <HAL_GPIO_Init+0x338>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d01f      	beq.n	80093de <HAL_GPIO_Init+0x23e>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a4e      	ldr	r2, [pc, #312]	; (80094dc <HAL_GPIO_Init+0x33c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d019      	beq.n	80093da <HAL_GPIO_Init+0x23a>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a4d      	ldr	r2, [pc, #308]	; (80094e0 <HAL_GPIO_Init+0x340>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d013      	beq.n	80093d6 <HAL_GPIO_Init+0x236>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a4c      	ldr	r2, [pc, #304]	; (80094e4 <HAL_GPIO_Init+0x344>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00d      	beq.n	80093d2 <HAL_GPIO_Init+0x232>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a4b      	ldr	r2, [pc, #300]	; (80094e8 <HAL_GPIO_Init+0x348>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d007      	beq.n	80093ce <HAL_GPIO_Init+0x22e>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a4a      	ldr	r2, [pc, #296]	; (80094ec <HAL_GPIO_Init+0x34c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d101      	bne.n	80093ca <HAL_GPIO_Init+0x22a>
 80093c6:	2306      	movs	r3, #6
 80093c8:	e00c      	b.n	80093e4 <HAL_GPIO_Init+0x244>
 80093ca:	2307      	movs	r3, #7
 80093cc:	e00a      	b.n	80093e4 <HAL_GPIO_Init+0x244>
 80093ce:	2305      	movs	r3, #5
 80093d0:	e008      	b.n	80093e4 <HAL_GPIO_Init+0x244>
 80093d2:	2304      	movs	r3, #4
 80093d4:	e006      	b.n	80093e4 <HAL_GPIO_Init+0x244>
 80093d6:	2303      	movs	r3, #3
 80093d8:	e004      	b.n	80093e4 <HAL_GPIO_Init+0x244>
 80093da:	2302      	movs	r3, #2
 80093dc:	e002      	b.n	80093e4 <HAL_GPIO_Init+0x244>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <HAL_GPIO_Init+0x244>
 80093e2:	2300      	movs	r3, #0
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	f002 0203 	and.w	r2, r2, #3
 80093ea:	0092      	lsls	r2, r2, #2
 80093ec:	4093      	lsls	r3, r2
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80093f4:	4937      	ldr	r1, [pc, #220]	; (80094d4 <HAL_GPIO_Init+0x334>)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	089b      	lsrs	r3, r3, #2
 80093fa:	3302      	adds	r3, #2
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009402:	4b3b      	ldr	r3, [pc, #236]	; (80094f0 <HAL_GPIO_Init+0x350>)
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	43db      	mvns	r3, r3
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	4013      	ands	r3, r2
 8009410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009426:	4a32      	ldr	r2, [pc, #200]	; (80094f0 <HAL_GPIO_Init+0x350>)
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800942c:	4b30      	ldr	r3, [pc, #192]	; (80094f0 <HAL_GPIO_Init+0x350>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	43db      	mvns	r3, r3
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	4013      	ands	r3, r2
 800943a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d003      	beq.n	8009450 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4313      	orrs	r3, r2
 800944e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009450:	4a27      	ldr	r2, [pc, #156]	; (80094f0 <HAL_GPIO_Init+0x350>)
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009456:	4b26      	ldr	r3, [pc, #152]	; (80094f0 <HAL_GPIO_Init+0x350>)
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	43db      	mvns	r3, r3
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	4013      	ands	r3, r2
 8009464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4313      	orrs	r3, r2
 8009478:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800947a:	4a1d      	ldr	r2, [pc, #116]	; (80094f0 <HAL_GPIO_Init+0x350>)
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009480:	4b1b      	ldr	r3, [pc, #108]	; (80094f0 <HAL_GPIO_Init+0x350>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	43db      	mvns	r3, r3
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4013      	ands	r3, r2
 800948e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80094a4:	4a12      	ldr	r2, [pc, #72]	; (80094f0 <HAL_GPIO_Init+0x350>)
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	3301      	adds	r3, #1
 80094ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	fa22 f303 	lsr.w	r3, r2, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f47f ae78 	bne.w	80091b0 <HAL_GPIO_Init+0x10>
  }
}
 80094c0:	bf00      	nop
 80094c2:	bf00      	nop
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	40021000 	.word	0x40021000
 80094d4:	40010000 	.word	0x40010000
 80094d8:	48000400 	.word	0x48000400
 80094dc:	48000800 	.word	0x48000800
 80094e0:	48000c00 	.word	0x48000c00
 80094e4:	48001000 	.word	0x48001000
 80094e8:	48001400 	.word	0x48001400
 80094ec:	48001800 	.word	0x48001800
 80094f0:	40010400 	.word	0x40010400

080094f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80094fe:	2300      	movs	r3, #0
 8009500:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009502:	e0cd      	b.n	80096a0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009504:	2201      	movs	r2, #1
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	fa02 f303 	lsl.w	r3, r2, r3
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	4013      	ands	r3, r2
 8009510:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80c0 	beq.w	800969a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800951a:	4a68      	ldr	r2, [pc, #416]	; (80096bc <HAL_GPIO_DeInit+0x1c8>)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	089b      	lsrs	r3, r3, #2
 8009520:	3302      	adds	r3, #2
 8009522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009526:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f003 0303 	and.w	r3, r3, #3
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	220f      	movs	r2, #15
 8009532:	fa02 f303 	lsl.w	r3, r2, r3
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	4013      	ands	r3, r2
 800953a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009542:	d025      	beq.n	8009590 <HAL_GPIO_DeInit+0x9c>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a5e      	ldr	r2, [pc, #376]	; (80096c0 <HAL_GPIO_DeInit+0x1cc>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d01f      	beq.n	800958c <HAL_GPIO_DeInit+0x98>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a5d      	ldr	r2, [pc, #372]	; (80096c4 <HAL_GPIO_DeInit+0x1d0>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d019      	beq.n	8009588 <HAL_GPIO_DeInit+0x94>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a5c      	ldr	r2, [pc, #368]	; (80096c8 <HAL_GPIO_DeInit+0x1d4>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d013      	beq.n	8009584 <HAL_GPIO_DeInit+0x90>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a5b      	ldr	r2, [pc, #364]	; (80096cc <HAL_GPIO_DeInit+0x1d8>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00d      	beq.n	8009580 <HAL_GPIO_DeInit+0x8c>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a5a      	ldr	r2, [pc, #360]	; (80096d0 <HAL_GPIO_DeInit+0x1dc>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d007      	beq.n	800957c <HAL_GPIO_DeInit+0x88>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a59      	ldr	r2, [pc, #356]	; (80096d4 <HAL_GPIO_DeInit+0x1e0>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d101      	bne.n	8009578 <HAL_GPIO_DeInit+0x84>
 8009574:	2306      	movs	r3, #6
 8009576:	e00c      	b.n	8009592 <HAL_GPIO_DeInit+0x9e>
 8009578:	2307      	movs	r3, #7
 800957a:	e00a      	b.n	8009592 <HAL_GPIO_DeInit+0x9e>
 800957c:	2305      	movs	r3, #5
 800957e:	e008      	b.n	8009592 <HAL_GPIO_DeInit+0x9e>
 8009580:	2304      	movs	r3, #4
 8009582:	e006      	b.n	8009592 <HAL_GPIO_DeInit+0x9e>
 8009584:	2303      	movs	r3, #3
 8009586:	e004      	b.n	8009592 <HAL_GPIO_DeInit+0x9e>
 8009588:	2302      	movs	r3, #2
 800958a:	e002      	b.n	8009592 <HAL_GPIO_DeInit+0x9e>
 800958c:	2301      	movs	r3, #1
 800958e:	e000      	b.n	8009592 <HAL_GPIO_DeInit+0x9e>
 8009590:	2300      	movs	r3, #0
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	f002 0203 	and.w	r2, r2, #3
 8009598:	0092      	lsls	r2, r2, #2
 800959a:	4093      	lsls	r3, r2
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d132      	bne.n	8009608 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80095a2:	4b4d      	ldr	r3, [pc, #308]	; (80096d8 <HAL_GPIO_DeInit+0x1e4>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	43db      	mvns	r3, r3
 80095aa:	494b      	ldr	r1, [pc, #300]	; (80096d8 <HAL_GPIO_DeInit+0x1e4>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80095b0:	4b49      	ldr	r3, [pc, #292]	; (80096d8 <HAL_GPIO_DeInit+0x1e4>)
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	43db      	mvns	r3, r3
 80095b8:	4947      	ldr	r1, [pc, #284]	; (80096d8 <HAL_GPIO_DeInit+0x1e4>)
 80095ba:	4013      	ands	r3, r2
 80095bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80095be:	4b46      	ldr	r3, [pc, #280]	; (80096d8 <HAL_GPIO_DeInit+0x1e4>)
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	43db      	mvns	r3, r3
 80095c6:	4944      	ldr	r1, [pc, #272]	; (80096d8 <HAL_GPIO_DeInit+0x1e4>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80095cc:	4b42      	ldr	r3, [pc, #264]	; (80096d8 <HAL_GPIO_DeInit+0x1e4>)
 80095ce:	689a      	ldr	r2, [r3, #8]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	43db      	mvns	r3, r3
 80095d4:	4940      	ldr	r1, [pc, #256]	; (80096d8 <HAL_GPIO_DeInit+0x1e4>)
 80095d6:	4013      	ands	r3, r2
 80095d8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f003 0303 	and.w	r3, r3, #3
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	220f      	movs	r2, #15
 80095e4:	fa02 f303 	lsl.w	r3, r2, r3
 80095e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80095ea:	4a34      	ldr	r2, [pc, #208]	; (80096bc <HAL_GPIO_DeInit+0x1c8>)
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	089b      	lsrs	r3, r3, #2
 80095f0:	3302      	adds	r3, #2
 80095f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	43da      	mvns	r2, r3
 80095fa:	4830      	ldr	r0, [pc, #192]	; (80096bc <HAL_GPIO_DeInit+0x1c8>)
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	089b      	lsrs	r3, r3, #2
 8009600:	400a      	ands	r2, r1
 8009602:	3302      	adds	r3, #2
 8009604:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	2103      	movs	r1, #3
 8009612:	fa01 f303 	lsl.w	r3, r1, r3
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	08da      	lsrs	r2, r3, #3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3208      	adds	r2, #8
 8009624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	220f      	movs	r2, #15
 8009632:	fa02 f303 	lsl.w	r3, r2, r3
 8009636:	43db      	mvns	r3, r3
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	08d2      	lsrs	r2, r2, #3
 800963c:	4019      	ands	r1, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3208      	adds	r2, #8
 8009642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	2103      	movs	r1, #3
 8009650:	fa01 f303 	lsl.w	r3, r1, r3
 8009654:	43db      	mvns	r3, r3
 8009656:	401a      	ands	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	2101      	movs	r1, #1
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	fa01 f303 	lsl.w	r3, r1, r3
 8009668:	43db      	mvns	r3, r3
 800966a:	401a      	ands	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	2103      	movs	r1, #3
 800967a:	fa01 f303 	lsl.w	r3, r1, r3
 800967e:	43db      	mvns	r3, r3
 8009680:	401a      	ands	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968a:	2101      	movs	r1, #1
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	fa01 f303 	lsl.w	r3, r1, r3
 8009692:	43db      	mvns	r3, r3
 8009694:	401a      	ands	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	3301      	adds	r3, #1
 800969e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	fa22 f303 	lsr.w	r3, r2, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f47f af2b 	bne.w	8009504 <HAL_GPIO_DeInit+0x10>
  }
}
 80096ae:	bf00      	nop
 80096b0:	bf00      	nop
 80096b2:	371c      	adds	r7, #28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	40010000 	.word	0x40010000
 80096c0:	48000400 	.word	0x48000400
 80096c4:	48000800 	.word	0x48000800
 80096c8:	48000c00 	.word	0x48000c00
 80096cc:	48001000 	.word	0x48001000
 80096d0:	48001400 	.word	0x48001400
 80096d4:	48001800 	.word	0x48001800
 80096d8:	40010400 	.word	0x40010400

080096dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	807b      	strh	r3, [r7, #2]
 80096e8:	4613      	mov	r3, r2
 80096ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80096ec:	787b      	ldrb	r3, [r7, #1]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80096f2:	887a      	ldrh	r2, [r7, #2]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80096f8:	e002      	b.n	8009700 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80096fa:	887a      	ldrh	r2, [r7, #2]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009716:	4b08      	ldr	r3, [pc, #32]	; (8009738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009718:	695a      	ldr	r2, [r3, #20]
 800971a:	88fb      	ldrh	r3, [r7, #6]
 800971c:	4013      	ands	r3, r2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d006      	beq.n	8009730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009722:	4a05      	ldr	r2, [pc, #20]	; (8009738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009724:	88fb      	ldrh	r3, [r7, #6]
 8009726:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009728:	88fb      	ldrh	r3, [r7, #6]
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f806 	bl	800973c <HAL_GPIO_EXTI_Callback>
  }
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	40010400 	.word	0x40010400

0800973c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009746:	bf00      	nop
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e081      	b.n	8009868 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f8a8 	bl	80098ce <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2224      	movs	r2, #36	; 0x24
 8009782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0201 	bic.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80097a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d107      	bne.n	80097cc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097c8:	609a      	str	r2, [r3, #8]
 80097ca:	e006      	b.n	80097da <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80097d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d104      	bne.n	80097ec <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	6812      	ldr	r2, [r2, #0]
 80097f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80097fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097fe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800980e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691a      	ldr	r2, [r3, #16]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	69d9      	ldr	r1, [r3, #28]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1a      	ldr	r2, [r3, #32]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f042 0201 	orr.w	r2, r2, #1
 8009848:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e021      	b.n	80098c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2224      	movs	r2, #36	; 0x24
 8009886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0201 	bic.w	r2, r2, #1
 8009898:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f821 	bl	80098e2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b083      	sub	sp, #12
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
	...

080098f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	4608      	mov	r0, r1
 8009902:	4611      	mov	r1, r2
 8009904:	461a      	mov	r2, r3
 8009906:	4603      	mov	r3, r0
 8009908:	817b      	strh	r3, [r7, #10]
 800990a:	460b      	mov	r3, r1
 800990c:	813b      	strh	r3, [r7, #8]
 800990e:	4613      	mov	r3, r2
 8009910:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b20      	cmp	r3, #32
 800991c:	f040 80f9 	bne.w	8009b12 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <HAL_I2C_Mem_Write+0x34>
 8009926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009928:	2b00      	cmp	r3, #0
 800992a:	d105      	bne.n	8009938 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009932:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e0ed      	b.n	8009b14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800993e:	2b01      	cmp	r3, #1
 8009940:	d101      	bne.n	8009946 <HAL_I2C_Mem_Write+0x4e>
 8009942:	2302      	movs	r3, #2
 8009944:	e0e6      	b.n	8009b14 <HAL_I2C_Mem_Write+0x21c>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800994e:	f7ff f803 	bl	8008958 <HAL_GetTick>
 8009952:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2319      	movs	r3, #25
 800995a:	2201      	movs	r2, #1
 800995c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 fadd 	bl	8009f20 <I2C_WaitOnFlagUntilTimeout>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e0d1      	b.n	8009b14 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2221      	movs	r2, #33	; 0x21
 8009974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2240      	movs	r2, #64	; 0x40
 800997c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a3a      	ldr	r2, [r7, #32]
 800998a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009998:	88f8      	ldrh	r0, [r7, #6]
 800999a:	893a      	ldrh	r2, [r7, #8]
 800999c:	8979      	ldrh	r1, [r7, #10]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	4603      	mov	r3, r0
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 f9ed 	bl	8009d88 <I2C_RequestMemoryWrite>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e0a9      	b.n	8009b14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2bff      	cmp	r3, #255	; 0xff
 80099c8:	d90e      	bls.n	80099e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	8979      	ldrh	r1, [r7, #10]
 80099d8:	2300      	movs	r3, #0
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f000 fc45 	bl	800a270 <I2C_TransferConfig>
 80099e6:	e00f      	b.n	8009a08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	8979      	ldrh	r1, [r7, #10]
 80099fa:	2300      	movs	r3, #0
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fc34 	bl	800a270 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 fac7 	bl	8009fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e07b      	b.n	8009b14 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	781a      	ldrb	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a44:	3b01      	subs	r3, #1
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d034      	beq.n	8009ac0 <HAL_I2C_Mem_Write+0x1c8>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d130      	bne.n	8009ac0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a64:	2200      	movs	r2, #0
 8009a66:	2180      	movs	r1, #128	; 0x80
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 fa59 	bl	8009f20 <I2C_WaitOnFlagUntilTimeout>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e04d      	b.n	8009b14 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	2bff      	cmp	r3, #255	; 0xff
 8009a80:	d90e      	bls.n	8009aa0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	22ff      	movs	r2, #255	; 0xff
 8009a86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	8979      	ldrh	r1, [r7, #10]
 8009a90:	2300      	movs	r3, #0
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 fbe9 	bl	800a270 <I2C_TransferConfig>
 8009a9e:	e00f      	b.n	8009ac0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aae:	b2da      	uxtb	r2, r3
 8009ab0:	8979      	ldrh	r1, [r7, #10]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f000 fbd8 	bl	800a270 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d19e      	bne.n	8009a08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 faa6 	bl	800a020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e01a      	b.n	8009b14 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6859      	ldr	r1, [r3, #4]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	4b0a      	ldr	r3, [pc, #40]	; (8009b1c <HAL_I2C_Mem_Write+0x224>)
 8009af2:	400b      	ands	r3, r1
 8009af4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2220      	movs	r2, #32
 8009afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	e000      	b.n	8009b14 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009b12:	2302      	movs	r3, #2
  }
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3718      	adds	r7, #24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	fe00e800 	.word	0xfe00e800

08009b20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af02      	add	r7, sp, #8
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	4608      	mov	r0, r1
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4603      	mov	r3, r0
 8009b30:	817b      	strh	r3, [r7, #10]
 8009b32:	460b      	mov	r3, r1
 8009b34:	813b      	strh	r3, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b20      	cmp	r3, #32
 8009b44:	f040 80fd 	bne.w	8009d42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d002      	beq.n	8009b54 <HAL_I2C_Mem_Read+0x34>
 8009b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d105      	bne.n	8009b60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e0f1      	b.n	8009d44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <HAL_I2C_Mem_Read+0x4e>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	e0ea      	b.n	8009d44 <HAL_I2C_Mem_Read+0x224>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009b76:	f7fe feef 	bl	8008958 <HAL_GetTick>
 8009b7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	2319      	movs	r3, #25
 8009b82:	2201      	movs	r2, #1
 8009b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 f9c9 	bl	8009f20 <I2C_WaitOnFlagUntilTimeout>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e0d5      	b.n	8009d44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2222      	movs	r2, #34	; 0x22
 8009b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2240      	movs	r2, #64	; 0x40
 8009ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6a3a      	ldr	r2, [r7, #32]
 8009bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bc0:	88f8      	ldrh	r0, [r7, #6]
 8009bc2:	893a      	ldrh	r2, [r7, #8]
 8009bc4:	8979      	ldrh	r1, [r7, #10]
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	4603      	mov	r3, r0
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 f92d 	bl	8009e30 <I2C_RequestMemoryRead>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d005      	beq.n	8009be8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e0ad      	b.n	8009d44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2bff      	cmp	r3, #255	; 0xff
 8009bf0:	d90e      	bls.n	8009c10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	22ff      	movs	r2, #255	; 0xff
 8009bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	8979      	ldrh	r1, [r7, #10]
 8009c00:	4b52      	ldr	r3, [pc, #328]	; (8009d4c <HAL_I2C_Mem_Read+0x22c>)
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 fb31 	bl	800a270 <I2C_TransferConfig>
 8009c0e:	e00f      	b.n	8009c30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	8979      	ldrh	r1, [r7, #10]
 8009c22:	4b4a      	ldr	r3, [pc, #296]	; (8009d4c <HAL_I2C_Mem_Read+0x22c>)
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f000 fb20 	bl	800a270 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	2200      	movs	r2, #0
 8009c38:	2104      	movs	r1, #4
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 f970 	bl	8009f20 <I2C_WaitOnFlagUntilTimeout>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e07c      	b.n	8009d44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c54:	b2d2      	uxtb	r2, r2
 8009c56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c66:	3b01      	subs	r3, #1
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	3b01      	subs	r3, #1
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d034      	beq.n	8009cf0 <HAL_I2C_Mem_Read+0x1d0>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d130      	bne.n	8009cf0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c94:	2200      	movs	r2, #0
 8009c96:	2180      	movs	r1, #128	; 0x80
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 f941 	bl	8009f20 <I2C_WaitOnFlagUntilTimeout>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e04d      	b.n	8009d44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	2bff      	cmp	r3, #255	; 0xff
 8009cb0:	d90e      	bls.n	8009cd0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	22ff      	movs	r2, #255	; 0xff
 8009cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	8979      	ldrh	r1, [r7, #10]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 fad1 	bl	800a270 <I2C_TransferConfig>
 8009cce:	e00f      	b.n	8009cf0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	8979      	ldrh	r1, [r7, #10]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 fac0 	bl	800a270 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d19a      	bne.n	8009c30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f98e 	bl	800a020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e01a      	b.n	8009d44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2220      	movs	r2, #32
 8009d14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6859      	ldr	r1, [r3, #4]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <HAL_I2C_Mem_Read+0x230>)
 8009d22:	400b      	ands	r3, r1
 8009d24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2220      	movs	r2, #32
 8009d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e000      	b.n	8009d44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009d42:	2302      	movs	r3, #2
  }
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	80002400 	.word	0x80002400
 8009d50:	fe00e800 	.word	0xfe00e800

08009d54 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d62:	b2db      	uxtb	r3, r3
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	4608      	mov	r0, r1
 8009d92:	4611      	mov	r1, r2
 8009d94:	461a      	mov	r2, r3
 8009d96:	4603      	mov	r3, r0
 8009d98:	817b      	strh	r3, [r7, #10]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	813b      	strh	r3, [r7, #8]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009da2:	88fb      	ldrh	r3, [r7, #6]
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	8979      	ldrh	r1, [r7, #10]
 8009da8:	4b20      	ldr	r3, [pc, #128]	; (8009e2c <I2C_RequestMemoryWrite+0xa4>)
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fa5d 	bl	800a270 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009db6:	69fa      	ldr	r2, [r7, #28]
 8009db8:	69b9      	ldr	r1, [r7, #24]
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f8f0 	bl	8009fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e02c      	b.n	8009e24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d105      	bne.n	8009ddc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dd0:	893b      	ldrh	r3, [r7, #8]
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	629a      	str	r2, [r3, #40]	; 0x28
 8009dda:	e015      	b.n	8009e08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009ddc:	893b      	ldrh	r3, [r7, #8]
 8009dde:	0a1b      	lsrs	r3, r3, #8
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dea:	69fa      	ldr	r2, [r7, #28]
 8009dec:	69b9      	ldr	r1, [r7, #24]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f8d6 	bl	8009fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e012      	b.n	8009e24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009dfe:	893b      	ldrh	r3, [r7, #8]
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2180      	movs	r1, #128	; 0x80
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 f884 	bl	8009f20 <I2C_WaitOnFlagUntilTimeout>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	80002000 	.word	0x80002000

08009e30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	4608      	mov	r0, r1
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	817b      	strh	r3, [r7, #10]
 8009e42:	460b      	mov	r3, r1
 8009e44:	813b      	strh	r3, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e4a:	88fb      	ldrh	r3, [r7, #6]
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	8979      	ldrh	r1, [r7, #10]
 8009e50:	4b20      	ldr	r3, [pc, #128]	; (8009ed4 <I2C_RequestMemoryRead+0xa4>)
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2300      	movs	r3, #0
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f000 fa0a 	bl	800a270 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e5c:	69fa      	ldr	r2, [r7, #28]
 8009e5e:	69b9      	ldr	r1, [r7, #24]
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 f89d 	bl	8009fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e02c      	b.n	8009eca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e70:	88fb      	ldrh	r3, [r7, #6]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d105      	bne.n	8009e82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e76:	893b      	ldrh	r3, [r7, #8]
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8009e80:	e015      	b.n	8009eae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009e82:	893b      	ldrh	r3, [r7, #8]
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e90:	69fa      	ldr	r2, [r7, #28]
 8009e92:	69b9      	ldr	r1, [r7, #24]
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f000 f883 	bl	8009fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e012      	b.n	8009eca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ea4:	893b      	ldrh	r3, [r7, #8]
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2140      	movs	r1, #64	; 0x40
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f831 	bl	8009f20 <I2C_WaitOnFlagUntilTimeout>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e000      	b.n	8009eca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	80002000 	.word	0x80002000

08009ed8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d103      	bne.n	8009ef6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d007      	beq.n	8009f14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	699a      	ldr	r2, [r3, #24]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0201 	orr.w	r2, r2, #1
 8009f12:	619a      	str	r2, [r3, #24]
  }
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f30:	e022      	b.n	8009f78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d01e      	beq.n	8009f78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f3a:	f7fe fd0d 	bl	8008958 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d302      	bcc.n	8009f50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d113      	bne.n	8009f78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f54:	f043 0220 	orr.w	r2, r3, #32
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e00f      	b.n	8009f98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	699a      	ldr	r2, [r3, #24]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	4013      	ands	r3, r2
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	bf0c      	ite	eq
 8009f88:	2301      	moveq	r3, #1
 8009f8a:	2300      	movne	r3, #0
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	461a      	mov	r2, r3
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d0cd      	beq.n	8009f32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009fac:	e02c      	b.n	800a008 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	68b9      	ldr	r1, [r7, #8]
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 f870 	bl	800a098 <I2C_IsErrorOccurred>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e02a      	b.n	800a018 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc8:	d01e      	beq.n	800a008 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fca:	f7fe fcc5 	bl	8008958 <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d302      	bcc.n	8009fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d113      	bne.n	800a008 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe4:	f043 0220 	orr.w	r2, r3, #32
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e007      	b.n	800a018 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b02      	cmp	r3, #2
 800a014:	d1cb      	bne.n	8009fae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a02c:	e028      	b.n	800a080 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 f830 	bl	800a098 <I2C_IsErrorOccurred>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e026      	b.n	800a090 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a042:	f7fe fc89 	bl	8008958 <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d302      	bcc.n	800a058 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d113      	bne.n	800a080 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a05c:	f043 0220 	orr.w	r2, r3, #32
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2220      	movs	r2, #32
 800a068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e007      	b.n	800a090 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b20      	cmp	r3, #32
 800a08c:	d1cf      	bne.n	800a02e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08a      	sub	sp, #40	; 0x28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	f003 0310 	and.w	r3, r3, #16
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d075      	beq.n	800a1b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2210      	movs	r2, #16
 800a0ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a0cc:	e056      	b.n	800a17c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d4:	d052      	beq.n	800a17c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a0d6:	f7fe fc3f 	bl	8008958 <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d302      	bcc.n	800a0ec <I2C_IsErrorOccurred+0x54>
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d147      	bne.n	800a17c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a10a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a10e:	d12e      	bne.n	800a16e <I2C_IsErrorOccurred+0xd6>
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a116:	d02a      	beq.n	800a16e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a118:	7cfb      	ldrb	r3, [r7, #19]
 800a11a:	2b20      	cmp	r3, #32
 800a11c:	d027      	beq.n	800a16e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a12c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a12e:	f7fe fc13 	bl	8008958 <HAL_GetTick>
 800a132:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a134:	e01b      	b.n	800a16e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a136:	f7fe fc0f 	bl	8008958 <HAL_GetTick>
 800a13a:	4602      	mov	r2, r0
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	2b19      	cmp	r3, #25
 800a142:	d914      	bls.n	800a16e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a148:	f043 0220 	orr.w	r2, r3, #32
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2220      	movs	r2, #32
 800a154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	f003 0320 	and.w	r3, r3, #32
 800a178:	2b20      	cmp	r3, #32
 800a17a:	d1dc      	bne.n	800a136 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f003 0320 	and.w	r3, r3, #32
 800a186:	2b20      	cmp	r3, #32
 800a188:	d003      	beq.n	800a192 <I2C_IsErrorOccurred+0xfa>
 800a18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d09d      	beq.n	800a0ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a196:	2b00      	cmp	r3, #0
 800a198:	d103      	bne.n	800a1a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	f043 0304 	orr.w	r3, r3, #4
 800a1a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00b      	beq.n	800a1da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	f043 0301 	orr.w	r3, r3, #1
 800a1c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	f043 0308 	orr.w	r3, r3, #8
 800a1ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a1f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00b      	beq.n	800a21e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	f043 0302 	orr.w	r3, r3, #2
 800a20c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a216:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a21e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a222:	2b00      	cmp	r3, #0
 800a224:	d01c      	beq.n	800a260 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7ff fe56 	bl	8009ed8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6859      	ldr	r1, [r3, #4]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	4b0d      	ldr	r3, [pc, #52]	; (800a26c <I2C_IsErrorOccurred+0x1d4>)
 800a238:	400b      	ands	r3, r1
 800a23a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	431a      	orrs	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2220      	movs	r2, #32
 800a24c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a264:	4618      	mov	r0, r3
 800a266:	3728      	adds	r7, #40	; 0x28
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	fe00e800 	.word	0xfe00e800

0800a270 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	607b      	str	r3, [r7, #4]
 800a27a:	460b      	mov	r3, r1
 800a27c:	817b      	strh	r3, [r7, #10]
 800a27e:	4613      	mov	r3, r2
 800a280:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a282:	897b      	ldrh	r3, [r7, #10]
 800a284:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a288:	7a7b      	ldrb	r3, [r7, #9]
 800a28a:	041b      	lsls	r3, r3, #16
 800a28c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a290:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	4313      	orrs	r3, r2
 800a29a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a29e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685a      	ldr	r2, [r3, #4]
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	0d5b      	lsrs	r3, r3, #21
 800a2aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a2ae:	4b08      	ldr	r3, [pc, #32]	; (800a2d0 <I2C_TransferConfig+0x60>)
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	43db      	mvns	r3, r3
 800a2b4:	ea02 0103 	and.w	r1, r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a2c2:	bf00      	nop
 800a2c4:	371c      	adds	r7, #28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	03ff63ff 	.word	0x03ff63ff

0800a2d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b20      	cmp	r3, #32
 800a2e8:	d138      	bne.n	800a35c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d101      	bne.n	800a2f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	e032      	b.n	800a35e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2224      	movs	r2, #36	; 0x24
 800a304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f022 0201 	bic.w	r2, r2, #1
 800a316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6819      	ldr	r1, [r3, #0]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	430a      	orrs	r2, r1
 800a336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f042 0201 	orr.w	r2, r2, #1
 800a346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2220      	movs	r2, #32
 800a34c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	e000      	b.n	800a35e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a35c:	2302      	movs	r3, #2
  }
}
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	d139      	bne.n	800a3f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a386:	2b01      	cmp	r3, #1
 800a388:	d101      	bne.n	800a38e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a38a:	2302      	movs	r3, #2
 800a38c:	e033      	b.n	800a3f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2224      	movs	r2, #36	; 0x24
 800a39a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0201 	bic.w	r2, r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a3bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f042 0201 	orr.w	r2, r2, #1
 800a3de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e000      	b.n	800a3f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a3f4:	2302      	movs	r3, #2
  }
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
	...

0800a404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a408:	4b04      	ldr	r3, [pc, #16]	; (800a41c <HAL_PWREx_GetVoltageRange+0x18>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a410:	4618      	mov	r0, r3
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	40007000 	.word	0x40007000

0800a420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a42e:	d130      	bne.n	800a492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a430:	4b23      	ldr	r3, [pc, #140]	; (800a4c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a43c:	d038      	beq.n	800a4b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a43e:	4b20      	ldr	r3, [pc, #128]	; (800a4c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a446:	4a1e      	ldr	r2, [pc, #120]	; (800a4c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a44c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a44e:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2232      	movs	r2, #50	; 0x32
 800a454:	fb02 f303 	mul.w	r3, r2, r3
 800a458:	4a1b      	ldr	r2, [pc, #108]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a45a:	fba2 2303 	umull	r2, r3, r2, r3
 800a45e:	0c9b      	lsrs	r3, r3, #18
 800a460:	3301      	adds	r3, #1
 800a462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a464:	e002      	b.n	800a46c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3b01      	subs	r3, #1
 800a46a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a46c:	4b14      	ldr	r3, [pc, #80]	; (800a4c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a478:	d102      	bne.n	800a480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1f2      	bne.n	800a466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a480:	4b0f      	ldr	r3, [pc, #60]	; (800a4c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a48c:	d110      	bne.n	800a4b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e00f      	b.n	800a4b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a492:	4b0b      	ldr	r3, [pc, #44]	; (800a4c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a49e:	d007      	beq.n	800a4b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a4a0:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a4a8:	4a05      	ldr	r2, [pc, #20]	; (800a4c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a4aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	40007000 	.word	0x40007000
 800a4c4:	20001350 	.word	0x20001350
 800a4c8:	431bde83 	.word	0x431bde83

0800a4cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e3d8      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4de:	4b97      	ldr	r3, [pc, #604]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f003 030c 	and.w	r3, r3, #12
 800a4e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4e8:	4b94      	ldr	r3, [pc, #592]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f003 0303 	and.w	r3, r3, #3
 800a4f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0310 	and.w	r3, r3, #16
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f000 80e4 	beq.w	800a6c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d007      	beq.n	800a516 <HAL_RCC_OscConfig+0x4a>
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	2b0c      	cmp	r3, #12
 800a50a:	f040 808b 	bne.w	800a624 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2b01      	cmp	r3, #1
 800a512:	f040 8087 	bne.w	800a624 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a516:	4b89      	ldr	r3, [pc, #548]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <HAL_RCC_OscConfig+0x62>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e3b0      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1a      	ldr	r2, [r3, #32]
 800a532:	4b82      	ldr	r3, [pc, #520]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0308 	and.w	r3, r3, #8
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d004      	beq.n	800a548 <HAL_RCC_OscConfig+0x7c>
 800a53e:	4b7f      	ldr	r3, [pc, #508]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a546:	e005      	b.n	800a554 <HAL_RCC_OscConfig+0x88>
 800a548:	4b7c      	ldr	r3, [pc, #496]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a54a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a54e:	091b      	lsrs	r3, r3, #4
 800a550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a554:	4293      	cmp	r3, r2
 800a556:	d223      	bcs.n	800a5a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fd43 	bl	800afe8 <RCC_SetFlashLatencyFromMSIRange>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e391      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a56c:	4b73      	ldr	r3, [pc, #460]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a72      	ldr	r2, [pc, #456]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a572:	f043 0308 	orr.w	r3, r3, #8
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	4b70      	ldr	r3, [pc, #448]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	496d      	ldr	r1, [pc, #436]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a586:	4313      	orrs	r3, r2
 800a588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a58a:	4b6c      	ldr	r3, [pc, #432]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	021b      	lsls	r3, r3, #8
 800a598:	4968      	ldr	r1, [pc, #416]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	604b      	str	r3, [r1, #4]
 800a59e:	e025      	b.n	800a5ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a5a0:	4b66      	ldr	r3, [pc, #408]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a65      	ldr	r2, [pc, #404]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a5a6:	f043 0308 	orr.w	r3, r3, #8
 800a5aa:	6013      	str	r3, [r2, #0]
 800a5ac:	4b63      	ldr	r3, [pc, #396]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	4960      	ldr	r1, [pc, #384]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a5be:	4b5f      	ldr	r3, [pc, #380]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	021b      	lsls	r3, r3, #8
 800a5cc:	495b      	ldr	r1, [pc, #364]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d109      	bne.n	800a5ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 fd03 	bl	800afe8 <RCC_SetFlashLatencyFromMSIRange>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e351      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a5ec:	f000 fc38 	bl	800ae60 <HAL_RCC_GetSysClockFreq>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	4b52      	ldr	r3, [pc, #328]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	091b      	lsrs	r3, r3, #4
 800a5f8:	f003 030f 	and.w	r3, r3, #15
 800a5fc:	4950      	ldr	r1, [pc, #320]	; (800a740 <HAL_RCC_OscConfig+0x274>)
 800a5fe:	5ccb      	ldrb	r3, [r1, r3]
 800a600:	f003 031f 	and.w	r3, r3, #31
 800a604:	fa22 f303 	lsr.w	r3, r2, r3
 800a608:	4a4e      	ldr	r2, [pc, #312]	; (800a744 <HAL_RCC_OscConfig+0x278>)
 800a60a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a60c:	4b4e      	ldr	r3, [pc, #312]	; (800a748 <HAL_RCC_OscConfig+0x27c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe f951 	bl	80088b8 <HAL_InitTick>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d052      	beq.n	800a6c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	e335      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d032      	beq.n	800a692 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a62c:	4b43      	ldr	r3, [pc, #268]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a42      	ldr	r2, [pc, #264]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a632:	f043 0301 	orr.w	r3, r3, #1
 800a636:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a638:	f7fe f98e 	bl	8008958 <HAL_GetTick>
 800a63c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a63e:	e008      	b.n	800a652 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a640:	f7fe f98a 	bl	8008958 <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d901      	bls.n	800a652 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e31e      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a652:	4b3a      	ldr	r3, [pc, #232]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0f0      	beq.n	800a640 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a65e:	4b37      	ldr	r3, [pc, #220]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a36      	ldr	r2, [pc, #216]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a664:	f043 0308 	orr.w	r3, r3, #8
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	4b34      	ldr	r3, [pc, #208]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	4931      	ldr	r1, [pc, #196]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a67c:	4b2f      	ldr	r3, [pc, #188]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	69db      	ldr	r3, [r3, #28]
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	492c      	ldr	r1, [pc, #176]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	604b      	str	r3, [r1, #4]
 800a690:	e01a      	b.n	800a6c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a692:	4b2a      	ldr	r3, [pc, #168]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a29      	ldr	r2, [pc, #164]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a698:	f023 0301 	bic.w	r3, r3, #1
 800a69c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a69e:	f7fe f95b 	bl	8008958 <HAL_GetTick>
 800a6a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a6a4:	e008      	b.n	800a6b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a6a6:	f7fe f957 	bl	8008958 <HAL_GetTick>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d901      	bls.n	800a6b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e2eb      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a6b8:	4b20      	ldr	r3, [pc, #128]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0302 	and.w	r3, r3, #2
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1f0      	bne.n	800a6a6 <HAL_RCC_OscConfig+0x1da>
 800a6c4:	e000      	b.n	800a6c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a6c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d074      	beq.n	800a7be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	2b08      	cmp	r3, #8
 800a6d8:	d005      	beq.n	800a6e6 <HAL_RCC_OscConfig+0x21a>
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b0c      	cmp	r3, #12
 800a6de:	d10e      	bne.n	800a6fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d10b      	bne.n	800a6fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6e6:	4b15      	ldr	r3, [pc, #84]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d064      	beq.n	800a7bc <HAL_RCC_OscConfig+0x2f0>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d160      	bne.n	800a7bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e2c8      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a706:	d106      	bne.n	800a716 <HAL_RCC_OscConfig+0x24a>
 800a708:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a0b      	ldr	r2, [pc, #44]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a70e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	e026      	b.n	800a764 <HAL_RCC_OscConfig+0x298>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a71e:	d115      	bne.n	800a74c <HAL_RCC_OscConfig+0x280>
 800a720:	4b06      	ldr	r3, [pc, #24]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a05      	ldr	r2, [pc, #20]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	4b03      	ldr	r3, [pc, #12]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a02      	ldr	r2, [pc, #8]	; (800a73c <HAL_RCC_OscConfig+0x270>)
 800a732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	e014      	b.n	800a764 <HAL_RCC_OscConfig+0x298>
 800a73a:	bf00      	nop
 800a73c:	40021000 	.word	0x40021000
 800a740:	0801b560 	.word	0x0801b560
 800a744:	20001350 	.word	0x20001350
 800a748:	2000133c 	.word	0x2000133c
 800a74c:	4ba0      	ldr	r3, [pc, #640]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a9f      	ldr	r2, [pc, #636]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	4b9d      	ldr	r3, [pc, #628]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a9c      	ldr	r2, [pc, #624]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a75e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d013      	beq.n	800a794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a76c:	f7fe f8f4 	bl	8008958 <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a774:	f7fe f8f0 	bl	8008958 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b64      	cmp	r3, #100	; 0x64
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e284      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a786:	4b92      	ldr	r3, [pc, #584]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0f0      	beq.n	800a774 <HAL_RCC_OscConfig+0x2a8>
 800a792:	e014      	b.n	800a7be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a794:	f7fe f8e0 	bl	8008958 <HAL_GetTick>
 800a798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a79a:	e008      	b.n	800a7ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a79c:	f7fe f8dc 	bl	8008958 <HAL_GetTick>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	2b64      	cmp	r3, #100	; 0x64
 800a7a8:	d901      	bls.n	800a7ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e270      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a7ae:	4b88      	ldr	r3, [pc, #544]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f0      	bne.n	800a79c <HAL_RCC_OscConfig+0x2d0>
 800a7ba:	e000      	b.n	800a7be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0302 	and.w	r3, r3, #2
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d060      	beq.n	800a88c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	2b04      	cmp	r3, #4
 800a7ce:	d005      	beq.n	800a7dc <HAL_RCC_OscConfig+0x310>
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	2b0c      	cmp	r3, #12
 800a7d4:	d119      	bne.n	800a80a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d116      	bne.n	800a80a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7dc:	4b7c      	ldr	r3, [pc, #496]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <HAL_RCC_OscConfig+0x328>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e24d      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7f4:	4b76      	ldr	r3, [pc, #472]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	061b      	lsls	r3, r3, #24
 800a802:	4973      	ldr	r1, [pc, #460]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a804:	4313      	orrs	r3, r2
 800a806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a808:	e040      	b.n	800a88c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d023      	beq.n	800a85a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a812:	4b6f      	ldr	r3, [pc, #444]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a6e      	ldr	r2, [pc, #440]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a81c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a81e:	f7fe f89b 	bl	8008958 <HAL_GetTick>
 800a822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a824:	e008      	b.n	800a838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a826:	f7fe f897 	bl	8008958 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	2b02      	cmp	r3, #2
 800a832:	d901      	bls.n	800a838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e22b      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a838:	4b65      	ldr	r3, [pc, #404]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a840:	2b00      	cmp	r3, #0
 800a842:	d0f0      	beq.n	800a826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a844:	4b62      	ldr	r3, [pc, #392]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	061b      	lsls	r3, r3, #24
 800a852:	495f      	ldr	r1, [pc, #380]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a854:	4313      	orrs	r3, r2
 800a856:	604b      	str	r3, [r1, #4]
 800a858:	e018      	b.n	800a88c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a85a:	4b5d      	ldr	r3, [pc, #372]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a5c      	ldr	r2, [pc, #368]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a866:	f7fe f877 	bl	8008958 <HAL_GetTick>
 800a86a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a86c:	e008      	b.n	800a880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a86e:	f7fe f873 	bl	8008958 <HAL_GetTick>
 800a872:	4602      	mov	r2, r0
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d901      	bls.n	800a880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e207      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a880:	4b53      	ldr	r3, [pc, #332]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f0      	bne.n	800a86e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0308 	and.w	r3, r3, #8
 800a894:	2b00      	cmp	r3, #0
 800a896:	d03c      	beq.n	800a912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d01c      	beq.n	800a8da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8a0:	4b4b      	ldr	r3, [pc, #300]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a8a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8a6:	4a4a      	ldr	r2, [pc, #296]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a8a8:	f043 0301 	orr.w	r3, r3, #1
 800a8ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8b0:	f7fe f852 	bl	8008958 <HAL_GetTick>
 800a8b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8b6:	e008      	b.n	800a8ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8b8:	f7fe f84e 	bl	8008958 <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d901      	bls.n	800a8ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e1e2      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8ca:	4b41      	ldr	r3, [pc, #260]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a8cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8d0:	f003 0302 	and.w	r3, r3, #2
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0ef      	beq.n	800a8b8 <HAL_RCC_OscConfig+0x3ec>
 800a8d8:	e01b      	b.n	800a912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8da:	4b3d      	ldr	r3, [pc, #244]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a8dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8e0:	4a3b      	ldr	r2, [pc, #236]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a8e2:	f023 0301 	bic.w	r3, r3, #1
 800a8e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ea:	f7fe f835 	bl	8008958 <HAL_GetTick>
 800a8ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a8f0:	e008      	b.n	800a904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8f2:	f7fe f831 	bl	8008958 <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d901      	bls.n	800a904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e1c5      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a904:	4b32      	ldr	r3, [pc, #200]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a90a:	f003 0302 	and.w	r3, r3, #2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1ef      	bne.n	800a8f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0304 	and.w	r3, r3, #4
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f000 80a6 	beq.w	800aa6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a920:	2300      	movs	r3, #0
 800a922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a924:	4b2a      	ldr	r3, [pc, #168]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10d      	bne.n	800a94c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a930:	4b27      	ldr	r3, [pc, #156]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a934:	4a26      	ldr	r2, [pc, #152]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a93a:	6593      	str	r3, [r2, #88]	; 0x58
 800a93c:	4b24      	ldr	r3, [pc, #144]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a93e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a944:	60bb      	str	r3, [r7, #8]
 800a946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a948:	2301      	movs	r3, #1
 800a94a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a94c:	4b21      	ldr	r3, [pc, #132]	; (800a9d4 <HAL_RCC_OscConfig+0x508>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a954:	2b00      	cmp	r3, #0
 800a956:	d118      	bne.n	800a98a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a958:	4b1e      	ldr	r3, [pc, #120]	; (800a9d4 <HAL_RCC_OscConfig+0x508>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a1d      	ldr	r2, [pc, #116]	; (800a9d4 <HAL_RCC_OscConfig+0x508>)
 800a95e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a964:	f7fd fff8 	bl	8008958 <HAL_GetTick>
 800a968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a96a:	e008      	b.n	800a97e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a96c:	f7fd fff4 	bl	8008958 <HAL_GetTick>
 800a970:	4602      	mov	r2, r0
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	2b02      	cmp	r3, #2
 800a978:	d901      	bls.n	800a97e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e188      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a97e:	4b15      	ldr	r3, [pc, #84]	; (800a9d4 <HAL_RCC_OscConfig+0x508>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a986:	2b00      	cmp	r3, #0
 800a988:	d0f0      	beq.n	800a96c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d108      	bne.n	800a9a4 <HAL_RCC_OscConfig+0x4d8>
 800a992:	4b0f      	ldr	r3, [pc, #60]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a998:	4a0d      	ldr	r2, [pc, #52]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a99a:	f043 0301 	orr.w	r3, r3, #1
 800a99e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9a2:	e029      	b.n	800a9f8 <HAL_RCC_OscConfig+0x52c>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	2b05      	cmp	r3, #5
 800a9aa:	d115      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x50c>
 800a9ac:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b2:	4a07      	ldr	r2, [pc, #28]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a9b4:	f043 0304 	orr.w	r3, r3, #4
 800a9b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9bc:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c2:	4a03      	ldr	r2, [pc, #12]	; (800a9d0 <HAL_RCC_OscConfig+0x504>)
 800a9c4:	f043 0301 	orr.w	r3, r3, #1
 800a9c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9cc:	e014      	b.n	800a9f8 <HAL_RCC_OscConfig+0x52c>
 800a9ce:	bf00      	nop
 800a9d0:	40021000 	.word	0x40021000
 800a9d4:	40007000 	.word	0x40007000
 800a9d8:	4b91      	ldr	r3, [pc, #580]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800a9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9de:	4a90      	ldr	r2, [pc, #576]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800a9e0:	f023 0301 	bic.w	r3, r3, #1
 800a9e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9e8:	4b8d      	ldr	r3, [pc, #564]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800a9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ee:	4a8c      	ldr	r2, [pc, #560]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800a9f0:	f023 0304 	bic.w	r3, r3, #4
 800a9f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d016      	beq.n	800aa2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa00:	f7fd ffaa 	bl	8008958 <HAL_GetTick>
 800aa04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa06:	e00a      	b.n	800aa1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa08:	f7fd ffa6 	bl	8008958 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d901      	bls.n	800aa1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e138      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa1e:	4b80      	ldr	r3, [pc, #512]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800aa20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d0ed      	beq.n	800aa08 <HAL_RCC_OscConfig+0x53c>
 800aa2c:	e015      	b.n	800aa5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa2e:	f7fd ff93 	bl	8008958 <HAL_GetTick>
 800aa32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa34:	e00a      	b.n	800aa4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa36:	f7fd ff8f 	bl	8008958 <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d901      	bls.n	800aa4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e121      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa4c:	4b74      	ldr	r3, [pc, #464]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800aa4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa52:	f003 0302 	and.w	r3, r3, #2
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1ed      	bne.n	800aa36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa5a:	7ffb      	ldrb	r3, [r7, #31]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d105      	bne.n	800aa6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa60:	4b6f      	ldr	r3, [pc, #444]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800aa62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa64:	4a6e      	ldr	r2, [pc, #440]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800aa66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 810c 	beq.w	800ac8e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	f040 80d4 	bne.w	800ac28 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800aa80:	4b67      	ldr	r3, [pc, #412]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f003 0203 	and.w	r2, r3, #3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d130      	bne.n	800aaf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d127      	bne.n	800aaf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d11f      	bne.n	800aaf6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aac0:	2a07      	cmp	r2, #7
 800aac2:	bf14      	ite	ne
 800aac4:	2201      	movne	r2, #1
 800aac6:	2200      	moveq	r2, #0
 800aac8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d113      	bne.n	800aaf6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad8:	085b      	lsrs	r3, r3, #1
 800aada:	3b01      	subs	r3, #1
 800aadc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800aade:	429a      	cmp	r2, r3
 800aae0:	d109      	bne.n	800aaf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaec:	085b      	lsrs	r3, r3, #1
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d06e      	beq.n	800abd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	2b0c      	cmp	r3, #12
 800aafa:	d069      	beq.n	800abd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800aafc:	4b48      	ldr	r3, [pc, #288]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d105      	bne.n	800ab14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ab08:	4b45      	ldr	r3, [pc, #276]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d001      	beq.n	800ab18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e0bb      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ab18:	4b41      	ldr	r3, [pc, #260]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a40      	ldr	r2, [pc, #256]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ab1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ab24:	f7fd ff18 	bl	8008958 <HAL_GetTick>
 800ab28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab2a:	e008      	b.n	800ab3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab2c:	f7fd ff14 	bl	8008958 <HAL_GetTick>
 800ab30:	4602      	mov	r2, r0
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d901      	bls.n	800ab3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e0a8      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab3e:	4b38      	ldr	r3, [pc, #224]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1f0      	bne.n	800ab2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab4a:	4b35      	ldr	r3, [pc, #212]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	4b35      	ldr	r3, [pc, #212]	; (800ac24 <HAL_RCC_OscConfig+0x758>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab5a:	3a01      	subs	r2, #1
 800ab5c:	0112      	lsls	r2, r2, #4
 800ab5e:	4311      	orrs	r1, r2
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab64:	0212      	lsls	r2, r2, #8
 800ab66:	4311      	orrs	r1, r2
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ab6c:	0852      	lsrs	r2, r2, #1
 800ab6e:	3a01      	subs	r2, #1
 800ab70:	0552      	lsls	r2, r2, #21
 800ab72:	4311      	orrs	r1, r2
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ab78:	0852      	lsrs	r2, r2, #1
 800ab7a:	3a01      	subs	r2, #1
 800ab7c:	0652      	lsls	r2, r2, #25
 800ab7e:	4311      	orrs	r1, r2
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab84:	0912      	lsrs	r2, r2, #4
 800ab86:	0452      	lsls	r2, r2, #17
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	4925      	ldr	r1, [pc, #148]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ab90:	4b23      	ldr	r3, [pc, #140]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a22      	ldr	r2, [pc, #136]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ab96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ab9c:	4b20      	ldr	r3, [pc, #128]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	4a1f      	ldr	r2, [pc, #124]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800aba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aba6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aba8:	f7fd fed6 	bl	8008958 <HAL_GetTick>
 800abac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abae:	e008      	b.n	800abc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abb0:	f7fd fed2 	bl	8008958 <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d901      	bls.n	800abc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e066      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abc2:	4b17      	ldr	r3, [pc, #92]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d0f0      	beq.n	800abb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800abce:	e05e      	b.n	800ac8e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e05d      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abd4:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d156      	bne.n	800ac8e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800abe0:	4b0f      	ldr	r3, [pc, #60]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a0e      	ldr	r2, [pc, #56]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800abe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800abec:	4b0c      	ldr	r3, [pc, #48]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	4a0b      	ldr	r2, [pc, #44]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800abf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800abf8:	f7fd feae 	bl	8008958 <HAL_GetTick>
 800abfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abfe:	e008      	b.n	800ac12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac00:	f7fd feaa 	bl	8008958 <HAL_GetTick>
 800ac04:	4602      	mov	r2, r0
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d901      	bls.n	800ac12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	e03e      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac12:	4b03      	ldr	r3, [pc, #12]	; (800ac20 <HAL_RCC_OscConfig+0x754>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0f0      	beq.n	800ac00 <HAL_RCC_OscConfig+0x734>
 800ac1e:	e036      	b.n	800ac8e <HAL_RCC_OscConfig+0x7c2>
 800ac20:	40021000 	.word	0x40021000
 800ac24:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	2b0c      	cmp	r3, #12
 800ac2c:	d02d      	beq.n	800ac8a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac2e:	4b1a      	ldr	r3, [pc, #104]	; (800ac98 <HAL_RCC_OscConfig+0x7cc>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a19      	ldr	r2, [pc, #100]	; (800ac98 <HAL_RCC_OscConfig+0x7cc>)
 800ac34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800ac3a:	4b17      	ldr	r3, [pc, #92]	; (800ac98 <HAL_RCC_OscConfig+0x7cc>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d105      	bne.n	800ac52 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ac46:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <HAL_RCC_OscConfig+0x7cc>)
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	4a13      	ldr	r2, [pc, #76]	; (800ac98 <HAL_RCC_OscConfig+0x7cc>)
 800ac4c:	f023 0303 	bic.w	r3, r3, #3
 800ac50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ac52:	4b11      	ldr	r3, [pc, #68]	; (800ac98 <HAL_RCC_OscConfig+0x7cc>)
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	4a10      	ldr	r2, [pc, #64]	; (800ac98 <HAL_RCC_OscConfig+0x7cc>)
 800ac58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ac5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac62:	f7fd fe79 	bl	8008958 <HAL_GetTick>
 800ac66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac68:	e008      	b.n	800ac7c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac6a:	f7fd fe75 	bl	8008958 <HAL_GetTick>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d901      	bls.n	800ac7c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e009      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac7c:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <HAL_RCC_OscConfig+0x7cc>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1f0      	bne.n	800ac6a <HAL_RCC_OscConfig+0x79e>
 800ac88:	e001      	b.n	800ac8e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e000      	b.n	800ac90 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3720      	adds	r7, #32
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	40021000 	.word	0x40021000

0800ac9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e0c8      	b.n	800ae42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800acb0:	4b66      	ldr	r3, [pc, #408]	; (800ae4c <HAL_RCC_ClockConfig+0x1b0>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0307 	and.w	r3, r3, #7
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d910      	bls.n	800ace0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acbe:	4b63      	ldr	r3, [pc, #396]	; (800ae4c <HAL_RCC_ClockConfig+0x1b0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f023 0207 	bic.w	r2, r3, #7
 800acc6:	4961      	ldr	r1, [pc, #388]	; (800ae4c <HAL_RCC_ClockConfig+0x1b0>)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	4313      	orrs	r3, r2
 800accc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acce:	4b5f      	ldr	r3, [pc, #380]	; (800ae4c <HAL_RCC_ClockConfig+0x1b0>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d001      	beq.n	800ace0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e0b0      	b.n	800ae42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d04c      	beq.n	800ad86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	2b03      	cmp	r3, #3
 800acf2:	d107      	bne.n	800ad04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acf4:	4b56      	ldr	r3, [pc, #344]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d121      	bne.n	800ad44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e09e      	b.n	800ae42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d107      	bne.n	800ad1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad0c:	4b50      	ldr	r3, [pc, #320]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d115      	bne.n	800ad44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e092      	b.n	800ae42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d107      	bne.n	800ad34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ad24:	4b4a      	ldr	r3, [pc, #296]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0302 	and.w	r3, r3, #2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d109      	bne.n	800ad44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e086      	b.n	800ae42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad34:	4b46      	ldr	r3, [pc, #280]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e07e      	b.n	800ae42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad44:	4b42      	ldr	r3, [pc, #264]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	f023 0203 	bic.w	r2, r3, #3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	493f      	ldr	r1, [pc, #252]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad56:	f7fd fdff 	bl	8008958 <HAL_GetTick>
 800ad5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad5c:	e00a      	b.n	800ad74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad5e:	f7fd fdfb 	bl	8008958 <HAL_GetTick>
 800ad62:	4602      	mov	r2, r0
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d901      	bls.n	800ad74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e066      	b.n	800ae42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad74:	4b36      	ldr	r3, [pc, #216]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	f003 020c 	and.w	r2, r3, #12
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d1eb      	bne.n	800ad5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d008      	beq.n	800ada4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad92:	4b2f      	ldr	r3, [pc, #188]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	492c      	ldr	r1, [pc, #176]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ada4:	4b29      	ldr	r3, [pc, #164]	; (800ae4c <HAL_RCC_ClockConfig+0x1b0>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0307 	and.w	r3, r3, #7
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d210      	bcs.n	800add4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adb2:	4b26      	ldr	r3, [pc, #152]	; (800ae4c <HAL_RCC_ClockConfig+0x1b0>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f023 0207 	bic.w	r2, r3, #7
 800adba:	4924      	ldr	r1, [pc, #144]	; (800ae4c <HAL_RCC_ClockConfig+0x1b0>)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adc2:	4b22      	ldr	r3, [pc, #136]	; (800ae4c <HAL_RCC_ClockConfig+0x1b0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d001      	beq.n	800add4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e036      	b.n	800ae42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0304 	and.w	r3, r3, #4
 800addc:	2b00      	cmp	r3, #0
 800adde:	d008      	beq.n	800adf2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ade0:	4b1b      	ldr	r3, [pc, #108]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	4918      	ldr	r1, [pc, #96]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800adee:	4313      	orrs	r3, r2
 800adf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 0308 	and.w	r3, r3, #8
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d009      	beq.n	800ae12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800adfe:	4b14      	ldr	r3, [pc, #80]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	00db      	lsls	r3, r3, #3
 800ae0c:	4910      	ldr	r1, [pc, #64]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ae12:	f000 f825 	bl	800ae60 <HAL_RCC_GetSysClockFreq>
 800ae16:	4602      	mov	r2, r0
 800ae18:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <HAL_RCC_ClockConfig+0x1b4>)
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	091b      	lsrs	r3, r3, #4
 800ae1e:	f003 030f 	and.w	r3, r3, #15
 800ae22:	490c      	ldr	r1, [pc, #48]	; (800ae54 <HAL_RCC_ClockConfig+0x1b8>)
 800ae24:	5ccb      	ldrb	r3, [r1, r3]
 800ae26:	f003 031f 	and.w	r3, r3, #31
 800ae2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae2e:	4a0a      	ldr	r2, [pc, #40]	; (800ae58 <HAL_RCC_ClockConfig+0x1bc>)
 800ae30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ae32:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <HAL_RCC_ClockConfig+0x1c0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fd fd3e 	bl	80088b8 <HAL_InitTick>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	72fb      	strb	r3, [r7, #11]

  return status;
 800ae40:	7afb      	ldrb	r3, [r7, #11]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	40022000 	.word	0x40022000
 800ae50:	40021000 	.word	0x40021000
 800ae54:	0801b560 	.word	0x0801b560
 800ae58:	20001350 	.word	0x20001350
 800ae5c:	2000133c 	.word	0x2000133c

0800ae60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b089      	sub	sp, #36	; 0x24
 800ae64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae6e:	4b3e      	ldr	r3, [pc, #248]	; (800af68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	f003 030c 	and.w	r3, r3, #12
 800ae76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae78:	4b3b      	ldr	r3, [pc, #236]	; (800af68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	f003 0303 	and.w	r3, r3, #3
 800ae80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <HAL_RCC_GetSysClockFreq+0x34>
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	2b0c      	cmp	r3, #12
 800ae8c:	d121      	bne.n	800aed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d11e      	bne.n	800aed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ae94:	4b34      	ldr	r3, [pc, #208]	; (800af68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0308 	and.w	r3, r3, #8
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d107      	bne.n	800aeb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aea0:	4b31      	ldr	r3, [pc, #196]	; (800af68 <HAL_RCC_GetSysClockFreq+0x108>)
 800aea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aea6:	0a1b      	lsrs	r3, r3, #8
 800aea8:	f003 030f 	and.w	r3, r3, #15
 800aeac:	61fb      	str	r3, [r7, #28]
 800aeae:	e005      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aeb0:	4b2d      	ldr	r3, [pc, #180]	; (800af68 <HAL_RCC_GetSysClockFreq+0x108>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	091b      	lsrs	r3, r3, #4
 800aeb6:	f003 030f 	and.w	r3, r3, #15
 800aeba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aebc:	4a2b      	ldr	r2, [pc, #172]	; (800af6c <HAL_RCC_GetSysClockFreq+0x10c>)
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10d      	bne.n	800aee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aed0:	e00a      	b.n	800aee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	2b04      	cmp	r3, #4
 800aed6:	d102      	bne.n	800aede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aed8:	4b25      	ldr	r3, [pc, #148]	; (800af70 <HAL_RCC_GetSysClockFreq+0x110>)
 800aeda:	61bb      	str	r3, [r7, #24]
 800aedc:	e004      	b.n	800aee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b08      	cmp	r3, #8
 800aee2:	d101      	bne.n	800aee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aee4:	4b23      	ldr	r3, [pc, #140]	; (800af74 <HAL_RCC_GetSysClockFreq+0x114>)
 800aee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	2b0c      	cmp	r3, #12
 800aeec:	d134      	bne.n	800af58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aeee:	4b1e      	ldr	r3, [pc, #120]	; (800af68 <HAL_RCC_GetSysClockFreq+0x108>)
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	f003 0303 	and.w	r3, r3, #3
 800aef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d003      	beq.n	800af06 <HAL_RCC_GetSysClockFreq+0xa6>
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2b03      	cmp	r3, #3
 800af02:	d003      	beq.n	800af0c <HAL_RCC_GetSysClockFreq+0xac>
 800af04:	e005      	b.n	800af12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800af06:	4b1a      	ldr	r3, [pc, #104]	; (800af70 <HAL_RCC_GetSysClockFreq+0x110>)
 800af08:	617b      	str	r3, [r7, #20]
      break;
 800af0a:	e005      	b.n	800af18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800af0c:	4b19      	ldr	r3, [pc, #100]	; (800af74 <HAL_RCC_GetSysClockFreq+0x114>)
 800af0e:	617b      	str	r3, [r7, #20]
      break;
 800af10:	e002      	b.n	800af18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	617b      	str	r3, [r7, #20]
      break;
 800af16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af18:	4b13      	ldr	r3, [pc, #76]	; (800af68 <HAL_RCC_GetSysClockFreq+0x108>)
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	091b      	lsrs	r3, r3, #4
 800af1e:	f003 0307 	and.w	r3, r3, #7
 800af22:	3301      	adds	r3, #1
 800af24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800af26:	4b10      	ldr	r3, [pc, #64]	; (800af68 <HAL_RCC_GetSysClockFreq+0x108>)
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	0a1b      	lsrs	r3, r3, #8
 800af2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	fb03 f202 	mul.w	r2, r3, r2
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	fbb2 f3f3 	udiv	r3, r2, r3
 800af3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800af3e:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <HAL_RCC_GetSysClockFreq+0x108>)
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	0e5b      	lsrs	r3, r3, #25
 800af44:	f003 0303 	and.w	r3, r3, #3
 800af48:	3301      	adds	r3, #1
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	fbb2 f3f3 	udiv	r3, r2, r3
 800af56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800af58:	69bb      	ldr	r3, [r7, #24]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3724      	adds	r7, #36	; 0x24
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	40021000 	.word	0x40021000
 800af6c:	0801b578 	.word	0x0801b578
 800af70:	00f42400 	.word	0x00f42400
 800af74:	007a1200 	.word	0x007a1200

0800af78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af7c:	4b03      	ldr	r3, [pc, #12]	; (800af8c <HAL_RCC_GetHCLKFreq+0x14>)
 800af7e:	681b      	ldr	r3, [r3, #0]
}
 800af80:	4618      	mov	r0, r3
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	20001350 	.word	0x20001350

0800af90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800af94:	f7ff fff0 	bl	800af78 <HAL_RCC_GetHCLKFreq>
 800af98:	4602      	mov	r2, r0
 800af9a:	4b06      	ldr	r3, [pc, #24]	; (800afb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	0a1b      	lsrs	r3, r3, #8
 800afa0:	f003 0307 	and.w	r3, r3, #7
 800afa4:	4904      	ldr	r1, [pc, #16]	; (800afb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800afa6:	5ccb      	ldrb	r3, [r1, r3]
 800afa8:	f003 031f 	and.w	r3, r3, #31
 800afac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	40021000 	.word	0x40021000
 800afb8:	0801b570 	.word	0x0801b570

0800afbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800afc0:	f7ff ffda 	bl	800af78 <HAL_RCC_GetHCLKFreq>
 800afc4:	4602      	mov	r2, r0
 800afc6:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	0adb      	lsrs	r3, r3, #11
 800afcc:	f003 0307 	and.w	r3, r3, #7
 800afd0:	4904      	ldr	r1, [pc, #16]	; (800afe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800afd2:	5ccb      	ldrb	r3, [r1, r3]
 800afd4:	f003 031f 	and.w	r3, r3, #31
 800afd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afdc:	4618      	mov	r0, r3
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	40021000 	.word	0x40021000
 800afe4:	0801b570 	.word	0x0801b570

0800afe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800aff0:	2300      	movs	r3, #0
 800aff2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800aff4:	4b2a      	ldr	r3, [pc, #168]	; (800b0a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800aff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d003      	beq.n	800b008 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b000:	f7ff fa00 	bl	800a404 <HAL_PWREx_GetVoltageRange>
 800b004:	6178      	str	r0, [r7, #20]
 800b006:	e014      	b.n	800b032 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b008:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b00a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b00c:	4a24      	ldr	r2, [pc, #144]	; (800b0a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b00e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b012:	6593      	str	r3, [r2, #88]	; 0x58
 800b014:	4b22      	ldr	r3, [pc, #136]	; (800b0a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b01c:	60fb      	str	r3, [r7, #12]
 800b01e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b020:	f7ff f9f0 	bl	800a404 <HAL_PWREx_GetVoltageRange>
 800b024:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b026:	4b1e      	ldr	r3, [pc, #120]	; (800b0a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b02a:	4a1d      	ldr	r2, [pc, #116]	; (800b0a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b02c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b030:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b038:	d10b      	bne.n	800b052 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b80      	cmp	r3, #128	; 0x80
 800b03e:	d919      	bls.n	800b074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2ba0      	cmp	r3, #160	; 0xa0
 800b044:	d902      	bls.n	800b04c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b046:	2302      	movs	r3, #2
 800b048:	613b      	str	r3, [r7, #16]
 800b04a:	e013      	b.n	800b074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b04c:	2301      	movs	r3, #1
 800b04e:	613b      	str	r3, [r7, #16]
 800b050:	e010      	b.n	800b074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b80      	cmp	r3, #128	; 0x80
 800b056:	d902      	bls.n	800b05e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b058:	2303      	movs	r3, #3
 800b05a:	613b      	str	r3, [r7, #16]
 800b05c:	e00a      	b.n	800b074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b80      	cmp	r3, #128	; 0x80
 800b062:	d102      	bne.n	800b06a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b064:	2302      	movs	r3, #2
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	e004      	b.n	800b074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b70      	cmp	r3, #112	; 0x70
 800b06e:	d101      	bne.n	800b074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b070:	2301      	movs	r3, #1
 800b072:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b074:	4b0b      	ldr	r3, [pc, #44]	; (800b0a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f023 0207 	bic.w	r2, r3, #7
 800b07c:	4909      	ldr	r1, [pc, #36]	; (800b0a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	4313      	orrs	r3, r2
 800b082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b084:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 0307 	and.w	r3, r3, #7
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d001      	beq.n	800b096 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e000      	b.n	800b098 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	40021000 	.word	0x40021000
 800b0a4:	40022000 	.word	0x40022000

0800b0a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d041      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0cc:	d02a      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b0ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0d2:	d824      	bhi.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b0d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0d8:	d008      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b0da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0de:	d81e      	bhi.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00a      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b0e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0e8:	d010      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b0ea:	e018      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b0ec:	4b86      	ldr	r3, [pc, #536]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	4a85      	ldr	r2, [pc, #532]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b0f8:	e015      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	2100      	movs	r1, #0
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fabb 	bl	800b67c <RCCEx_PLLSAI1_Config>
 800b106:	4603      	mov	r3, r0
 800b108:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b10a:	e00c      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3320      	adds	r3, #32
 800b110:	2100      	movs	r1, #0
 800b112:	4618      	mov	r0, r3
 800b114:	f000 fba6 	bl	800b864 <RCCEx_PLLSAI2_Config>
 800b118:	4603      	mov	r3, r0
 800b11a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b11c:	e003      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	74fb      	strb	r3, [r7, #19]
      break;
 800b122:	e000      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b124:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b126:	7cfb      	ldrb	r3, [r7, #19]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10b      	bne.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b12c:	4b76      	ldr	r3, [pc, #472]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b13a:	4973      	ldr	r1, [pc, #460]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b142:	e001      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b144:	7cfb      	ldrb	r3, [r7, #19]
 800b146:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d041      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b15c:	d02a      	beq.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b15e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b162:	d824      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b168:	d008      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b16a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b16e:	d81e      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00a      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b178:	d010      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b17a:	e018      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b17c:	4b62      	ldr	r3, [pc, #392]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	4a61      	ldr	r2, [pc, #388]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b186:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b188:	e015      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3304      	adds	r3, #4
 800b18e:	2100      	movs	r1, #0
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fa73 	bl	800b67c <RCCEx_PLLSAI1_Config>
 800b196:	4603      	mov	r3, r0
 800b198:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b19a:	e00c      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3320      	adds	r3, #32
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 fb5e 	bl	800b864 <RCCEx_PLLSAI2_Config>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b1ac:	e003      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	74fb      	strb	r3, [r7, #19]
      break;
 800b1b2:	e000      	b.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b1b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1b6:	7cfb      	ldrb	r3, [r7, #19]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10b      	bne.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b1bc:	4b52      	ldr	r3, [pc, #328]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1ca:	494f      	ldr	r1, [pc, #316]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b1d2:	e001      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1d4:	7cfb      	ldrb	r3, [r7, #19]
 800b1d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 80a0 	beq.w	800b326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b1ea:	4b47      	ldr	r3, [pc, #284]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e000      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00d      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b200:	4b41      	ldr	r3, [pc, #260]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b204:	4a40      	ldr	r2, [pc, #256]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b20a:	6593      	str	r3, [r2, #88]	; 0x58
 800b20c:	4b3e      	ldr	r3, [pc, #248]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b214:	60bb      	str	r3, [r7, #8]
 800b216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b218:	2301      	movs	r3, #1
 800b21a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b21c:	4b3b      	ldr	r3, [pc, #236]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a3a      	ldr	r2, [pc, #232]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b228:	f7fd fb96 	bl	8008958 <HAL_GetTick>
 800b22c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b22e:	e009      	b.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b230:	f7fd fb92 	bl	8008958 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d902      	bls.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b23e:	2303      	movs	r3, #3
 800b240:	74fb      	strb	r3, [r7, #19]
        break;
 800b242:	e005      	b.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b244:	4b31      	ldr	r3, [pc, #196]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0ef      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b250:	7cfb      	ldrb	r3, [r7, #19]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d15c      	bne.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b256:	4b2c      	ldr	r3, [pc, #176]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b260:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d01f      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	429a      	cmp	r2, r3
 800b272:	d019      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b274:	4b24      	ldr	r3, [pc, #144]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b27a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b27e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b280:	4b21      	ldr	r3, [pc, #132]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b286:	4a20      	ldr	r2, [pc, #128]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b28c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b290:	4b1d      	ldr	r3, [pc, #116]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b296:	4a1c      	ldr	r2, [pc, #112]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b29c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b2a0:	4a19      	ldr	r2, [pc, #100]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f003 0301 	and.w	r3, r3, #1
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d016      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2b2:	f7fd fb51 	bl	8008958 <HAL_GetTick>
 800b2b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b2b8:	e00b      	b.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2ba:	f7fd fb4d 	bl	8008958 <HAL_GetTick>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d902      	bls.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	74fb      	strb	r3, [r7, #19]
            break;
 800b2d0:	e006      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b2d2:	4b0d      	ldr	r3, [pc, #52]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d0ec      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b2e0:	7cfb      	ldrb	r3, [r7, #19]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10c      	bne.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2e6:	4b08      	ldr	r3, [pc, #32]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f6:	4904      	ldr	r1, [pc, #16]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b2fe:	e009      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b300:	7cfb      	ldrb	r3, [r7, #19]
 800b302:	74bb      	strb	r3, [r7, #18]
 800b304:	e006      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b306:	bf00      	nop
 800b308:	40021000 	.word	0x40021000
 800b30c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b310:	7cfb      	ldrb	r3, [r7, #19]
 800b312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b314:	7c7b      	ldrb	r3, [r7, #17]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d105      	bne.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b31a:	4b9e      	ldr	r3, [pc, #632]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31e:	4a9d      	ldr	r2, [pc, #628]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b324:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00a      	beq.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b332:	4b98      	ldr	r3, [pc, #608]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b338:	f023 0203 	bic.w	r2, r3, #3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b340:	4994      	ldr	r1, [pc, #592]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b342:	4313      	orrs	r3, r2
 800b344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 0302 	and.w	r3, r3, #2
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00a      	beq.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b354:	4b8f      	ldr	r3, [pc, #572]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b35a:	f023 020c 	bic.w	r2, r3, #12
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b362:	498c      	ldr	r1, [pc, #560]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b364:	4313      	orrs	r3, r2
 800b366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0304 	and.w	r3, r3, #4
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00a      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b376:	4b87      	ldr	r3, [pc, #540]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b37c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b384:	4983      	ldr	r1, [pc, #524]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b386:	4313      	orrs	r3, r2
 800b388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0308 	and.w	r3, r3, #8
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00a      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b398:	4b7e      	ldr	r3, [pc, #504]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b39e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3a6:	497b      	ldr	r1, [pc, #492]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 0310 	and.w	r3, r3, #16
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00a      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b3ba:	4b76      	ldr	r3, [pc, #472]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3c8:	4972      	ldr	r1, [pc, #456]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0320 	and.w	r3, r3, #32
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00a      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b3dc:	4b6d      	ldr	r3, [pc, #436]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ea:	496a      	ldr	r1, [pc, #424]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00a      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3fe:	4b65      	ldr	r3, [pc, #404]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b40c:	4961      	ldr	r1, [pc, #388]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00a      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b420:	4b5c      	ldr	r3, [pc, #368]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b42e:	4959      	ldr	r1, [pc, #356]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b430:	4313      	orrs	r3, r2
 800b432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00a      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b442:	4b54      	ldr	r3, [pc, #336]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b450:	4950      	ldr	r1, [pc, #320]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b452:	4313      	orrs	r3, r2
 800b454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00a      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b464:	4b4b      	ldr	r3, [pc, #300]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b46a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b472:	4948      	ldr	r1, [pc, #288]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b474:	4313      	orrs	r3, r2
 800b476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00a      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b486:	4b43      	ldr	r3, [pc, #268]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b48c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b494:	493f      	ldr	r1, [pc, #252]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b496:	4313      	orrs	r3, r2
 800b498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d028      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4a8:	4b3a      	ldr	r3, [pc, #232]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4b6:	4937      	ldr	r1, [pc, #220]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4c6:	d106      	bne.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4c8:	4b32      	ldr	r3, [pc, #200]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	4a31      	ldr	r2, [pc, #196]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4d2:	60d3      	str	r3, [r2, #12]
 800b4d4:	e011      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4de:	d10c      	bne.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 f8c8 	bl	800b67c <RCCEx_PLLSAI1_Config>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b4f0:	7cfb      	ldrb	r3, [r7, #19]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800b4f6:	7cfb      	ldrb	r3, [r7, #19]
 800b4f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d028      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b506:	4b23      	ldr	r3, [pc, #140]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b50c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b514:	491f      	ldr	r1, [pc, #124]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b516:	4313      	orrs	r3, r2
 800b518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b524:	d106      	bne.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b526:	4b1b      	ldr	r3, [pc, #108]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	4a1a      	ldr	r2, [pc, #104]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b52c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b530:	60d3      	str	r3, [r2, #12]
 800b532:	e011      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b53c:	d10c      	bne.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	3304      	adds	r3, #4
 800b542:	2101      	movs	r1, #1
 800b544:	4618      	mov	r0, r3
 800b546:	f000 f899 	bl	800b67c <RCCEx_PLLSAI1_Config>
 800b54a:	4603      	mov	r3, r0
 800b54c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b54e:	7cfb      	ldrb	r3, [r7, #19]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800b554:	7cfb      	ldrb	r3, [r7, #19]
 800b556:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d02b      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b564:	4b0b      	ldr	r3, [pc, #44]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b56a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b572:	4908      	ldr	r1, [pc, #32]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b574:	4313      	orrs	r3, r2
 800b576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b57e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b582:	d109      	bne.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b584:	4b03      	ldr	r3, [pc, #12]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	4a02      	ldr	r2, [pc, #8]	; (800b594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b58a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b58e:	60d3      	str	r3, [r2, #12]
 800b590:	e014      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800b592:	bf00      	nop
 800b594:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b59c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5a0:	d10c      	bne.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 f867 	bl	800b67c <RCCEx_PLLSAI1_Config>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b5b2:	7cfb      	ldrb	r3, [r7, #19]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800b5b8:	7cfb      	ldrb	r3, [r7, #19]
 800b5ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d02f      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b5c8:	4b2b      	ldr	r3, [pc, #172]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5d6:	4928      	ldr	r1, [pc, #160]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5e6:	d10d      	bne.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3304      	adds	r3, #4
 800b5ec:	2102      	movs	r1, #2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 f844 	bl	800b67c <RCCEx_PLLSAI1_Config>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b5f8:	7cfb      	ldrb	r3, [r7, #19]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d014      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b5fe:	7cfb      	ldrb	r3, [r7, #19]
 800b600:	74bb      	strb	r3, [r7, #18]
 800b602:	e011      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b60c:	d10c      	bne.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	3320      	adds	r3, #32
 800b612:	2102      	movs	r1, #2
 800b614:	4618      	mov	r0, r3
 800b616:	f000 f925 	bl	800b864 <RCCEx_PLLSAI2_Config>
 800b61a:	4603      	mov	r3, r0
 800b61c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b61e:	7cfb      	ldrb	r3, [r7, #19]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b624:	7cfb      	ldrb	r3, [r7, #19]
 800b626:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b634:	4b10      	ldr	r3, [pc, #64]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b63a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b642:	490d      	ldr	r1, [pc, #52]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b644:	4313      	orrs	r3, r2
 800b646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b656:	4b08      	ldr	r3, [pc, #32]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b65c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b666:	4904      	ldr	r1, [pc, #16]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b668:	4313      	orrs	r3, r2
 800b66a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b66e:	7cbb      	ldrb	r3, [r7, #18]
}
 800b670:	4618      	mov	r0, r3
 800b672:	3718      	adds	r7, #24
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	40021000 	.word	0x40021000

0800b67c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b68a:	4b75      	ldr	r3, [pc, #468]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f003 0303 	and.w	r3, r3, #3
 800b692:	2b00      	cmp	r3, #0
 800b694:	d018      	beq.n	800b6c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b696:	4b72      	ldr	r3, [pc, #456]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	f003 0203 	and.w	r2, r3, #3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d10d      	bne.n	800b6c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
       ||
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d009      	beq.n	800b6c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b6ae:	4b6c      	ldr	r3, [pc, #432]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	091b      	lsrs	r3, r3, #4
 800b6b4:	f003 0307 	and.w	r3, r3, #7
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685b      	ldr	r3, [r3, #4]
       ||
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d047      	beq.n	800b752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	73fb      	strb	r3, [r7, #15]
 800b6c6:	e044      	b.n	800b752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b03      	cmp	r3, #3
 800b6ce:	d018      	beq.n	800b702 <RCCEx_PLLSAI1_Config+0x86>
 800b6d0:	2b03      	cmp	r3, #3
 800b6d2:	d825      	bhi.n	800b720 <RCCEx_PLLSAI1_Config+0xa4>
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d002      	beq.n	800b6de <RCCEx_PLLSAI1_Config+0x62>
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d009      	beq.n	800b6f0 <RCCEx_PLLSAI1_Config+0x74>
 800b6dc:	e020      	b.n	800b720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b6de:	4b60      	ldr	r3, [pc, #384]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 0302 	and.w	r3, r3, #2
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d11d      	bne.n	800b726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6ee:	e01a      	b.n	800b726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b6f0:	4b5b      	ldr	r3, [pc, #364]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d116      	bne.n	800b72a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b700:	e013      	b.n	800b72a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b702:	4b57      	ldr	r3, [pc, #348]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10f      	bne.n	800b72e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b70e:	4b54      	ldr	r3, [pc, #336]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b716:	2b00      	cmp	r3, #0
 800b718:	d109      	bne.n	800b72e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b71e:	e006      	b.n	800b72e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	73fb      	strb	r3, [r7, #15]
      break;
 800b724:	e004      	b.n	800b730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b726:	bf00      	nop
 800b728:	e002      	b.n	800b730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b72a:	bf00      	nop
 800b72c:	e000      	b.n	800b730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b72e:	bf00      	nop
    }

    if(status == HAL_OK)
 800b730:	7bfb      	ldrb	r3, [r7, #15]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10d      	bne.n	800b752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b736:	4b4a      	ldr	r3, [pc, #296]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6819      	ldr	r1, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	3b01      	subs	r3, #1
 800b748:	011b      	lsls	r3, r3, #4
 800b74a:	430b      	orrs	r3, r1
 800b74c:	4944      	ldr	r1, [pc, #272]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b74e:	4313      	orrs	r3, r2
 800b750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b752:	7bfb      	ldrb	r3, [r7, #15]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d17d      	bne.n	800b854 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b758:	4b41      	ldr	r3, [pc, #260]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a40      	ldr	r2, [pc, #256]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b75e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b764:	f7fd f8f8 	bl	8008958 <HAL_GetTick>
 800b768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b76a:	e009      	b.n	800b780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b76c:	f7fd f8f4 	bl	8008958 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2b02      	cmp	r3, #2
 800b778:	d902      	bls.n	800b780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	73fb      	strb	r3, [r7, #15]
        break;
 800b77e:	e005      	b.n	800b78c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b780:	4b37      	ldr	r3, [pc, #220]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1ef      	bne.n	800b76c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d160      	bne.n	800b854 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d111      	bne.n	800b7bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b798:	4b31      	ldr	r3, [pc, #196]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b7a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	6892      	ldr	r2, [r2, #8]
 800b7a8:	0211      	lsls	r1, r2, #8
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	68d2      	ldr	r2, [r2, #12]
 800b7ae:	0912      	lsrs	r2, r2, #4
 800b7b0:	0452      	lsls	r2, r2, #17
 800b7b2:	430a      	orrs	r2, r1
 800b7b4:	492a      	ldr	r1, [pc, #168]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	610b      	str	r3, [r1, #16]
 800b7ba:	e027      	b.n	800b80c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d112      	bne.n	800b7e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b7c2:	4b27      	ldr	r3, [pc, #156]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b7ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	6892      	ldr	r2, [r2, #8]
 800b7d2:	0211      	lsls	r1, r2, #8
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	6912      	ldr	r2, [r2, #16]
 800b7d8:	0852      	lsrs	r2, r2, #1
 800b7da:	3a01      	subs	r2, #1
 800b7dc:	0552      	lsls	r2, r2, #21
 800b7de:	430a      	orrs	r2, r1
 800b7e0:	491f      	ldr	r1, [pc, #124]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	610b      	str	r3, [r1, #16]
 800b7e6:	e011      	b.n	800b80c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b7e8:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b7f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6892      	ldr	r2, [r2, #8]
 800b7f8:	0211      	lsls	r1, r2, #8
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	6952      	ldr	r2, [r2, #20]
 800b7fe:	0852      	lsrs	r2, r2, #1
 800b800:	3a01      	subs	r2, #1
 800b802:	0652      	lsls	r2, r2, #25
 800b804:	430a      	orrs	r2, r1
 800b806:	4916      	ldr	r1, [pc, #88]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b808:	4313      	orrs	r3, r2
 800b80a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b80c:	4b14      	ldr	r3, [pc, #80]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a13      	ldr	r2, [pc, #76]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b818:	f7fd f89e 	bl	8008958 <HAL_GetTick>
 800b81c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b81e:	e009      	b.n	800b834 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b820:	f7fd f89a 	bl	8008958 <HAL_GetTick>
 800b824:	4602      	mov	r2, r0
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d902      	bls.n	800b834 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800b82e:	2303      	movs	r3, #3
 800b830:	73fb      	strb	r3, [r7, #15]
          break;
 800b832:	e005      	b.n	800b840 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0ef      	beq.n	800b820 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b846:	4b06      	ldr	r3, [pc, #24]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b848:	691a      	ldr	r2, [r3, #16]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	4904      	ldr	r1, [pc, #16]	; (800b860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b850:	4313      	orrs	r3, r2
 800b852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b854:	7bfb      	ldrb	r3, [r7, #15]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	40021000 	.word	0x40021000

0800b864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b872:	4b6a      	ldr	r3, [pc, #424]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d018      	beq.n	800b8b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b87e:	4b67      	ldr	r3, [pc, #412]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	f003 0203 	and.w	r2, r3, #3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d10d      	bne.n	800b8aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
       ||
 800b892:	2b00      	cmp	r3, #0
 800b894:	d009      	beq.n	800b8aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b896:	4b61      	ldr	r3, [pc, #388]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	091b      	lsrs	r3, r3, #4
 800b89c:	f003 0307 	and.w	r3, r3, #7
 800b8a0:	1c5a      	adds	r2, r3, #1
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
       ||
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d047      	beq.n	800b93a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	73fb      	strb	r3, [r7, #15]
 800b8ae:	e044      	b.n	800b93a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d018      	beq.n	800b8ea <RCCEx_PLLSAI2_Config+0x86>
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d825      	bhi.n	800b908 <RCCEx_PLLSAI2_Config+0xa4>
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d002      	beq.n	800b8c6 <RCCEx_PLLSAI2_Config+0x62>
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d009      	beq.n	800b8d8 <RCCEx_PLLSAI2_Config+0x74>
 800b8c4:	e020      	b.n	800b908 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b8c6:	4b55      	ldr	r3, [pc, #340]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f003 0302 	and.w	r3, r3, #2
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d11d      	bne.n	800b90e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8d6:	e01a      	b.n	800b90e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b8d8:	4b50      	ldr	r3, [pc, #320]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d116      	bne.n	800b912 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8e8:	e013      	b.n	800b912 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b8ea:	4b4c      	ldr	r3, [pc, #304]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10f      	bne.n	800b916 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b8f6:	4b49      	ldr	r3, [pc, #292]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d109      	bne.n	800b916 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b906:	e006      	b.n	800b916 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	73fb      	strb	r3, [r7, #15]
      break;
 800b90c:	e004      	b.n	800b918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b90e:	bf00      	nop
 800b910:	e002      	b.n	800b918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b912:	bf00      	nop
 800b914:	e000      	b.n	800b918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b916:	bf00      	nop
    }

    if(status == HAL_OK)
 800b918:	7bfb      	ldrb	r3, [r7, #15]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d10d      	bne.n	800b93a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b91e:	4b3f      	ldr	r3, [pc, #252]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6819      	ldr	r1, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	3b01      	subs	r3, #1
 800b930:	011b      	lsls	r3, r3, #4
 800b932:	430b      	orrs	r3, r1
 800b934:	4939      	ldr	r1, [pc, #228]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b936:	4313      	orrs	r3, r2
 800b938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d167      	bne.n	800ba10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b940:	4b36      	ldr	r3, [pc, #216]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a35      	ldr	r2, [pc, #212]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b94a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b94c:	f7fd f804 	bl	8008958 <HAL_GetTick>
 800b950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b952:	e009      	b.n	800b968 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b954:	f7fd f800 	bl	8008958 <HAL_GetTick>
 800b958:	4602      	mov	r2, r0
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d902      	bls.n	800b968 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	73fb      	strb	r3, [r7, #15]
        break;
 800b966:	e005      	b.n	800b974 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b968:	4b2c      	ldr	r3, [pc, #176]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1ef      	bne.n	800b954 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b974:	7bfb      	ldrb	r3, [r7, #15]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d14a      	bne.n	800ba10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d111      	bne.n	800b9a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b980:	4b26      	ldr	r3, [pc, #152]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	6892      	ldr	r2, [r2, #8]
 800b990:	0211      	lsls	r1, r2, #8
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	68d2      	ldr	r2, [r2, #12]
 800b996:	0912      	lsrs	r2, r2, #4
 800b998:	0452      	lsls	r2, r2, #17
 800b99a:	430a      	orrs	r2, r1
 800b99c:	491f      	ldr	r1, [pc, #124]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	614b      	str	r3, [r1, #20]
 800b9a2:	e011      	b.n	800b9c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b9a4:	4b1d      	ldr	r3, [pc, #116]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b9ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	6892      	ldr	r2, [r2, #8]
 800b9b4:	0211      	lsls	r1, r2, #8
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	6912      	ldr	r2, [r2, #16]
 800b9ba:	0852      	lsrs	r2, r2, #1
 800b9bc:	3a01      	subs	r2, #1
 800b9be:	0652      	lsls	r2, r2, #25
 800b9c0:	430a      	orrs	r2, r1
 800b9c2:	4916      	ldr	r1, [pc, #88]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b9c8:	4b14      	ldr	r3, [pc, #80]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a13      	ldr	r2, [pc, #76]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b9ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9d4:	f7fc ffc0 	bl	8008958 <HAL_GetTick>
 800b9d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b9da:	e009      	b.n	800b9f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b9dc:	f7fc ffbc 	bl	8008958 <HAL_GetTick>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d902      	bls.n	800b9f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	73fb      	strb	r3, [r7, #15]
          break;
 800b9ee:	e005      	b.n	800b9fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d0ef      	beq.n	800b9dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800b9fc:	7bfb      	ldrb	r3, [r7, #15]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d106      	bne.n	800ba10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ba02:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba04:	695a      	ldr	r2, [r3, #20]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	4904      	ldr	r1, [pc, #16]	; (800ba1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	40021000 	.word	0x40021000

0800ba20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d06c      	beq.n	800bb0c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d106      	bne.n	800ba4c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f002 fb30 	bl	800e0ac <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	22ca      	movs	r2, #202	; 0xca
 800ba5a:	625a      	str	r2, [r3, #36]	; 0x24
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2253      	movs	r2, #83	; 0x53
 800ba62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f9a0 	bl	800bdaa <RTC_EnterInitMode>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d14b      	bne.n	800bb0c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	6812      	ldr	r2, [r2, #0]
 800ba7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba86:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6899      	ldr	r1, [r3, #8]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	431a      	orrs	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	68d2      	ldr	r2, [r2, #12]
 800baae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6919      	ldr	r1, [r3, #16]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	041a      	lsls	r2, r3, #16
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	430a      	orrs	r2, r1
 800bac2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f9a3 	bl	800be10 <RTC_ExitInitMode>
 800baca:	4603      	mov	r3, r0
 800bacc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d11b      	bne.n	800bb0c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f022 0203 	bic.w	r2, r2, #3
 800bae2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	69da      	ldr	r2, [r3, #28]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	431a      	orrs	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	430a      	orrs	r2, r1
 800bafa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	22ff      	movs	r2, #255	; 0xff
 800bb02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bb16:	b590      	push	{r4, r7, lr}
 800bb18:	b087      	sub	sp, #28
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	60b9      	str	r1, [r7, #8]
 800bb20:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d101      	bne.n	800bb30 <HAL_RTC_SetTime+0x1a>
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	e08b      	b.n	800bc48 <HAL_RTC_SetTime+0x132>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	22ca      	movs	r2, #202	; 0xca
 800bb46:	625a      	str	r2, [r3, #36]	; 0x24
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2253      	movs	r2, #83	; 0x53
 800bb4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 f92a 	bl	800bdaa <RTC_EnterInitMode>
 800bb56:	4603      	mov	r3, r0
 800bb58:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bb5a:	7cfb      	ldrb	r3, [r7, #19]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d163      	bne.n	800bc28 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d126      	bne.n	800bbb4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d102      	bne.n	800bb7a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2200      	movs	r2, #0
 800bb78:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 f984 	bl	800be8c <RTC_ByteToBcd2>
 800bb84:	4603      	mov	r3, r0
 800bb86:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	785b      	ldrb	r3, [r3, #1]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 f97d 	bl	800be8c <RTC_ByteToBcd2>
 800bb92:	4603      	mov	r3, r0
 800bb94:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb96:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	789b      	ldrb	r3, [r3, #2]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f000 f975 	bl	800be8c <RTC_ByteToBcd2>
 800bba2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bba4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	78db      	ldrb	r3, [r3, #3]
 800bbac:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e018      	b.n	800bbe6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d102      	bne.n	800bbc8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	785b      	ldrb	r3, [r3, #1]
 800bbd2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bbd4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bbda:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	78db      	ldrb	r3, [r3, #3]
 800bbe0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bbf0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bbf4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bc04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6899      	ldr	r1, [r3, #8]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	68da      	ldr	r2, [r3, #12]
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	431a      	orrs	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 f8f6 	bl	800be10 <RTC_ExitInitMode>
 800bc24:	4603      	mov	r3, r0
 800bc26:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	22ff      	movs	r2, #255	; 0xff
 800bc2e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800bc30:	7cfb      	ldrb	r3, [r7, #19]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d103      	bne.n	800bc3e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800bc46:	7cfb      	ldrb	r3, [r7, #19]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	371c      	adds	r7, #28
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd90      	pop	{r4, r7, pc}

0800bc50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bc50:	b590      	push	{r4, r7, lr}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d101      	bne.n	800bc6a <HAL_RTC_SetDate+0x1a>
 800bc66:	2302      	movs	r3, #2
 800bc68:	e075      	b.n	800bd56 <HAL_RTC_SetDate+0x106>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2202      	movs	r2, #2
 800bc76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10e      	bne.n	800bc9e <HAL_RTC_SetDate+0x4e>
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	785b      	ldrb	r3, [r3, #1]
 800bc84:	f003 0310 	and.w	r3, r3, #16
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d008      	beq.n	800bc9e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	785b      	ldrb	r3, [r3, #1]
 800bc90:	f023 0310 	bic.w	r3, r3, #16
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	330a      	adds	r3, #10
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11c      	bne.n	800bcde <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	78db      	ldrb	r3, [r3, #3]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 f8ef 	bl	800be8c <RTC_ByteToBcd2>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	785b      	ldrb	r3, [r3, #1]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 f8e8 	bl	800be8c <RTC_ByteToBcd2>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bcc0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	789b      	ldrb	r3, [r3, #2]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 f8e0 	bl	800be8c <RTC_ByteToBcd2>
 800bccc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bcce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	617b      	str	r3, [r7, #20]
 800bcdc:	e00e      	b.n	800bcfc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	78db      	ldrb	r3, [r3, #3]
 800bce2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	785b      	ldrb	r3, [r3, #1]
 800bce8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bcea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bcf0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	22ca      	movs	r2, #202	; 0xca
 800bd02:	625a      	str	r2, [r3, #36]	; 0x24
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2253      	movs	r2, #83	; 0x53
 800bd0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f000 f84c 	bl	800bdaa <RTC_EnterInitMode>
 800bd12:	4603      	mov	r3, r0
 800bd14:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bd16:	7cfb      	ldrb	r3, [r7, #19]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10c      	bne.n	800bd36 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bd2a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 f86f 	bl	800be10 <RTC_ExitInitMode>
 800bd32:	4603      	mov	r3, r0
 800bd34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	22ff      	movs	r2, #255	; 0xff
 800bd3c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800bd3e:	7cfb      	ldrb	r3, [r7, #19]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d103      	bne.n	800bd4c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800bd54:	7cfb      	ldrb	r3, [r7, #19]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd90      	pop	{r4, r7, pc}

0800bd5e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b084      	sub	sp, #16
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bd74:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800bd76:	f7fc fdef 	bl	8008958 <HAL_GetTick>
 800bd7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bd7c:	e009      	b.n	800bd92 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd7e:	f7fc fdeb 	bl	8008958 <HAL_GetTick>
 800bd82:	4602      	mov	r2, r0
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd8c:	d901      	bls.n	800bd92 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e007      	b.n	800bda2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	f003 0320 	and.w	r3, r3, #32
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d0ee      	beq.n	800bd7e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b084      	sub	sp, #16
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d120      	bne.n	800be06 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdcc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bdce:	f7fc fdc3 	bl	8008958 <HAL_GetTick>
 800bdd2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bdd4:	e00d      	b.n	800bdf2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bdd6:	f7fc fdbf 	bl	8008958 <HAL_GetTick>
 800bdda:	4602      	mov	r2, r0
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bde4:	d905      	bls.n	800bdf2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800bde6:	2303      	movs	r3, #3
 800bde8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2203      	movs	r2, #3
 800bdee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <RTC_EnterInitMode+0x5c>
 800be00:	7bfb      	ldrb	r3, [r7, #15]
 800be02:	2b03      	cmp	r3, #3
 800be04:	d1e7      	bne.n	800bdd6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800be06:	7bfb      	ldrb	r3, [r7, #15]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800be1c:	4b1a      	ldr	r3, [pc, #104]	; (800be88 <RTC_ExitInitMode+0x78>)
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	4a19      	ldr	r2, [pc, #100]	; (800be88 <RTC_ExitInitMode+0x78>)
 800be22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be26:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800be28:	4b17      	ldr	r3, [pc, #92]	; (800be88 <RTC_ExitInitMode+0x78>)
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	f003 0320 	and.w	r3, r3, #32
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10c      	bne.n	800be4e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff ff92 	bl	800bd5e <HAL_RTC_WaitForSynchro>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d01e      	beq.n	800be7e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2203      	movs	r2, #3
 800be44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	73fb      	strb	r3, [r7, #15]
 800be4c:	e017      	b.n	800be7e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800be4e:	4b0e      	ldr	r3, [pc, #56]	; (800be88 <RTC_ExitInitMode+0x78>)
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	4a0d      	ldr	r2, [pc, #52]	; (800be88 <RTC_ExitInitMode+0x78>)
 800be54:	f023 0320 	bic.w	r3, r3, #32
 800be58:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff ff7f 	bl	800bd5e <HAL_RTC_WaitForSynchro>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d005      	beq.n	800be72 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2203      	movs	r2, #3
 800be6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800be72:	4b05      	ldr	r3, [pc, #20]	; (800be88 <RTC_ExitInitMode+0x78>)
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	4a04      	ldr	r2, [pc, #16]	; (800be88 <RTC_ExitInitMode+0x78>)
 800be78:	f043 0320 	orr.w	r3, r3, #32
 800be7c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	40002800 	.word	0x40002800

0800be8c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800be9a:	79fb      	ldrb	r3, [r7, #7]
 800be9c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800be9e:	e005      	b.n	800beac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3301      	adds	r3, #1
 800bea4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800bea6:	7afb      	ldrb	r3, [r7, #11]
 800bea8:	3b0a      	subs	r3, #10
 800beaa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800beac:	7afb      	ldrb	r3, [r7, #11]
 800beae:	2b09      	cmp	r3, #9
 800beb0:	d8f6      	bhi.n	800bea0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	011b      	lsls	r3, r3, #4
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	7afb      	ldrb	r3, [r7, #11]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	b2db      	uxtb	r3, r3
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e049      	b.n	800bf72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d106      	bne.n	800bef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f002 f90c 	bl	800e110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2202      	movs	r2, #2
 800befc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	3304      	adds	r3, #4
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f000 fa46 	bl	800c39c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	f003 0302 	and.w	r3, r3, #2
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d122      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	f003 0302 	and.w	r3, r3, #2
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d11b      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f06f 0202 	mvn.w	r2, #2
 800bfa6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	699b      	ldr	r3, [r3, #24]
 800bfb4:	f003 0303 	and.w	r3, r3, #3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 f9ce 	bl	800c35e <HAL_TIM_IC_CaptureCallback>
 800bfc2:	e005      	b.n	800bfd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 f9c0 	bl	800c34a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f9d1 	bl	800c372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b04      	cmp	r3, #4
 800bfe2:	d122      	bne.n	800c02a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f003 0304 	and.w	r3, r3, #4
 800bfee:	2b04      	cmp	r3, #4
 800bff0:	d11b      	bne.n	800c02a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f06f 0204 	mvn.w	r2, #4
 800bffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2202      	movs	r2, #2
 800c000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d003      	beq.n	800c018 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f9a4 	bl	800c35e <HAL_TIM_IC_CaptureCallback>
 800c016:	e005      	b.n	800c024 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f996 	bl	800c34a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f9a7 	bl	800c372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	f003 0308 	and.w	r3, r3, #8
 800c034:	2b08      	cmp	r3, #8
 800c036:	d122      	bne.n	800c07e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	f003 0308 	and.w	r3, r3, #8
 800c042:	2b08      	cmp	r3, #8
 800c044:	d11b      	bne.n	800c07e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f06f 0208 	mvn.w	r2, #8
 800c04e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2204      	movs	r2, #4
 800c054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	69db      	ldr	r3, [r3, #28]
 800c05c:	f003 0303 	and.w	r3, r3, #3
 800c060:	2b00      	cmp	r3, #0
 800c062:	d003      	beq.n	800c06c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 f97a 	bl	800c35e <HAL_TIM_IC_CaptureCallback>
 800c06a:	e005      	b.n	800c078 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f96c 	bl	800c34a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f97d 	bl	800c372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	f003 0310 	and.w	r3, r3, #16
 800c088:	2b10      	cmp	r3, #16
 800c08a:	d122      	bne.n	800c0d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	f003 0310 	and.w	r3, r3, #16
 800c096:	2b10      	cmp	r3, #16
 800c098:	d11b      	bne.n	800c0d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f06f 0210 	mvn.w	r2, #16
 800c0a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2208      	movs	r2, #8
 800c0a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	69db      	ldr	r3, [r3, #28]
 800c0b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d003      	beq.n	800c0c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f950 	bl	800c35e <HAL_TIM_IC_CaptureCallback>
 800c0be:	e005      	b.n	800c0cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f942 	bl	800c34a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f953 	bl	800c372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d10e      	bne.n	800c0fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	f003 0301 	and.w	r3, r3, #1
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d107      	bne.n	800c0fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f06f 0201 	mvn.w	r2, #1
 800c0f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f001 fb1f 	bl	800d73c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c108:	2b80      	cmp	r3, #128	; 0x80
 800c10a:	d10e      	bne.n	800c12a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c116:	2b80      	cmp	r3, #128	; 0x80
 800c118:	d107      	bne.n	800c12a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 faff 	bl	800c728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c138:	d10e      	bne.n	800c158 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c144:	2b80      	cmp	r3, #128	; 0x80
 800c146:	d107      	bne.n	800c158 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 faf2 	bl	800c73c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c162:	2b40      	cmp	r3, #64	; 0x40
 800c164:	d10e      	bne.n	800c184 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c170:	2b40      	cmp	r3, #64	; 0x40
 800c172:	d107      	bne.n	800c184 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c17c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f901 	bl	800c386 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	f003 0320 	and.w	r3, r3, #32
 800c18e:	2b20      	cmp	r3, #32
 800c190:	d10e      	bne.n	800c1b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	f003 0320 	and.w	r3, r3, #32
 800c19c:	2b20      	cmp	r3, #32
 800c19e:	d107      	bne.n	800c1b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f06f 0220 	mvn.w	r2, #32
 800c1a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fab2 	bl	800c714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d101      	bne.n	800c1d4 <HAL_TIM_ConfigClockSource+0x1c>
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	e0b6      	b.n	800c342 <HAL_TIM_ConfigClockSource+0x18a>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c1f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c210:	d03e      	beq.n	800c290 <HAL_TIM_ConfigClockSource+0xd8>
 800c212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c216:	f200 8087 	bhi.w	800c328 <HAL_TIM_ConfigClockSource+0x170>
 800c21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c21e:	f000 8086 	beq.w	800c32e <HAL_TIM_ConfigClockSource+0x176>
 800c222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c226:	d87f      	bhi.n	800c328 <HAL_TIM_ConfigClockSource+0x170>
 800c228:	2b70      	cmp	r3, #112	; 0x70
 800c22a:	d01a      	beq.n	800c262 <HAL_TIM_ConfigClockSource+0xaa>
 800c22c:	2b70      	cmp	r3, #112	; 0x70
 800c22e:	d87b      	bhi.n	800c328 <HAL_TIM_ConfigClockSource+0x170>
 800c230:	2b60      	cmp	r3, #96	; 0x60
 800c232:	d050      	beq.n	800c2d6 <HAL_TIM_ConfigClockSource+0x11e>
 800c234:	2b60      	cmp	r3, #96	; 0x60
 800c236:	d877      	bhi.n	800c328 <HAL_TIM_ConfigClockSource+0x170>
 800c238:	2b50      	cmp	r3, #80	; 0x50
 800c23a:	d03c      	beq.n	800c2b6 <HAL_TIM_ConfigClockSource+0xfe>
 800c23c:	2b50      	cmp	r3, #80	; 0x50
 800c23e:	d873      	bhi.n	800c328 <HAL_TIM_ConfigClockSource+0x170>
 800c240:	2b40      	cmp	r3, #64	; 0x40
 800c242:	d058      	beq.n	800c2f6 <HAL_TIM_ConfigClockSource+0x13e>
 800c244:	2b40      	cmp	r3, #64	; 0x40
 800c246:	d86f      	bhi.n	800c328 <HAL_TIM_ConfigClockSource+0x170>
 800c248:	2b30      	cmp	r3, #48	; 0x30
 800c24a:	d064      	beq.n	800c316 <HAL_TIM_ConfigClockSource+0x15e>
 800c24c:	2b30      	cmp	r3, #48	; 0x30
 800c24e:	d86b      	bhi.n	800c328 <HAL_TIM_ConfigClockSource+0x170>
 800c250:	2b20      	cmp	r3, #32
 800c252:	d060      	beq.n	800c316 <HAL_TIM_ConfigClockSource+0x15e>
 800c254:	2b20      	cmp	r3, #32
 800c256:	d867      	bhi.n	800c328 <HAL_TIM_ConfigClockSource+0x170>
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d05c      	beq.n	800c316 <HAL_TIM_ConfigClockSource+0x15e>
 800c25c:	2b10      	cmp	r3, #16
 800c25e:	d05a      	beq.n	800c316 <HAL_TIM_ConfigClockSource+0x15e>
 800c260:	e062      	b.n	800c328 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6818      	ldr	r0, [r3, #0]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	6899      	ldr	r1, [r3, #8]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	685a      	ldr	r2, [r3, #4]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	f000 f9a7 	bl	800c5c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	609a      	str	r2, [r3, #8]
      break;
 800c28e:	e04f      	b.n	800c330 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6818      	ldr	r0, [r3, #0]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	6899      	ldr	r1, [r3, #8]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	f000 f990 	bl	800c5c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	689a      	ldr	r2, [r3, #8]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2b2:	609a      	str	r2, [r3, #8]
      break;
 800c2b4:	e03c      	b.n	800c330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6818      	ldr	r0, [r3, #0]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	6859      	ldr	r1, [r3, #4]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	f000 f904 	bl	800c4d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2150      	movs	r1, #80	; 0x50
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 f95d 	bl	800c58e <TIM_ITRx_SetConfig>
      break;
 800c2d4:	e02c      	b.n	800c330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6818      	ldr	r0, [r3, #0]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	6859      	ldr	r1, [r3, #4]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f000 f923 	bl	800c52e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2160      	movs	r1, #96	; 0x60
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 f94d 	bl	800c58e <TIM_ITRx_SetConfig>
      break;
 800c2f4:	e01c      	b.n	800c330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6818      	ldr	r0, [r3, #0]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	6859      	ldr	r1, [r3, #4]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	461a      	mov	r2, r3
 800c304:	f000 f8e4 	bl	800c4d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2140      	movs	r1, #64	; 0x40
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 f93d 	bl	800c58e <TIM_ITRx_SetConfig>
      break;
 800c314:	e00c      	b.n	800c330 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4619      	mov	r1, r3
 800c320:	4610      	mov	r0, r2
 800c322:	f000 f934 	bl	800c58e <TIM_ITRx_SetConfig>
      break;
 800c326:	e003      	b.n	800c330 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	73fb      	strb	r3, [r7, #15]
      break;
 800c32c:	e000      	b.n	800c330 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c32e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c340:	7bfb      	ldrb	r3, [r7, #15]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b083      	sub	sp, #12
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c352:	bf00      	nop
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c372:	b480      	push	{r7}
 800c374:	b083      	sub	sp, #12
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c37a:	bf00      	nop
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c386:	b480      	push	{r7}
 800c388:	b083      	sub	sp, #12
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c38e:	bf00      	nop
 800c390:	370c      	adds	r7, #12
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
	...

0800c39c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a40      	ldr	r2, [pc, #256]	; (800c4b0 <TIM_Base_SetConfig+0x114>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d013      	beq.n	800c3dc <TIM_Base_SetConfig+0x40>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3ba:	d00f      	beq.n	800c3dc <TIM_Base_SetConfig+0x40>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a3d      	ldr	r2, [pc, #244]	; (800c4b4 <TIM_Base_SetConfig+0x118>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d00b      	beq.n	800c3dc <TIM_Base_SetConfig+0x40>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a3c      	ldr	r2, [pc, #240]	; (800c4b8 <TIM_Base_SetConfig+0x11c>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d007      	beq.n	800c3dc <TIM_Base_SetConfig+0x40>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a3b      	ldr	r2, [pc, #236]	; (800c4bc <TIM_Base_SetConfig+0x120>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d003      	beq.n	800c3dc <TIM_Base_SetConfig+0x40>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a3a      	ldr	r2, [pc, #232]	; (800c4c0 <TIM_Base_SetConfig+0x124>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d108      	bne.n	800c3ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4a2f      	ldr	r2, [pc, #188]	; (800c4b0 <TIM_Base_SetConfig+0x114>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d01f      	beq.n	800c436 <TIM_Base_SetConfig+0x9a>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3fc:	d01b      	beq.n	800c436 <TIM_Base_SetConfig+0x9a>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4a2c      	ldr	r2, [pc, #176]	; (800c4b4 <TIM_Base_SetConfig+0x118>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d017      	beq.n	800c436 <TIM_Base_SetConfig+0x9a>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4a2b      	ldr	r2, [pc, #172]	; (800c4b8 <TIM_Base_SetConfig+0x11c>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d013      	beq.n	800c436 <TIM_Base_SetConfig+0x9a>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	4a2a      	ldr	r2, [pc, #168]	; (800c4bc <TIM_Base_SetConfig+0x120>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d00f      	beq.n	800c436 <TIM_Base_SetConfig+0x9a>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a29      	ldr	r2, [pc, #164]	; (800c4c0 <TIM_Base_SetConfig+0x124>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d00b      	beq.n	800c436 <TIM_Base_SetConfig+0x9a>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a28      	ldr	r2, [pc, #160]	; (800c4c4 <TIM_Base_SetConfig+0x128>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d007      	beq.n	800c436 <TIM_Base_SetConfig+0x9a>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a27      	ldr	r2, [pc, #156]	; (800c4c8 <TIM_Base_SetConfig+0x12c>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d003      	beq.n	800c436 <TIM_Base_SetConfig+0x9a>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a26      	ldr	r2, [pc, #152]	; (800c4cc <TIM_Base_SetConfig+0x130>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d108      	bne.n	800c448 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c43c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	4313      	orrs	r3, r2
 800c446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	689a      	ldr	r2, [r3, #8]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4a10      	ldr	r2, [pc, #64]	; (800c4b0 <TIM_Base_SetConfig+0x114>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d00f      	beq.n	800c494 <TIM_Base_SetConfig+0xf8>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	4a12      	ldr	r2, [pc, #72]	; (800c4c0 <TIM_Base_SetConfig+0x124>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d00b      	beq.n	800c494 <TIM_Base_SetConfig+0xf8>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a11      	ldr	r2, [pc, #68]	; (800c4c4 <TIM_Base_SetConfig+0x128>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d007      	beq.n	800c494 <TIM_Base_SetConfig+0xf8>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a10      	ldr	r2, [pc, #64]	; (800c4c8 <TIM_Base_SetConfig+0x12c>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d003      	beq.n	800c494 <TIM_Base_SetConfig+0xf8>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a0f      	ldr	r2, [pc, #60]	; (800c4cc <TIM_Base_SetConfig+0x130>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d103      	bne.n	800c49c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	691a      	ldr	r2, [r3, #16]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	615a      	str	r2, [r3, #20]
}
 800c4a2:	bf00      	nop
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	40012c00 	.word	0x40012c00
 800c4b4:	40000400 	.word	0x40000400
 800c4b8:	40000800 	.word	0x40000800
 800c4bc:	40000c00 	.word	0x40000c00
 800c4c0:	40013400 	.word	0x40013400
 800c4c4:	40014000 	.word	0x40014000
 800c4c8:	40014400 	.word	0x40014400
 800c4cc:	40014800 	.word	0x40014800

0800c4d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b087      	sub	sp, #28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6a1b      	ldr	r3, [r3, #32]
 800c4e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	f023 0201 	bic.w	r2, r3, #1
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c4fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	4313      	orrs	r3, r2
 800c504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f023 030a 	bic.w	r3, r3, #10
 800c50c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4313      	orrs	r3, r2
 800c514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	693a      	ldr	r2, [r7, #16]
 800c51a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	621a      	str	r2, [r3, #32]
}
 800c522:	bf00      	nop
 800c524:	371c      	adds	r7, #28
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c52e:	b480      	push	{r7}
 800c530:	b087      	sub	sp, #28
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	f023 0210 	bic.w	r2, r3, #16
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6a1b      	ldr	r3, [r3, #32]
 800c550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	031b      	lsls	r3, r3, #12
 800c55e:	697a      	ldr	r2, [r7, #20]
 800c560:	4313      	orrs	r3, r2
 800c562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c56a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	011b      	lsls	r3, r3, #4
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	4313      	orrs	r3, r2
 800c574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	693a      	ldr	r2, [r7, #16]
 800c580:	621a      	str	r2, [r3, #32]
}
 800c582:	bf00      	nop
 800c584:	371c      	adds	r7, #28
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c58e:	b480      	push	{r7}
 800c590:	b085      	sub	sp, #20
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f043 0307 	orr.w	r3, r3, #7
 800c5b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	609a      	str	r2, [r3, #8]
}
 800c5b8:	bf00      	nop
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	021a      	lsls	r2, r3, #8
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	697a      	ldr	r2, [r7, #20]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	609a      	str	r2, [r3, #8]
}
 800c5f8:	bf00      	nop
 800c5fa:	371c      	adds	r7, #28
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c614:	2b01      	cmp	r3, #1
 800c616:	d101      	bne.n	800c61c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c618:	2302      	movs	r3, #2
 800c61a:	e068      	b.n	800c6ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2202      	movs	r2, #2
 800c628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a2e      	ldr	r2, [pc, #184]	; (800c6fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d004      	beq.n	800c650 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a2d      	ldr	r2, [pc, #180]	; (800c700 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d108      	bne.n	800c662 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	4313      	orrs	r3, r2
 800c660:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	4313      	orrs	r3, r2
 800c672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a1e      	ldr	r2, [pc, #120]	; (800c6fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d01d      	beq.n	800c6c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c68e:	d018      	beq.n	800c6c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a1b      	ldr	r2, [pc, #108]	; (800c704 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d013      	beq.n	800c6c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a1a      	ldr	r2, [pc, #104]	; (800c708 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d00e      	beq.n	800c6c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a18      	ldr	r2, [pc, #96]	; (800c70c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d009      	beq.n	800c6c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a13      	ldr	r2, [pc, #76]	; (800c700 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d004      	beq.n	800c6c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a14      	ldr	r2, [pc, #80]	; (800c710 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d10c      	bne.n	800c6dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	40012c00 	.word	0x40012c00
 800c700:	40013400 	.word	0x40013400
 800c704:	40000400 	.word	0x40000400
 800c708:	40000800 	.word	0x40000800
 800c70c:	40000c00 	.word	0x40000c00
 800c710:	40014000 	.word	0x40014000

0800c714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c730:	bf00      	nop
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c744:	bf00      	nop
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	e040      	b.n	800c7e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f83a 	bl	800c7ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2224      	movs	r2, #36	; 0x24
 800c77c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f022 0201 	bic.w	r2, r2, #1
 800c78c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f94a 	bl	800ca28 <UART_SetConfig>
 800c794:	4603      	mov	r3, r0
 800c796:	2b01      	cmp	r3, #1
 800c798:	d101      	bne.n	800c79e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	e022      	b.n	800c7e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fbf6 	bl	800cf98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c7ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	689a      	ldr	r2, [r3, #8]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c7ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f042 0201 	orr.w	r2, r2, #1
 800c7da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fc7d 	bl	800d0dc <UART_CheckIdleState>
 800c7e2:	4603      	mov	r3, r0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b08a      	sub	sp, #40	; 0x28
 800c804:	af02      	add	r7, sp, #8
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	4613      	mov	r3, r2
 800c80e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c814:	2b20      	cmp	r3, #32
 800c816:	f040 8082 	bne.w	800c91e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d002      	beq.n	800c826 <HAL_UART_Transmit+0x26>
 800c820:	88fb      	ldrh	r3, [r7, #6]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	e07a      	b.n	800c920 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c830:	2b01      	cmp	r3, #1
 800c832:	d101      	bne.n	800c838 <HAL_UART_Transmit+0x38>
 800c834:	2302      	movs	r3, #2
 800c836:	e073      	b.n	800c920 <HAL_UART_Transmit+0x120>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2200      	movs	r2, #0
 800c844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2221      	movs	r2, #33	; 0x21
 800c84c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c84e:	f7fc f883 	bl	8008958 <HAL_GetTick>
 800c852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	88fa      	ldrh	r2, [r7, #6]
 800c858:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	88fa      	ldrh	r2, [r7, #6]
 800c860:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c86c:	d108      	bne.n	800c880 <HAL_UART_Transmit+0x80>
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d104      	bne.n	800c880 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800c876:	2300      	movs	r3, #0
 800c878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	61bb      	str	r3, [r7, #24]
 800c87e:	e003      	b.n	800c888 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c884:	2300      	movs	r3, #0
 800c886:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800c890:	e02d      	b.n	800c8ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	2200      	movs	r2, #0
 800c89a:	2180      	movs	r1, #128	; 0x80
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f000 fc66 	bl	800d16e <UART_WaitOnFlagUntilTimeout>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d001      	beq.n	800c8ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	e039      	b.n	800c920 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10b      	bne.n	800c8ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	881a      	ldrh	r2, [r3, #0]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c8be:	b292      	uxth	r2, r2
 800c8c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	3302      	adds	r3, #2
 800c8c6:	61bb      	str	r3, [r7, #24]
 800c8c8:	e008      	b.n	800c8dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	781a      	ldrb	r2, [r3, #0]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	b292      	uxth	r2, r2
 800c8d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1cb      	bne.n	800c892 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	2200      	movs	r2, #0
 800c902:	2140      	movs	r1, #64	; 0x40
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f000 fc32 	bl	800d16e <UART_WaitOnFlagUntilTimeout>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800c910:	2303      	movs	r3, #3
 800c912:	e005      	b.n	800c920 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2220      	movs	r2, #32
 800c918:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c91a:	2300      	movs	r3, #0
 800c91c:	e000      	b.n	800c920 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800c91e:	2302      	movs	r3, #2
  }
}
 800c920:	4618      	mov	r0, r3
 800c922:	3720      	adds	r7, #32
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08a      	sub	sp, #40	; 0x28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4613      	mov	r3, r2
 800c934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c93a:	2b20      	cmp	r3, #32
 800c93c:	d142      	bne.n	800c9c4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d002      	beq.n	800c94a <HAL_UART_Receive_DMA+0x22>
 800c944:	88fb      	ldrh	r3, [r7, #6]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d101      	bne.n	800c94e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	e03b      	b.n	800c9c6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c954:	2b01      	cmp	r3, #1
 800c956:	d101      	bne.n	800c95c <HAL_UART_Receive_DMA+0x34>
 800c958:	2302      	movs	r3, #2
 800c95a:	e034      	b.n	800c9c6 <HAL_UART_Receive_DMA+0x9e>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2201      	movs	r2, #1
 800c960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a18      	ldr	r2, [pc, #96]	; (800c9d0 <HAL_UART_Receive_DMA+0xa8>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d01f      	beq.n	800c9b4 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d018      	beq.n	800c9b4 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	e853 3f00 	ldrex	r3, [r3]
 800c98e:	613b      	str	r3, [r7, #16]
   return(result);
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c996:	627b      	str	r3, [r7, #36]	; 0x24
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	461a      	mov	r2, r3
 800c99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a0:	623b      	str	r3, [r7, #32]
 800c9a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a4:	69f9      	ldr	r1, [r7, #28]
 800c9a6:	6a3a      	ldr	r2, [r7, #32]
 800c9a8:	e841 2300 	strex	r3, r2, [r1]
 800c9ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1e6      	bne.n	800c982 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c9b4:	88fb      	ldrh	r3, [r7, #6]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	68b9      	ldr	r1, [r7, #8]
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f000 fc9c 	bl	800d2f8 <UART_Start_Receive_DMA>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	e000      	b.n	800c9c6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c9c4:	2302      	movs	r3, #2
  }
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3728      	adds	r7, #40	; 0x28
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	40008000 	.word	0x40008000

0800c9d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca2c:	b08a      	sub	sp, #40	; 0x28
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	689a      	ldr	r2, [r3, #8]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	431a      	orrs	r2, r3
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	695b      	ldr	r3, [r3, #20]
 800ca46:	431a      	orrs	r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	69db      	ldr	r3, [r3, #28]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	4ba4      	ldr	r3, [pc, #656]	; (800cce8 <UART_SetConfig+0x2c0>)
 800ca58:	4013      	ands	r3, r2
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	6812      	ldr	r2, [r2, #0]
 800ca5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca60:	430b      	orrs	r3, r1
 800ca62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	68da      	ldr	r2, [r3, #12]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	430a      	orrs	r2, r1
 800ca78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a99      	ldr	r2, [pc, #612]	; (800ccec <UART_SetConfig+0x2c4>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d004      	beq.n	800ca94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca90:	4313      	orrs	r3, r2
 800ca92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caa4:	430a      	orrs	r2, r1
 800caa6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a90      	ldr	r2, [pc, #576]	; (800ccf0 <UART_SetConfig+0x2c8>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d126      	bne.n	800cb00 <UART_SetConfig+0xd8>
 800cab2:	4b90      	ldr	r3, [pc, #576]	; (800ccf4 <UART_SetConfig+0x2cc>)
 800cab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cab8:	f003 0303 	and.w	r3, r3, #3
 800cabc:	2b03      	cmp	r3, #3
 800cabe:	d81b      	bhi.n	800caf8 <UART_SetConfig+0xd0>
 800cac0:	a201      	add	r2, pc, #4	; (adr r2, 800cac8 <UART_SetConfig+0xa0>)
 800cac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac6:	bf00      	nop
 800cac8:	0800cad9 	.word	0x0800cad9
 800cacc:	0800cae9 	.word	0x0800cae9
 800cad0:	0800cae1 	.word	0x0800cae1
 800cad4:	0800caf1 	.word	0x0800caf1
 800cad8:	2301      	movs	r3, #1
 800cada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cade:	e116      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cae0:	2302      	movs	r3, #2
 800cae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cae6:	e112      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cae8:	2304      	movs	r3, #4
 800caea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800caee:	e10e      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800caf0:	2308      	movs	r3, #8
 800caf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800caf6:	e10a      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800caf8:	2310      	movs	r3, #16
 800cafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cafe:	e106      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a7c      	ldr	r2, [pc, #496]	; (800ccf8 <UART_SetConfig+0x2d0>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d138      	bne.n	800cb7c <UART_SetConfig+0x154>
 800cb0a:	4b7a      	ldr	r3, [pc, #488]	; (800ccf4 <UART_SetConfig+0x2cc>)
 800cb0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb10:	f003 030c 	and.w	r3, r3, #12
 800cb14:	2b0c      	cmp	r3, #12
 800cb16:	d82d      	bhi.n	800cb74 <UART_SetConfig+0x14c>
 800cb18:	a201      	add	r2, pc, #4	; (adr r2, 800cb20 <UART_SetConfig+0xf8>)
 800cb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1e:	bf00      	nop
 800cb20:	0800cb55 	.word	0x0800cb55
 800cb24:	0800cb75 	.word	0x0800cb75
 800cb28:	0800cb75 	.word	0x0800cb75
 800cb2c:	0800cb75 	.word	0x0800cb75
 800cb30:	0800cb65 	.word	0x0800cb65
 800cb34:	0800cb75 	.word	0x0800cb75
 800cb38:	0800cb75 	.word	0x0800cb75
 800cb3c:	0800cb75 	.word	0x0800cb75
 800cb40:	0800cb5d 	.word	0x0800cb5d
 800cb44:	0800cb75 	.word	0x0800cb75
 800cb48:	0800cb75 	.word	0x0800cb75
 800cb4c:	0800cb75 	.word	0x0800cb75
 800cb50:	0800cb6d 	.word	0x0800cb6d
 800cb54:	2300      	movs	r3, #0
 800cb56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb5a:	e0d8      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb62:	e0d4      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cb64:	2304      	movs	r3, #4
 800cb66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb6a:	e0d0      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cb6c:	2308      	movs	r3, #8
 800cb6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb72:	e0cc      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cb74:	2310      	movs	r3, #16
 800cb76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb7a:	e0c8      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a5e      	ldr	r2, [pc, #376]	; (800ccfc <UART_SetConfig+0x2d4>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d125      	bne.n	800cbd2 <UART_SetConfig+0x1aa>
 800cb86:	4b5b      	ldr	r3, [pc, #364]	; (800ccf4 <UART_SetConfig+0x2cc>)
 800cb88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cb90:	2b30      	cmp	r3, #48	; 0x30
 800cb92:	d016      	beq.n	800cbc2 <UART_SetConfig+0x19a>
 800cb94:	2b30      	cmp	r3, #48	; 0x30
 800cb96:	d818      	bhi.n	800cbca <UART_SetConfig+0x1a2>
 800cb98:	2b20      	cmp	r3, #32
 800cb9a:	d00a      	beq.n	800cbb2 <UART_SetConfig+0x18a>
 800cb9c:	2b20      	cmp	r3, #32
 800cb9e:	d814      	bhi.n	800cbca <UART_SetConfig+0x1a2>
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <UART_SetConfig+0x182>
 800cba4:	2b10      	cmp	r3, #16
 800cba6:	d008      	beq.n	800cbba <UART_SetConfig+0x192>
 800cba8:	e00f      	b.n	800cbca <UART_SetConfig+0x1a2>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbb0:	e0ad      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbb8:	e0a9      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cbba:	2304      	movs	r3, #4
 800cbbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbc0:	e0a5      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cbc2:	2308      	movs	r3, #8
 800cbc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbc8:	e0a1      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cbca:	2310      	movs	r3, #16
 800cbcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbd0:	e09d      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a4a      	ldr	r2, [pc, #296]	; (800cd00 <UART_SetConfig+0x2d8>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d125      	bne.n	800cc28 <UART_SetConfig+0x200>
 800cbdc:	4b45      	ldr	r3, [pc, #276]	; (800ccf4 <UART_SetConfig+0x2cc>)
 800cbde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbe2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cbe6:	2bc0      	cmp	r3, #192	; 0xc0
 800cbe8:	d016      	beq.n	800cc18 <UART_SetConfig+0x1f0>
 800cbea:	2bc0      	cmp	r3, #192	; 0xc0
 800cbec:	d818      	bhi.n	800cc20 <UART_SetConfig+0x1f8>
 800cbee:	2b80      	cmp	r3, #128	; 0x80
 800cbf0:	d00a      	beq.n	800cc08 <UART_SetConfig+0x1e0>
 800cbf2:	2b80      	cmp	r3, #128	; 0x80
 800cbf4:	d814      	bhi.n	800cc20 <UART_SetConfig+0x1f8>
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d002      	beq.n	800cc00 <UART_SetConfig+0x1d8>
 800cbfa:	2b40      	cmp	r3, #64	; 0x40
 800cbfc:	d008      	beq.n	800cc10 <UART_SetConfig+0x1e8>
 800cbfe:	e00f      	b.n	800cc20 <UART_SetConfig+0x1f8>
 800cc00:	2300      	movs	r3, #0
 800cc02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc06:	e082      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc08:	2302      	movs	r3, #2
 800cc0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc0e:	e07e      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc10:	2304      	movs	r3, #4
 800cc12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc16:	e07a      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc18:	2308      	movs	r3, #8
 800cc1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc1e:	e076      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc20:	2310      	movs	r3, #16
 800cc22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc26:	e072      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a35      	ldr	r2, [pc, #212]	; (800cd04 <UART_SetConfig+0x2dc>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d12a      	bne.n	800cc88 <UART_SetConfig+0x260>
 800cc32:	4b30      	ldr	r3, [pc, #192]	; (800ccf4 <UART_SetConfig+0x2cc>)
 800cc34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc40:	d01a      	beq.n	800cc78 <UART_SetConfig+0x250>
 800cc42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc46:	d81b      	bhi.n	800cc80 <UART_SetConfig+0x258>
 800cc48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc4c:	d00c      	beq.n	800cc68 <UART_SetConfig+0x240>
 800cc4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc52:	d815      	bhi.n	800cc80 <UART_SetConfig+0x258>
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d003      	beq.n	800cc60 <UART_SetConfig+0x238>
 800cc58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc5c:	d008      	beq.n	800cc70 <UART_SetConfig+0x248>
 800cc5e:	e00f      	b.n	800cc80 <UART_SetConfig+0x258>
 800cc60:	2300      	movs	r3, #0
 800cc62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc66:	e052      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc68:	2302      	movs	r3, #2
 800cc6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc6e:	e04e      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc70:	2304      	movs	r3, #4
 800cc72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc76:	e04a      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc78:	2308      	movs	r3, #8
 800cc7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc7e:	e046      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc80:	2310      	movs	r3, #16
 800cc82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc86:	e042      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a17      	ldr	r2, [pc, #92]	; (800ccec <UART_SetConfig+0x2c4>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d13a      	bne.n	800cd08 <UART_SetConfig+0x2e0>
 800cc92:	4b18      	ldr	r3, [pc, #96]	; (800ccf4 <UART_SetConfig+0x2cc>)
 800cc94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cc9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cca0:	d01a      	beq.n	800ccd8 <UART_SetConfig+0x2b0>
 800cca2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cca6:	d81b      	bhi.n	800cce0 <UART_SetConfig+0x2b8>
 800cca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccac:	d00c      	beq.n	800ccc8 <UART_SetConfig+0x2a0>
 800ccae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccb2:	d815      	bhi.n	800cce0 <UART_SetConfig+0x2b8>
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d003      	beq.n	800ccc0 <UART_SetConfig+0x298>
 800ccb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccbc:	d008      	beq.n	800ccd0 <UART_SetConfig+0x2a8>
 800ccbe:	e00f      	b.n	800cce0 <UART_SetConfig+0x2b8>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccc6:	e022      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800ccc8:	2302      	movs	r3, #2
 800ccca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccce:	e01e      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800ccd0:	2304      	movs	r3, #4
 800ccd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccd6:	e01a      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800ccd8:	2308      	movs	r3, #8
 800ccda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccde:	e016      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cce0:	2310      	movs	r3, #16
 800cce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cce6:	e012      	b.n	800cd0e <UART_SetConfig+0x2e6>
 800cce8:	efff69f3 	.word	0xefff69f3
 800ccec:	40008000 	.word	0x40008000
 800ccf0:	40013800 	.word	0x40013800
 800ccf4:	40021000 	.word	0x40021000
 800ccf8:	40004400 	.word	0x40004400
 800ccfc:	40004800 	.word	0x40004800
 800cd00:	40004c00 	.word	0x40004c00
 800cd04:	40005000 	.word	0x40005000
 800cd08:	2310      	movs	r3, #16
 800cd0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a9f      	ldr	r2, [pc, #636]	; (800cf90 <UART_SetConfig+0x568>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d17a      	bne.n	800ce0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd1c:	2b08      	cmp	r3, #8
 800cd1e:	d824      	bhi.n	800cd6a <UART_SetConfig+0x342>
 800cd20:	a201      	add	r2, pc, #4	; (adr r2, 800cd28 <UART_SetConfig+0x300>)
 800cd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd26:	bf00      	nop
 800cd28:	0800cd4d 	.word	0x0800cd4d
 800cd2c:	0800cd6b 	.word	0x0800cd6b
 800cd30:	0800cd55 	.word	0x0800cd55
 800cd34:	0800cd6b 	.word	0x0800cd6b
 800cd38:	0800cd5b 	.word	0x0800cd5b
 800cd3c:	0800cd6b 	.word	0x0800cd6b
 800cd40:	0800cd6b 	.word	0x0800cd6b
 800cd44:	0800cd6b 	.word	0x0800cd6b
 800cd48:	0800cd63 	.word	0x0800cd63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd4c:	f7fe f920 	bl	800af90 <HAL_RCC_GetPCLK1Freq>
 800cd50:	61f8      	str	r0, [r7, #28]
        break;
 800cd52:	e010      	b.n	800cd76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd54:	4b8f      	ldr	r3, [pc, #572]	; (800cf94 <UART_SetConfig+0x56c>)
 800cd56:	61fb      	str	r3, [r7, #28]
        break;
 800cd58:	e00d      	b.n	800cd76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd5a:	f7fe f881 	bl	800ae60 <HAL_RCC_GetSysClockFreq>
 800cd5e:	61f8      	str	r0, [r7, #28]
        break;
 800cd60:	e009      	b.n	800cd76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd66:	61fb      	str	r3, [r7, #28]
        break;
 800cd68:	e005      	b.n	800cd76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cd74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 80fb 	beq.w	800cf74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	685a      	ldr	r2, [r3, #4]
 800cd82:	4613      	mov	r3, r2
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	4413      	add	r3, r2
 800cd88:	69fa      	ldr	r2, [r7, #28]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d305      	bcc.n	800cd9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cd94:	69fa      	ldr	r2, [r7, #28]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d903      	bls.n	800cda2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cda0:	e0e8      	b.n	800cf74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	2200      	movs	r2, #0
 800cda6:	461c      	mov	r4, r3
 800cda8:	4615      	mov	r5, r2
 800cdaa:	f04f 0200 	mov.w	r2, #0
 800cdae:	f04f 0300 	mov.w	r3, #0
 800cdb2:	022b      	lsls	r3, r5, #8
 800cdb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cdb8:	0222      	lsls	r2, r4, #8
 800cdba:	68f9      	ldr	r1, [r7, #12]
 800cdbc:	6849      	ldr	r1, [r1, #4]
 800cdbe:	0849      	lsrs	r1, r1, #1
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	4688      	mov	r8, r1
 800cdc4:	4681      	mov	r9, r0
 800cdc6:	eb12 0a08 	adds.w	sl, r2, r8
 800cdca:	eb43 0b09 	adc.w	fp, r3, r9
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	603b      	str	r3, [r7, #0]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cddc:	4650      	mov	r0, sl
 800cdde:	4659      	mov	r1, fp
 800cde0:	f7f4 f854 	bl	8000e8c <__aeabi_uldivmod>
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	4613      	mov	r3, r2
 800cdea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdf2:	d308      	bcc.n	800ce06 <UART_SetConfig+0x3de>
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdfa:	d204      	bcs.n	800ce06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	69ba      	ldr	r2, [r7, #24]
 800ce02:	60da      	str	r2, [r3, #12]
 800ce04:	e0b6      	b.n	800cf74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ce0c:	e0b2      	b.n	800cf74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	69db      	ldr	r3, [r3, #28]
 800ce12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce16:	d15e      	bne.n	800ced6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ce18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce1c:	2b08      	cmp	r3, #8
 800ce1e:	d828      	bhi.n	800ce72 <UART_SetConfig+0x44a>
 800ce20:	a201      	add	r2, pc, #4	; (adr r2, 800ce28 <UART_SetConfig+0x400>)
 800ce22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce26:	bf00      	nop
 800ce28:	0800ce4d 	.word	0x0800ce4d
 800ce2c:	0800ce55 	.word	0x0800ce55
 800ce30:	0800ce5d 	.word	0x0800ce5d
 800ce34:	0800ce73 	.word	0x0800ce73
 800ce38:	0800ce63 	.word	0x0800ce63
 800ce3c:	0800ce73 	.word	0x0800ce73
 800ce40:	0800ce73 	.word	0x0800ce73
 800ce44:	0800ce73 	.word	0x0800ce73
 800ce48:	0800ce6b 	.word	0x0800ce6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce4c:	f7fe f8a0 	bl	800af90 <HAL_RCC_GetPCLK1Freq>
 800ce50:	61f8      	str	r0, [r7, #28]
        break;
 800ce52:	e014      	b.n	800ce7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce54:	f7fe f8b2 	bl	800afbc <HAL_RCC_GetPCLK2Freq>
 800ce58:	61f8      	str	r0, [r7, #28]
        break;
 800ce5a:	e010      	b.n	800ce7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce5c:	4b4d      	ldr	r3, [pc, #308]	; (800cf94 <UART_SetConfig+0x56c>)
 800ce5e:	61fb      	str	r3, [r7, #28]
        break;
 800ce60:	e00d      	b.n	800ce7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce62:	f7fd fffd 	bl	800ae60 <HAL_RCC_GetSysClockFreq>
 800ce66:	61f8      	str	r0, [r7, #28]
        break;
 800ce68:	e009      	b.n	800ce7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce6e:	61fb      	str	r3, [r7, #28]
        break;
 800ce70:	e005      	b.n	800ce7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ce72:	2300      	movs	r3, #0
 800ce74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ce7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d077      	beq.n	800cf74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	005a      	lsls	r2, r3, #1
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	085b      	lsrs	r3, r3, #1
 800ce8e:	441a      	add	r2, r3
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	2b0f      	cmp	r3, #15
 800ce9e:	d916      	bls.n	800cece <UART_SetConfig+0x4a6>
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cea6:	d212      	bcs.n	800cece <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	f023 030f 	bic.w	r3, r3, #15
 800ceb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	085b      	lsrs	r3, r3, #1
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	f003 0307 	and.w	r3, r3, #7
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	8afb      	ldrh	r3, [r7, #22]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	8afa      	ldrh	r2, [r7, #22]
 800ceca:	60da      	str	r2, [r3, #12]
 800cecc:	e052      	b.n	800cf74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ced4:	e04e      	b.n	800cf74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ced6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ceda:	2b08      	cmp	r3, #8
 800cedc:	d827      	bhi.n	800cf2e <UART_SetConfig+0x506>
 800cede:	a201      	add	r2, pc, #4	; (adr r2, 800cee4 <UART_SetConfig+0x4bc>)
 800cee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee4:	0800cf09 	.word	0x0800cf09
 800cee8:	0800cf11 	.word	0x0800cf11
 800ceec:	0800cf19 	.word	0x0800cf19
 800cef0:	0800cf2f 	.word	0x0800cf2f
 800cef4:	0800cf1f 	.word	0x0800cf1f
 800cef8:	0800cf2f 	.word	0x0800cf2f
 800cefc:	0800cf2f 	.word	0x0800cf2f
 800cf00:	0800cf2f 	.word	0x0800cf2f
 800cf04:	0800cf27 	.word	0x0800cf27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf08:	f7fe f842 	bl	800af90 <HAL_RCC_GetPCLK1Freq>
 800cf0c:	61f8      	str	r0, [r7, #28]
        break;
 800cf0e:	e014      	b.n	800cf3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf10:	f7fe f854 	bl	800afbc <HAL_RCC_GetPCLK2Freq>
 800cf14:	61f8      	str	r0, [r7, #28]
        break;
 800cf16:	e010      	b.n	800cf3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf18:	4b1e      	ldr	r3, [pc, #120]	; (800cf94 <UART_SetConfig+0x56c>)
 800cf1a:	61fb      	str	r3, [r7, #28]
        break;
 800cf1c:	e00d      	b.n	800cf3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf1e:	f7fd ff9f 	bl	800ae60 <HAL_RCC_GetSysClockFreq>
 800cf22:	61f8      	str	r0, [r7, #28]
        break;
 800cf24:	e009      	b.n	800cf3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf2a:	61fb      	str	r3, [r7, #28]
        break;
 800cf2c:	e005      	b.n	800cf3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cf38:	bf00      	nop
    }

    if (pclk != 0U)
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d019      	beq.n	800cf74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	085a      	lsrs	r2, r3, #1
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	441a      	add	r2, r3
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	2b0f      	cmp	r3, #15
 800cf58:	d909      	bls.n	800cf6e <UART_SetConfig+0x546>
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf60:	d205      	bcs.n	800cf6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	60da      	str	r2, [r3, #12]
 800cf6c:	e002      	b.n	800cf74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2200      	movs	r2, #0
 800cf78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800cf80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3728      	adds	r7, #40	; 0x28
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf8e:	bf00      	nop
 800cf90:	40008000 	.word	0x40008000
 800cf94:	00f42400 	.word	0x00f42400

0800cf98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00a      	beq.n	800cfc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	430a      	orrs	r2, r1
 800cfc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc6:	f003 0302 	and.w	r3, r3, #2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00a      	beq.n	800cfe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	430a      	orrs	r2, r1
 800cfe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	f003 0304 	and.w	r3, r3, #4
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00a      	beq.n	800d006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	430a      	orrs	r2, r1
 800d004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00a:	f003 0308 	and.w	r3, r3, #8
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00a      	beq.n	800d028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	430a      	orrs	r2, r1
 800d026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02c:	f003 0310 	and.w	r3, r3, #16
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00a      	beq.n	800d04a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	430a      	orrs	r2, r1
 800d048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04e:	f003 0320 	and.w	r3, r3, #32
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00a      	beq.n	800d06c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	430a      	orrs	r2, r1
 800d06a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d074:	2b00      	cmp	r3, #0
 800d076:	d01a      	beq.n	800d0ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	430a      	orrs	r2, r1
 800d08c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d096:	d10a      	bne.n	800d0ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	430a      	orrs	r2, r1
 800d0ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00a      	beq.n	800d0d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	430a      	orrs	r2, r1
 800d0ce:	605a      	str	r2, [r3, #4]
  }
}
 800d0d0:	bf00      	nop
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b086      	sub	sp, #24
 800d0e0:	af02      	add	r7, sp, #8
 800d0e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d0ec:	f7fb fc34 	bl	8008958 <HAL_GetTick>
 800d0f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f003 0308 	and.w	r3, r3, #8
 800d0fc:	2b08      	cmp	r3, #8
 800d0fe:	d10e      	bne.n	800d11e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f82d 	bl	800d16e <UART_WaitOnFlagUntilTimeout>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d001      	beq.n	800d11e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e023      	b.n	800d166 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f003 0304 	and.w	r3, r3, #4
 800d128:	2b04      	cmp	r3, #4
 800d12a:	d10e      	bne.n	800d14a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d12c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 f817 	bl	800d16e <UART_WaitOnFlagUntilTimeout>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d001      	beq.n	800d14a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d146:	2303      	movs	r3, #3
 800d148:	e00d      	b.n	800d166 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2220      	movs	r2, #32
 800d14e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2220      	movs	r2, #32
 800d154:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b09c      	sub	sp, #112	; 0x70
 800d172:	af00      	add	r7, sp, #0
 800d174:	60f8      	str	r0, [r7, #12]
 800d176:	60b9      	str	r1, [r7, #8]
 800d178:	603b      	str	r3, [r7, #0]
 800d17a:	4613      	mov	r3, r2
 800d17c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d17e:	e0a5      	b.n	800d2cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d186:	f000 80a1 	beq.w	800d2cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d18a:	f7fb fbe5 	bl	8008958 <HAL_GetTick>
 800d18e:	4602      	mov	r2, r0
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d196:	429a      	cmp	r2, r3
 800d198:	d302      	bcc.n	800d1a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800d19a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d13e      	bne.n	800d21e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a8:	e853 3f00 	ldrex	r3, [r3]
 800d1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d1b4:	667b      	str	r3, [r7, #100]	; 0x64
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1c6:	e841 2300 	strex	r3, r2, [r1]
 800d1ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d1cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1e6      	bne.n	800d1a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3308      	adds	r3, #8
 800d1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1dc:	e853 3f00 	ldrex	r3, [r3]
 800d1e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	f023 0301 	bic.w	r3, r3, #1
 800d1e8:	663b      	str	r3, [r7, #96]	; 0x60
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3308      	adds	r3, #8
 800d1f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800d1f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1fa:	e841 2300 	strex	r3, r2, [r1]
 800d1fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1e5      	bne.n	800d1d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2220      	movs	r2, #32
 800d20a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2220      	movs	r2, #32
 800d210:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d21a:	2303      	movs	r3, #3
 800d21c:	e067      	b.n	800d2ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f003 0304 	and.w	r3, r3, #4
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d04f      	beq.n	800d2cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	69db      	ldr	r3, [r3, #28]
 800d232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d23a:	d147      	bne.n	800d2cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d244:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	e853 3f00 	ldrex	r3, [r3]
 800d252:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d25a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	461a      	mov	r2, r3
 800d262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d264:	637b      	str	r3, [r7, #52]	; 0x34
 800d266:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d26a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d26c:	e841 2300 	strex	r3, r2, [r1]
 800d270:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e6      	bne.n	800d246 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3308      	adds	r3, #8
 800d27e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	e853 3f00 	ldrex	r3, [r3]
 800d286:	613b      	str	r3, [r7, #16]
   return(result);
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	f023 0301 	bic.w	r3, r3, #1
 800d28e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3308      	adds	r3, #8
 800d296:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d298:	623a      	str	r2, [r7, #32]
 800d29a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29c:	69f9      	ldr	r1, [r7, #28]
 800d29e:	6a3a      	ldr	r2, [r7, #32]
 800d2a0:	e841 2300 	strex	r3, r2, [r1]
 800d2a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1e5      	bne.n	800d278 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2220      	movs	r2, #32
 800d2b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2220      	movs	r2, #32
 800d2bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d2c8:	2303      	movs	r3, #3
 800d2ca:	e010      	b.n	800d2ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	69da      	ldr	r2, [r3, #28]
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	4013      	ands	r3, r2
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	bf0c      	ite	eq
 800d2dc:	2301      	moveq	r3, #1
 800d2de:	2300      	movne	r3, #0
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	79fb      	ldrb	r3, [r7, #7]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	f43f af4a 	beq.w	800d180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3770      	adds	r7, #112	; 0x70
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
	...

0800d2f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b096      	sub	sp, #88	; 0x58
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	4613      	mov	r3, r2
 800d304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	88fa      	ldrh	r2, [r7, #6]
 800d310:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2200      	movs	r2, #0
 800d318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2222      	movs	r2, #34	; 0x22
 800d320:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d326:	2b00      	cmp	r3, #0
 800d328:	d02b      	beq.n	800d382 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d32e:	4a42      	ldr	r2, [pc, #264]	; (800d438 <UART_Start_Receive_DMA+0x140>)
 800d330:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d336:	4a41      	ldr	r2, [pc, #260]	; (800d43c <UART_Start_Receive_DMA+0x144>)
 800d338:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d33e:	4a40      	ldr	r2, [pc, #256]	; (800d440 <UART_Start_Receive_DMA+0x148>)
 800d340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d346:	2200      	movs	r2, #0
 800d348:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	3324      	adds	r3, #36	; 0x24
 800d354:	4619      	mov	r1, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d35a:	461a      	mov	r2, r3
 800d35c:	88fb      	ldrh	r3, [r7, #6]
 800d35e:	f7fb fddf 	bl	8008f20 <HAL_DMA_Start_IT>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00c      	beq.n	800d382 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2210      	movs	r2, #16
 800d36c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2200      	movs	r2, #0
 800d374:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2220      	movs	r2, #32
 800d37c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800d37e:	2301      	movs	r3, #1
 800d380:	e055      	b.n	800d42e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2200      	movs	r2, #0
 800d386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d018      	beq.n	800d3c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d39a:	e853 3f00 	ldrex	r3, [r3]
 800d39e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3a6:	657b      	str	r3, [r7, #84]	; 0x54
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3b8:	e841 2300 	strex	r3, r2, [r1]
 800d3bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d1e6      	bne.n	800d392 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3308      	adds	r3, #8
 800d3ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	e853 3f00 	ldrex	r3, [r3]
 800d3d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d6:	f043 0301 	orr.w	r3, r3, #1
 800d3da:	653b      	str	r3, [r7, #80]	; 0x50
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3e4:	637a      	str	r2, [r7, #52]	; 0x34
 800d3e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3ec:	e841 2300 	strex	r3, r2, [r1]
 800d3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1e5      	bne.n	800d3c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	613b      	str	r3, [r7, #16]
   return(result);
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d40e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3308      	adds	r3, #8
 800d416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d418:	623a      	str	r2, [r7, #32]
 800d41a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41c:	69f9      	ldr	r1, [r7, #28]
 800d41e:	6a3a      	ldr	r2, [r7, #32]
 800d420:	e841 2300 	strex	r3, r2, [r1]
 800d424:	61bb      	str	r3, [r7, #24]
   return(result);
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e5      	bne.n	800d3f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3758      	adds	r7, #88	; 0x58
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	0800d557 	.word	0x0800d557
 800d43c:	0800d67b 	.word	0x0800d67b
 800d440:	0800d6b3 	.word	0x0800d6b3

0800d444 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d444:	b480      	push	{r7}
 800d446:	b089      	sub	sp, #36	; 0x24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	e853 3f00 	ldrex	r3, [r3]
 800d458:	60bb      	str	r3, [r7, #8]
   return(result);
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d460:	61fb      	str	r3, [r7, #28]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	61bb      	str	r3, [r7, #24]
 800d46c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46e:	6979      	ldr	r1, [r7, #20]
 800d470:	69ba      	ldr	r2, [r7, #24]
 800d472:	e841 2300 	strex	r3, r2, [r1]
 800d476:	613b      	str	r3, [r7, #16]
   return(result);
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1e6      	bne.n	800d44c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2220      	movs	r2, #32
 800d482:	679a      	str	r2, [r3, #120]	; 0x78
}
 800d484:	bf00      	nop
 800d486:	3724      	adds	r7, #36	; 0x24
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d490:	b480      	push	{r7}
 800d492:	b095      	sub	sp, #84	; 0x54
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a0:	e853 3f00 	ldrex	r3, [r3]
 800d4a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4b6:	643b      	str	r3, [r7, #64]	; 0x40
 800d4b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4be:	e841 2300 	strex	r3, r2, [r1]
 800d4c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1e6      	bne.n	800d498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3308      	adds	r3, #8
 800d4d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d2:	6a3b      	ldr	r3, [r7, #32]
 800d4d4:	e853 3f00 	ldrex	r3, [r3]
 800d4d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	f023 0301 	bic.w	r3, r3, #1
 800d4e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d4ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4f2:	e841 2300 	strex	r3, r2, [r1]
 800d4f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1e5      	bne.n	800d4ca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d502:	2b01      	cmp	r3, #1
 800d504:	d118      	bne.n	800d538 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	e853 3f00 	ldrex	r3, [r3]
 800d512:	60bb      	str	r3, [r7, #8]
   return(result);
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	f023 0310 	bic.w	r3, r3, #16
 800d51a:	647b      	str	r3, [r7, #68]	; 0x44
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	461a      	mov	r2, r3
 800d522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d524:	61bb      	str	r3, [r7, #24]
 800d526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d528:	6979      	ldr	r1, [r7, #20]
 800d52a:	69ba      	ldr	r2, [r7, #24]
 800d52c:	e841 2300 	strex	r3, r2, [r1]
 800d530:	613b      	str	r3, [r7, #16]
   return(result);
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1e6      	bne.n	800d506 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2220      	movs	r2, #32
 800d53c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d54a:	bf00      	nop
 800d54c:	3754      	adds	r7, #84	; 0x54
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b09c      	sub	sp, #112	; 0x70
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d562:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 0320 	and.w	r3, r3, #32
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d170      	bne.n	800d654 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800d572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d574:	2200      	movs	r2, #0
 800d576:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d57a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d582:	e853 3f00 	ldrex	r3, [r3]
 800d586:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d58a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d58e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	461a      	mov	r2, r3
 800d596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d598:	65bb      	str	r3, [r7, #88]	; 0x58
 800d59a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d59e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5a0:	e841 2300 	strex	r3, r2, [r1]
 800d5a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1e6      	bne.n	800d57a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b6:	e853 3f00 	ldrex	r3, [r3]
 800d5ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5be:	f023 0301 	bic.w	r3, r3, #1
 800d5c2:	667b      	str	r3, [r7, #100]	; 0x64
 800d5c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3308      	adds	r3, #8
 800d5ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d5cc:	647a      	str	r2, [r7, #68]	; 0x44
 800d5ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5d4:	e841 2300 	strex	r3, r2, [r1]
 800d5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d1e5      	bne.n	800d5ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	3308      	adds	r3, #8
 800d5e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	e853 3f00 	ldrex	r3, [r3]
 800d5ee:	623b      	str	r3, [r7, #32]
   return(result);
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5f6:	663b      	str	r3, [r7, #96]	; 0x60
 800d5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d600:	633a      	str	r2, [r7, #48]	; 0x30
 800d602:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d608:	e841 2300 	strex	r3, r2, [r1]
 800d60c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1e5      	bne.n	800d5e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d616:	2220      	movs	r2, #32
 800d618:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d61c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d118      	bne.n	800d654 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	e853 3f00 	ldrex	r3, [r3]
 800d62e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f023 0310 	bic.w	r3, r3, #16
 800d636:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	461a      	mov	r2, r3
 800d63e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d640:	61fb      	str	r3, [r7, #28]
 800d642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d644:	69b9      	ldr	r1, [r7, #24]
 800d646:	69fa      	ldr	r2, [r7, #28]
 800d648:	e841 2300 	strex	r3, r2, [r1]
 800d64c:	617b      	str	r3, [r7, #20]
   return(result);
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e6      	bne.n	800d622 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d107      	bne.n	800d66c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d65e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d662:	4619      	mov	r1, r3
 800d664:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d666:	f7ff f9d3 	bl	800ca10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d66a:	e002      	b.n	800d672 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800d66c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d66e:	f7ff f9b1 	bl	800c9d4 <HAL_UART_RxCpltCallback>
}
 800d672:	bf00      	nop
 800d674:	3770      	adds	r7, #112	; 0x70
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d686:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d109      	bne.n	800d6a4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d696:	085b      	lsrs	r3, r3, #1
 800d698:	b29b      	uxth	r3, r3
 800d69a:	4619      	mov	r1, r3
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f7ff f9b7 	bl	800ca10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d6a2:	e002      	b.n	800d6aa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7ff f99f 	bl	800c9e8 <HAL_UART_RxHalfCpltCallback>
}
 800d6aa:	bf00      	nop
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b086      	sub	sp, #24
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6d6:	2b80      	cmp	r3, #128	; 0x80
 800d6d8:	d109      	bne.n	800d6ee <UART_DMAError+0x3c>
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	2b21      	cmp	r3, #33	; 0x21
 800d6de:	d106      	bne.n	800d6ee <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800d6e8:	6978      	ldr	r0, [r7, #20]
 800d6ea:	f7ff feab 	bl	800d444 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6f8:	2b40      	cmp	r3, #64	; 0x40
 800d6fa:	d109      	bne.n	800d710 <UART_DMAError+0x5e>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b22      	cmp	r3, #34	; 0x22
 800d700:	d106      	bne.n	800d710 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	2200      	movs	r2, #0
 800d706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800d70a:	6978      	ldr	r0, [r7, #20]
 800d70c:	f7ff fec0 	bl	800d490 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d716:	f043 0210 	orr.w	r2, r3, #16
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d720:	6978      	ldr	r0, [r7, #20]
 800d722:	f7ff f96b 	bl	800c9fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d726:	bf00      	nop
 800d728:	3718      	adds	r7, #24
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DynamicInclinometer_Init();
 800d732:	f000 f81b 	bl	800d76c <MX_DynamicInclinometer_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800d736:	bf00      	nop
 800d738:	bd80      	pop	{r7, pc}
	...

0800d73c <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	4b06      	ldr	r3, [pc, #24]	; (800d764 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d102      	bne.n	800d756 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 800d750:	4b05      	ldr	r3, [pc, #20]	; (800d768 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800d752:	2201      	movs	r2, #1
 800d754:	701a      	strb	r2, [r3, #0]
  }
}
 800d756:	bf00      	nop
 800d758:	370c      	adds	r7, #12
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop
 800d764:	20001f08 	.word	0x20001f08
 800d768:	20001c9c 	.word	0x20001c9c

0800d76c <MX_DynamicInclinometer_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DynamicInclinometer_Init(void)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 800d770:	2000      	movs	r0, #0
 800d772:	f000 fd39 	bl	800e1e8 <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800d776:	2000      	movs	r0, #0
 800d778:	f000 fdb2 	bl	800e2e0 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 800d77c:	f000 fb0c 	bl	800dd98 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 800d780:	2064      	movs	r0, #100	; 0x64
 800d782:	f000 f83b 	bl	800d7fc <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 800d786:	f000 f81f 	bl	800d7c8 <Init_Sensors>

  /* DynamicInclinometer API initialization function */
  MotionDI_manager_init((int)ALGO_FREQ);
 800d78a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d7bc <MX_DynamicInclinometer_Init+0x50>
 800d78e:	f000 fbcf 	bl	800df30 <MotionDI_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionDI_manager_get_version(LibVersion, &LibVersionLen);
 800d792:	490b      	ldr	r1, [pc, #44]	; (800d7c0 <MX_DynamicInclinometer_Init+0x54>)
 800d794:	480b      	ldr	r0, [pc, #44]	; (800d7c4 <MX_DynamicInclinometer_Init+0x58>)
 800d796:	f000 fc11 	bl	800dfbc <MotionDI_manager_get_version>

  DWT_Init();
 800d79a:	f000 f863 	bl	800d864 <DWT_Init>

  BSP_LED_On(LED2);
 800d79e:	2000      	movs	r0, #0
 800d7a0:	f000 fd34 	bl	800e20c <BSP_LED_On>
  HAL_Delay(500);
 800d7a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d7a8:	f7fb f8e2 	bl	8008970 <HAL_Delay>
  BSP_LED_Off(LED2);
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	f000 fd43 	bl	800e238 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 800d7b2:	f000 f96f 	bl	800da94 <UART_StartReceiveMsg>
}
 800d7b6:	bf00      	nop
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	42c80000 	.word	0x42c80000
 800d7c0:	20001c98 	.word	0x20001c98
 800d7c4:	20001c74 	.word	0x20001c74

0800d7c8 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800d7cc:	f000 f97c 	bl	800dac8 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800d7d0:	f000 f982 	bl	800dad8 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800d7d4:	f000 f988 	bl	800dae8 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800d7d8:	f000 f98e 	bl	800daf8 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800d7dc:	f000 f994 	bl	800db08 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800d7e0:	f000 f99a 	bl	800db18 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 800d7e4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800d7f8 <Init_Sensors+0x30>
 800d7e8:	f000 f9ab 	bl	800db42 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 800d7ec:	2002      	movs	r0, #2
 800d7ee:	f000 f9b7 	bl	800db60 <BSP_SENSOR_ACC_SetFullScale>
}
 800d7f2:	bf00      	nop
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	42c80000 	.word	0x42c80000

0800d7fc <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800d804:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d808:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800d80a:	4b14      	ldr	r3, [pc, #80]	; (800d85c <TIM_Config+0x60>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	fbb2 f3f3 	udiv	r3, r2, r3
 800d814:	3b01      	subs	r3, #1
 800d816:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800d818:	697a      	ldr	r2, [r7, #20]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d820:	3b01      	subs	r3, #1
 800d822:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 800d824:	4a0e      	ldr	r2, [pc, #56]	; (800d860 <TIM_Config+0x64>)
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d82a:	4b0d      	ldr	r3, [pc, #52]	; (800d860 <TIM_Config+0x64>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 800d830:	4a0b      	ldr	r2, [pc, #44]	; (800d860 <TIM_Config+0x64>)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d836:	4b0a      	ldr	r3, [pc, #40]	; (800d860 <TIM_Config+0x64>)
 800d838:	2200      	movs	r2, #0
 800d83a:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d83c:	4b08      	ldr	r3, [pc, #32]	; (800d860 <TIM_Config+0x64>)
 800d83e:	2200      	movs	r2, #0
 800d840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800d842:	4807      	ldr	r0, [pc, #28]	; (800d860 <TIM_Config+0x64>)
 800d844:	f7fe fb42 	bl	800becc <HAL_TIM_Base_Init>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d001      	beq.n	800d852 <TIM_Config+0x56>
  {
    Error_Handler();
 800d84e:	f000 fb69 	bl	800df24 <Error_Handler>
  }
}
 800d852:	bf00      	nop
 800d854:	3718      	adds	r7, #24
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	20001350 	.word	0x20001350
 800d860:	20001f08 	.word	0x20001f08

0800d864 <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 800d864:	b480      	push	{r7}
 800d866:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800d868:	4b08      	ldr	r3, [pc, #32]	; (800d88c <DWT_Init+0x28>)
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	4a07      	ldr	r2, [pc, #28]	; (800d88c <DWT_Init+0x28>)
 800d86e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d872:	60d3      	str	r3, [r2, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800d874:	4b06      	ldr	r3, [pc, #24]	; (800d890 <DWT_Init+0x2c>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a05      	ldr	r2, [pc, #20]	; (800d890 <DWT_Init+0x2c>)
 800d87a:	f023 0301 	bic.w	r3, r3, #1
 800d87e:	6013      	str	r3, [r2, #0]
}
 800d880:	bf00      	nop
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	e000edf0 	.word	0xe000edf0
 800d890:	e0001000 	.word	0xe0001000

0800d894 <get_inclination>:



//PERSONNALS FUNCTIONS
void get_inclination(void)
{
 800d894:	b5b0      	push	{r4, r5, r7, lr}
 800d896:	b0ac      	sub	sp, #176	; 0xb0
 800d898:	af00      	add	r7, sp, #0
	#define buf_size 78
	uint8_t buf_UART_TX[buf_size];
	MDI_input_t      data_in;
	MDI_output_t     data_out;
	uint8_t checksum=0;
 800d89a:	2300      	movs	r3, #0
 800d89c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	//get axes acc + gyro-------------------------------------------------------------
	BSP_SENSOR_GYR_GetAxes(&AccValue);
 800d8a0:	4877      	ldr	r0, [pc, #476]	; (800da80 <get_inclination+0x1ec>)
 800d8a2:	f000 f941 	bl	800db28 <BSP_SENSOR_GYR_GetAxes>
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800d8a6:	4877      	ldr	r0, [pc, #476]	; (800da84 <get_inclination+0x1f0>)
 800d8a8:	f000 f93e 	bl	800db28 <BSP_SENSOR_GYR_GetAxes>
	//Serialize Raw datas----------------------------------------
	buf_UART_TX[0] = (int32_t)36;//start carac: 36(ascii)='$'
 800d8ac:	2324      	movs	r3, #36	; 0x24
 800d8ae:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	//Raw acc datas
	Serialize_s32(&buf_UART_TX[1],  (int32_t)AccValue.x, 4);
 800d8b2:	4b73      	ldr	r3, [pc, #460]	; (800da80 <get_inclination+0x1ec>)
 800d8b4:	6819      	ldr	r1, [r3, #0]
 800d8b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	2204      	movs	r2, #4
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 fb8c 	bl	800dfdc <Serialize_s32>
	Serialize_s32(&buf_UART_TX[5],  (int32_t)AccValue.y, 4);
 800d8c4:	4b6e      	ldr	r3, [pc, #440]	; (800da80 <get_inclination+0x1ec>)
 800d8c6:	6859      	ldr	r1, [r3, #4]
 800d8c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d8cc:	3305      	adds	r3, #5
 800d8ce:	2204      	movs	r2, #4
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f000 fb83 	bl	800dfdc <Serialize_s32>
	Serialize_s32(&buf_UART_TX[9],  (int32_t)AccValue.z, 4);
 800d8d6:	4b6a      	ldr	r3, [pc, #424]	; (800da80 <get_inclination+0x1ec>)
 800d8d8:	6899      	ldr	r1, [r3, #8]
 800d8da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d8de:	3309      	adds	r3, #9
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f000 fb7a 	bl	800dfdc <Serialize_s32>
	//Raw gyro datas
	Serialize_s32(&buf_UART_TX[13], (int32_t)GyrValue.x, 4);
 800d8e8:	4b66      	ldr	r3, [pc, #408]	; (800da84 <get_inclination+0x1f0>)
 800d8ea:	6819      	ldr	r1, [r3, #0]
 800d8ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d8f0:	330d      	adds	r3, #13
 800d8f2:	2204      	movs	r2, #4
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f000 fb71 	bl	800dfdc <Serialize_s32>
	Serialize_s32(&buf_UART_TX[17], (int32_t)GyrValue.y, 4);
 800d8fa:	4b62      	ldr	r3, [pc, #392]	; (800da84 <get_inclination+0x1f0>)
 800d8fc:	6859      	ldr	r1, [r3, #4]
 800d8fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d902:	3311      	adds	r3, #17
 800d904:	2204      	movs	r2, #4
 800d906:	4618      	mov	r0, r3
 800d908:	f000 fb68 	bl	800dfdc <Serialize_s32>
	Serialize_s32(&buf_UART_TX[21], (int32_t)GyrValue.z, 4);
 800d90c:	4b5d      	ldr	r3, [pc, #372]	; (800da84 <get_inclination+0x1f0>)
 800d90e:	6899      	ldr	r1, [r3, #8]
 800d910:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d914:	3315      	adds	r3, #21
 800d916:	2204      	movs	r2, #4
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 fb5f 	bl	800dfdc <Serialize_s32>

	//Convertion-------------------------------------------
	/* Convert acceleration from [mg] to [g] */
	data_in.Acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800d91e:	4b58      	ldr	r3, [pc, #352]	; (800da80 <get_inclination+0x1ec>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	ee07 3a90 	vmov	s15, r3
 800d926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d92a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800da88 <get_inclination+0x1f4>
 800d92e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d932:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	data_in.Acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800d936:	4b52      	ldr	r3, [pc, #328]	; (800da80 <get_inclination+0x1ec>)
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	ee07 3a90 	vmov	s15, r3
 800d93e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d942:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800da88 <get_inclination+0x1f4>
 800d946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d94a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	data_in.Acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800d94e:	4b4c      	ldr	r3, [pc, #304]	; (800da80 <get_inclination+0x1ec>)
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	ee07 3a90 	vmov	s15, r3
 800d956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d95a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800da88 <get_inclination+0x1f4>
 800d95e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d962:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	/* Convert angular velocity from [mdps] to [dps] */
	data_in.Gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800d966:	4b47      	ldr	r3, [pc, #284]	; (800da84 <get_inclination+0x1f0>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	ee07 3a90 	vmov	s15, r3
 800d96e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d972:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800da88 <get_inclination+0x1f4>
 800d976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d97a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	data_in.Gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800d97e:	4b41      	ldr	r3, [pc, #260]	; (800da84 <get_inclination+0x1f0>)
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	ee07 3a90 	vmov	s15, r3
 800d986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d98a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800da88 <get_inclination+0x1f4>
 800d98e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d992:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	data_in.Gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800d996:	4b3b      	ldr	r3, [pc, #236]	; (800da84 <get_inclination+0x1f0>)
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	ee07 3a90 	vmov	s15, r3
 800d99e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9a2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800da88 <get_inclination+0x1f4>
 800d9a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9aa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	//TIME
	data_in.Timestamp = Timestamp;
 800d9ae:	4b37      	ldr	r3, [pc, #220]	; (800da8c <get_inclination+0x1f8>)
 800d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	Timestamp += ALGO_PERIOD;
 800d9b8:	4b34      	ldr	r3, [pc, #208]	; (800da8c <get_inclination+0x1f8>)
 800d9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9be:	f242 7110 	movw	r1, #10000	; 0x2710
 800d9c2:	1854      	adds	r4, r2, r1
 800d9c4:	f143 0500 	adc.w	r5, r3, #0
 800d9c8:	4b30      	ldr	r3, [pc, #192]	; (800da8c <get_inclination+0x1f8>)
 800d9ca:	e9c3 4500 	strd	r4, r5, [r3]

	//Compute inclination infos----------------------------
	MotionDI_update(&data_out, &data_in);
 800d9ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d9d2:	1d3b      	adds	r3, r7, #4
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f008 f852 	bl	8015a80 <MotionDI_update>

	//Serialize inclination datas
	(void)memcpy(&buf_UART_TX[25], (void *)data_out.quaternion, 4U * sizeof(float));
 800d9dc:	1d3b      	adds	r3, r7, #4
 800d9de:	f103 010c 	add.w	r1, r3, #12
 800d9e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d9e6:	3319      	adds	r3, #25
 800d9e8:	2210      	movs	r2, #16
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f00b fc84 	bl	80192f8 <memcpy>
	(void)memcpy(&buf_UART_TX[41], (void *)data_out.rotation, 3U * sizeof(float));
 800d9f0:	1d39      	adds	r1, r7, #4
 800d9f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d9f6:	3329      	adds	r3, #41	; 0x29
 800d9f8:	220c      	movs	r2, #12
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f00b fc7c 	bl	80192f8 <memcpy>
	(void)memcpy(&buf_UART_TX[53], (void *)data_out.gravity, 3U * sizeof(float));
 800da00:	1d3b      	adds	r3, r7, #4
 800da02:	f103 011c 	add.w	r1, r3, #28
 800da06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800da0a:	3335      	adds	r3, #53	; 0x35
 800da0c:	220c      	movs	r2, #12
 800da0e:	4618      	mov	r0, r3
 800da10:	f00b fc72 	bl	80192f8 <memcpy>
	(void)memcpy(&buf_UART_TX[65], (void *)data_out.linear_acceleration, 3U * sizeof(float));
 800da14:	1d3b      	adds	r3, r7, #4
 800da16:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800da1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800da1e:	3341      	adds	r3, #65	; 0x41
 800da20:	220c      	movs	r2, #12
 800da22:	4618      	mov	r0, r3
 800da24:	f00b fc68 	bl	80192f8 <memcpy>

	//Cheksum computation
	for(unsigned int i=1; i<buf_size-1; i++){
 800da28:	2301      	movs	r3, #1
 800da2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800da2e:	e00f      	b.n	800da50 <get_inclination+0x1bc>
		checksum ^= buf_UART_TX[i];
 800da30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800da34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da38:	4413      	add	r3, r2
 800da3a:	781a      	ldrb	r2, [r3, #0]
 800da3c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800da40:	4053      	eors	r3, r2
 800da42:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	for(unsigned int i=1; i<buf_size-1; i++){
 800da46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da4a:	3301      	adds	r3, #1
 800da4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800da50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da54:	2b4c      	cmp	r3, #76	; 0x4c
 800da56:	d9eb      	bls.n	800da30 <get_inclination+0x19c>
	}
	buf_UART_TX[77] = checksum;
 800da58:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800da5c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5

	//Transmit via UART
	HAL_UART_Transmit(&huart2, (uint8_t *)buf_UART_TX, 78, 5000);
 800da60:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800da64:	f241 3388 	movw	r3, #5000	; 0x1388
 800da68:	224e      	movs	r2, #78	; 0x4e
 800da6a:	4809      	ldr	r0, [pc, #36]	; (800da90 <get_inclination+0x1fc>)
 800da6c:	f7fe fec8 	bl	800c800 <HAL_UART_Transmit>

	HAL_Delay(50);
 800da70:	2032      	movs	r0, #50	; 0x32
 800da72:	f7fa ff7d 	bl	8008970 <HAL_Delay>
}
 800da76:	bf00      	nop
 800da78:	37b0      	adds	r7, #176	; 0xb0
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bdb0      	pop	{r4, r5, r7, pc}
 800da7e:	bf00      	nop
 800da80:	20001ca0 	.word	0x20001ca0
 800da84:	20001cac 	.word	0x20001cac
 800da88:	3a83126f 	.word	0x3a83126f
 800da8c:	20001cb8 	.word	0x20001cb8
 800da90:	20001f88 	.word	0x20001f88

0800da94 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 800da98:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <UART_StartReceiveMsg+0x2c>)
 800da9a:	4a0a      	ldr	r2, [pc, #40]	; (800dac4 <UART_StartReceiveMsg+0x30>)
 800da9c:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 800da9e:	4b08      	ldr	r3, [pc, #32]	; (800dac0 <UART_StartReceiveMsg+0x2c>)
 800daa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daa4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800daa8:	4b05      	ldr	r3, [pc, #20]	; (800dac0 <UART_StartReceiveMsg+0x2c>)
 800daaa:	2200      	movs	r2, #0
 800daac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 800dab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dab4:	4903      	ldr	r1, [pc, #12]	; (800dac4 <UART_StartReceiveMsg+0x30>)
 800dab6:	4802      	ldr	r0, [pc, #8]	; (800dac0 <UART_StartReceiveMsg+0x2c>)
 800dab8:	f7fe ff36 	bl	800c928 <HAL_UART_Receive_DMA>
}
 800dabc:	bf00      	nop
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	20001f88 	.word	0x20001f88
 800dac4:	20001cc0 	.word	0x20001cc0

0800dac8 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800dacc:	2102      	movs	r1, #2
 800dace:	2000      	movs	r0, #0
 800dad0:	f7fa fb04 	bl	80080dc <IKS01A3_MOTION_SENSOR_Init>
}
 800dad4:	bf00      	nop
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800dadc:	2101      	movs	r1, #1
 800dade:	2000      	movs	r0, #0
 800dae0:	f7fa fafc 	bl	80080dc <IKS01A3_MOTION_SENSOR_Init>
}
 800dae4:	bf00      	nop
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800daec:	2104      	movs	r1, #4
 800daee:	2002      	movs	r0, #2
 800daf0:	f7fa faf4 	bl	80080dc <IKS01A3_MOTION_SENSOR_Init>
}
 800daf4:	bf00      	nop
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800dafc:	2102      	movs	r1, #2
 800dafe:	2001      	movs	r0, #1
 800db00:	f7f9 ffd6 	bl	8007ab0 <IKS01A3_ENV_SENSOR_Init>
}
 800db04:	bf00      	nop
 800db06:	bd80      	pop	{r7, pc}

0800db08 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800db0c:	2101      	movs	r1, #1
 800db0e:	2000      	movs	r0, #0
 800db10:	f7f9 ffce 	bl	8007ab0 <IKS01A3_ENV_SENSOR_Init>
}
 800db14:	bf00      	nop
 800db16:	bd80      	pop	{r7, pc}

0800db18 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800db1c:	2104      	movs	r1, #4
 800db1e:	2000      	movs	r0, #0
 800db20:	f7f9 ffc6 	bl	8007ab0 <IKS01A3_ENV_SENSOR_Init>
}
 800db24:	bf00      	nop
 800db26:	bd80      	pop	{r7, pc}

0800db28 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	2101      	movs	r1, #1
 800db34:	2000      	movs	r0, #0
 800db36:	f7fa fbcd 	bl	80082d4 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800db3a:	bf00      	nop
 800db3c:	3708      	adds	r7, #8
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800db42:	b580      	push	{r7, lr}
 800db44:	b082      	sub	sp, #8
 800db46:	af00      	add	r7, sp, #0
 800db48:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 800db4c:	ed97 0a01 	vldr	s0, [r7, #4]
 800db50:	2102      	movs	r1, #2
 800db52:	2000      	movs	r0, #0
 800db54:	f7fa fc02 	bl	800835c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	2102      	movs	r1, #2
 800db6c:	2000      	movs	r0, #0
 800db6e:	f7fa fc3b 	bl	80083e8 <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 800db72:	bf00      	nop
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800db7a:	b480      	push	{r7}
 800db7c:	b083      	sub	sp, #12
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2273      	movs	r2, #115	; 0x73
 800db86:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	3301      	adds	r3, #1
 800db8c:	2265      	movs	r2, #101	; 0x65
 800db8e:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	3302      	adds	r3, #2
 800db94:	2275      	movs	r2, #117	; 0x75
 800db96:	701a      	strb	r2, [r3, #0]
}
 800db98:	bf00      	nop
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2273      	movs	r2, #115	; 0x73
 800dbb0:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	2265      	movs	r2, #101	; 0x65
 800dbb8:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	3302      	adds	r3, #2
 800dbbe:	2275      	movs	r2, #117	; 0x75
 800dbc0:	701a      	strb	r2, [r3, #0]
}
 800dbc2:	bf00      	nop
 800dbc4:	370c      	adds	r7, #12
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800dbd2:	f7fa fe51 	bl	8008878 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800dbd6:	f000 f80d 	bl	800dbf4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800dbda:	f000 f949 	bl	800de70 <MX_GPIO_Init>
	MX_DMA_Init();
 800dbde:	f000 f929 	bl	800de34 <MX_DMA_Init>
	MX_CRC_Init();
 800dbe2:	f000 f85b 	bl	800dc9c <MX_CRC_Init>
	MX_RTC_Init();
 800dbe6:	f000 f87b 	bl	800dce0 <MX_RTC_Init>
	MX_MEMS_Init();
 800dbea:	f7ff fda0 	bl	800d72e <MX_MEMS_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		//MX_MEMS_Process();  //example
		get_inclination();
 800dbee:	f7ff fe51 	bl	800d894 <get_inclination>
	while (1) {
 800dbf2:	e7fc      	b.n	800dbee <main+0x20>

0800dbf4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b096      	sub	sp, #88	; 0x58
 800dbf8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800dbfa:	f107 0314 	add.w	r3, r7, #20
 800dbfe:	2244      	movs	r2, #68	; 0x44
 800dc00:	2100      	movs	r1, #0
 800dc02:	4618      	mov	r0, r3
 800dc04:	f00b fb86 	bl	8019314 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800dc08:	463b      	mov	r3, r7
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	601a      	str	r2, [r3, #0]
 800dc0e:	605a      	str	r2, [r3, #4]
 800dc10:	609a      	str	r2, [r3, #8]
 800dc12:	60da      	str	r2, [r3, #12]
 800dc14:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800dc16:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dc1a:	f7fc fc01 	bl	800a420 <HAL_PWREx_ControlVoltageScaling>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800dc24:	f000 f97e 	bl	800df24 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800dc28:	230a      	movs	r3, #10
 800dc2a:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800dc2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc30:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800dc32:	2310      	movs	r3, #16
 800dc34:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800dc36:	2301      	movs	r3, #1
 800dc38:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dc3a:	2302      	movs	r3, #2
 800dc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800dc3e:	2302      	movs	r3, #2
 800dc40:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800dc42:	2301      	movs	r3, #1
 800dc44:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800dc46:	230a      	movs	r3, #10
 800dc48:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800dc4a:	2307      	movs	r3, #7
 800dc4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800dc4e:	2302      	movs	r3, #2
 800dc50:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800dc52:	2302      	movs	r3, #2
 800dc54:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800dc56:	f107 0314 	add.w	r3, r7, #20
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fc fc36 	bl	800a4cc <HAL_RCC_OscConfig>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <SystemClock_Config+0x76>
		Error_Handler();
 800dc66:	f000 f95d 	bl	800df24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800dc6a:	230f      	movs	r3, #15
 800dc6c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dc6e:	2303      	movs	r3, #3
 800dc70:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dc72:	2300      	movs	r3, #0
 800dc74:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800dc76:	2300      	movs	r3, #0
 800dc78:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800dc7e:	463b      	mov	r3, r7
 800dc80:	2104      	movs	r1, #4
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fd f80a 	bl	800ac9c <HAL_RCC_ClockConfig>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <SystemClock_Config+0x9e>
		Error_Handler();
 800dc8e:	f000 f949 	bl	800df24 <Error_Handler>
	}
}
 800dc92:	bf00      	nop
 800dc94:	3758      	adds	r7, #88	; 0x58
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
	...

0800dc9c <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800dca0:	4b0d      	ldr	r3, [pc, #52]	; (800dcd8 <MX_CRC_Init+0x3c>)
 800dca2:	4a0e      	ldr	r2, [pc, #56]	; (800dcdc <MX_CRC_Init+0x40>)
 800dca4:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800dca6:	4b0c      	ldr	r3, [pc, #48]	; (800dcd8 <MX_CRC_Init+0x3c>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800dcac:	4b0a      	ldr	r3, [pc, #40]	; (800dcd8 <MX_CRC_Init+0x3c>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800dcb2:	4b09      	ldr	r3, [pc, #36]	; (800dcd8 <MX_CRC_Init+0x3c>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800dcb8:	4b07      	ldr	r3, [pc, #28]	; (800dcd8 <MX_CRC_Init+0x3c>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800dcbe:	4b06      	ldr	r3, [pc, #24]	; (800dcd8 <MX_CRC_Init+0x3c>)
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800dcc4:	4804      	ldr	r0, [pc, #16]	; (800dcd8 <MX_CRC_Init+0x3c>)
 800dcc6:	f7fa ff89 	bl	8008bdc <HAL_CRC_Init>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d001      	beq.n	800dcd4 <MX_CRC_Init+0x38>
		Error_Handler();
 800dcd0:	f000 f928 	bl	800df24 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800dcd4:	bf00      	nop
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	20001ec0 	.word	0x20001ec0
 800dcdc:	40023000 	.word	0x40023000

0800dce0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800dce6:	1d3b      	adds	r3, r7, #4
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	605a      	str	r2, [r3, #4]
 800dcee:	609a      	str	r2, [r3, #8]
 800dcf0:	60da      	str	r2, [r3, #12]
 800dcf2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800dcf8:	4b25      	ldr	r3, [pc, #148]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dcfa:	4a26      	ldr	r2, [pc, #152]	; (800dd94 <MX_RTC_Init+0xb4>)
 800dcfc:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800dcfe:	4b24      	ldr	r3, [pc, #144]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd00:	2200      	movs	r2, #0
 800dd02:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800dd04:	4b22      	ldr	r3, [pc, #136]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd06:	227f      	movs	r2, #127	; 0x7f
 800dd08:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800dd0a:	4b21      	ldr	r3, [pc, #132]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd0c:	22ff      	movs	r2, #255	; 0xff
 800dd0e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800dd10:	4b1f      	ldr	r3, [pc, #124]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800dd16:	4b1e      	ldr	r3, [pc, #120]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dd1c:	4b1c      	ldr	r3, [pc, #112]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dd22:	4b1b      	ldr	r3, [pc, #108]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800dd28:	4819      	ldr	r0, [pc, #100]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd2a:	f7fd fe79 	bl	800ba20 <HAL_RTC_Init>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d001      	beq.n	800dd38 <MX_RTC_Init+0x58>
		Error_Handler();
 800dd34:	f000 f8f6 	bl	800df24 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800dd44:	2300      	movs	r3, #0
 800dd46:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800dd4c:	1d3b      	adds	r3, r7, #4
 800dd4e:	2201      	movs	r2, #1
 800dd50:	4619      	mov	r1, r3
 800dd52:	480f      	ldr	r0, [pc, #60]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd54:	f7fd fedf 	bl	800bb16 <HAL_RTC_SetTime>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <MX_RTC_Init+0x82>
		Error_Handler();
 800dd5e:	f000 f8e1 	bl	800df24 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800dd62:	2301      	movs	r3, #1
 800dd64:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 800dd66:	2301      	movs	r3, #1
 800dd68:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800dd72:	463b      	mov	r3, r7
 800dd74:	2201      	movs	r2, #1
 800dd76:	4619      	mov	r1, r3
 800dd78:	4805      	ldr	r0, [pc, #20]	; (800dd90 <MX_RTC_Init+0xb0>)
 800dd7a:	f7fd ff69 	bl	800bc50 <HAL_RTC_SetDate>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <MX_RTC_Init+0xa8>
		Error_Handler();
 800dd84:	f000 f8ce 	bl	800df24 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800dd88:	bf00      	nop
 800dd8a:	3718      	adds	r7, #24
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	20001ee4 	.word	0x20001ee4
 800dd94:	40002800 	.word	0x40002800

0800dd98 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM3_Init(void) {
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800dd9e:	f107 0310 	add.w	r3, r7, #16
 800dda2:	2200      	movs	r2, #0
 800dda4:	601a      	str	r2, [r3, #0]
 800dda6:	605a      	str	r2, [r3, #4]
 800dda8:	609a      	str	r2, [r3, #8]
 800ddaa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800ddac:	1d3b      	adds	r3, r7, #4
 800ddae:	2200      	movs	r2, #0
 800ddb0:	601a      	str	r2, [r3, #0]
 800ddb2:	605a      	str	r2, [r3, #4]
 800ddb4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800ddb6:	4b1d      	ldr	r3, [pc, #116]	; (800de2c <MX_TIM3_Init+0x94>)
 800ddb8:	4a1d      	ldr	r2, [pc, #116]	; (800de30 <MX_TIM3_Init+0x98>)
 800ddba:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800ddbc:	4b1b      	ldr	r3, [pc, #108]	; (800de2c <MX_TIM3_Init+0x94>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddc2:	4b1a      	ldr	r3, [pc, #104]	; (800de2c <MX_TIM3_Init+0x94>)
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800ddc8:	4b18      	ldr	r3, [pc, #96]	; (800de2c <MX_TIM3_Init+0x94>)
 800ddca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddce:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ddd0:	4b16      	ldr	r3, [pc, #88]	; (800de2c <MX_TIM3_Init+0x94>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ddd6:	4b15      	ldr	r3, [pc, #84]	; (800de2c <MX_TIM3_Init+0x94>)
 800ddd8:	2200      	movs	r2, #0
 800ddda:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800dddc:	4813      	ldr	r0, [pc, #76]	; (800de2c <MX_TIM3_Init+0x94>)
 800ddde:	f7fe f875 	bl	800becc <HAL_TIM_Base_Init>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <MX_TIM3_Init+0x54>
		Error_Handler();
 800dde8:	f000 f89c 	bl	800df24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ddec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddf0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800ddf2:	f107 0310 	add.w	r3, r7, #16
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	480c      	ldr	r0, [pc, #48]	; (800de2c <MX_TIM3_Init+0x94>)
 800ddfa:	f7fe f9dd 	bl	800c1b8 <HAL_TIM_ConfigClockSource>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d001      	beq.n	800de08 <MX_TIM3_Init+0x70>
		Error_Handler();
 800de04:	f000 f88e 	bl	800df24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de08:	2300      	movs	r3, #0
 800de0a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de0c:	2300      	movs	r3, #0
 800de0e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800de10:	1d3b      	adds	r3, r7, #4
 800de12:	4619      	mov	r1, r3
 800de14:	4805      	ldr	r0, [pc, #20]	; (800de2c <MX_TIM3_Init+0x94>)
 800de16:	f7fe fbf5 	bl	800c604 <HAL_TIMEx_MasterConfigSynchronization>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800de20:	f000 f880 	bl	800df24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800de24:	bf00      	nop
 800de26:	3720      	adds	r7, #32
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	20001f08 	.word	0x20001f08
 800de30:	40000400 	.word	0x40000400

0800de34 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800de3a:	4b0c      	ldr	r3, [pc, #48]	; (800de6c <MX_DMA_Init+0x38>)
 800de3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de3e:	4a0b      	ldr	r2, [pc, #44]	; (800de6c <MX_DMA_Init+0x38>)
 800de40:	f043 0301 	orr.w	r3, r3, #1
 800de44:	6493      	str	r3, [r2, #72]	; 0x48
 800de46:	4b09      	ldr	r3, [pc, #36]	; (800de6c <MX_DMA_Init+0x38>)
 800de48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	607b      	str	r3, [r7, #4]
 800de50:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800de52:	2200      	movs	r2, #0
 800de54:	2100      	movs	r1, #0
 800de56:	2010      	movs	r0, #16
 800de58:	f7fa fe89 	bl	8008b6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800de5c:	2010      	movs	r0, #16
 800de5e:	f7fa fea2 	bl	8008ba6 <HAL_NVIC_EnableIRQ>

}
 800de62:	bf00      	nop
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	40021000 	.word	0x40021000

0800de70 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800de70:	b580      	push	{r7, lr}
 800de72:	b08a      	sub	sp, #40	; 0x28
 800de74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800de76:	f107 0314 	add.w	r3, r7, #20
 800de7a:	2200      	movs	r2, #0
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	605a      	str	r2, [r3, #4]
 800de80:	609a      	str	r2, [r3, #8]
 800de82:	60da      	str	r2, [r3, #12]
 800de84:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800de86:	4b25      	ldr	r3, [pc, #148]	; (800df1c <MX_GPIO_Init+0xac>)
 800de88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de8a:	4a24      	ldr	r2, [pc, #144]	; (800df1c <MX_GPIO_Init+0xac>)
 800de8c:	f043 0304 	orr.w	r3, r3, #4
 800de90:	64d3      	str	r3, [r2, #76]	; 0x4c
 800de92:	4b22      	ldr	r3, [pc, #136]	; (800df1c <MX_GPIO_Init+0xac>)
 800de94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de96:	f003 0304 	and.w	r3, r3, #4
 800de9a:	613b      	str	r3, [r7, #16]
 800de9c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800de9e:	4b1f      	ldr	r3, [pc, #124]	; (800df1c <MX_GPIO_Init+0xac>)
 800dea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dea2:	4a1e      	ldr	r2, [pc, #120]	; (800df1c <MX_GPIO_Init+0xac>)
 800dea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800deaa:	4b1c      	ldr	r3, [pc, #112]	; (800df1c <MX_GPIO_Init+0xac>)
 800deac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deb2:	60fb      	str	r3, [r7, #12]
 800deb4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800deb6:	4b19      	ldr	r3, [pc, #100]	; (800df1c <MX_GPIO_Init+0xac>)
 800deb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deba:	4a18      	ldr	r2, [pc, #96]	; (800df1c <MX_GPIO_Init+0xac>)
 800debc:	f043 0301 	orr.w	r3, r3, #1
 800dec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dec2:	4b16      	ldr	r3, [pc, #88]	; (800df1c <MX_GPIO_Init+0xac>)
 800dec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dec6:	f003 0301 	and.w	r3, r3, #1
 800deca:	60bb      	str	r3, [r7, #8]
 800decc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800dece:	4b13      	ldr	r3, [pc, #76]	; (800df1c <MX_GPIO_Init+0xac>)
 800ded0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ded2:	4a12      	ldr	r2, [pc, #72]	; (800df1c <MX_GPIO_Init+0xac>)
 800ded4:	f043 0302 	orr.w	r3, r3, #2
 800ded8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800deda:	4b10      	ldr	r3, [pc, #64]	; (800df1c <MX_GPIO_Init+0xac>)
 800dedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	607b      	str	r3, [r7, #4]
 800dee4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800dee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800deea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800deec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800def0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800def2:	2300      	movs	r3, #0
 800def4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800def6:	f107 0314 	add.w	r3, r7, #20
 800defa:	4619      	mov	r1, r3
 800defc:	4808      	ldr	r0, [pc, #32]	; (800df20 <MX_GPIO_Init+0xb0>)
 800defe:	f7fb f94f 	bl	80091a0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800df02:	2200      	movs	r2, #0
 800df04:	2100      	movs	r1, #0
 800df06:	2028      	movs	r0, #40	; 0x28
 800df08:	f7fa fe31 	bl	8008b6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800df0c:	2028      	movs	r0, #40	; 0x28
 800df0e:	f7fa fe4a 	bl	8008ba6 <HAL_NVIC_EnableIRQ>

}
 800df12:	bf00      	nop
 800df14:	3728      	adds	r7, #40	; 0x28
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	40021000 	.word	0x40021000
 800df20:	48000800 	.word	0x48000800

0800df24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800df24:	b480      	push	{r7}
 800df26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800df28:	b672      	cpsid	i
}
 800df2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800df2c:	e7fe      	b.n	800df2c <Error_Handler+0x8>
	...

0800df30 <MotionDI_manager_init>:
 * @brief  Initialize the MotionDI engine
 * @param  freq frequency of input data
 * @retval None
 */
void MotionDI_manager_init(float freq)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
 800df36:	ed87 0a01 	vstr	s0, [r7, #4]
  MotionDI_Initialize(&freq);
 800df3a:	1d3b      	adds	r3, r7, #4
 800df3c:	4618      	mov	r0, r3
 800df3e:	f007 fa03 	bl	8015348 <MotionDI_Initialize>

  MotionDI_getKnobs(ipKnobs);
 800df42:	4b1b      	ldr	r3, [pc, #108]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4618      	mov	r0, r3
 800df48:	f007 fd4e 	bl	80159e8 <MotionDI_getKnobs>

  ipKnobs->AccKnob.CalType = MDI_CAL_CONTINUOUS;
 800df4c:	4b18      	ldr	r3, [pc, #96]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2202      	movs	r2, #2
 800df52:	711a      	strb	r2, [r3, #4]
  ipKnobs->GyrKnob.CalType = MDI_CAL_CONTINUOUS;
 800df54:	4b16      	ldr	r3, [pc, #88]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2202      	movs	r2, #2
 800df5a:	771a      	strb	r2, [r3, #28]

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->AccOrientation);
 800df5c:	4b14      	ldr	r3, [pc, #80]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	332c      	adds	r3, #44	; 0x2c
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff fe09 	bl	800db7a <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->GyroOrientation);
 800df68:	4b11      	ldr	r3, [pc, #68]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3330      	adds	r3, #48	; 0x30
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff fe18 	bl	800dba4 <BSP_SENSOR_GYR_GetOrientation>

  ipKnobs->SFKnob.output_type = MDI_ENGINE_OUTPUT_ENU;
 800df74:	4b0e      	ldr	r3, [pc, #56]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2201      	movs	r2, #1
 800df7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->SFKnob.modx = DECIMATION;
 800df7e:	4b0c      	ldr	r3, [pc, #48]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  MotionDI_setKnobs(ipKnobs);
 800df88:	4b09      	ldr	r3, [pc, #36]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4618      	mov	r0, r3
 800df8e:	f007 fd21 	bl	80159d4 <MotionDI_setKnobs>

  AccCalMode = ipKnobs->AccKnob.CalType;
 800df92:	4b07      	ldr	r3, [pc, #28]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	791a      	ldrb	r2, [r3, #4]
 800df98:	4b06      	ldr	r3, [pc, #24]	; (800dfb4 <MotionDI_manager_init+0x84>)
 800df9a:	701a      	strb	r2, [r3, #0]
  GyrCalMode = ipKnobs->GyrKnob.CalType;
 800df9c:	4b04      	ldr	r3, [pc, #16]	; (800dfb0 <MotionDI_manager_init+0x80>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	7f1a      	ldrb	r2, [r3, #28]
 800dfa2:	4b05      	ldr	r3, [pc, #20]	; (800dfb8 <MotionDI_manager_init+0x88>)
 800dfa4:	701a      	strb	r2, [r3, #0]
}
 800dfa6:	bf00      	nop
 800dfa8:	3708      	adds	r7, #8
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	20001344 	.word	0x20001344
 800dfb4:	20001c9d 	.word	0x20001c9d
 800dfb8:	20001c9e 	.word	0x20001c9e

0800dfbc <MotionDI_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionDI_manager_get_version(char *version, int *length)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  *length = (int)MotionDI_GetLibVersion(version);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f00b f946 	bl	8019258 <MotionDI_GetLibVersion>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	461a      	mov	r2, r3
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	601a      	str	r2, [r3, #0]
}
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b087      	sub	sp, #28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	617b      	str	r3, [r7, #20]
 800dfec:	e00f      	b.n	800e00e <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800dff2:	68fa      	ldr	r2, [r7, #12]
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	4413      	add	r3, r2
 800dff8:	693a      	ldr	r2, [r7, #16]
 800dffa:	b2d2      	uxtb	r2, r2
 800dffc:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	0a1b      	lsrs	r3, r3, #8
 800e002:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	3301      	adds	r3, #1
 800e00c:	617b      	str	r3, [r7, #20]
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	429a      	cmp	r2, r3
 800e014:	d3eb      	bcc.n	800dfee <Serialize_s32+0x12>
  }
}
 800e016:	bf00      	nop
 800e018:	bf00      	nop
 800e01a:	371c      	adds	r7, #28
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e02a:	4b0f      	ldr	r3, [pc, #60]	; (800e068 <HAL_MspInit+0x44>)
 800e02c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e02e:	4a0e      	ldr	r2, [pc, #56]	; (800e068 <HAL_MspInit+0x44>)
 800e030:	f043 0301 	orr.w	r3, r3, #1
 800e034:	6613      	str	r3, [r2, #96]	; 0x60
 800e036:	4b0c      	ldr	r3, [pc, #48]	; (800e068 <HAL_MspInit+0x44>)
 800e038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	607b      	str	r3, [r7, #4]
 800e040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e042:	4b09      	ldr	r3, [pc, #36]	; (800e068 <HAL_MspInit+0x44>)
 800e044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e046:	4a08      	ldr	r2, [pc, #32]	; (800e068 <HAL_MspInit+0x44>)
 800e048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e04c:	6593      	str	r3, [r2, #88]	; 0x58
 800e04e:	4b06      	ldr	r3, [pc, #24]	; (800e068 <HAL_MspInit+0x44>)
 800e050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e05a:	bf00      	nop
 800e05c:	370c      	adds	r7, #12
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop
 800e068:	40021000 	.word	0x40021000

0800e06c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a0a      	ldr	r2, [pc, #40]	; (800e0a4 <HAL_CRC_MspInit+0x38>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d10b      	bne.n	800e096 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800e07e:	4b0a      	ldr	r3, [pc, #40]	; (800e0a8 <HAL_CRC_MspInit+0x3c>)
 800e080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e082:	4a09      	ldr	r2, [pc, #36]	; (800e0a8 <HAL_CRC_MspInit+0x3c>)
 800e084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e088:	6493      	str	r3, [r2, #72]	; 0x48
 800e08a:	4b07      	ldr	r3, [pc, #28]	; (800e0a8 <HAL_CRC_MspInit+0x3c>)
 800e08c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e08e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e092:	60fb      	str	r3, [r7, #12]
 800e094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800e096:	bf00      	nop
 800e098:	3714      	adds	r7, #20
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	40023000 	.word	0x40023000
 800e0a8:	40021000 	.word	0x40021000

0800e0ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b0a4      	sub	sp, #144	; 0x90
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e0b4:	f107 0308 	add.w	r3, r7, #8
 800e0b8:	2288      	movs	r2, #136	; 0x88
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f00b f929 	bl	8019314 <memset>
  if(hrtc->Instance==RTC)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a10      	ldr	r2, [pc, #64]	; (800e108 <HAL_RTC_MspInit+0x5c>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d118      	bne.n	800e0fe <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800e0cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e0d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800e0d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e0da:	f107 0308 	add.w	r3, r7, #8
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fc ffe2 	bl	800b0a8 <HAL_RCCEx_PeriphCLKConfig>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800e0ea:	f7ff ff1b 	bl	800df24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e0ee:	4b07      	ldr	r3, [pc, #28]	; (800e10c <HAL_RTC_MspInit+0x60>)
 800e0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0f4:	4a05      	ldr	r2, [pc, #20]	; (800e10c <HAL_RTC_MspInit+0x60>)
 800e0f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e0fe:	bf00      	nop
 800e100:	3790      	adds	r7, #144	; 0x90
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	40002800 	.word	0x40002800
 800e10c:	40021000 	.word	0x40021000

0800e110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a0d      	ldr	r2, [pc, #52]	; (800e154 <HAL_TIM_Base_MspInit+0x44>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d113      	bne.n	800e14a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e122:	4b0d      	ldr	r3, [pc, #52]	; (800e158 <HAL_TIM_Base_MspInit+0x48>)
 800e124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e126:	4a0c      	ldr	r2, [pc, #48]	; (800e158 <HAL_TIM_Base_MspInit+0x48>)
 800e128:	f043 0302 	orr.w	r3, r3, #2
 800e12c:	6593      	str	r3, [r2, #88]	; 0x58
 800e12e:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <HAL_TIM_Base_MspInit+0x48>)
 800e130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e132:	f003 0302 	and.w	r3, r3, #2
 800e136:	60fb      	str	r3, [r7, #12]
 800e138:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800e13a:	2200      	movs	r2, #0
 800e13c:	2100      	movs	r1, #0
 800e13e:	201d      	movs	r0, #29
 800e140:	f7fa fd15 	bl	8008b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e144:	201d      	movs	r0, #29
 800e146:	f7fa fd2e 	bl	8008ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800e14a:	bf00      	nop
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	40000400 	.word	0x40000400
 800e158:	40021000 	.word	0x40021000

0800e15c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e15c:	b480      	push	{r7}
 800e15e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e160:	e7fe      	b.n	800e160 <NMI_Handler+0x4>

0800e162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e162:	b480      	push	{r7}
 800e164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e166:	e7fe      	b.n	800e166 <HardFault_Handler+0x4>

0800e168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e168:	b480      	push	{r7}
 800e16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e16c:	e7fe      	b.n	800e16c <MemManage_Handler+0x4>

0800e16e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e16e:	b480      	push	{r7}
 800e170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e172:	e7fe      	b.n	800e172 <BusFault_Handler+0x4>

0800e174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e174:	b480      	push	{r7}
 800e176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e178:	e7fe      	b.n	800e178 <UsageFault_Handler+0x4>

0800e17a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e17a:	b480      	push	{r7}
 800e17c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e17e:	bf00      	nop
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e188:	b480      	push	{r7}
 800e18a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e18c:	bf00      	nop
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e196:	b480      	push	{r7}
 800e198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e19a:	bf00      	nop
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e1a8:	f7fa fbc2 	bl	8008930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e1ac:	bf00      	nop
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800e1b4:	4802      	ldr	r0, [pc, #8]	; (800e1c0 <DMA1_Channel6_IRQHandler+0x10>)
 800e1b6:	f7fa ff13 	bl	8008fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800e1ba:	bf00      	nop
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	2000200c 	.word	0x2000200c

0800e1c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800e1c8:	4802      	ldr	r0, [pc, #8]	; (800e1d4 <TIM3_IRQHandler+0x10>)
 800e1ca:	f7fd fed6 	bl	800bf7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800e1ce:	bf00      	nop
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20001f08 	.word	0x20001f08

0800e1d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800e1dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e1e0:	f7fb fa94 	bl	800970c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e1e4:	bf00      	nop
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800e1f2:	79fb      	ldrb	r3, [r7, #7]
 800e1f4:	4a04      	ldr	r2, [pc, #16]	; (800e208 <BSP_LED_Init+0x20>)
 800e1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1fa:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	0801b55c 	.word	0x0801b55c

0800e20c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	4603      	mov	r3, r0
 800e214:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800e216:	79fb      	ldrb	r3, [r7, #7]
 800e218:	4a06      	ldr	r2, [pc, #24]	; (800e234 <BSP_LED_On+0x28>)
 800e21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e21e:	2120      	movs	r1, #32
 800e220:	2201      	movs	r2, #1
 800e222:	4618      	mov	r0, r3
 800e224:	f7fb fa5a 	bl	80096dc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	20001348 	.word	0x20001348

0800e238 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	4603      	mov	r3, r0
 800e240:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800e242:	79fb      	ldrb	r3, [r7, #7]
 800e244:	4a06      	ldr	r2, [pc, #24]	; (800e260 <BSP_LED_Off+0x28>)
 800e246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e24a:	2120      	movs	r1, #32
 800e24c:	2200      	movs	r2, #0
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fb fa44 	bl	80096dc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	20001348 	.word	0x20001348

0800e264 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800e264:	b580      	push	{r7, lr}
 800e266:	b088      	sub	sp, #32
 800e268:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e26a:	4b1c      	ldr	r3, [pc, #112]	; (800e2dc <LED_USER_GPIO_Init+0x78>)
 800e26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e26e:	4a1b      	ldr	r2, [pc, #108]	; (800e2dc <LED_USER_GPIO_Init+0x78>)
 800e270:	f043 0301 	orr.w	r3, r3, #1
 800e274:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e276:	4b19      	ldr	r3, [pc, #100]	; (800e2dc <LED_USER_GPIO_Init+0x78>)
 800e278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e27a:	f003 0301 	and.w	r3, r3, #1
 800e27e:	60bb      	str	r3, [r7, #8]
 800e280:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e282:	f107 030c 	add.w	r3, r7, #12
 800e286:	2200      	movs	r2, #0
 800e288:	601a      	str	r2, [r3, #0]
 800e28a:	605a      	str	r2, [r3, #4]
 800e28c:	609a      	str	r2, [r3, #8]
 800e28e:	60da      	str	r2, [r3, #12]
 800e290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e292:	4b12      	ldr	r3, [pc, #72]	; (800e2dc <LED_USER_GPIO_Init+0x78>)
 800e294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e296:	4a11      	ldr	r2, [pc, #68]	; (800e2dc <LED_USER_GPIO_Init+0x78>)
 800e298:	f043 0301 	orr.w	r3, r3, #1
 800e29c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e29e:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <LED_USER_GPIO_Init+0x78>)
 800e2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2a2:	f003 0301 	and.w	r3, r3, #1
 800e2a6:	607b      	str	r3, [r7, #4]
 800e2a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	2120      	movs	r1, #32
 800e2ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e2b2:	f7fb fa13 	bl	80096dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800e2b6:	2320      	movs	r3, #32
 800e2b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800e2c6:	f107 030c 	add.w	r3, r7, #12
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e2d0:	f7fa ff66 	bl	80091a0 <HAL_GPIO_Init>

}
 800e2d4:	bf00      	nop
 800e2d6:	3720      	adds	r7, #32
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	40021000 	.word	0x40021000

0800e2e0 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d903      	bls.n	800e2fc <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e2f4:	f06f 0301 	mvn.w	r3, #1
 800e2f8:	60fb      	str	r3, [r7, #12]
 800e2fa:	e025      	b.n	800e348 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800e2fc:	79fb      	ldrb	r3, [r7, #7]
 800e2fe:	79fa      	ldrb	r2, [r7, #7]
 800e300:	4914      	ldr	r1, [pc, #80]	; (800e354 <BSP_COM_Init+0x74>)
 800e302:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e306:	4814      	ldr	r0, [pc, #80]	; (800e358 <BSP_COM_Init+0x78>)
 800e308:	4613      	mov	r3, r2
 800e30a:	015b      	lsls	r3, r3, #5
 800e30c:	4413      	add	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4403      	add	r3, r0
 800e312:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800e314:	79fa      	ldrb	r2, [r7, #7]
 800e316:	4613      	mov	r3, r2
 800e318:	015b      	lsls	r3, r3, #5
 800e31a:	4413      	add	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4a0e      	ldr	r2, [pc, #56]	; (800e358 <BSP_COM_Init+0x78>)
 800e320:	4413      	add	r3, r2
 800e322:	4618      	mov	r0, r3
 800e324:	f000 f84e 	bl	800e3c4 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800e328:	79fa      	ldrb	r2, [r7, #7]
 800e32a:	4613      	mov	r3, r2
 800e32c:	015b      	lsls	r3, r3, #5
 800e32e:	4413      	add	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4a09      	ldr	r2, [pc, #36]	; (800e358 <BSP_COM_Init+0x78>)
 800e334:	4413      	add	r3, r2
 800e336:	4618      	mov	r0, r3
 800e338:	f000 f810 	bl	800e35c <MX_USART2_UART_Init>
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d002      	beq.n	800e348 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800e342:	f06f 0303 	mvn.w	r3, #3
 800e346:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800e348:	68fb      	ldr	r3, [r7, #12]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	2000134c 	.word	0x2000134c
 800e358:	20001f88 	.word	0x20001f88

0800e35c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e364:	2300      	movs	r3, #0
 800e366:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4a15      	ldr	r2, [pc, #84]	; (800e3c0 <MX_USART2_UART_Init+0x64>)
 800e36c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800e374:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	220c      	movs	r2, #12
 800e38c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7fe f9d2 	bl	800c750 <HAL_UART_Init>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	40004400 	.word	0x40004400

0800e3c4 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b08a      	sub	sp, #40	; 0x28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800e3cc:	4b30      	ldr	r3, [pc, #192]	; (800e490 <USART2_MspInit+0xcc>)
 800e3ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3d0:	4a2f      	ldr	r2, [pc, #188]	; (800e490 <USART2_MspInit+0xcc>)
 800e3d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e3d6:	6593      	str	r3, [r2, #88]	; 0x58
 800e3d8:	4b2d      	ldr	r3, [pc, #180]	; (800e490 <USART2_MspInit+0xcc>)
 800e3da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3e0:	613b      	str	r3, [r7, #16]
 800e3e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3e4:	4b2a      	ldr	r3, [pc, #168]	; (800e490 <USART2_MspInit+0xcc>)
 800e3e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3e8:	4a29      	ldr	r2, [pc, #164]	; (800e490 <USART2_MspInit+0xcc>)
 800e3ea:	f043 0301 	orr.w	r3, r3, #1
 800e3ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e3f0:	4b27      	ldr	r3, [pc, #156]	; (800e490 <USART2_MspInit+0xcc>)
 800e3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3f4:	f003 0301 	and.w	r3, r3, #1
 800e3f8:	60fb      	str	r3, [r7, #12]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800e3fc:	2304      	movs	r3, #4
 800e3fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e400:	2302      	movs	r3, #2
 800e402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e404:	2300      	movs	r3, #0
 800e406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e408:	2303      	movs	r3, #3
 800e40a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800e40c:	2307      	movs	r3, #7
 800e40e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800e410:	f107 0314 	add.w	r3, r7, #20
 800e414:	4619      	mov	r1, r3
 800e416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e41a:	f7fa fec1 	bl	80091a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800e41e:	2308      	movs	r3, #8
 800e420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e422:	2302      	movs	r3, #2
 800e424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e426:	2300      	movs	r3, #0
 800e428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e42a:	2303      	movs	r3, #3
 800e42c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800e42e:	2307      	movs	r3, #7
 800e430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800e432:	f107 0314 	add.w	r3, r7, #20
 800e436:	4619      	mov	r1, r3
 800e438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e43c:	f7fa feb0 	bl	80091a0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 800e440:	4b14      	ldr	r3, [pc, #80]	; (800e494 <USART2_MspInit+0xd0>)
 800e442:	4a15      	ldr	r2, [pc, #84]	; (800e498 <USART2_MspInit+0xd4>)
 800e444:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800e446:	4b13      	ldr	r3, [pc, #76]	; (800e494 <USART2_MspInit+0xd0>)
 800e448:	2202      	movs	r2, #2
 800e44a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e44c:	4b11      	ldr	r3, [pc, #68]	; (800e494 <USART2_MspInit+0xd0>)
 800e44e:	2200      	movs	r2, #0
 800e450:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e452:	4b10      	ldr	r3, [pc, #64]	; (800e494 <USART2_MspInit+0xd0>)
 800e454:	2200      	movs	r2, #0
 800e456:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e458:	4b0e      	ldr	r3, [pc, #56]	; (800e494 <USART2_MspInit+0xd0>)
 800e45a:	2280      	movs	r2, #128	; 0x80
 800e45c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e45e:	4b0d      	ldr	r3, [pc, #52]	; (800e494 <USART2_MspInit+0xd0>)
 800e460:	2200      	movs	r2, #0
 800e462:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e464:	4b0b      	ldr	r3, [pc, #44]	; (800e494 <USART2_MspInit+0xd0>)
 800e466:	2200      	movs	r2, #0
 800e468:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800e46a:	4b0a      	ldr	r3, [pc, #40]	; (800e494 <USART2_MspInit+0xd0>)
 800e46c:	2220      	movs	r2, #32
 800e46e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e470:	4b08      	ldr	r3, [pc, #32]	; (800e494 <USART2_MspInit+0xd0>)
 800e472:	2200      	movs	r2, #0
 800e474:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 800e476:	4807      	ldr	r0, [pc, #28]	; (800e494 <USART2_MspInit+0xd0>)
 800e478:	f7fa fc9a 	bl	8008db0 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4a05      	ldr	r2, [pc, #20]	; (800e494 <USART2_MspInit+0xd0>)
 800e480:	671a      	str	r2, [r3, #112]	; 0x70
 800e482:	4a04      	ldr	r2, [pc, #16]	; (800e494 <USART2_MspInit+0xd0>)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800e488:	bf00      	nop
 800e48a:	3728      	adds	r7, #40	; 0x28
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	40021000 	.word	0x40021000
 800e494:	2000200c 	.word	0x2000200c
 800e498:	4002006c 	.word	0x4002006c

0800e49c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800e4a6:	4b19      	ldr	r3, [pc, #100]	; (800e50c <BSP_I2C1_Init+0x70>)
 800e4a8:	4a19      	ldr	r2, [pc, #100]	; (800e510 <BSP_I2C1_Init+0x74>)
 800e4aa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800e4ac:	4b19      	ldr	r3, [pc, #100]	; (800e514 <BSP_I2C1_Init+0x78>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	4918      	ldr	r1, [pc, #96]	; (800e514 <BSP_I2C1_Init+0x78>)
 800e4b4:	600a      	str	r2, [r1, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d122      	bne.n	800e500 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800e4ba:	4814      	ldr	r0, [pc, #80]	; (800e50c <BSP_I2C1_Init+0x70>)
 800e4bc:	f7fb fc4a 	bl	8009d54 <HAL_I2C_GetState>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d11c      	bne.n	800e500 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800e4c6:	4811      	ldr	r0, [pc, #68]	; (800e50c <BSP_I2C1_Init+0x70>)
 800e4c8:	f000 f8fe 	bl	800e6c8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d116      	bne.n	800e500 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800e4d2:	480e      	ldr	r0, [pc, #56]	; (800e50c <BSP_I2C1_Init+0x70>)
 800e4d4:	f000 f8b4 	bl	800e640 <MX_I2C1_Init>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d003      	beq.n	800e4e6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800e4de:	f06f 0307 	mvn.w	r3, #7
 800e4e2:	607b      	str	r3, [r7, #4]
 800e4e4:	e00c      	b.n	800e500 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	4808      	ldr	r0, [pc, #32]	; (800e50c <BSP_I2C1_Init+0x70>)
 800e4ea:	f7fb fef3 	bl	800a2d4 <HAL_I2CEx_ConfigAnalogFilter>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d003      	beq.n	800e4fc <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800e4f4:	f06f 0307 	mvn.w	r3, #7
 800e4f8:	607b      	str	r3, [r7, #4]
 800e4fa:	e001      	b.n	800e500 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800e500:	687b      	ldr	r3, [r7, #4]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	20002054 	.word	0x20002054
 800e510:	40005400 	.word	0x40005400
 800e514:	200020a0 	.word	0x200020a0

0800e518 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800e51e:	2300      	movs	r3, #0
 800e520:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800e522:	4b0f      	ldr	r3, [pc, #60]	; (800e560 <BSP_I2C1_DeInit+0x48>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d014      	beq.n	800e554 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800e52a:	4b0d      	ldr	r3, [pc, #52]	; (800e560 <BSP_I2C1_DeInit+0x48>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3b01      	subs	r3, #1
 800e530:	4a0b      	ldr	r2, [pc, #44]	; (800e560 <BSP_I2C1_DeInit+0x48>)
 800e532:	6013      	str	r3, [r2, #0]
 800e534:	4b0a      	ldr	r3, [pc, #40]	; (800e560 <BSP_I2C1_DeInit+0x48>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d10b      	bne.n	800e554 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800e53c:	4809      	ldr	r0, [pc, #36]	; (800e564 <BSP_I2C1_DeInit+0x4c>)
 800e53e:	f000 f909 	bl	800e754 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800e542:	4808      	ldr	r0, [pc, #32]	; (800e564 <BSP_I2C1_DeInit+0x4c>)
 800e544:	f7fb f994 	bl	8009870 <HAL_I2C_DeInit>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800e54e:	f06f 0307 	mvn.w	r3, #7
 800e552:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800e554:	687b      	ldr	r3, [r7, #4]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	200020a0 	.word	0x200020a0
 800e564:	20002054 	.word	0x20002054

0800e568 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b08a      	sub	sp, #40	; 0x28
 800e56c:	af04      	add	r7, sp, #16
 800e56e:	60ba      	str	r2, [r7, #8]
 800e570:	461a      	mov	r2, r3
 800e572:	4603      	mov	r3, r0
 800e574:	81fb      	strh	r3, [r7, #14]
 800e576:	460b      	mov	r3, r1
 800e578:	81bb      	strh	r3, [r7, #12]
 800e57a:	4613      	mov	r3, r2
 800e57c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800e57e:	2300      	movs	r3, #0
 800e580:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800e582:	89ba      	ldrh	r2, [r7, #12]
 800e584:	89f9      	ldrh	r1, [r7, #14]
 800e586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e58a:	9302      	str	r3, [sp, #8]
 800e58c:	88fb      	ldrh	r3, [r7, #6]
 800e58e:	9301      	str	r3, [sp, #4]
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	9300      	str	r3, [sp, #0]
 800e594:	2301      	movs	r3, #1
 800e596:	480c      	ldr	r0, [pc, #48]	; (800e5c8 <BSP_I2C1_WriteReg+0x60>)
 800e598:	f7fb f9ae 	bl	80098f8 <HAL_I2C_Mem_Write>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00c      	beq.n	800e5bc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800e5a2:	4809      	ldr	r0, [pc, #36]	; (800e5c8 <BSP_I2C1_WriteReg+0x60>)
 800e5a4:	f7fb fbe4 	bl	8009d70 <HAL_I2C_GetError>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b04      	cmp	r3, #4
 800e5ac:	d103      	bne.n	800e5b6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800e5ae:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800e5b2:	617b      	str	r3, [r7, #20]
 800e5b4:	e002      	b.n	800e5bc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800e5b6:	f06f 0303 	mvn.w	r3, #3
 800e5ba:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800e5bc:	697b      	ldr	r3, [r7, #20]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3718      	adds	r7, #24
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	20002054 	.word	0x20002054

0800e5cc <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b08a      	sub	sp, #40	; 0x28
 800e5d0:	af04      	add	r7, sp, #16
 800e5d2:	60ba      	str	r2, [r7, #8]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	81fb      	strh	r3, [r7, #14]
 800e5da:	460b      	mov	r3, r1
 800e5dc:	81bb      	strh	r3, [r7, #12]
 800e5de:	4613      	mov	r3, r2
 800e5e0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800e5e6:	89ba      	ldrh	r2, [r7, #12]
 800e5e8:	89f9      	ldrh	r1, [r7, #14]
 800e5ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5ee:	9302      	str	r3, [sp, #8]
 800e5f0:	88fb      	ldrh	r3, [r7, #6]
 800e5f2:	9301      	str	r3, [sp, #4]
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	480c      	ldr	r0, [pc, #48]	; (800e62c <BSP_I2C1_ReadReg+0x60>)
 800e5fc:	f7fb fa90 	bl	8009b20 <HAL_I2C_Mem_Read>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00c      	beq.n	800e620 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800e606:	4809      	ldr	r0, [pc, #36]	; (800e62c <BSP_I2C1_ReadReg+0x60>)
 800e608:	f7fb fbb2 	bl	8009d70 <HAL_I2C_GetError>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b04      	cmp	r3, #4
 800e610:	d103      	bne.n	800e61a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800e612:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800e616:	617b      	str	r3, [r7, #20]
 800e618:	e002      	b.n	800e620 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800e61a:	f06f 0303 	mvn.w	r3, #3
 800e61e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800e620:	697b      	ldr	r3, [r7, #20]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3718      	adds	r7, #24
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	20002054 	.word	0x20002054

0800e630 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800e630:	b580      	push	{r7, lr}
 800e632:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e634:	f7fa f990 	bl	8008958 <HAL_GetTick>
 800e638:	4603      	mov	r3, r0
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	bd80      	pop	{r7, pc}
	...

0800e640 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e648:	2300      	movs	r3, #0
 800e64a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a1c      	ldr	r2, [pc, #112]	; (800e6c0 <MX_I2C1_Init+0x80>)
 800e650:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a1b      	ldr	r2, [pc, #108]	; (800e6c4 <MX_I2C1_Init+0x84>)
 800e656:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2201      	movs	r2, #1
 800e662:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2200      	movs	r2, #0
 800e66e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2200      	movs	r2, #0
 800e680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7fb f865 	bl	8009752 <HAL_I2C_Init>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d001      	beq.n	800e692 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800e68e:	2301      	movs	r3, #1
 800e690:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800e692:	2100      	movs	r1, #0
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7fb fe1d 	bl	800a2d4 <HAL_I2CEx_ConfigAnalogFilter>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d001      	beq.n	800e6a4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7fb fe5f 	bl	800a36a <HAL_I2CEx_ConfigDigitalFilter>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3710      	adds	r7, #16
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	40005400 	.word	0x40005400
 800e6c4:	10909cec 	.word	0x10909cec

0800e6c8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b08a      	sub	sp, #40	; 0x28
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6d0:	4b1e      	ldr	r3, [pc, #120]	; (800e74c <I2C1_MspInit+0x84>)
 800e6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6d4:	4a1d      	ldr	r2, [pc, #116]	; (800e74c <I2C1_MspInit+0x84>)
 800e6d6:	f043 0302 	orr.w	r3, r3, #2
 800e6da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e6dc:	4b1b      	ldr	r3, [pc, #108]	; (800e74c <I2C1_MspInit+0x84>)
 800e6de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6e0:	f003 0302 	and.w	r3, r3, #2
 800e6e4:	613b      	str	r3, [r7, #16]
 800e6e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800e6e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e6ee:	2312      	movs	r3, #18
 800e6f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6f6:	2303      	movs	r3, #3
 800e6f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800e6fa:	2304      	movs	r3, #4
 800e6fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800e6fe:	f107 0314 	add.w	r3, r7, #20
 800e702:	4619      	mov	r1, r3
 800e704:	4812      	ldr	r0, [pc, #72]	; (800e750 <I2C1_MspInit+0x88>)
 800e706:	f7fa fd4b 	bl	80091a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800e70a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e70e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e710:	2312      	movs	r3, #18
 800e712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e714:	2300      	movs	r3, #0
 800e716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e718:	2303      	movs	r3, #3
 800e71a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800e71c:	2304      	movs	r3, #4
 800e71e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800e720:	f107 0314 	add.w	r3, r7, #20
 800e724:	4619      	mov	r1, r3
 800e726:	480a      	ldr	r0, [pc, #40]	; (800e750 <I2C1_MspInit+0x88>)
 800e728:	f7fa fd3a 	bl	80091a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e72c:	4b07      	ldr	r3, [pc, #28]	; (800e74c <I2C1_MspInit+0x84>)
 800e72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e730:	4a06      	ldr	r2, [pc, #24]	; (800e74c <I2C1_MspInit+0x84>)
 800e732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e736:	6593      	str	r3, [r2, #88]	; 0x58
 800e738:	4b04      	ldr	r3, [pc, #16]	; (800e74c <I2C1_MspInit+0x84>)
 800e73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e73c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e740:	60fb      	str	r3, [r7, #12]
 800e742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800e744:	bf00      	nop
 800e746:	3728      	adds	r7, #40	; 0x28
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	40021000 	.word	0x40021000
 800e750:	48000400 	.word	0x48000400

0800e754 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800e75c:	4b09      	ldr	r3, [pc, #36]	; (800e784 <I2C1_MspDeInit+0x30>)
 800e75e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e760:	4a08      	ldr	r2, [pc, #32]	; (800e784 <I2C1_MspDeInit+0x30>)
 800e762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e766:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800e768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e76c:	4806      	ldr	r0, [pc, #24]	; (800e788 <I2C1_MspDeInit+0x34>)
 800e76e:	f7fa fec1 	bl	80094f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800e772:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e776:	4804      	ldr	r0, [pc, #16]	; (800e788 <I2C1_MspDeInit+0x34>)
 800e778:	f7fa febc 	bl	80094f4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800e77c:	bf00      	nop
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	40021000 	.word	0x40021000
 800e788:	48000400 	.word	0x48000400

0800e78c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800e78c:	b480      	push	{r7}
 800e78e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800e790:	4b15      	ldr	r3, [pc, #84]	; (800e7e8 <SystemInit+0x5c>)
 800e792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e796:	4a14      	ldr	r2, [pc, #80]	; (800e7e8 <SystemInit+0x5c>)
 800e798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e79c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800e7a0:	4b12      	ldr	r3, [pc, #72]	; (800e7ec <SystemInit+0x60>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a11      	ldr	r2, [pc, #68]	; (800e7ec <SystemInit+0x60>)
 800e7a6:	f043 0301 	orr.w	r3, r3, #1
 800e7aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800e7ac:	4b0f      	ldr	r3, [pc, #60]	; (800e7ec <SystemInit+0x60>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800e7b2:	4b0e      	ldr	r3, [pc, #56]	; (800e7ec <SystemInit+0x60>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a0d      	ldr	r2, [pc, #52]	; (800e7ec <SystemInit+0x60>)
 800e7b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800e7bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800e7c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800e7c2:	4b0a      	ldr	r3, [pc, #40]	; (800e7ec <SystemInit+0x60>)
 800e7c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e7c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e7ca:	4b08      	ldr	r3, [pc, #32]	; (800e7ec <SystemInit+0x60>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a07      	ldr	r2, [pc, #28]	; (800e7ec <SystemInit+0x60>)
 800e7d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e7d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800e7d6:	4b05      	ldr	r3, [pc, #20]	; (800e7ec <SystemInit+0x60>)
 800e7d8:	2200      	movs	r2, #0
 800e7da:	619a      	str	r2, [r3, #24]
}
 800e7dc:	bf00      	nop
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop
 800e7e8:	e000ed00 	.word	0xe000ed00
 800e7ec:	40021000 	.word	0x40021000

0800e7f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800e7f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e828 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800e7f4:	f7ff ffca 	bl	800e78c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e7f8:	480c      	ldr	r0, [pc, #48]	; (800e82c <LoopForever+0x6>)
  ldr r1, =_edata
 800e7fa:	490d      	ldr	r1, [pc, #52]	; (800e830 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e7fc:	4a0d      	ldr	r2, [pc, #52]	; (800e834 <LoopForever+0xe>)
  movs r3, #0
 800e7fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e800:	e002      	b.n	800e808 <LoopCopyDataInit>

0800e802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e806:	3304      	adds	r3, #4

0800e808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e80a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e80c:	d3f9      	bcc.n	800e802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e80e:	4a0a      	ldr	r2, [pc, #40]	; (800e838 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e810:	4c0a      	ldr	r4, [pc, #40]	; (800e83c <LoopForever+0x16>)
  movs r3, #0
 800e812:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e814:	e001      	b.n	800e81a <LoopFillZerobss>

0800e816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e818:	3204      	adds	r2, #4

0800e81a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e81a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e81c:	d3fb      	bcc.n	800e816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e81e:	f00a fd47 	bl	80192b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e822:	f7ff f9d4 	bl	800dbce <main>

0800e826 <LoopForever>:

LoopForever:
    b LoopForever
 800e826:	e7fe      	b.n	800e826 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800e828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800e82c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e830:	200013b8 	.word	0x200013b8
  ldr r2, =_sidata
 800e834:	0801ba38 	.word	0x0801ba38
  ldr r2, =_sbss
 800e838:	200013b8 	.word	0x200013b8
  ldr r4, =_ebss
 800e83c:	20002518 	.word	0x20002518

0800e840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e840:	e7fe      	b.n	800e840 <ADC1_2_IRQHandler>
	...

0800e844 <iNemoEngine_gbias_init>:
 800e844:	b430      	push	{r4, r5}
 800e846:	4b1f      	ldr	r3, [pc, #124]	; (800e8c4 <iNemoEngine_gbias_init+0x80>)
 800e848:	4a1f      	ldr	r2, [pc, #124]	; (800e8c8 <iNemoEngine_gbias_init+0x84>)
 800e84a:	4920      	ldr	r1, [pc, #128]	; (800e8cc <iNemoEngine_gbias_init+0x88>)
 800e84c:	4d20      	ldr	r5, [pc, #128]	; (800e8d0 <iNemoEngine_gbias_init+0x8c>)
 800e84e:	4c21      	ldr	r4, [pc, #132]	; (800e8d4 <iNemoEngine_gbias_init+0x90>)
 800e850:	601a      	str	r2, [r3, #0]
 800e852:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e856:	2200      	movs	r2, #0
 800e858:	6059      	str	r1, [r3, #4]
 800e85a:	481f      	ldr	r0, [pc, #124]	; (800e8d8 <iNemoEngine_gbias_init+0x94>)
 800e85c:	609d      	str	r5, [r3, #8]
 800e85e:	2100      	movs	r1, #0
 800e860:	60dc      	str	r4, [r3, #12]
 800e862:	ed83 0a04 	vstr	s0, [r3, #16]
 800e866:	6158      	str	r0, [r3, #20]
 800e868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e86c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800e870:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800e874:	655a      	str	r2, [r3, #84]	; 0x54
 800e876:	661a      	str	r2, [r3, #96]	; 0x60
 800e878:	659a      	str	r2, [r3, #88]	; 0x58
 800e87a:	665a      	str	r2, [r3, #100]	; 0x64
 800e87c:	65da      	str	r2, [r3, #92]	; 0x5c
 800e87e:	669a      	str	r2, [r3, #104]	; 0x68
 800e880:	671a      	str	r2, [r3, #112]	; 0x70
 800e882:	67da      	str	r2, [r3, #124]	; 0x7c
 800e884:	675a      	str	r2, [r3, #116]	; 0x74
 800e886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800e88a:	679a      	str	r2, [r3, #120]	; 0x78
 800e88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800e890:	61da      	str	r2, [r3, #28]
 800e892:	629a      	str	r2, [r3, #40]	; 0x28
 800e894:	621a      	str	r2, [r3, #32]
 800e896:	62da      	str	r2, [r3, #44]	; 0x2c
 800e898:	625a      	str	r2, [r3, #36]	; 0x24
 800e89a:	631a      	str	r2, [r3, #48]	; 0x30
 800e89c:	f8a3 1088 	strh.w	r1, [r3, #136]	; 0x88
 800e8a0:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 800e8a4:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
 800e8a8:	8319      	strh	r1, [r3, #24]
 800e8aa:	8699      	strh	r1, [r3, #52]	; 0x34
 800e8ac:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
 800e8b0:	bc30      	pop	{r4, r5}
 800e8b2:	639a      	str	r2, [r3, #56]	; 0x38
 800e8b4:	645a      	str	r2, [r3, #68]	; 0x44
 800e8b6:	63da      	str	r2, [r3, #60]	; 0x3c
 800e8b8:	649a      	str	r2, [r3, #72]	; 0x48
 800e8ba:	641a      	str	r2, [r3, #64]	; 0x40
 800e8bc:	64da      	str	r2, [r3, #76]	; 0x4c
 800e8be:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 800e8c2:	4770      	bx	lr
 800e8c4:	200013d8 	.word	0x200013d8
 800e8c8:	3ab20043 	.word	0x3ab20043
 800e8cc:	3e8a3d71 	.word	0x3e8a3d71
 800e8d0:	3ea8f5c3 	.word	0x3ea8f5c3
 800e8d4:	3d09c927 	.word	0x3d09c927
 800e8d8:	41700000 	.word	0x41700000

0800e8dc <rotVect>:
 800e8dc:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800e8e0:	ed92 5a01 	vldr	s10, [r2, #4]
 800e8e4:	edd2 5a00 	vldr	s11, [r2]
 800e8e8:	ed92 6a02 	vldr	s12, [r2, #8]
 800e8ec:	ee07 3a90 	vmov	s15, r3
 800e8f0:	f991 3000 	ldrsb.w	r3, [r1]
 800e8f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8f8:	ee06 3a90 	vmov	s13, r3
 800e8fc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e900:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800e904:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e908:	ee07 3a10 	vmov	s14, r3
 800e90c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e910:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e914:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e918:	edc0 7a00 	vstr	s15, [r0]
 800e91c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800e920:	ed92 5a01 	vldr	s10, [r2, #4]
 800e924:	edd2 5a00 	vldr	s11, [r2]
 800e928:	ed92 6a02 	vldr	s12, [r2, #8]
 800e92c:	ee07 3a90 	vmov	s15, r3
 800e930:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800e934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e938:	ee06 3a90 	vmov	s13, r3
 800e93c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e940:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800e944:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e948:	ee07 3a10 	vmov	s14, r3
 800e94c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e950:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e954:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e958:	edc0 7a01 	vstr	s15, [r0, #4]
 800e95c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800e960:	ed92 5a01 	vldr	s10, [r2, #4]
 800e964:	edd2 5a00 	vldr	s11, [r2]
 800e968:	ed92 6a02 	vldr	s12, [r2, #8]
 800e96c:	ee07 3a90 	vmov	s15, r3
 800e970:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800e974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e978:	ee06 3a90 	vmov	s13, r3
 800e97c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e980:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800e984:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e988:	ee07 3a10 	vmov	s14, r3
 800e98c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800e990:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e994:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e998:	edc0 7a02 	vstr	s15, [r0, #8]
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop

0800e9a0 <m_mldivide>:
 800e9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a4:	b097      	sub	sp, #92	; 0x5c
 800e9a6:	4607      	mov	r7, r0
 800e9a8:	460d      	mov	r5, r1
 800e9aa:	4614      	mov	r4, r2
 800e9ac:	4606      	mov	r6, r0
 800e9ae:	f100 0820 	add.w	r8, r0, #32
 800e9b2:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 800e9b6:	6830      	ldr	r0, [r6, #0]
 800e9b8:	6871      	ldr	r1, [r6, #4]
 800e9ba:	68b2      	ldr	r2, [r6, #8]
 800e9bc:	68f3      	ldr	r3, [r6, #12]
 800e9be:	46f4      	mov	ip, lr
 800e9c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9c4:	3610      	adds	r6, #16
 800e9c6:	4546      	cmp	r6, r8
 800e9c8:	46e6      	mov	lr, ip
 800e9ca:	d1f4      	bne.n	800e9b6 <m_mldivide+0x16>
 800e9cc:	edd7 7a00 	vldr	s15, [r7]
 800e9d0:	ed97 7a01 	vldr	s14, [r7, #4]
 800e9d4:	6830      	ldr	r0, [r6, #0]
 800e9d6:	f8cc 0000 	str.w	r0, [ip]
 800e9da:	eef0 7ae7 	vabs.f32	s15, s15
 800e9de:	eeb0 7ac7 	vabs.f32	s14, s14
 800e9e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ea:	f140 8170 	bpl.w	800ecce <m_mldivide+0x32e>
 800e9ee:	2206      	movs	r2, #6
 800e9f0:	f04f 0804 	mov.w	r8, #4
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	9203      	str	r2, [sp, #12]
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	eef0 7a47 	vmov.f32	s15, s14
 800e9fe:	4646      	mov	r6, r8
 800ea00:	4618      	mov	r0, r3
 800ea02:	f04f 0e07 	mov.w	lr, #7
 800ea06:	f04f 0903 	mov.w	r9, #3
 800ea0a:	9201      	str	r2, [sp, #4]
 800ea0c:	ed97 7a02 	vldr	s14, [r7, #8]
 800ea10:	eeb0 7ac7 	vabs.f32	s14, s14
 800ea14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1c:	f340 8150 	ble.w	800ecc0 <m_mldivide+0x320>
 800ea20:	2307      	movs	r3, #7
 800ea22:	f04f 0e08 	mov.w	lr, #8
 800ea26:	f04f 0904 	mov.w	r9, #4
 800ea2a:	9303      	str	r3, [sp, #12]
 800ea2c:	2202      	movs	r2, #2
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ea34:	4676      	mov	r6, lr
 800ea36:	4648      	mov	r0, r9
 800ea38:	f04f 0b06 	mov.w	fp, #6
 800ea3c:	f04f 0c03 	mov.w	ip, #3
 800ea40:	f04f 0805 	mov.w	r8, #5
 800ea44:	2301      	movs	r3, #1
 800ea46:	4438      	add	r0, r7
 800ea48:	4437      	add	r7, r6
 800ea4a:	edd0 6a00 	vldr	s13, [r0]
 800ea4e:	ed97 7a00 	vldr	s14, [r7]
 800ea52:	9902      	ldr	r1, [sp, #8]
 800ea54:	9f03      	ldr	r7, [sp, #12]
 800ea56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea5a:	aa16      	add	r2, sp, #88	; 0x58
 800ea5c:	eb02 0a81 	add.w	sl, r2, r1, lsl #2
 800ea60:	eb02 0088 	add.w	r0, r2, r8, lsl #2
 800ea64:	eb02 0689 	add.w	r6, r2, r9, lsl #2
 800ea68:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800ea6c:	920a      	str	r2, [sp, #40]	; 0x28
 800ea6e:	aa16      	add	r2, sp, #88	; 0x58
 800ea70:	eb02 088c 	add.w	r8, r2, ip, lsl #2
 800ea74:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800ea78:	eb02 0c8e 	add.w	ip, r2, lr, lsl #2
 800ea7c:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800ea80:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea82:	aa16      	add	r2, sp, #88	; 0x58
 800ea84:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ea88:	ed42 7a09 	vstr	s15, [r2, #-36]	; 0xffffffdc
 800ea8c:	9208      	str	r2, [sp, #32]
 800ea8e:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
 800ea92:	9a01      	ldr	r2, [sp, #4]
 800ea94:	ed1a 7a09 	vldr	s14, [sl, #-36]	; 0xffffffdc
 800ea98:	eb0e 0e87 	add.w	lr, lr, r7, lsl #2
 800ea9c:	af16      	add	r7, sp, #88	; 0x58
 800ea9e:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 800eaa2:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 800eaa6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eaaa:	009a      	lsls	r2, r3, #2
 800eaac:	9205      	str	r2, [sp, #20]
 800eaae:	af16      	add	r7, sp, #88	; 0x58
 800eab0:	9a02      	ldr	r2, [sp, #8]
 800eab2:	eb07 078b 	add.w	r7, r7, fp, lsl #2
 800eab6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800eaba:	f8cd b010 	str.w	fp, [sp, #16]
 800eabe:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800eac2:	9a01      	ldr	r2, [sp, #4]
 800eac4:	0092      	lsls	r2, r2, #2
 800eac6:	9209      	str	r2, [sp, #36]	; 0x24
 800eac8:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800eacc:	9206      	str	r2, [sp, #24]
 800eace:	9a03      	ldr	r2, [sp, #12]
 800ead0:	ed4a 6a09 	vstr	s13, [sl, #-36]	; 0xffffffdc
 800ead4:	0092      	lsls	r2, r2, #2
 800ead6:	9207      	str	r2, [sp, #28]
 800ead8:	9a08      	ldr	r2, [sp, #32]
 800eada:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800eade:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 800eae2:	ed56 7a09 	vldr	s15, [r6, #-36]	; 0xffffffdc
 800eae6:	eee6 7a47 	vfms.f32	s15, s12, s14
 800eaea:	ed46 7a09 	vstr	s15, [r6, #-36]	; 0xffffffdc
 800eaee:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800eaf2:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 800eaf6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800eafa:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 800eafe:	ed5c 5a09 	vldr	s11, [ip, #-36]	; 0xffffffdc
 800eb02:	ed1e 7a09 	vldr	s14, [lr, #-36]	; 0xffffffdc
 800eb06:	eea6 7a65 	vfms.f32	s14, s12, s11
 800eb0a:	eef0 7ae7 	vabs.f32	s15, s15
 800eb0e:	ed0e 7a09 	vstr	s14, [lr, #-36]	; 0xffffffdc
 800eb12:	ed1c 6a09 	vldr	s12, [ip, #-36]	; 0xffffffdc
 800eb16:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 800eb1a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800eb1e:	ed07 7a09 	vstr	s14, [r7, #-36]	; 0xffffffdc
 800eb22:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800eb26:	eeb0 7ac7 	vabs.f32	s14, s14
 800eb2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb32:	dd0e      	ble.n	800eb52 <m_mldivide+0x1b2>
 800eb34:	9a03      	ldr	r2, [sp, #12]
 800eb36:	9106      	str	r1, [sp, #24]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	9b02      	ldr	r3, [sp, #8]
 800eb3c:	9904      	ldr	r1, [sp, #16]
 800eb3e:	9107      	str	r1, [sp, #28]
 800eb40:	0092      	lsls	r2, r2, #2
 800eb42:	9204      	str	r2, [sp, #16]
 800eb44:	009a      	lsls	r2, r3, #2
 800eb46:	9002      	str	r0, [sp, #8]
 800eb48:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800eb4c:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 800eb50:	9205      	str	r2, [sp, #20]
 800eb52:	460a      	mov	r2, r1
 800eb54:	a916      	add	r1, sp, #88	; 0x58
 800eb56:	440a      	add	r2, r1
 800eb58:	4616      	mov	r6, r2
 800eb5a:	9a06      	ldr	r2, [sp, #24]
 800eb5c:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800eb60:	440a      	add	r2, r1
 800eb62:	ed52 7a09 	vldr	s15, [r2, #-36]	; 0xffffffdc
 800eb66:	eec7 2a27 	vdiv.f32	s5, s14, s15
 800eb6a:	4694      	mov	ip, r2
 800eb6c:	9a07      	ldr	r2, [sp, #28]
 800eb6e:	440a      	add	r2, r1
 800eb70:	4617      	mov	r7, r2
 800eb72:	9a04      	ldr	r2, [sp, #16]
 800eb74:	440a      	add	r2, r1
 800eb76:	4610      	mov	r0, r2
 800eb78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb7a:	a916      	add	r1, sp, #88	; 0x58
 800eb7c:	eb05 0a02 	add.w	sl, r5, r2
 800eb80:	eb01 0e02 	add.w	lr, r1, r2
 800eb84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb86:	ed46 2a09 	vstr	s5, [r6, #-36]	; 0xffffffdc
 800eb8a:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 800eb8e:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 800eb92:	edda 6a00 	vldr	s13, [sl]
 800eb96:	440a      	add	r2, r1
 800eb98:	4691      	mov	r9, r2
 800eb9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb9c:	edc4 6a00 	vstr	s13, [r4]
 800eba0:	eee2 7ac7 	vfms.f32	s15, s5, s14
 800eba4:	440a      	add	r2, r1
 800eba6:	4690      	mov	r8, r2
 800eba8:	9a05      	ldr	r2, [sp, #20]
 800ebaa:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 800ebae:	188e      	adds	r6, r1, r2
 800ebb0:	eb05 0a02 	add.w	sl, r5, r2
 800ebb4:	ed9a 6a00 	vldr	s12, [sl]
 800ebb8:	ed16 1a09 	vldr	s2, [r6, #-36]	; 0xffffffdc
 800ebbc:	ed1c 5a09 	vldr	s10, [ip, #-36]	; 0xffffffdc
 800ebc0:	ed5e 5a09 	vldr	s11, [lr, #-36]	; 0xffffffdc
 800ebc4:	ed17 3a09 	vldr	s6, [r7, #-36]	; 0xffffffdc
 800ebc8:	ed59 3a09 	vldr	s7, [r9, #-36]	; 0xffffffdc
 800ebcc:	ed58 4a09 	vldr	s9, [r8, #-36]	; 0xffffffdc
 800ebd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ebd4:	ee87 2a27 	vdiv.f32	s4, s14, s15
 800ebd8:	eb05 0c0b 	add.w	ip, r5, fp
 800ebdc:	448b      	add	fp, r1
 800ebde:	9901      	ldr	r1, [sp, #4]
 800ebe0:	eb05 0781 	add.w	r7, r5, r1, lsl #2
 800ebe4:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 800ebe8:	9902      	ldr	r1, [sp, #8]
 800ebea:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 800ebee:	eea1 6a66 	vfms.f32	s12, s2, s13
 800ebf2:	ed5b 1a09 	vldr	s3, [fp, #-36]	; 0xffffffdc
 800ebf6:	ed84 6a01 	vstr	s12, [r4, #4]
 800ebfa:	eddc 7a00 	vldr	s15, [ip]
 800ebfe:	ee87 4a05 	vdiv.f32	s8, s14, s10
 800ec02:	eee1 7ae6 	vfms.f32	s15, s3, s13
 800ec06:	ee87 5a25 	vdiv.f32	s10, s14, s11
 800ec0a:	eee2 7ac6 	vfms.f32	s15, s5, s12
 800ec0e:	ee62 7a27 	vmul.f32	s15, s4, s15
 800ec12:	eea3 6a67 	vfms.f32	s12, s6, s15
 800ec16:	eee3 6ae7 	vfms.f32	s13, s7, s15
 800ec1a:	ee24 6a06 	vmul.f32	s12, s8, s12
 800ec1e:	edc4 7a02 	vstr	s15, [r4, #8]
 800ec22:	eee4 6ac6 	vfms.f32	s13, s9, s12
 800ec26:	ed84 6a01 	vstr	s12, [r4, #4]
 800ec2a:	ee65 6a26 	vmul.f32	s13, s10, s13
 800ec2e:	edc4 6a00 	vstr	s13, [r4]
 800ec32:	edd7 6a03 	vldr	s13, [r7, #12]
 800ec36:	edc4 6a03 	vstr	s13, [r4, #12]
 800ec3a:	ed96 6a03 	vldr	s12, [r6, #12]
 800ec3e:	eea1 6a66 	vfms.f32	s12, s2, s13
 800ec42:	ed84 6a04 	vstr	s12, [r4, #16]
 800ec46:	edd0 5a03 	vldr	s11, [r0, #12]
 800ec4a:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800ec4e:	eee2 5ac6 	vfms.f32	s11, s5, s12
 800ec52:	ee62 5a25 	vmul.f32	s11, s4, s11
 800ec56:	eea3 6a65 	vfms.f32	s12, s6, s11
 800ec5a:	eee3 6ae5 	vfms.f32	s13, s7, s11
 800ec5e:	ee24 6a06 	vmul.f32	s12, s8, s12
 800ec62:	edc4 5a05 	vstr	s11, [r4, #20]
 800ec66:	eee4 6ac6 	vfms.f32	s13, s9, s12
 800ec6a:	ed84 6a04 	vstr	s12, [r4, #16]
 800ec6e:	ee65 6a26 	vmul.f32	s13, s10, s13
 800ec72:	edc4 6a03 	vstr	s13, [r4, #12]
 800ec76:	edd7 7a06 	vldr	s15, [r7, #24]
 800ec7a:	edc4 7a06 	vstr	s15, [r4, #24]
 800ec7e:	ed96 7a06 	vldr	s14, [r6, #24]
 800ec82:	eea7 7ac1 	vfms.f32	s14, s15, s2
 800ec86:	ed84 7a07 	vstr	s14, [r4, #28]
 800ec8a:	edd0 6a06 	vldr	s13, [r0, #24]
 800ec8e:	eee7 6ae1 	vfms.f32	s13, s15, s3
 800ec92:	eee2 6ac7 	vfms.f32	s13, s5, s14
 800ec96:	ee66 6a82 	vmul.f32	s13, s13, s4
 800ec9a:	eea6 7ac3 	vfms.f32	s14, s13, s6
 800ec9e:	eee6 7ae3 	vfms.f32	s15, s13, s7
 800eca2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800eca6:	edc4 6a08 	vstr	s13, [r4, #32]
 800ecaa:	eee7 7a64 	vfms.f32	s15, s14, s9
 800ecae:	ed84 7a07 	vstr	s14, [r4, #28]
 800ecb2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ecb6:	edc4 7a06 	vstr	s15, [r4, #24]
 800ecba:	b017      	add	sp, #92	; 0x5c
 800ecbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc0:	2202      	movs	r2, #2
 800ecc2:	f04f 0b08 	mov.w	fp, #8
 800ecc6:	f04f 0c05 	mov.w	ip, #5
 800ecca:	9202      	str	r2, [sp, #8]
 800eccc:	e6bb      	b.n	800ea46 <m_mldivide+0xa6>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f04f 0904 	mov.w	r9, #4
 800ecd4:	9301      	str	r3, [sp, #4]
 800ecd6:	461e      	mov	r6, r3
 800ecd8:	2307      	movs	r3, #7
 800ecda:	9303      	str	r3, [sp, #12]
 800ecdc:	4648      	mov	r0, r9
 800ecde:	f04f 0e06 	mov.w	lr, #6
 800ece2:	f04f 0803 	mov.w	r8, #3
 800ece6:	2301      	movs	r3, #1
 800ece8:	e690      	b.n	800ea0c <m_mldivide+0x6c>
 800ecea:	bf00      	nop

0800ecec <m_qmult_eml>:
 800ecec:	ed90 2a01 	vldr	s4, [r0, #4]
 800ecf0:	edd1 4a02 	vldr	s9, [r1, #8]
 800ecf4:	edd1 5a03 	vldr	s11, [r1, #12]
 800ecf8:	edd0 2a02 	vldr	s5, [r0, #8]
 800ecfc:	edd1 3a00 	vldr	s7, [r1]
 800ed00:	ed90 3a00 	vldr	s6, [r0]
 800ed04:	ed91 4a01 	vldr	s8, [r1, #4]
 800ed08:	ed90 5a03 	vldr	s10, [r0, #12]
 800ed0c:	ee22 6a24 	vmul.f32	s12, s4, s9
 800ed10:	ee62 6aa3 	vmul.f32	s13, s5, s7
 800ed14:	ee22 7aa5 	vmul.f32	s14, s5, s11
 800ed18:	ee64 7ae2 	vnmul.f32	s15, s9, s5
 800ed1c:	eea3 6a25 	vfma.f32	s12, s6, s11
 800ed20:	eee2 6a25 	vfma.f32	s13, s4, s11
 800ed24:	eea3 7ac2 	vfms.f32	s14, s7, s4
 800ed28:	eee4 7a42 	vfms.f32	s15, s8, s4
 800ed2c:	eea4 6a62 	vfms.f32	s12, s8, s5
 800ed30:	eee4 6ac3 	vfms.f32	s13, s9, s6
 800ed34:	eea3 7a04 	vfma.f32	s14, s6, s8
 800ed38:	eee3 7ac3 	vfms.f32	s15, s7, s6
 800ed3c:	eea5 6a23 	vfma.f32	s12, s10, s7
 800ed40:	eee5 6a04 	vfma.f32	s13, s10, s8
 800ed44:	eea5 7a24 	vfma.f32	s14, s10, s9
 800ed48:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ed4c:	ed82 6a00 	vstr	s12, [r2]
 800ed50:	edc2 6a01 	vstr	s13, [r2, #4]
 800ed54:	ed82 7a02 	vstr	s14, [r2, #8]
 800ed58:	edc2 7a03 	vstr	s15, [r2, #12]
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop

0800ed60 <m_q2dcm_eml>:
 800ed60:	b510      	push	{r4, lr}
 800ed62:	ed2d 8b06 	vpush	{d8-d10}
 800ed66:	ed90 aa03 	vldr	s20, [r0, #12]
 800ed6a:	ed90 9a02 	vldr	s18, [r0, #8]
 800ed6e:	ed90 8a00 	vldr	s16, [r0]
 800ed72:	edd0 8a01 	vldr	s17, [r0, #4]
 800ed76:	ee6a 9a0a 	vmul.f32	s19, s20, s20
 800ed7a:	460c      	mov	r4, r1
 800ed7c:	1d08      	adds	r0, r1, #4
 800ed7e:	2220      	movs	r2, #32
 800ed80:	2100      	movs	r1, #0
 800ed82:	f00a fac7 	bl	8019314 <memset>
 800ed86:	eef0 5a69 	vmov.f32	s11, s19
 800ed8a:	eeb0 6a69 	vmov.f32	s12, s19
 800ed8e:	eee9 9a09 	vfma.f32	s19, s18, s18
 800ed92:	eee8 5a08 	vfma.f32	s11, s16, s16
 800ed96:	eea8 6aa8 	vfma.f32	s12, s17, s17
 800ed9a:	eee8 9a48 	vfms.f32	s19, s16, s16
 800ed9e:	ee69 6a0a 	vmul.f32	s13, s18, s20
 800eda2:	ee28 7a8a 	vmul.f32	s14, s17, s20
 800eda6:	ee68 7a89 	vmul.f32	s15, s17, s18
 800edaa:	eee8 5ae8 	vfms.f32	s11, s17, s17
 800edae:	eea8 6a48 	vfms.f32	s12, s16, s16
 800edb2:	eee8 9ae8 	vfms.f32	s19, s17, s17
 800edb6:	eeb0 4a66 	vmov.f32	s8, s13
 800edba:	eef0 4a47 	vmov.f32	s9, s14
 800edbe:	eeb0 5a67 	vmov.f32	s10, s15
 800edc2:	eea8 4a28 	vfma.f32	s8, s16, s17
 800edc6:	eed8 6a28 	vfnms.f32	s13, s16, s17
 800edca:	eed8 4a09 	vfnms.f32	s9, s16, s18
 800edce:	eea8 7a09 	vfma.f32	s14, s16, s18
 800edd2:	eea8 5a0a 	vfma.f32	s10, s16, s20
 800edd6:	eee8 7a4a 	vfms.f32	s15, s16, s20
 800edda:	eee9 5a49 	vfms.f32	s11, s18, s18
 800edde:	eea9 6a49 	vfms.f32	s12, s18, s18
 800ede2:	edc4 9a08 	vstr	s19, [r4, #32]
 800ede6:	ecbd 8b06 	vpop	{d8-d10}
 800edea:	ee34 4a04 	vadd.f32	s8, s8, s8
 800edee:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800edf2:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800edf6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800edfa:	ee35 5a05 	vadd.f32	s10, s10, s10
 800edfe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ee02:	edc4 5a00 	vstr	s11, [r4]
 800ee06:	ed84 4a03 	vstr	s8, [r4, #12]
 800ee0a:	edc4 6a01 	vstr	s13, [r4, #4]
 800ee0e:	edc4 4a06 	vstr	s9, [r4, #24]
 800ee12:	ed84 7a02 	vstr	s14, [r4, #8]
 800ee16:	ed84 6a04 	vstr	s12, [r4, #16]
 800ee1a:	ed84 5a07 	vstr	s10, [r4, #28]
 800ee1e:	edc4 7a05 	vstr	s15, [r4, #20]
 800ee22:	bd10      	pop	{r4, pc}

0800ee24 <st_accCal_MEMS_EIG3>:
 800ee24:	ed90 5a02 	vldr	s10, [r0, #8]
 800ee28:	edd0 4a01 	vldr	s9, [r0, #4]
 800ee2c:	ed90 7a05 	vldr	s14, [r0, #20]
 800ee30:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800eff0 <st_accCal_MEMS_EIG3+0x1cc>
 800ee34:	ee65 7a05 	vmul.f32	s15, s10, s10
 800ee38:	b510      	push	{r4, lr}
 800ee3a:	eee4 7aa4 	vfma.f32	s15, s9, s9
 800ee3e:	460c      	mov	r4, r1
 800ee40:	ed2d 8b04 	vpush	{d8-d9}
 800ee44:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ee48:	b08a      	sub	sp, #40	; 0x28
 800ee4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ee4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee52:	d509      	bpl.n	800ee68 <st_accCal_MEMS_EIG3+0x44>
 800ee54:	6803      	ldr	r3, [r0, #0]
 800ee56:	600b      	str	r3, [r1, #0]
 800ee58:	6903      	ldr	r3, [r0, #16]
 800ee5a:	604b      	str	r3, [r1, #4]
 800ee5c:	6a03      	ldr	r3, [r0, #32]
 800ee5e:	608b      	str	r3, [r1, #8]
 800ee60:	b00a      	add	sp, #40	; 0x28
 800ee62:	ecbd 8b04 	vpop	{d8-d9}
 800ee66:	bd10      	pop	{r4, pc}
 800ee68:	edd0 3a00 	vldr	s7, [r0]
 800ee6c:	edd0 5a04 	vldr	s11, [r0, #16]
 800ee70:	ed90 3a08 	vldr	s6, [r0, #32]
 800ee74:	edd0 1a06 	vldr	s3, [r0, #24]
 800ee78:	eddf 9a5e 	vldr	s19, [pc, #376]	; 800eff4 <st_accCal_MEMS_EIG3+0x1d0>
 800ee7c:	ed90 1a03 	vldr	s2, [r0, #12]
 800ee80:	ed90 6a07 	vldr	s12, [r0, #28]
 800ee84:	ed9f 4a5c 	vldr	s8, [pc, #368]	; 800eff8 <st_accCal_MEMS_EIG3+0x1d4>
 800ee88:	ee33 8aa5 	vadd.f32	s16, s7, s11
 800ee8c:	ee65 6a21 	vmul.f32	s13, s10, s3
 800ee90:	ee38 8a03 	vadd.f32	s16, s16, s6
 800ee94:	eee4 6a81 	vfma.f32	s13, s9, s2
 800ee98:	ee28 8a29 	vmul.f32	s16, s16, s19
 800ee9c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800eea0:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800eea4:	ee73 3ac8 	vsub.f32	s7, s7, s16
 800eea8:	ee65 7aa5 	vmul.f32	s15, s11, s11
 800eeac:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 800eeb0:	eee3 7aa3 	vfma.f32	s15, s7, s7
 800eeb4:	ee33 3a48 	vsub.f32	s6, s6, s16
 800eeb8:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800eebc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eec0:	eee3 7a03 	vfma.f32	s15, s6, s6
 800eec4:	eeb8 2a00 	vmov.f32	s4, #128	; 0xc0000000 -2.0
 800eec8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800eecc:	eef1 8ae7 	vsqrt.f32	s17, s15
 800eed0:	eec0 6a28 	vdiv.f32	s13, s0, s17
 800eed4:	ee83 4a28 	vdiv.f32	s8, s6, s17
 800eed8:	eec3 0aa8 	vdiv.f32	s1, s7, s17
 800eedc:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800eee0:	ee61 3aa6 	vmul.f32	s7, s3, s13
 800eee4:	ee21 3a26 	vmul.f32	s6, s2, s13
 800eee8:	ee26 6a26 	vmul.f32	s12, s12, s13
 800eeec:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eef0:	ee63 7ae5 	vnmul.f32	s15, s7, s11
 800eef4:	ee26 5a85 	vmul.f32	s10, s13, s10
 800eef8:	eee6 7a03 	vfma.f32	s15, s12, s6
 800eefc:	ee26 6a47 	vnmul.f32	s12, s12, s14
 800ef00:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ef04:	eea5 6a84 	vfma.f32	s12, s11, s8
 800ef08:	ee24 4a43 	vnmul.f32	s8, s8, s6
 800ef0c:	eee6 7a20 	vfma.f32	s15, s12, s1
 800ef10:	eea7 4a23 	vfma.f32	s8, s14, s7
 800ef14:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800ef18:	eee4 7a26 	vfma.f32	s15, s8, s13
 800ef1c:	eef4 7ac2 	vcmpe.f32	s15, s4
 800ef20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef24:	d909      	bls.n	800ef3a <st_accCal_MEMS_EIG3+0x116>
 800ef26:	eef4 7ae2 	vcmpe.f32	s15, s5
 800ef2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef2e:	db49      	blt.n	800efc4 <st_accCal_MEMS_EIG3+0x1a0>
 800ef30:	eeb0 9a40 	vmov.f32	s18, s0
 800ef34:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800effc <st_accCal_MEMS_EIG3+0x1d8>
 800ef38:	e003      	b.n	800ef42 <st_accCal_MEMS_EIG3+0x11e>
 800ef3a:	ed9f 9a31 	vldr	s18, [pc, #196]	; 800f000 <st_accCal_MEMS_EIG3+0x1dc>
 800ef3e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ef42:	ee78 8aa8 	vadd.f32	s17, s17, s17
 800ef46:	eeb0 7a48 	vmov.f32	s14, s16
 800ef4a:	eef0 6a48 	vmov.f32	s13, s16
 800ef4e:	eea8 7a89 	vfma.f32	s14, s17, s18
 800ef52:	eee8 6a80 	vfma.f32	s13, s17, s0
 800ef56:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800ef5a:	ee77 7a26 	vadd.f32	s15, s14, s13
 800ef5e:	ed84 7a00 	vstr	s14, [r4]
 800ef62:	eed8 7a06 	vfnms.f32	s15, s16, s12
 800ef66:	edc4 6a02 	vstr	s13, [r4, #8]
 800ef6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef72:	edc4 7a01 	vstr	s15, [r4, #4]
 800ef76:	dd09      	ble.n	800ef8c <st_accCal_MEMS_EIG3+0x168>
 800ef78:	eeb0 6a47 	vmov.f32	s12, s14
 800ef7c:	ed84 7a01 	vstr	s14, [r4, #4]
 800ef80:	edc4 7a00 	vstr	s15, [r4]
 800ef84:	eeb0 7a67 	vmov.f32	s14, s15
 800ef88:	eef0 7a46 	vmov.f32	s15, s12
 800ef8c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ef90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef94:	d509      	bpl.n	800efaa <st_accCal_MEMS_EIG3+0x186>
 800ef96:	edc4 7a02 	vstr	s15, [r4, #8]
 800ef9a:	ed84 7a01 	vstr	s14, [r4, #4]
 800ef9e:	edc4 6a00 	vstr	s13, [r4]
 800efa2:	b00a      	add	sp, #40	; 0x28
 800efa4:	ecbd 8b04 	vpop	{d8-d9}
 800efa8:	bd10      	pop	{r4, pc}
 800efaa:	eef4 6ae7 	vcmpe.f32	s13, s15
 800efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb2:	bf44      	itt	mi
 800efb4:	edc4 7a02 	vstrmi	s15, [r4, #8]
 800efb8:	edc4 6a01 	vstrmi	s13, [r4, #4]
 800efbc:	b00a      	add	sp, #40	; 0x28
 800efbe:	ecbd 8b04 	vpop	{d8-d9}
 800efc2:	bd10      	pop	{r4, pc}
 800efc4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800efc8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800efcc:	f00a fbb0 	bl	8019730 <acosf>
 800efd0:	ee60 9a29 	vmul.f32	s19, s0, s19
 800efd4:	eeb0 0a69 	vmov.f32	s0, s19
 800efd8:	f00a fa26 	bl	8019428 <cosf>
 800efdc:	eeb0 9a40 	vmov.f32	s18, s0
 800efe0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800f004 <st_accCal_MEMS_EIG3+0x1e0>
 800efe4:	ee39 0a80 	vadd.f32	s0, s19, s0
 800efe8:	f00a fa1e 	bl	8019428 <cosf>
 800efec:	e7a9      	b.n	800ef42 <st_accCal_MEMS_EIG3+0x11e>
 800efee:	bf00      	nop
 800eff0:	358637bd 	.word	0x358637bd
 800eff4:	3eaaaaab 	.word	0x3eaaaaab
 800eff8:	3e2aaaab 	.word	0x3e2aaaab
 800effc:	bf000001 	.word	0xbf000001
 800f000:	3effffff 	.word	0x3effffff
 800f004:	40060a92 	.word	0x40060a92

0800f008 <st_accCal_MEMS_ellipsoidFit7>:
 800f008:	b570      	push	{r4, r5, r6, lr}
 800f00a:	ed2d 8b10 	vpush	{d8-d15}
 800f00e:	4604      	mov	r4, r0
 800f010:	b0c6      	sub	sp, #280	; 0x118
 800f012:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 800f016:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800f018:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f01a:	9011      	str	r0, [sp, #68]	; 0x44
 800f01c:	2600      	movs	r6, #0
 800f01e:	eeb0 8a67 	vmov.f32	s16, s15
 800f022:	223c      	movs	r2, #60	; 0x3c
 800f024:	9015      	str	r0, [sp, #84]	; 0x54
 800f026:	460d      	mov	r5, r1
 800f028:	a837      	add	r0, sp, #220	; 0xdc
 800f02a:	4631      	mov	r1, r6
 800f02c:	9314      	str	r3, [sp, #80]	; 0x50
 800f02e:	9316      	str	r3, [sp, #88]	; 0x58
 800f030:	edd4 9a12 	vldr	s19, [r4, #72]	; 0x48
 800f034:	edd4 8a16 	vldr	s17, [r4, #88]	; 0x58
 800f038:	ed94 9a19 	vldr	s18, [r4, #100]	; 0x64
 800f03c:	960c      	str	r6, [sp, #48]	; 0x30
 800f03e:	960e      	str	r6, [sp, #56]	; 0x38
 800f040:	f00a f968 	bl	8019314 <memset>
 800f044:	ee38 7a48 	vsub.f32	s14, s16, s16
 800f048:	eddf 6a41 	vldr	s13, [pc, #260]	; 800f150 <st_accCal_MEMS_ellipsoidFit7+0x148>
 800f04c:	eddd 1a11 	vldr	s3, [sp, #68]	; 0x44
 800f050:	ed9d 4a15 	vldr	s8, [sp, #84]	; 0x54
 800f054:	eeb0 7ac7 	vabs.f32	s14, s14
 800f058:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f05c:	a936      	add	r1, sp, #216	; 0xd8
 800f05e:	aa3a      	add	r2, sp, #232	; 0xe8
 800f060:	ab3e      	add	r3, sp, #248	; 0xf8
 800f062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f066:	e9cd 1203 	strd	r1, r2, [sp, #12]
 800f06a:	eef0 7a48 	vmov.f32	s15, s16
 800f06e:	eef0 5a48 	vmov.f32	s11, s16
 800f072:	9305      	str	r3, [sp, #20]
 800f074:	f100 825b 	bmi.w	800f52e <st_accCal_MEMS_ellipsoidFit7+0x526>
 800f078:	ed9d 2a14 	vldr	s4, [sp, #80]	; 0x50
 800f07c:	eddd 2a16 	vldr	s5, [sp, #88]	; 0x58
 800f080:	ee29 5a65 	vnmul.f32	s10, s18, s11
 800f084:	ee62 6ac2 	vnmul.f32	s13, s5, s4
 800f088:	eea4 5a02 	vfma.f32	s10, s8, s4
 800f08c:	eee9 6a28 	vfma.f32	s13, s18, s17
 800f090:	ee27 6a85 	vmul.f32	s12, s15, s10
 800f094:	ee28 7ac4 	vnmul.f32	s14, s17, s8
 800f098:	eea6 6aa9 	vfma.f32	s12, s13, s19
 800f09c:	eea5 7aa2 	vfma.f32	s14, s11, s5
 800f0a0:	eeb0 3a45 	vmov.f32	s6, s10
 800f0a4:	eea7 6a21 	vfma.f32	s12, s14, s3
 800f0a8:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 800f0ac:	ed9f 5a28 	vldr	s10, [pc, #160]	; 800f150 <st_accCal_MEMS_ellipsoidFit7+0x148>
 800f0b0:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 800f0b4:	eef0 4ac6 	vabs.f32	s9, s12
 800f0b8:	eef4 4ac5 	vcmpe.f32	s9, s10
 800f0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c0:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 800f0c4:	dd46      	ble.n	800f154 <st_accCal_MEMS_ellipsoidFit7+0x14c>
 800f0c6:	ee69 3ae2 	vnmul.f32	s7, s19, s5
 800f0ca:	ee65 4ae7 	vnmul.f32	s9, s11, s15
 800f0ce:	eee7 3a84 	vfma.f32	s7, s15, s8
 800f0d2:	eee9 4aa8 	vfma.f32	s9, s19, s17
 800f0d6:	ee24 1a61 	vnmul.f32	s2, s8, s3
 800f0da:	eeb0 4a63 	vmov.f32	s8, s7
 800f0de:	eea9 1a29 	vfma.f32	s2, s18, s19
 800f0e2:	eef0 3a64 	vmov.f32	s7, s9
 800f0e6:	2e00      	cmp	r6, #0
 800f0e8:	f000 823b 	beq.w	800f562 <st_accCal_MEMS_ellipsoidFit7+0x55a>
 800f0ec:	eef0 7a47 	vmov.f32	s15, s14
 800f0f0:	eeb0 5a43 	vmov.f32	s10, s6
 800f0f4:	ed8d 4a3c 	vstr	s8, [sp, #240]	; 0xf0
 800f0f8:	eef0 2a44 	vmov.f32	s5, s8
 800f0fc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f100:	eec4 5a86 	vdiv.f32	s11, s9, s12
 800f104:	ee25 6a85 	vmul.f32	s12, s11, s10
 800f108:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800f10c:	ee25 5a83 	vmul.f32	s10, s11, s6
 800f110:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800f114:	ee25 3a81 	vmul.f32	s6, s11, s2
 800f118:	ee25 7a87 	vmul.f32	s14, s11, s14
 800f11c:	ee25 4a84 	vmul.f32	s8, s11, s8
 800f120:	ee65 4aa3 	vmul.f32	s9, s11, s7
 800f124:	ee65 5aa2 	vmul.f32	s11, s11, s5
 800f128:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 800f12c:	ed8d 6a37 	vstr	s12, [sp, #220]	; 0xdc
 800f130:	edcd 7a38 	vstr	s15, [sp, #224]	; 0xe0
 800f134:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 800f138:	ed8d 3a3b 	vstr	s6, [sp, #236]	; 0xec
 800f13c:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 800f140:	ed8d 4a3f 	vstr	s8, [sp, #252]	; 0xfc
 800f144:	edcd 4a40 	vstr	s9, [sp, #256]	; 0x100
 800f148:	edcd 5a3c 	vstr	s11, [sp, #240]	; 0xf0
 800f14c:	e002      	b.n	800f154 <st_accCal_MEMS_ellipsoidFit7+0x14c>
 800f14e:	bf00      	nop
 800f150:	3a83126f 	.word	0x3a83126f
 800f154:	ed94 4a04 	vldr	s8, [r4, #16]
 800f158:	ed94 3a0a 	vldr	s6, [r4, #40]	; 0x28
 800f15c:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 800f160:	ed9d 8a3b 	vldr	s16, [sp, #236]	; 0xec
 800f164:	ed94 1a03 	vldr	s2, [r4, #12]
 800f168:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
 800f16c:	ed94 da0e 	vldr	s26, [r4, #56]	; 0x38
 800f170:	eddd 3a3a 	vldr	s7, [sp, #232]	; 0xe8
 800f174:	edd4 8a1b 	vldr	s17, [r4, #108]	; 0x6c
 800f178:	ed9d 9a37 	vldr	s18, [sp, #220]	; 0xdc
 800f17c:	eddd 5a3f 	vldr	s11, [sp, #252]	; 0xfc
 800f180:	edd4 1a05 	vldr	s3, [r4, #20]
 800f184:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800f188:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
 800f18c:	ed9d 5a3c 	vldr	s10, [sp, #240]	; 0xf0
 800f190:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800f194:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 800f198:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 800f19c:	ed94 2a06 	vldr	s4, [r4, #24]
 800f1a0:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
 800f1a4:	eddd 6a3d 	vldr	s13, [sp, #244]	; 0xf4
 800f1a8:	eddd 4a38 	vldr	s9, [sp, #224]	; 0xe0
 800f1ac:	eddd fa40 	vldr	s31, [sp, #256]	; 0x100
 800f1b0:	ed9d 6a39 	vldr	s12, [sp, #228]	; 0xe4
 800f1b4:	eddd ea41 	vldr	s29, [sp, #260]	; 0x104
 800f1b8:	ee68 aa04 	vmul.f32	s21, s16, s8
 800f1bc:	ee68 9a03 	vmul.f32	s19, s16, s6
 800f1c0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f1c4:	eee3 aa81 	vfma.f32	s21, s7, s2
 800f1c8:	a906      	add	r1, sp, #24
 800f1ca:	a821      	add	r0, sp, #132	; 0x84
 800f1cc:	eee3 9aab 	vfma.f32	s19, s7, s23
 800f1d0:	eea3 8a8d 	vfma.f32	s16, s7, s26
 800f1d4:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800f1d8:	eece da28 	vdiv.f32	s27, s28, s17
 800f1dc:	ee29 ba04 	vmul.f32	s22, s18, s8
 800f1e0:	ee69 8a03 	vmul.f32	s17, s18, s6
 800f1e4:	ee25 aa84 	vmul.f32	s20, s11, s8
 800f1e8:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f1ec:	eee5 aa21 	vfma.f32	s21, s10, s3
 800f1f0:	eee5 9a00 	vfma.f32	s19, s10, s0
 800f1f4:	eea5 8a2c 	vfma.f32	s16, s10, s25
 800f1f8:	eea2 ba81 	vfma.f32	s22, s5, s2
 800f1fc:	eee2 8aab 	vfma.f32	s17, s5, s23
 800f200:	eea2 9a8d 	vfma.f32	s18, s5, s26
 800f204:	eea7 aa01 	vfma.f32	s20, s14, s2
 800f208:	eee6 9aa0 	vfma.f32	s19, s13, s1
 800f20c:	eea6 8a8c 	vfma.f32	s16, s13, s24
 800f210:	eee6 aa82 	vfma.f32	s21, s13, s4
 800f214:	ee65 6aa7 	vmul.f32	s13, s11, s15
 800f218:	eea4 baa1 	vfma.f32	s22, s9, s3
 800f21c:	eee4 8a80 	vfma.f32	s17, s9, s0
 800f220:	eea4 9aac 	vfma.f32	s18, s9, s25
 800f224:	eeaf aaa1 	vfma.f32	s20, s31, s3
 800f228:	eee7 6a0d 	vfma.f32	s13, s14, s26
 800f22c:	eee6 8a20 	vfma.f32	s17, s12, s1
 800f230:	eea6 9a0c 	vfma.f32	s18, s12, s24
 800f234:	eea6 ba02 	vfma.f32	s22, s12, s4
 800f238:	eeae aa82 	vfma.f32	s20, s29, s4
 800f23c:	eeef 6aac 	vfma.f32	s13, s31, s25
 800f240:	ee65 5a83 	vmul.f32	s11, s11, s6
 800f244:	edcd 8a2b 	vstr	s17, [sp, #172]	; 0xac
 800f248:	edcd da45 	vstr	s27, [sp, #276]	; 0x114
 800f24c:	ed8d ba2a 	vstr	s22, [sp, #168]	; 0xa8
 800f250:	ed8d 9a2c 	vstr	s18, [sp, #176]	; 0xb0
 800f254:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 800f258:	edcd 9a2e 	vstr	s19, [sp, #184]	; 0xb8
 800f25c:	ed8d 8a2f 	vstr	s16, [sp, #188]	; 0xbc
 800f260:	ed8d aa30 	vstr	s20, [sp, #192]	; 0xc0
 800f264:	ed9d 6a43 	vldr	s12, [sp, #268]	; 0x10c
 800f268:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800f26c:	ed9d fa44 	vldr	s30, [sp, #272]	; 0x110
 800f270:	eeee 6a8c 	vfma.f32	s13, s29, s24
 800f274:	eee7 5a2b 	vfma.f32	s11, s14, s23
 800f278:	ee26 7a27 	vmul.f32	s14, s12, s15
 800f27c:	ee6a 3a84 	vmul.f32	s7, s21, s8
 800f280:	eea5 7a0d 	vfma.f32	s14, s10, s26
 800f284:	ee66 2a04 	vmul.f32	s5, s12, s8
 800f288:	ee26 6a03 	vmul.f32	s12, s12, s6
 800f28c:	eeef 5a80 	vfma.f32	s11, s31, s0
 800f290:	eee1 3a0b 	vfma.f32	s7, s2, s22
 800f294:	eef0 fa66 	vmov.f32	s31, s13
 800f298:	ee64 4a08 	vmul.f32	s9, s8, s16
 800f29c:	edd4 6a02 	vldr	s13, [r4, #8]
 800f2a0:	edcd fa32 	vstr	s31, [sp, #200]	; 0xc8
 800f2a4:	eee5 2a01 	vfma.f32	s5, s10, s2
 800f2a8:	eea5 6a2b 	vfma.f32	s12, s10, s23
 800f2ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f2b0:	ee28 5a03 	vmul.f32	s10, s16, s6
 800f2b4:	edcd 6a01 	vstr	s13, [sp, #4]
 800f2b8:	eee1 4a09 	vfma.f32	s9, s2, s18
 800f2bc:	edd4 6a00 	vldr	s13, [r4]
 800f2c0:	eeaf 7a2c 	vfma.f32	s14, s30, s25
 800f2c4:	eee9 7a0d 	vfma.f32	s15, s18, s26
 800f2c8:	eea9 5a2b 	vfma.f32	s10, s18, s23
 800f2cc:	ee24 4a29 	vmul.f32	s8, s8, s19
 800f2d0:	ee76 3ae3 	vsub.f32	s7, s13, s7
 800f2d4:	eddd 6a01 	vldr	s13, [sp, #4]
 800f2d8:	ed9d da0c 	vldr	s26, [sp, #48]	; 0x30
 800f2dc:	eeef 2a21 	vfma.f32	s5, s30, s3
 800f2e0:	eea1 4a28 	vfma.f32	s8, s2, s17
 800f2e4:	eeaf 6a00 	vfma.f32	s12, s30, s0
 800f2e8:	ed94 1a0d 	vldr	s2, [r4, #52]	; 0x34
 800f2ec:	ed94 fa08 	vldr	s30, [r4, #32]
 800f2f0:	ee76 4ae4 	vsub.f32	s9, s13, s9
 800f2f4:	eeee 5aa0 	vfma.f32	s11, s29, s1
 800f2f8:	eead 7a8c 	vfma.f32	s14, s27, s24
 800f2fc:	edd4 6a01 	vldr	s13, [r4, #4]
 800f300:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800f304:	ee71 7a67 	vsub.f32	s15, s2, s15
 800f308:	ee3f 5a45 	vsub.f32	s10, s30, s10
 800f30c:	ee29 3a83 	vmul.f32	s6, s19, s6
 800f310:	eee1 4aef 	vfms.f32	s9, s3, s31
 800f314:	eea8 3aab 	vfma.f32	s6, s17, s23
 800f318:	eeec 7aef 	vfms.f32	s15, s25, s31
 800f31c:	eeaf 5ac0 	vfms.f32	s10, s31, s0
 800f320:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800f324:	eead 6aa0 	vfma.f32	s12, s27, s1
 800f328:	eeb0 fa47 	vmov.f32	s30, s14
 800f32c:	eea1 4ae5 	vfms.f32	s8, s3, s11
 800f330:	ed94 7a07 	vldr	s14, [r4, #28]
 800f334:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800f338:	eee2 4a4f 	vfms.f32	s9, s4, s30
 800f33c:	eeed 2a82 	vfma.f32	s5, s27, s4
 800f340:	eeaf 5a60 	vfms.f32	s10, s30, s1
 800f344:	eeec 7a4f 	vfms.f32	s15, s24, s30
 800f348:	eeea 3a61 	vfms.f32	s7, s20, s3
 800f34c:	ee37 3a43 	vsub.f32	s6, s14, s6
 800f350:	eea2 4a46 	vfms.f32	s8, s4, s12
 800f354:	eea5 3ac0 	vfms.f32	s6, s11, s0
 800f358:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 800f35c:	ed8d 6a34 	vstr	s12, [sp, #208]	; 0xd0
 800f360:	eef0 ea65 	vmov.f32	s29, s11
 800f364:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800f368:	eef0 ba46 	vmov.f32	s23, s12
 800f36c:	ee24 6aa5 	vmul.f32	s12, s9, s11
 800f370:	eee2 3a62 	vfms.f32	s7, s4, s5
 800f374:	ee27 2a27 	vmul.f32	s4, s14, s15
 800f378:	ee27 7a05 	vmul.f32	s14, s14, s10
 800f37c:	eef0 ca46 	vmov.f32	s25, s12
 800f380:	eea4 7a25 	vfma.f32	s14, s8, s11
 800f384:	eeed ca04 	vfma.f32	s25, s26, s8
 800f388:	eef0 1a47 	vmov.f32	s3, s14
 800f38c:	eeb0 7a6c 	vmov.f32	s14, s25
 800f390:	eea3 7aa5 	vfma.f32	s14, s7, s11
 800f394:	ee23 1aa5 	vmul.f32	s2, s7, s11
 800f398:	ee27 0aa5 	vmul.f32	s0, s15, s11
 800f39c:	eea4 1a25 	vfma.f32	s2, s8, s11
 800f3a0:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 800f3a4:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 800f3a8:	edcd 2a33 	vstr	s5, [sp, #204]	; 0xcc
 800f3ac:	ee65 7a25 	vmul.f32	s15, s10, s11
 800f3b0:	eea7 1a24 	vfma.f32	s2, s14, s9
 800f3b4:	eeb0 ca40 	vmov.f32	s24, s0
 800f3b8:	eeb0 7a40 	vmov.f32	s14, s0
 800f3bc:	eea4 caa5 	vfma.f32	s24, s9, s11
 800f3c0:	eea4 6a25 	vfma.f32	s12, s8, s11
 800f3c4:	eea5 7a25 	vfma.f32	s14, s10, s11
 800f3c8:	eef0 6a67 	vmov.f32	s13, s15
 800f3cc:	eeab 3ae0 	vfms.f32	s6, s23, s1
 800f3d0:	eea4 2aa5 	vfma.f32	s4, s9, s11
 800f3d4:	eee4 6a25 	vfma.f32	s13, s8, s11
 800f3d8:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800f3dc:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800f3e0:	eeb0 6a4c 	vmov.f32	s12, s24
 800f3e4:	eeb0 7a61 	vmov.f32	s14, s3
 800f3e8:	eea5 2a25 	vfma.f32	s4, s10, s11
 800f3ec:	eea3 7a25 	vfma.f32	s14, s6, s11
 800f3f0:	eee3 7a25 	vfma.f32	s15, s6, s11
 800f3f4:	eead 6a05 	vfma.f32	s12, s26, s10
 800f3f8:	eeed 6a03 	vfma.f32	s13, s26, s6
 800f3fc:	edcd 2a01 	vstr	s5, [sp, #4]
 800f400:	ed8d 1a27 	vstr	s2, [sp, #156]	; 0x9c
 800f404:	ed8d 6a26 	vstr	s12, [sp, #152]	; 0x98
 800f408:	ed8d 2a29 	vstr	s4, [sp, #164]	; 0xa4
 800f40c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 800f410:	ed8d 7a28 	vstr	s14, [sp, #160]	; 0xa0
 800f414:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
 800f418:	f7ff fd04 	bl	800ee24 <st_accCal_MEMS_EIG3>
 800f41c:	ed9d 6a21 	vldr	s12, [sp, #132]	; 0x84
 800f420:	ed9d 4a07 	vldr	s8, [sp, #28]
 800f424:	ed9d 3a06 	vldr	s6, [sp, #24]
 800f428:	eddd 3a27 	vldr	s7, [sp, #156]	; 0x9c
 800f42c:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
 800f430:	ed9d 5a25 	vldr	s10, [sp, #148]	; 0x94
 800f434:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
 800f438:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f43c:	eddd 1a22 	vldr	s3, [sp, #136]	; 0x88
 800f440:	ed9d 2a29 	vldr	s4, [sp, #164]	; 0xa4
 800f444:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 800f448:	ee36 4a44 	vsub.f32	s8, s12, s8
 800f44c:	ee23 7a87 	vmul.f32	s14, s7, s14
 800f450:	ee74 5a43 	vsub.f32	s11, s8, s6
 800f454:	ee63 7aa7 	vmul.f32	s15, s7, s15
 800f458:	ee35 5a85 	vadd.f32	s10, s11, s10
 800f45c:	eea1 7aa4 	vfma.f32	s14, s3, s9
 800f460:	ee75 5a82 	vadd.f32	s11, s11, s4
 800f464:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800f468:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f46c:	eee3 6aa5 	vfma.f32	s13, s7, s11
 800f470:	ee36 6a43 	vsub.f32	s12, s12, s6
 800f474:	eef0 7ae7 	vabs.f32	s15, s15
 800f478:	eea6 7a04 	vfma.f32	s14, s12, s8
 800f47c:	eec6 caa7 	vdiv.f32	s25, s13, s15
 800f480:	ee87 ca27 	vdiv.f32	s24, s14, s15
 800f484:	ee6c 7aac 	vmul.f32	s15, s25, s25
 800f488:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800f48c:	ee77 7a8e 	vadd.f32	s15, s15, s28
 800f490:	ee17 0a90 	vmov	r0, s15
 800f494:	f7f0 fffc 	bl	8000490 <__aeabi_f2d>
 800f498:	ec41 0b10 	vmov	d0, r0, r1
 800f49c:	f00a f91c 	bl	80196d8 <sqrt>
 800f4a0:	ec51 0b10 	vmov	r0, r1, d0
 800f4a4:	f7f1 fb44 	bl	8000b30 <__aeabi_d2f>
 800f4a8:	ee07 0a90 	vmov	s15, r0
 800f4ac:	eece 4a27 	vdiv.f32	s9, s28, s15
 800f4b0:	eddd 2a01 	vldr	s5, [sp, #4]
 800f4b4:	edc5 4a01 	vstr	s9, [r5, #4]
 800f4b8:	ee6c 5aa4 	vmul.f32	s11, s25, s9
 800f4bc:	ee2c 5a24 	vmul.f32	s10, s24, s9
 800f4c0:	ee68 8aa4 	vmul.f32	s17, s17, s9
 800f4c4:	ee68 6a25 	vmul.f32	s13, s16, s11
 800f4c8:	ee2f 7aa5 	vmul.f32	s14, s31, s11
 800f4cc:	ee6f 7a25 	vmul.f32	s15, s30, s11
 800f4d0:	eee5 8a0b 	vfma.f32	s17, s10, s22
 800f4d4:	eee9 6aa4 	vfma.f32	s13, s19, s9
 800f4d8:	eea4 7aae 	vfma.f32	s14, s9, s29
 800f4dc:	eee4 7aab 	vfma.f32	s15, s9, s23
 800f4e0:	eeb0 6a68 	vmov.f32	s12, s17
 800f4e4:	eeea 6a85 	vfma.f32	s13, s21, s10
 800f4e8:	eeaa 7a05 	vfma.f32	s14, s20, s10
 800f4ec:	eee5 7a22 	vfma.f32	s15, s10, s5
 800f4f0:	eea5 6a89 	vfma.f32	s12, s11, s18
 800f4f4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800f4f8:	eef1 6a66 	vneg.f32	s13, s13
 800f4fc:	eeb1 7a47 	vneg.f32	s14, s14
 800f500:	eef1 7a67 	vneg.f32	s15, s15
 800f504:	eeb1 6a46 	vneg.f32	s12, s12
 800f508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50c:	edc5 6a04 	vstr	s13, [r5, #16]
 800f510:	ed85 7a05 	vstr	s14, [r5, #20]
 800f514:	edc5 7a06 	vstr	s15, [r5, #24]
 800f518:	ed85 6a03 	vstr	s12, [r5, #12]
 800f51c:	ed85 5a00 	vstr	s10, [r5]
 800f520:	edc5 5a02 	vstr	s11, [r5, #8]
 800f524:	d430      	bmi.n	800f588 <st_accCal_MEMS_ellipsoidFit7+0x580>
 800f526:	b046      	add	sp, #280	; 0x118
 800f528:	ecbd 8b10 	vpop	{d8-d15}
 800f52c:	bd70      	pop	{r4, r5, r6, pc}
 800f52e:	ee31 7ac4 	vsub.f32	s14, s3, s8
 800f532:	ed9d 2a14 	vldr	s4, [sp, #80]	; 0x50
 800f536:	eddd 2a16 	vldr	s5, [sp, #88]	; 0x58
 800f53a:	eeb0 7ac7 	vabs.f32	s14, s14
 800f53e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f546:	f57f ad9b 	bpl.w	800f080 <st_accCal_MEMS_ellipsoidFit7+0x78>
 800f54a:	ee32 7a62 	vsub.f32	s14, s4, s5
 800f54e:	eeb0 7ac7 	vabs.f32	s14, s14
 800f552:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55a:	bf4c      	ite	mi
 800f55c:	2601      	movmi	r6, #1
 800f55e:	2600      	movpl	r6, #0
 800f560:	e58e      	b.n	800f080 <st_accCal_MEMS_ellipsoidFit7+0x78>
 800f562:	ee69 4ac2 	vnmul.f32	s9, s19, s4
 800f566:	ee29 5a67 	vnmul.f32	s10, s18, s15
 800f56a:	eee5 4aa1 	vfma.f32	s9, s11, s3
 800f56e:	ee68 5ae1 	vnmul.f32	s11, s17, s3
 800f572:	eea1 5aa2 	vfma.f32	s10, s3, s5
 800f576:	eee7 5a82 	vfma.f32	s11, s15, s4
 800f57a:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800f57e:	eef0 7a65 	vmov.f32	s15, s11
 800f582:	eef0 2a64 	vmov.f32	s5, s9
 800f586:	e5b9      	b.n	800f0fc <st_accCal_MEMS_ellipsoidFit7+0xf4>
 800f588:	eeb1 5a45 	vneg.f32	s10, s10
 800f58c:	eef1 4a64 	vneg.f32	s9, s9
 800f590:	eef1 5a65 	vneg.f32	s11, s11
 800f594:	eeb1 6a46 	vneg.f32	s12, s12
 800f598:	eef1 6a66 	vneg.f32	s13, s13
 800f59c:	eeb1 7a47 	vneg.f32	s14, s14
 800f5a0:	eef1 7a67 	vneg.f32	s15, s15
 800f5a4:	ed85 5a00 	vstr	s10, [r5]
 800f5a8:	edc5 4a01 	vstr	s9, [r5, #4]
 800f5ac:	edc5 5a02 	vstr	s11, [r5, #8]
 800f5b0:	ed85 6a03 	vstr	s12, [r5, #12]
 800f5b4:	edc5 6a04 	vstr	s13, [r5, #16]
 800f5b8:	ed85 7a05 	vstr	s14, [r5, #20]
 800f5bc:	edc5 7a06 	vstr	s15, [r5, #24]
 800f5c0:	b046      	add	sp, #280	; 0x118
 800f5c2:	ecbd 8b10 	vpop	{d8-d15}
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}

0800f5c8 <m_dcm2q_eml>:
 800f5c8:	ed90 7a04 	vldr	s14, [r0, #16]
 800f5cc:	edd0 6a08 	vldr	s13, [r0, #32]
 800f5d0:	edd0 7a00 	vldr	s15, [r0]
 800f5d4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f5d8:	b538      	push	{r3, r4, r5, lr}
 800f5da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5de:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f5e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ea:	ed2d 8b02 	vpush	{d8}
 800f5ee:	4604      	mov	r4, r0
 800f5f0:	460d      	mov	r5, r1
 800f5f2:	f340 80c1 	ble.w	800f778 <m_dcm2q_eml+0x1b0>
 800f5f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f5fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f5fe:	ee17 0a90 	vmov	r0, s15
 800f602:	f7f0 ff45 	bl	8000490 <__aeabi_f2d>
 800f606:	ec41 0b10 	vmov	d0, r0, r1
 800f60a:	f00a f865 	bl	80196d8 <sqrt>
 800f60e:	ec51 0b10 	vmov	r0, r1, d0
 800f612:	f7f1 fa8d 	bl	8000b30 <__aeabi_d2f>
 800f616:	ee07 0a90 	vmov	s15, r0
 800f61a:	edd4 6a05 	vldr	s13, [r4, #20]
 800f61e:	ed94 7a07 	vldr	s14, [r4, #28]
 800f622:	edd4 5a06 	vldr	s11, [r4, #24]
 800f626:	ed94 5a02 	vldr	s10, [r4, #8]
 800f62a:	ed94 6a03 	vldr	s12, [r4, #12]
 800f62e:	ed94 4a01 	vldr	s8, [r4, #4]
 800f632:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f636:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800f63a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f642:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f646:	bf54      	ite	pl
 800f648:	eef0 4a47 	vmovpl.f32	s9, s14
 800f64c:	eef0 4a66 	vmovmi.f32	s9, s13
 800f650:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800f654:	ee35 5a65 	vsub.f32	s10, s10, s11
 800f658:	edc5 7a00 	vstr	s15, [r5]
 800f65c:	edd4 5a00 	vldr	s11, [r4]
 800f660:	edd4 4a08 	vldr	s9, [r4, #32]
 800f664:	edd4 7a04 	vldr	s15, [r4, #16]
 800f668:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800f66c:	ee36 6a44 	vsub.f32	s12, s12, s8
 800f670:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800f674:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800f680:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800f684:	bf54      	ite	pl
 800f686:	eef0 8a47 	vmovpl.f32	s17, s14
 800f68a:	eef0 8a66 	vmovmi.f32	s17, s13
 800f68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f692:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f696:	bf54      	ite	pl
 800f698:	eeb0 8a47 	vmovpl.f32	s16, s14
 800f69c:	eeb0 8a66 	vmovmi.f32	s16, s13
 800f6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a4:	dd75      	ble.n	800f792 <m_dcm2q_eml+0x1ca>
 800f6a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f6aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f6ae:	ee17 0a90 	vmov	r0, s15
 800f6b2:	f7f0 feed 	bl	8000490 <__aeabi_f2d>
 800f6b6:	ec41 0b10 	vmov	d0, r0, r1
 800f6ba:	f00a f80d 	bl	80196d8 <sqrt>
 800f6be:	ec51 0b10 	vmov	r0, r1, d0
 800f6c2:	f7f1 fa35 	bl	8000b30 <__aeabi_d2f>
 800f6c6:	ee07 0a90 	vmov	s15, r0
 800f6ca:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800f6ce:	edc5 7a01 	vstr	s15, [r5, #4]
 800f6d2:	edd4 6a04 	vldr	s13, [r4, #16]
 800f6d6:	ed94 7a00 	vldr	s14, [r4]
 800f6da:	edd4 7a08 	vldr	s15, [r4, #32]
 800f6de:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f6e2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800f6e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f6ea:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f2:	dd4b      	ble.n	800f78c <m_dcm2q_eml+0x1c4>
 800f6f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f6f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f6fc:	ee17 0a90 	vmov	r0, s15
 800f700:	f7f0 fec6 	bl	8000490 <__aeabi_f2d>
 800f704:	ec41 0b10 	vmov	d0, r0, r1
 800f708:	f009 ffe6 	bl	80196d8 <sqrt>
 800f70c:	ec51 0b10 	vmov	r0, r1, d0
 800f710:	f7f1 fa0e 	bl	8000b30 <__aeabi_d2f>
 800f714:	ee07 0a90 	vmov	s15, r0
 800f718:	ee27 7a88 	vmul.f32	s14, s15, s16
 800f71c:	ed85 7a02 	vstr	s14, [r5, #8]
 800f720:	ed94 7a04 	vldr	s14, [r4, #16]
 800f724:	edd4 7a00 	vldr	s15, [r4]
 800f728:	edd4 6a08 	vldr	s13, [r4, #32]
 800f72c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f730:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f740:	dd1d      	ble.n	800f77e <m_dcm2q_eml+0x1b6>
 800f742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f74a:	ee17 0a90 	vmov	r0, s15
 800f74e:	f7f0 fe9f 	bl	8000490 <__aeabi_f2d>
 800f752:	ec41 0b10 	vmov	d0, r0, r1
 800f756:	f009 ffbf 	bl	80196d8 <sqrt>
 800f75a:	ec51 0b10 	vmov	r0, r1, d0
 800f75e:	f7f1 f9e7 	bl	8000b30 <__aeabi_d2f>
 800f762:	ecbd 8b02 	vpop	{d8}
 800f766:	ee07 0a10 	vmov	s14, r0
 800f76a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f772:	edc5 7a03 	vstr	s15, [r5, #12]
 800f776:	bd38      	pop	{r3, r4, r5, pc}
 800f778:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f798 <m_dcm2q_eml+0x1d0>
 800f77c:	e74d      	b.n	800f61a <m_dcm2q_eml+0x52>
 800f77e:	ecbd 8b02 	vpop	{d8}
 800f782:	eddf 7a05 	vldr	s15, [pc, #20]	; 800f798 <m_dcm2q_eml+0x1d0>
 800f786:	edc5 7a03 	vstr	s15, [r5, #12]
 800f78a:	bd38      	pop	{r3, r4, r5, pc}
 800f78c:	ed9f 7a02 	vldr	s14, [pc, #8]	; 800f798 <m_dcm2q_eml+0x1d0>
 800f790:	e7c4      	b.n	800f71c <m_dcm2q_eml+0x154>
 800f792:	eddf 7a01 	vldr	s15, [pc, #4]	; 800f798 <m_dcm2q_eml+0x1d0>
 800f796:	e79a      	b.n	800f6ce <m_dcm2q_eml+0x106>
 800f798:	00000000 	.word	0x00000000

0800f79c <SpacePointGyroProp>:
 800f79c:	b570      	push	{r4, r5, r6, lr}
 800f79e:	eddf 6a46 	vldr	s13, [pc, #280]	; 800f8b8 <SpacePointGyroProp+0x11c>
 800f7a2:	ed92 6a01 	vldr	s12, [r2, #4]
 800f7a6:	ed92 7a00 	vldr	s14, [r2]
 800f7aa:	edd1 7a02 	vldr	s15, [r1, #8]
 800f7ae:	ed2d 8b04 	vpush	{d8-d9}
 800f7b2:	edd1 8a01 	vldr	s17, [r1, #4]
 800f7b6:	ed91 9a00 	vldr	s18, [r1]
 800f7ba:	ed92 8a02 	vldr	s16, [r2, #8]
 800f7be:	9d08      	ldr	r5, [sp, #32]
 800f7c0:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f7c4:	ee78 8ac6 	vsub.f32	s17, s17, s12
 800f7c8:	ee39 9a47 	vsub.f32	s18, s18, s14
 800f7cc:	ee68 8a80 	vmul.f32	s17, s17, s0
 800f7d0:	ee29 9a00 	vmul.f32	s18, s18, s0
 800f7d4:	ee28 7aa8 	vmul.f32	s14, s17, s17
 800f7d8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f7dc:	eea9 7a09 	vfma.f32	s14, s18, s18
 800f7e0:	4606      	mov	r6, r0
 800f7e2:	461c      	mov	r4, r3
 800f7e4:	ee27 8a80 	vmul.f32	s16, s15, s0
 800f7e8:	eef0 7a47 	vmov.f32	s15, s14
 800f7ec:	eee8 7a08 	vfma.f32	s15, s16, s16
 800f7f0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800f7f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7fc:	d55a      	bpl.n	800f8b4 <SpacePointGyroProp+0x118>
 800f7fe:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800f802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f806:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f80a:	ee17 0a10 	vmov	r0, s14
 800f80e:	f7f0 fe3f 	bl	8000490 <__aeabi_f2d>
 800f812:	ec41 0b10 	vmov	d0, r0, r1
 800f816:	f009 ff5f 	bl	80196d8 <sqrt>
 800f81a:	ec51 0b10 	vmov	r0, r1, d0
 800f81e:	f7f1 f987 	bl	8000b30 <__aeabi_d2f>
 800f822:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f826:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f82a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f82e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f832:	4622      	mov	r2, r4
 800f834:	60e8      	str	r0, [r5, #12]
 800f836:	4631      	mov	r1, r6
 800f838:	ed85 9a00 	vstr	s18, [r5]
 800f83c:	edc5 8a01 	vstr	s17, [r5, #4]
 800f840:	ed85 8a02 	vstr	s16, [r5, #8]
 800f844:	4628      	mov	r0, r5
 800f846:	f7ff fa51 	bl	800ecec <m_qmult_eml>
 800f84a:	edd4 8a02 	vldr	s17, [r4, #8]
 800f84e:	ed94 9a01 	vldr	s18, [r4, #4]
 800f852:	ed94 8a03 	vldr	s16, [r4, #12]
 800f856:	edd4 9a00 	vldr	s19, [r4]
 800f85a:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800f85e:	eee9 7a09 	vfma.f32	s15, s18, s18
 800f862:	eee8 7a08 	vfma.f32	s15, s16, s16
 800f866:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800f86a:	ee17 0a90 	vmov	r0, s15
 800f86e:	f7f0 fe0f 	bl	8000490 <__aeabi_f2d>
 800f872:	ec41 0b10 	vmov	d0, r0, r1
 800f876:	f009 ff2f 	bl	80196d8 <sqrt>
 800f87a:	ec51 0b10 	vmov	r0, r1, d0
 800f87e:	f7f1 f957 	bl	8000b30 <__aeabi_d2f>
 800f882:	ee07 0a90 	vmov	s15, r0
 800f886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f88a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800f88e:	ee67 9aa9 	vmul.f32	s19, s15, s19
 800f892:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f896:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f89a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f89e:	edc4 9a00 	vstr	s19, [r4]
 800f8a2:	ed84 9a01 	vstr	s18, [r4, #4]
 800f8a6:	edc4 8a02 	vstr	s17, [r4, #8]
 800f8aa:	ed84 8a03 	vstr	s16, [r4, #12]
 800f8ae:	ecbd 8b04 	vpop	{d8-d9}
 800f8b2:	bd70      	pop	{r4, r5, r6, pc}
 800f8b4:	2000      	movs	r0, #0
 800f8b6:	e7b4      	b.n	800f822 <SpacePointGyroProp+0x86>
 800f8b8:	3c8efa35 	.word	0x3c8efa35

0800f8bc <SpacePointGyroPropRedist>:
 800f8bc:	b570      	push	{r4, r5, r6, lr}
 800f8be:	460d      	mov	r5, r1
 800f8c0:	ed2d 8b04 	vpush	{d8-d9}
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	4606      	mov	r6, r0
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f8ce:	f7ff fa0d 	bl	800ecec <m_qmult_eml>
 800f8d2:	462a      	mov	r2, r5
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	4630      	mov	r0, r6
 800f8d8:	f7ff fa08 	bl	800ecec <m_qmult_eml>
 800f8dc:	4622      	mov	r2, r4
 800f8de:	4618      	mov	r0, r3
 800f8e0:	9908      	ldr	r1, [sp, #32]
 800f8e2:	f7ff fa03 	bl	800ecec <m_qmult_eml>
 800f8e6:	4621      	mov	r1, r4
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	f7ff f9ff 	bl	800ecec <m_qmult_eml>
 800f8ee:	ed94 9a01 	vldr	s18, [r4, #4]
 800f8f2:	edd4 9a00 	vldr	s19, [r4]
 800f8f6:	edd4 8a02 	vldr	s17, [r4, #8]
 800f8fa:	ed94 8a03 	vldr	s16, [r4, #12]
 800f8fe:	ee69 7a09 	vmul.f32	s15, s18, s18
 800f902:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800f906:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800f90a:	eee8 7a08 	vfma.f32	s15, s16, s16
 800f90e:	ee17 0a90 	vmov	r0, s15
 800f912:	f7f0 fdbd 	bl	8000490 <__aeabi_f2d>
 800f916:	ec41 0b10 	vmov	d0, r0, r1
 800f91a:	f009 fedd 	bl	80196d8 <sqrt>
 800f91e:	ec51 0b10 	vmov	r0, r1, d0
 800f922:	f7f1 f905 	bl	8000b30 <__aeabi_d2f>
 800f926:	ee07 0a90 	vmov	s15, r0
 800f92a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f92e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800f932:	ee67 9aa9 	vmul.f32	s19, s15, s19
 800f936:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f93a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f93e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f942:	edc4 9a00 	vstr	s19, [r4]
 800f946:	ed84 9a01 	vstr	s18, [r4, #4]
 800f94a:	edc4 8a02 	vstr	s17, [r4, #8]
 800f94e:	ed84 8a03 	vstr	s16, [r4, #12]
 800f952:	ecbd 8b04 	vpop	{d8-d9}
 800f956:	bd70      	pop	{r4, r5, r6, pc}

0800f958 <quatErr2EulerErr>:
 800f958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f95c:	2300      	movs	r3, #0
 800f95e:	ed2d 8b04 	vpush	{d8-d9}
 800f962:	6013      	str	r3, [r2, #0]
 800f964:	6053      	str	r3, [r2, #4]
 800f966:	6093      	str	r3, [r2, #8]
 800f968:	ed90 0a01 	vldr	s0, [r0, #4]
 800f96c:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 800fb20 <quatErr2EulerErr+0x1c8>
 800f970:	4606      	mov	r6, r0
 800f972:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f976:	460c      	mov	r4, r1
 800f978:	4615      	mov	r5, r2
 800f97a:	f009 fd55 	bl	8019428 <cosf>
 800f97e:	ed96 9a02 	vldr	s18, [r6, #8]
 800f982:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f986:	eef0 8a40 	vmov.f32	s17, s0
 800f98a:	eeb0 0a49 	vmov.f32	s0, s18
 800f98e:	f009 fdb3 	bl	80194f8 <sinf>
 800f992:	eeb0 8a40 	vmov.f32	s16, s0
 800f996:	eeb0 0a49 	vmov.f32	s0, s18
 800f99a:	f009 fd45 	bl	8019428 <cosf>
 800f99e:	edd4 7a01 	vldr	s15, [r4, #4]
 800f9a2:	edd4 6a02 	vldr	s13, [r4, #8]
 800f9a6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800fb24 <quatErr2EulerErr+0x1cc>
 800f9aa:	ee20 9a00 	vmul.f32	s18, s0, s0
 800f9ae:	ee28 8a08 	vmul.f32	s16, s16, s16
 800f9b2:	ee69 7a27 	vmul.f32	s15, s18, s15
 800f9b6:	eee8 7a26 	vfma.f32	s15, s16, s13
 800f9ba:	eef1 6ae7 	vsqrt.f32	s13, s15
 800f9be:	ee66 7a87 	vmul.f32	s15, s13, s14
 800f9c2:	ee17 0a90 	vmov	r0, s15
 800f9c6:	f7f0 fd63 	bl	8000490 <__aeabi_f2d>
 800f9ca:	4b57      	ldr	r3, [pc, #348]	; (800fb28 <quatErr2EulerErr+0x1d0>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	4680      	mov	r8, r0
 800f9d0:	4689      	mov	r9, r1
 800f9d2:	f7f1 f831 	bl	8000a38 <__aeabi_dcmple>
 800f9d6:	b918      	cbnz	r0, 800f9e0 <quatErr2EulerErr+0x88>
 800f9d8:	f8df 914c 	ldr.w	r9, [pc, #332]	; 800fb28 <quatErr2EulerErr+0x1d0>
 800f9dc:	f04f 0800 	mov.w	r8, #0
 800f9e0:	4649      	mov	r1, r9
 800f9e2:	4640      	mov	r0, r8
 800f9e4:	f7f1 f8a4 	bl	8000b30 <__aeabi_d2f>
 800f9e8:	f7f0 fd52 	bl	8000490 <__aeabi_f2d>
 800f9ec:	4b4f      	ldr	r3, [pc, #316]	; (800fb2c <quatErr2EulerErr+0x1d4>)
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	4680      	mov	r8, r0
 800f9f2:	4689      	mov	r9, r1
 800f9f4:	f7f1 f82a 	bl	8000a4c <__aeabi_dcmpge>
 800f9f8:	b918      	cbnz	r0, 800fa02 <quatErr2EulerErr+0xaa>
 800f9fa:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800fb2c <quatErr2EulerErr+0x1d4>
 800f9fe:	f04f 0800 	mov.w	r8, #0
 800fa02:	4649      	mov	r1, r9
 800fa04:	4640      	mov	r0, r8
 800fa06:	f7f1 f893 	bl	8000b30 <__aeabi_d2f>
 800fa0a:	6068      	str	r0, [r5, #4]
 800fa0c:	edd4 7a02 	vldr	s15, [r4, #8]
 800fa10:	ed94 6a01 	vldr	s12, [r4, #4]
 800fa14:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800fb30 <quatErr2EulerErr+0x1d8>
 800fa18:	eddf 6a42 	vldr	s13, [pc, #264]	; 800fb24 <quatErr2EulerErr+0x1cc>
 800fa1c:	ee69 7a27 	vmul.f32	s15, s18, s15
 800fa20:	eea8 7aa8 	vfma.f32	s14, s17, s17
 800fa24:	eee8 7a06 	vfma.f32	s15, s16, s12
 800fa28:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800fa2c:	eef1 7ac6 	vsqrt.f32	s15, s12
 800fa30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa34:	ee17 0a90 	vmov	r0, s15
 800fa38:	f7f0 fd2a 	bl	8000490 <__aeabi_f2d>
 800fa3c:	4b3d      	ldr	r3, [pc, #244]	; (800fb34 <quatErr2EulerErr+0x1dc>)
 800fa3e:	2200      	movs	r2, #0
 800fa40:	4680      	mov	r8, r0
 800fa42:	4689      	mov	r9, r1
 800fa44:	f7f0 fff8 	bl	8000a38 <__aeabi_dcmple>
 800fa48:	b918      	cbnz	r0, 800fa52 <quatErr2EulerErr+0xfa>
 800fa4a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800fb34 <quatErr2EulerErr+0x1dc>
 800fa4e:	f04f 0800 	mov.w	r8, #0
 800fa52:	4649      	mov	r1, r9
 800fa54:	4640      	mov	r0, r8
 800fa56:	f7f1 f86b 	bl	8000b30 <__aeabi_d2f>
 800fa5a:	f7f0 fd19 	bl	8000490 <__aeabi_f2d>
 800fa5e:	4b33      	ldr	r3, [pc, #204]	; (800fb2c <quatErr2EulerErr+0x1d4>)
 800fa60:	2200      	movs	r2, #0
 800fa62:	4680      	mov	r8, r0
 800fa64:	4689      	mov	r9, r1
 800fa66:	f7f0 fff1 	bl	8000a4c <__aeabi_dcmpge>
 800fa6a:	b918      	cbnz	r0, 800fa74 <quatErr2EulerErr+0x11c>
 800fa6c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800fb2c <quatErr2EulerErr+0x1d4>
 800fa70:	f04f 0800 	mov.w	r8, #0
 800fa74:	4640      	mov	r0, r8
 800fa76:	4649      	mov	r1, r9
 800fa78:	f7f1 f85a 	bl	8000b30 <__aeabi_d2f>
 800fa7c:	6028      	str	r0, [r5, #0]
 800fa7e:	ed96 0a01 	vldr	s0, [r6, #4]
 800fa82:	ed9f 6a27 	vldr	s12, [pc, #156]	; 800fb20 <quatErr2EulerErr+0x1c8>
 800fa86:	ed94 7a02 	vldr	s14, [r4, #8]
 800fa8a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fb38 <quatErr2EulerErr+0x1e0>
 800fa8e:	edd4 6a01 	vldr	s13, [r4, #4]
 800fa92:	ee20 0a06 	vmul.f32	s0, s0, s12
 800fa96:	ee28 8a07 	vmul.f32	s16, s16, s14
 800fa9a:	eeb0 7ac0 	vabs.f32	s14, s0
 800fa9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800faa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa6:	eea9 8a26 	vfma.f32	s16, s18, s13
 800faaa:	d532      	bpl.n	800fb12 <quatErr2EulerErr+0x1ba>
 800faac:	f009 fd6a 	bl	8019584 <tanf>
 800fab0:	edd4 7a00 	vldr	s15, [r4]
 800fab4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fab8:	eee0 7a08 	vfma.f32	s15, s0, s16
 800fabc:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800fac0:	eddf 7a18 	vldr	s15, [pc, #96]	; 800fb24 <quatErr2EulerErr+0x1cc>
 800fac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fac8:	ee17 0a90 	vmov	r0, s15
 800facc:	f7f0 fce0 	bl	8000490 <__aeabi_f2d>
 800fad0:	4b18      	ldr	r3, [pc, #96]	; (800fb34 <quatErr2EulerErr+0x1dc>)
 800fad2:	2200      	movs	r2, #0
 800fad4:	4606      	mov	r6, r0
 800fad6:	460f      	mov	r7, r1
 800fad8:	f7f0 ffae 	bl	8000a38 <__aeabi_dcmple>
 800fadc:	b908      	cbnz	r0, 800fae2 <quatErr2EulerErr+0x18a>
 800fade:	4f15      	ldr	r7, [pc, #84]	; (800fb34 <quatErr2EulerErr+0x1dc>)
 800fae0:	2600      	movs	r6, #0
 800fae2:	4639      	mov	r1, r7
 800fae4:	4630      	mov	r0, r6
 800fae6:	f7f1 f823 	bl	8000b30 <__aeabi_d2f>
 800faea:	f7f0 fcd1 	bl	8000490 <__aeabi_f2d>
 800faee:	4b0f      	ldr	r3, [pc, #60]	; (800fb2c <quatErr2EulerErr+0x1d4>)
 800faf0:	2200      	movs	r2, #0
 800faf2:	4606      	mov	r6, r0
 800faf4:	460f      	mov	r7, r1
 800faf6:	f7f0 ffa9 	bl	8000a4c <__aeabi_dcmpge>
 800fafa:	b908      	cbnz	r0, 800fb00 <quatErr2EulerErr+0x1a8>
 800fafc:	4f0b      	ldr	r7, [pc, #44]	; (800fb2c <quatErr2EulerErr+0x1d4>)
 800fafe:	2600      	movs	r6, #0
 800fb00:	4630      	mov	r0, r6
 800fb02:	4639      	mov	r1, r7
 800fb04:	f7f1 f814 	bl	8000b30 <__aeabi_d2f>
 800fb08:	ecbd 8b04 	vpop	{d8-d9}
 800fb0c:	60a8      	str	r0, [r5, #8]
 800fb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb12:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800fb3c <quatErr2EulerErr+0x1e4>
 800fb16:	edd4 7a00 	vldr	s15, [r4]
 800fb1a:	eee8 7a07 	vfma.f32	s15, s16, s14
 800fb1e:	e7cd      	b.n	800fabc <quatErr2EulerErr+0x164>
 800fb20:	3c8efa35 	.word	0x3c8efa35
 800fb24:	42e52ee1 	.word	0x42e52ee1
 800fb28:	40568000 	.word	0x40568000
 800fb2c:	3ff00000 	.word	0x3ff00000
 800fb30:	3a83126f 	.word	0x3a83126f
 800fb34:	40668000 	.word	0x40668000
 800fb38:	3fbc430e 	.word	0x3fbc430e
 800fb3c:	42c6ab07 	.word	0x42c6ab07

0800fb40 <m_b_interp1q_constrain>:
 800fb40:	ed90 7a00 	vldr	s14, [r0]
 800fb44:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800fb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4c:	d53d      	bpl.n	800fbca <m_b_interp1q_constrain+0x8a>
 800fb4e:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 800fb52:	eef4 7ac0 	vcmpe.f32	s15, s0
 800fb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5a:	dd33      	ble.n	800fbc4 <m_b_interp1q_constrain+0x84>
 800fb5c:	b4f0      	push	{r4, r5, r6, r7}
 800fb5e:	240a      	movs	r4, #10
 800fb60:	2602      	movs	r6, #2
 800fb62:	2501      	movs	r5, #1
 800fb64:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 800fb68:	e008      	b.n	800fb7c <m_b_interp1q_constrain+0x3c>
 800fb6a:	edd2 7a00 	vldr	s15, [r2]
 800fb6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb76:	bfb8      	it	lt
 800fb78:	461c      	movlt	r4, r3
 800fb7a:	da29      	bge.n	800fbd0 <m_b_interp1q_constrain+0x90>
 800fb7c:	1963      	adds	r3, r4, r5
 800fb7e:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 800fb82:	42b4      	cmp	r4, r6
 800fb84:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fb88:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800fb8c:	d8ed      	bhi.n	800fb6a <m_b_interp1q_constrain+0x2a>
 800fb8e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800fb92:	3d01      	subs	r5, #1
 800fb94:	00ab      	lsls	r3, r5, #2
 800fb96:	3304      	adds	r3, #4
 800fb98:	4418      	add	r0, r3
 800fb9a:	edd0 7a00 	vldr	s15, [r0]
 800fb9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fba2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fba6:	440b      	add	r3, r1
 800fba8:	eec0 6a07 	vdiv.f32	s13, s0, s14
 800fbac:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800fbb0:	bcf0      	pop	{r4, r5, r6, r7}
 800fbb2:	ed91 0a00 	vldr	s0, [r1]
 800fbb6:	edd3 7a00 	vldr	s15, [r3]
 800fbba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fbbe:	eea6 0aa7 	vfma.f32	s0, s13, s15
 800fbc2:	4770      	bx	lr
 800fbc4:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
 800fbc8:	4770      	bx	lr
 800fbca:	ed91 0a00 	vldr	s0, [r1]
 800fbce:	4770      	bx	lr
 800fbd0:	eeb0 7a67 	vmov.f32	s14, s15
 800fbd4:	1c5e      	adds	r6, r3, #1
 800fbd6:	461d      	mov	r5, r3
 800fbd8:	e7d0      	b.n	800fb7c <m_b_interp1q_constrain+0x3c>
 800fbda:	bf00      	nop

0800fbdc <m_interp1q_constrain>:
 800fbdc:	ed90 7a00 	vldr	s14, [r0]
 800fbe0:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800fbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe8:	d53d      	bpl.n	800fc66 <m_interp1q_constrain+0x8a>
 800fbea:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 800fbee:	eef4 7ac0 	vcmpe.f32	s15, s0
 800fbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf6:	dd33      	ble.n	800fc60 <m_interp1q_constrain+0x84>
 800fbf8:	b4f0      	push	{r4, r5, r6, r7}
 800fbfa:	240d      	movs	r4, #13
 800fbfc:	2602      	movs	r6, #2
 800fbfe:	2501      	movs	r5, #1
 800fc00:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 800fc04:	e008      	b.n	800fc18 <m_interp1q_constrain+0x3c>
 800fc06:	edd2 7a00 	vldr	s15, [r2]
 800fc0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc12:	bfb8      	it	lt
 800fc14:	461c      	movlt	r4, r3
 800fc16:	da29      	bge.n	800fc6c <m_interp1q_constrain+0x90>
 800fc18:	1963      	adds	r3, r4, r5
 800fc1a:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 800fc1e:	42b4      	cmp	r4, r6
 800fc20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fc24:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800fc28:	d8ed      	bhi.n	800fc06 <m_interp1q_constrain+0x2a>
 800fc2a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800fc2e:	3d01      	subs	r5, #1
 800fc30:	00ab      	lsls	r3, r5, #2
 800fc32:	3304      	adds	r3, #4
 800fc34:	4418      	add	r0, r3
 800fc36:	edd0 7a00 	vldr	s15, [r0]
 800fc3a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fc3e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fc42:	440b      	add	r3, r1
 800fc44:	eec0 6a07 	vdiv.f32	s13, s0, s14
 800fc48:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800fc4c:	bcf0      	pop	{r4, r5, r6, r7}
 800fc4e:	ed91 0a00 	vldr	s0, [r1]
 800fc52:	edd3 7a00 	vldr	s15, [r3]
 800fc56:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fc5a:	eea6 0aa7 	vfma.f32	s0, s13, s15
 800fc5e:	4770      	bx	lr
 800fc60:	ed91 0a0c 	vldr	s0, [r1, #48]	; 0x30
 800fc64:	4770      	bx	lr
 800fc66:	ed91 0a00 	vldr	s0, [r1]
 800fc6a:	4770      	bx	lr
 800fc6c:	eeb0 7a67 	vmov.f32	s14, s15
 800fc70:	1c5e      	adds	r6, r3, #1
 800fc72:	461d      	mov	r5, r3
 800fc74:	e7d0      	b.n	800fc18 <m_interp1q_constrain+0x3c>
 800fc76:	bf00      	nop

0800fc78 <m_rt_atan2f_snf>:
 800fc78:	b508      	push	{r3, lr}
 800fc7a:	4b39      	ldr	r3, [pc, #228]	; (800fd60 <m_rt_atan2f_snf+0xe8>)
 800fc7c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800fc80:	eeb4 0a67 	vcmp.f32	s0, s15
 800fc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc88:	ed2d 8b02 	vpush	{d8}
 800fc8c:	eeb0 8a40 	vmov.f32	s16, s0
 800fc90:	d014      	beq.n	800fcbc <m_rt_atan2f_snf+0x44>
 800fc92:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800fc96:	eeb4 0a47 	vcmp.f32	s0, s14
 800fc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9e:	d00d      	beq.n	800fcbc <m_rt_atan2f_snf+0x44>
 800fca0:	eef5 0a40 	vcmp.f32	s1, #0.0
 800fca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca8:	d135      	bne.n	800fd16 <m_rt_atan2f_snf+0x9e>
 800fcaa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb2:	dc4d      	bgt.n	800fd50 <m_rt_atan2f_snf+0xd8>
 800fcb4:	d451      	bmi.n	800fd5a <m_rt_atan2f_snf+0xe2>
 800fcb6:	eeb0 0a60 	vmov.f32	s0, s1
 800fcba:	e01d      	b.n	800fcf8 <m_rt_atan2f_snf+0x80>
 800fcbc:	eef4 0a67 	vcmp.f32	s1, s15
 800fcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc4:	d11b      	bne.n	800fcfe <m_rt_atan2f_snf+0x86>
 800fcc6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fcca:	eddf 7a26 	vldr	s15, [pc, #152]	; 800fd64 <m_rt_atan2f_snf+0xec>
 800fcce:	eddf 6a26 	vldr	s13, [pc, #152]	; 800fd68 <m_rt_atan2f_snf+0xf0>
 800fcd2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800fd6c <m_rt_atan2f_snf+0xf4>
 800fcd6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800fd70 <m_rt_atan2f_snf+0xf8>
 800fcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcde:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800fce2:	bfd8      	it	le
 800fce4:	eef0 7a66 	vmovle.f32	s15, s13
 800fce8:	bfc8      	it	gt
 800fcea:	eeb0 0a47 	vmovgt.f32	s0, s14
 800fcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf2:	bfd8      	it	le
 800fcf4:	eeb0 0a67 	vmovle.f32	s0, s15
 800fcf8:	ecbd 8b02 	vpop	{d8}
 800fcfc:	bd08      	pop	{r3, pc}
 800fcfe:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800fd02:	eef4 0a67 	vcmp.f32	s1, s15
 800fd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0a:	d0dc      	beq.n	800fcc6 <m_rt_atan2f_snf+0x4e>
 800fd0c:	eef5 0a40 	vcmp.f32	s1, #0.0
 800fd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd14:	d0c9      	beq.n	800fcaa <m_rt_atan2f_snf+0x32>
 800fd16:	ee10 0a90 	vmov	r0, s1
 800fd1a:	f7f0 fbb9 	bl	8000490 <__aeabi_f2d>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	460b      	mov	r3, r1
 800fd22:	ee18 0a10 	vmov	r0, s16
 800fd26:	ec43 2b18 	vmov	d8, r2, r3
 800fd2a:	f7f0 fbb1 	bl	8000490 <__aeabi_f2d>
 800fd2e:	eeb0 1a48 	vmov.f32	s2, s16
 800fd32:	eef0 1a68 	vmov.f32	s3, s17
 800fd36:	ec41 0b10 	vmov	d0, r0, r1
 800fd3a:	f009 fc83 	bl	8019644 <atan2>
 800fd3e:	ec51 0b10 	vmov	r0, r1, d0
 800fd42:	f7f0 fef5 	bl	8000b30 <__aeabi_d2f>
 800fd46:	ecbd 8b02 	vpop	{d8}
 800fd4a:	ee00 0a10 	vmov	s0, r0
 800fd4e:	bd08      	pop	{r3, pc}
 800fd50:	ecbd 8b02 	vpop	{d8}
 800fd54:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800fd74 <m_rt_atan2f_snf+0xfc>
 800fd58:	bd08      	pop	{r3, pc}
 800fd5a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800fd78 <m_rt_atan2f_snf+0x100>
 800fd5e:	e7cb      	b.n	800fcf8 <m_rt_atan2f_snf+0x80>
 800fd60:	200013d8 	.word	0x200013d8
 800fd64:	4016cbe4 	.word	0x4016cbe4
 800fd68:	c016cbe4 	.word	0xc016cbe4
 800fd6c:	3f490fdb 	.word	0x3f490fdb
 800fd70:	bf490fdb 	.word	0xbf490fdb
 800fd74:	3fc90fdb 	.word	0x3fc90fdb
 800fd78:	bfc90fdb 	.word	0xbfc90fdb

0800fd7c <output_update>:
 800fd7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd80:	ed2d 8b0a 	vpush	{d8-d12}
 800fd84:	edd0 6a00 	vldr	s13, [r0]
 800fd88:	ed90 7a01 	vldr	s14, [r0, #4]
 800fd8c:	edd0 7a02 	vldr	s15, [r0, #8]
 800fd90:	b08b      	sub	sp, #44	; 0x2c
 800fd92:	eef1 6a66 	vneg.f32	s13, s13
 800fd96:	f89d 9074 	ldrb.w	r9, [sp, #116]	; 0x74
 800fd9a:	edc0 6a00 	vstr	s13, [r0]
 800fd9e:	eeb1 7a47 	vneg.f32	s14, s14
 800fda2:	eef1 7a67 	vneg.f32	s15, s15
 800fda6:	460f      	mov	r7, r1
 800fda8:	ed80 7a01 	vstr	s14, [r0, #4]
 800fdac:	edc0 7a02 	vstr	s15, [r0, #8]
 800fdb0:	a901      	add	r1, sp, #4
 800fdb2:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800fdb6:	4604      	mov	r4, r0
 800fdb8:	4615      	mov	r5, r2
 800fdba:	461e      	mov	r6, r3
 800fdbc:	f7fe ffd0 	bl	800ed60 <m_q2dcm_eml>
 800fdc0:	f1b9 0f00 	cmp.w	r9, #0
 800fdc4:	f040 8088 	bne.w	800fed8 <output_update+0x15c>
 800fdc8:	9a08      	ldr	r2, [sp, #32]
 800fdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdcc:	9907      	ldr	r1, [sp, #28]
 800fdce:	6072      	str	r2, [r6, #4]
 800fdd0:	60b3      	str	r3, [r6, #8]
 800fdd2:	6031      	str	r1, [r6, #0]
 800fdd4:	ed94 0a03 	vldr	s0, [r4, #12]
 800fdd8:	ed94 aa00 	vldr	s20, [r4]
 800fddc:	edd4 aa02 	vldr	s21, [r4, #8]
 800fde0:	edd4 9a01 	vldr	s19, [r4, #4]
 800fde4:	ee20 9a00 	vmul.f32	s18, s0, s0
 800fde8:	ee2a 0a80 	vmul.f32	s0, s21, s0
 800fdec:	eef0 0a49 	vmov.f32	s1, s18
 800fdf0:	eeea 0a0a 	vfma.f32	s1, s20, s20
 800fdf4:	eeaa 0a29 	vfma.f32	s0, s20, s19
 800fdf8:	eee9 0ae9 	vfms.f32	s1, s19, s19
 800fdfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fe00:	eeea 0aea 	vfms.f32	s1, s21, s21
 800fe04:	f7ff ff38 	bl	800fc78 <m_rt_atan2f_snf>
 800fe08:	ed85 0a00 	vstr	s0, [r5]
 800fe0c:	ed94 7a01 	vldr	s14, [r4, #4]
 800fe10:	edd4 7a03 	vldr	s15, [r4, #12]
 800fe14:	ed94 6a00 	vldr	s12, [r4]
 800fe18:	edd4 6a02 	vldr	s13, [r4, #8]
 800fe1c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800fe20:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800fe24:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fe28:	eef0 8a40 	vmov.f32	s17, s0
 800fe2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe30:	eeb1 ba69 	vneg.f32	s22, s19
 800fe34:	ee17 0a90 	vmov	r0, s15
 800fe38:	f7f0 fb2a 	bl	8000490 <__aeabi_f2d>
 800fe3c:	ec41 0b10 	vmov	d0, r0, r1
 800fe40:	f009 fbcc 	bl	80195dc <asin>
 800fe44:	ec51 0b10 	vmov	r0, r1, d0
 800fe48:	f7f0 fe72 	bl	8000b30 <__aeabi_d2f>
 800fe4c:	eef0 0a49 	vmov.f32	s1, s18
 800fe50:	6068      	str	r0, [r5, #4]
 800fe52:	edd4 6a03 	vldr	s13, [r4, #12]
 800fe56:	ed94 0a00 	vldr	s0, [r4]
 800fe5a:	ed94 7a01 	vldr	s14, [r4, #4]
 800fe5e:	edd4 7a02 	vldr	s15, [r4, #8]
 800fe62:	eeea 0aaa 	vfma.f32	s1, s21, s21
 800fe66:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fe6a:	eeea 0a4a 	vfms.f32	s1, s20, s20
 800fe6e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800fe72:	eeeb 0a29 	vfma.f32	s1, s22, s19
 800fe76:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fe7a:	ee08 0a10 	vmov	s16, r0
 800fe7e:	f7ff fefb 	bl	800fc78 <m_rt_atan2f_snf>
 800fe82:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8010078 <output_update+0x2fc>
 800fe86:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800fe8a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fe8e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fe92:	edc5 8a00 	vstr	s17, [r5]
 800fe96:	ed85 8a01 	vstr	s16, [r5, #4]
 800fe9a:	ed85 0a02 	vstr	s0, [r5, #8]
 800fe9e:	ed97 7a00 	vldr	s14, [r7]
 800fea2:	edd6 7a00 	vldr	s15, [r6]
 800fea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800feaa:	edc8 7a00 	vstr	s15, [r8]
 800feae:	ed97 7a01 	vldr	s14, [r7, #4]
 800feb2:	edd6 7a01 	vldr	s15, [r6, #4]
 800feb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800feba:	edc8 7a01 	vstr	s15, [r8, #4]
 800febe:	edd6 7a02 	vldr	s15, [r6, #8]
 800fec2:	ed97 7a02 	vldr	s14, [r7, #8]
 800fec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800feca:	edc8 7a02 	vstr	s15, [r8, #8]
 800fece:	b00b      	add	sp, #44	; 0x2c
 800fed0:	ecbd 8b0a 	vpop	{d8-d12}
 800fed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fed8:	f1b9 0f01 	cmp.w	r9, #1
 800fedc:	d018      	beq.n	800ff10 <output_update+0x194>
 800fede:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8010078 <output_update+0x2fc>
 800fee2:	edd5 6a00 	vldr	s13, [r5]
 800fee6:	ed95 7a01 	vldr	s14, [r5, #4]
 800feea:	edd5 7a02 	vldr	s15, [r5, #8]
 800feee:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fef2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fef6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fefa:	edc5 6a00 	vstr	s13, [r5]
 800fefe:	ed85 7a01 	vstr	s14, [r5, #4]
 800ff02:	edc5 7a02 	vstr	s15, [r5, #8]
 800ff06:	b00b      	add	sp, #44	; 0x2c
 800ff08:	ecbd 8b0a 	vpop	{d8-d12}
 800ff0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff10:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800ff14:	9a08      	ldr	r2, [sp, #32]
 800ff16:	9b07      	ldr	r3, [sp, #28]
 800ff18:	6032      	str	r2, [r6, #0]
 800ff1a:	eef1 7a67 	vneg.f32	s15, s15
 800ff1e:	6073      	str	r3, [r6, #4]
 800ff20:	edc6 7a02 	vstr	s15, [r6, #8]
 800ff24:	edd4 7a02 	vldr	s15, [r4, #8]
 800ff28:	edd4 8a00 	vldr	s17, [r4]
 800ff2c:	ed94 9a01 	vldr	s18, [r4, #4]
 800ff30:	ed94 8a03 	vldr	s16, [r4, #12]
 800ff34:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ff38:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800ff3c:	eea8 7aa8 	vfma.f32	s14, s17, s17
 800ff40:	eef0 ca00 	vmov.f32	s25, #0	; 0x40000000  2.0
 800ff44:	eef0 6a4c 	vmov.f32	s13, s24
 800ff48:	eee7 6a6c 	vfms.f32	s13, s14, s25
 800ff4c:	ee68 9a89 	vmul.f32	s19, s17, s18
 800ff50:	ee16 0a90 	vmov	r0, s13
 800ff54:	eee7 9ac8 	vfms.f32	s19, s15, s16
 800ff58:	eef1 aa67 	vneg.f32	s21, s15
 800ff5c:	f7f0 fa98 	bl	8000490 <__aeabi_f2d>
 800ff60:	ee79 7aa9 	vadd.f32	s15, s19, s19
 800ff64:	4602      	mov	r2, r0
 800ff66:	460b      	mov	r3, r1
 800ff68:	ee17 0a90 	vmov	r0, s15
 800ff6c:	ec43 2b1b 	vmov	d11, r2, r3
 800ff70:	f7f0 fa8e 	bl	8000490 <__aeabi_f2d>
 800ff74:	eeb0 1a4b 	vmov.f32	s2, s22
 800ff78:	eef0 1a6b 	vmov.f32	s3, s23
 800ff7c:	ee69 9a09 	vmul.f32	s19, s18, s18
 800ff80:	ec41 0b10 	vmov	d0, r0, r1
 800ff84:	eee8 9aa8 	vfma.f32	s19, s17, s17
 800ff88:	f009 fb5c 	bl	8019644 <atan2>
 800ff8c:	eea9 caec 	vfms.f32	s24, s19, s25
 800ff90:	ec51 0b10 	vmov	r0, r1, d0
 800ff94:	ee29 aa08 	vmul.f32	s20, s18, s16
 800ff98:	f7f0 fdca 	bl	8000b30 <__aeabi_d2f>
 800ff9c:	eea8 aaaa 	vfma.f32	s20, s17, s21
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	ee1c 0a10 	vmov	r0, s24
 800ffa6:	ee09 3a90 	vmov	s19, r3
 800ffaa:	f7f0 fa71 	bl	8000490 <__aeabi_f2d>
 800ffae:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	ee17 0a90 	vmov	r0, s15
 800ffba:	ec43 2b1b 	vmov	d11, r2, r3
 800ffbe:	f7f0 fa67 	bl	8000490 <__aeabi_f2d>
 800ffc2:	eeb0 1a4b 	vmov.f32	s2, s22
 800ffc6:	eef0 1a6b 	vmov.f32	s3, s23
 800ffca:	ec41 0b10 	vmov	d0, r0, r1
 800ffce:	f009 fb39 	bl	8019644 <atan2>
 800ffd2:	ee28 8a68 	vnmul.f32	s16, s16, s17
 800ffd6:	ec51 0b10 	vmov	r0, r1, d0
 800ffda:	f7f0 fda9 	bl	8000b30 <__aeabi_d2f>
 800ffde:	eeaa 8a89 	vfma.f32	s16, s21, s18
 800ffe2:	ee07 0a90 	vmov	s15, r0
 800ffe6:	eef1 8a67 	vneg.f32	s17, s15
 800ffea:	ee78 7a08 	vadd.f32	s15, s16, s16
 800ffee:	eeb1 9a69 	vneg.f32	s18, s19
 800fff2:	ee17 0a90 	vmov	r0, s15
 800fff6:	f7f0 fa4b 	bl	8000490 <__aeabi_f2d>
 800fffa:	ec41 0b10 	vmov	d0, r0, r1
 800fffe:	f009 faed 	bl	80195dc <asin>
 8010002:	ec51 0b10 	vmov	r0, r1, d0
 8010006:	f7f0 fd93 	bl	8000b30 <__aeabi_d2f>
 801000a:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 801000e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010012:	bfc8      	it	gt
 8010014:	ed9f 9a19 	vldrgt	s18, [pc, #100]	; 801007c <output_update+0x300>
 8010018:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8010078 <output_update+0x2fc>
 801001c:	ee07 0a90 	vmov	s15, r0
 8010020:	bfc8      	it	gt
 8010022:	ee39 9a69 	vsubgt.f32	s18, s18, s19
 8010026:	ee68 8a87 	vmul.f32	s17, s17, s14
 801002a:	ee29 9a07 	vmul.f32	s18, s18, s14
 801002e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010032:	ed85 9a00 	vstr	s18, [r5]
 8010036:	edc5 8a01 	vstr	s17, [r5, #4]
 801003a:	edc5 7a02 	vstr	s15, [r5, #8]
 801003e:	ed97 7a01 	vldr	s14, [r7, #4]
 8010042:	edd6 7a00 	vldr	s15, [r6]
 8010046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801004a:	edc8 7a00 	vstr	s15, [r8]
 801004e:	ed97 7a00 	vldr	s14, [r7]
 8010052:	edd6 7a01 	vldr	s15, [r6, #4]
 8010056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801005a:	edc8 7a01 	vstr	s15, [r8, #4]
 801005e:	edd6 7a02 	vldr	s15, [r6, #8]
 8010062:	ed97 7a02 	vldr	s14, [r7, #8]
 8010066:	ee77 7a87 	vadd.f32	s15, s15, s14
 801006a:	edc8 7a02 	vstr	s15, [r8, #8]
 801006e:	b00b      	add	sp, #44	; 0x2c
 8010070:	ecbd 8b0a 	vpop	{d8-d12}
 8010074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010078:	42652ee1 	.word	0x42652ee1
 801007c:	40c90e56 	.word	0x40c90e56

08010080 <iNemo_setOrientation.constprop.0>:
 8010080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010084:	4a70      	ldr	r2, [pc, #448]	; (8010248 <iNemo_setOrientation.constprop.0+0x1c8>)
 8010086:	4b71      	ldr	r3, [pc, #452]	; (801024c <iNemo_setOrientation.constprop.0+0x1cc>)
 8010088:	f892 e000 	ldrb.w	lr, [r2]
 801008c:	7915      	ldrb	r5, [r2, #4]
 801008e:	7857      	ldrb	r7, [r2, #1]
 8010090:	7954      	ldrb	r4, [r2, #5]
 8010092:	f892 c009 	ldrb.w	ip, [r2, #9]
 8010096:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 801009a:	2100      	movs	r1, #0
 801009c:	2e17      	cmp	r6, #23
 801009e:	bf98      	it	ls
 80100a0:	f10e 0e20 	addls.w	lr, lr, #32
 80100a4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 80100a8:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
 80100ac:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 80100b0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 80100b4:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 80100b8:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 80100bc:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
 80100c0:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 80100c4:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
 80100c8:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 80100cc:	bf98      	it	ls
 80100ce:	fa5f fe8e 	uxtbls.w	lr, lr
 80100d2:	2917      	cmp	r1, #23
 80100d4:	7a11      	ldrb	r1, [r2, #8]
 80100d6:	7896      	ldrb	r6, [r2, #2]
 80100d8:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 80100dc:	bf9c      	itt	ls
 80100de:	3520      	addls	r5, #32
 80100e0:	b2ed      	uxtbls	r5, r5
 80100e2:	2817      	cmp	r0, #23
 80100e4:	bf98      	it	ls
 80100e6:	3120      	addls	r1, #32
 80100e8:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 80100ec:	bf98      	it	ls
 80100ee:	b2c9      	uxtbls	r1, r1
 80100f0:	2817      	cmp	r0, #23
 80100f2:	bf98      	it	ls
 80100f4:	3720      	addls	r7, #32
 80100f6:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 80100fa:	bf98      	it	ls
 80100fc:	b2ff      	uxtbls	r7, r7
 80100fe:	2817      	cmp	r0, #23
 8010100:	bf98      	it	ls
 8010102:	3420      	addls	r4, #32
 8010104:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 8010108:	bf98      	it	ls
 801010a:	b2e4      	uxtbls	r4, r4
 801010c:	2817      	cmp	r0, #23
 801010e:	bf98      	it	ls
 8010110:	f10c 0c20 	addls.w	ip, ip, #32
 8010114:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 8010118:	bf98      	it	ls
 801011a:	fa5f fc8c 	uxtbls.w	ip, ip
 801011e:	2817      	cmp	r0, #23
 8010120:	7990      	ldrb	r0, [r2, #6]
 8010122:	7a92      	ldrb	r2, [r2, #10]
 8010124:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 8010128:	bf9c      	itt	ls
 801012a:	3620      	addls	r6, #32
 801012c:	b2f6      	uxtbls	r6, r6
 801012e:	f1b8 0f17 	cmp.w	r8, #23
 8010132:	bf98      	it	ls
 8010134:	3020      	addls	r0, #32
 8010136:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 801013a:	bf98      	it	ls
 801013c:	b2c0      	uxtbls	r0, r0
 801013e:	f1b8 0f17 	cmp.w	r8, #23
 8010142:	bf98      	it	ls
 8010144:	3220      	addls	r2, #32
 8010146:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 801014a:	bf98      	it	ls
 801014c:	b2d2      	uxtbls	r2, r2
 801014e:	f1be 0f13 	cmp.w	lr, #19
 8010152:	d80f      	bhi.n	8010174 <iNemo_setOrientation.constprop.0+0xf4>
 8010154:	e8df f00e 	tbb	[pc, lr]
 8010158:	0e0eac0a 	.word	0x0e0eac0a
 801015c:	0e0e0e0e 	.word	0x0e0e0e0e
 8010160:	0eb10e0e 	.word	0x0eb10e0e
 8010164:	b60e0e0e 	.word	0xb60e0e0e
 8010168:	c00ebb0e 	.word	0xc00ebb0e
 801016c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8010170:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8010174:	3f64      	subs	r7, #100	; 0x64
 8010176:	2f13      	cmp	r7, #19
 8010178:	d80e      	bhi.n	8010198 <iNemo_setOrientation.constprop.0+0x118>
 801017a:	e8df f007 	tbb	[pc, r7]
 801017e:	b20a      	.short	0xb20a
 8010180:	0d0d0d0d 	.word	0x0d0d0d0d
 8010184:	0d0d0d0d 	.word	0x0d0d0d0d
 8010188:	0d0d0db6 	.word	0x0d0d0db6
 801018c:	be0dba0d 	.word	0xbe0dba0d
 8010190:	c20d      	.short	0xc20d
 8010192:	27ff      	movs	r7, #255	; 0xff
 8010194:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8010198:	3e64      	subs	r6, #100	; 0x64
 801019a:	2e13      	cmp	r6, #19
 801019c:	d80e      	bhi.n	80101bc <iNemo_setOrientation.constprop.0+0x13c>
 801019e:	e8df f006 	tbb	[pc, r6]
 80101a2:	b40a      	.short	0xb40a
 80101a4:	0d0d0d0d 	.word	0x0d0d0d0d
 80101a8:	0d0d0d0d 	.word	0x0d0d0d0d
 80101ac:	0d0d0db8 	.word	0x0d0d0db8
 80101b0:	c00dbc0d 	.word	0xc00dbc0d
 80101b4:	c40d      	.short	0xc40d
 80101b6:	26ff      	movs	r6, #255	; 0xff
 80101b8:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 80101bc:	3d64      	subs	r5, #100	; 0x64
 80101be:	2d13      	cmp	r5, #19
 80101c0:	d80e      	bhi.n	80101e0 <iNemo_setOrientation.constprop.0+0x160>
 80101c2:	e8df f005 	tbb	[pc, r5]
 80101c6:	b60a      	.short	0xb60a
 80101c8:	0d0d0d0d 	.word	0x0d0d0d0d
 80101cc:	0d0d0d0d 	.word	0x0d0d0d0d
 80101d0:	0d0d0dba 	.word	0x0d0d0dba
 80101d4:	c20dbe0d 	.word	0xc20dbe0d
 80101d8:	c60d      	.short	0xc60d
 80101da:	25ff      	movs	r5, #255	; 0xff
 80101dc:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 80101e0:	3c64      	subs	r4, #100	; 0x64
 80101e2:	2c13      	cmp	r4, #19
 80101e4:	d80e      	bhi.n	8010204 <iNemo_setOrientation.constprop.0+0x184>
 80101e6:	e8df f004 	tbb	[pc, r4]
 80101ea:	b80a      	.short	0xb80a
 80101ec:	0d0d0d0d 	.word	0x0d0d0d0d
 80101f0:	0d0d0d0d 	.word	0x0d0d0d0d
 80101f4:	0d0d0dbc 	.word	0x0d0d0dbc
 80101f8:	c40dc00d 	.word	0xc40dc00d
 80101fc:	c80d      	.short	0xc80d
 80101fe:	24ff      	movs	r4, #255	; 0xff
 8010200:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8010204:	3864      	subs	r0, #100	; 0x64
 8010206:	2813      	cmp	r0, #19
 8010208:	d80e      	bhi.n	8010228 <iNemo_setOrientation.constprop.0+0x1a8>
 801020a:	e8df f000 	tbb	[pc, r0]
 801020e:	ba0a      	.short	0xba0a
 8010210:	0d0d0d0d 	.word	0x0d0d0d0d
 8010214:	0d0d0d0d 	.word	0x0d0d0d0d
 8010218:	0d0d0dbe 	.word	0x0d0d0dbe
 801021c:	c60dc20d 	.word	0xc60dc20d
 8010220:	ca0d      	.short	0xca0d
 8010222:	20ff      	movs	r0, #255	; 0xff
 8010224:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8010228:	3964      	subs	r1, #100	; 0x64
 801022a:	2913      	cmp	r1, #19
 801022c:	d813      	bhi.n	8010256 <iNemo_setOrientation.constprop.0+0x1d6>
 801022e:	e8df f001 	tbb	[pc, r1]
 8010232:	bc0f      	.short	0xbc0f
 8010234:	12121212 	.word	0x12121212
 8010238:	12121212 	.word	0x12121212
 801023c:	121212c0 	.word	0x121212c0
 8010240:	c812c412 	.word	0xc812c412
 8010244:	cc12      	.short	0xcc12
 8010246:	bf00      	nop
 8010248:	20000000 	.word	0x20000000
 801024c:	200013d8 	.word	0x200013d8
 8010250:	21ff      	movs	r1, #255	; 0xff
 8010252:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8010256:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 801025a:	f1bc 0f13 	cmp.w	ip, #19
 801025e:	d80e      	bhi.n	801027e <iNemo_setOrientation.constprop.0+0x1fe>
 8010260:	e8df f00c 	tbb	[pc, ip]
 8010264:	0d0db70a 	.word	0x0d0db70a
 8010268:	0d0d0d0d 	.word	0x0d0d0d0d
 801026c:	0dbb0d0d 	.word	0x0dbb0d0d
 8010270:	bf0d0d0d 	.word	0xbf0d0d0d
 8010274:	c70dc30d 	.word	0xc70dc30d
 8010278:	21ff      	movs	r1, #255	; 0xff
 801027a:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 801027e:	3a64      	subs	r2, #100	; 0x64
 8010280:	2a13      	cmp	r2, #19
 8010282:	d80e      	bhi.n	80102a2 <iNemo_setOrientation.constprop.0+0x222>
 8010284:	e8df f002 	tbb	[pc, r2]
 8010288:	0d0db90a 	.word	0x0d0db90a
 801028c:	0d0d0d0d 	.word	0x0d0d0d0d
 8010290:	0dbe0d0d 	.word	0x0dbe0d0d
 8010294:	c30d0d0d 	.word	0xc30d0d0d
 8010298:	0f0dc80d 	.word	0x0f0dc80d
 801029c:	22ff      	movs	r2, #255	; 0xff
 801029e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80102a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a6:	22ff      	movs	r2, #255	; 0xff
 80102a8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 80102ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b0:	f04f 0e01 	mov.w	lr, #1
 80102b4:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 80102b8:	e75c      	b.n	8010174 <iNemo_setOrientation.constprop.0+0xf4>
 80102ba:	f04f 0e01 	mov.w	lr, #1
 80102be:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 80102c2:	e757      	b.n	8010174 <iNemo_setOrientation.constprop.0+0xf4>
 80102c4:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80102c8:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 80102cc:	e752      	b.n	8010174 <iNemo_setOrientation.constprop.0+0xf4>
 80102ce:	f04f 0e01 	mov.w	lr, #1
 80102d2:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 80102d6:	e74d      	b.n	8010174 <iNemo_setOrientation.constprop.0+0xf4>
 80102d8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80102dc:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 80102e0:	e748      	b.n	8010174 <iNemo_setOrientation.constprop.0+0xf4>
 80102e2:	2701      	movs	r7, #1
 80102e4:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 80102e8:	e756      	b.n	8010198 <iNemo_setOrientation.constprop.0+0x118>
 80102ea:	2701      	movs	r7, #1
 80102ec:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 80102f0:	e752      	b.n	8010198 <iNemo_setOrientation.constprop.0+0x118>
 80102f2:	27ff      	movs	r7, #255	; 0xff
 80102f4:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 80102f8:	e74e      	b.n	8010198 <iNemo_setOrientation.constprop.0+0x118>
 80102fa:	2701      	movs	r7, #1
 80102fc:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8010300:	e74a      	b.n	8010198 <iNemo_setOrientation.constprop.0+0x118>
 8010302:	27ff      	movs	r7, #255	; 0xff
 8010304:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8010308:	e746      	b.n	8010198 <iNemo_setOrientation.constprop.0+0x118>
 801030a:	2601      	movs	r6, #1
 801030c:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8010310:	e754      	b.n	80101bc <iNemo_setOrientation.constprop.0+0x13c>
 8010312:	2601      	movs	r6, #1
 8010314:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8010318:	e750      	b.n	80101bc <iNemo_setOrientation.constprop.0+0x13c>
 801031a:	26ff      	movs	r6, #255	; 0xff
 801031c:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8010320:	e74c      	b.n	80101bc <iNemo_setOrientation.constprop.0+0x13c>
 8010322:	2601      	movs	r6, #1
 8010324:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8010328:	e748      	b.n	80101bc <iNemo_setOrientation.constprop.0+0x13c>
 801032a:	26ff      	movs	r6, #255	; 0xff
 801032c:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8010330:	e744      	b.n	80101bc <iNemo_setOrientation.constprop.0+0x13c>
 8010332:	2501      	movs	r5, #1
 8010334:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8010338:	e752      	b.n	80101e0 <iNemo_setOrientation.constprop.0+0x160>
 801033a:	2501      	movs	r5, #1
 801033c:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8010340:	e74e      	b.n	80101e0 <iNemo_setOrientation.constprop.0+0x160>
 8010342:	25ff      	movs	r5, #255	; 0xff
 8010344:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8010348:	e74a      	b.n	80101e0 <iNemo_setOrientation.constprop.0+0x160>
 801034a:	2501      	movs	r5, #1
 801034c:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8010350:	e746      	b.n	80101e0 <iNemo_setOrientation.constprop.0+0x160>
 8010352:	25ff      	movs	r5, #255	; 0xff
 8010354:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8010358:	e742      	b.n	80101e0 <iNemo_setOrientation.constprop.0+0x160>
 801035a:	2401      	movs	r4, #1
 801035c:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8010360:	e750      	b.n	8010204 <iNemo_setOrientation.constprop.0+0x184>
 8010362:	2401      	movs	r4, #1
 8010364:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8010368:	e74c      	b.n	8010204 <iNemo_setOrientation.constprop.0+0x184>
 801036a:	24ff      	movs	r4, #255	; 0xff
 801036c:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8010370:	e748      	b.n	8010204 <iNemo_setOrientation.constprop.0+0x184>
 8010372:	2401      	movs	r4, #1
 8010374:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8010378:	e744      	b.n	8010204 <iNemo_setOrientation.constprop.0+0x184>
 801037a:	24ff      	movs	r4, #255	; 0xff
 801037c:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8010380:	e740      	b.n	8010204 <iNemo_setOrientation.constprop.0+0x184>
 8010382:	2001      	movs	r0, #1
 8010384:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8010388:	e74e      	b.n	8010228 <iNemo_setOrientation.constprop.0+0x1a8>
 801038a:	2001      	movs	r0, #1
 801038c:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8010390:	e74a      	b.n	8010228 <iNemo_setOrientation.constprop.0+0x1a8>
 8010392:	20ff      	movs	r0, #255	; 0xff
 8010394:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8010398:	e746      	b.n	8010228 <iNemo_setOrientation.constprop.0+0x1a8>
 801039a:	2001      	movs	r0, #1
 801039c:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 80103a0:	e742      	b.n	8010228 <iNemo_setOrientation.constprop.0+0x1a8>
 80103a2:	20ff      	movs	r0, #255	; 0xff
 80103a4:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 80103a8:	e73e      	b.n	8010228 <iNemo_setOrientation.constprop.0+0x1a8>
 80103aa:	2101      	movs	r1, #1
 80103ac:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 80103b0:	e751      	b.n	8010256 <iNemo_setOrientation.constprop.0+0x1d6>
 80103b2:	2101      	movs	r1, #1
 80103b4:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 80103b8:	e74d      	b.n	8010256 <iNemo_setOrientation.constprop.0+0x1d6>
 80103ba:	21ff      	movs	r1, #255	; 0xff
 80103bc:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 80103c0:	e749      	b.n	8010256 <iNemo_setOrientation.constprop.0+0x1d6>
 80103c2:	2101      	movs	r1, #1
 80103c4:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 80103c8:	e745      	b.n	8010256 <iNemo_setOrientation.constprop.0+0x1d6>
 80103ca:	21ff      	movs	r1, #255	; 0xff
 80103cc:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 80103d0:	e741      	b.n	8010256 <iNemo_setOrientation.constprop.0+0x1d6>
 80103d2:	2101      	movs	r1, #1
 80103d4:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 80103d8:	e751      	b.n	801027e <iNemo_setOrientation.constprop.0+0x1fe>
 80103da:	2101      	movs	r1, #1
 80103dc:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 80103e0:	e74d      	b.n	801027e <iNemo_setOrientation.constprop.0+0x1fe>
 80103e2:	21ff      	movs	r1, #255	; 0xff
 80103e4:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 80103e8:	e749      	b.n	801027e <iNemo_setOrientation.constprop.0+0x1fe>
 80103ea:	2101      	movs	r1, #1
 80103ec:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 80103f0:	e745      	b.n	801027e <iNemo_setOrientation.constprop.0+0x1fe>
 80103f2:	21ff      	movs	r1, #255	; 0xff
 80103f4:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 80103f8:	e741      	b.n	801027e <iNemo_setOrientation.constprop.0+0x1fe>
 80103fa:	2201      	movs	r2, #1
 80103fc:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8010400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010404:	2201      	movs	r2, #1
 8010406:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 801040a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801040e:	22ff      	movs	r2, #255	; 0xff
 8010410:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8010414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010418:	2201      	movs	r2, #1
 801041a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 801041e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010422:	bf00      	nop

08010424 <iNemo_setOrientation_6X.constprop.0>:
 8010424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010428:	4a70      	ldr	r2, [pc, #448]	; (80105ec <iNemo_setOrientation_6X.constprop.0+0x1c8>)
 801042a:	4b71      	ldr	r3, [pc, #452]	; (80105f0 <iNemo_setOrientation_6X.constprop.0+0x1cc>)
 801042c:	f892 e000 	ldrb.w	lr, [r2]
 8010430:	7915      	ldrb	r5, [r2, #4]
 8010432:	7857      	ldrb	r7, [r2, #1]
 8010434:	7954      	ldrb	r4, [r2, #5]
 8010436:	f892 c009 	ldrb.w	ip, [r2, #9]
 801043a:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 801043e:	2100      	movs	r1, #0
 8010440:	2e17      	cmp	r6, #23
 8010442:	bf98      	it	ls
 8010444:	f10e 0e20 	addls.w	lr, lr, #32
 8010448:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 801044c:	f883 10d0 	strb.w	r1, [r3, #208]	; 0xd0
 8010450:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8010454:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 8010458:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 801045c:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 8010460:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
 8010464:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8010468:	f883 10e8 	strb.w	r1, [r3, #232]	; 0xe8
 801046c:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 8010470:	bf98      	it	ls
 8010472:	fa5f fe8e 	uxtbls.w	lr, lr
 8010476:	2917      	cmp	r1, #23
 8010478:	7a11      	ldrb	r1, [r2, #8]
 801047a:	7896      	ldrb	r6, [r2, #2]
 801047c:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 8010480:	bf9c      	itt	ls
 8010482:	3520      	addls	r5, #32
 8010484:	b2ed      	uxtbls	r5, r5
 8010486:	2817      	cmp	r0, #23
 8010488:	bf98      	it	ls
 801048a:	3120      	addls	r1, #32
 801048c:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8010490:	bf98      	it	ls
 8010492:	b2c9      	uxtbls	r1, r1
 8010494:	2817      	cmp	r0, #23
 8010496:	bf98      	it	ls
 8010498:	3720      	addls	r7, #32
 801049a:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 801049e:	bf98      	it	ls
 80104a0:	b2ff      	uxtbls	r7, r7
 80104a2:	2817      	cmp	r0, #23
 80104a4:	bf98      	it	ls
 80104a6:	3420      	addls	r4, #32
 80104a8:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 80104ac:	bf98      	it	ls
 80104ae:	b2e4      	uxtbls	r4, r4
 80104b0:	2817      	cmp	r0, #23
 80104b2:	bf98      	it	ls
 80104b4:	f10c 0c20 	addls.w	ip, ip, #32
 80104b8:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 80104bc:	bf98      	it	ls
 80104be:	fa5f fc8c 	uxtbls.w	ip, ip
 80104c2:	2817      	cmp	r0, #23
 80104c4:	7990      	ldrb	r0, [r2, #6]
 80104c6:	7a92      	ldrb	r2, [r2, #10]
 80104c8:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 80104cc:	bf9c      	itt	ls
 80104ce:	3620      	addls	r6, #32
 80104d0:	b2f6      	uxtbls	r6, r6
 80104d2:	f1b8 0f17 	cmp.w	r8, #23
 80104d6:	bf98      	it	ls
 80104d8:	3020      	addls	r0, #32
 80104da:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 80104de:	bf98      	it	ls
 80104e0:	b2c0      	uxtbls	r0, r0
 80104e2:	f1b8 0f17 	cmp.w	r8, #23
 80104e6:	bf98      	it	ls
 80104e8:	3220      	addls	r2, #32
 80104ea:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 80104ee:	bf98      	it	ls
 80104f0:	b2d2      	uxtbls	r2, r2
 80104f2:	f1be 0f13 	cmp.w	lr, #19
 80104f6:	d80f      	bhi.n	8010518 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80104f8:	e8df f00e 	tbb	[pc, lr]
 80104fc:	0e0eac0a 	.word	0x0e0eac0a
 8010500:	0e0e0e0e 	.word	0x0e0e0e0e
 8010504:	0eb10e0e 	.word	0x0eb10e0e
 8010508:	b60e0e0e 	.word	0xb60e0e0e
 801050c:	c00ebb0e 	.word	0xc00ebb0e
 8010510:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8010514:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 8010518:	3f64      	subs	r7, #100	; 0x64
 801051a:	2f13      	cmp	r7, #19
 801051c:	d80e      	bhi.n	801053c <iNemo_setOrientation_6X.constprop.0+0x118>
 801051e:	e8df f007 	tbb	[pc, r7]
 8010522:	b20a      	.short	0xb20a
 8010524:	0d0d0d0d 	.word	0x0d0d0d0d
 8010528:	0d0d0d0d 	.word	0x0d0d0d0d
 801052c:	0d0d0db6 	.word	0x0d0d0db6
 8010530:	be0dba0d 	.word	0xbe0dba0d
 8010534:	c20d      	.short	0xc20d
 8010536:	27ff      	movs	r7, #255	; 0xff
 8010538:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 801053c:	3e64      	subs	r6, #100	; 0x64
 801053e:	2e13      	cmp	r6, #19
 8010540:	d80e      	bhi.n	8010560 <iNemo_setOrientation_6X.constprop.0+0x13c>
 8010542:	e8df f006 	tbb	[pc, r6]
 8010546:	b40a      	.short	0xb40a
 8010548:	0d0d0d0d 	.word	0x0d0d0d0d
 801054c:	0d0d0d0d 	.word	0x0d0d0d0d
 8010550:	0d0d0db8 	.word	0x0d0d0db8
 8010554:	c00dbc0d 	.word	0xc00dbc0d
 8010558:	c40d      	.short	0xc40d
 801055a:	26ff      	movs	r6, #255	; 0xff
 801055c:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 8010560:	3d64      	subs	r5, #100	; 0x64
 8010562:	2d13      	cmp	r5, #19
 8010564:	d80e      	bhi.n	8010584 <iNemo_setOrientation_6X.constprop.0+0x160>
 8010566:	e8df f005 	tbb	[pc, r5]
 801056a:	b60a      	.short	0xb60a
 801056c:	0d0d0d0d 	.word	0x0d0d0d0d
 8010570:	0d0d0d0d 	.word	0x0d0d0d0d
 8010574:	0d0d0dba 	.word	0x0d0d0dba
 8010578:	c20dbe0d 	.word	0xc20dbe0d
 801057c:	c60d      	.short	0xc60d
 801057e:	25ff      	movs	r5, #255	; 0xff
 8010580:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 8010584:	3c64      	subs	r4, #100	; 0x64
 8010586:	2c13      	cmp	r4, #19
 8010588:	d80e      	bhi.n	80105a8 <iNemo_setOrientation_6X.constprop.0+0x184>
 801058a:	e8df f004 	tbb	[pc, r4]
 801058e:	b80a      	.short	0xb80a
 8010590:	0d0d0d0d 	.word	0x0d0d0d0d
 8010594:	0d0d0d0d 	.word	0x0d0d0d0d
 8010598:	0d0d0dbc 	.word	0x0d0d0dbc
 801059c:	c40dc00d 	.word	0xc40dc00d
 80105a0:	c80d      	.short	0xc80d
 80105a2:	24ff      	movs	r4, #255	; 0xff
 80105a4:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 80105a8:	3864      	subs	r0, #100	; 0x64
 80105aa:	2813      	cmp	r0, #19
 80105ac:	d80e      	bhi.n	80105cc <iNemo_setOrientation_6X.constprop.0+0x1a8>
 80105ae:	e8df f000 	tbb	[pc, r0]
 80105b2:	ba0a      	.short	0xba0a
 80105b4:	0d0d0d0d 	.word	0x0d0d0d0d
 80105b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80105bc:	0d0d0dbe 	.word	0x0d0d0dbe
 80105c0:	c60dc20d 	.word	0xc60dc20d
 80105c4:	ca0d      	.short	0xca0d
 80105c6:	20ff      	movs	r0, #255	; 0xff
 80105c8:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 80105cc:	3964      	subs	r1, #100	; 0x64
 80105ce:	2913      	cmp	r1, #19
 80105d0:	d813      	bhi.n	80105fa <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80105d2:	e8df f001 	tbb	[pc, r1]
 80105d6:	bc0f      	.short	0xbc0f
 80105d8:	12121212 	.word	0x12121212
 80105dc:	12121212 	.word	0x12121212
 80105e0:	121212c0 	.word	0x121212c0
 80105e4:	c812c412 	.word	0xc812c412
 80105e8:	cc12      	.short	0xcc12
 80105ea:	bf00      	nop
 80105ec:	20000000 	.word	0x20000000
 80105f0:	200013d8 	.word	0x200013d8
 80105f4:	21ff      	movs	r1, #255	; 0xff
 80105f6:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 80105fa:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 80105fe:	f1bc 0f13 	cmp.w	ip, #19
 8010602:	d80e      	bhi.n	8010622 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8010604:	e8df f00c 	tbb	[pc, ip]
 8010608:	0d0db70a 	.word	0x0d0db70a
 801060c:	0d0d0d0d 	.word	0x0d0d0d0d
 8010610:	0dbb0d0d 	.word	0x0dbb0d0d
 8010614:	bf0d0d0d 	.word	0xbf0d0d0d
 8010618:	c70dc30d 	.word	0xc70dc30d
 801061c:	21ff      	movs	r1, #255	; 0xff
 801061e:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 8010622:	3a64      	subs	r2, #100	; 0x64
 8010624:	2a13      	cmp	r2, #19
 8010626:	d80e      	bhi.n	8010646 <iNemo_setOrientation_6X.constprop.0+0x222>
 8010628:	e8df f002 	tbb	[pc, r2]
 801062c:	0d0db90a 	.word	0x0d0db90a
 8010630:	0d0d0d0d 	.word	0x0d0d0d0d
 8010634:	0dbe0d0d 	.word	0x0dbe0d0d
 8010638:	c30d0d0d 	.word	0xc30d0d0d
 801063c:	0f0dc80d 	.word	0x0f0dc80d
 8010640:	22ff      	movs	r2, #255	; 0xff
 8010642:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8010646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801064a:	22ff      	movs	r2, #255	; 0xff
 801064c:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8010650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010654:	f04f 0e01 	mov.w	lr, #1
 8010658:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 801065c:	e75c      	b.n	8010518 <iNemo_setOrientation_6X.constprop.0+0xf4>
 801065e:	f04f 0e01 	mov.w	lr, #1
 8010662:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 8010666:	e757      	b.n	8010518 <iNemo_setOrientation_6X.constprop.0+0xf4>
 8010668:	f04f 0eff 	mov.w	lr, #255	; 0xff
 801066c:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 8010670:	e752      	b.n	8010518 <iNemo_setOrientation_6X.constprop.0+0xf4>
 8010672:	f04f 0e01 	mov.w	lr, #1
 8010676:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 801067a:	e74d      	b.n	8010518 <iNemo_setOrientation_6X.constprop.0+0xf4>
 801067c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8010680:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 8010684:	e748      	b.n	8010518 <iNemo_setOrientation_6X.constprop.0+0xf4>
 8010686:	2701      	movs	r7, #1
 8010688:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 801068c:	e756      	b.n	801053c <iNemo_setOrientation_6X.constprop.0+0x118>
 801068e:	2701      	movs	r7, #1
 8010690:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 8010694:	e752      	b.n	801053c <iNemo_setOrientation_6X.constprop.0+0x118>
 8010696:	27ff      	movs	r7, #255	; 0xff
 8010698:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 801069c:	e74e      	b.n	801053c <iNemo_setOrientation_6X.constprop.0+0x118>
 801069e:	2701      	movs	r7, #1
 80106a0:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 80106a4:	e74a      	b.n	801053c <iNemo_setOrientation_6X.constprop.0+0x118>
 80106a6:	27ff      	movs	r7, #255	; 0xff
 80106a8:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 80106ac:	e746      	b.n	801053c <iNemo_setOrientation_6X.constprop.0+0x118>
 80106ae:	2601      	movs	r6, #1
 80106b0:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 80106b4:	e754      	b.n	8010560 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80106b6:	2601      	movs	r6, #1
 80106b8:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 80106bc:	e750      	b.n	8010560 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80106be:	26ff      	movs	r6, #255	; 0xff
 80106c0:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 80106c4:	e74c      	b.n	8010560 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80106c6:	2601      	movs	r6, #1
 80106c8:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 80106cc:	e748      	b.n	8010560 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80106ce:	26ff      	movs	r6, #255	; 0xff
 80106d0:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 80106d4:	e744      	b.n	8010560 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80106d6:	2501      	movs	r5, #1
 80106d8:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 80106dc:	e752      	b.n	8010584 <iNemo_setOrientation_6X.constprop.0+0x160>
 80106de:	2501      	movs	r5, #1
 80106e0:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 80106e4:	e74e      	b.n	8010584 <iNemo_setOrientation_6X.constprop.0+0x160>
 80106e6:	25ff      	movs	r5, #255	; 0xff
 80106e8:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 80106ec:	e74a      	b.n	8010584 <iNemo_setOrientation_6X.constprop.0+0x160>
 80106ee:	2501      	movs	r5, #1
 80106f0:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 80106f4:	e746      	b.n	8010584 <iNemo_setOrientation_6X.constprop.0+0x160>
 80106f6:	25ff      	movs	r5, #255	; 0xff
 80106f8:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 80106fc:	e742      	b.n	8010584 <iNemo_setOrientation_6X.constprop.0+0x160>
 80106fe:	2401      	movs	r4, #1
 8010700:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 8010704:	e750      	b.n	80105a8 <iNemo_setOrientation_6X.constprop.0+0x184>
 8010706:	2401      	movs	r4, #1
 8010708:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 801070c:	e74c      	b.n	80105a8 <iNemo_setOrientation_6X.constprop.0+0x184>
 801070e:	24ff      	movs	r4, #255	; 0xff
 8010710:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 8010714:	e748      	b.n	80105a8 <iNemo_setOrientation_6X.constprop.0+0x184>
 8010716:	2401      	movs	r4, #1
 8010718:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 801071c:	e744      	b.n	80105a8 <iNemo_setOrientation_6X.constprop.0+0x184>
 801071e:	24ff      	movs	r4, #255	; 0xff
 8010720:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 8010724:	e740      	b.n	80105a8 <iNemo_setOrientation_6X.constprop.0+0x184>
 8010726:	2001      	movs	r0, #1
 8010728:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 801072c:	e74e      	b.n	80105cc <iNemo_setOrientation_6X.constprop.0+0x1a8>
 801072e:	2001      	movs	r0, #1
 8010730:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 8010734:	e74a      	b.n	80105cc <iNemo_setOrientation_6X.constprop.0+0x1a8>
 8010736:	20ff      	movs	r0, #255	; 0xff
 8010738:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 801073c:	e746      	b.n	80105cc <iNemo_setOrientation_6X.constprop.0+0x1a8>
 801073e:	2001      	movs	r0, #1
 8010740:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 8010744:	e742      	b.n	80105cc <iNemo_setOrientation_6X.constprop.0+0x1a8>
 8010746:	20ff      	movs	r0, #255	; 0xff
 8010748:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 801074c:	e73e      	b.n	80105cc <iNemo_setOrientation_6X.constprop.0+0x1a8>
 801074e:	2101      	movs	r1, #1
 8010750:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 8010754:	e751      	b.n	80105fa <iNemo_setOrientation_6X.constprop.0+0x1d6>
 8010756:	2101      	movs	r1, #1
 8010758:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 801075c:	e74d      	b.n	80105fa <iNemo_setOrientation_6X.constprop.0+0x1d6>
 801075e:	21ff      	movs	r1, #255	; 0xff
 8010760:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 8010764:	e749      	b.n	80105fa <iNemo_setOrientation_6X.constprop.0+0x1d6>
 8010766:	2101      	movs	r1, #1
 8010768:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 801076c:	e745      	b.n	80105fa <iNemo_setOrientation_6X.constprop.0+0x1d6>
 801076e:	21ff      	movs	r1, #255	; 0xff
 8010770:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 8010774:	e741      	b.n	80105fa <iNemo_setOrientation_6X.constprop.0+0x1d6>
 8010776:	2101      	movs	r1, #1
 8010778:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 801077c:	e751      	b.n	8010622 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 801077e:	2101      	movs	r1, #1
 8010780:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 8010784:	e74d      	b.n	8010622 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8010786:	21ff      	movs	r1, #255	; 0xff
 8010788:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 801078c:	e749      	b.n	8010622 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 801078e:	2101      	movs	r1, #1
 8010790:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 8010794:	e745      	b.n	8010622 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8010796:	21ff      	movs	r1, #255	; 0xff
 8010798:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 801079c:	e741      	b.n	8010622 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 801079e:	2201      	movs	r2, #1
 80107a0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80107a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a8:	2201      	movs	r2, #1
 80107aa:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 80107ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107b2:	22ff      	movs	r2, #255	; 0xff
 80107b4:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 80107b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107bc:	2201      	movs	r2, #1
 80107be:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80107c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107c6:	bf00      	nop

080107c8 <MotionDI_setKnobs.part.0>:
 80107c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ca:	e9d0 160b 	ldrd	r1, r6, [r0, #44]	; 0x2c
 80107ce:	b091      	sub	sp, #68	; 0x44
 80107d0:	4b3c      	ldr	r3, [pc, #240]	; (80108c4 <MotionDI_setKnobs.part.0+0xfc>)
 80107d2:	f8cd 6031 	str.w	r6, [sp, #49]	; 0x31
 80107d6:	461a      	mov	r2, r3
 80107d8:	4604      	mov	r4, r0
 80107da:	f8cd 102d 	str.w	r1, [sp, #45]	; 0x2d
 80107de:	f8bd 7031 	ldrh.w	r7, [sp, #49]	; 0x31
 80107e2:	4d39      	ldr	r5, [pc, #228]	; (80108c8 <MotionDI_setKnobs.part.0+0x100>)
 80107e4:	f832 0f08 	ldrh.w	r0, [r2, #8]!
 80107e8:	809f      	strh	r7, [r3, #4]
 80107ea:	f8bd 702d 	ldrh.w	r7, [sp, #45]	; 0x2d
 80107ee:	6a26      	ldr	r6, [r4, #32]
 80107f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80107f2:	801f      	strh	r7, [r3, #0]
 80107f4:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
 80107f8:	709f      	strb	r7, [r3, #2]
 80107fa:	f8d5 e0f0 	ldr.w	lr, [r5, #240]	; 0xf0
 80107fe:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8010802:	f8ad 0035 	strh.w	r0, [sp, #53]	; 0x35
 8010806:	f8c5 6128 	str.w	r6, [r5, #296]	; 0x128
 801080a:	7890      	ldrb	r0, [r2, #2]
 801080c:	f8c5 60ec 	str.w	r6, [r5, #236]	; 0xec
 8010810:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
 8010814:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
 8010818:	f8c5 10f8 	str.w	r1, [r5, #248]	; 0xf8
 801081c:	2100      	movs	r1, #0
 801081e:	f89d c033 	ldrb.w	ip, [sp, #51]	; 0x33
 8010822:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8010826:	f8c5 e12c 	str.w	lr, [r5, #300]	; 0x12c
 801082a:	f885 113d 	strb.w	r1, [r5, #317]	; 0x13d
 801082e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 8010832:	f885 7161 	strb.w	r7, [r5, #353]	; 0x161
 8010836:	f885 6162 	strb.w	r6, [r5, #354]	; 0x162
 801083a:	f885 7125 	strb.w	r7, [r5, #293]	; 0x125
 801083e:	f885 6126 	strb.w	r6, [r5, #294]	; 0x126
 8010842:	f885 1101 	strb.w	r1, [r5, #257]	; 0x101
 8010846:	f8bd 1035 	ldrh.w	r1, [sp, #53]	; 0x35
 801084a:	8119      	strh	r1, [r3, #8]
 801084c:	f883 c006 	strb.w	ip, [r3, #6]
 8010850:	7090      	strb	r0, [r2, #2]
 8010852:	f7ff fc15 	bl	8010080 <iNemo_setOrientation.constprop.0>
 8010856:	f7ff fde5 	bl	8010424 <iNemo_setOrientation_6X.constprop.0>
 801085a:	4a1c      	ldr	r2, [pc, #112]	; (80108cc <MotionDI_setKnobs.part.0+0x104>)
 801085c:	f8d2 3464 	ldr.w	r3, [r2, #1124]	; 0x464
 8010860:	1e59      	subs	r1, r3, #1
 8010862:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8010866:	d211      	bcs.n	801088c <MotionDI_setKnobs.part.0+0xc4>
 8010868:	3b0a      	subs	r3, #10
 801086a:	b29b      	uxth	r3, r3
 801086c:	2b5a      	cmp	r3, #90	; 0x5a
 801086e:	bf8c      	ite	hi
 8010870:	2300      	movhi	r3, #0
 8010872:	2301      	movls	r3, #1
 8010874:	6821      	ldr	r1, [r4, #0]
 8010876:	7013      	strb	r3, [r2, #0]
 8010878:	f502 638d 	add.w	r3, r2, #1128	; 0x468
 801087c:	4814      	ldr	r0, [pc, #80]	; (80108d0 <MotionDI_setKnobs.part.0+0x108>)
 801087e:	6019      	str	r1, [r3, #0]
 8010880:	f502 618c 	add.w	r1, r2, #1120	; 0x460
 8010884:	2301      	movs	r3, #1
 8010886:	6008      	str	r0, [r1, #0]
 8010888:	f882 346c 	strb.w	r3, [r2, #1132]	; 0x46c
 801088c:	68e3      	ldr	r3, [r4, #12]
 801088e:	6920      	ldr	r0, [r4, #16]
 8010890:	6961      	ldr	r1, [r4, #20]
 8010892:	69a2      	ldr	r2, [r4, #24]
 8010894:	606b      	str	r3, [r5, #4]
 8010896:	4e0f      	ldr	r6, [pc, #60]	; (80108d4 <MotionDI_setKnobs.part.0+0x10c>)
 8010898:	68a3      	ldr	r3, [r4, #8]
 801089a:	6168      	str	r0, [r5, #20]
 801089c:	60a9      	str	r1, [r5, #8]
 801089e:	60ea      	str	r2, [r5, #12]
 80108a0:	602b      	str	r3, [r5, #0]
 80108a2:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80108a6:	6820      	ldr	r0, [r4, #0]
 80108a8:	6861      	ldr	r1, [r4, #4]
 80108aa:	68a2      	ldr	r2, [r4, #8]
 80108ac:	68e3      	ldr	r3, [r4, #12]
 80108ae:	4635      	mov	r5, r6
 80108b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80108b2:	3410      	adds	r4, #16
 80108b4:	42bc      	cmp	r4, r7
 80108b6:	462e      	mov	r6, r5
 80108b8:	d1f5      	bne.n	80108a6 <MotionDI_setKnobs.part.0+0xde>
 80108ba:	6820      	ldr	r0, [r4, #0]
 80108bc:	6028      	str	r0, [r5, #0]
 80108be:	b011      	add	sp, #68	; 0x44
 80108c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108c2:	bf00      	nop
 80108c4:	20000000 	.word	0x20000000
 80108c8:	200013d8 	.word	0x200013d8
 80108cc:	200020a8 	.word	0x200020a8
 80108d0:	3a83126f 	.word	0x3a83126f
 80108d4:	2000153c 	.word	0x2000153c

080108d8 <getAccStats.constprop.0>:
 80108d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80108dc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80108e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e4:	2400      	movs	r4, #0
 80108e6:	6014      	str	r4, [r2, #0]
 80108e8:	601c      	str	r4, [r3, #0]
 80108ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80108ec:	4f68      	ldr	r7, [pc, #416]	; (8010a90 <getAccStats.constprop.0+0x1b8>)
 80108ee:	2500      	movs	r5, #0
 80108f0:	7025      	strb	r5, [r4, #0]
 80108f2:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 80108f6:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
 80108fa:	ed9f 4a66 	vldr	s8, [pc, #408]	; 8010a94 <getAccStats.constprop.0+0x1bc>
 80108fe:	f9b7 5058 	ldrsh.w	r5, [r7, #88]	; 0x58
 8010902:	45a4      	cmp	ip, r4
 8010904:	ee23 4a84 	vmul.f32	s8, s7, s8
 8010908:	f105 0501 	add.w	r5, r5, #1
 801090c:	f000 80b2 	beq.w	8010a74 <getAccStats.constprop.0+0x19c>
 8010910:	eba5 050c 	sub.w	r5, r5, ip
 8010914:	fb95 faf4 	sdiv	sl, r5, r4
 8010918:	fb04 551a 	mls	r5, r4, sl, r5
 801091c:	fa0f fa85 	sxth.w	sl, r5
 8010920:	f1ba 0f00 	cmp.w	sl, #0
 8010924:	bfbc      	itt	lt
 8010926:	192d      	addlt	r5, r5, r4
 8010928:	fa0f fa85 	sxthlt.w	sl, r5
 801092c:	f1bc 0f00 	cmp.w	ip, #0
 8010930:	f000 80aa 	beq.w	8010a88 <getAccStats.constprop.0+0x1b0>
 8010934:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010938:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801093c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010940:	2600      	movs	r6, #0
 8010942:	e018      	b.n	8010976 <getAccStats.constprop.0+0x9e>
 8010944:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010946:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010948:	7824      	ldrb	r4, [r4, #0]
 801094a:	3401      	adds	r4, #1
 801094c:	702c      	strb	r4, [r5, #0]
 801094e:	edd3 7a00 	vldr	s15, [r3]
 8010952:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 8010956:	eee7 7a07 	vfma.f32	s15, s14, s14
 801095a:	3601      	adds	r6, #1
 801095c:	b2b4      	uxth	r4, r6
 801095e:	45a4      	cmp	ip, r4
 8010960:	edc3 7a00 	vstr	s15, [r3]
 8010964:	d967      	bls.n	8010a36 <getAccStats.constprop.0+0x15e>
 8010966:	f9b0 9000 	ldrsh.w	r9, [r0]
 801096a:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801096e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010972:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
 8010976:	edd1 4a04 	vldr	s9, [r1, #16]
 801097a:	ed91 5a00 	vldr	s10, [r1]
 801097e:	edd1 5a08 	vldr	s11, [r1, #32]
 8010982:	ed92 6a00 	vldr	s12, [r2]
 8010986:	fa1a fb86 	uxtah	fp, sl, r6
 801098a:	fb9b f5f4 	sdiv	r5, fp, r4
 801098e:	fb04 b415 	mls	r4, r4, r5, fp
 8010992:	b224      	sxth	r4, r4
 8010994:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010998:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801099c:	f9b4 b062 	ldrsh.w	fp, [r4, #98]	; 0x62
 80109a0:	f9b4 5060 	ldrsh.w	r5, [r4, #96]	; 0x60
 80109a4:	f9b4 4064 	ldrsh.w	r4, [r4, #100]	; 0x64
 80109a8:	ebab 0b08 	sub.w	fp, fp, r8
 80109ac:	ee06 ba90 	vmov	s13, fp
 80109b0:	eba5 0509 	sub.w	r5, r5, r9
 80109b4:	ee07 5a10 	vmov	s14, r5
 80109b8:	eba4 040e 	sub.w	r4, r4, lr
 80109bc:	ee07 4a90 	vmov	s15, r4
 80109c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80109c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80109c8:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80109cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109d0:	ee27 7a05 	vmul.f32	s14, s14, s10
 80109d4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80109d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80109dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80109e0:	ee16 5a90 	vmov	r5, s13
 80109e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80109e8:	ee17 ba10 	vmov	fp, s14
 80109ec:	ee17 4a90 	vmov	r4, s15
 80109f0:	fb05 f505 	mul.w	r5, r5, r5
 80109f4:	fb0b 5b0b 	mla	fp, fp, fp, r5
 80109f8:	fb04 b404 	mla	r4, r4, r4, fp
 80109fc:	ee07 4a90 	vmov	s15, r4
 8010a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a04:	eef1 6ae7 	vsqrt.f32	s13, s15
 8010a08:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8010a0c:	ee76 7a26 	vadd.f32	s15, s12, s13
 8010a10:	eef0 6ac7 	vabs.f32	s13, s14
 8010a14:	eeb4 4ae6 	vcmpe.f32	s8, s13
 8010a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a1c:	edc2 7a00 	vstr	s15, [r2]
 8010a20:	d490      	bmi.n	8010944 <getAccStats.constprop.0+0x6c>
 8010a22:	edd3 7a00 	vldr	s15, [r3]
 8010a26:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010a2a:	3601      	adds	r6, #1
 8010a2c:	b2b4      	uxth	r4, r6
 8010a2e:	45a4      	cmp	ip, r4
 8010a30:	edc3 7a00 	vstr	s15, [r3]
 8010a34:	d89d      	bhi.n	8010972 <getAccStats.constprop.0+0x9a>
 8010a36:	ee07 ca10 	vmov	s14, ip
 8010a3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010a3e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8010a98 <getAccStats.constprop.0+0x1c0>
 8010a42:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8010a46:	eef1 7ac6 	vsqrt.f32	s15, s12
 8010a4a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010a4e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a56:	bfb8      	it	lt
 8010a58:	eef0 7a66 	vmovlt.f32	s15, s13
 8010a5c:	edc3 7a00 	vstr	s15, [r3]
 8010a60:	edd2 7a00 	vldr	s15, [r2]
 8010a64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a68:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8010a6c:	edc2 7a00 	vstr	s15, [r2]
 8010a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a74:	fb95 fafc 	sdiv	sl, r5, ip
 8010a78:	fb0c 551a 	mls	r5, ip, sl, r5
 8010a7c:	fa0f fa85 	sxth.w	sl, r5
 8010a80:	f1bc 0f00 	cmp.w	ip, #0
 8010a84:	f47f af56 	bne.w	8010934 <getAccStats.constprop.0+0x5c>
 8010a88:	edd3 7a00 	vldr	s15, [r3]
 8010a8c:	e7d3      	b.n	8010a36 <getAccStats.constprop.0+0x15e>
 8010a8e:	bf00      	nop
 8010a90:	200020a8 	.word	0x200020a8
 8010a94:	3e4ccccd 	.word	0x3e4ccccd
 8010a98:	3ca3d70a 	.word	0x3ca3d70a
 8010a9c:	00000000 	.word	0x00000000

08010aa0 <iNemo_quat2heading>:
 8010aa0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8010aa4:	460e      	mov	r6, r1
 8010aa6:	ed2d 8b08 	vpush	{d8-d11}
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d15b      	bne.n	8010b66 <iNemo_quat2heading+0xc6>
 8010aae:	edd2 6a00 	vldr	s13, [r2]
 8010ab2:	edd2 7a01 	vldr	s15, [r2, #4]
 8010ab6:	4dba      	ldr	r5, [pc, #744]	; (8010da0 <iNemo_quat2heading+0x300>)
 8010ab8:	ed92 7a02 	vldr	s14, [r2, #8]
 8010abc:	edd0 9a00 	vldr	s19, [r0]
 8010ac0:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 8010ac4:	ed90 aa01 	vldr	s20, [r0, #4]
 8010ac8:	edd0 8a02 	vldr	s17, [r0, #8]
 8010acc:	ed90 8a03 	vldr	s16, [r0, #12]
 8010ad0:	eef0 aae6 	vabs.f32	s21, s13
 8010ad4:	eeb0 9ae7 	vabs.f32	s18, s15
 8010ad8:	eef4 aac9 	vcmpe.f32	s21, s18
 8010adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae0:	eeb0 bac7 	vabs.f32	s22, s14
 8010ae4:	f340 80b4 	ble.w	8010c50 <iNemo_quat2heading+0x1b0>
 8010ae8:	eef4 aacb 	vcmpe.f32	s21, s22
 8010aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af0:	f340 80ae 	ble.w	8010c50 <iNemo_quat2heading+0x1b0>
 8010af4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afc:	ee1a 0a90 	vmov	r0, s21
 8010b00:	f340 81b3 	ble.w	8010e6a <iNemo_quat2heading+0x3ca>
 8010b04:	f7ef fcc4 	bl	8000490 <__aeabi_f2d>
 8010b08:	4680      	mov	r8, r0
 8010b0a:	ee19 0a10 	vmov	r0, s18
 8010b0e:	4689      	mov	r9, r1
 8010b10:	f7ef fcbe 	bl	8000490 <__aeabi_f2d>
 8010b14:	a39e      	add	r3, pc, #632	; (adr r3, 8010d90 <iNemo_quat2heading+0x2f0>)
 8010b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1a:	f7ef fd11 	bl	8000540 <__aeabi_dmul>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	4640      	mov	r0, r8
 8010b24:	4649      	mov	r1, r9
 8010b26:	f7ef ff9b 	bl	8000a60 <__aeabi_dcmpgt>
 8010b2a:	b188      	cbz	r0, 8010b50 <iNemo_quat2heading+0xb0>
 8010b2c:	ee1b 0a10 	vmov	r0, s22
 8010b30:	f7ef fcae 	bl	8000490 <__aeabi_f2d>
 8010b34:	a396      	add	r3, pc, #600	; (adr r3, 8010d90 <iNemo_quat2heading+0x2f0>)
 8010b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b3a:	f7ef fd01 	bl	8000540 <__aeabi_dmul>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	460b      	mov	r3, r1
 8010b42:	4640      	mov	r0, r8
 8010b44:	4649      	mov	r1, r9
 8010b46:	f7ef ff8b 	bl	8000a60 <__aeabi_dcmpgt>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	f040 81b9 	bne.w	8010ec2 <iNemo_quat2heading+0x422>
 8010b50:	2c05      	cmp	r4, #5
 8010b52:	f200 81ba 	bhi.w	8010eca <iNemo_quat2heading+0x42a>
 8010b56:	e8df f014 	tbh	[pc, r4, lsl #1]
 8010b5a:	00b2      	.short	0x00b2
 8010b5c:	005f00e7 	.word	0x005f00e7
 8010b60:	005f0156 	.word	0x005f0156
 8010b64:	00b2      	.short	0x00b2
 8010b66:	edd2 6a01 	vldr	s13, [r2, #4]
 8010b6a:	edd2 7a00 	vldr	s15, [r2]
 8010b6e:	edd0 8a02 	vldr	s17, [r0, #8]
 8010b72:	4d8b      	ldr	r5, [pc, #556]	; (8010da0 <iNemo_quat2heading+0x300>)
 8010b74:	ed92 7a02 	vldr	s14, [r2, #8]
 8010b78:	edd0 9a01 	vldr	s19, [r0, #4]
 8010b7c:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 8010b80:	ed90 aa00 	vldr	s20, [r0]
 8010b84:	ed90 8a03 	vldr	s16, [r0, #12]
 8010b88:	eef0 aae6 	vabs.f32	s21, s13
 8010b8c:	eeb0 9ae7 	vabs.f32	s18, s15
 8010b90:	eef4 aac9 	vcmpe.f32	s21, s18
 8010b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b98:	eef1 8a68 	vneg.f32	s17, s17
 8010b9c:	eeb0 bac7 	vabs.f32	s22, s14
 8010ba0:	dd04      	ble.n	8010bac <iNemo_quat2heading+0x10c>
 8010ba2:	eef4 aacb 	vcmpe.f32	s21, s22
 8010ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010baa:	dca3      	bgt.n	8010af4 <iNemo_quat2heading+0x54>
 8010bac:	eeb4 9acb 	vcmpe.f32	s18, s22
 8010bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb4:	f300 8086 	bgt.w	8010cc4 <iNemo_quat2heading+0x224>
 8010bb8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc0:	ee1b 0a10 	vmov	r0, s22
 8010bc4:	d450      	bmi.n	8010c68 <iNemo_quat2heading+0x1c8>
 8010bc6:	f7ef fc63 	bl	8000490 <__aeabi_f2d>
 8010bca:	4680      	mov	r8, r0
 8010bcc:	ee19 0a10 	vmov	r0, s18
 8010bd0:	4689      	mov	r9, r1
 8010bd2:	f7ef fc5d 	bl	8000490 <__aeabi_f2d>
 8010bd6:	a36e      	add	r3, pc, #440	; (adr r3, 8010d90 <iNemo_quat2heading+0x2f0>)
 8010bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bdc:	f7ef fcb0 	bl	8000540 <__aeabi_dmul>
 8010be0:	4602      	mov	r2, r0
 8010be2:	460b      	mov	r3, r1
 8010be4:	4640      	mov	r0, r8
 8010be6:	4649      	mov	r1, r9
 8010be8:	f7ef ff3a 	bl	8000a60 <__aeabi_dcmpgt>
 8010bec:	2800      	cmp	r0, #0
 8010bee:	d0af      	beq.n	8010b50 <iNemo_quat2heading+0xb0>
 8010bf0:	ee1a 0a90 	vmov	r0, s21
 8010bf4:	f7ef fc4c 	bl	8000490 <__aeabi_f2d>
 8010bf8:	a365      	add	r3, pc, #404	; (adr r3, 8010d90 <iNemo_quat2heading+0x2f0>)
 8010bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfe:	f7ef fc9f 	bl	8000540 <__aeabi_dmul>
 8010c02:	4602      	mov	r2, r0
 8010c04:	460b      	mov	r3, r1
 8010c06:	4640      	mov	r0, r8
 8010c08:	4649      	mov	r1, r9
 8010c0a:	f7ef ff29 	bl	8000a60 <__aeabi_dcmpgt>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	d09e      	beq.n	8010b50 <iNemo_quat2heading+0xb0>
 8010c12:	2302      	movs	r3, #2
 8010c14:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8010c18:	ed96 0a00 	vldr	s0, [r6]
 8010c1c:	eddf 7a61 	vldr	s15, [pc, #388]	; 8010da4 <iNemo_quat2heading+0x304>
 8010c20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010c24:	eddf 7a60 	vldr	s15, [pc, #384]	; 8010da8 <iNemo_quat2heading+0x308>
 8010c28:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c30:	bfa8      	it	ge
 8010c32:	ee30 0a67 	vsubge.f32	s0, s0, s15
 8010c36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3e:	d503      	bpl.n	8010c48 <iNemo_quat2heading+0x1a8>
 8010c40:	eddf 7a59 	vldr	s15, [pc, #356]	; 8010da8 <iNemo_quat2heading+0x308>
 8010c44:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010c48:	ecbd 8b08 	vpop	{d8-d11}
 8010c4c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8010c50:	eeb4 9acb 	vcmpe.f32	s18, s22
 8010c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c58:	dc34      	bgt.n	8010cc4 <iNemo_quat2heading+0x224>
 8010c5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c62:	ee1b 0a10 	vmov	r0, s22
 8010c66:	ddae      	ble.n	8010bc6 <iNemo_quat2heading+0x126>
 8010c68:	f7ef fc12 	bl	8000490 <__aeabi_f2d>
 8010c6c:	4680      	mov	r8, r0
 8010c6e:	ee19 0a10 	vmov	r0, s18
 8010c72:	4689      	mov	r9, r1
 8010c74:	f7ef fc0c 	bl	8000490 <__aeabi_f2d>
 8010c78:	a345      	add	r3, pc, #276	; (adr r3, 8010d90 <iNemo_quat2heading+0x2f0>)
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	f7ef fc5f 	bl	8000540 <__aeabi_dmul>
 8010c82:	4602      	mov	r2, r0
 8010c84:	460b      	mov	r3, r1
 8010c86:	4640      	mov	r0, r8
 8010c88:	4649      	mov	r1, r9
 8010c8a:	f7ef fee9 	bl	8000a60 <__aeabi_dcmpgt>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	f43f af5e 	beq.w	8010b50 <iNemo_quat2heading+0xb0>
 8010c94:	ee1a 0a90 	vmov	r0, s21
 8010c98:	f7ef fbfa 	bl	8000490 <__aeabi_f2d>
 8010c9c:	a33c      	add	r3, pc, #240	; (adr r3, 8010d90 <iNemo_quat2heading+0x2f0>)
 8010c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca2:	f7ef fc4d 	bl	8000540 <__aeabi_dmul>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	460b      	mov	r3, r1
 8010caa:	4640      	mov	r0, r8
 8010cac:	4649      	mov	r1, r9
 8010cae:	f7ef fed7 	bl	8000a60 <__aeabi_dcmpgt>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	f43f af4c 	beq.w	8010b50 <iNemo_quat2heading+0xb0>
 8010cb8:	2300      	movs	r3, #0
 8010cba:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8010cbe:	ed96 0a00 	vldr	s0, [r6]
 8010cc2:	e7af      	b.n	8010c24 <iNemo_quat2heading+0x184>
 8010cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ccc:	ee19 0a10 	vmov	r0, s18
 8010cd0:	dd6e      	ble.n	8010db0 <iNemo_quat2heading+0x310>
 8010cd2:	f7ef fbdd 	bl	8000490 <__aeabi_f2d>
 8010cd6:	4680      	mov	r8, r0
 8010cd8:	ee1a 0a90 	vmov	r0, s21
 8010cdc:	4689      	mov	r9, r1
 8010cde:	f7ef fbd7 	bl	8000490 <__aeabi_f2d>
 8010ce2:	a32b      	add	r3, pc, #172	; (adr r3, 8010d90 <iNemo_quat2heading+0x2f0>)
 8010ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce8:	f7ef fc2a 	bl	8000540 <__aeabi_dmul>
 8010cec:	4602      	mov	r2, r0
 8010cee:	460b      	mov	r3, r1
 8010cf0:	4640      	mov	r0, r8
 8010cf2:	4649      	mov	r1, r9
 8010cf4:	f7ef feb4 	bl	8000a60 <__aeabi_dcmpgt>
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	f43f af29 	beq.w	8010b50 <iNemo_quat2heading+0xb0>
 8010cfe:	ee1b 0a10 	vmov	r0, s22
 8010d02:	f7ef fbc5 	bl	8000490 <__aeabi_f2d>
 8010d06:	a322      	add	r3, pc, #136	; (adr r3, 8010d90 <iNemo_quat2heading+0x2f0>)
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	f7ef fc18 	bl	8000540 <__aeabi_dmul>
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	4640      	mov	r0, r8
 8010d16:	4649      	mov	r1, r9
 8010d18:	f7ef fea2 	bl	8000a60 <__aeabi_dcmpgt>
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	f43f af17 	beq.w	8010b50 <iNemo_quat2heading+0xb0>
 8010d22:	2301      	movs	r3, #1
 8010d24:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8010d28:	ee68 7a08 	vmul.f32	s15, s16, s16
 8010d2c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8010d30:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8010d34:	eeaa 8a29 	vfma.f32	s16, s20, s19
 8010d38:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8010d3c:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8010d40:	ee17 0a90 	vmov	r0, s15
 8010d44:	f7ef fba4 	bl	8000490 <__aeabi_f2d>
 8010d48:	ee78 7a08 	vadd.f32	s15, s16, s16
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	460b      	mov	r3, r1
 8010d50:	ee17 0a90 	vmov	r0, s15
 8010d54:	ec43 2b18 	vmov	d8, r2, r3
 8010d58:	f7ef fb9a 	bl	8000490 <__aeabi_f2d>
 8010d5c:	eeb0 1a48 	vmov.f32	s2, s16
 8010d60:	eef0 1a68 	vmov.f32	s3, s17
 8010d64:	ec41 0b10 	vmov	d0, r0, r1
 8010d68:	f008 fc6c 	bl	8019644 <atan2>
 8010d6c:	a30a      	add	r3, pc, #40	; (adr r3, 8010d98 <iNemo_quat2heading+0x2f8>)
 8010d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d72:	ec51 0b10 	vmov	r0, r1, d0
 8010d76:	f7ef fbe3 	bl	8000540 <__aeabi_dmul>
 8010d7a:	4b0c      	ldr	r3, [pc, #48]	; (8010dac <iNemo_quat2heading+0x30c>)
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	f7ef fa27 	bl	80001d0 <__aeabi_dsub>
 8010d82:	f7ef fed5 	bl	8000b30 <__aeabi_d2f>
 8010d86:	ee00 0a10 	vmov	s0, r0
 8010d8a:	e74b      	b.n	8010c24 <iNemo_quat2heading+0x184>
 8010d8c:	f3af 8000 	nop.w
 8010d90:	e0000000 	.word	0xe0000000
 8010d94:	3ff6b851 	.word	0x3ff6b851
 8010d98:	20000000 	.word	0x20000000
 8010d9c:	404ca5dc 	.word	0x404ca5dc
 8010da0:	200013d8 	.word	0x200013d8
 8010da4:	43340000 	.word	0x43340000
 8010da8:	43b40000 	.word	0x43b40000
 8010dac:	40568000 	.word	0x40568000
 8010db0:	f7ef fb6e 	bl	8000490 <__aeabi_f2d>
 8010db4:	4680      	mov	r8, r0
 8010db6:	ee1a 0a90 	vmov	r0, s21
 8010dba:	4689      	mov	r9, r1
 8010dbc:	f7ef fb68 	bl	8000490 <__aeabi_f2d>
 8010dc0:	a343      	add	r3, pc, #268	; (adr r3, 8010ed0 <iNemo_quat2heading+0x430>)
 8010dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc6:	f7ef fbbb 	bl	8000540 <__aeabi_dmul>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	460b      	mov	r3, r1
 8010dce:	4640      	mov	r0, r8
 8010dd0:	4649      	mov	r1, r9
 8010dd2:	f7ef fe45 	bl	8000a60 <__aeabi_dcmpgt>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	f43f aeba 	beq.w	8010b50 <iNemo_quat2heading+0xb0>
 8010ddc:	ee1b 0a10 	vmov	r0, s22
 8010de0:	f7ef fb56 	bl	8000490 <__aeabi_f2d>
 8010de4:	a33a      	add	r3, pc, #232	; (adr r3, 8010ed0 <iNemo_quat2heading+0x430>)
 8010de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dea:	f7ef fba9 	bl	8000540 <__aeabi_dmul>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	4640      	mov	r0, r8
 8010df4:	4649      	mov	r1, r9
 8010df6:	f7ef fe33 	bl	8000a60 <__aeabi_dcmpgt>
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	f43f aea8 	beq.w	8010b50 <iNemo_quat2heading+0xb0>
 8010e00:	2303      	movs	r3, #3
 8010e02:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8010e06:	ee68 7a08 	vmul.f32	s15, s16, s16
 8010e0a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8010e0e:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8010e12:	eeaa 8a29 	vfma.f32	s16, s20, s19
 8010e16:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8010e1a:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8010e1e:	ee17 0a90 	vmov	r0, s15
 8010e22:	f7ef fb35 	bl	8000490 <__aeabi_f2d>
 8010e26:	ee78 7a08 	vadd.f32	s15, s16, s16
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	ee17 0a90 	vmov	r0, s15
 8010e32:	ec43 2b18 	vmov	d8, r2, r3
 8010e36:	f7ef fb2b 	bl	8000490 <__aeabi_f2d>
 8010e3a:	eeb0 1a48 	vmov.f32	s2, s16
 8010e3e:	eef0 1a68 	vmov.f32	s3, s17
 8010e42:	ec41 0b10 	vmov	d0, r0, r1
 8010e46:	f008 fbfd 	bl	8019644 <atan2>
 8010e4a:	a325      	add	r3, pc, #148	; (adr r3, 8010ee0 <iNemo_quat2heading+0x440>)
 8010e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e50:	ec51 0b10 	vmov	r0, r1, d0
 8010e54:	f7ef fb74 	bl	8000540 <__aeabi_dmul>
 8010e58:	4b1f      	ldr	r3, [pc, #124]	; (8010ed8 <iNemo_quat2heading+0x438>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f7ef f9ba 	bl	80001d4 <__adddf3>
 8010e60:	f7ef fe66 	bl	8000b30 <__aeabi_d2f>
 8010e64:	ee00 0a10 	vmov	s0, r0
 8010e68:	e6dc      	b.n	8010c24 <iNemo_quat2heading+0x184>
 8010e6a:	f7ef fb11 	bl	8000490 <__aeabi_f2d>
 8010e6e:	4680      	mov	r8, r0
 8010e70:	ee19 0a10 	vmov	r0, s18
 8010e74:	4689      	mov	r9, r1
 8010e76:	f7ef fb0b 	bl	8000490 <__aeabi_f2d>
 8010e7a:	a315      	add	r3, pc, #84	; (adr r3, 8010ed0 <iNemo_quat2heading+0x430>)
 8010e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e80:	f7ef fb5e 	bl	8000540 <__aeabi_dmul>
 8010e84:	4602      	mov	r2, r0
 8010e86:	460b      	mov	r3, r1
 8010e88:	4640      	mov	r0, r8
 8010e8a:	4649      	mov	r1, r9
 8010e8c:	f7ef fde8 	bl	8000a60 <__aeabi_dcmpgt>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	f43f ae5d 	beq.w	8010b50 <iNemo_quat2heading+0xb0>
 8010e96:	ee1b 0a10 	vmov	r0, s22
 8010e9a:	f7ef faf9 	bl	8000490 <__aeabi_f2d>
 8010e9e:	a30c      	add	r3, pc, #48	; (adr r3, 8010ed0 <iNemo_quat2heading+0x430>)
 8010ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea4:	f7ef fb4c 	bl	8000540 <__aeabi_dmul>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	460b      	mov	r3, r1
 8010eac:	4640      	mov	r0, r8
 8010eae:	4649      	mov	r1, r9
 8010eb0:	f7ef fdd6 	bl	8000a60 <__aeabi_dcmpgt>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	f43f ae4b 	beq.w	8010b50 <iNemo_quat2heading+0xb0>
 8010eba:	2305      	movs	r3, #5
 8010ebc:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8010ec0:	e6fd      	b.n	8010cbe <iNemo_quat2heading+0x21e>
 8010ec2:	2304      	movs	r3, #4
 8010ec4:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8010ec8:	e6a6      	b.n	8010c18 <iNemo_quat2heading+0x178>
 8010eca:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8010edc <iNemo_quat2heading+0x43c>
 8010ece:	e6bb      	b.n	8010c48 <iNemo_quat2heading+0x1a8>
 8010ed0:	e0000000 	.word	0xe0000000
 8010ed4:	3ff6b851 	.word	0x3ff6b851
 8010ed8:	40568000 	.word	0x40568000
 8010edc:	00000000 	.word	0x00000000
 8010ee0:	20000000 	.word	0x20000000
 8010ee4:	404ca5dc 	.word	0x404ca5dc

08010ee8 <m_kalman_3gyro.isra.0.constprop.0>:
 8010ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eec:	4cd4      	ldr	r4, [pc, #848]	; (8011240 <m_kalman_3gyro.isra.0.constprop.0+0x358>)
 8010eee:	ed2d 8b10 	vpush	{d8-d15}
 8010ef2:	468e      	mov	lr, r1
 8010ef4:	4691      	mov	r9, r2
 8010ef6:	4680      	mov	r8, r0
 8010ef8:	469a      	mov	sl, r3
 8010efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010efc:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 8010f00:	aeb2      	add	r6, sp, #712	; 0x2c8
 8010f02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f0a:	f89d 5690 	ldrb.w	r5, [sp, #1680]	; 0x690
 8010f0e:	9518      	str	r5, [sp, #96]	; 0x60
 8010f10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010f12:	f89d 5694 	ldrb.w	r5, [sp, #1684]	; 0x694
 8010f16:	9509      	str	r5, [sp, #36]	; 0x24
 8010f18:	4625      	mov	r5, r4
 8010f1a:	afbf      	add	r7, sp, #764	; 0x2fc
 8010f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f20:	6033      	str	r3, [r6, #0]
 8010f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f24:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f28:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f2c:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 8010f30:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010f32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f36:	aecc      	add	r6, sp, #816	; 0x330
 8010f38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010f3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010f40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010f46:	682a      	ldr	r2, [r5, #0]
 8010f48:	f8dc 3000 	ldr.w	r3, [ip]
 8010f4c:	603a      	str	r2, [r7, #0]
 8010f4e:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8010f52:	6033      	str	r3, [r6, #0]
 8010f54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010f56:	add9      	add	r5, sp, #868	; 0x364
 8010f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f5a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f5e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010f60:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8010f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010f68:	683f      	ldr	r7, [r7, #0]
 8010f6a:	602f      	str	r7, [r5, #0]
 8010f6c:	ad94      	add	r5, sp, #592	; 0x250
 8010f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f74:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010f78:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 8010f7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010f80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010f82:	ad9e      	add	r5, sp, #632	; 0x278
 8010f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f8a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010f8e:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 8010f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8010f96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010f98:	ada8      	add	r5, sp, #672	; 0x2a0
 8010f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010fa0:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010fa4:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8010fa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8010fac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010fae:	ad59      	add	r5, sp, #356	; 0x164
 8010fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010fb2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010fb6:	f8dd 66c4 	ldr.w	r6, [sp, #1732]	; 0x6c4
 8010fba:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 8010fbe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010fc2:	2500      	movs	r5, #0
 8010fc4:	7035      	strb	r5, [r6, #0]
 8010fc6:	f8dd 66c8 	ldr.w	r6, [sp, #1736]	; 0x6c8
 8010fca:	7035      	strb	r5, [r6, #0]
 8010fcc:	f8dd 66cc 	ldr.w	r6, [sp, #1740]	; 0x6cc
 8010fd0:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8010fd4:	7035      	strb	r5, [r6, #0]
 8010fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fd8:	ed9e 8a01 	vldr	s16, [lr, #4]
 8010fdc:	edde ba00 	vldr	s23, [lr]
 8010fe0:	ed9e ca02 	vldr	s24, [lr, #8]
 8010fe4:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
 8010fe8:	ee68 7a08 	vmul.f32	s15, s16, s16
 8010fec:	ad60      	add	r5, sp, #384	; 0x180
 8010fee:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8010ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010ff4:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8010ff8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010ffc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011000:	ee17 0a90 	vmov	r0, s15
 8011004:	eeb0 aa61 	vmov.f32	s20, s3
 8011008:	ed8d 2a39 	vstr	s4, [sp, #228]	; 0xe4
 801100c:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 8011010:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8011014:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 8011018:	edcd ba2c 	vstr	s23, [sp, #176]	; 0xb0
 801101c:	ed8d ca2e 	vstr	s24, [sp, #184]	; 0xb8
 8011020:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8011024:	f8cd a020 	str.w	sl, [sp, #32]
 8011028:	f7ef fa32 	bl	8000490 <__aeabi_f2d>
 801102c:	ec41 0b10 	vmov	d0, r0, r1
 8011030:	f008 fb52 	bl	80196d8 <sqrt>
 8011034:	ec51 0b10 	vmov	r0, r1, d0
 8011038:	f7ef fd7a 	bl	8000b30 <__aeabi_d2f>
 801103c:	ed99 9a01 	vldr	s18, [r9, #4]
 8011040:	edd9 9a00 	vldr	s19, [r9]
 8011044:	edd9 8a02 	vldr	s17, [r9, #8]
 8011048:	4b7e      	ldr	r3, [pc, #504]	; (8011244 <m_kalman_3gyro.isra.0.constprop.0+0x35c>)
 801104a:	ee69 7a09 	vmul.f32	s15, s18, s18
 801104e:	f8c3 019c 	str.w	r0, [r3, #412]	; 0x19c
 8011052:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011056:	4644      	mov	r4, r8
 8011058:	ee0c 0a90 	vmov	s25, r0
 801105c:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011060:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8011064:	ee17 0a90 	vmov	r0, s15
 8011068:	f7ef fa12 	bl	8000490 <__aeabi_f2d>
 801106c:	ec41 0b10 	vmov	d0, r0, r1
 8011070:	f008 fb32 	bl	80196d8 <sqrt>
 8011074:	ec51 0b10 	vmov	r0, r1, d0
 8011078:	f7ef fd5a 	bl	8000b30 <__aeabi_d2f>
 801107c:	ee0a 0a90 	vmov	s21, r0
 8011080:	eecb da2c 	vdiv.f32	s27, s22, s25
 8011084:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8011088:	ab56      	add	r3, sp, #344	; 0x158
 801108a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801108e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011092:	f893 58cd 	ldrb.w	r5, [r3, #2253]	; 0x8cd
 8011096:	eecb 7a2a 	vdiv.f32	s15, s22, s21
 801109a:	ee2d ea88 	vmul.f32	s28, s27, s16
 801109e:	ee27 9a89 	vmul.f32	s18, s15, s18
 80110a2:	eeb0 7a48 	vmov.f32	s14, s16
 80110a6:	ee67 9aa9 	vmul.f32	s19, s15, s19
 80110aa:	ee2b 8aad 	vmul.f32	s16, s23, s27
 80110ae:	ee2e da09 	vmul.f32	s26, s28, s18
 80110b2:	ee6d da8c 	vmul.f32	s27, s27, s24
 80110b6:	eea8 da29 	vfma.f32	s26, s16, s19
 80110ba:	ee67 8aa8 	vmul.f32	s17, s15, s17
 80110be:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 80110c2:	eea8 daad 	vfma.f32	s26, s17, s27
 80110c6:	ed8d ea3e 	vstr	s28, [sp, #248]	; 0xf8
 80110ca:	edcd da3f 	vstr	s27, [sp, #252]	; 0xfc
 80110ce:	edcd ba53 	vstr	s23, [sp, #332]	; 0x14c
 80110d2:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 80110d6:	ed8d ca55 	vstr	s24, [sp, #340]	; 0x154
 80110da:	2d00      	cmp	r5, #0
 80110dc:	f001 8116 	beq.w	801230c <m_kalman_3gyro.isra.0.constprop.0+0x1424>
 80110e0:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 80110e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110e8:	f7ef fd22 	bl	8000b30 <__aeabi_d2f>
 80110ec:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80110f0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8011248 <m_kalman_3gyro.isra.0.constprop.0+0x360>
 80110f4:	f503 7817 	add.w	r8, r3, #604	; 0x25c
 80110f8:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80110fc:	9310      	str	r3, [sp, #64]	; 0x40
 80110fe:	ab43      	add	r3, sp, #268	; 0x10c
 8011100:	9307      	str	r3, [sp, #28]
 8011102:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011106:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801110a:	9321      	str	r3, [sp, #132]	; 0x84
 801110c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011110:	f503 6a81 	add.w	sl, r3, #1032	; 0x408
 8011114:	f203 4b0c 	addw	fp, r3, #1036	; 0x40c
 8011118:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801111c:	933a      	str	r3, [sp, #232]	; 0xe8
 801111e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011122:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8011126:	9334      	str	r3, [sp, #208]	; 0xd0
 8011128:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801112c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8011130:	932b      	str	r3, [sp, #172]	; 0xac
 8011132:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011136:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 801113a:	9335      	str	r3, [sp, #212]	; 0xd4
 801113c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011140:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8011144:	9336      	str	r3, [sp, #216]	; 0xd8
 8011146:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801114a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801114e:	9337      	str	r3, [sp, #220]	; 0xdc
 8011150:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011154:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8011158:	9338      	str	r3, [sp, #224]	; 0xe0
 801115a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801115e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8011162:	931e      	str	r3, [sp, #120]	; 0x78
 8011164:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011168:	f203 4334 	addw	r3, r3, #1076	; 0x434
 801116c:	931f      	str	r3, [sp, #124]	; 0x7c
 801116e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011172:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8011176:	9330      	str	r3, [sp, #192]	; 0xc0
 8011178:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801117c:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011180:	930f      	str	r3, [sp, #60]	; 0x3c
 8011182:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011186:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801118a:	9312      	str	r3, [sp, #72]	; 0x48
 801118c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011190:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8011194:	9320      	str	r3, [sp, #128]	; 0x80
 8011196:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801119a:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 801119e:	ee0b 0a10 	vmov	s22, r0
 80111a2:	9319      	str	r3, [sp, #100]	; 0x64
 80111a4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80111a8:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80111ac:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 80111b0:	931a      	str	r3, [sp, #104]	; 0x68
 80111b2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80111b6:	eddf 4a25 	vldr	s9, [pc, #148]	; 801124c <m_kalman_3gyro.isra.0.constprop.0+0x364>
 80111ba:	ed9f 5a25 	vldr	s10, [pc, #148]	; 8011250 <m_kalman_3gyro.isra.0.constprop.0+0x368>
 80111be:	eddf 5a25 	vldr	s11, [pc, #148]	; 8011254 <m_kalman_3gyro.isra.0.constprop.0+0x36c>
 80111c2:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8011258 <m_kalman_3gyro.isra.0.constprop.0+0x370>
 80111c6:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80111ca:	edd3 6a00 	vldr	s13, [r3]
 80111ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111d0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80111d4:	edd3 7a00 	vldr	s15, [r3]
 80111d8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80111dc:	eee7 6a85 	vfma.f32	s13, s15, s10
 80111e0:	f203 46cc 	addw	r6, r3, #1228	; 0x4cc
 80111e4:	f503 659e 	add.w	r5, r3, #1264	; 0x4f0
 80111e8:	ed96 4a00 	vldr	s8, [r6]
 80111ec:	edd5 7a00 	vldr	s15, [r5]
 80111f0:	eee4 6a25 	vfma.f32	s13, s8, s11
 80111f4:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 80111f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80111fc:	ed95 3b00 	vldr	d3, [r5]
 8011200:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8011204:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011208:	f204 4764 	addw	r7, r4, #1124	; 0x464
 801120c:	f504 6691 	add.w	r6, r4, #1160	; 0x488
 8011210:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
 8011214:	f504 659a 	add.w	r5, r4, #1232	; 0x4d0
 8011218:	f204 4cf4 	addw	ip, r4, #1268	; 0x4f4
 801121c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801121e:	9731      	str	r7, [sp, #196]	; 0xc4
 8011220:	ed84 7a00 	vstr	s14, [r4]
 8011224:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8011228:	edc4 6af8 	vstr	s13, [r4, #992]	; 0x3e0
 801122c:	edd6 7a00 	vldr	s15, [r6]
 8011230:	edd7 3a00 	vldr	s7, [r7]
 8011234:	ed95 4a00 	vldr	s8, [r5]
 8011238:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 801123c:	e00e      	b.n	801125c <m_kalman_3gyro.isra.0.constprop.0+0x374>
 801123e:	bf00      	nop
 8011240:	0801b398 	.word	0x0801b398
 8011244:	200013d8 	.word	0x200013d8
 8011248:	3ca3d70a 	.word	0x3ca3d70a
 801124c:	bdcccccd 	.word	0xbdcccccd
 8011250:	be4ccccd 	.word	0xbe4ccccd
 8011254:	3dcccccd 	.word	0x3dcccccd
 8011258:	3e4ccccd 	.word	0x3e4ccccd
 801125c:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 8011260:	ed9c 7a00 	vldr	s14, [ip]
 8011264:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011268:	f204 478c 	addw	r7, r4, #1164	; 0x48c
 801126c:	eee3 7a85 	vfma.f32	s15, s7, s10
 8011270:	f504 648d 	add.w	r4, r4, #1128	; 0x468
 8011274:	941b      	str	r4, [sp, #108]	; 0x6c
 8011276:	f505 649f 	add.w	r4, r5, #1272	; 0x4f8
 801127a:	eee4 7a25 	vfma.f32	s15, s8, s11
 801127e:	f205 46d4 	addw	r6, r5, #1236	; 0x4d4
 8011282:	9400      	str	r4, [sp, #0]
 8011284:	f505 6492 	add.w	r4, r5, #1168	; 0x490
 8011288:	f205 456c 	addw	r5, r5, #1132	; 0x46c
 801128c:	951c      	str	r5, [sp, #112]	; 0x70
 801128e:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 8011292:	eee7 7a06 	vfma.f32	s15, s14, s12
 8011296:	f205 4efc 	addw	lr, r5, #1276	; 0x4fc
 801129a:	f505 6c9b 	add.w	ip, r5, #1240	; 0x4d8
 801129e:	f205 4994 	addw	r9, r5, #1172	; 0x494
 80112a2:	f505 658e 	add.w	r5, r5, #1136	; 0x470
 80112a6:	951d      	str	r5, [sp, #116]	; 0x74
 80112a8:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 80112ac:	edc5 7af9 	vstr	s15, [r5, #996]	; 0x3e4
 80112b0:	ed97 7a00 	vldr	s14, [r7]
 80112b4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80112b6:	ed96 4a00 	vldr	s8, [r6]
 80112ba:	edd7 3a00 	vldr	s7, [r7]
 80112be:	9f07      	ldr	r7, [sp, #28]
 80112c0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80112c4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80112c8:	eea3 7a85 	vfma.f32	s14, s7, s10
 80112cc:	f505 6293 	add.w	r2, r5, #1176	; 0x498
 80112d0:	f205 46dc 	addw	r6, r5, #1244	; 0x4dc
 80112d4:	f505 63a0 	add.w	r3, r5, #1280	; 0x500
 80112d8:	eea4 7a25 	vfma.f32	s14, s8, s11
 80112dc:	9d00      	ldr	r5, [sp, #0]
 80112de:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80112e2:	ed95 4a00 	vldr	s8, [r5]
 80112e6:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 80112ea:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 80112ee:	eea4 7a06 	vfma.f32	s14, s8, s12
 80112f2:	f201 4774 	addw	r7, r1, #1140	; 0x474
 80112f6:	9732      	str	r7, [sp, #200]	; 0xc8
 80112f8:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 80112fc:	ed85 7afa 	vstr	s14, [r5, #1000]	; 0x3e8
 8011300:	ed94 4a00 	vldr	s8, [r4]
 8011304:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8011308:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801130a:	f204 449c 	addw	r4, r4, #1180	; 0x49c
 801130e:	9423      	str	r4, [sp, #140]	; 0x8c
 8011310:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8011314:	edd5 3a00 	vldr	s7, [r5]
 8011318:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 801131c:	ee24 4a24 	vmul.f32	s8, s8, s9
 8011320:	f504 648f 	add.w	r4, r4, #1144	; 0x478
 8011324:	9413      	str	r4, [sp, #76]	; 0x4c
 8011326:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 801132a:	eea3 4a85 	vfma.f32	s8, s7, s10
 801132e:	f204 44e4 	addw	r4, r4, #1252	; 0x4e4
 8011332:	9426      	str	r4, [sp, #152]	; 0x98
 8011334:	eddc 3a00 	vldr	s7, [ip]
 8011338:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 801133c:	f505 6ca1 	add.w	ip, r5, #1288	; 0x508
 8011340:	eea3 4aa5 	vfma.f32	s8, s7, s11
 8011344:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 8011348:	f504 6c94 	add.w	ip, r4, #1184	; 0x4a0
 801134c:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8011350:	edde 3a00 	vldr	s7, [lr]
 8011354:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 8011358:	f204 4c7c 	addw	ip, r4, #1148	; 0x47c
 801135c:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8011360:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 8011364:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8011368:	eea3 4a86 	vfma.f32	s8, s7, s12
 801136c:	f505 6c9d 	add.w	ip, r5, #1256	; 0x4e8
 8011370:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
 8011374:	f204 5c0c 	addw	ip, r4, #1292	; 0x50c
 8011378:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 801137c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801137e:	ed84 4afb 	vstr	s8, [r4, #1004]	; 0x3ec
 8011382:	ed99 4a00 	vldr	s8, [r9]
 8011386:	edd5 3a00 	vldr	s7, [r5]
 801138a:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
 801138e:	ee24 4a24 	vmul.f32	s8, s8, s9
 8011392:	f200 5004 	addw	r0, r0, #1284	; 0x504
 8011396:	eea3 4a85 	vfma.f32	s8, s7, s10
 801139a:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 801139e:	edd6 3a00 	vldr	s7, [r6]
 80113a2:	f8dd 66d0 	ldr.w	r6, [sp, #1744]	; 0x6d0
 80113a6:	eea3 4aa5 	vfma.f32	s8, s7, s11
 80113aa:	f204 4ca4 	addw	ip, r4, #1188	; 0x4a4
 80113ae:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
 80113b2:	edd3 3a00 	vldr	s7, [r3]
 80113b6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80113ba:	eea3 4a86 	vfma.f32	s8, s7, s12
 80113be:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 80113c2:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 80113c6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 80113ca:	ed83 4afc 	vstr	s8, [r3, #1008]	; 0x3f0
 80113ce:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80113d2:	edd2 7a00 	vldr	s15, [r2]
 80113d6:	ed97 4a00 	vldr	s8, [r7]
 80113da:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80113de:	eee6 3aa6 	vfma.f32	s7, s13, s13
 80113e2:	f205 4cec 	addw	ip, r5, #1260	; 0x4ec
 80113e6:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
 80113ea:	eee4 7a05 	vfma.f32	s15, s8, s10
 80113ee:	46a4      	mov	ip, r4
 80113f0:	f50c 7c0e 	add.w	ip, ip, #568	; 0x238
 80113f4:	eef0 6a63 	vmov.f32	s13, s7
 80113f8:	edd1 3a00 	vldr	s7, [r1]
 80113fc:	ed90 4a00 	vldr	s8, [r0]
 8011400:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8011404:	eee3 7aa5 	vfma.f32	s15, s7, s11
 8011408:	469c      	mov	ip, r3
 801140a:	f503 7705 	add.w	r7, r3, #532	; 0x214
 801140e:	eee7 6a07 	vfma.f32	s13, s14, s14
 8011412:	f506 66a2 	add.w	r6, r6, #1296	; 0x510
 8011416:	963b      	str	r6, [sp, #236]	; 0xec
 8011418:	eee4 7a06 	vfma.f32	s15, s8, s12
 801141c:	9733      	str	r7, [sp, #204]	; 0xcc
 801141e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8011422:	ee16 0a90 	vmov	r0, s13
 8011426:	edc3 7afd 	vstr	s15, [r3, #1012]	; 0x3f4
 801142a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801142c:	edd3 7a00 	vldr	s15, [r3]
 8011430:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011432:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011436:	ed93 4a00 	vldr	s8, [r3]
 801143a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801143c:	eee4 7a05 	vfma.f32	s15, s8, s10
 8011440:	edd3 6a00 	vldr	s13, [r3]
 8011444:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8011446:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011448:	ed95 7a00 	vldr	s14, [r5]
 801144c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801144e:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8011452:	ee2e ca68 	vnmul.f32	s24, s28, s17
 8011456:	eee7 7a06 	vfma.f32	s15, s14, s12
 801145a:	eea9 ca2d 	vfma.f32	s24, s18, s27
 801145e:	edcc 7afe 	vstr	s15, [ip, #1016]	; 0x3f8
 8011462:	edd3 7a00 	vldr	s15, [r3]
 8011466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011468:	edd5 6a00 	vldr	s13, [r5]
 801146c:	ed93 4a00 	vldr	s8, [r3]
 8011470:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8011472:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8011474:	ed93 7a00 	vldr	s14, [r3]
 8011478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801147a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801147e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8011482:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8011486:	eee7 7a06 	vfma.f32	s15, s14, s12
 801148a:	edcc 7aff 	vstr	s15, [ip, #1020]	; 0x3fc
 801148e:	edd5 ba00 	vldr	s23, [r5]
 8011492:	edd3 6a00 	vldr	s13, [r3]
 8011496:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8011498:	edd6 7a00 	vldr	s15, [r6]
 801149c:	ed95 7a00 	vldr	s14, [r5]
 80114a0:	ee6b baa4 	vmul.f32	s23, s23, s9
 80114a4:	eee6 ba85 	vfma.f32	s23, s13, s10
 80114a8:	eee7 ba25 	vfma.f32	s23, s14, s11
 80114ac:	eee7 ba86 	vfma.f32	s23, s15, s12
 80114b0:	edc4 ba00 	vstr	s23, [r4]
 80114b4:	f7ee ffec 	bl	8000490 <__aeabi_f2d>
 80114b8:	ec41 0b10 	vmov	d0, r0, r1
 80114bc:	f008 f90c 	bl	80196d8 <sqrt>
 80114c0:	ec51 0b10 	vmov	r0, r1, d0
 80114c4:	f7ef fb34 	bl	8000b30 <__aeabi_d2f>
 80114c8:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80114cc:	4cb4      	ldr	r4, [pc, #720]	; (80117a0 <m_kalman_3gyro.isra.0.constprop.0+0x8b8>)
 80114ce:	edd2 7afc 	vldr	s15, [r2, #1008]	; 0x3f0
 80114d2:	edd2 6afb 	vldr	s13, [r2, #1004]	; 0x3ec
 80114d6:	ed92 7afd 	vldr	s14, [r2, #1012]	; 0x3f4
 80114da:	900c      	str	r0, [sp, #48]	; 0x30
 80114dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80114e0:	ee0e 0a90 	vmov	s29, r0
 80114e4:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80114e8:	f8c4 01a0 	str.w	r0, [r4, #416]	; 0x1a0
 80114ec:	eee7 7a07 	vfma.f32	s15, s14, s14
 80114f0:	ee17 0a90 	vmov	r0, s15
 80114f4:	f7ee ffcc 	bl	8000490 <__aeabi_f2d>
 80114f8:	ec41 0b10 	vmov	d0, r0, r1
 80114fc:	f008 f8ec 	bl	80196d8 <sqrt>
 8011500:	ec51 0b10 	vmov	r0, r1, d0
 8011504:	f7ef fb14 	bl	8000b30 <__aeabi_d2f>
 8011508:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801150c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
 8011510:	edd2 7aff 	vldr	s15, [r2, #1020]	; 0x3fc
 8011514:	ed92 7afe 	vldr	s14, [r2, #1016]	; 0x3f8
 8011518:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801151c:	ee0f 0a90 	vmov	s31, r0
 8011520:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011524:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8011528:	ee6d bae9 	vnmul.f32	s23, s27, s19
 801152c:	ee17 0a90 	vmov	r0, s15
 8011530:	f7ee ffae 	bl	8000490 <__aeabi_f2d>
 8011534:	ec41 0b10 	vmov	d0, r0, r1
 8011538:	f008 f8ce 	bl	80196d8 <sqrt>
 801153c:	eee8 ba88 	vfma.f32	s23, s17, s16
 8011540:	ec51 0b10 	vmov	r0, r1, d0
 8011544:	f7ef faf4 	bl	8000b30 <__aeabi_d2f>
 8011548:	ee29 8a48 	vnmul.f32	s16, s18, s16
 801154c:	ee6b 7aab 	vmul.f32	s15, s23, s23
 8011550:	eeae 8a29 	vfma.f32	s16, s28, s19
 8011554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011556:	9017      	str	r0, [sp, #92]	; 0x5c
 8011558:	eeec 7a0c 	vfma.f32	s15, s24, s24
 801155c:	ee07 0a10 	vmov	s14, r0
 8011560:	eee8 7a08 	vfma.f32	s15, s16, s16
 8011564:	edc2 ea00 	vstr	s29, [r2]
 8011568:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801156c:	edca fa00 	vstr	s31, [sl]
 8011570:	ee17 0a90 	vmov	r0, s15
 8011574:	ed8b 7a00 	vstr	s14, [fp]
 8011578:	ed84 7a6a 	vstr	s14, [r4, #424]	; 0x1a8
 801157c:	edc2 9a90 	vstr	s19, [r2, #576]	; 0x240
 8011580:	ed82 9a93 	vstr	s18, [r2, #588]	; 0x24c
 8011584:	edc2 8a96 	vstr	s17, [r2, #600]	; 0x258
 8011588:	f7ee ff82 	bl	8000490 <__aeabi_f2d>
 801158c:	ec41 0b10 	vmov	d0, r0, r1
 8011590:	f008 f8a2 	bl	80196d8 <sqrt>
 8011594:	ec51 0b10 	vmov	r0, r1, d0
 8011598:	f7ef faca 	bl	8000b30 <__aeabi_d2f>
 801159c:	ee07 0a90 	vmov	s15, r0
 80115a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115a4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80115a8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80115ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80115ae:	aa79      	add	r2, sp, #484	; 0x1e4
 80115b0:	4638      	mov	r0, r7
 80115b2:	ee2c ca27 	vmul.f32	s24, s24, s15
 80115b6:	ee6b baa7 	vmul.f32	s23, s23, s15
 80115ba:	ee28 8a27 	vmul.f32	s16, s16, s15
 80115be:	ee6c ea68 	vnmul.f32	s29, s24, s17
 80115c2:	ee28 fa49 	vnmul.f32	s30, s16, s18
 80115c6:	ee2b eae9 	vnmul.f32	s28, s23, s19
 80115ca:	eea8 faab 	vfma.f32	s30, s17, s23
 80115ce:	eee9 ea88 	vfma.f32	s29, s19, s16
 80115d2:	eea9 ea0c 	vfma.f32	s28, s18, s24
 80115d6:	ed83 ca8f 	vstr	s24, [r3, #572]	; 0x23c
 80115da:	edc3 ba92 	vstr	s23, [r3, #584]	; 0x248
 80115de:	ed83 8a95 	vstr	s16, [r3, #596]	; 0x254
 80115e2:	ed83 fa8e 	vstr	s30, [r3, #568]	; 0x238
 80115e6:	edc3 ea91 	vstr	s29, [r3, #580]	; 0x244
 80115ea:	ed83 ea94 	vstr	s28, [r3, #592]	; 0x250
 80115ee:	f7fd f9d7 	bl	800e9a0 <m_mldivide>
 80115f2:	a879      	add	r0, sp, #484	; 0x1e4
 80115f4:	a947      	add	r1, sp, #284	; 0x11c
 80115f6:	f7fd ffe7 	bl	800f5c8 <m_dcm2q_eml>
 80115fa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80115fe:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 8011602:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 8011606:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 801160a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 801160e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8011612:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 8011616:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 801161a:	3b0c      	subs	r3, #12
 801161c:	4298      	cmp	r0, r3
 801161e:	d1f0      	bne.n	8011602 <m_kalman_3gyro.isra.0.constprop.0+0x71a>
 8011620:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011624:	ee87 6a8a 	vdiv.f32	s12, s15, s20
 8011628:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801162c:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
 8011630:	ac40      	add	r4, sp, #256	; 0x100
 8011632:	f508 72ae 	add.w	r2, r8, #348	; 0x15c
 8011636:	4641      	mov	r1, r8
 8011638:	2000      	movs	r0, #0
 801163a:	eddd 6a47 	vldr	s13, [sp, #284]	; 0x11c
 801163e:	ed9d 7a48 	vldr	s14, [sp, #288]	; 0x120
 8011642:	eddd 7a49 	vldr	s15, [sp, #292]	; 0x124
 8011646:	eddf 5a57 	vldr	s11, [pc, #348]	; 80117a4 <m_kalman_3gyro.isra.0.constprop.0+0x8bc>
 801164a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801164e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011656:	ee66 6a86 	vmul.f32	s13, s13, s12
 801165a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801165e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011662:	ed9f 6a51 	vldr	s12, [pc, #324]	; 80117a8 <m_kalman_3gyro.isra.0.constprop.0+0x8c0>
 8011666:	edc3 6a97 	vstr	s13, [r3, #604]	; 0x25c
 801166a:	ed83 7a98 	vstr	s14, [r3, #608]	; 0x260
 801166e:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
 8011672:	edd1 6a00 	vldr	s13, [r1]
 8011676:	3001      	adds	r0, #1
 8011678:	eef0 7a66 	vmov.f32	s15, s13
 801167c:	460b      	mov	r3, r1
 801167e:	330c      	adds	r3, #12
 8011680:	ed93 7a00 	vldr	s14, [r3]
 8011684:	429a      	cmp	r2, r3
 8011686:	ee77 7a87 	vadd.f32	s15, s15, s14
 801168a:	d1f8      	bne.n	801167e <m_kalman_3gyro.isra.0.constprop.0+0x796>
 801168c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8011690:	460b      	mov	r3, r1
 8011692:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011696:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801169a:	edd3 7a03 	vldr	s15, [r3, #12]
 801169e:	330c      	adds	r3, #12
 80116a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80116a4:	4293      	cmp	r3, r2
 80116a6:	eee7 6aa7 	vfma.f32	s13, s15, s15
 80116aa:	d1f6      	bne.n	801169a <m_kalman_3gyro.isra.0.constprop.0+0x7b2>
 80116ac:	ee66 6a86 	vmul.f32	s13, s13, s12
 80116b0:	2803      	cmp	r0, #3
 80116b2:	f101 0104 	add.w	r1, r1, #4
 80116b6:	ece4 6a01 	vstmia	r4!, {s13}
 80116ba:	f103 0204 	add.w	r2, r3, #4
 80116be:	d1d8      	bne.n	8011672 <m_kalman_3gyro.isra.0.constprop.0+0x78a>
 80116c0:	9840      	ldr	r0, [sp, #256]	; 0x100
 80116c2:	f7ee fee5 	bl	8000490 <__aeabi_f2d>
 80116c6:	ec41 0b10 	vmov	d0, r0, r1
 80116ca:	f008 f805 	bl	80196d8 <sqrt>
 80116ce:	ec51 0b10 	vmov	r0, r1, d0
 80116d2:	f7ef fa2d 	bl	8000b30 <__aeabi_d2f>
 80116d6:	ee0d 0a90 	vmov	s27, r0
 80116da:	9841      	ldr	r0, [sp, #260]	; 0x104
 80116dc:	edcd da40 	vstr	s27, [sp, #256]	; 0x100
 80116e0:	f7ee fed6 	bl	8000490 <__aeabi_f2d>
 80116e4:	ec41 0b10 	vmov	d0, r0, r1
 80116e8:	f007 fff6 	bl	80196d8 <sqrt>
 80116ec:	ec51 0b10 	vmov	r0, r1, d0
 80116f0:	f7ef fa1e 	bl	8000b30 <__aeabi_d2f>
 80116f4:	ee0a 0a10 	vmov	s20, r0
 80116f8:	9842      	ldr	r0, [sp, #264]	; 0x108
 80116fa:	ed8d aa41 	vstr	s20, [sp, #260]	; 0x104
 80116fe:	f7ee fec7 	bl	8000490 <__aeabi_f2d>
 8011702:	ec41 0b10 	vmov	d0, r0, r1
 8011706:	f007 ffe7 	bl	80196d8 <sqrt>
 801170a:	ee2a aa0a 	vmul.f32	s20, s20, s20
 801170e:	ec51 0b10 	vmov	r0, r1, d0
 8011712:	f7ef fa0d 	bl	8000b30 <__aeabi_d2f>
 8011716:	eead aaad 	vfma.f32	s20, s27, s27
 801171a:	9042      	str	r0, [sp, #264]	; 0x108
 801171c:	f8cd 8010 	str.w	r8, [sp, #16]
 8011720:	ee07 0a90 	vmov	s15, r0
 8011724:	eea7 aaa7 	vfma.f32	s20, s15, s15
 8011728:	f20d 4adc 	addw	sl, sp, #1244	; 0x4dc
 801172c:	f50d 7b66 	add.w	fp, sp, #920	; 0x398
 8011730:	ee1a 0a10 	vmov	r0, s20
 8011734:	f7ee feac 	bl	8000490 <__aeabi_f2d>
 8011738:	ec41 0b10 	vmov	d0, r0, r1
 801173c:	f007 ffcc 	bl	80196d8 <sqrt>
 8011740:	ec51 0b10 	vmov	r0, r1, d0
 8011744:	f7ef f9f4 	bl	8000b30 <__aeabi_d2f>
 8011748:	4b15      	ldr	r3, [pc, #84]	; (80117a0 <m_kalman_3gyro.isra.0.constprop.0+0x8b8>)
 801174a:	ed93 aa27 	vldr	s20, [r3, #156]	; 0x9c
 801174e:	edd3 da28 	vldr	s27, [r3, #160]	; 0xa0
 8011752:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011756:	f8c3 03c4 	str.w	r0, [r3, #964]	; 0x3c4
 801175a:	f20d 3397 	addw	r3, sp, #919	; 0x397
 801175e:	f1c3 0301 	rsb	r3, r3, #1
 8011762:	930b      	str	r3, [sp, #44]	; 0x2c
 8011764:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011768:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 801176c:	9306      	str	r3, [sp, #24]
 801176e:	2300      	movs	r3, #0
 8011770:	9305      	str	r3, [sp, #20]
 8011772:	9b05      	ldr	r3, [sp, #20]
 8011774:	9a04      	ldr	r2, [sp, #16]
 8011776:	3301      	adds	r3, #1
 8011778:	9305      	str	r3, [sp, #20]
 801177a:	4653      	mov	r3, sl
 801177c:	f852 1b0c 	ldr.w	r1, [r2], #12
 8011780:	f843 1b04 	str.w	r1, [r3], #4
 8011784:	f20d 5154 	addw	r1, sp, #1364	; 0x554
 8011788:	428b      	cmp	r3, r1
 801178a:	d1f7      	bne.n	801177c <m_kalman_3gyro.isra.0.constprop.0+0x894>
 801178c:	2101      	movs	r1, #1
 801178e:	221e      	movs	r2, #30
 8011790:	a88b      	add	r0, sp, #556	; 0x22c
 8011792:	f007 fdbf 	bl	8019314 <memset>
 8011796:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011798:	f20d 3397 	addw	r3, sp, #919	; 0x397
 801179c:	e00a      	b.n	80117b4 <m_kalman_3gyro.isra.0.constprop.0+0x8cc>
 801179e:	bf00      	nop
 80117a0:	200013d8 	.word	0x200013d8
 80117a4:	3d088889 	.word	0x3d088889
 80117a8:	3d0d3dcb 	.word	0x3d0d3dcb
 80117ac:	3f333333 	.word	0x3f333333
 80117b0:	3f4ccccd 	.word	0x3f4ccccd
 80117b4:	18ca      	adds	r2, r1, r3
 80117b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117ba:	f20d 32b5 	addw	r2, sp, #949	; 0x3b5
 80117be:	4293      	cmp	r3, r2
 80117c0:	d1f8      	bne.n	80117b4 <m_kalman_3gyro.isra.0.constprop.0+0x8cc>
 80117c2:	ed9a 7a00 	vldr	s14, [sl]
 80117c6:	edda 7a01 	vldr	s15, [sl, #4]
 80117ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80117ce:	ed9a 7a02 	vldr	s14, [sl, #8]
 80117d2:	edda 7a03 	vldr	s15, [sl, #12]
 80117d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117da:	bf88      	it	hi
 80117dc:	f44f 7381 	movhi.w	r3, #258	; 0x102
 80117e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80117e4:	ed9a 7a04 	vldr	s14, [sl, #16]
 80117e8:	edda 7a05 	vldr	s15, [sl, #20]
 80117ec:	bf88      	it	hi
 80117ee:	f8ab 3000 	strhhi.w	r3, [fp]
 80117f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f6:	bf88      	it	hi
 80117f8:	f44f 7341 	movhi.w	r3, #772	; 0x304
 80117fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011800:	ed9a 7a06 	vldr	s14, [sl, #24]
 8011804:	edda 7a07 	vldr	s15, [sl, #28]
 8011808:	bf88      	it	hi
 801180a:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 801180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011812:	bf88      	it	hi
 8011814:	f240 5306 	movwhi	r3, #1286	; 0x506
 8011818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801181c:	ed9a 7a08 	vldr	s14, [sl, #32]
 8011820:	edda 7a09 	vldr	s15, [sl, #36]	; 0x24
 8011824:	bf88      	it	hi
 8011826:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 801182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182e:	bf88      	it	hi
 8011830:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8011834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011838:	ed9a 7a0a 	vldr	s14, [sl, #40]	; 0x28
 801183c:	edda 7a0b 	vldr	s15, [sl, #44]	; 0x2c
 8011840:	bf88      	it	hi
 8011842:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 8011846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184a:	bf88      	it	hi
 801184c:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8011850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011854:	ed9a 7a0c 	vldr	s14, [sl, #48]	; 0x30
 8011858:	edda 7a0d 	vldr	s15, [sl, #52]	; 0x34
 801185c:	bf88      	it	hi
 801185e:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8011862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011866:	bf88      	it	hi
 8011868:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 801186c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011870:	ed9a 7a0e 	vldr	s14, [sl, #56]	; 0x38
 8011874:	edda 7a0f 	vldr	s15, [sl, #60]	; 0x3c
 8011878:	bf88      	it	hi
 801187a:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 801187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011882:	bf88      	it	hi
 8011884:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8011888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801188c:	ed9a 7a10 	vldr	s14, [sl, #64]	; 0x40
 8011890:	edda 7a11 	vldr	s15, [sl, #68]	; 0x44
 8011894:	bf88      	it	hi
 8011896:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 801189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189e:	bf88      	it	hi
 80118a0:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 80118a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118a8:	ed9a 7a12 	vldr	s14, [sl, #72]	; 0x48
 80118ac:	edda 7a13 	vldr	s15, [sl, #76]	; 0x4c
 80118b0:	bf88      	it	hi
 80118b2:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 80118b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ba:	bf88      	it	hi
 80118bc:	f241 1312 	movwhi	r3, #4370	; 0x1112
 80118c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118c4:	ed9a 7a14 	vldr	s14, [sl, #80]	; 0x50
 80118c8:	edda 7a15 	vldr	s15, [sl, #84]	; 0x54
 80118cc:	bf88      	it	hi
 80118ce:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 80118d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d6:	bf88      	it	hi
 80118d8:	f241 3314 	movwhi	r3, #4884	; 0x1314
 80118dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118e0:	bf88      	it	hi
 80118e2:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 80118e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ea:	bf84      	itt	hi
 80118ec:	f241 5316 	movwhi	r3, #5398	; 0x1516
 80118f0:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 80118f4:	ed9a 7a16 	vldr	s14, [sl, #88]	; 0x58
 80118f8:	edda 7a17 	vldr	s15, [sl, #92]	; 0x5c
 80118fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011900:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 8011904:	edda 7a19 	vldr	s15, [sl, #100]	; 0x64
 8011908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801190c:	bf88      	it	hi
 801190e:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8011912:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011916:	ed9a 7a1a 	vldr	s14, [sl, #104]	; 0x68
 801191a:	edda 7a1b 	vldr	s15, [sl, #108]	; 0x6c
 801191e:	bf88      	it	hi
 8011920:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 8011924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011928:	bf88      	it	hi
 801192a:	f641 131a 	movwhi	r3, #6426	; 0x191a
 801192e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011932:	ed9a 7a1c 	vldr	s14, [sl, #112]	; 0x70
 8011936:	edda 7a1d 	vldr	s15, [sl, #116]	; 0x74
 801193a:	bf88      	it	hi
 801193c:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 8011940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011944:	bf88      	it	hi
 8011946:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 801194a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801194e:	bf88      	it	hi
 8011950:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 8011954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011958:	bf84      	itt	hi
 801195a:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 801195e:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8011962:	2304      	movs	r3, #4
 8011964:	9303      	str	r3, [sp, #12]
 8011966:	2302      	movs	r3, #2
 8011968:	9301      	str	r3, [sp, #4]
 801196a:	9a01      	ldr	r2, [sp, #4]
 801196c:	9202      	str	r2, [sp, #8]
 801196e:	4613      	mov	r3, r2
 8011970:	f102 0901 	add.w	r9, r2, #1
 8011974:	2b1e      	cmp	r3, #30
 8011976:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801197a:	9201      	str	r2, [sp, #4]
 801197c:	bf18      	it	ne
 801197e:	2701      	movne	r7, #1
 8011980:	d050      	beq.n	8011a24 <m_kalman_3gyro.isra.0.constprop.0+0xb3c>
 8011982:	9b01      	ldr	r3, [sp, #4]
 8011984:	9700      	str	r7, [sp, #0]
 8011986:	443b      	add	r3, r7
 8011988:	2b1f      	cmp	r3, #31
 801198a:	bfa8      	it	ge
 801198c:	231f      	movge	r3, #31
 801198e:	463a      	mov	r2, r7
 8011990:	eba3 0802 	sub.w	r8, r3, r2
 8011994:	f1b8 0f00 	cmp.w	r8, #0
 8011998:	461f      	mov	r7, r3
 801199a:	dd3d      	ble.n	8011a18 <m_kalman_3gyro.isra.0.constprop.0+0xb30>
 801199c:	4616      	mov	r6, r2
 801199e:	464d      	mov	r5, r9
 80119a0:	2401      	movs	r4, #1
 80119a2:	e008      	b.n	80119b6 <m_kalman_3gyro.isra.0.constprop.0+0xace>
 80119a4:	3501      	adds	r5, #1
 80119a6:	42af      	cmp	r7, r5
 80119a8:	f80c 2c01 	strb.w	r2, [ip, #-1]
 80119ac:	f000 8402 	beq.w	80121b4 <m_kalman_3gyro.isra.0.constprop.0+0x12cc>
 80119b0:	3401      	adds	r4, #1
 80119b2:	45a0      	cmp	r8, r4
 80119b4:	db29      	blt.n	8011a0a <m_kalman_3gyro.isra.0.constprop.0+0xb22>
 80119b6:	f106 3eff 	add.w	lr, r6, #4294967295
 80119ba:	1e69      	subs	r1, r5, #1
 80119bc:	f91b 300e 	ldrsb.w	r3, [fp, lr]
 80119c0:	f91b 2001 	ldrsb.w	r2, [fp, r1]
 80119c4:	eb0a 0c83 	add.w	ip, sl, r3, lsl #2
 80119c8:	eb0a 0082 	add.w	r0, sl, r2, lsl #2
 80119cc:	ed1c 7a01 	vldr	s14, [ip, #-4]
 80119d0:	ed50 7a01 	vldr	s15, [r0, #-4]
 80119d4:	a88b      	add	r0, sp, #556	; 0x22c
 80119d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119da:	eb00 0c04 	add.w	ip, r0, r4
 80119de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e2:	4660      	mov	r0, ip
 80119e4:	d8de      	bhi.n	80119a4 <m_kalman_3gyro.isra.0.constprop.0+0xabc>
 80119e6:	3601      	adds	r6, #1
 80119e8:	454e      	cmp	r6, r9
 80119ea:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80119ee:	d1df      	bne.n	80119b0 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 80119f0:	42bd      	cmp	r5, r7
 80119f2:	eba7 0205 	sub.w	r2, r7, r5
 80119f6:	4459      	add	r1, fp
 80119f8:	dada      	bge.n	80119b0 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 80119fa:	443c      	add	r4, r7
 80119fc:	1b64      	subs	r4, r4, r5
 80119fe:	3401      	adds	r4, #1
 8011a00:	f007 fc7a 	bl	80192f8 <memcpy>
 8011a04:	45a0      	cmp	r8, r4
 8011a06:	463d      	mov	r5, r7
 8011a08:	dad5      	bge.n	80119b6 <m_kalman_3gyro.isra.0.constprop.0+0xace>
 8011a0a:	9b00      	ldr	r3, [sp, #0]
 8011a0c:	1e58      	subs	r0, r3, #1
 8011a0e:	4458      	add	r0, fp
 8011a10:	4642      	mov	r2, r8
 8011a12:	a98b      	add	r1, sp, #556	; 0x22c
 8011a14:	f007 fc70 	bl	80192f8 <memcpy>
 8011a18:	9b02      	ldr	r3, [sp, #8]
 8011a1a:	eb07 0903 	add.w	r9, r7, r3
 8011a1e:	f1b9 0f1e 	cmp.w	r9, #30
 8011a22:	ddae      	ble.n	8011982 <m_kalman_3gyro.isra.0.constprop.0+0xa9a>
 8011a24:	9b03      	ldr	r3, [sp, #12]
 8011a26:	3b01      	subs	r3, #1
 8011a28:	9303      	str	r3, [sp, #12]
 8011a2a:	d19e      	bne.n	801196a <m_kalman_3gyro.isra.0.constprop.0+0xa82>
 8011a2c:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 8011a30:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 8011a34:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8011a38:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8011a3c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8011a40:	ed13 7a01 	vldr	s14, [r3, #-4]
 8011a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011a50:	bf4c      	ite	mi
 8011a52:	2201      	movmi	r2, #1
 8011a54:	2200      	movpl	r2, #0
 8011a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5a:	bf4c      	ite	mi
 8011a5c:	2301      	movmi	r3, #1
 8011a5e:	2300      	movpl	r3, #0
 8011a60:	429a      	cmp	r2, r3
 8011a62:	f000 83b5 	beq.w	80121d0 <m_kalman_3gyro.isra.0.constprop.0+0x12e8>
 8011a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a72:	9b06      	ldr	r3, [sp, #24]
 8011a74:	ece3 7a01 	vstmia	r3!, {s15}
 8011a78:	9306      	str	r3, [sp, #24]
 8011a7a:	9b04      	ldr	r3, [sp, #16]
 8011a7c:	3304      	adds	r3, #4
 8011a7e:	9304      	str	r3, [sp, #16]
 8011a80:	9b05      	ldr	r3, [sp, #20]
 8011a82:	2b03      	cmp	r3, #3
 8011a84:	f47f ae75 	bne.w	8011772 <m_kalman_3gyro.isra.0.constprop.0+0x88a>
 8011a88:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011a8c:	ed1f aab9 	vldr	s20, [pc, #-740]	; 80117ac <m_kalman_3gyro.isra.0.constprop.0+0x8c4>
 8011a90:	edd3 7af3 	vldr	s15, [r3, #972]	; 0x3cc
 8011a94:	edd3 6af2 	vldr	s13, [r3, #968]	; 0x3c8
 8011a98:	ed93 7af4 	vldr	s14, [r3, #976]	; 0x3d0
 8011a9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011aa0:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011aa4:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011aa8:	ee17 0a90 	vmov	r0, s15
 8011aac:	f7ee fcf0 	bl	8000490 <__aeabi_f2d>
 8011ab0:	ec41 0b10 	vmov	d0, r0, r1
 8011ab4:	f007 fe10 	bl	80196d8 <sqrt>
 8011ab8:	ec51 0b10 	vmov	r0, r1, d0
 8011abc:	f7ef f838 	bl	8000b30 <__aeabi_d2f>
 8011ac0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8011ac4:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8011ac8:	eddd 4a17 	vldr	s9, [sp, #92]	; 0x5c
 8011acc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8011ace:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8011ad2:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8011ad6:	ee6f 7aa6 	vmul.f32	s15, s31, s13
 8011ada:	ee86 7a07 	vdiv.f32	s14, s12, s14
 8011ade:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 8011ae2:	ed83 7a00 	vstr	s14, [r3]
 8011ae6:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8011aea:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8011aec:	ee24 5aa6 	vmul.f32	s10, s9, s13
 8011af0:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8011af4:	edc3 5a00 	vstr	s11, [r3]
 8011af8:	ee85 6a06 	vdiv.f32	s12, s10, s12
 8011afc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8011afe:	ee77 7a25 	vadd.f32	s15, s14, s11
 8011b02:	ee0d 0a90 	vmov	s27, r0
 8011b06:	ee24 aa8a 	vmul.f32	s20, s9, s20
 8011b0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011b0e:	eeaf aa87 	vfma.f32	s20, s31, s14
 8011b12:	ee76 7a27 	vadd.f32	s15, s12, s15
 8011b16:	ee2d 7a87 	vmul.f32	s14, s27, s14
 8011b1a:	ed83 6a00 	vstr	s12, [r3]
 8011b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011b24:	ed5f 5ade 	vldr	s11, [pc, #-888]	; 80117b0 <m_kalman_3gyro.isra.0.constprop.0+0x8c8>
 8011b28:	ed83 7a00 	vstr	s14, [r3]
 8011b2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011b32:	ee2a aa25 	vmul.f32	s20, s20, s11
 8011b36:	edc3 7a00 	vstr	s15, [r3]
 8011b3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011b3c:	ed83 aa00 	vstr	s20, [r3]
 8011b40:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011b44:	f893 38ce 	ldrb.w	r3, [r3, #2254]	; 0x8ce
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	f000 8360 	beq.w	801220e <m_kalman_3gyro.isra.0.constprop.0+0x1326>
 8011b4e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011b52:	f603 06c4 	addw	r6, r3, #2244	; 0x8c4
 8011b56:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 8011b5a:	9300      	str	r3, [sp, #0]
 8011b5c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011b60:	f503 690c 	add.w	r9, r3, #2240	; 0x8c0
 8011b64:	f603 08bc 	addw	r8, r3, #2236	; 0x8bc
 8011b68:	f603 07b8 	addw	r7, r3, #2232	; 0x8b8
 8011b6c:	ed96 7a00 	vldr	s14, [r6]
 8011b70:	9b00      	ldr	r3, [sp, #0]
 8011b72:	ed8d 7a05 	vstr	s14, [sp, #20]
 8011b76:	ed83 7a00 	vstr	s14, [r3]
 8011b7a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011b7e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8011b82:	f7ee ffd5 	bl	8000b30 <__aeabi_d2f>
 8011b86:	ed99 6a00 	vldr	s12, [r9]
 8011b8a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8011b8e:	ed86 6a00 	vstr	s12, [r6]
 8011b92:	4603      	mov	r3, r0
 8011b94:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
 8011b98:	ed8d 6a04 	vstr	s12, [sp, #16]
 8011b9c:	9301      	str	r3, [sp, #4]
 8011b9e:	f7ee ffc7 	bl	8000b30 <__aeabi_d2f>
 8011ba2:	edd8 7a00 	vldr	s15, [r8]
 8011ba6:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8011baa:	edc9 7a00 	vstr	s15, [r9]
 8011bae:	4603      	mov	r3, r0
 8011bb0:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 8011bb4:	edcd 7a02 	vstr	s15, [sp, #8]
 8011bb8:	9300      	str	r3, [sp, #0]
 8011bba:	f7ee ffb9 	bl	8000b30 <__aeabi_d2f>
 8011bbe:	eddd 7a02 	vldr	s15, [sp, #8]
 8011bc2:	ed9d 6a04 	vldr	s12, [sp, #16]
 8011bc6:	edd7 6a00 	vldr	s13, [r7]
 8011bca:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011bce:	edc8 6a00 	vstr	s13, [r8]
 8011bd2:	ee07 0a10 	vmov	s14, r0
 8011bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bda:	ed9d 7a00 	vldr	s14, [sp]
 8011bde:	edcd 6a00 	vstr	s13, [sp]
 8011be2:	eee7 7a06 	vfma.f32	s15, s14, s12
 8011be6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011bea:	edcd 7a02 	vstr	s15, [sp, #8]
 8011bee:	f7ee ff9f 	bl	8000b30 <__aeabi_d2f>
 8011bf2:	eddd 6a00 	vldr	s13, [sp]
 8011bf6:	eddd 7a02 	vldr	s15, [sp, #8]
 8011bfa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011bfe:	ee07 0a10 	vmov	s14, r0
 8011c02:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c06:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8011c0a:	ed9d 7a05 	vldr	s14, [sp, #20]
 8011c0e:	eddd 6a01 	vldr	s13, [sp, #4]
 8011c12:	ed87 aa00 	vstr	s20, [r7]
 8011c16:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c1a:	edcd 7a00 	vstr	s15, [sp]
 8011c1e:	f7ee ff87 	bl	8000b30 <__aeabi_d2f>
 8011c22:	eddd 7a00 	vldr	s15, [sp]
 8011c26:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8011c28:	ee07 0a10 	vmov	s14, r0
 8011c2c:	eeea 7a07 	vfma.f32	s15, s20, s14
 8011c30:	2200      	movs	r2, #0
 8011c32:	2300      	movs	r3, #0
 8011c34:	edc1 7a00 	vstr	s15, [r1]
 8011c38:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 8011c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c40:	eeb0 aa67 	vmov.f32	s20, s15
 8011c44:	f7ee fef8 	bl	8000a38 <__aeabi_dcmple>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	f040 84e8 	bne.w	801261e <m_kalman_3gyro.isra.0.constprop.0+0x1736>
 8011c4e:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 8011c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c56:	4bb4      	ldr	r3, [pc, #720]	; (8011f28 <m_kalman_3gyro.isra.0.constprop.0+0x1040>)
 8011c58:	2200      	movs	r2, #0
 8011c5a:	f7ee fed9 	bl	8000a10 <__aeabi_dcmpeq>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	f042 8524 	bne.w	80146ac <m_kalman_3gyro.isra.0.constprop.0+0x37c4>
 8011c64:	eddd 6acc 	vldr	s13, [sp, #816]	; 0x330
 8011c68:	ed9d 7ab3 	vldr	s14, [sp, #716]	; 0x2cc
 8011c6c:	eddd 7acd 	vldr	s15, [sp, #820]	; 0x334
 8011c70:	ed9d 6ab4 	vldr	s12, [sp, #720]	; 0x2d0
 8011c74:	eddd 5ab2 	vldr	s11, [sp, #712]	; 0x2c8
 8011c78:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8011c7c:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8011c80:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8011c84:	edcd 6acc 	vstr	s13, [sp, #816]	; 0x330
 8011c88:	ed8d 7ab3 	vstr	s14, [sp, #716]	; 0x2cc
 8011c8c:	eddd 6ace 	vldr	s13, [sp, #824]	; 0x338
 8011c90:	ed9d 7ab5 	vldr	s14, [sp, #724]	; 0x2d4
 8011c94:	edcd 7acd 	vstr	s15, [sp, #820]	; 0x334
 8011c98:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8011c9c:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8011ca0:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8011ca4:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8011ca8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8011cac:	ed8d 6ab4 	vstr	s12, [sp, #720]	; 0x2d0
 8011cb0:	edcd 6ace 	vstr	s13, [sp, #824]	; 0x338
 8011cb4:	ed9d 6ab6 	vldr	s12, [sp, #728]	; 0x2d8
 8011cb8:	eddd 6ad0 	vldr	s13, [sp, #832]	; 0x340
 8011cbc:	ed8d 7ab5 	vstr	s14, [sp, #724]	; 0x2d4
 8011cc0:	edcd 7acf 	vstr	s15, [sp, #828]	; 0x33c
 8011cc4:	ed9d 7ab7 	vldr	s14, [sp, #732]	; 0x2dc
 8011cc8:	eddd 7ad1 	vldr	s15, [sp, #836]	; 0x344
 8011ccc:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8011cd0:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8011cd4:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8011cd8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8011cdc:	ed8d 6ab6 	vstr	s12, [sp, #728]	; 0x2d8
 8011ce0:	edcd 6ad0 	vstr	s13, [sp, #832]	; 0x340
 8011ce4:	ed9d 6ab8 	vldr	s12, [sp, #736]	; 0x2e0
 8011ce8:	eddd 6ad2 	vldr	s13, [sp, #840]	; 0x348
 8011cec:	ed8d 7ab7 	vstr	s14, [sp, #732]	; 0x2dc
 8011cf0:	edcd 7ad1 	vstr	s15, [sp, #836]	; 0x344
 8011cf4:	ed9d 7ab9 	vldr	s14, [sp, #740]	; 0x2e4
 8011cf8:	eddd 7ad3 	vldr	s15, [sp, #844]	; 0x34c
 8011cfc:	ee65 5a8b 	vmul.f32	s11, s11, s22
 8011d00:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8011d04:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8011d08:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8011d0c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8011d10:	ed8d 6ab8 	vstr	s12, [sp, #736]	; 0x2e0
 8011d14:	edcd 6ad2 	vstr	s13, [sp, #840]	; 0x348
 8011d18:	ed8d 7ab9 	vstr	s14, [sp, #740]	; 0x2e4
 8011d1c:	edcd 7ad3 	vstr	s15, [sp, #844]	; 0x34c
 8011d20:	edcd 5ab2 	vstr	s11, [sp, #712]	; 0x2c8
 8011d24:	eddd 5aba 	vldr	s11, [sp, #744]	; 0x2e8
 8011d28:	eddd 7ad4 	vldr	s15, [sp, #848]	; 0x350
 8011d2c:	ed9d 6abb 	vldr	s12, [sp, #748]	; 0x2ec
 8011d30:	eddd 6ad5 	vldr	s13, [sp, #852]	; 0x354
 8011d34:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 8011d38:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8011d3c:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8011d40:	edcd 7ad4 	vstr	s15, [sp, #848]	; 0x350
 8011d44:	eddd 7ad6 	vldr	s15, [sp, #856]	; 0x358
 8011d48:	ed8d 6abb 	vstr	s12, [sp, #748]	; 0x2ec
 8011d4c:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8011d50:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8011d54:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8011d58:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 8011d5c:	edcd 6ad5 	vstr	s13, [sp, #852]	; 0x354
 8011d60:	ed8d 7abc 	vstr	s14, [sp, #752]	; 0x2f0
 8011d64:	eddd 6ad7 	vldr	s13, [sp, #860]	; 0x35c
 8011d68:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 8011d6c:	edcd 7ad6 	vstr	s15, [sp, #856]	; 0x358
 8011d70:	eddd 7ad8 	vldr	s15, [sp, #864]	; 0x360
 8011d74:	ee65 5a8b 	vmul.f32	s11, s11, s22
 8011d78:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8011d7c:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8011d80:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8011d84:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8011d88:	a9bf      	add	r1, sp, #764	; 0x2fc
 8011d8a:	edcd 5aba 	vstr	s11, [sp, #744]	; 0x2e8
 8011d8e:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 8011d92:	edcd 6ad7 	vstr	s13, [sp, #860]	; 0x35c
 8011d96:	a8b2      	add	r0, sp, #712	; 0x2c8
 8011d98:	ed8d 7abe 	vstr	s14, [sp, #760]	; 0x2f8
 8011d9c:	eeb0 0a4a 	vmov.f32	s0, s20
 8011da0:	ed8d bad8 	vstr	s22, [sp, #864]	; 0x360
 8011da4:	f7fd ff1a 	bl	800fbdc <m_interp1q_constrain>
 8011da8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011daa:	eeb0 6a40 	vmov.f32	s12, s0
 8011dae:	ed83 0a00 	vstr	s0, [r3]
 8011db2:	a9d9      	add	r1, sp, #868	; 0x364
 8011db4:	a8cc      	add	r0, sp, #816	; 0x330
 8011db6:	eeb0 0a4a 	vmov.f32	s0, s20
 8011dba:	f7fd ff0f 	bl	800fbdc <m_interp1q_constrain>
 8011dbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011dc0:	ed83 0a00 	vstr	s0, [r3]
 8011dc4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011dc8:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8011dcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011dce:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 8011dd2:	ed83 6a00 	vstr	s12, [r3]
 8011dd6:	eef0 7ae7 	vabs.f32	s15, s15
 8011dda:	ee17 0a90 	vmov	r0, s15
 8011dde:	f7ee fb57 	bl	8000490 <__aeabi_f2d>
 8011de2:	ec41 0b10 	vmov	d0, r0, r1
 8011de6:	f007 fa9f 	bl	8019328 <floor>
 8011dea:	ec51 0b10 	vmov	r0, r1, d0
 8011dee:	f7ee fe57 	bl	8000aa0 <__aeabi_d2iz>
 8011df2:	f8dd 36c4 	ldr.w	r3, [sp, #1732]	; 0x6c4
 8011df6:	7018      	strb	r0, [r3, #0]
 8011df8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011dfc:	ed93 ba2d 	vldr	s22, [r3, #180]	; 0xb4
 8011e00:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8011e04:	4b49      	ldr	r3, [pc, #292]	; (8011f2c <m_kalman_3gyro.isra.0.constprop.0+0x1044>)
 8011e06:	ee3c bacb 	vsub.f32	s22, s25, s22
 8011e0a:	ee7d 7a67 	vsub.f32	s15, s26, s15
 8011e0e:	eeb0 bacb 	vabs.f32	s22, s22
 8011e12:	eef0 7ae7 	vabs.f32	s15, s15
 8011e16:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8011e1a:	ed83 ba6b 	vstr	s22, [r3, #428]	; 0x1ac
 8011e1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8011e20:	edcd 7a00 	vstr	s15, [sp]
 8011e24:	edc3 7a00 	vstr	s15, [r3]
 8011e28:	ee17 0a90 	vmov	r0, s15
 8011e2c:	f7ee fb30 	bl	8000490 <__aeabi_f2d>
 8011e30:	a33b      	add	r3, pc, #236	; (adr r3, 8011f20 <m_kalman_3gyro.isra.0.constprop.0+0x1038>)
 8011e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e36:	f7ee fe13 	bl	8000a60 <__aeabi_dcmpgt>
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	f000 83ec 	beq.w	8012618 <m_kalman_3gyro.isra.0.constprop.0+0x1730>
 8011e40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8011f30 <m_kalman_3gyro.isra.0.constprop.0+0x1048>
 8011e44:	eddd 7a00 	vldr	s15, [sp]
 8011e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e50:	f302 8362 	bgt.w	8014518 <m_kalman_3gyro.isra.0.constprop.0+0x3630>
 8011e54:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011f34 <m_kalman_3gyro.isra.0.constprop.0+0x104c>
 8011e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e5c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011e64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011e68:	ee17 0a10 	vmov	r0, s14
 8011e6c:	f7ee fb10 	bl	8000490 <__aeabi_f2d>
 8011e70:	4606      	mov	r6, r0
 8011e72:	460f      	mov	r7, r1
 8011e74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011e78:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 8011e7c:	eef0 7ae7 	vabs.f32	s15, s15
 8011e80:	ee17 0a90 	vmov	r0, s15
 8011e84:	f7ee fb04 	bl	8000490 <__aeabi_f2d>
 8011e88:	4b2b      	ldr	r3, [pc, #172]	; (8011f38 <m_kalman_3gyro.isra.0.constprop.0+0x1050>)
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	f7ee f9a0 	bl	80001d0 <__aeabi_dsub>
 8011e90:	4632      	mov	r2, r6
 8011e92:	463b      	mov	r3, r7
 8011e94:	4604      	mov	r4, r0
 8011e96:	460d      	mov	r5, r1
 8011e98:	f7ee fdd8 	bl	8000a4c <__aeabi_dcmpge>
 8011e9c:	b908      	cbnz	r0, 8011ea2 <m_kalman_3gyro.isra.0.constprop.0+0xfba>
 8011e9e:	4634      	mov	r4, r6
 8011ea0:	463d      	mov	r5, r7
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	f7ee fe43 	bl	8000b30 <__aeabi_d2f>
 8011eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011eac:	6018      	str	r0, [r3, #0]
 8011eae:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011eb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011eb6:	b19b      	cbz	r3, 8011ee0 <m_kalman_3gyro.isra.0.constprop.0+0xff8>
 8011eb8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011ebc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ec0:	b973      	cbnz	r3, 8011ee0 <m_kalman_3gyro.isra.0.constprop.0+0xff8>
 8011ec2:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 8011ec6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011ec8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ed0:	ed93 7a00 	vldr	s14, [r3]
 8011ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011edc:	f102 84b9 	bmi.w	8014852 <m_kalman_3gyro.isra.0.constprop.0+0x396a>
 8011ee0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011ee4:	3340      	adds	r3, #64	; 0x40
 8011ee6:	9304      	str	r3, [sp, #16]
 8011ee8:	9b07      	ldr	r3, [sp, #28]
 8011eea:	edd3 7a00 	vldr	s15, [r3]
 8011eee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef6:	f04f 0400 	mov.w	r4, #0
 8011efa:	d123      	bne.n	8011f44 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 8011efc:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f08:	4619      	mov	r1, r3
 8011f0a:	d11b      	bne.n	8011f44 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 8011f0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011f10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f18:	f002 8425 	beq.w	8014766 <m_kalman_3gyro.isra.0.constprop.0+0x387e>
 8011f1c:	e012      	b.n	8011f44 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 8011f1e:	bf00      	nop
 8011f20:	9999999a 	.word	0x9999999a
 8011f24:	3fb99999 	.word	0x3fb99999
 8011f28:	3ff00000 	.word	0x3ff00000
 8011f2c:	200013d8 	.word	0x200013d8
 8011f30:	3fb77778 	.word	0x3fb77778
 8011f34:	3dcccccd 	.word	0x3dcccccd
 8011f38:	3fe00000 	.word	0x3fe00000
 8011f3c:	3f99999a 	.word	0x3f99999a
 8011f40:	3f4ccccd 	.word	0x3f4ccccd
 8011f44:	f50d 61d4 	add.w	r1, sp, #1696	; 0x6a0
 8011f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	2300      	movs	r3, #0
 8011f50:	f7ee fd5e 	bl	8000a10 <__aeabi_dcmpeq>
 8011f54:	2800      	cmp	r0, #0
 8011f56:	d144      	bne.n	8011fe2 <m_kalman_3gyro.isra.0.constprop.0+0x10fa>
 8011f58:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 8011f5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f5e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011f62:	edd3 7a00 	vldr	s15, [r3]
 8011f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f6e:	d538      	bpl.n	8011fe2 <m_kalman_3gyro.isra.0.constprop.0+0x10fa>
 8011f70:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011f74:	9907      	ldr	r1, [sp, #28]
 8011f76:	edc3 9a12 	vstr	s19, [r3, #72]	; 0x48
 8011f7a:	ed83 9a15 	vstr	s18, [r3, #84]	; 0x54
 8011f7e:	edc3 8a18 	vstr	s17, [r3, #96]	; 0x60
 8011f82:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 8011f86:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 8011f8a:	ed83 8a17 	vstr	s16, [r3, #92]	; 0x5c
 8011f8e:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 8011f92:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 8011f96:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 8011f9a:	9804      	ldr	r0, [sp, #16]
 8011f9c:	f7fd fb14 	bl	800f5c8 <m_dcm2q_eml>
 8011fa0:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	700a      	strb	r2, [r1, #0]
 8011fa8:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8011fac:	2300      	movs	r3, #0
 8011fae:	ed82 da2b 	vstr	s26, [r2, #172]	; 0xac
 8011fb2:	edc2 ca2d 	vstr	s25, [r2, #180]	; 0xb4
 8011fb6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8011fba:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 8011fbe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8011fc2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8011fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011fca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8011fce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8011fd2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8011fd6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8011fda:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 8011fde:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 8011fe2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8011fe6:	9904      	ldr	r1, [sp, #16]
 8011fe8:	9807      	ldr	r0, [sp, #28]
 8011fea:	2300      	movs	r3, #0
 8011fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8011ff0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8011ff4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8011ff8:	f7fc feb2 	bl	800ed60 <m_q2dcm_eml>
 8011ffc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012000:	ed93 8a2b 	vldr	s16, [r3, #172]	; 0xac
 8012004:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012008:	eee8 7a48 	vfms.f32	s15, s16, s16
 801200c:	ee17 0a90 	vmov	r0, s15
 8012010:	f7ee fa3e 	bl	8000490 <__aeabi_f2d>
 8012014:	ec41 0b10 	vmov	d0, r0, r1
 8012018:	f007 fb5e 	bl	80196d8 <sqrt>
 801201c:	ec51 0b10 	vmov	r0, r1, d0
 8012020:	f7ee fd86 	bl	8000b30 <__aeabi_d2f>
 8012024:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012028:	ed9d 9a57 	vldr	s18, [sp, #348]	; 0x15c
 801202c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8012030:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8012034:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8012038:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
 801203c:	ed93 4a16 	vldr	s8, [r3, #88]	; 0x58
 8012040:	edd3 3a13 	vldr	s7, [r3, #76]	; 0x4c
 8012044:	eddd 9a58 	vldr	s19, [sp, #352]	; 0x160
 8012048:	eddd 8a56 	vldr	s17, [sp, #344]	; 0x158
 801204c:	ed83 da22 	vstr	s26, [r3, #136]	; 0x88
 8012050:	ee07 0a10 	vmov	s14, r0
 8012054:	ee68 4a26 	vmul.f32	s9, s16, s13
 8012058:	ee28 5a25 	vmul.f32	s10, s16, s11
 801205c:	eee7 4a27 	vfma.f32	s9, s14, s15
 8012060:	ee68 7a06 	vmul.f32	s15, s16, s12
 8012064:	eea7 5a23 	vfma.f32	s10, s14, s7
 8012068:	eee7 7a04 	vfma.f32	s15, s14, s8
 801206c:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 8012070:	eddd 3a53 	vldr	s7, [sp, #332]	; 0x14c
 8012074:	ed9d 4a54 	vldr	s8, [sp, #336]	; 0x150
 8012078:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
 801207c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012080:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8012084:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 8012088:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8011f3c <m_kalman_3gyro.isra.0.constprop.0+0x1054>
 801208c:	edc3 aa23 	vstr	s21, [r3, #140]	; 0x8c
 8012090:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8012094:	ee34 4a45 	vsub.f32	s8, s8, s10
 8012098:	ee79 5a65 	vsub.f32	s11, s18, s11
 801209c:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80120a0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80120a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80120a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ac:	edc3 ca24 	vstr	s25, [r3, #144]	; 0x90
 80120b0:	edc3 4a82 	vstr	s9, [r3, #520]	; 0x208
 80120b4:	edc3 3a19 	vstr	s7, [r3, #100]	; 0x64
 80120b8:	ed83 5a83 	vstr	s10, [r3, #524]	; 0x20c
 80120bc:	ed83 4a1a 	vstr	s8, [r3, #104]	; 0x68
 80120c0:	edc3 5a1d 	vstr	s11, [r3, #116]	; 0x74
 80120c4:	ed83 6a1e 	vstr	s12, [r3, #120]	; 0x78
 80120c8:	edc3 6a1c 	vstr	s13, [r3, #112]	; 0x70
 80120cc:	d506      	bpl.n	80120dc <m_kalman_3gyro.isra.0.constprop.0+0x11f4>
 80120ce:	ed1f 7a64 	vldr	s14, [pc, #-400]	; 8011f40 <m_kalman_3gyro.isra.0.constprop.0+0x1058>
 80120d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80120d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120da:	dc01      	bgt.n	80120e0 <m_kalman_3gyro.isra.0.constprop.0+0x11f8>
 80120dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80120e0:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 80120e4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80120e6:	eef0 7ae7 	vabs.f32	s15, s15
 80120ea:	ee3f 6aa7 	vadd.f32	s12, s31, s15
 80120ee:	edc3 7a00 	vstr	s15, [r3]
 80120f2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80120f4:	a99e      	add	r1, sp, #632	; 0x278
 80120f6:	ed83 6a00 	vstr	s12, [r3]
 80120fa:	eeb0 0a46 	vmov.f32	s0, s12
 80120fe:	a894      	add	r0, sp, #592	; 0x250
 8012100:	f7fd fd1e 	bl	800fb40 <m_b_interp1q_constrain>
 8012104:	a9a8      	add	r1, sp, #672	; 0x2a0
 8012106:	eeb0 8a40 	vmov.f32	s16, s0
 801210a:	a894      	add	r0, sp, #592	; 0x250
 801210c:	eeb0 0a46 	vmov.f32	s0, s12
 8012110:	f7fd fd16 	bl	800fb40 <m_b_interp1q_constrain>
 8012114:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012116:	edd3 7a00 	vldr	s15, [r3]
 801211a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012122:	eef0 aa40 	vmov.f32	s21, s0
 8012126:	f340 8297 	ble.w	8012658 <m_kalman_3gyro.isra.0.constprop.0+0x1770>
 801212a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801212e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012136:	f142 81f3 	bpl.w	8014520 <m_kalman_3gyro.isra.0.constprop.0+0x3638>
 801213a:	2107      	movs	r1, #7
 801213c:	2402      	movs	r4, #2
 801213e:	2301      	movs	r3, #1
 8012140:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8012144:	4618      	mov	r0, r3
 8012146:	e008      	b.n	801215a <m_kalman_3gyro.isra.0.constprop.0+0x1272>
 8012148:	ed92 7a00 	vldr	s14, [r2]
 801214c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012154:	f282 84ea 	bge.w	8014b2c <m_kalman_3gyro.isra.0.constprop.0+0x3c44>
 8012158:	4619      	mov	r1, r3
 801215a:	180b      	adds	r3, r1, r0
 801215c:	eb05 0253 	add.w	r2, r5, r3, lsr #1
 8012160:	f50d 66c4 	add.w	r6, sp, #1568	; 0x620
 8012164:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8012168:	42a1      	cmp	r1, r4
 801216a:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 801216e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8012172:	d8e9      	bhi.n	8012148 <m_kalman_3gyro.isra.0.constprop.0+0x1260>
 8012174:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8012178:	3801      	subs	r0, #1
 801217a:	0082      	lsls	r2, r0, #2
 801217c:	3204      	adds	r2, #4
 801217e:	ab59      	add	r3, sp, #356	; 0x164
 8012180:	1899      	adds	r1, r3, r2
 8012182:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8012186:	edd3 6a00 	vldr	s13, [r3]
 801218a:	ed91 7a00 	vldr	s14, [r1]
 801218e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012192:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012196:	ab60      	add	r3, sp, #384	; 0x180
 8012198:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801219c:	441a      	add	r2, r3
 801219e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80121a2:	edd0 ba00 	vldr	s23, [r0]
 80121a6:	edd2 7a00 	vldr	s15, [r2]
 80121aa:	ee77 7aeb 	vsub.f32	s15, s15, s23
 80121ae:	eee6 baa7 	vfma.f32	s23, s13, s15
 80121b2:	e253      	b.n	801265c <m_kalman_3gyro.isra.0.constprop.0+0x1774>
 80121b4:	454e      	cmp	r6, r9
 80121b6:	f6bf abfb 	bge.w	80119b0 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 80121ba:	eba9 0206 	sub.w	r2, r9, r6
 80121be:	eb0b 010e 	add.w	r1, fp, lr
 80121c2:	444c      	add	r4, r9
 80121c4:	1ba4      	subs	r4, r4, r6
 80121c6:	f007 f897 	bl	80192f8 <memcpy>
 80121ca:	464e      	mov	r6, r9
 80121cc:	f7ff bbf0 	b.w	80119b0 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 80121d0:	eef4 7a4a 	vcmp.f32	s15, s20
 80121d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d8:	f43f ac45 	beq.w	8011a66 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 80121dc:	eef4 7a6d 	vcmp.f32	s15, s27
 80121e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e4:	f43f ac3f 	beq.w	8011a66 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 80121e8:	eeb4 7a4a 	vcmp.f32	s14, s20
 80121ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f0:	f43f ac39 	beq.w	8011a66 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 80121f4:	eeb4 7a6d 	vcmp.f32	s14, s27
 80121f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121fc:	f43f ac33 	beq.w	8011a66 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 8012200:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012204:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012208:	eee7 7a26 	vfma.f32	s15, s14, s13
 801220c:	e431      	b.n	8011a72 <m_kalman_3gyro.isra.0.constprop.0+0xb8a>
 801220e:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012212:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012216:	f8dd 66d0 	ldr.w	r6, [sp, #1744]	; 0x6d0
 801221a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801221e:	f602 07b8 	addw	r7, r2, #2232	; 0x8b8
 8012222:	2301      	movs	r3, #1
 8012224:	f602 08bc 	addw	r8, r2, #2236	; 0x8bc
 8012228:	f502 690c 	add.w	r9, r2, #2240	; 0x8c0
 801222c:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8012230:	f882 38ce 	strb.w	r3, [r2, #2254]	; 0x8ce
 8012234:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 8012238:	ed87 aa00 	vstr	s20, [r7]
 801223c:	ed88 aa00 	vstr	s20, [r8]
 8012240:	ed89 aa00 	vstr	s20, [r9]
 8012244:	f7ed ffc6 	bl	80001d4 <__adddf3>
 8012248:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801224c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012250:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 8012254:	f606 06c4 	addw	r6, r6, #2244	; 0x8c4
 8012258:	9300      	str	r3, [sp, #0]
 801225a:	ed86 aa00 	vstr	s20, [r6]
 801225e:	e9d2 2308 	ldrd	r2, r3, [r2, #32]
 8012262:	f7ed ffb7 	bl	80001d4 <__adddf3>
 8012266:	9b00      	ldr	r3, [sp, #0]
 8012268:	ed83 aa00 	vstr	s20, [r3]
 801226c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012270:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8012274:	f7ed ffae 	bl	80001d4 <__adddf3>
 8012278:	4622      	mov	r2, r4
 801227a:	462b      	mov	r3, r5
 801227c:	f7ed ffaa 	bl	80001d4 <__adddf3>
 8012280:	4602      	mov	r2, r0
 8012282:	460b      	mov	r3, r1
 8012284:	2000      	movs	r0, #0
 8012286:	4920      	ldr	r1, [pc, #128]	; (8012308 <m_kalman_3gyro.isra.0.constprop.0+0x1420>)
 8012288:	f7ee fa84 	bl	8000794 <__aeabi_ddiv>
 801228c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012290:	4604      	mov	r4, r0
 8012292:	460d      	mov	r5, r1
 8012294:	4622      	mov	r2, r4
 8012296:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801229a:	462b      	mov	r3, r5
 801229c:	f7ee f950 	bl	8000540 <__aeabi_dmul>
 80122a0:	ec41 0b17 	vmov	d7, r0, r1
 80122a4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80122a8:	4622      	mov	r2, r4
 80122aa:	ed81 7b02 	vstr	d7, [r1, #8]
 80122ae:	462b      	mov	r3, r5
 80122b0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80122b4:	f7ee f944 	bl	8000540 <__aeabi_dmul>
 80122b8:	ec41 0b17 	vmov	d7, r0, r1
 80122bc:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80122c0:	4622      	mov	r2, r4
 80122c2:	ed81 7b04 	vstr	d7, [r1, #16]
 80122c6:	462b      	mov	r3, r5
 80122c8:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80122cc:	f7ee f938 	bl	8000540 <__aeabi_dmul>
 80122d0:	ec41 0b17 	vmov	d7, r0, r1
 80122d4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80122d8:	4622      	mov	r2, r4
 80122da:	ed81 7b06 	vstr	d7, [r1, #24]
 80122de:	462b      	mov	r3, r5
 80122e0:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80122e4:	f7ee f92c 	bl	8000540 <__aeabi_dmul>
 80122e8:	4622      	mov	r2, r4
 80122ea:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 80122ee:	462b      	mov	r3, r5
 80122f0:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80122f4:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 80122f8:	f7ee f922 	bl	8000540 <__aeabi_dmul>
 80122fc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012300:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 8012304:	e432      	b.n	8011b6c <m_kalman_3gyro.isra.0.constprop.0+0xc84>
 8012306:	bf00      	nop
 8012308:	3ff00000 	.word	0x3ff00000
 801230c:	f50d 67d5 	add.w	r7, sp, #1704	; 0x6a8
 8012310:	ed97 7b00 	vldr	d7, [r7]
 8012314:	2101      	movs	r1, #1
 8012316:	af43      	add	r7, sp, #268	; 0x10c
 8012318:	f44f 7280 	mov.w	r2, #256	; 0x100
 801231c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 8012320:	2600      	movs	r6, #0
 8012322:	e9c3 5512 	strd	r5, r5, [r3, #72]	; 0x48
 8012326:	e9c3 5515 	strd	r5, r5, [r3, #84]	; 0x54
 801232a:	645d      	str	r5, [r3, #68]	; 0x44
 801232c:	f883 18cd 	strb.w	r1, [r3, #2253]	; 0x8cd
 8012330:	861a      	strh	r2, [r3, #48]	; 0x30
 8012332:	65dd      	str	r5, [r3, #92]	; 0x5c
 8012334:	ed83 ba18 	vstr	s22, [r3, #96]	; 0x60
 8012338:	ed83 ba14 	vstr	s22, [r3, #80]	; 0x50
 801233c:	ed83 ba10 	vstr	s22, [r3, #64]	; 0x40
 8012340:	4629      	mov	r1, r5
 8012342:	2230      	movs	r2, #48	; 0x30
 8012344:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8012348:	603e      	str	r6, [r7, #0]
 801234a:	607e      	str	r6, [r7, #4]
 801234c:	60fe      	str	r6, [r7, #12]
 801234e:	9707      	str	r7, [sp, #28]
 8012350:	9645      	str	r6, [sp, #276]	; 0x114
 8012352:	f006 ffdf 	bl	8019314 <memset>
 8012356:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801235a:	4bb7      	ldr	r3, [pc, #732]	; (8012638 <m_kalman_3gyro.isra.0.constprop.0+0x1750>)
 801235c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8012360:	4613      	mov	r3, r2
 8012362:	f8c2 6094 	str.w	r6, [r2, #148]	; 0x94
 8012366:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
 801236a:	f8c2 609c 	str.w	r6, [r2, #156]	; 0x9c
 801236e:	ed82 ba2c 	vstr	s22, [r2, #176]	; 0xb0
 8012372:	ed82 ba2d 	vstr	s22, [r2, #180]	; 0xb4
 8012376:	4629      	mov	r1, r5
 8012378:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801237c:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8012380:	f006 ffc8 	bl	8019314 <memset>
 8012384:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012388:	4bac      	ldr	r3, [pc, #688]	; (801263c <m_kalman_3gyro.isra.0.constprop.0+0x1754>)
 801238a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 801238e:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8012392:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 8012396:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 801239a:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 801239e:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 80123a2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 80123a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80123aa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 80123ae:	4613      	mov	r3, r2
 80123b0:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80123b4:	2500      	movs	r5, #0
 80123b6:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 80123ba:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
 80123be:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
 80123c2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 80123c6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 80123ca:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
 80123ce:	f503 7817 	add.w	r8, r3, #604	; 0x25c
 80123d2:	e9c2 5501 	strd	r5, r5, [r2, #4]
 80123d6:	e9c2 5504 	strd	r5, r5, [r2, #16]
 80123da:	6195      	str	r5, [r2, #24]
 80123dc:	e9c3 5590 	strd	r5, r5, [r3, #576]	; 0x240
 80123e0:	e9c3 5593 	strd	r5, r5, [r3, #588]	; 0x24c
 80123e4:	f8c3 523c 	str.w	r5, [r3, #572]	; 0x23c
 80123e8:	f8c3 9234 	str.w	r9, [r3, #564]	; 0x234
 80123ec:	f8c3 9224 	str.w	r9, [r3, #548]	; 0x224
 80123f0:	f8c3 9214 	str.w	r9, [r3, #532]	; 0x214
 80123f4:	f8c3 5254 	str.w	r5, [r3, #596]	; 0x254
 80123f8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80123fc:	4629      	mov	r1, r5
 80123fe:	f8c3 9258 	str.w	r9, [r3, #600]	; 0x258
 8012402:	f8c3 9248 	str.w	r9, [r3, #584]	; 0x248
 8012406:	f8c3 9238 	str.w	r9, [r3, #568]	; 0x238
 801240a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801240e:	4640      	mov	r0, r8
 8012410:	f006 ff80 	bl	8019314 <memset>
 8012414:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012418:	2700      	movs	r7, #0
 801241a:	4629      	mov	r1, r5
 801241c:	f8c3 73c4 	str.w	r7, [r3, #964]	; 0x3c4
 8012420:	f8c3 73c8 	str.w	r7, [r3, #968]	; 0x3c8
 8012424:	f8c3 73cc 	str.w	r7, [r3, #972]	; 0x3cc
 8012428:	f8c3 73d0 	str.w	r7, [r3, #976]	; 0x3d0
 801242c:	2230      	movs	r2, #48	; 0x30
 801242e:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 8012432:	f006 ff6f 	bl	8019314 <memset>
 8012436:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801243a:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801243e:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012442:	f203 4104 	addw	r1, r3, #1028	; 0x404
 8012446:	f503 6582 	add.w	r5, r3, #1040	; 0x410
 801244a:	f203 4614 	addw	r6, r3, #1044	; 0x414
 801244e:	f503 6a81 	add.w	sl, r3, #1032	; 0x408
 8012452:	f203 4b0c 	addw	fp, r3, #1036	; 0x40c
 8012456:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 801245a:	932b      	str	r3, [sp, #172]	; 0xac
 801245c:	f500 6384 	add.w	r3, r0, #1056	; 0x420
 8012460:	f200 4024 	addw	r0, r0, #1060	; 0x424
 8012464:	9036      	str	r0, [sp, #216]	; 0xd8
 8012466:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801246a:	600f      	str	r7, [r1, #0]
 801246c:	f500 6085 	add.w	r0, r0, #1064	; 0x428
 8012470:	9037      	str	r0, [sp, #220]	; 0xdc
 8012472:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 8012476:	f8ca 7000 	str.w	r7, [sl]
 801247a:	f200 4c2c 	addw	ip, r0, #1068	; 0x42c
 801247e:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 8012482:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
 8012486:	f500 6c86 	add.w	ip, r0, #1072	; 0x430
 801248a:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801248e:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 8012492:	f200 4c34 	addw	ip, r0, #1076	; 0x434
 8012496:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801249a:	f8cb 7000 	str.w	r7, [fp]
 801249e:	953a      	str	r5, [sp, #232]	; 0xe8
 80124a0:	602f      	str	r7, [r5, #0]
 80124a2:	f202 421c 	addw	r2, r2, #1052	; 0x41c
 80124a6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80124a8:	9235      	str	r2, [sp, #212]	; 0xd4
 80124aa:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 80124ae:	f500 6c87 	add.w	ip, r0, #1080	; 0x438
 80124b2:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 80124b6:	6037      	str	r7, [r6, #0]
 80124b8:	602f      	str	r7, [r5, #0]
 80124ba:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 80124bc:	9121      	str	r1, [sp, #132]	; 0x84
 80124be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80124c2:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 80124c6:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 80124ca:	f200 4c3c 	addw	ip, r0, #1084	; 0x43c
 80124ce:	602f      	str	r7, [r5, #0]
 80124d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124d4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80124d8:	601a      	str	r2, [r3, #0]
 80124da:	9634      	str	r6, [sp, #208]	; 0xd0
 80124dc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80124de:	601f      	str	r7, [r3, #0]
 80124e0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80124e2:	601f      	str	r7, [r3, #0]
 80124e4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80124e6:	601f      	str	r7, [r3, #0]
 80124e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80124ea:	601f      	str	r7, [r3, #0]
 80124ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80124ee:	601f      	str	r7, [r3, #0]
 80124f0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80124f2:	601f      	str	r7, [r3, #0]
 80124f4:	f8cc 9000 	str.w	r9, [ip]
 80124f8:	f7ee fb1a 	bl	8000b30 <__aeabi_d2f>
 80124fc:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8012500:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8012640 <m_kalman_3gyro.isra.0.constprop.0+0x1758>
 8012504:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012508:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801250c:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 8012510:	ee0b 0a10 	vmov	s22, r0
 8012514:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 8012518:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801251c:	9119      	str	r1, [sp, #100]	; 0x64
 801251e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8012522:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012526:	ed83 7a00 	vstr	s14, [r3]
 801252a:	f202 4244 	addw	r2, r2, #1092	; 0x444
 801252e:	9312      	str	r3, [sp, #72]	; 0x48
 8012530:	f200 404c 	addw	r0, r0, #1100	; 0x44c
 8012534:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012536:	901a      	str	r0, [sp, #104]	; 0x68
 8012538:	6017      	str	r7, [r2, #0]
 801253a:	f8c3 9000 	str.w	r9, [r3]
 801253e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012540:	9220      	str	r2, [sp, #128]	; 0x80
 8012542:	601f      	str	r7, [r3, #0]
 8012544:	f505 668a 	add.w	r6, r5, #1104	; 0x450
 8012548:	2000      	movs	r0, #0
 801254a:	2100      	movs	r1, #0
 801254c:	f505 658b 	add.w	r5, r5, #1112	; 0x458
 8012550:	2232      	movs	r2, #50	; 0x32
 8012552:	2300      	movs	r3, #0
 8012554:	e9c6 0100 	strd	r0, r1, [r6]
 8012558:	e9c5 2300 	strd	r2, r3, [r5]
 801255c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801255e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012562:	ab70      	add	r3, sp, #448	; 0x1c0
 8012564:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801256a:	ca07      	ldmia	r2, {r0, r1, r2}
 801256c:	ad73      	add	r5, sp, #460	; 0x1cc
 801256e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012572:	9a08      	ldr	r2, [sp, #32]
 8012574:	edd3 7a00 	vldr	s15, [r3]
 8012578:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801257c:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8012580:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8012584:	691f      	ldr	r7, [r3, #16]
 8012586:	695e      	ldr	r6, [r3, #20]
 8012588:	ca07      	ldmia	r2, {r0, r1, r2}
 801258a:	ad76      	add	r5, sp, #472	; 0x1d8
 801258c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012590:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012594:	699d      	ldr	r5, [r3, #24]
 8012596:	69d8      	ldr	r0, [r3, #28]
 8012598:	6a19      	ldr	r1, [r3, #32]
 801259a:	f502 628c 	add.w	r2, r2, #1120	; 0x460
 801259e:	9210      	str	r2, [sp, #64]	; 0x40
 80125a0:	4613      	mov	r3, r2
 80125a2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80125a6:	f602 0298 	addw	r2, r2, #2200	; 0x898
 80125aa:	edc3 7a00 	vstr	s15, [r3]
 80125ae:	f8c3 9004 	str.w	r9, [r3, #4]
 80125b2:	f8c3 e008 	str.w	lr, [r3, #8]
 80125b6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80125ba:	611f      	str	r7, [r3, #16]
 80125bc:	615e      	str	r6, [r3, #20]
 80125be:	619d      	str	r5, [r3, #24]
 80125c0:	61d8      	str	r0, [r3, #28]
 80125c2:	6219      	str	r1, [r3, #32]
 80125c4:	3324      	adds	r3, #36	; 0x24
 80125c6:	4293      	cmp	r3, r2
 80125c8:	d1ef      	bne.n	80125aa <m_kalman_3gyro.isra.0.constprop.0+0x16c2>
 80125ca:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 80125ce:	6812      	ldr	r2, [r2, #0]
 80125d0:	601a      	str	r2, [r3, #0]
 80125d2:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80125dc:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80125e0:	601a      	str	r2, [r3, #0]
 80125e2:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 80125e6:	6899      	ldr	r1, [r3, #8]
 80125e8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80125ec:	f503 620a 	add.w	r2, r3, #2208	; 0x8a0
 80125f0:	2300      	movs	r3, #0
 80125f2:	6011      	str	r1, [r2, #0]
 80125f4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80125f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80125fc:	f881 38a4 	strb.w	r3, [r1, #2212]	; 0x8a4
 8012600:	f8c1 38a6 	str.w	r3, [r1, #2214]	; 0x8a6
 8012604:	f881 38ad 	strb.w	r3, [r1, #2221]	; 0x8ad
 8012608:	f881 38ae 	strb.w	r3, [r1, #2222]	; 0x8ae
 801260c:	f8c1 38b0 	str.w	r3, [r1, #2224]	; 0x8b0
 8012610:	f8a1 28aa 	strh.w	r2, [r1, #2218]	; 0x8aa
 8012614:	f7fe bdcd 	b.w	80111b2 <m_kalman_3gyro.isra.0.constprop.0+0x2ca>
 8012618:	4f0a      	ldr	r7, [pc, #40]	; (8012644 <m_kalman_3gyro.isra.0.constprop.0+0x175c>)
 801261a:	2600      	movs	r6, #0
 801261c:	e42a      	b.n	8011e74 <m_kalman_3gyro.isra.0.constprop.0+0xf8c>
 801261e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012620:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012624:	edc3 7a00 	vstr	s15, [r3]
 8012628:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801262a:	eeb0 6a67 	vmov.f32	s12, s15
 801262e:	edc3 7a00 	vstr	s15, [r3]
 8012632:	f7ff bbc7 	b.w	8011dc4 <m_kalman_3gyro.isra.0.constprop.0+0xedc>
 8012636:	bf00      	nop
 8012638:	3f666666 	.word	0x3f666666
 801263c:	40a00000 	.word	0x40a00000
 8012640:	3ca3d70a 	.word	0x3ca3d70a
 8012644:	3ff00000 	.word	0x3ff00000
 8012648:	00000000 	.word	0x00000000
 801264c:	3d088889 	.word	0x3d088889
 8012650:	42480000 	.word	0x42480000
 8012654:	3c23d70a 	.word	0x3c23d70a
 8012658:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 801265c:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8012648 <m_kalman_3gyro.isra.0.constprop.0+0x1760>
 8012660:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012664:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8012666:	edc3 7af5 	vstr	s15, [r3, #980]	; 0x3d4
 801266a:	edc3 7af6 	vstr	s15, [r3, #984]	; 0x3d8
 801266e:	edc3 7af7 	vstr	s15, [r3, #988]	; 0x3dc
 8012672:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012674:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8012678:	eeb0 7a67 	vmov.f32	s14, s15
 801267c:	eef0 6a67 	vmov.f32	s13, s15
 8012680:	eeb0 6a67 	vmov.f32	s12, s15
 8012684:	461c      	mov	r4, r3
 8012686:	f503 6587 	add.w	r5, r3, #1080	; 0x438
 801268a:	edd3 7a06 	vldr	s15, [r3, #24]
 801268e:	edd2 5a00 	vldr	s11, [r2]
 8012692:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012696:	3324      	adds	r3, #36	; 0x24
 8012698:	ee36 6a27 	vadd.f32	s12, s12, s15
 801269c:	320c      	adds	r2, #12
 801269e:	ed81 6af5 	vstr	s12, [r1, #980]	; 0x3d4
 80126a2:	ed53 7a02 	vldr	s15, [r3, #-8]
 80126a6:	ed52 5a02 	vldr	s11, [r2, #-8]
 80126aa:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80126ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80126b2:	edc1 6af6 	vstr	s13, [r1, #984]	; 0x3d8
 80126b6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80126ba:	ed52 5a01 	vldr	s11, [r2, #-4]
 80126be:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80126c2:	429d      	cmp	r5, r3
 80126c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80126c8:	ed81 7af7 	vstr	s14, [r1, #988]	; 0x3dc
 80126cc:	d1dd      	bne.n	801268a <m_kalman_3gyro.isra.0.constprop.0+0x17a2>
 80126ce:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 801264c <m_kalman_3gyro.isra.0.constprop.0+0x1764>
 80126d2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80126d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80126d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80126dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80126e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80126e4:	ed83 6af5 	vstr	s12, [r3, #980]	; 0x3d4
 80126e8:	edc3 6af6 	vstr	s13, [r3, #984]	; 0x3d8
 80126ec:	ed83 7af7 	vstr	s14, [r3, #988]	; 0x3dc
 80126f0:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	6859      	ldr	r1, [r3, #4]
 80126f8:	625a      	str	r2, [r3, #36]	; 0x24
 80126fa:	689a      	ldr	r2, [r3, #8]
 80126fc:	6299      	str	r1, [r3, #40]	; 0x28
 80126fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8012700:	68d9      	ldr	r1, [r3, #12]
 8012702:	691a      	ldr	r2, [r3, #16]
 8012704:	6319      	str	r1, [r3, #48]	; 0x30
 8012706:	635a      	str	r2, [r3, #52]	; 0x34
 8012708:	6959      	ldr	r1, [r3, #20]
 801270a:	699a      	ldr	r2, [r3, #24]
 801270c:	6399      	str	r1, [r3, #56]	; 0x38
 801270e:	63da      	str	r2, [r3, #60]	; 0x3c
 8012710:	69d9      	ldr	r1, [r3, #28]
 8012712:	6a1a      	ldr	r2, [r3, #32]
 8012714:	6419      	str	r1, [r3, #64]	; 0x40
 8012716:	645a      	str	r2, [r3, #68]	; 0x44
 8012718:	3b24      	subs	r3, #36	; 0x24
 801271a:	4298      	cmp	r0, r3
 801271c:	d1ea      	bne.n	80126f4 <m_kalman_3gyro.isra.0.constprop.0+0x180c>
 801271e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012720:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012722:	6813      	ldr	r3, [r2, #0]
 8012724:	600b      	str	r3, [r1, #0]
 8012726:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012728:	981c      	ldr	r0, [sp, #112]	; 0x70
 801272a:	680b      	ldr	r3, [r1, #0]
 801272c:	6003      	str	r3, [r0, #0]
 801272e:	9808      	ldr	r0, [sp, #32]
 8012730:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012732:	6803      	ldr	r3, [r0, #0]
 8012734:	6033      	str	r3, [r6, #0]
 8012736:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 8012738:	6853      	ldr	r3, [r2, #4]
 801273a:	6033      	str	r3, [r6, #0]
 801273c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801273e:	684b      	ldr	r3, [r1, #4]
 8012740:	6033      	str	r3, [r6, #0]
 8012742:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012744:	6843      	ldr	r3, [r0, #4]
 8012746:	6033      	str	r3, [r6, #0]
 8012748:	6893      	ldr	r3, [r2, #8]
 801274a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801274c:	6013      	str	r3, [r2, #0]
 801274e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8012750:	688b      	ldr	r3, [r1, #8]
 8012752:	6013      	str	r3, [r2, #0]
 8012754:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012756:	6883      	ldr	r3, [r0, #8]
 8012758:	6013      	str	r3, [r2, #0]
 801275a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801275c:	2b02      	cmp	r3, #2
 801275e:	f001 81a7 	beq.w	8013ab0 <m_kalman_3gyro.isra.0.constprop.0+0x2bc8>
 8012762:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8012766:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 801276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012772:	f301 8544 	bgt.w	80141fe <m_kalman_3gyro.isra.0.constprop.0+0x3316>
 8012776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012778:	2b00      	cmp	r3, #0
 801277a:	f041 854c 	bne.w	8014216 <m_kalman_3gyro.isra.0.constprop.0+0x332e>
 801277e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012782:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 8012786:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801278a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801278e:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
 8012792:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012796:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801279a:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 801279e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80127a2:	2300      	movs	r3, #0
 80127a4:	67c1      	str	r1, [r0, #124]	; 0x7c
 80127a6:	f8a0 3202 	strh.w	r3, [r0, #514]	; 0x202
 80127aa:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 80127ae:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 80127b2:	2a00      	cmp	r2, #0
 80127b4:	f001 8171 	beq.w	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 80127b8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 80127bc:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 80127c0:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8012650 <m_kalman_3gyro.isra.0.constprop.0+0x1768>
 80127c4:	eef4 aae7 	vcmpe.f32	s21, s15
 80127c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127cc:	f2c1 80e3 	blt.w	8013996 <m_kalman_3gyro.isra.0.constprop.0+0x2aae>
 80127d0:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80127d4:	2300      	movs	r3, #0
 80127d6:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 80127da:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 80127de:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
 80127e2:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 80127e6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80127e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80127ec:	edd3 6a06 	vldr	s13, [r3, #24]
 80127f0:	ed93 7a07 	vldr	s14, [r3, #28]
 80127f4:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 80127f8:	ee66 6aaa 	vmul.f32	s13, s13, s21
 80127fc:	ee27 7a2a 	vmul.f32	s14, s14, s21
 8012800:	ee67 aaaa 	vmul.f32	s21, s15, s21
 8012804:	edc3 6a06 	vstr	s13, [r3, #24]
 8012808:	ed83 7a07 	vstr	s14, [r3, #28]
 801280c:	edc3 aa08 	vstr	s21, [r3, #32]
 8012810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012812:	edd1 7a00 	vldr	s15, [r1]
 8012816:	ed93 6a00 	vldr	s12, [r3]
 801281a:	ed92 7a00 	vldr	s14, [r2]
 801281e:	edd2 6a01 	vldr	s13, [r2, #4]
 8012822:	ee26 6a27 	vmul.f32	s12, s12, s15
 8012826:	edd2 7a02 	vldr	s15, [r2, #8]
 801282a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801282e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012832:	ed82 7a00 	vstr	s14, [r2]
 8012836:	ed93 6a00 	vldr	s12, [r3]
 801283a:	ed91 7a00 	vldr	s14, [r1]
 801283e:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8012842:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801284a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801284e:	ee38 7a07 	vadd.f32	s14, s16, s14
 8012852:	edc2 6a01 	vstr	s13, [r2, #4]
 8012856:	ed93 6a00 	vldr	s12, [r3]
 801285a:	edd1 6a00 	vldr	s13, [r1]
 801285e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012860:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012864:	ee85 6a87 	vdiv.f32	s12, s11, s14
 8012868:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801286c:	edc2 7a02 	vstr	s15, [r2, #8]
 8012870:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8012874:	edd3 7a00 	vldr	s15, [r3]
 8012878:	edd2 6a03 	vldr	s13, [r2, #12]
 801287c:	ed92 7a04 	vldr	s14, [r2, #16]
 8012880:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012884:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8012888:	edc2 6a03 	vstr	s13, [r2, #12]
 801288c:	edd3 6a00 	vldr	s13, [r3]
 8012890:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8012894:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012898:	edd2 6a05 	vldr	s13, [r2, #20]
 801289c:	ed82 7a04 	vstr	s14, [r2, #16]
 80128a0:	ed93 7a00 	vldr	s14, [r3]
 80128a4:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 80128a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80128ac:	ee66 6a87 	vmul.f32	s13, s13, s14
 80128b0:	ee27 7a88 	vmul.f32	s14, s15, s16
 80128b4:	ed5f 7a99 	vldr	s15, [pc, #-612]	; 8012654 <m_kalman_3gyro.isra.0.constprop.0+0x176c>
 80128b8:	edc2 6a05 	vstr	s13, [r2, #20]
 80128bc:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 80128c0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80128c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80128c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128cc:	bfa8      	it	ge
 80128ce:	eef0 7a46 	vmovge.f32	s15, s12
 80128d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80128d6:	ed83 7a06 	vstr	s14, [r3, #24]
 80128da:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 80128de:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 80128e2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80128e6:	ee27 7a08 	vmul.f32	s14, s14, s16
 80128ea:	ed82 7a0a 	vstr	s14, [r2, #40]	; 0x28
 80128ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80128f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80128f6:	ed83 7a07 	vstr	s14, [r3, #28]
 80128fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80128fc:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 8012900:	edd3 6a00 	vldr	s13, [r3]
 8012904:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012906:	ee27 7a26 	vmul.f32	s14, s14, s13
 801290a:	ed82 7a0b 	vstr	s14, [r2, #44]	; 0x2c
 801290e:	b3cb      	cbz	r3, 8012984 <m_kalman_3gyro.isra.0.constprop.0+0x1a9c>
 8012910:	ed92 7a03 	vldr	s14, [r2, #12]
 8012914:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 8012918:	ee27 7a08 	vmul.f32	s14, s14, s16
 801291c:	ed82 7a03 	vstr	s14, [r2, #12]
 8012920:	ed93 7a00 	vldr	s14, [r3]
 8012924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012928:	ed83 7a00 	vstr	s14, [r3]
 801292c:	ed92 7a04 	vldr	s14, [r2, #16]
 8012930:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 8012934:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012938:	ed82 7a04 	vstr	s14, [r2, #16]
 801293c:	ed93 7a01 	vldr	s14, [r3, #4]
 8012940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012944:	ed83 7a01 	vstr	s14, [r3, #4]
 8012948:	ed92 7a05 	vldr	s14, [r2, #20]
 801294c:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 8012950:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012954:	ed82 7a05 	vstr	s14, [r2, #20]
 8012958:	ed93 7a02 	vldr	s14, [r3, #8]
 801295c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012960:	ed83 7a02 	vstr	s14, [r3, #8]
 8012964:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 8012968:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 801296c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012970:	ee27 8a08 	vmul.f32	s16, s14, s16
 8012974:	ed82 8a0a 	vstr	s16, [r2, #40]	; 0x28
 8012978:	ed93 7a07 	vldr	s14, [r3, #28]
 801297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012980:	edc3 7a07 	vstr	s15, [r3, #28]
 8012984:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 8012988:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801298c:	edd3 7a00 	vldr	s15, [r3]
 8012990:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012994:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 8012998:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 801299c:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 80129a0:	ed89 6a01 	vstr	s12, [r9, #4]
 80129a4:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80129a8:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80129ac:	ed83 7a2e 	vstr	s14, [r3, #184]	; 0xb8
 80129b0:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 80129b4:	edc9 5a06 	vstr	s11, [r9, #24]
 80129b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80129bc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80129c0:	eee7 7a07 	vfma.f32	s15, s14, s14
 80129c4:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 80129c8:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 80129cc:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 80129d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80129d4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80129d8:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80129dc:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 80129e0:	ed82 7a42 	vstr	s14, [r2, #264]	; 0x108
 80129e4:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 80129e8:	ed92 7a03 	vldr	s14, [r2, #12]
 80129ec:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80129f0:	eee7 7a07 	vfma.f32	s15, s14, s14
 80129f4:	2300      	movs	r3, #0
 80129f6:	f8c9 3000 	str.w	r3, [r9]
 80129fa:	ed92 7a56 	vldr	s14, [r2, #344]	; 0x158
 80129fe:	edc2 7a4c 	vstr	s15, [r2, #304]	; 0x130
 8012a02:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 8012a06:	eef1 6a46 	vneg.f32	s13, s12
 8012a0a:	edc9 6a03 	vstr	s13, [r9, #12]
 8012a0e:	edd2 6a04 	vldr	s13, [r2, #16]
 8012a12:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012a16:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8012a1a:	edd2 7a60 	vldr	s15, [r2, #384]	; 0x180
 8012a1e:	edd2 6a6a 	vldr	s13, [r2, #424]	; 0x1a8
 8012a22:	ed82 7a56 	vstr	s14, [r2, #344]	; 0x158
 8012a26:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 8012a2a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8012a2e:	ed92 7a05 	vldr	s14, [r2, #20]
 8012a32:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012a36:	ed9d 5a2c 	vldr	s10, [sp, #176]	; 0xb0
 8012a3a:	f8c9 3010 	str.w	r3, [r9, #16]
 8012a3e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012a42:	ed92 7a74 	vldr	s14, [r2, #464]	; 0x1d0
 8012a46:	edc2 7a60 	vstr	s15, [r2, #384]	; 0x180
 8012a4a:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 8012a4e:	ed92 6a06 	vldr	s12, [r2, #24]
 8012a52:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012a56:	eee6 6a06 	vfma.f32	s13, s12, s12
 8012a5a:	edd2 7a7e 	vldr	s15, [r2, #504]	; 0x1f8
 8012a5e:	edc2 6a6a 	vstr	s13, [r2, #424]	; 0x1a8
 8012a62:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 8012a66:	edd2 6a07 	vldr	s13, [r2, #28]
 8012a6a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012a6e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8012a72:	eeb1 6a65 	vneg.f32	s12, s11
 8012a76:	ed82 7a74 	vstr	s14, [r2, #464]	; 0x1d0
 8012a7a:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 8012a7e:	ed92 7a08 	vldr	s14, [r2, #32]
 8012a82:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012a86:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012a8a:	eef1 5a45 	vneg.f32	s11, s10
 8012a8e:	edc2 7a7e 	vstr	s15, [r2, #504]	; 0x1f8
 8012a92:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8012a96:	edc9 5a07 	vstr	s11, [r9, #28]
 8012a9a:	7812      	ldrb	r2, [r2, #0]
 8012a9c:	f881 21fc 	strb.w	r2, [r1, #508]	; 0x1fc
 8012aa0:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8012aa4:	7812      	ldrb	r2, [r2, #0]
 8012aa6:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8012aaa:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 8012aae:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8012ab2:	7852      	ldrb	r2, [r2, #1]
 8012ab4:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 8012ab8:	f881 2200 	strb.w	r2, [r1, #512]	; 0x200
 8012abc:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8012ac0:	f8c9 3020 	str.w	r3, [r9, #32]
 8012ac4:	938b      	str	r3, [sp, #556]	; 0x22c
 8012ac6:	938f      	str	r3, [sp, #572]	; 0x23c
 8012ac8:	9393      	str	r3, [sp, #588]	; 0x24c
 8012aca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012acc:	7852      	ldrb	r2, [r2, #1]
 8012ace:	ed89 6a02 	vstr	s12, [r9, #8]
 8012ad2:	eef1 6a49 	vneg.f32	s13, s18
 8012ad6:	eeb1 7a69 	vneg.f32	s14, s19
 8012ada:	eef1 7a68 	vneg.f32	s15, s17
 8012ade:	ed89 5a05 	vstr	s10, [r9, #20]
 8012ae2:	ed8d 9a91 	vstr	s18, [sp, #580]	; 0x244
 8012ae6:	edcd 6a8d 	vstr	s13, [sp, #564]	; 0x234
 8012aea:	edcd 9a8c 	vstr	s19, [sp, #560]	; 0x230
 8012aee:	ed8d 7a8e 	vstr	s14, [sp, #568]	; 0x238
 8012af2:	edcd 8a90 	vstr	s17, [sp, #576]	; 0x240
 8012af6:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 8012afa:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
 8012afe:	b183      	cbz	r3, 8012b22 <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 8012b00:	b17a      	cbz	r2, 8012b22 <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 8012b02:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8012b04:	ed93 7a00 	vldr	s14, [r3]
 8012b08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b14:	f341 86f5 	ble.w	8014902 <m_kalman_3gyro.isra.0.constprop.0+0x3a1a>
 8012b18:	2300      	movs	r3, #0
 8012b1a:	f881 31ff 	strb.w	r3, [r1, #511]	; 0x1ff
 8012b1e:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 8012b22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b24:	edd3 7a00 	vldr	s15, [r3]
 8012b28:	eef4 7aca 	vcmpe.f32	s15, s20
 8012b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b30:	f2c0 86ae 	blt.w	8013890 <m_kalman_3gyro.isra.0.constprop.0+0x29a8>
 8012b34:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 8012b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	2300      	movs	r3, #0
 8012b40:	f7ed ff8e 	bl	8000a60 <__aeabi_dcmpgt>
 8012b44:	2800      	cmp	r0, #0
 8012b46:	f000 86a3 	beq.w	8013890 <m_kalman_3gyro.isra.0.constprop.0+0x29a8>
 8012b4a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012b4e:	2300      	movs	r3, #0
 8012b50:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 8012b54:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 8012b58:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012b5c:	edd2 7a24 	vldr	s15, [r2, #144]	; 0x90
 8012b60:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 8012b64:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b70:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 8012b74:	dc06      	bgt.n	8012b84 <m_kalman_3gyro.isra.0.constprop.0+0x1c9c>
 8012b76:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8012d0c <m_kalman_3gyro.isra.0.constprop.0+0x1e24>
 8012b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b82:	d50a      	bpl.n	8012b9a <m_kalman_3gyro.isra.0.constprop.0+0x1cb2>
 8012b84:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 8012b8e:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 8012b92:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 8012b96:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 8012b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012ba2:	eef0 7ae7 	vabs.f32	s15, s15
 8012ba6:	ee17 0a90 	vmov	r0, s15
 8012baa:	f7ed fc71 	bl	8000490 <__aeabi_f2d>
 8012bae:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	6818      	ldr	r0, [r3, #0]
 8012bb6:	460d      	mov	r5, r1
 8012bb8:	f7ed fc6a 	bl	8000490 <__aeabi_f2d>
 8012bbc:	4606      	mov	r6, r0
 8012bbe:	460f      	mov	r7, r1
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	4629      	mov	r1, r5
 8012bc4:	4632      	mov	r2, r6
 8012bc6:	463b      	mov	r3, r7
 8012bc8:	f7ed ff40 	bl	8000a4c <__aeabi_dcmpge>
 8012bcc:	b908      	cbnz	r0, 8012bd2 <m_kalman_3gyro.isra.0.constprop.0+0x1cea>
 8012bce:	4634      	mov	r4, r6
 8012bd0:	463d      	mov	r5, r7
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	f7ed ffab 	bl	8000b30 <__aeabi_d2f>
 8012bda:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8012bde:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8012d10 <m_kalman_3gyro.isra.0.constprop.0+0x1e28>
 8012be2:	6018      	str	r0, [r3, #0]
 8012be4:	6058      	str	r0, [r3, #4]
 8012be6:	6098      	str	r0, [r3, #8]
 8012be8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012bec:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8012bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf8:	f300 8621 	bgt.w	801383e <m_kalman_3gyro.isra.0.constprop.0+0x2956>
 8012bfc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8012d14 <m_kalman_3gyro.isra.0.constprop.0+0x1e2c>
 8012c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c08:	f100 8619 	bmi.w	801383e <m_kalman_3gyro.isra.0.constprop.0+0x2956>
 8012c0c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012c10:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8012c14:	eef0 7ac8 	vabs.f32	s15, s16
 8012c18:	ee17 0a90 	vmov	r0, s15
 8012c1c:	f7ed fc38 	bl	8000490 <__aeabi_f2d>
 8012c20:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8012c24:	4604      	mov	r4, r0
 8012c26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012c28:	460d      	mov	r5, r1
 8012c2a:	f7ed fc31 	bl	8000490 <__aeabi_f2d>
 8012c2e:	4606      	mov	r6, r0
 8012c30:	460f      	mov	r7, r1
 8012c32:	4620      	mov	r0, r4
 8012c34:	4629      	mov	r1, r5
 8012c36:	4632      	mov	r2, r6
 8012c38:	463b      	mov	r3, r7
 8012c3a:	f7ed ff07 	bl	8000a4c <__aeabi_dcmpge>
 8012c3e:	2800      	cmp	r0, #0
 8012c40:	f001 8603 	beq.w	801484a <m_kalman_3gyro.isra.0.constprop.0+0x3962>
 8012c44:	4620      	mov	r0, r4
 8012c46:	4629      	mov	r1, r5
 8012c48:	f7ed ff72 	bl	8000b30 <__aeabi_d2f>
 8012c4c:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8012c50:	ed93 7a03 	vldr	s14, [r3, #12]
 8012c54:	6298      	str	r0, [r3, #40]	; 0x28
 8012c56:	ee68 7a08 	vmul.f32	s15, s16, s16
 8012c5a:	ee67 6a07 	vmul.f32	s13, s14, s14
 8012c5e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c66:	f301 85d6 	bgt.w	8014816 <m_kalman_3gyro.isra.0.constprop.0+0x392e>
 8012c6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012c6e:	eeb4 bae7 	vcmpe.f32	s22, s15
 8012c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c76:	f340 85f5 	ble.w	8013864 <m_kalman_3gyro.isra.0.constprop.0+0x297c>
 8012c7a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012c7e:	2300      	movs	r3, #0
 8012c80:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 8012c84:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 8012c88:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8012c8c:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8012c90:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8012c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c98:	ee7b 6a26 	vadd.f32	s13, s22, s13
 8012c9c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012ca0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012ca4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012ca8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012cac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012cb0:	eeb4 bae6 	vcmpe.f32	s22, s13
 8012cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb8:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8012cbc:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 8012cc0:	dd05      	ble.n	8012cce <m_kalman_3gyro.isra.0.constprop.0+0x1de6>
 8012cc2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012cc6:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 8012cca:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 8012cce:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012cd2:	f893 38ae 	ldrb.w	r3, [r3, #2222]	; 0x8ae
 8012cd6:	2b0e      	cmp	r3, #14
 8012cd8:	d804      	bhi.n	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8012cda:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8012cde:	3305      	adds	r3, #5
 8012ce0:	f882 38ae 	strb.w	r3, [r2, #2222]	; 0x8ae
 8012ce4:	ab79      	add	r3, sp, #484	; 0x1e4
 8012ce6:	9300      	str	r3, [sp, #0]
 8012ce8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012cec:	eddf 8a0a 	vldr	s17, [pc, #40]	; 8012d18 <m_kalman_3gyro.isra.0.constprop.0+0x1e30>
 8012cf0:	9e03      	ldr	r6, [sp, #12]
 8012cf2:	f8dd 76d0 	ldr.w	r7, [sp, #1744]	; 0x6d0
 8012cf6:	3364      	adds	r3, #100	; 0x64
 8012cf8:	9301      	str	r3, [sp, #4]
 8012cfa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012cfe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8012d02:	f50d 780b 	add.w	r8, sp, #556	; 0x22c
 8012d06:	9302      	str	r3, [sp, #8]
 8012d08:	e02a      	b.n	8012d60 <m_kalman_3gyro.isra.0.constprop.0+0x1e78>
 8012d0a:	bf00      	nop
 8012d0c:	3e4ccccd 	.word	0x3e4ccccd
 8012d10:	3f8f5c29 	.word	0x3f8f5c29
 8012d14:	3f59999a 	.word	0x3f59999a
 8012d18:	00000000 	.word	0x00000000
 8012d1c:	ed18 da03 	vldr	s26, [r8, #-12]
 8012d20:	edd8 da00 	vldr	s27, [r8]
 8012d24:	ed98 ea03 	vldr	s28, [r8, #12]
 8012d28:	9b02      	ldr	r3, [sp, #8]
 8012d2a:	ee3d da0d 	vadd.f32	s26, s26, s26
 8012d2e:	ee7d daad 	vadd.f32	s27, s27, s27
 8012d32:	ee3e ea0e 	vadd.f32	s28, s28, s28
 8012d36:	5d9b      	ldrb	r3, [r3, r6]
 8012d38:	ed8d da79 	vstr	s26, [sp, #484]	; 0x1e4
 8012d3c:	edcd da7a 	vstr	s27, [sp, #488]	; 0x1e8
 8012d40:	ed8d ea7b 	vstr	s28, [sp, #492]	; 0x1ec
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	f040 80f1 	bne.w	8012f2c <m_kalman_3gyro.isra.0.constprop.0+0x2044>
 8012d4a:	9b00      	ldr	r3, [sp, #0]
 8012d4c:	3304      	adds	r3, #4
 8012d4e:	9300      	str	r3, [sp, #0]
 8012d50:	9b01      	ldr	r3, [sp, #4]
 8012d52:	3304      	adds	r3, #4
 8012d54:	3601      	adds	r6, #1
 8012d56:	9301      	str	r3, [sp, #4]
 8012d58:	f108 0804 	add.w	r8, r8, #4
 8012d5c:	f109 0904 	add.w	r9, r9, #4
 8012d60:	2e02      	cmp	r6, #2
 8012d62:	edcd 8a79 	vstr	s17, [sp, #484]	; 0x1e4
 8012d66:	edcd 8a7a 	vstr	s17, [sp, #488]	; 0x1e8
 8012d6a:	edcd 8a7b 	vstr	s17, [sp, #492]	; 0x1ec
 8012d6e:	edcd 8a7c 	vstr	s17, [sp, #496]	; 0x1f0
 8012d72:	edcd 8a7d 	vstr	s17, [sp, #500]	; 0x1f4
 8012d76:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
 8012d7a:	edcd 8a7f 	vstr	s17, [sp, #508]	; 0x1fc
 8012d7e:	edcd 8a80 	vstr	s17, [sp, #512]	; 0x200
 8012d82:	edcd 8a81 	vstr	s17, [sp, #516]	; 0x204
 8012d86:	f240 80ca 	bls.w	8012f1e <m_kalman_3gyro.isra.0.constprop.0+0x2036>
 8012d8a:	2e05      	cmp	r6, #5
 8012d8c:	ddc6      	ble.n	8012d1c <m_kalman_3gyro.isra.0.constprop.0+0x1e34>
 8012d8e:	9b02      	ldr	r3, [sp, #8]
 8012d90:	9900      	ldr	r1, [sp, #0]
 8012d92:	5d9b      	ldrb	r3, [r3, r6]
 8012d94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012d98:	f841 2c0c 	str.w	r2, [r1, #-12]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	f040 857f 	bne.w	80138a0 <m_kalman_3gyro.isra.0.constprop.0+0x29b8>
 8012da2:	2e0b      	cmp	r6, #11
 8012da4:	d1d1      	bne.n	8012d4a <m_kalman_3gyro.isra.0.constprop.0+0x1e62>
 8012da6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012daa:	edd3 8a26 	vldr	s17, [r3, #152]	; 0x98
 8012dae:	ed93 9a25 	vldr	s18, [r3, #148]	; 0x94
 8012db2:	ed93 8a27 	vldr	s16, [r3, #156]	; 0x9c
 8012db6:	ee68 9aa8 	vmul.f32	s19, s17, s17
 8012dba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012dbe:	eee9 9a09 	vfma.f32	s19, s18, s18
 8012dc2:	eee8 9a08 	vfma.f32	s19, s16, s16
 8012dc6:	eef4 9ae7 	vcmpe.f32	s19, s15
 8012dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dce:	f100 860f 	bmi.w	80139f0 <m_kalman_3gyro.isra.0.constprop.0+0x2b08>
 8012dd2:	ed1f aa2f 	vldr	s20, [pc, #-188]	; 8012d18 <m_kalman_3gyro.isra.0.constprop.0+0x1e30>
 8012dd6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012dda:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	f000 8579 	beq.w	80138d4 <m_kalman_3gyro.isra.0.constprop.0+0x29ec>
 8012de2:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 8012de6:	9907      	ldr	r1, [sp, #28]
 8012de8:	2300      	movs	r3, #0
 8012dea:	6003      	str	r3, [r0, #0]
 8012dec:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 8012df0:	600b      	str	r3, [r1, #0]
 8012df2:	6043      	str	r3, [r0, #4]
 8012df4:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 8012df8:	604b      	str	r3, [r1, #4]
 8012dfa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012dfe:	608b      	str	r3, [r1, #8]
 8012e00:	6083      	str	r3, [r0, #8]
 8012e02:	60ca      	str	r2, [r1, #12]
 8012e04:	60c2      	str	r2, [r0, #12]
 8012e06:	9f07      	ldr	r7, [sp, #28]
 8012e08:	9904      	ldr	r1, [sp, #16]
 8012e0a:	4638      	mov	r0, r7
 8012e0c:	f7fb ffa8 	bl	800ed60 <m_q2dcm_eml>
 8012e10:	ed97 9a01 	vldr	s18, [r7, #4]
 8012e14:	edd7 9a00 	vldr	s19, [r7]
 8012e18:	edd7 8a02 	vldr	s17, [r7, #8]
 8012e1c:	ed97 8a03 	vldr	s16, [r7, #12]
 8012e20:	ee69 7a09 	vmul.f32	s15, s18, s18
 8012e24:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012e28:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8012e2c:	eee8 7a08 	vfma.f32	s15, s16, s16
 8012e30:	ee17 0a90 	vmov	r0, s15
 8012e34:	f7ed fb2c 	bl	8000490 <__aeabi_f2d>
 8012e38:	ec41 0b10 	vmov	d0, r0, r1
 8012e3c:	f006 fc4c 	bl	80196d8 <sqrt>
 8012e40:	ec51 0b10 	vmov	r0, r1, d0
 8012e44:	f7ed fe74 	bl	8000b30 <__aeabi_d2f>
 8012e48:	ee07 0a90 	vmov	s15, r0
 8012e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012e50:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8012e54:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012e58:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8012e5a:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8012e5c:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8012e60:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8012e64:	ee29 9a27 	vmul.f32	s18, s18, s15
 8012e68:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012e6c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012e70:	edc7 9a00 	vstr	s19, [r7]
 8012e74:	ed87 9a01 	vstr	s18, [r7, #4]
 8012e78:	edc7 8a02 	vstr	s17, [r7, #8]
 8012e7c:	ed87 8a03 	vstr	s16, [r7, #12]
 8012e80:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012e84:	f8dd 76b4 	ldr.w	r7, [sp, #1716]	; 0x6b4
 8012e88:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8012e8c:	6821      	ldr	r1, [r4, #0]
 8012e8e:	6862      	ldr	r2, [r4, #4]
 8012e90:	68a3      	ldr	r3, [r4, #8]
 8012e92:	68e0      	ldr	r0, [r4, #12]
 8012e94:	60e8      	str	r0, [r5, #12]
 8012e96:	3410      	adds	r4, #16
 8012e98:	42b4      	cmp	r4, r6
 8012e9a:	6029      	str	r1, [r5, #0]
 8012e9c:	606a      	str	r2, [r5, #4]
 8012e9e:	60ab      	str	r3, [r5, #8]
 8012ea0:	f105 0510 	add.w	r5, r5, #16
 8012ea4:	d1f2      	bne.n	8012e8c <m_kalman_3gyro.isra.0.constprop.0+0x1fa4>
 8012ea6:	6823      	ldr	r3, [r4, #0]
 8012ea8:	602b      	str	r3, [r5, #0]
 8012eaa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012eae:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 8012eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012eb6:	6013      	str	r3, [r2, #0]
 8012eb8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012ec0:	6053      	str	r3, [r2, #4]
 8012ec2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012eca:	6093      	str	r3, [r2, #8]
 8012ecc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012ed0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012ed4:	60d3      	str	r3, [r2, #12]
 8012ed6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012eda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012ede:	6113      	str	r3, [r2, #16]
 8012ee0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012ee4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012ee8:	6153      	str	r3, [r2, #20]
 8012eea:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012eee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012ef2:	6193      	str	r3, [r2, #24]
 8012ef4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012efc:	61d3      	str	r3, [r2, #28]
 8012efe:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012f02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012f06:	6213      	str	r3, [r2, #32]
 8012f08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	f8dd 26bc 	ldr.w	r2, [sp, #1724]	; 0x6bc
 8012f10:	6013      	str	r3, [r2, #0]
 8012f12:	f20d 6d24 	addw	sp, sp, #1572	; 0x624
 8012f16:	ecbd 8b10 	vpop	{d8-d15}
 8012f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f1e:	ed99 da00 	vldr	s26, [r9]
 8012f22:	edd9 da03 	vldr	s27, [r9, #12]
 8012f26:	ed99 ea06 	vldr	s28, [r9, #24]
 8012f2a:	e6fd      	b.n	8012d28 <m_kalman_3gyro.isra.0.constprop.0+0x1e40>
 8012f2c:	eef0 ea68 	vmov.f32	s29, s17
 8012f30:	eef0 5a68 	vmov.f32	s11, s17
 8012f34:	eeb0 6a68 	vmov.f32	s12, s17
 8012f38:	eef0 6a68 	vmov.f32	s13, s17
 8012f3c:	eef0 fa68 	vmov.f32	s31, s17
 8012f40:	eeb0 fa68 	vmov.f32	s30, s17
 8012f44:	ad70      	add	r5, sp, #448	; 0x1c0
 8012f46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012f4a:	9303      	str	r3, [sp, #12]
 8012f4c:	462a      	mov	r2, r5
 8012f4e:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8012f52:	edc5 8a00 	vstr	s17, [r5]
 8012f56:	edc5 8a01 	vstr	s17, [r5, #4]
 8012f5a:	edc5 8a02 	vstr	s17, [r5, #8]
 8012f5e:	edc5 8a03 	vstr	s17, [r5, #12]
 8012f62:	edc5 8a04 	vstr	s17, [r5, #16]
 8012f66:	edc5 8a05 	vstr	s17, [r5, #20]
 8012f6a:	edc5 8a06 	vstr	s17, [r5, #24]
 8012f6e:	edc5 8a07 	vstr	s17, [r5, #28]
 8012f72:	edc5 8a08 	vstr	s17, [r5, #32]
 8012f76:	ecb3 7a01 	vldmia	r3!, {s14}
 8012f7a:	ecf2 7a01 	vldmia	r2!, {s15}
 8012f7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f86:	d006      	beq.n	8012f96 <m_kalman_3gyro.isra.0.constprop.0+0x20ae>
 8012f88:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f90:	bf18      	it	ne
 8012f92:	eeed 7a07 	vfmane.f32	s15, s26, s14
 8012f96:	ed93 7a08 	vldr	s14, [r3, #32]
 8012f9a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa2:	d006      	beq.n	8012fb2 <m_kalman_3gyro.isra.0.constprop.0+0x20ca>
 8012fa4:	eef5 da40 	vcmp.f32	s27, #0.0
 8012fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fac:	bf18      	it	ne
 8012fae:	eeed 7a87 	vfmane.f32	s15, s27, s14
 8012fb2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012fb6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fbe:	d006      	beq.n	8012fce <m_kalman_3gyro.isra.0.constprop.0+0x20e6>
 8012fc0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc8:	bf18      	it	ne
 8012fca:	eeee 7a07 	vfmane.f32	s15, s28, s14
 8012fce:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8012fd2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fda:	d006      	beq.n	8012fea <m_kalman_3gyro.isra.0.constprop.0+0x2102>
 8012fdc:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fe4:	bf18      	it	ne
 8012fe6:	eeef 7a07 	vfmane.f32	s15, s30, s14
 8012fea:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8012fee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff6:	d006      	beq.n	8013006 <m_kalman_3gyro.isra.0.constprop.0+0x211e>
 8012ff8:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013000:	bf18      	it	ne
 8013002:	eeef 7a87 	vfmane.f32	s15, s31, s14
 8013006:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 801300a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801300e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013012:	d006      	beq.n	8013022 <m_kalman_3gyro.isra.0.constprop.0+0x213a>
 8013014:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801301c:	bf18      	it	ne
 801301e:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8013022:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8013026:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801302e:	d006      	beq.n	801303e <m_kalman_3gyro.isra.0.constprop.0+0x2156>
 8013030:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013038:	bf18      	it	ne
 801303a:	eee6 7a07 	vfmane.f32	s15, s12, s14
 801303e:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8013042:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801304a:	d006      	beq.n	801305a <m_kalman_3gyro.isra.0.constprop.0+0x2172>
 801304c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013054:	bf18      	it	ne
 8013056:	eee5 7a87 	vfmane.f32	s15, s11, s14
 801305a:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 801305e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013066:	d006      	beq.n	8013076 <m_kalman_3gyro.isra.0.constprop.0+0x218e>
 8013068:	eef5 ea40 	vcmp.f32	s29, #0.0
 801306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013070:	bf18      	it	ne
 8013072:	eeee 7a87 	vfmane.f32	s15, s29, s14
 8013076:	428b      	cmp	r3, r1
 8013078:	ed42 7a01 	vstr	s15, [r2, #-4]
 801307c:	f47f af7b 	bne.w	8012f76 <m_kalman_3gyro.isra.0.constprop.0+0x208e>
 8013080:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013088:	f000 83d6 	beq.w	8013838 <m_kalman_3gyro.isra.0.constprop.0+0x2950>
 801308c:	edd5 7a00 	vldr	s15, [r5]
 8013090:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013098:	d001      	beq.n	801309e <m_kalman_3gyro.isra.0.constprop.0+0x21b6>
 801309a:	ee67 7a8d 	vmul.f32	s15, s15, s26
 801309e:	eef5 da40 	vcmp.f32	s27, #0.0
 80130a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130a6:	ed95 ba01 	vldr	s22, [r5, #4]
 80130aa:	d006      	beq.n	80130ba <m_kalman_3gyro.isra.0.constprop.0+0x21d2>
 80130ac:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80130b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130b4:	bf18      	it	ne
 80130b6:	eeeb 7a2d 	vfmane.f32	s15, s22, s27
 80130ba:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80130be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130c2:	edd5 9a02 	vldr	s19, [r5, #8]
 80130c6:	d006      	beq.n	80130d6 <m_kalman_3gyro.isra.0.constprop.0+0x21ee>
 80130c8:	eef5 9a40 	vcmp.f32	s19, #0.0
 80130cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d0:	bf18      	it	ne
 80130d2:	eee9 7a8e 	vfmane.f32	s15, s19, s28
 80130d6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80130da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130de:	d008      	beq.n	80130f2 <m_kalman_3gyro.isra.0.constprop.0+0x220a>
 80130e0:	ed95 7a03 	vldr	s14, [r5, #12]
 80130e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80130e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ec:	bf18      	it	ne
 80130ee:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 80130f2:	eef5 fa40 	vcmp.f32	s31, #0.0
 80130f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130fa:	d008      	beq.n	801310e <m_kalman_3gyro.isra.0.constprop.0+0x2226>
 80130fc:	ed95 7a04 	vldr	s14, [r5, #16]
 8013100:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013108:	bf18      	it	ne
 801310a:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 801310e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013116:	d008      	beq.n	801312a <m_kalman_3gyro.isra.0.constprop.0+0x2242>
 8013118:	ed95 7a05 	vldr	s14, [r5, #20]
 801311c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013124:	bf18      	it	ne
 8013126:	eee7 7a26 	vfmane.f32	s15, s14, s13
 801312a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801312e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013132:	d008      	beq.n	8013146 <m_kalman_3gyro.isra.0.constprop.0+0x225e>
 8013134:	ed95 7a06 	vldr	s14, [r5, #24]
 8013138:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013140:	bf18      	it	ne
 8013142:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8013146:	eef5 5a40 	vcmp.f32	s11, #0.0
 801314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314e:	d008      	beq.n	8013162 <m_kalman_3gyro.isra.0.constprop.0+0x227a>
 8013150:	ed95 7a07 	vldr	s14, [r5, #28]
 8013154:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801315c:	bf18      	it	ne
 801315e:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8013162:	eef5 ea40 	vcmp.f32	s29, #0.0
 8013166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801316a:	d008      	beq.n	801317e <m_kalman_3gyro.isra.0.constprop.0+0x2296>
 801316c:	ed95 7a08 	vldr	s14, [r5, #32]
 8013170:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013178:	bf18      	it	ne
 801317a:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 801317e:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8013182:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8013186:	ed93 7a00 	vldr	s14, [r3]
 801318a:	ed95 8a00 	vldr	s16, [r5]
 801318e:	edd5 ba03 	vldr	s23, [r5, #12]
 8013192:	ed95 ca04 	vldr	s24, [r5, #16]
 8013196:	edd5 ca05 	vldr	s25, [r5, #20]
 801319a:	edd5 aa06 	vldr	s21, [r5, #24]
 801319e:	ed95 aa07 	vldr	s20, [r5, #28]
 80131a2:	ed95 5a08 	vldr	s10, [r5, #32]
 80131a6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80131aa:	2e05      	cmp	r6, #5
 80131ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80131b0:	ee87 9a27 	vdiv.f32	s18, s14, s15
 80131b4:	ee2b ba09 	vmul.f32	s22, s22, s18
 80131b8:	ee69 9a89 	vmul.f32	s19, s19, s18
 80131bc:	ee29 8a08 	vmul.f32	s16, s18, s16
 80131c0:	ee69 ba2b 	vmul.f32	s23, s18, s23
 80131c4:	ee29 ca0c 	vmul.f32	s24, s18, s24
 80131c8:	ee69 ca2c 	vmul.f32	s25, s18, s25
 80131cc:	ee69 aa2a 	vmul.f32	s21, s18, s21
 80131d0:	ee29 aa0a 	vmul.f32	s20, s18, s20
 80131d4:	ee29 9a05 	vmul.f32	s18, s18, s10
 80131d8:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 80131dc:	edcd 9a69 	vstr	s19, [sp, #420]	; 0x1a4
 80131e0:	ed8d 8a67 	vstr	s16, [sp, #412]	; 0x19c
 80131e4:	edcd ba6a 	vstr	s23, [sp, #424]	; 0x1a8
 80131e8:	ed8d ca6b 	vstr	s24, [sp, #428]	; 0x1ac
 80131ec:	edcd ca6c 	vstr	s25, [sp, #432]	; 0x1b0
 80131f0:	edcd aa6d 	vstr	s21, [sp, #436]	; 0x1b4
 80131f4:	ed8d aa6e 	vstr	s20, [sp, #440]	; 0x1b8
 80131f8:	ed8d 9a6f 	vstr	s18, [sp, #444]	; 0x1bc
 80131fc:	f240 8087 	bls.w	801330e <m_kalman_3gyro.isra.0.constprop.0+0x2426>
 8013200:	9b01      	ldr	r3, [sp, #4]
 8013202:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801320a:	ed93 7a00 	vldr	s14, [r3]
 801320e:	f000 835e 	beq.w	80138ce <m_kalman_3gyro.isra.0.constprop.0+0x29e6>
 8013212:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8013216:	eef5 7a40 	vcmp.f32	s15, #0.0
 801321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321e:	d001      	beq.n	8013224 <m_kalman_3gyro.isra.0.constprop.0+0x233c>
 8013220:	ee67 7a8d 	vmul.f32	s15, s15, s26
 8013224:	eef5 da40 	vcmp.f32	s27, #0.0
 8013228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801322c:	d008      	beq.n	8013240 <m_kalman_3gyro.isra.0.constprop.0+0x2358>
 801322e:	ed97 5a26 	vldr	s10, [r7, #152]	; 0x98
 8013232:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801323a:	bf18      	it	ne
 801323c:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 8013240:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013248:	d008      	beq.n	801325c <m_kalman_3gyro.isra.0.constprop.0+0x2374>
 801324a:	ed97 5a27 	vldr	s10, [r7, #156]	; 0x9c
 801324e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013256:	bf18      	it	ne
 8013258:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 801325c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8013260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013264:	d008      	beq.n	8013278 <m_kalman_3gyro.isra.0.constprop.0+0x2390>
 8013266:	ed97 5a28 	vldr	s10, [r7, #160]	; 0xa0
 801326a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013272:	bf18      	it	ne
 8013274:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 8013278:	eef5 fa40 	vcmp.f32	s31, #0.0
 801327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013280:	d008      	beq.n	8013294 <m_kalman_3gyro.isra.0.constprop.0+0x23ac>
 8013282:	ed97 5a29 	vldr	s10, [r7, #164]	; 0xa4
 8013286:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328e:	bf18      	it	ne
 8013290:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 8013294:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801329c:	d008      	beq.n	80132b0 <m_kalman_3gyro.isra.0.constprop.0+0x23c8>
 801329e:	ed97 5a2a 	vldr	s10, [r7, #168]	; 0xa8
 80132a2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80132a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132aa:	bf18      	it	ne
 80132ac:	eee5 7a26 	vfmane.f32	s15, s10, s13
 80132b0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80132b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b8:	d008      	beq.n	80132cc <m_kalman_3gyro.isra.0.constprop.0+0x23e4>
 80132ba:	ed97 5a2b 	vldr	s10, [r7, #172]	; 0xac
 80132be:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80132c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c6:	bf18      	it	ne
 80132c8:	eee5 7a06 	vfmane.f32	s15, s10, s12
 80132cc:	eef5 5a40 	vcmp.f32	s11, #0.0
 80132d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d4:	d008      	beq.n	80132e8 <m_kalman_3gyro.isra.0.constprop.0+0x2400>
 80132d6:	ed97 5a2c 	vldr	s10, [r7, #176]	; 0xb0
 80132da:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80132de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e2:	bf18      	it	ne
 80132e4:	eee5 7a25 	vfmane.f32	s15, s10, s11
 80132e8:	eef5 ea40 	vcmp.f32	s29, #0.0
 80132ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f0:	d008      	beq.n	8013304 <m_kalman_3gyro.isra.0.constprop.0+0x241c>
 80132f2:	ed97 5a2d 	vldr	s10, [r7, #180]	; 0xb4
 80132f6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80132fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fe:	bf18      	it	ne
 8013300:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 8013304:	9b01      	ldr	r3, [sp, #4]
 8013306:	ee77 7a67 	vsub.f32	s15, s14, s15
 801330a:	edc3 7a00 	vstr	s15, [r3]
 801330e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013312:	2100      	movs	r1, #0
 8013314:	4658      	mov	r0, fp
 8013316:	edcd 5a08 	vstr	s11, [sp, #32]
 801331a:	ed8d 6a06 	vstr	s12, [sp, #24]
 801331e:	edcd 6a05 	vstr	s13, [sp, #20]
 8013322:	f005 fff7 	bl	8019314 <memset>
 8013326:	eddd 5a08 	vldr	s11, [sp, #32]
 801332a:	ed9d 6a06 	vldr	s12, [sp, #24]
 801332e:	eddd 6a05 	vldr	s13, [sp, #20]
 8013332:	465c      	mov	r4, fp
 8013334:	aa67      	add	r2, sp, #412	; 0x19c
 8013336:	465b      	mov	r3, fp
 8013338:	ecf2 7a01 	vldmia	r2!, {s15}
 801333c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013344:	d062      	beq.n	801340c <m_kalman_3gyro.isra.0.constprop.0+0x2524>
 8013346:	eeb5 da40 	vcmp.f32	s26, #0.0
 801334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334e:	d005      	beq.n	801335c <m_kalman_3gyro.isra.0.constprop.0+0x2474>
 8013350:	ed93 7a00 	vldr	s14, [r3]
 8013354:	eea7 7a8d 	vfma.f32	s14, s15, s26
 8013358:	ed83 7a00 	vstr	s14, [r3]
 801335c:	eef5 da40 	vcmp.f32	s27, #0.0
 8013360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013364:	d005      	beq.n	8013372 <m_kalman_3gyro.isra.0.constprop.0+0x248a>
 8013366:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801336a:	eea7 7aad 	vfma.f32	s14, s15, s27
 801336e:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 8013372:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8013376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337a:	d005      	beq.n	8013388 <m_kalman_3gyro.isra.0.constprop.0+0x24a0>
 801337c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8013380:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8013384:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 8013388:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013390:	d005      	beq.n	801339e <m_kalman_3gyro.isra.0.constprop.0+0x24b6>
 8013392:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8013396:	eea7 7a8f 	vfma.f32	s14, s15, s30
 801339a:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 801339e:	eef5 fa40 	vcmp.f32	s31, #0.0
 80133a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a6:	d005      	beq.n	80133b4 <m_kalman_3gyro.isra.0.constprop.0+0x24cc>
 80133a8:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80133ac:	eea7 7aaf 	vfma.f32	s14, s15, s31
 80133b0:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 80133b4:	eef5 6a40 	vcmp.f32	s13, #0.0
 80133b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133bc:	d005      	beq.n	80133ca <m_kalman_3gyro.isra.0.constprop.0+0x24e2>
 80133be:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 80133c2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80133c6:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 80133ca:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80133ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d2:	d005      	beq.n	80133e0 <m_kalman_3gyro.isra.0.constprop.0+0x24f8>
 80133d4:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80133d8:	eea7 7a86 	vfma.f32	s14, s15, s12
 80133dc:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 80133e0:	eef5 5a40 	vcmp.f32	s11, #0.0
 80133e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e8:	d005      	beq.n	80133f6 <m_kalman_3gyro.isra.0.constprop.0+0x250e>
 80133ea:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 80133ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80133f2:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 80133f6:	eef5 ea40 	vcmp.f32	s29, #0.0
 80133fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133fe:	d005      	beq.n	801340c <m_kalman_3gyro.isra.0.constprop.0+0x2524>
 8013400:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 8013404:	eea7 7aae 	vfma.f32	s14, s15, s29
 8013408:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 801340c:	4295      	cmp	r5, r2
 801340e:	f103 0304 	add.w	r3, r3, #4
 8013412:	d191      	bne.n	8013338 <m_kalman_3gyro.isra.0.constprop.0+0x2450>
 8013414:	f8df e690 	ldr.w	lr, [pc, #1680]	; 8013aa8 <m_kalman_3gyro.isra.0.constprop.0+0x2bc0>
 8013418:	f8df c690 	ldr.w	ip, [pc, #1680]	; 8013aac <m_kalman_3gyro.isra.0.constprop.0+0x2bc4>
 801341c:	f50b 70a2 	add.w	r0, fp, #324	; 0x144
 8013420:	465b      	mov	r3, fp
 8013422:	2200      	movs	r2, #0
 8013424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013428:	fb0e f102 	mul.w	r1, lr, r2
 801342c:	ebbc 0f71 	cmp.w	ip, r1, ror #1
 8013430:	edd3 7a00 	vldr	s15, [r3]
 8013434:	f0c0 81da 	bcc.w	80137ec <m_kalman_3gyro.isra.0.constprop.0+0x2904>
 8013438:	ee77 7a67 	vsub.f32	s15, s14, s15
 801343c:	3201      	adds	r2, #1
 801343e:	ece3 7a01 	vstmia	r3!, {s15}
 8013442:	4298      	cmp	r0, r3
 8013444:	d1f0      	bne.n	8013428 <m_kalman_3gyro.isra.0.constprop.0+0x2540>
 8013446:	ed9d da03 	vldr	s26, [sp, #12]
 801344a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801344e:	ee1d 1a10 	vmov	r1, s26
 8013452:	4650      	mov	r0, sl
 8013454:	f005 ff50 	bl	80192f8 <memcpy>
 8013458:	2100      	movs	r1, #0
 801345a:	ee1d 0a10 	vmov	r0, s26
 801345e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013462:	f005 ff57 	bl	8019314 <memset>
 8013466:	46bc      	mov	ip, r7
 8013468:	2000      	movs	r0, #0
 801346a:	f50d 61c4 	add.w	r1, sp, #1568	; 0x620
 801346e:	ecf4 3a01 	vldmia	r4!, {s7}
 8013472:	ed94 4a08 	vldr	s8, [r4, #32]
 8013476:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 801347a:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 801347e:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 8013482:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 8013486:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 801348a:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 801348e:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 8013492:	4653      	mov	r3, sl
 8013494:	4662      	mov	r2, ip
 8013496:	eef5 3a40 	vcmp.f32	s7, #0.0
 801349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349e:	d00c      	beq.n	80134ba <m_kalman_3gyro.isra.0.constprop.0+0x25d2>
 80134a0:	ed93 3a00 	vldr	s6, [r3]
 80134a4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80134a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ac:	d005      	beq.n	80134ba <m_kalman_3gyro.isra.0.constprop.0+0x25d2>
 80134ae:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80134b2:	eee3 2a83 	vfma.f32	s5, s7, s6
 80134b6:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80134ba:	eeb5 4a40 	vcmp.f32	s8, #0.0
 80134be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c2:	d00c      	beq.n	80134de <m_kalman_3gyro.isra.0.constprop.0+0x25f6>
 80134c4:	ed93 3a01 	vldr	s6, [r3, #4]
 80134c8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80134cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d0:	d005      	beq.n	80134de <m_kalman_3gyro.isra.0.constprop.0+0x25f6>
 80134d2:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80134d6:	eee4 2a03 	vfma.f32	s5, s8, s6
 80134da:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80134de:	eef5 4a40 	vcmp.f32	s9, #0.0
 80134e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134e6:	d00c      	beq.n	8013502 <m_kalman_3gyro.isra.0.constprop.0+0x261a>
 80134e8:	ed93 3a02 	vldr	s6, [r3, #8]
 80134ec:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80134f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134f4:	d005      	beq.n	8013502 <m_kalman_3gyro.isra.0.constprop.0+0x261a>
 80134f6:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80134fa:	eee4 2a83 	vfma.f32	s5, s9, s6
 80134fe:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8013502:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8013506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801350a:	d00c      	beq.n	8013526 <m_kalman_3gyro.isra.0.constprop.0+0x263e>
 801350c:	ed93 3a03 	vldr	s6, [r3, #12]
 8013510:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8013514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013518:	d005      	beq.n	8013526 <m_kalman_3gyro.isra.0.constprop.0+0x263e>
 801351a:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 801351e:	eee5 2a03 	vfma.f32	s5, s10, s6
 8013522:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8013526:	eef5 5a40 	vcmp.f32	s11, #0.0
 801352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352e:	d00c      	beq.n	801354a <m_kalman_3gyro.isra.0.constprop.0+0x2662>
 8013530:	ed93 3a04 	vldr	s6, [r3, #16]
 8013534:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8013538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353c:	d005      	beq.n	801354a <m_kalman_3gyro.isra.0.constprop.0+0x2662>
 801353e:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 8013542:	eee5 2a83 	vfma.f32	s5, s11, s6
 8013546:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 801354a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801354e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013552:	d00c      	beq.n	801356e <m_kalman_3gyro.isra.0.constprop.0+0x2686>
 8013554:	ed93 3a05 	vldr	s6, [r3, #20]
 8013558:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013560:	d005      	beq.n	801356e <m_kalman_3gyro.isra.0.constprop.0+0x2686>
 8013562:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 8013566:	eee6 2a03 	vfma.f32	s5, s12, s6
 801356a:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 801356e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013576:	d00c      	beq.n	8013592 <m_kalman_3gyro.isra.0.constprop.0+0x26aa>
 8013578:	ed93 3a06 	vldr	s6, [r3, #24]
 801357c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8013580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013584:	d005      	beq.n	8013592 <m_kalman_3gyro.isra.0.constprop.0+0x26aa>
 8013586:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 801358a:	eee6 2a83 	vfma.f32	s5, s13, s6
 801358e:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8013592:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359a:	d00c      	beq.n	80135b6 <m_kalman_3gyro.isra.0.constprop.0+0x26ce>
 801359c:	ed93 3a07 	vldr	s6, [r3, #28]
 80135a0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80135a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a8:	d005      	beq.n	80135b6 <m_kalman_3gyro.isra.0.constprop.0+0x26ce>
 80135aa:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80135ae:	eee7 2a03 	vfma.f32	s5, s14, s6
 80135b2:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80135b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80135ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135be:	d00c      	beq.n	80135da <m_kalman_3gyro.isra.0.constprop.0+0x26f2>
 80135c0:	ed93 3a08 	vldr	s6, [r3, #32]
 80135c4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80135c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135cc:	d005      	beq.n	80135da <m_kalman_3gyro.isra.0.constprop.0+0x26f2>
 80135ce:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80135d2:	eee7 2a83 	vfma.f32	s5, s15, s6
 80135d6:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80135da:	3324      	adds	r3, #36	; 0x24
 80135dc:	4299      	cmp	r1, r3
 80135de:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80135e2:	f47f af58 	bne.w	8013496 <m_kalman_3gyro.isra.0.constprop.0+0x25ae>
 80135e6:	3001      	adds	r0, #1
 80135e8:	2809      	cmp	r0, #9
 80135ea:	f10c 0c04 	add.w	ip, ip, #4
 80135ee:	f47f af3e 	bne.w	801346e <m_kalman_3gyro.isra.0.constprop.0+0x2586>
 80135f2:	9b01      	ldr	r3, [sp, #4]
 80135f4:	edc5 8a01 	vstr	s17, [r5, #4]
 80135f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80135fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013600:	edd3 7a00 	vldr	s15, [r3]
 8013604:	f000 80fc 	beq.w	8013800 <m_kalman_3gyro.isra.0.constprop.0+0x2918>
 8013608:	eef5 7a40 	vcmp.f32	s15, #0.0
 801360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013610:	f000 80f6 	beq.w	8013800 <m_kalman_3gyro.isra.0.constprop.0+0x2918>
 8013614:	ee27 8a88 	vmul.f32	s16, s15, s16
 8013618:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013620:	ed85 8a00 	vstr	s16, [r5]
 8013624:	f040 81cc 	bne.w	80139c0 <m_kalman_3gyro.isra.0.constprop.0+0x2ad8>
 8013628:	eef5 9a40 	vcmp.f32	s19, #0.0
 801362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013630:	f040 808b 	bne.w	801374a <m_kalman_3gyro.isra.0.constprop.0+0x2862>
 8013634:	eef5 ba40 	vcmp.f32	s23, #0.0
 8013638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801363c:	edc5 8a02 	vstr	s17, [r5, #8]
 8013640:	d007      	beq.n	8013652 <m_kalman_3gyro.isra.0.constprop.0+0x276a>
 8013642:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801364a:	f041 8011 	bne.w	8014670 <m_kalman_3gyro.isra.0.constprop.0+0x3788>
 801364e:	eef0 ba67 	vmov.f32	s23, s15
 8013652:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8013656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801365a:	edc5 8a03 	vstr	s17, [r5, #12]
 801365e:	f000 808a 	beq.w	8013776 <m_kalman_3gyro.isra.0.constprop.0+0x288e>
 8013662:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801366a:	f041 8018 	bne.w	801469e <m_kalman_3gyro.isra.0.constprop.0+0x37b6>
 801366e:	edc5 8a04 	vstr	s17, [r5, #16]
 8013672:	eef0 ca67 	vmov.f32	s25, s15
 8013676:	eeb0 ca67 	vmov.f32	s24, s15
 801367a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013682:	edc5 8a05 	vstr	s17, [r5, #20]
 8013686:	f000 8094 	beq.w	80137b2 <m_kalman_3gyro.isra.0.constprop.0+0x28ca>
 801368a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013692:	f040 87ea 	bne.w	801466a <m_kalman_3gyro.isra.0.constprop.0+0x3782>
 8013696:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369e:	edc5 8a06 	vstr	s17, [r5, #24]
 80136a2:	f040 819a 	bne.w	80139da <m_kalman_3gyro.isra.0.constprop.0+0x2af2>
 80136a6:	eef0 aa4a 	vmov.f32	s21, s20
 80136aa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80136ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b2:	edc5 8a07 	vstr	s17, [r5, #28]
 80136b6:	f000 80f0 	beq.w	801389a <m_kalman_3gyro.isra.0.constprop.0+0x29b2>
 80136ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80136be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136c2:	f000 80e8 	beq.w	8013896 <m_kalman_3gyro.isra.0.constprop.0+0x29ae>
 80136c6:	eeb0 3a68 	vmov.f32	s6, s17
 80136ca:	ee29 9a27 	vmul.f32	s18, s18, s15
 80136ce:	edd7 3a25 	vldr	s7, [r7, #148]	; 0x94
 80136d2:	ed97 4a26 	vldr	s8, [r7, #152]	; 0x98
 80136d6:	edd7 4a27 	vldr	s9, [r7, #156]	; 0x9c
 80136da:	ed97 5a28 	vldr	s10, [r7, #160]	; 0xa0
 80136de:	edd7 5a29 	vldr	s11, [r7, #164]	; 0xa4
 80136e2:	ed97 6a2a 	vldr	s12, [r7, #168]	; 0xa8
 80136e6:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80136ea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80136ee:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80136f2:	ed85 9a08 	vstr	s18, [r5, #32]
 80136f6:	ee33 8a88 	vadd.f32	s16, s7, s16
 80136fa:	ee74 9a29 	vadd.f32	s19, s8, s19
 80136fe:	ee74 baab 	vadd.f32	s23, s9, s23
 8013702:	ee35 ca0c 	vadd.f32	s24, s10, s24
 8013706:	ee75 caac 	vadd.f32	s25, s11, s25
 801370a:	ee76 aa2a 	vadd.f32	s21, s12, s21
 801370e:	ee36 aa8a 	vadd.f32	s20, s13, s20
 8013712:	ee37 7a03 	vadd.f32	s14, s14, s6
 8013716:	ee37 9a89 	vadd.f32	s18, s15, s18
 801371a:	ed87 8a25 	vstr	s16, [r7, #148]	; 0x94
 801371e:	edc7 9a26 	vstr	s19, [r7, #152]	; 0x98
 8013722:	edc7 ba27 	vstr	s23, [r7, #156]	; 0x9c
 8013726:	ed87 ca28 	vstr	s24, [r7, #160]	; 0xa0
 801372a:	edc7 ca29 	vstr	s25, [r7, #164]	; 0xa4
 801372e:	edc7 aa2a 	vstr	s21, [r7, #168]	; 0xa8
 8013732:	ed87 aa2b 	vstr	s20, [r7, #172]	; 0xac
 8013736:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 801373a:	ed87 9a2d 	vstr	s18, [r7, #180]	; 0xb4
 801373e:	f7ff bb30 	b.w	8012da2 <m_kalman_3gyro.isra.0.constprop.0+0x1eba>
 8013742:	ed9f bad8 	vldr	s22, [pc, #864]	; 8013aa4 <m_kalman_3gyro.isra.0.constprop.0+0x2bbc>
 8013746:	eeb0 8a4b 	vmov.f32	s16, s22
 801374a:	ee27 7aa9 	vmul.f32	s14, s15, s19
 801374e:	eef5 ba40 	vcmp.f32	s23, #0.0
 8013752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013756:	ed85 7a02 	vstr	s14, [r5, #8]
 801375a:	f040 86fe 	bne.w	801455a <m_kalman_3gyro.isra.0.constprop.0+0x3672>
 801375e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8013762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013766:	eef0 ba47 	vmov.f32	s23, s14
 801376a:	eef0 9a4b 	vmov.f32	s19, s22
 801376e:	edc5 8a03 	vstr	s17, [r5, #12]
 8013772:	f47f af76 	bne.w	8013662 <m_kalman_3gyro.isra.0.constprop.0+0x277a>
 8013776:	eef5 ca40 	vcmp.f32	s25, #0.0
 801377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801377e:	edc5 8a04 	vstr	s17, [r5, #16]
 8013782:	f43f af7a 	beq.w	801367a <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 8013786:	eef5 7a40 	vcmp.f32	s15, #0.0
 801378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801378e:	f000 86dc 	beq.w	801454a <m_kalman_3gyro.isra.0.constprop.0+0x3662>
 8013792:	eeb0 7a68 	vmov.f32	s14, s17
 8013796:	ee67 6aac 	vmul.f32	s13, s15, s25
 801379a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a2:	edc5 6a05 	vstr	s13, [r5, #20]
 80137a6:	f040 86bf 	bne.w	8014528 <m_kalman_3gyro.isra.0.constprop.0+0x3640>
 80137aa:	eef0 aa66 	vmov.f32	s21, s13
 80137ae:	eef0 ca47 	vmov.f32	s25, s14
 80137b2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80137b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ba:	edc5 8a06 	vstr	s17, [r5, #24]
 80137be:	f43f af74 	beq.w	80136aa <m_kalman_3gyro.isra.0.constprop.0+0x27c2>
 80137c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80137c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ca:	f000 8108 	beq.w	80139de <m_kalman_3gyro.isra.0.constprop.0+0x2af6>
 80137ce:	eeb0 7a68 	vmov.f32	s14, s17
 80137d2:	ee27 3a8a 	vmul.f32	s6, s15, s20
 80137d6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80137da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137de:	ed85 3a07 	vstr	s6, [r5, #28]
 80137e2:	eeb0 aa47 	vmov.f32	s20, s14
 80137e6:	f47f af70 	bne.w	80136ca <m_kalman_3gyro.isra.0.constprop.0+0x27e2>
 80137ea:	e770      	b.n	80136ce <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 80137ec:	eef1 7a67 	vneg.f32	s15, s15
 80137f0:	ece3 7a01 	vstmia	r3!, {s15}
 80137f4:	4298      	cmp	r0, r3
 80137f6:	f102 0201 	add.w	r2, r2, #1
 80137fa:	f47f ae15 	bne.w	8013428 <m_kalman_3gyro.isra.0.constprop.0+0x2540>
 80137fe:	e622      	b.n	8013446 <m_kalman_3gyro.isra.0.constprop.0+0x255e>
 8013800:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8013804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013808:	edc5 8a00 	vstr	s17, [r5]
 801380c:	d005      	beq.n	801381a <m_kalman_3gyro.isra.0.constprop.0+0x2932>
 801380e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013816:	f040 80d1 	bne.w	80139bc <m_kalman_3gyro.isra.0.constprop.0+0x2ad4>
 801381a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013822:	d051      	beq.n	80138c8 <m_kalman_3gyro.isra.0.constprop.0+0x29e0>
 8013824:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801382c:	d189      	bne.n	8013742 <m_kalman_3gyro.isra.0.constprop.0+0x285a>
 801382e:	eef0 9a67 	vmov.f32	s19, s15
 8013832:	eeb0 8a67 	vmov.f32	s16, s15
 8013836:	e6fd      	b.n	8013634 <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 8013838:	eef0 7a4d 	vmov.f32	s15, s26
 801383c:	e42f      	b.n	801309e <m_kalman_3gyro.isra.0.constprop.0+0x21b6>
 801383e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013842:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8013846:	eeb4 bae7 	vcmpe.f32	s22, s15
 801384a:	2300      	movs	r3, #0
 801384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013850:	f882 31ff 	strb.w	r3, [r2, #511]	; 0x1ff
 8013854:	f8a2 3200 	strh.w	r3, [r2, #512]	; 0x200
 8013858:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 801385c:	f882 3206 	strb.w	r3, [r2, #518]	; 0x206
 8013860:	f73f aa0b 	bgt.w	8012c7a <m_kalman_3gyro.isra.0.constprop.0+0x1d92>
 8013864:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013868:	f893 28ae 	ldrb.w	r2, [r3, #2222]	; 0x8ae
 801386c:	2a00      	cmp	r2, #0
 801386e:	f000 8702 	beq.w	8014676 <m_kalman_3gyro.isra.0.constprop.0+0x378e>
 8013872:	4619      	mov	r1, r3
 8013874:	3a01      	subs	r2, #1
 8013876:	2300      	movs	r3, #0
 8013878:	f881 28ae 	strb.w	r2, [r1, #2222]	; 0x8ae
 801387c:	f8a1 31fc 	strh.w	r3, [r1, #508]	; 0x1fc
 8013880:	f881 31fe 	strb.w	r3, [r1, #510]	; 0x1fe
 8013884:	f881 3205 	strb.w	r3, [r1, #517]	; 0x205
 8013888:	f881 3207 	strb.w	r3, [r1, #519]	; 0x207
 801388c:	f7ff ba2a 	b.w	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8013890:	2301      	movs	r3, #1
 8013892:	f7ff b961 	b.w	8012b58 <m_kalman_3gyro.isra.0.constprop.0+0x1c70>
 8013896:	eeb0 9a67 	vmov.f32	s18, s15
 801389a:	eeb0 3a49 	vmov.f32	s6, s18
 801389e:	e716      	b.n	80136ce <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 80138a0:	ed9d fa7c 	vldr	s30, [sp, #496]	; 0x1f0
 80138a4:	eddd fa7d 	vldr	s31, [sp, #500]	; 0x1f4
 80138a8:	eddd 6a7e 	vldr	s13, [sp, #504]	; 0x1f8
 80138ac:	ed9d 6a7f 	vldr	s12, [sp, #508]	; 0x1fc
 80138b0:	eddd 5a80 	vldr	s11, [sp, #512]	; 0x200
 80138b4:	eddd ea81 	vldr	s29, [sp, #516]	; 0x204
 80138b8:	eeb0 ea68 	vmov.f32	s28, s17
 80138bc:	eef0 da68 	vmov.f32	s27, s17
 80138c0:	eeb0 da68 	vmov.f32	s26, s17
 80138c4:	f7ff bb3e 	b.w	8012f44 <m_kalman_3gyro.isra.0.constprop.0+0x205c>
 80138c8:	eeb0 8a69 	vmov.f32	s16, s19
 80138cc:	e6b2      	b.n	8013634 <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 80138ce:	eef0 7a4d 	vmov.f32	s15, s26
 80138d2:	e4a7      	b.n	8013224 <m_kalman_3gyro.isra.0.constprop.0+0x233c>
 80138d4:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80138d8:	789b      	ldrb	r3, [r3, #2]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	f000 8660 	beq.w	80145a0 <m_kalman_3gyro.isra.0.constprop.0+0x36b8>
 80138e0:	9b07      	ldr	r3, [sp, #28]
 80138e2:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 80138e6:	eeea 9a0a 	vfma.f32	s19, s20, s20
 80138ea:	685a      	ldr	r2, [r3, #4]
 80138ec:	6899      	ldr	r1, [r3, #8]
 80138ee:	681c      	ldr	r4, [r3, #0]
 80138f0:	9248      	str	r2, [sp, #288]	; 0x120
 80138f2:	461d      	mov	r5, r3
 80138f4:	eeb1 9a49 	vneg.f32	s18, s18
 80138f8:	68db      	ldr	r3, [r3, #12]
 80138fa:	9149      	str	r1, [sp, #292]	; 0x124
 80138fc:	eef1 8a68 	vneg.f32	s17, s17
 8013900:	eeb1 8a48 	vneg.f32	s16, s16
 8013904:	462a      	mov	r2, r5
 8013906:	a84f      	add	r0, sp, #316	; 0x13c
 8013908:	a947      	add	r1, sp, #284	; 0x11c
 801390a:	934a      	str	r3, [sp, #296]	; 0x128
 801390c:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 8013910:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 8013914:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 8013918:	9447      	str	r4, [sp, #284]	; 0x11c
 801391a:	f7fb f9e7 	bl	800ecec <m_qmult_eml>
 801391e:	ee19 0a90 	vmov	r0, s19
 8013922:	ed8d 9a47 	vstr	s18, [sp, #284]	; 0x11c
 8013926:	edcd 8a48 	vstr	s17, [sp, #288]	; 0x120
 801392a:	ed8d 8a49 	vstr	s16, [sp, #292]	; 0x124
 801392e:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 8013932:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 8013936:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 801393a:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 801393e:	ed8d aa4a 	vstr	s20, [sp, #296]	; 0x128
 8013942:	f7ec fda5 	bl	8000490 <__aeabi_f2d>
 8013946:	ec41 0b10 	vmov	d0, r0, r1
 801394a:	f005 fec5 	bl	80196d8 <sqrt>
 801394e:	ec51 0b10 	vmov	r0, r1, d0
 8013952:	f7ed f8ed 	bl	8000b30 <__aeabi_d2f>
 8013956:	ee07 0a90 	vmov	s15, r0
 801395a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801395e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8013962:	ac4b      	add	r4, sp, #300	; 0x12c
 8013964:	ee29 9a27 	vmul.f32	s18, s18, s15
 8013968:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801396c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013970:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8013974:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 8013978:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 801397c:	ed8d 8a4d 	vstr	s16, [sp, #308]	; 0x134
 8013980:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 8013984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013986:	f8dd 46b8 	ldr.w	r4, [sp, #1720]	; 0x6b8
 801398a:	6020      	str	r0, [r4, #0]
 801398c:	6061      	str	r1, [r4, #4]
 801398e:	60a2      	str	r2, [r4, #8]
 8013990:	60e3      	str	r3, [r4, #12]
 8013992:	f7ff ba38 	b.w	8012e06 <m_kalman_3gyro.isra.0.constprop.0+0x1f1e>
 8013996:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801399a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 801399e:	2b31      	cmp	r3, #49	; 0x31
 80139a0:	f73e af1f 	bgt.w	80127e2 <m_kalman_3gyro.isra.0.constprop.0+0x18fa>
 80139a4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80139a8:	2200      	movs	r2, #0
 80139aa:	3301      	adds	r3, #1
 80139ac:	f8c1 3458 	str.w	r3, [r1, #1112]	; 0x458
 80139b0:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 80139b4:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 80139b8:	f7fe bf13 	b.w	80127e2 <m_kalman_3gyro.isra.0.constprop.0+0x18fa>
 80139bc:	eeb0 8a68 	vmov.f32	s16, s17
 80139c0:	ee2b ba27 	vmul.f32	s22, s22, s15
 80139c4:	eef5 9a40 	vcmp.f32	s19, #0.0
 80139c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139cc:	ed85 ba01 	vstr	s22, [r5, #4]
 80139d0:	f47f aebb 	bne.w	801374a <m_kalman_3gyro.isra.0.constprop.0+0x2862>
 80139d4:	eef0 9a4b 	vmov.f32	s19, s22
 80139d8:	e62c      	b.n	8013634 <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 80139da:	eef0 aa67 	vmov.f32	s21, s15
 80139de:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8013aa4 <m_kalman_3gyro.isra.0.constprop.0+0x2bbc>
 80139e2:	edc5 8a07 	vstr	s17, [r5, #28]
 80139e6:	eeb0 3a68 	vmov.f32	s6, s17
 80139ea:	eeb0 aa68 	vmov.f32	s20, s17
 80139ee:	e66e      	b.n	80136ce <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 80139f0:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80139f4:	ee17 0a90 	vmov	r0, s15
 80139f8:	f7ec fd4a 	bl	8000490 <__aeabi_f2d>
 80139fc:	ec41 0b10 	vmov	d0, r0, r1
 8013a00:	f005 fe6a 	bl	80196d8 <sqrt>
 8013a04:	ec51 0b10 	vmov	r0, r1, d0
 8013a08:	f7ed f892 	bl	8000b30 <__aeabi_d2f>
 8013a0c:	ee0a 0a10 	vmov	s20, r0
 8013a10:	f7ff b9e1 	b.w	8012dd6 <m_kalman_3gyro.isra.0.constprop.0+0x1eee>
 8013a14:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013a18:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 8013a1c:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 8013a20:	f240 1201 	movw	r2, #257	; 0x101
 8013a24:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8013a28:	9908      	ldr	r1, [sp, #32]
 8013a2a:	680a      	ldr	r2, [r1, #0]
 8013a2c:	67c2      	str	r2, [r0, #124]	; 0x7c
 8013a2e:	684a      	ldr	r2, [r1, #4]
 8013a30:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8013a34:	688a      	ldr	r2, [r1, #8]
 8013a36:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8013a3a:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8013a3e:	7013      	strb	r3, [r2, #0]
 8013a40:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 8013a44:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 8013a48:	3301      	adds	r3, #1
 8013a4a:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 8013a4e:	b16a      	cbz	r2, 8013a6c <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 8013a50:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8013a52:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8013a56:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 8013a5a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 8013a5e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8013a62:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
 8013a66:	2200      	movs	r2, #0
 8013a68:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 8013a6c:	2b1e      	cmp	r3, #30
 8013a6e:	d114      	bne.n	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 8013a70:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013a74:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8013a78:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8013a7c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8013a80:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8013a84:	6018      	str	r0, [r3, #0]
 8013a86:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013a8a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8013a8e:	6019      	str	r1, [r3, #0]
 8013a90:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013a94:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8013a98:	601a      	str	r2, [r3, #0]
 8013a9a:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 8013a9e:	f7fe be8f 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8013aa2:	bf00      	nop
 8013aa4:	00000000 	.word	0x00000000
 8013aa8:	cccccccd 	.word	0xcccccccd
 8013aac:	19999999 	.word	0x19999999
 8013ab0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013ab4:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8013ab8:	ed93 7a00 	vldr	s14, [r3]
 8013abc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013ac0:	ed8d 7a01 	vstr	s14, [sp, #4]
 8013ac4:	f603 0374 	addw	r3, r3, #2164	; 0x874
 8013ac8:	ee67 7a07 	vmul.f32	s15, s14, s14
 8013acc:	ed93 ca00 	vldr	s24, [r3]
 8013ad0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013ad4:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8013ad8:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013adc:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 8013ae0:	ed93 ea00 	vldr	s28, [r3]
 8013ae4:	eeee 7a0e 	vfma.f32	s15, s28, s28
 8013ae8:	ee17 0a90 	vmov	r0, s15
 8013aec:	f7ec fcd0 	bl	8000490 <__aeabi_f2d>
 8013af0:	ec41 0b10 	vmov	d0, r0, r1
 8013af4:	f005 fdf0 	bl	80196d8 <sqrt>
 8013af8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013afc:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8013b00:	ed93 da00 	vldr	s26, [r3]
 8013b04:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013b08:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8013b0c:	ed93 fa00 	vldr	s30, [r3]
 8013b10:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013b14:	ee6d 7a0d 	vmul.f32	s15, s26, s26
 8013b18:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8013b1c:	eeef 7a0f 	vfma.f32	s15, s30, s30
 8013b20:	edd3 ca00 	vldr	s25, [r3]
 8013b24:	eeec 7aac 	vfma.f32	s15, s25, s25
 8013b28:	ec57 6b10 	vmov	r6, r7, d0
 8013b2c:	ee17 0a90 	vmov	r0, s15
 8013b30:	f7ec fcae 	bl	8000490 <__aeabi_f2d>
 8013b34:	ec41 0b10 	vmov	d0, r0, r1
 8013b38:	f005 fdce 	bl	80196d8 <sqrt>
 8013b3c:	ec51 0b10 	vmov	r0, r1, d0
 8013b40:	f7ec fff6 	bl	8000b30 <__aeabi_d2f>
 8013b44:	4be0      	ldr	r3, [pc, #896]	; (8013ec8 <m_kalman_3gyro.isra.0.constprop.0+0x2fe0>)
 8013b46:	ee07 0a90 	vmov	s15, r0
 8013b4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013b4e:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c
 8013b52:	4639      	mov	r1, r7
 8013b54:	4630      	mov	r0, r6
 8013b56:	eec6 ea27 	vdiv.f32	s29, s12, s15
 8013b5a:	ed8d 6a00 	vstr	s12, [sp]
 8013b5e:	f7ec ffe7 	bl	8000b30 <__aeabi_d2f>
 8013b62:	ed9d 6a00 	vldr	s12, [sp]
 8013b66:	ed9d 7a01 	vldr	s14, [sp, #4]
 8013b6a:	ee07 0a90 	vmov	s15, r0
 8013b6e:	eec6 7a27 	vdiv.f32	s15, s12, s15
 8013b72:	ee2e fa8f 	vmul.f32	s30, s29, s30
 8013b76:	ee67 6a8e 	vmul.f32	s13, s15, s28
 8013b7a:	ee6e caac 	vmul.f32	s25, s29, s25
 8013b7e:	ee2f ea66 	vnmul.f32	s28, s30, s13
 8013b82:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8013b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b8a:	eeac ea8c 	vfma.f32	s28, s25, s24
 8013b8e:	ee2e da8d 	vmul.f32	s26, s29, s26
 8013b92:	ee67 eaec 	vnmul.f32	s29, s15, s25
 8013b96:	ee2e 7a0e 	vmul.f32	s14, s28, s28
 8013b9a:	eee6 ea8d 	vfma.f32	s29, s13, s26
 8013b9e:	ee2c ca4d 	vnmul.f32	s24, s24, s26
 8013ba2:	eea7 ca8f 	vfma.f32	s24, s15, s30
 8013ba6:	eef0 7a47 	vmov.f32	s15, s14
 8013baa:	eeee 7aae 	vfma.f32	s15, s29, s29
 8013bae:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8013bb2:	ee17 0a90 	vmov	r0, s15
 8013bb6:	f7ec fc6b 	bl	8000490 <__aeabi_f2d>
 8013bba:	ec41 0b10 	vmov	d0, r0, r1
 8013bbe:	f005 fd8b 	bl	80196d8 <sqrt>
 8013bc2:	ec51 0b10 	vmov	r0, r1, d0
 8013bc6:	f7ec ffb3 	bl	8000b30 <__aeabi_d2f>
 8013bca:	ed9d 6a00 	vldr	s12, [sp]
 8013bce:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013bd0:	ed89 fa02 	vstr	s30, [r9, #8]
 8013bd4:	ee07 0a90 	vmov	s15, r0
 8013bd8:	eec6 7a27 	vdiv.f32	s15, s12, s15
 8013bdc:	aa79      	add	r2, sp, #484	; 0x1e4
 8013bde:	4648      	mov	r0, r9
 8013be0:	ee2e ea27 	vmul.f32	s28, s28, s15
 8013be4:	ee2c ca27 	vmul.f32	s24, s24, s15
 8013be8:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8013bec:	ee2f 7a4e 	vnmul.f32	s14, s30, s28
 8013bf0:	ee6d 6a4c 	vnmul.f32	s13, s26, s24
 8013bf4:	ee6e 7aec 	vnmul.f32	s15, s29, s25
 8013bf8:	eeec 6a8e 	vfma.f32	s13, s25, s28
 8013bfc:	eeae 7a8d 	vfma.f32	s14, s29, s26
 8013c00:	eeec 7a0f 	vfma.f32	s15, s24, s30
 8013c04:	edc9 6a00 	vstr	s13, [r9]
 8013c08:	ed89 7a06 	vstr	s14, [r9, #24]
 8013c0c:	edc9 7a03 	vstr	s15, [r9, #12]
 8013c10:	edc9 ea01 	vstr	s29, [r9, #4]
 8013c14:	ed89 ea04 	vstr	s28, [r9, #16]
 8013c18:	ed89 ca07 	vstr	s24, [r9, #28]
 8013c1c:	ed89 da05 	vstr	s26, [r9, #20]
 8013c20:	edc9 ca08 	vstr	s25, [r9, #32]
 8013c24:	f7fa febc 	bl	800e9a0 <m_mldivide>
 8013c28:	a947      	add	r1, sp, #284	; 0x11c
 8013c2a:	a879      	add	r0, sp, #484	; 0x1e4
 8013c2c:	f7fb fccc 	bl	800f5c8 <m_dcm2q_eml>
 8013c30:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8013ecc <m_kalman_3gyro.isra.0.constprop.0+0x2fe4>
 8013c34:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8013c36:	9948      	ldr	r1, [sp, #288]	; 0x120
 8013c38:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8013c3a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8013c3c:	904b      	str	r0, [sp, #300]	; 0x12c
 8013c3e:	eeb0 7a67 	vmov.f32	s14, s15
 8013c42:	eef0 6a67 	vmov.f32	s13, s15
 8013c46:	914c      	str	r1, [sp, #304]	; 0x130
 8013c48:	924d      	str	r2, [sp, #308]	; 0x134
 8013c4a:	934e      	str	r3, [sp, #312]	; 0x138
 8013c4c:	ed94 5a06 	vldr	s10, [r4, #24]
 8013c50:	edd4 5a07 	vldr	s11, [r4, #28]
 8013c54:	ed94 6a08 	vldr	s12, [r4, #32]
 8013c58:	3424      	adds	r4, #36	; 0x24
 8013c5a:	42a5      	cmp	r5, r4
 8013c5c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013c60:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013c64:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013c68:	d1f0      	bne.n	8013c4c <m_kalman_3gyro.isra.0.constprop.0+0x2d64>
 8013c6a:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8013ed0 <m_kalman_3gyro.isra.0.constprop.0+0x2fe8>
 8013c6e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013c72:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013c76:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8013c7a:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8013c7e:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 8013c82:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013c86:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c92:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 8013c96:	f340 8665 	ble.w	8014964 <m_kalman_3gyro.isra.0.constprop.0+0x3a7c>
 8013c9a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8013c9e:	eef4 7aef 	vcmpe.f32	s15, s31
 8013ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca6:	f340 87a5 	ble.w	8014bf4 <m_kalman_3gyro.isra.0.constprop.0+0x3d0c>
 8013caa:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8013cae:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 8013cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cba:	f77e ad5c 	ble.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8013cbe:	9b08      	ldr	r3, [sp, #32]
 8013cc0:	eddf 7a84 	vldr	s15, [pc, #528]	; 8013ed4 <m_kalman_3gyro.isra.0.constprop.0+0x2fec>
 8013cc4:	ed93 7a00 	vldr	s14, [r3]
 8013cc8:	eeb0 7ac7 	vabs.f32	s14, s14
 8013ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd4:	f57e ad4f 	bpl.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8013cd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8013cdc:	eeb0 7ac7 	vabs.f32	s14, s14
 8013ce0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce8:	f57e ad45 	bpl.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8013cec:	ed93 7a02 	vldr	s14, [r3, #8]
 8013cf0:	eeb0 7ac7 	vabs.f32	s14, s14
 8013cf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cfc:	f57e ad3b 	bpl.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8013d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d02:	eddf 7a75 	vldr	s15, [pc, #468]	; 8013ed8 <m_kalman_3gyro.isra.0.constprop.0+0x2ff0>
 8013d06:	ed93 7a00 	vldr	s14, [r3]
 8013d0a:	eeb0 7ac7 	vabs.f32	s14, s14
 8013d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d16:	f57e ad2e 	bpl.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8013d1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8013d1e:	eeb0 7ac7 	vabs.f32	s14, s14
 8013d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d2a:	f57e ad24 	bpl.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8013d2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8013d32:	eeb0 7ac7 	vabs.f32	s14, s14
 8013d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d3e:	f57e ad1a 	bpl.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8013d42:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013d46:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 8013d4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d4c:	ed93 7a00 	vldr	s14, [r3]
 8013d50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013d52:	ed93 6a00 	vldr	s12, [r3]
 8013d56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d58:	edd3 6a00 	vldr	s13, [r3]
 8013d5c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013d60:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013d64:	2a09      	cmp	r2, #9
 8013d66:	f503 6198 	add.w	r1, r3, #1216	; 0x4c0
 8013d6a:	bfcc      	ite	gt
 8013d6c:	230a      	movgt	r3, #10
 8013d6e:	2305      	movle	r3, #5
 8013d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d74:	bfb4      	ite	lt
 8013d76:	eef0 7a46 	vmovlt.f32	s15, s12
 8013d7a:	eef0 7a47 	vmovge.f32	s15, s14
 8013d7e:	bf98      	it	ls
 8013d80:	eeb0 6a47 	vmovls.f32	s12, s14
 8013d84:	ed91 7a00 	vldr	s14, [r1]
 8013d88:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8013d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d92:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013d96:	bfa8      	it	ge
 8013d98:	eef0 7a47 	vmovge.f32	s15, s14
 8013d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da0:	bf98      	it	ls
 8013da2:	eeb0 6a47 	vmovls.f32	s12, s14
 8013da6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013daa:	ed91 7a00 	vldr	s14, [r1]
 8013dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db2:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013db6:	bfa8      	it	ge
 8013db8:	eef0 7a66 	vmovge.f32	s15, s13
 8013dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc0:	bf88      	it	hi
 8013dc2:	eef0 6a46 	vmovhi.f32	s13, s12
 8013dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013dd2:	bfb8      	it	lt
 8013dd4:	eef0 7a47 	vmovlt.f32	s15, s14
 8013dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ddc:	bf88      	it	hi
 8013dde:	eeb0 7a66 	vmovhi.f32	s14, s13
 8013de2:	2b05      	cmp	r3, #5
 8013de4:	d065      	beq.n	8013eb2 <m_kalman_3gyro.isra.0.constprop.0+0x2fca>
 8013de6:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013dea:	f201 512c 	addw	r1, r1, #1324	; 0x52c
 8013dee:	edd1 6a00 	vldr	s13, [r1]
 8013df2:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013df6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013dfa:	f501 61aa 	add.w	r1, r1, #1360	; 0x550
 8013dfe:	ed91 6a00 	vldr	s12, [r1]
 8013e02:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e0a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013e0e:	bfa8      	it	ge
 8013e10:	eef0 7a66 	vmovge.f32	s15, s13
 8013e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e18:	bf98      	it	ls
 8013e1a:	eeb0 7a66 	vmovls.f32	s14, s13
 8013e1e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8013e22:	f201 5174 	addw	r1, r1, #1396	; 0x574
 8013e26:	edd1 6a00 	vldr	s13, [r1]
 8013e2a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e32:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8013e36:	bfa8      	it	ge
 8013e38:	eef0 7a46 	vmovge.f32	s15, s12
 8013e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e40:	bf88      	it	hi
 8013e42:	eeb0 6a47 	vmovhi.f32	s12, s14
 8013e46:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013e4a:	f501 61b3 	add.w	r1, r1, #1432	; 0x598
 8013e4e:	ed91 7a00 	vldr	s14, [r1]
 8013e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e56:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013e5a:	bfa8      	it	ge
 8013e5c:	eef0 7a66 	vmovge.f32	s15, s13
 8013e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e64:	bf88      	it	hi
 8013e66:	eef0 6a46 	vmovhi.f32	s13, s12
 8013e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e72:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e76:	bfa8      	it	ge
 8013e78:	eef0 7a47 	vmovge.f32	s15, s14
 8013e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e80:	bf88      	it	hi
 8013e82:	eeb0 7a66 	vmovhi.f32	s14, s13
 8013e86:	2b0a      	cmp	r3, #10
 8013e88:	d113      	bne.n	8013eb2 <m_kalman_3gyro.isra.0.constprop.0+0x2fca>
 8013e8a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013e8e:	f201 51bc 	addw	r1, r1, #1468	; 0x5bc
 8013e92:	edd1 6a00 	vldr	s13, [r1]
 8013e96:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e9e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013ea2:	bfb8      	it	lt
 8013ea4:	eef0 7a66 	vmovlt.f32	s15, s13
 8013ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eac:	bf88      	it	hi
 8013eae:	eeb0 7a66 	vmovhi.f32	s14, s13
 8013eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013eb6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8013edc <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 8013eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ec2:	f73e ac58 	bgt.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8013ec6:	e00b      	b.n	8013ee0 <m_kalman_3gyro.isra.0.constprop.0+0x2ff8>
 8013ec8:	200013d8 	.word	0x200013d8
 8013ecc:	00000000 	.word	0x00000000
 8013ed0:	3d088889 	.word	0x3d088889
 8013ed4:	3e4ccccd 	.word	0x3e4ccccd
 8013ed8:	3f99999a 	.word	0x3f99999a
 8013edc:	3be56042 	.word	0x3be56042
 8013ee0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8013ee2:	ed91 6a00 	vldr	s12, [r1]
 8013ee6:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013ee8:	ed91 7a00 	vldr	s14, [r1]
 8013eec:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8013eee:	edd1 6a00 	vldr	s13, [r1]
 8013ef2:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013ef6:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efe:	f201 41c4 	addw	r1, r1, #1220	; 0x4c4
 8013f02:	bfb4      	ite	lt
 8013f04:	eef0 7a46 	vmovlt.f32	s15, s12
 8013f08:	eef0 7a47 	vmovge.f32	s15, s14
 8013f0c:	bf98      	it	ls
 8013f0e:	eeb0 6a47 	vmovls.f32	s12, s14
 8013f12:	ed91 7a00 	vldr	s14, [r1]
 8013f16:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013f18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f20:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013f24:	bfa8      	it	ge
 8013f26:	eef0 7a47 	vmovge.f32	s15, s14
 8013f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f2e:	bf98      	it	ls
 8013f30:	eeb0 6a47 	vmovls.f32	s12, s14
 8013f34:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013f38:	ed91 7a00 	vldr	s14, [r1]
 8013f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f40:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013f44:	bfa8      	it	ge
 8013f46:	eef0 7a66 	vmovge.f32	s15, s13
 8013f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4e:	bf88      	it	hi
 8013f50:	eef0 6a46 	vmovhi.f32	s13, s12
 8013f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f5c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013f60:	bfa8      	it	ge
 8013f62:	eef0 7a47 	vmovge.f32	s15, s14
 8013f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6a:	bf88      	it	hi
 8013f6c:	eeb0 7a66 	vmovhi.f32	s14, s13
 8013f70:	2b05      	cmp	r3, #5
 8013f72:	d065      	beq.n	8014040 <m_kalman_3gyro.isra.0.constprop.0+0x3158>
 8013f74:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013f78:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 8013f7c:	ed91 6a00 	vldr	s12, [r1]
 8013f80:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013f84:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8013f88:	f201 5154 	addw	r1, r1, #1364	; 0x554
 8013f8c:	edd1 6a00 	vldr	s13, [r1]
 8013f90:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f98:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8013f9c:	bfa8      	it	ge
 8013f9e:	eef0 7a46 	vmovge.f32	s15, s12
 8013fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa6:	bf88      	it	hi
 8013fa8:	eeb0 6a47 	vmovhi.f32	s12, s14
 8013fac:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013fb0:	f501 61af 	add.w	r1, r1, #1400	; 0x578
 8013fb4:	ed91 7a00 	vldr	s14, [r1]
 8013fb8:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc0:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013fc4:	bfa8      	it	ge
 8013fc6:	eef0 7a66 	vmovge.f32	s15, s13
 8013fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fce:	bf88      	it	hi
 8013fd0:	eef0 6a46 	vmovhi.f32	s13, s12
 8013fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013fd8:	f201 519c 	addw	r1, r1, #1436	; 0x59c
 8013fdc:	ed91 6a00 	vldr	s12, [r1]
 8013fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013fe8:	bfa8      	it	ge
 8013fea:	eef0 7a47 	vmovge.f32	s15, s14
 8013fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff2:	bf88      	it	hi
 8013ff4:	eeb0 7a66 	vmovhi.f32	s14, s13
 8013ff8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8013ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014000:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014004:	bfa8      	it	ge
 8014006:	eef0 7a46 	vmovge.f32	s15, s12
 801400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801400e:	bf88      	it	hi
 8014010:	eeb0 7a46 	vmovhi.f32	s14, s12
 8014014:	2b0a      	cmp	r3, #10
 8014016:	d113      	bne.n	8014040 <m_kalman_3gyro.isra.0.constprop.0+0x3158>
 8014018:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801401c:	f501 61b8 	add.w	r1, r1, #1472	; 0x5c0
 8014020:	edd1 6a00 	vldr	s13, [r1]
 8014024:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014030:	bfb8      	it	lt
 8014032:	eef0 7a66 	vmovlt.f32	s15, s13
 8014036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801403a:	bf88      	it	hi
 801403c:	eeb0 7a66 	vmovhi.f32	s14, s13
 8014040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014044:	ed1f 7a5b 	vldr	s14, [pc, #-364]	; 8013edc <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 8014048:	eef4 7ac7 	vcmpe.f32	s15, s14
 801404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014050:	f73e ab91 	bgt.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8014054:	9915      	ldr	r1, [sp, #84]	; 0x54
 8014056:	ed91 7a00 	vldr	s14, [r1]
 801405a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801405c:	ed91 6a00 	vldr	s12, [r1]
 8014060:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014062:	edd1 6a00 	vldr	s13, [r1]
 8014066:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801406a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801406e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014072:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 8014076:	bfb4      	ite	lt
 8014078:	eef0 7a46 	vmovlt.f32	s15, s12
 801407c:	eef0 7a47 	vmovge.f32	s15, s14
 8014080:	bf98      	it	ls
 8014082:	eeb0 6a47 	vmovls.f32	s12, s14
 8014086:	ed91 7a00 	vldr	s14, [r1]
 801408a:	993b      	ldr	r1, [sp, #236]	; 0xec
 801408c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014094:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014098:	bfa8      	it	ge
 801409a:	eef0 7a47 	vmovge.f32	s15, s14
 801409e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140a2:	bf98      	it	ls
 80140a4:	eeb0 6a47 	vmovls.f32	s12, s14
 80140a8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80140ac:	ed91 7a00 	vldr	s14, [r1]
 80140b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b4:	eef4 6ac6 	vcmpe.f32	s13, s12
 80140b8:	bfa8      	it	ge
 80140ba:	eef0 7a66 	vmovge.f32	s15, s13
 80140be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140c2:	bf88      	it	hi
 80140c4:	eef0 6a46 	vmovhi.f32	s13, s12
 80140c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80140d4:	bfa8      	it	ge
 80140d6:	eef0 7a47 	vmovge.f32	s15, s14
 80140da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140de:	bf88      	it	hi
 80140e0:	eeb0 7a66 	vmovhi.f32	s14, s13
 80140e4:	2b05      	cmp	r3, #5
 80140e6:	d065      	beq.n	80141b4 <m_kalman_3gyro.isra.0.constprop.0+0x32cc>
 80140e8:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80140ec:	f201 5134 	addw	r1, r1, #1332	; 0x534
 80140f0:	edd1 6a00 	vldr	s13, [r1]
 80140f4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80140f8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80140fc:	f501 61ab 	add.w	r1, r1, #1368	; 0x558
 8014100:	ed91 6a00 	vldr	s12, [r1]
 8014104:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014110:	bfa8      	it	ge
 8014112:	eef0 7a66 	vmovge.f32	s15, s13
 8014116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411a:	bf98      	it	ls
 801411c:	eeb0 7a66 	vmovls.f32	s14, s13
 8014120:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014124:	f201 517c 	addw	r1, r1, #1404	; 0x57c
 8014128:	edd1 6a00 	vldr	s13, [r1]
 801412c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014134:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8014138:	bfa8      	it	ge
 801413a:	eef0 7a46 	vmovge.f32	s15, s12
 801413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014142:	bf88      	it	hi
 8014144:	eeb0 6a47 	vmovhi.f32	s12, s14
 8014148:	eef4 6ae7 	vcmpe.f32	s13, s15
 801414c:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 8014150:	ed91 7a00 	vldr	s14, [r1]
 8014154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014158:	eef4 6ac6 	vcmpe.f32	s13, s12
 801415c:	bfa8      	it	ge
 801415e:	eef0 7a66 	vmovge.f32	s15, s13
 8014162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014166:	bf88      	it	hi
 8014168:	eef0 6a46 	vmovhi.f32	s13, s12
 801416c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014174:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014178:	bfa8      	it	ge
 801417a:	eef0 7a47 	vmovge.f32	s15, s14
 801417e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014182:	bf88      	it	hi
 8014184:	eeb0 7a66 	vmovhi.f32	s14, s13
 8014188:	2b0a      	cmp	r3, #10
 801418a:	d113      	bne.n	80141b4 <m_kalman_3gyro.isra.0.constprop.0+0x32cc>
 801418c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014190:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 8014194:	edd3 6a00 	vldr	s13, [r3]
 8014198:	eef4 7ae6 	vcmpe.f32	s15, s13
 801419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80141a4:	bfb8      	it	lt
 80141a6:	eef0 7a66 	vmovlt.f32	s15, s13
 80141aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ae:	bf88      	it	hi
 80141b0:	eeb0 7a66 	vmovhi.f32	s14, s13
 80141b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141b8:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 8013edc <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 80141bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c4:	f73e aad7 	bgt.w	8012776 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 80141c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	f43e aad7 	beq.w	801277e <m_kalman_3gyro.isra.0.constprop.0+0x1896>
 80141d0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	d123      	bne.n	8014220 <m_kalman_3gyro.isra.0.constprop.0+0x3338>
 80141d8:	2a0a      	cmp	r2, #10
 80141da:	f43f ac1b 	beq.w	8013a14 <m_kalman_3gyro.isra.0.constprop.0+0x2b2c>
 80141de:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80141e2:	2300      	movs	r3, #0
 80141e4:	3201      	adds	r2, #1
 80141e6:	f8c1 2450 	str.w	r2, [r1, #1104]	; 0x450
 80141ea:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 80141ee:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 80141f2:	f8c1 345c 	str.w	r3, [r1, #1116]	; 0x45c
 80141f6:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 80141fa:	f7fe bae1 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 80141fe:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8014202:	eef4 7aef 	vcmpe.f32	s15, s31
 8014206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801420a:	f73f ad4e 	bgt.w	8013caa <m_kalman_3gyro.isra.0.constprop.0+0x2dc2>
 801420e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014210:	2b00      	cmp	r3, #0
 8014212:	f43e aab4 	beq.w	801277e <m_kalman_3gyro.isra.0.constprop.0+0x1896>
 8014216:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801421a:	2b01      	cmp	r3, #1
 801421c:	f000 837a 	beq.w	8014914 <m_kalman_3gyro.isra.0.constprop.0+0x3a2c>
 8014220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014222:	2b02      	cmp	r3, #2
 8014224:	bf08      	it	eq
 8014226:	f50d 7902 	addeq.w	r9, sp, #520	; 0x208
 801422a:	f000 84e3 	beq.w	8014bf4 <m_kalman_3gyro.isra.0.constprop.0+0x3d0c>
 801422e:	2b04      	cmp	r3, #4
 8014230:	f040 8370 	bne.w	8014914 <m_kalman_3gyro.isra.0.constprop.0+0x3a2c>
 8014234:	4bd4      	ldr	r3, [pc, #848]	; (8014588 <m_kalman_3gyro.isra.0.constprop.0+0x36a0>)
 8014236:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
 801423a:	2a04      	cmp	r2, #4
 801423c:	f240 859a 	bls.w	8014d74 <m_kalman_3gyro.isra.0.constprop.0+0x3e8c>
 8014240:	48d1      	ldr	r0, [pc, #836]	; (8014588 <m_kalman_3gyro.isra.0.constprop.0+0x36a0>)
 8014242:	eddf 7ad2 	vldr	s15, [pc, #840]	; 801458c <m_kalman_3gyro.isra.0.constprop.0+0x36a4>
 8014246:	ed90 7a74 	vldr	s14, [r0, #464]	; 0x1d0
 801424a:	ed9f 3ad1 	vldr	s6, [pc, #836]	; 8014590 <m_kalman_3gyro.isra.0.constprop.0+0x36a8>
 801424e:	edd0 0a71 	vldr	s1, [r0, #452]	; 0x1c4
 8014252:	edd0 3a73 	vldr	s7, [r0, #460]	; 0x1cc
 8014256:	ed80 7a71 	vstr	s14, [r0, #452]	; 0x1c4
 801425a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801425e:	ed90 4a70 	vldr	s8, [r0, #448]	; 0x1c0
 8014262:	edd0 4a72 	vldr	s9, [r0, #456]	; 0x1c8
 8014266:	ed90 1a7f 	vldr	s2, [r0, #508]	; 0x1fc
 801426a:	edd0 1a80 	vldr	s3, [r0, #512]	; 0x200
 801426e:	ed90 2a81 	vldr	s4, [r0, #516]	; 0x204
 8014272:	edd0 5a75 	vldr	s11, [r0, #468]	; 0x1d4
 8014276:	edd0 2a82 	vldr	s5, [r0, #520]	; 0x208
 801427a:	ed90 6a83 	vldr	s12, [r0, #524]	; 0x20c
 801427e:	edd0 6a84 	vldr	s13, [r0, #528]	; 0x210
 8014282:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 8014286:	f8d0 11dc 	ldr.w	r1, [r0, #476]	; 0x1dc
 801428a:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
 801428e:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
 8014292:	eea0 7a83 	vfma.f32	s14, s1, s6
 8014296:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801429a:	f8c0 11d0 	str.w	r1, [r0, #464]	; 0x1d0
 801429e:	ee23 5aa7 	vmul.f32	s10, s7, s15
 80142a2:	edc0 0a6e 	vstr	s1, [r0, #440]	; 0x1b8
 80142a6:	eea4 5a03 	vfma.f32	s10, s8, s6
 80142aa:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
 80142ae:	f8c0 21d4 	str.w	r2, [r0, #468]	; 0x1d4
 80142b2:	edc0 3a70 	vstr	s7, [r0, #448]	; 0x1c0
 80142b6:	ed80 4a6d 	vstr	s8, [r0, #436]	; 0x1b4
 80142ba:	edc0 4a6f 	vstr	s9, [r0, #444]	; 0x1bc
 80142be:	ed9f 4ab5 	vldr	s8, [pc, #724]	; 8014594 <m_kalman_3gyro.isra.0.constprop.0+0x36ac>
 80142c2:	edc0 5a72 	vstr	s11, [r0, #456]	; 0x1c8
 80142c6:	ed80 1a7c 	vstr	s2, [r0, #496]	; 0x1f0
 80142ca:	edc0 2a7f 	vstr	s5, [r0, #508]	; 0x1fc
 80142ce:	edc0 1a7d 	vstr	s3, [r0, #500]	; 0x1f4
 80142d2:	ed80 6a80 	vstr	s12, [r0, #512]	; 0x200
 80142d6:	ed80 2a7e 	vstr	s4, [r0, #504]	; 0x1f8
 80142da:	edc0 6a81 	vstr	s13, [r0, #516]	; 0x204
 80142de:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
 80142e2:	edd0 0a7a 	vldr	s1, [r0, #488]	; 0x1e8
 80142e6:	ed90 0a79 	vldr	s0, [r0, #484]	; 0x1e4
 80142ea:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80142ee:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
 80142f2:	eea0 7a84 	vfma.f32	s14, s1, s8
 80142f6:	4601      	mov	r1, r0
 80142f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142fa:	edc1 0a77 	vstr	s1, [r1, #476]	; 0x1dc
 80142fe:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014302:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8014306:	edd0 3a01 	vldr	s7, [r0, #4]
 801430a:	edd0 0a00 	vldr	s1, [r0]
 801430e:	eea0 5a04 	vfma.f32	s10, s0, s8
 8014312:	460a      	mov	r2, r1
 8014314:	eee4 5a83 	vfma.f32	s11, s9, s6
 8014318:	eddf 4a9f 	vldr	s9, [pc, #636]	; 8014598 <m_kalman_3gyro.isra.0.constprop.0+0x36b0>
 801431c:	edd2 ba88 	vldr	s23, [r2, #544]	; 0x220
 8014320:	ed92 da89 	vldr	s26, [r2, #548]	; 0x224
 8014324:	edc2 3a7a 	vstr	s7, [r2, #488]	; 0x1e8
 8014328:	ee26 6a27 	vmul.f32	s12, s12, s15
 801432c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014330:	eef0 7a62 	vmov.f32	s15, s5
 8014334:	eea3 7aa4 	vfma.f32	s14, s7, s9
 8014338:	eee1 7a03 	vfma.f32	s15, s2, s6
 801433c:	ed91 1a7b 	vldr	s2, [r1, #492]	; 0x1ec
 8014340:	9908      	ldr	r1, [sp, #32]
 8014342:	edd2 3a8a 	vldr	s7, [r2, #552]	; 0x228
 8014346:	edd1 2a01 	vldr	s5, [r1, #4]
 801434a:	ed82 0a76 	vstr	s0, [r2, #472]	; 0x1d8
 801434e:	eea0 5aa4 	vfma.f32	s10, s1, s9
 8014352:	eee1 5a04 	vfma.f32	s11, s2, s8
 8014356:	eea1 6a83 	vfma.f32	s12, s3, s6
 801435a:	eee2 6a03 	vfma.f32	s13, s4, s6
 801435e:	edd0 1a02 	vldr	s3, [r0, #8]
 8014362:	ed91 2a00 	vldr	s4, [r1]
 8014366:	ed91 3a02 	vldr	s6, [r1, #8]
 801436a:	ed82 7a8c 	vstr	s14, [r2, #560]	; 0x230
 801436e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014372:	eee1 5aa4 	vfma.f32	s11, s3, s9
 8014376:	eeeb 7a84 	vfma.f32	s15, s23, s8
 801437a:	eead 6a04 	vfma.f32	s12, s26, s8
 801437e:	eee3 6a84 	vfma.f32	s13, s7, s8
 8014382:	eea5 7a05 	vfma.f32	s14, s10, s10
 8014386:	eee2 7a24 	vfma.f32	s15, s4, s9
 801438a:	eea2 6aa4 	vfma.f32	s12, s5, s9
 801438e:	eee3 6a24 	vfma.f32	s13, s6, s9
 8014392:	eea5 7aa5 	vfma.f32	s14, s11, s11
 8014396:	edc2 0a79 	vstr	s1, [r2, #484]	; 0x1e4
 801439a:	edc2 7a8e 	vstr	s15, [r2, #568]	; 0x238
 801439e:	ee17 0a10 	vmov	r0, s14
 80143a2:	ed82 5a8b 	vstr	s10, [r2, #556]	; 0x22c
 80143a6:	edc2 5a8d 	vstr	s11, [r2, #564]	; 0x234
 80143aa:	ed82 1a78 	vstr	s2, [r2, #480]	; 0x1e0
 80143ae:	edc2 1a7b 	vstr	s3, [r2, #492]	; 0x1ec
 80143b2:	edc2 ba85 	vstr	s23, [r2, #532]	; 0x214
 80143b6:	ed82 2a88 	vstr	s4, [r2, #544]	; 0x220
 80143ba:	ed82 da86 	vstr	s26, [r2, #536]	; 0x218
 80143be:	edc2 2a89 	vstr	s5, [r2, #548]	; 0x224
 80143c2:	ed82 3a8a 	vstr	s6, [r2, #552]	; 0x228
 80143c6:	edc2 3a87 	vstr	s7, [r2, #540]	; 0x21c
 80143ca:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
 80143ce:	ed82 6a8f 	vstr	s12, [r2, #572]	; 0x23c
 80143d2:	edc2 6a90 	vstr	s13, [r2, #576]	; 0x240
 80143d6:	eeb0 ca67 	vmov.f32	s24, s15
 80143da:	eef0 ca46 	vmov.f32	s25, s12
 80143de:	eef0 da66 	vmov.f32	s27, s13
 80143e2:	f7ec f855 	bl	8000490 <__aeabi_f2d>
 80143e6:	ec41 0b10 	vmov	d0, r0, r1
 80143ea:	f005 f975 	bl	80196d8 <sqrt>
 80143ee:	ec51 0b10 	vmov	r0, r1, d0
 80143f2:	f7ec fb9d 	bl	8000b30 <__aeabi_d2f>
 80143f6:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80143fa:	ee07 0a10 	vmov	s14, r0
 80143fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014406:	f77f ab48 	ble.w	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 801440a:	ee6c 7a0c 	vmul.f32	s15, s24, s24
 801440e:	eeec 7aac 	vfma.f32	s15, s25, s25
 8014412:	eeed 7aad 	vfma.f32	s15, s27, s27
 8014416:	ee17 0a90 	vmov	r0, s15
 801441a:	f7ec f839 	bl	8000490 <__aeabi_f2d>
 801441e:	ec41 0b10 	vmov	d0, r0, r1
 8014422:	f005 f959 	bl	80196d8 <sqrt>
 8014426:	ec51 0b10 	vmov	r0, r1, d0
 801442a:	f7ec fb81 	bl	8000b30 <__aeabi_d2f>
 801442e:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8014432:	ee07 0a10 	vmov	s14, r0
 8014436:	eef4 7ac7 	vcmpe.f32	s15, s14
 801443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801443e:	f77f ab2c 	ble.w	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 8014442:	9b08      	ldr	r3, [sp, #32]
 8014444:	ed93 7a00 	vldr	s14, [r3]
 8014448:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 801444c:	eeb0 7ac7 	vabs.f32	s14, s14
 8014450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014458:	f57f ab1f 	bpl.w	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 801445c:	ed93 7a01 	vldr	s14, [r3, #4]
 8014460:	eeb0 7ac7 	vabs.f32	s14, s14
 8014464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446c:	f57f ab15 	bpl.w	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 8014470:	ed93 7a02 	vldr	s14, [r3, #8]
 8014474:	eeb0 7ac7 	vabs.f32	s14, s14
 8014478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014480:	f57f ab0b 	bpl.w	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 8014484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014486:	edd3 7a00 	vldr	s15, [r3]
 801448a:	eef0 7ae7 	vabs.f32	s15, s15
 801448e:	ee17 0a90 	vmov	r0, s15
 8014492:	f7eb fffd 	bl	8000490 <__aeabi_f2d>
 8014496:	a33a      	add	r3, pc, #232	; (adr r3, 8014580 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 8014498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449c:	f7ec fac2 	bl	8000a24 <__aeabi_dcmplt>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	f43f aafa 	beq.w	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 80144a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80144ac:	eef0 7ae7 	vabs.f32	s15, s15
 80144b0:	ee17 0a90 	vmov	r0, s15
 80144b4:	f7eb ffec 	bl	8000490 <__aeabi_f2d>
 80144b8:	a331      	add	r3, pc, #196	; (adr r3, 8014580 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 80144ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144be:	f7ec fab1 	bl	8000a24 <__aeabi_dcmplt>
 80144c2:	2800      	cmp	r0, #0
 80144c4:	f43f aae9 	beq.w	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 80144c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80144ce:	eef0 7ae7 	vabs.f32	s15, s15
 80144d2:	ee17 0a90 	vmov	r0, s15
 80144d6:	f7eb ffdb 	bl	8000490 <__aeabi_f2d>
 80144da:	a329      	add	r3, pc, #164	; (adr r3, 8014580 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 80144dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e0:	f7ec faa0 	bl	8000a24 <__aeabi_dcmplt>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	f43f aad8 	beq.w	8013a9a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 80144ea:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80144ee:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80144f2:	2b0a      	cmp	r3, #10
 80144f4:	f000 84b0 	beq.w	8014e58 <m_kalman_3gyro.isra.0.constprop.0+0x3f70>
 80144f8:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80144fc:	2200      	movs	r2, #0
 80144fe:	3301      	adds	r3, #1
 8014500:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 8014504:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8014508:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 801450c:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8014510:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 8014514:	f7fe b954 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8014518:	4f20      	ldr	r7, [pc, #128]	; (801459c <m_kalman_3gyro.isra.0.constprop.0+0x36b4>)
 801451a:	2600      	movs	r6, #0
 801451c:	f7fd bcaa 	b.w	8011e74 <m_kalman_3gyro.isra.0.constprop.0+0xf8c>
 8014520:	eef1 ba04 	vmov.f32	s23, #20	; 0x40a00000  5.0
 8014524:	f7fe b89a 	b.w	801265c <m_kalman_3gyro.isra.0.constprop.0+0x1774>
 8014528:	eef0 ca47 	vmov.f32	s25, s14
 801452c:	ee27 7aaa 	vmul.f32	s14, s15, s21
 8014530:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8014534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014538:	ed85 7a06 	vstr	s14, [r5, #24]
 801453c:	d109      	bne.n	8014552 <m_kalman_3gyro.isra.0.constprop.0+0x366a>
 801453e:	eeb0 aa47 	vmov.f32	s20, s14
 8014542:	eef0 aa66 	vmov.f32	s21, s13
 8014546:	f7ff b8b0 	b.w	80136aa <m_kalman_3gyro.isra.0.constprop.0+0x27c2>
 801454a:	eef0 ca67 	vmov.f32	s25, s15
 801454e:	f7ff b894 	b.w	801367a <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 8014552:	eef0 aa66 	vmov.f32	s21, s13
 8014556:	f7ff b93c 	b.w	80137d2 <m_kalman_3gyro.isra.0.constprop.0+0x28ea>
 801455a:	eef0 9a4b 	vmov.f32	s19, s22
 801455e:	ee67 6aab 	vmul.f32	s13, s15, s23
 8014562:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8014566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456a:	edc5 6a03 	vstr	s13, [r5, #12]
 801456e:	d16b      	bne.n	8014648 <m_kalman_3gyro.isra.0.constprop.0+0x3760>
 8014570:	eeb0 ca66 	vmov.f32	s24, s13
 8014574:	eef0 ba47 	vmov.f32	s23, s14
 8014578:	f7ff b8fd 	b.w	8013776 <m_kalman_3gyro.isra.0.constprop.0+0x288e>
 801457c:	f3af 8000 	nop.w
 8014580:	66666666 	.word	0x66666666
 8014584:	3ff66666 	.word	0x3ff66666
 8014588:	200013d8 	.word	0x200013d8
 801458c:	bdcccccd 	.word	0xbdcccccd
 8014590:	be4ccccd 	.word	0xbe4ccccd
 8014594:	3dcccccd 	.word	0x3dcccccd
 8014598:	3e4ccccd 	.word	0x3e4ccccd
 801459c:	40140000 	.word	0x40140000
 80145a0:	9b07      	ldr	r3, [sp, #28]
 80145a2:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 80145a6:	eeea 9a0a 	vfma.f32	s19, s20, s20
 80145aa:	685a      	ldr	r2, [r3, #4]
 80145ac:	6899      	ldr	r1, [r3, #8]
 80145ae:	681c      	ldr	r4, [r3, #0]
 80145b0:	9248      	str	r2, [sp, #288]	; 0x120
 80145b2:	461d      	mov	r5, r3
 80145b4:	eeb1 9a49 	vneg.f32	s18, s18
 80145b8:	68db      	ldr	r3, [r3, #12]
 80145ba:	9149      	str	r1, [sp, #292]	; 0x124
 80145bc:	eef1 8a68 	vneg.f32	s17, s17
 80145c0:	eeb1 8a48 	vneg.f32	s16, s16
 80145c4:	462a      	mov	r2, r5
 80145c6:	a84f      	add	r0, sp, #316	; 0x13c
 80145c8:	a947      	add	r1, sp, #284	; 0x11c
 80145ca:	934a      	str	r3, [sp, #296]	; 0x128
 80145cc:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 80145d0:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 80145d4:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 80145d8:	9447      	str	r4, [sp, #284]	; 0x11c
 80145da:	f7fa fb87 	bl	800ecec <m_qmult_eml>
 80145de:	ee19 0a90 	vmov	r0, s19
 80145e2:	ed8d 9a47 	vstr	s18, [sp, #284]	; 0x11c
 80145e6:	edcd 8a48 	vstr	s17, [sp, #288]	; 0x120
 80145ea:	ed8d 8a49 	vstr	s16, [sp, #292]	; 0x124
 80145ee:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 80145f2:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 80145f6:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 80145fa:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 80145fe:	ed8d aa4a 	vstr	s20, [sp, #296]	; 0x128
 8014602:	f7eb ff45 	bl	8000490 <__aeabi_f2d>
 8014606:	ec41 0b10 	vmov	d0, r0, r1
 801460a:	f005 f865 	bl	80196d8 <sqrt>
 801460e:	ec51 0b10 	vmov	r0, r1, d0
 8014612:	f7ec fa8d 	bl	8000b30 <__aeabi_d2f>
 8014616:	ee07 0a90 	vmov	s15, r0
 801461a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801461e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014622:	ac4b      	add	r4, sp, #300	; 0x12c
 8014624:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014628:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801462c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014630:	ee2a aa27 	vmul.f32	s20, s20, s15
 8014634:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 8014638:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 801463c:	ed8d 8a4d 	vstr	s16, [sp, #308]	; 0x134
 8014640:	ed8d aa4e 	vstr	s20, [sp, #312]	; 0x138
 8014644:	f7ff b99e 	b.w	8013984 <m_kalman_3gyro.isra.0.constprop.0+0x2a9c>
 8014648:	eef0 ba47 	vmov.f32	s23, s14
 801464c:	ee27 7a8c 	vmul.f32	s14, s15, s24
 8014650:	eef5 ca40 	vcmp.f32	s25, #0.0
 8014654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014658:	ed85 7a04 	vstr	s14, [r5, #16]
 801465c:	d122      	bne.n	80146a4 <m_kalman_3gyro.isra.0.constprop.0+0x37bc>
 801465e:	eef0 ca47 	vmov.f32	s25, s14
 8014662:	eeb0 ca66 	vmov.f32	s24, s13
 8014666:	f7ff b808 	b.w	801367a <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 801466a:	eef0 6a68 	vmov.f32	s13, s17
 801466e:	e75d      	b.n	801452c <m_kalman_3gyro.isra.0.constprop.0+0x3644>
 8014670:	eeb0 7a68 	vmov.f32	s14, s17
 8014674:	e773      	b.n	801455e <m_kalman_3gyro.isra.0.constprop.0+0x3676>
 8014676:	f8d3 68b0 	ldr.w	r6, [r3, #2224]	; 0x8b0
 801467a:	b1ee      	cbz	r6, 80146b8 <m_kalman_3gyro.isra.0.constprop.0+0x37d0>
 801467c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801467e:	6818      	ldr	r0, [r3, #0]
 8014680:	f7eb ff06 	bl	8000490 <__aeabi_f2d>
 8014684:	a3b5      	add	r3, pc, #724	; (adr r3, 801495c <m_kalman_3gyro.isra.0.constprop.0+0x3a74>)
 8014686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468a:	f7ec f9e9 	bl	8000a60 <__aeabi_dcmpgt>
 801468e:	b198      	cbz	r0, 80146b8 <m_kalman_3gyro.isra.0.constprop.0+0x37d0>
 8014690:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014694:	3e01      	subs	r6, #1
 8014696:	f8c3 68b0 	str.w	r6, [r3, #2224]	; 0x8b0
 801469a:	f7fe bb23 	b.w	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 801469e:	eef0 6a68 	vmov.f32	s13, s17
 80146a2:	e7d3      	b.n	801464c <m_kalman_3gyro.isra.0.constprop.0+0x3764>
 80146a4:	eeb0 ca66 	vmov.f32	s24, s13
 80146a8:	f7ff b875 	b.w	8013796 <m_kalman_3gyro.isra.0.constprop.0+0x28ae>
 80146ac:	a9bf      	add	r1, sp, #764	; 0x2fc
 80146ae:	a8b2      	add	r0, sp, #712	; 0x2c8
 80146b0:	eeb0 0a4a 	vmov.f32	s0, s20
 80146b4:	f7fd bb76 	b.w	8011da4 <m_kalman_3gyro.isra.0.constprop.0+0xebc>
 80146b8:	ee1f 0a90 	vmov	r0, s31
 80146bc:	f7eb fee8 	bl	8000490 <__aeabi_f2d>
 80146c0:	4604      	mov	r4, r0
 80146c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80146c4:	460d      	mov	r5, r1
 80146c6:	f7eb fee3 	bl	8000490 <__aeabi_f2d>
 80146ca:	4b9f      	ldr	r3, [pc, #636]	; (8014948 <m_kalman_3gyro.isra.0.constprop.0+0x3a60>)
 80146cc:	2200      	movs	r2, #0
 80146ce:	f7eb ff37 	bl	8000540 <__aeabi_dmul>
 80146d2:	4602      	mov	r2, r0
 80146d4:	460b      	mov	r3, r1
 80146d6:	4620      	mov	r0, r4
 80146d8:	4629      	mov	r1, r5
 80146da:	f7ec f9a3 	bl	8000a24 <__aeabi_dcmplt>
 80146de:	2800      	cmp	r0, #0
 80146e0:	f43e ab00 	beq.w	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 80146e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80146e6:	f7eb fed3 	bl	8000490 <__aeabi_f2d>
 80146ea:	4604      	mov	r4, r0
 80146ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80146ee:	460d      	mov	r5, r1
 80146f0:	f7eb fece 	bl	8000490 <__aeabi_f2d>
 80146f4:	4b94      	ldr	r3, [pc, #592]	; (8014948 <m_kalman_3gyro.isra.0.constprop.0+0x3a60>)
 80146f6:	2200      	movs	r2, #0
 80146f8:	f7eb ff22 	bl	8000540 <__aeabi_dmul>
 80146fc:	4602      	mov	r2, r0
 80146fe:	460b      	mov	r3, r1
 8014700:	4620      	mov	r0, r4
 8014702:	4629      	mov	r1, r5
 8014704:	f7ec f98e 	bl	8000a24 <__aeabi_dcmplt>
 8014708:	2800      	cmp	r0, #0
 801470a:	f43e aaeb 	beq.w	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 801470e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014710:	f7eb febe 	bl	8000490 <__aeabi_f2d>
 8014714:	4604      	mov	r4, r0
 8014716:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014718:	460d      	mov	r5, r1
 801471a:	f7eb feb9 	bl	8000490 <__aeabi_f2d>
 801471e:	4602      	mov	r2, r0
 8014720:	460b      	mov	r3, r1
 8014722:	f7eb fd57 	bl	80001d4 <__adddf3>
 8014726:	460b      	mov	r3, r1
 8014728:	4602      	mov	r2, r0
 801472a:	4629      	mov	r1, r5
 801472c:	4620      	mov	r0, r4
 801472e:	f7ec f997 	bl	8000a60 <__aeabi_dcmpgt>
 8014732:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014736:	f893 38ad 	ldrb.w	r3, [r3, #2221]	; 0x8ad
 801473a:	2800      	cmp	r0, #0
 801473c:	f000 8309 	beq.w	8014d52 <m_kalman_3gyro.isra.0.constprop.0+0x3e6a>
 8014740:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014744:	2200      	movs	r2, #0
 8014746:	2b0e      	cmp	r3, #14
 8014748:	f8a1 21fc 	strh.w	r2, [r1, #508]	; 0x1fc
 801474c:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 8014750:	f881 2205 	strb.w	r2, [r1, #517]	; 0x205
 8014754:	f881 2207 	strb.w	r2, [r1, #519]	; 0x207
 8014758:	f200 83af 	bhi.w	8014eba <m_kalman_3gyro.isra.0.constprop.0+0x3fd2>
 801475c:	3303      	adds	r3, #3
 801475e:	f881 38ad 	strb.w	r3, [r1, #2221]	; 0x8ad
 8014762:	f7fe babf 	b.w	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8014766:	edd3 7a03 	vldr	s15, [r3, #12]
 801476a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801476e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014772:	f47d abe7 	bne.w	8011f44 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 8014776:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801477a:	9804      	ldr	r0, [sp, #16]
 801477c:	645c      	str	r4, [r3, #68]	; 0x44
 801477e:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8014782:	649c      	str	r4, [r3, #72]	; 0x48
 8014784:	64dc      	str	r4, [r3, #76]	; 0x4c
 8014786:	655c      	str	r4, [r3, #84]	; 0x54
 8014788:	659c      	str	r4, [r3, #88]	; 0x58
 801478a:	65dc      	str	r4, [r3, #92]	; 0x5c
 801478c:	641d      	str	r5, [r3, #64]	; 0x40
 801478e:	651d      	str	r5, [r3, #80]	; 0x50
 8014790:	661d      	str	r5, [r3, #96]	; 0x60
 8014792:	f7fa ff19 	bl	800f5c8 <m_dcm2q_eml>
 8014796:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801479a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801479e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
 80147a2:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
 80147a6:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
 80147aa:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 80147ae:	681a      	ldr	r2, [r3, #0]
 80147b0:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
 80147b4:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 80147b8:	4b64      	ldr	r3, [pc, #400]	; (801494c <m_kalman_3gyro.isra.0.constprop.0+0x3a64>)
 80147ba:	6852      	ldr	r2, [r2, #4]
 80147bc:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
 80147c0:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 80147c4:	6892      	ldr	r2, [r2, #8]
 80147c6:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
 80147ca:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80147ce:	f8c1 20a8 	str.w	r2, [r1, #168]	; 0xa8
 80147d2:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
 80147d6:	f8c1 50b4 	str.w	r5, [r1, #180]	; 0xb4
 80147da:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80147de:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 80147e2:	2100      	movs	r1, #0
 80147e4:	f004 fd96 	bl	8019314 <memset>
 80147e8:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80147ec:	4b58      	ldr	r3, [pc, #352]	; (8014950 <m_kalman_3gyro.isra.0.constprop.0+0x3a68>)
 80147ee:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 80147f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80147f6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 80147fa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 80147fe:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8014802:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 8014806:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 801480a:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 801480e:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 8014812:	f7fd bb97 	b.w	8011f44 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 8014816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801481a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014822:	f77e aa22 	ble.w	8012c6a <m_kalman_3gyro.isra.0.constprop.0+0x1d82>
 8014826:	ed93 6a04 	vldr	s12, [r3, #16]
 801482a:	edd3 6a05 	vldr	s13, [r3, #20]
 801482e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014832:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801483a:	ed83 7a03 	vstr	s14, [r3, #12]
 801483e:	ed83 6a04 	vstr	s12, [r3, #16]
 8014842:	edc3 7a05 	vstr	s15, [r3, #20]
 8014846:	f7fe ba10 	b.w	8012c6a <m_kalman_3gyro.isra.0.constprop.0+0x1d82>
 801484a:	4634      	mov	r4, r6
 801484c:	463d      	mov	r5, r7
 801484e:	f7fe b9f9 	b.w	8012c44 <m_kalman_3gyro.isra.0.constprop.0+0x1d5c>
 8014852:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014856:	9907      	ldr	r1, [sp, #28]
 8014858:	edc3 9a12 	vstr	s19, [r3, #72]	; 0x48
 801485c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014860:	ed83 9a15 	vstr	s18, [r3, #84]	; 0x54
 8014864:	edc3 8a18 	vstr	s17, [r3, #96]	; 0x60
 8014868:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 801486c:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 8014870:	ed83 8a17 	vstr	s16, [r3, #92]	; 0x5c
 8014874:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 8014878:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 801487c:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 8014880:	9004      	str	r0, [sp, #16]
 8014882:	f7fa fea1 	bl	800f5c8 <m_dcm2q_eml>
 8014886:	eddf 7a33 	vldr	s15, [pc, #204]	; 8014954 <m_kalman_3gyro.isra.0.constprop.0+0x3a6c>
 801488a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801488e:	eef4 aae7 	vcmpe.f32	s21, s15
 8014892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014896:	ed83 da2b 	vstr	s26, [r3, #172]	; 0xac
 801489a:	f140 814a 	bpl.w	8014b32 <m_kalman_3gyro.isra.0.constprop.0+0x3c4a>
 801489e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8014958 <m_kalman_3gyro.isra.0.constprop.0+0x3a70>
 80148a2:	eef4 aae7 	vcmpe.f32	s21, s15
 80148a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80148ae:	bfc8      	it	gt
 80148b0:	eef0 7a6a 	vmovgt.f32	s15, s21
 80148b4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 80148b8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80148bc:	2100      	movs	r1, #0
 80148be:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 80148c2:	f004 fd27 	bl	8019314 <memset>
 80148c6:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 80148ca:	4b21      	ldr	r3, [pc, #132]	; (8014950 <m_kalman_3gyro.isra.0.constprop.0+0x3a68>)
 80148cc:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 80148d0:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 80148d4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80148d8:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 80148dc:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
 80148e0:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 80148e4:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
 80148e8:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
 80148ec:	f8c0 31f8 	str.w	r3, [r0, #504]	; 0x1f8
 80148f0:	f8dd 36cc 	ldr.w	r3, [sp, #1740]	; 0x6cc
 80148f4:	2100      	movs	r1, #0
 80148f6:	2201      	movs	r2, #1
 80148f8:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 80148fc:	701a      	strb	r2, [r3, #0]
 80148fe:	f7fd baf3 	b.w	8011ee8 <m_kalman_3gyro.isra.0.constprop.0+0x1000>
 8014902:	2201      	movs	r2, #1
 8014904:	f240 1301 	movw	r3, #257	; 0x101
 8014908:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 801490c:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 8014910:	f7fe b907 	b.w	8012b22 <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 8014914:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014918:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801491c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8014920:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8014928:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 801492c:	2300      	movs	r3, #0
 801492e:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
 8014932:	67ca      	str	r2, [r1, #124]	; 0x7c
 8014934:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 8014938:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 801493c:	f8c1 345c 	str.w	r3, [r1, #1116]	; 0x45c
 8014940:	f7fd bf3e 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8014944:	f3af 8000 	nop.w
 8014948:	3ff80000 	.word	0x3ff80000
 801494c:	3f666666 	.word	0x3f666666
 8014950:	40a00000 	.word	0x40a00000
 8014954:	3f99999a 	.word	0x3f99999a
 8014958:	3f4ccccd 	.word	0x3f4ccccd
 801495c:	33333333 	.word	0x33333333
 8014960:	3fd33333 	.word	0x3fd33333
 8014964:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014968:	2301      	movs	r3, #1
 801496a:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 801496e:	f240 1201 	movw	r2, #257	; 0x101
 8014972:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014974:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8014978:	edd3 7a00 	vldr	s15, [r3]
 801497c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8014980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014984:	eeb4 aae7 	vcmpe.f32	s20, s15
 8014988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801498c:	f200 80d4 	bhi.w	8014b38 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8014990:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014994:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 8014998:	2b00      	cmp	r3, #0
 801499a:	f000 81a2 	beq.w	8014ce2 <m_kalman_3gyro.isra.0.constprop.0+0x3dfa>
 801499e:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 80149a2:	edd3 6a06 	vldr	s13, [r3, #24]
 80149a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80149aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80149ae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80149b2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80149b6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80149ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80149be:	edc3 6a06 	vstr	s13, [r3, #24]
 80149c2:	ed83 7a07 	vstr	s14, [r3, #28]
 80149c6:	edc3 7a08 	vstr	s15, [r3, #32]
 80149ca:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80149ce:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 80149d2:	3301      	adds	r3, #1
 80149d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80149d8:	f000 81fa 	beq.w	8014dd0 <m_kalman_3gyro.isra.0.constprop.0+0x3ee8>
 80149dc:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80149e0:	2b31      	cmp	r3, #49	; 0x31
 80149e2:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 80149e6:	f200 81f3 	bhi.w	8014dd0 <m_kalman_3gyro.isra.0.constprop.0+0x3ee8>
 80149ea:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80149ee:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
 80149f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80149f6:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 80149fa:	f000 81de 	beq.w	8014dba <m_kalman_3gyro.isra.0.constprop.0+0x3ed2>
 80149fe:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8014a02:	f040 80b4 	bne.w	8014b6e <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 8014a06:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014a0a:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8014a0e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8014a12:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8014a16:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	f884 38a4 	strb.w	r3, [r4, #2212]	; 0x8a4
 8014a20:	f604 0398 	addw	r3, r4, #2200	; 0x898
 8014a24:	6018      	str	r0, [r3, #0]
 8014a26:	f604 039c 	addw	r3, r4, #2204	; 0x89c
 8014a2a:	6019      	str	r1, [r3, #0]
 8014a2c:	f504 630a 	add.w	r3, r4, #2208	; 0x8a0
 8014a30:	601a      	str	r2, [r3, #0]
 8014a32:	eddd 7a4c 	vldr	s15, [sp, #304]	; 0x130
 8014a36:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 8014a3a:	ed9d 7a4d 	vldr	s14, [sp, #308]	; 0x134
 8014a3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014a42:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8014a46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014a4a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014a4e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014a52:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014a56:	ee17 0a90 	vmov	r0, s15
 8014a5a:	f7eb fd19 	bl	8000490 <__aeabi_f2d>
 8014a5e:	ec41 0b10 	vmov	d0, r0, r1
 8014a62:	f004 fe39 	bl	80196d8 <sqrt>
 8014a66:	ec51 0b10 	vmov	r0, r1, d0
 8014a6a:	f7ec f861 	bl	8000b30 <__aeabi_d2f>
 8014a6e:	f7eb fd0f 	bl	8000490 <__aeabi_f2d>
 8014a72:	a3f7      	add	r3, pc, #988	; (adr r3, 8014e50 <m_kalman_3gyro.isra.0.constprop.0+0x3f68>)
 8014a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a78:	f7eb ffd4 	bl	8000a24 <__aeabi_dcmplt>
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	f000 8124 	beq.w	8014cca <m_kalman_3gyro.isra.0.constprop.0+0x3de2>
 8014a82:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
 8014a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	f7eb ffbf 	bl	8000a10 <__aeabi_dcmpeq>
 8014a92:	2800      	cmp	r0, #0
 8014a94:	f000 81b4 	beq.w	8014e00 <m_kalman_3gyro.isra.0.constprop.0+0x3f18>
 8014a98:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014a9c:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8014aa0:	2b32      	cmp	r3, #50	; 0x32
 8014aa2:	f040 81ae 	bne.w	8014e02 <m_kalman_3gyro.isra.0.constprop.0+0x3f1a>
 8014aa6:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014aaa:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 8014e40 <m_kalman_3gyro.isra.0.constprop.0+0x3f58>
 8014aae:	edd3 7a06 	vldr	s15, [r3, #24]
 8014ab2:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 8014ab6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014abe:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8014ac2:	edc1 7a06 	vstr	s15, [r1, #24]
 8014ac6:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014aca:	2201      	movs	r2, #1
 8014acc:	f881 2202 	strb.w	r2, [r1, #514]	; 0x202
 8014ad0:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 8014ad4:	edd1 7a07 	vldr	s15, [r1, #28]
 8014ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014ae0:	edc1 7a07 	vstr	s15, [r1, #28]
 8014ae4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014ae8:	f881 2203 	strb.w	r2, [r1, #515]	; 0x203
 8014aec:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 8014af0:	edd1 7a08 	vldr	s15, [r1, #32]
 8014af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014af8:	edc1 7a08 	vstr	s15, [r1, #32]
 8014afc:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014b00:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 8014b04:	f000 81de 	beq.w	8014ec4 <m_kalman_3gyro.isra.0.constprop.0+0x3fdc>
 8014b08:	3301      	adds	r3, #1
 8014b0a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014b0e:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 8014b12:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8014b16:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8014b18:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8014b1a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8014b1c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 8014b20:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 8014b24:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8014b28:	f7fd be4a 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8014b2c:	1c5c      	adds	r4, r3, #1
 8014b2e:	f7fd bb09 	b.w	8012144 <m_kalman_3gyro.isra.0.constprop.0+0x125c>
 8014b32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014b36:	e6bd      	b.n	80148b4 <m_kalman_3gyro.isra.0.constprop.0+0x39cc>
 8014b38:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014b3c:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8014b40:	edd3 6a06 	vldr	s13, [r3, #24]
 8014b44:	ed93 7a07 	vldr	s14, [r3, #28]
 8014b48:	edd3 7a08 	vldr	s15, [r3, #32]
 8014b4c:	ee66 6aab 	vmul.f32	s13, s13, s23
 8014b50:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8014b54:	ee67 baab 	vmul.f32	s23, s15, s23
 8014b58:	edc2 6a06 	vstr	s13, [r2, #24]
 8014b5c:	ed82 7a07 	vstr	s14, [r2, #28]
 8014b60:	edc2 ba08 	vstr	s23, [r2, #32]
 8014b64:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014b68:	2300      	movs	r3, #0
 8014b6a:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 8014b6e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014b72:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	f47f af5b 	bne.w	8014a32 <m_kalman_3gyro.isra.0.constprop.0+0x3b4a>
 8014b7c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014b80:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8014b84:	b32a      	cbz	r2, 8014bd2 <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 8014b86:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014b8a:	eef4 dae7 	vcmpe.f32	s27, s15
 8014b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b92:	d51e      	bpl.n	8014bd2 <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 8014b94:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014b98:	ed92 7af1 	vldr	s14, [r2, #964]	; 0x3c4
 8014b9c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba8:	d513      	bpl.n	8014bd2 <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 8014baa:	4610      	mov	r0, r2
 8014bac:	f8d2 13d8 	ldr.w	r1, [r2, #984]	; 0x3d8
 8014bb0:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8014bb4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8014bb8:	f8d0 13d4 	ldr.w	r1, [r0, #980]	; 0x3d4
 8014bbc:	67c1      	str	r1, [r0, #124]	; 0x7c
 8014bbe:	f8dd 16c8 	ldr.w	r1, [sp, #1736]	; 0x6c8
 8014bc2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	700a      	strb	r2, [r1, #0]
 8014bca:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8014bce:	f7fd bdf7 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8014bd2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014bd6:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 8014bda:	2b1e      	cmp	r3, #30
 8014bdc:	f000 808c 	beq.w	8014cf8 <m_kalman_3gyro.isra.0.constprop.0+0x3e10>
 8014be0:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014be4:	3301      	adds	r3, #1
 8014be6:	2200      	movs	r2, #0
 8014be8:	f8c1 3454 	str.w	r3, [r1, #1108]	; 0x454
 8014bec:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8014bf0:	f7fd bde6 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8014bf4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 8014bfe:	f240 1201 	movw	r2, #257	; 0x101
 8014c02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c04:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8014c08:	edd3 7a00 	vldr	s15, [r3]
 8014c0c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8014c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c14:	eef4 7aca 	vcmpe.f32	s15, s20
 8014c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c1c:	f6bf aeb8 	bge.w	8014990 <m_kalman_3gyro.isra.0.constprop.0+0x3aa8>
 8014c20:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8014c24:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 8014c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c30:	dd82      	ble.n	8014b38 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8014c32:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8014c36:	eef4 7aef 	vcmpe.f32	s15, s31
 8014c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c3e:	f77f af7b 	ble.w	8014b38 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8014c42:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8014c46:	eddd 5a17 	vldr	s11, [sp, #92]	; 0x5c
 8014c4a:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c52:	f77f af71 	ble.w	8014b38 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8014c56:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014c5a:	eef4 dae6 	vcmpe.f32	s27, s13
 8014c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c62:	f57f af69 	bpl.w	8014b38 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8014c66:	ed9d 6a0d 	vldr	s12, [sp, #52]	; 0x34
 8014c6a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8014c6e:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 8014c72:	ee8f 6a86 	vdiv.f32	s12, s31, s12
 8014c76:	eec5 7aa7 	vdiv.f32	s15, s11, s15
 8014c7a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014c7e:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8014c82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c86:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c8e:	f57f af53 	bpl.w	8014b38 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8014c92:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014c96:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8014c9a:	ed93 6a06 	vldr	s12, [r3, #24]
 8014c9e:	ed93 7a07 	vldr	s14, [r3, #28]
 8014ca2:	edd3 7a08 	vldr	s15, [r3, #32]
 8014ca6:	ee26 6a26 	vmul.f32	s12, s12, s13
 8014caa:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014cae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8014cb2:	ed82 6a06 	vstr	s12, [r2, #24]
 8014cb6:	ed82 7a07 	vstr	s14, [r2, #28]
 8014cba:	edc2 6a08 	vstr	s13, [r2, #32]
 8014cbe:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 8014cc8:	e751      	b.n	8014b6e <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 8014cca:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014cce:	f8c3 0450 	str.w	r0, [r3, #1104]	; 0x450
 8014cd2:	f8a3 0202 	strh.w	r0, [r3, #514]	; 0x202
 8014cd6:	f883 0204 	strb.w	r0, [r3, #516]	; 0x204
 8014cda:	f8c3 045c 	str.w	r0, [r3, #1116]	; 0x45c
 8014cde:	f7fd bd6f 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8014ce2:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014ce6:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8014e44 <m_kalman_3gyro.isra.0.constprop.0+0x3f5c>
 8014cea:	edd3 6a06 	vldr	s13, [r3, #24]
 8014cee:	ed93 7a07 	vldr	s14, [r3, #28]
 8014cf2:	edd3 7a08 	vldr	s15, [r3, #32]
 8014cf6:	e65c      	b.n	80149b2 <m_kalman_3gyro.isra.0.constprop.0+0x3aca>
 8014cf8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014cfc:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 8014d00:	2b27      	cmp	r3, #39	; 0x27
 8014d02:	f200 80f6 	bhi.w	8014ef2 <m_kalman_3gyro.isra.0.constprop.0+0x400a>
 8014d06:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d0a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014d0e:	f8d3 23d8 	ldr.w	r2, [r3, #984]	; 0x3d8
 8014d12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8014d16:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 8014d1a:	f8d1 23d4 	ldr.w	r2, [r1, #980]	; 0x3d4
 8014d1e:	67ca      	str	r2, [r1, #124]	; 0x7c
 8014d20:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8014d24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8014d28:	2301      	movs	r3, #1
 8014d2a:	7013      	strb	r3, [r2, #0]
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	f8b3 38a8 	ldrh.w	r3, [r3, #2216]	; 0x8a8
 8014d32:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014d36:	2201      	movs	r2, #1
 8014d38:	4413      	add	r3, r2
 8014d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d3e:	bf14      	ite	ne
 8014d40:	b29b      	uxthne	r3, r3
 8014d42:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8014d46:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8014d4a:	f8a1 38a8 	strh.w	r3, [r1, #2216]	; 0x8a8
 8014d4e:	f7fd bd37 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d063      	beq.n	8014e1e <m_kalman_3gyro.isra.0.constprop.0+0x3f36>
 8014d56:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014d5a:	3b01      	subs	r3, #1
 8014d5c:	f882 38ad 	strb.w	r3, [r2, #2221]	; 0x8ad
 8014d60:	f8a2 01fc 	strh.w	r0, [r2, #508]	; 0x1fc
 8014d64:	f882 01fe 	strb.w	r0, [r2, #510]	; 0x1fe
 8014d68:	f882 0205 	strb.w	r0, [r2, #517]	; 0x205
 8014d6c:	f882 0207 	strb.w	r0, [r2, #519]	; 0x207
 8014d70:	f7fd bfb8 	b.w	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8014d74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d76:	4f34      	ldr	r7, [pc, #208]	; (8014e48 <m_kalman_3gyro.isra.0.constprop.0+0x3f60>)
 8014d78:	6801      	ldr	r1, [r0, #0]
 8014d7a:	6846      	ldr	r6, [r0, #4]
 8014d7c:	6885      	ldr	r5, [r0, #8]
 8014d7e:	9808      	ldr	r0, [sp, #32]
 8014d80:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8014d84:	3201      	adds	r2, #1
 8014d86:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014d8a:	f887 21b0 	strb.w	r2, [r7, #432]	; 0x1b0
 8014d8e:	4602      	mov	r2, r0
 8014d90:	6804      	ldr	r4, [r0, #0]
 8014d92:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
 8014d96:	6840      	ldr	r0, [r0, #4]
 8014d98:	6891      	ldr	r1, [r2, #8]
 8014d9a:	f8c3 61b8 	str.w	r6, [r3, #440]	; 0x1b8
 8014d9e:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
 8014da2:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
 8014da6:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 8014daa:	f8c3 11f8 	str.w	r1, [r3, #504]	; 0x1f8
 8014dae:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 8014db2:	2200      	movs	r2, #0
 8014db4:	701a      	strb	r2, [r3, #0]
 8014db6:	f7fe b8ac 	b.w	8012f12 <m_kalman_3gyro.isra.0.constprop.0+0x202a>
 8014dba:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014dbe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014dc2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 8014dc6:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8014dca:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 8014dce:	e6ce      	b.n	8014b6e <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 8014dd0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014dd4:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	f47f ae06 	bne.w	80149ea <m_kalman_3gyro.isra.0.constprop.0+0x3b02>
 8014dde:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8014e4c <m_kalman_3gyro.isra.0.constprop.0+0x3f64>
 8014de2:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014de6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014dea:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014dee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014df2:	edc3 6a06 	vstr	s13, [r3, #24]
 8014df6:	ed83 7a07 	vstr	s14, [r3, #28]
 8014dfa:	edc3 7a08 	vstr	s15, [r3, #32]
 8014dfe:	e5f4      	b.n	80149ea <m_kalman_3gyro.isra.0.constprop.0+0x3b02>
 8014e00:	4603      	mov	r3, r0
 8014e02:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014e06:	2200      	movs	r2, #0
 8014e08:	3301      	adds	r3, #1
 8014e0a:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 8014e0e:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8014e12:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 8014e16:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8014e1a:	f7fd bcd1 	b.w	80127c0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8014e1e:	2e00      	cmp	r6, #0
 8014e20:	d078      	beq.n	8014f14 <m_kalman_3gyro.isra.0.constprop.0+0x402c>
 8014e22:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014e26:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 8014e2a:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 8014e2e:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 8014e32:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 8014e36:	f7fd bf55 	b.w	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8014e3a:	bf00      	nop
 8014e3c:	f3af 8000 	nop.w
 8014e40:	3e4ccccd 	.word	0x3e4ccccd
 8014e44:	3eaaaaab 	.word	0x3eaaaaab
 8014e48:	200013d8 	.word	0x200013d8
 8014e4c:	3f19999a 	.word	0x3f19999a
 8014e50:	47ae147b 	.word	0x47ae147b
 8014e54:	3f747ae1 	.word	0x3f747ae1
 8014e58:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014e5c:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 8014e60:	2301      	movs	r3, #1
 8014e62:	f240 1201 	movw	r2, #257	; 0x101
 8014e66:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8014e6a:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 8014e6e:	9908      	ldr	r1, [sp, #32]
 8014e70:	680a      	ldr	r2, [r1, #0]
 8014e72:	67c2      	str	r2, [r0, #124]	; 0x7c
 8014e74:	684a      	ldr	r2, [r1, #4]
 8014e76:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8014e7a:	688a      	ldr	r2, [r1, #8]
 8014e7c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8014e80:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8014e84:	7013      	strb	r3, [r2, #0]
 8014e86:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 8014e8a:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 8014e8e:	3301      	adds	r3, #1
 8014e90:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 8014e94:	2a00      	cmp	r2, #0
 8014e96:	f43e ade9 	beq.w	8013a6c <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 8014e9a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8014e9e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8014ea2:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
 8014ea6:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 8014eaa:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8014eac:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 8014eb6:	f7fe bdd9 	b.w	8013a6c <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 8014eba:	2364      	movs	r3, #100	; 0x64
 8014ebc:	f8c1 38b0 	str.w	r3, [r1, #2224]	; 0x8b0
 8014ec0:	f7fd bf10 	b.w	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8014ec4:	460b      	mov	r3, r1
 8014ec6:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 8014eca:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8014ece:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 8014ed2:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8014ed6:	6018      	str	r0, [r3, #0]
 8014ed8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014edc:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8014ee0:	6019      	str	r1, [r3, #0]
 8014ee2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014ee6:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8014eea:	601a      	str	r2, [r3, #0]
 8014eec:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8014ef0:	e60b      	b.n	8014b0a <m_kalman_3gyro.isra.0.constprop.0+0x3c22>
 8014ef2:	9a08      	ldr	r2, [sp, #32]
 8014ef4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014ef8:	6813      	ldr	r3, [r2, #0]
 8014efa:	67cb      	str	r3, [r1, #124]	; 0x7c
 8014efc:	6853      	ldr	r3, [r2, #4]
 8014efe:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8014f02:	6892      	ldr	r2, [r2, #8]
 8014f04:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 8014f08:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	7013      	strb	r3, [r2, #0]
 8014f10:	460b      	mov	r3, r1
 8014f12:	e70c      	b.n	8014d2e <m_kalman_3gyro.isra.0.constprop.0+0x3e46>
 8014f14:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014f18:	edd3 6a00 	vldr	s13, [r3]
 8014f1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8014f20:	edd3 7a02 	vldr	s15, [r3, #8]
 8014f24:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8014f28:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014f2c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014f30:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014f34:	edc3 6a00 	vstr	s13, [r3]
 8014f38:	ed83 7a01 	vstr	s14, [r3, #4]
 8014f3c:	edc3 7a02 	vstr	s15, [r3, #8]
 8014f40:	f7fd bed0 	b.w	8012ce4 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>

08014f44 <SpacePointAlgorithm.isra.0>:
 8014f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f48:	ed2d 8b10 	vpush	{d8-d15}
 8014f4c:	b0bb      	sub	sp, #236	; 0xec
 8014f4e:	f8df e3e8 	ldr.w	lr, [pc, #1000]	; 8015338 <SpacePointAlgorithm.isra.0+0x3f4>
 8014f52:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 8014f56:	9515      	str	r5, [sp, #84]	; 0x54
 8014f58:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8014f5c:	9516      	str	r5, [sp, #88]	; 0x58
 8014f5e:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8014f62:	9517      	str	r5, [sp, #92]	; 0x5c
 8014f64:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 8014f68:	9518      	str	r5, [sp, #96]	; 0x60
 8014f6a:	4681      	mov	r9, r0
 8014f6c:	460e      	mov	r6, r1
 8014f6e:	4692      	mov	sl, r2
 8014f70:	461d      	mov	r5, r3
 8014f72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f76:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 8014f7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f7e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014f82:	9f69      	ldr	r7, [sp, #420]	; 0x1a4
 8014f84:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 8014f88:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014f8c:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 8014f90:	eef0 ba40 	vmov.f32	s23, s0
 8014f94:	eeb0 ea60 	vmov.f32	s28, s1
 8014f98:	eef0 da61 	vmov.f32	s27, s3
 8014f9c:	eeb0 ba42 	vmov.f32	s22, s4
 8014fa0:	eef0 9a62 	vmov.f32	s19, s5
 8014fa4:	eeb0 aa43 	vmov.f32	s20, s6
 8014fa8:	eef0 aa63 	vmov.f32	s21, s7
 8014fac:	f7eb fdc0 	bl	8000b30 <__aeabi_d2f>
 8014fb0:	f897 38cc 	ldrb.w	r3, [r7, #2252]	; 0x8cc
 8014fb4:	9c54      	ldr	r4, [sp, #336]	; 0x150
 8014fb6:	f89d b164 	ldrb.w	fp, [sp, #356]	; 0x164
 8014fba:	f8dd 8190 	ldr.w	r8, [sp, #400]	; 0x190
 8014fbe:	ee0c 0a90 	vmov	s25, r0
 8014fc2:	b923      	cbnz	r3, 8014fce <SpacePointAlgorithm.isra.0+0x8a>
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	603a      	str	r2, [r7, #0]
 8014fca:	f887 38cc 	strb.w	r3, [r7, #2252]	; 0x8cc
 8014fce:	eddf 7ace 	vldr	s15, [pc, #824]	; 8015308 <SpacePointAlgorithm.isra.0+0x3c4>
 8014fd2:	eec7 7aab 	vdiv.f32	s15, s15, s23
 8014fd6:	ee17 0a90 	vmov	r0, s15
 8014fda:	f7eb fa59 	bl	8000490 <__aeabi_f2d>
 8014fde:	ec41 0b10 	vmov	d0, r0, r1
 8014fe2:	f004 fb79 	bl	80196d8 <sqrt>
 8014fe6:	ec51 0b10 	vmov	r0, r1, d0
 8014fea:	f7eb fda1 	bl	8000b30 <__aeabi_d2f>
 8014fee:	eddf 4ac7 	vldr	s9, [pc, #796]	; 801530c <SpacePointAlgorithm.isra.0+0x3c8>
 8014ff2:	ed95 5a00 	vldr	s10, [r5]
 8014ff6:	edd5 5a01 	vldr	s11, [r5, #4]
 8014ffa:	ed95 6a02 	vldr	s12, [r5, #8]
 8014ffe:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8015310 <SpacePointAlgorithm.isra.0+0x3cc>
 8015002:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 8015006:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 801500a:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 801500e:	ed9d da23 	vldr	s26, [sp, #140]	; 0x8c
 8015012:	ed9d 9a24 	vldr	s18, [sp, #144]	; 0x90
 8015016:	ee07 0a90 	vmov	s15, r0
 801501a:	ee25 5a24 	vmul.f32	s10, s10, s9
 801501e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8015022:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015026:	ee86 8aa7 	vdiv.f32	s16, s13, s15
 801502a:	ee27 fa81 	vmul.f32	s30, s15, s2
 801502e:	ee67 fa87 	vmul.f32	s31, s15, s14
 8015032:	ee67 8aae 	vmul.f32	s17, s15, s29
 8015036:	ee27 da8d 	vmul.f32	s26, s15, s26
 801503a:	ee27 9a89 	vmul.f32	s18, s15, s18
 801503e:	ed85 5a00 	vstr	s10, [r5]
 8015042:	edc5 5a01 	vstr	s11, [r5, #4]
 8015046:	ed85 6a02 	vstr	s12, [r5, #8]
 801504a:	f1bb 0f04 	cmp.w	fp, #4
 801504e:	f200 812f 	bhi.w	80152b0 <SpacePointAlgorithm.isra.0+0x36c>
 8015052:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8015056:	0140      	.short	0x0140
 8015058:	0122014d 	.word	0x0122014d
 801505c:	0005012d 	.word	0x0005012d
 8015060:	ed9f caac 	vldr	s24, [pc, #688]	; 8015314 <SpacePointAlgorithm.isra.0+0x3d0>
 8015064:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 8015068:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 801506c:	2200      	movs	r2, #0
 801506e:	2300      	movs	r3, #0
 8015070:	f7eb fcce 	bl	8000a10 <__aeabi_dcmpeq>
 8015074:	ed97 7a00 	vldr	s14, [r7]
 8015078:	b168      	cbz	r0, 8015096 <SpacePointAlgorithm.isra.0+0x152>
 801507a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015082:	f340 80ee 	ble.w	8015262 <SpacePointAlgorithm.isra.0+0x31e>
 8015086:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 801508a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015092:	f140 80e6 	bpl.w	8015262 <SpacePointAlgorithm.isra.0+0x31e>
 8015096:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801509a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 801509e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150a2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80150a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150aa:	edc7 7a00 	vstr	s15, [r7]
 80150ae:	f100 80ef 	bmi.w	8015290 <SpacePointAlgorithm.isra.0+0x34c>
 80150b2:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80150b6:	eec6 4a27 	vdiv.f32	s9, s12, s15
 80150ba:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8015318 <SpacePointAlgorithm.isra.0+0x3d4>
 80150be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80150c2:	ee2b da0d 	vmul.f32	s26, s22, s26
 80150c6:	eddf 7a95 	vldr	s15, [pc, #596]	; 801531c <SpacePointAlgorithm.isra.0+0x3d8>
 80150ca:	ee2d da07 	vmul.f32	s26, s26, s14
 80150ce:	ee27 fa0f 	vmul.f32	s30, s14, s30
 80150d2:	ee68 4a24 	vmul.f32	s9, s16, s9
 80150d6:	ee27 7a2f 	vmul.f32	s14, s14, s31
 80150da:	ee6e eaa8 	vmul.f32	s29, s29, s17
 80150de:	ee29 9a27 	vmul.f32	s18, s18, s15
 80150e2:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80150e6:	edd6 7a01 	vldr	s15, [r6, #4]
 80150ea:	ed94 4a09 	vldr	s8, [r4, #36]	; 0x24
 80150ee:	ed94 6a03 	vldr	s12, [r4, #12]
 80150f2:	ed96 5a00 	vldr	s10, [r6]
 80150f6:	edd4 5a05 	vldr	s11, [r4, #20]
 80150fa:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80150fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015102:	edd4 6a04 	vldr	s13, [r4, #16]
 8015106:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
 801510a:	ee35 5a44 	vsub.f32	s10, s10, s8
 801510e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8015112:	ed94 4a00 	vldr	s8, [r4]
 8015116:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801511a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801511e:	eea5 6a04 	vfma.f32	s12, s10, s8
 8015122:	462b      	mov	r3, r5
 8015124:	ad1a      	add	r5, sp, #104	; 0x68
 8015126:	ed94 4a02 	vldr	s8, [r4, #8]
 801512a:	edcd 4a25 	vstr	s9, [sp, #148]	; 0x94
 801512e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015132:	edd4 5a01 	vldr	s11, [r4, #4]
 8015136:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 801513a:	eeb0 7a66 	vmov.f32	s14, s13
 801513e:	eea5 7a25 	vfma.f32	s14, s10, s11
 8015142:	a92e      	add	r1, sp, #184	; 0xb8
 8015144:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 801533c <SpacePointAlgorithm.isra.0+0x3f8>
 8015148:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 801514c:	edd6 5a02 	vldr	s11, [r6, #8]
 8015150:	ed8d fa2e 	vstr	s30, [sp, #184]	; 0xb8
 8015154:	eee4 7a05 	vfma.f32	s15, s8, s10
 8015158:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8015340 <SpacePointAlgorithm.isra.0+0x3fc>
 801515c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8015160:	ed94 4a07 	vldr	s8, [r4, #28]
 8015164:	edd4 6a06 	vldr	s13, [r4, #24]
 8015168:	ed94 5a08 	vldr	s10, [r4, #32]
 801516c:	ed8d fa2f 	vstr	s30, [sp, #188]	; 0xbc
 8015170:	eea4 7a25 	vfma.f32	s14, s8, s11
 8015174:	ac25      	add	r4, sp, #148	; 0x94
 8015176:	4652      	mov	r2, sl
 8015178:	eee5 7a25 	vfma.f32	s15, s10, s11
 801517c:	4648      	mov	r0, r9
 801517e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8015344 <SpacePointAlgorithm.isra.0+0x400>
 8015182:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 8015186:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801518a:	eeb7 2a08 	vmov.f32	s4, #120	; 0x3fc00000  1.5
 801518e:	ee2b ba02 	vmul.f32	s22, s22, s4
 8015192:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8015196:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 801519a:	ed8d fa30 	vstr	s30, [sp, #192]	; 0xc0
 801519e:	edcd ea34 	vstr	s29, [sp, #208]	; 0xd0
 80151a2:	edcd ea35 	vstr	s29, [sp, #212]	; 0xd4
 80151a6:	edcd ea36 	vstr	s29, [sp, #216]	; 0xd8
 80151aa:	ed8d da37 	vstr	s26, [sp, #220]	; 0xdc
 80151ae:	ed8d 9a38 	vstr	s18, [sp, #224]	; 0xe0
 80151b2:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 80151b6:	edcd 4a27 	vstr	s9, [sp, #156]	; 0x9c
 80151ba:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80151bc:	9602      	str	r6, [sp, #8]
 80151be:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80151c0:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
 80151c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80151c6:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
 80151ca:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80151cc:	f88d 606a 	strb.w	r6, [sp, #106]	; 0x6a
 80151d0:	9e68      	ldr	r6, [sp, #416]	; 0x1a0
 80151d2:	9611      	str	r6, [sp, #68]	; 0x44
 80151d4:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 80151d8:	9e67      	ldr	r6, [sp, #412]	; 0x19c
 80151da:	9610      	str	r6, [sp, #64]	; 0x40
 80151dc:	9e66      	ldr	r6, [sp, #408]	; 0x198
 80151de:	9504      	str	r5, [sp, #16]
 80151e0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80151e4:	e9cd 860e 	strd	r8, r6, [sp, #56]	; 0x38
 80151e8:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 80151ec:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 80151ee:	960c      	str	r6, [sp, #48]	; 0x30
 80151f0:	9e62      	ldr	r6, [sp, #392]	; 0x188
 80151f2:	960b      	str	r6, [sp, #44]	; 0x2c
 80151f4:	ad1b      	add	r5, sp, #108	; 0x6c
 80151f6:	9e55      	ldr	r6, [sp, #340]	; 0x154
 80151f8:	f8cd b00c 	str.w	fp, [sp, #12]
 80151fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015200:	e9cd 1400 	strd	r1, r4, [sp]
 8015204:	eeb0 2a6c 	vmov.f32	s4, s25
 8015208:	eef0 1a6b 	vmov.f32	s3, s23
 801520c:	eeb0 1a6a 	vmov.f32	s2, s21
 8015210:	eef0 0a4a 	vmov.f32	s1, s20
 8015214:	eeb0 0a69 	vmov.f32	s0, s19
 8015218:	a91c      	add	r1, sp, #112	; 0x70
 801521a:	ed8d ca28 	vstr	s24, [sp, #160]	; 0xa0
 801521e:	ed8d ca29 	vstr	s24, [sp, #164]	; 0xa4
 8015222:	ed8d ca2a 	vstr	s24, [sp, #168]	; 0xa8
 8015226:	9712      	str	r7, [sp, #72]	; 0x48
 8015228:	960a      	str	r6, [sp, #40]	; 0x28
 801522a:	950d      	str	r5, [sp, #52]	; 0x34
 801522c:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 8015230:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 8015234:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
 8015238:	f7fb fe56 	bl	8010ee8 <m_kalman_3gyro.isra.0.constprop.0>
 801523c:	9862      	ldr	r0, [sp, #392]	; 0x188
 801523e:	4621      	mov	r1, r4
 8015240:	f7f9 fd8e 	bl	800ed60 <m_q2dcm_eml>
 8015244:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8015246:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801524a:	6013      	str	r3, [r2, #0]
 801524c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015250:	6053      	str	r3, [r2, #4]
 8015252:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8015256:	6093      	str	r3, [r2, #8]
 8015258:	b03b      	add	sp, #236	; 0xec
 801525a:	ecbd 8b10 	vpop	{d8-d15}
 801525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015262:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8015320 <SpacePointAlgorithm.isra.0+0x3dc>
 8015266:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 801526a:	ee7d daa7 	vadd.f32	s27, s27, s15
 801526e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801531c <SpacePointAlgorithm.isra.0+0x3d8>
 8015272:	2300      	movs	r3, #0
 8015274:	ee27 fa0f 	vmul.f32	s30, s14, s30
 8015278:	eec8 4a2d 	vdiv.f32	s9, s16, s27
 801527c:	603b      	str	r3, [r7, #0]
 801527e:	ee2e 7a2f 	vmul.f32	s14, s28, s31
 8015282:	ee6e eaa8 	vmul.f32	s29, s29, s17
 8015286:	ee2b da0d 	vmul.f32	s26, s22, s26
 801528a:	ee29 9a27 	vmul.f32	s18, s18, s15
 801528e:	e728      	b.n	80150e2 <SpacePointAlgorithm.isra.0+0x19e>
 8015290:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8015324 <SpacePointAlgorithm.isra.0+0x3e0>
 8015294:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 8015298:	e713      	b.n	80150c2 <SpacePointAlgorithm.isra.0+0x17e>
 801529a:	ee69 9aac 	vmul.f32	s19, s19, s25
 801529e:	ee2a aa2c 	vmul.f32	s20, s20, s25
 80152a2:	ee6a aaac 	vmul.f32	s21, s21, s25
 80152a6:	ed9f ca20 	vldr	s24, [pc, #128]	; 8015328 <SpacePointAlgorithm.isra.0+0x3e4>
 80152aa:	eef1 ea04 	vmov.f32	s29, #20	; 0x40a00000  5.0
 80152ae:	e6db      	b.n	8015068 <SpacePointAlgorithm.isra.0+0x124>
 80152b0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801532c <SpacePointAlgorithm.isra.0+0x3e8>
 80152b4:	ed9f ca1e 	vldr	s24, [pc, #120]	; 8015330 <SpacePointAlgorithm.isra.0+0x3ec>
 80152b8:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80152bc:	ee2a aa27 	vmul.f32	s20, s20, s15
 80152c0:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80152c4:	ee69 9aac 	vmul.f32	s19, s19, s25
 80152c8:	ee2a aa2c 	vmul.f32	s20, s20, s25
 80152cc:	ee6a aaac 	vmul.f32	s21, s21, s25
 80152d0:	eef6 ea00 	vmov.f32	s29, #96	; 0x3f000000  0.5
 80152d4:	e6c8      	b.n	8015068 <SpacePointAlgorithm.isra.0+0x124>
 80152d6:	eddf 7a17 	vldr	s15, [pc, #92]	; 8015334 <SpacePointAlgorithm.isra.0+0x3f0>
 80152da:	ed9f ca15 	vldr	s24, [pc, #84]	; 8015330 <SpacePointAlgorithm.isra.0+0x3ec>
 80152de:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80152e2:	ee2a aa27 	vmul.f32	s20, s20, s15
 80152e6:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80152ea:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 80152ee:	e6bb      	b.n	8015068 <SpacePointAlgorithm.isra.0+0x124>
 80152f0:	ee69 9aac 	vmul.f32	s19, s19, s25
 80152f4:	ee2a aa2c 	vmul.f32	s20, s20, s25
 80152f8:	ee6a aaac 	vmul.f32	s21, s21, s25
 80152fc:	ed9f ca05 	vldr	s24, [pc, #20]	; 8015314 <SpacePointAlgorithm.isra.0+0x3d0>
 8015300:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 8015304:	e6b0      	b.n	8015068 <SpacePointAlgorithm.isra.0+0x124>
 8015306:	bf00      	nop
 8015308:	3c03126f 	.word	0x3c03126f
 801530c:	3c8efa35 	.word	0x3c8efa35
 8015310:	3b656042 	.word	0x3b656042
 8015314:	3ac49ba6 	.word	0x3ac49ba6
 8015318:	3d4ccccd 	.word	0x3d4ccccd
 801531c:	3f333333 	.word	0x3f333333
 8015320:	358637bd 	.word	0x358637bd
 8015324:	3e4ccccd 	.word	0x3e4ccccd
 8015328:	3727c5ac 	.word	0x3727c5ac
 801532c:	42c80000 	.word	0x42c80000
 8015330:	3a83126f 	.word	0x3a83126f
 8015334:	3dcccccd 	.word	0x3dcccccd
 8015338:	0801b518 	.word	0x0801b518
 801533c:	3b449ba6 	.word	0x3b449ba6
 8015340:	3c23d70a 	.word	0x3c23d70a
 8015344:	3a9d4952 	.word	0x3a9d4952

08015348 <MotionDI_Initialize>:
 8015348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801534c:	4a12      	ldr	r2, [pc, #72]	; (8015398 <MotionDI_Initialize+0x50>)
 801534e:	4913      	ldr	r1, [pc, #76]	; (801539c <MotionDI_Initialize+0x54>)
 8015350:	6813      	ldr	r3, [r2, #0]
 8015352:	f023 0301 	bic.w	r3, r3, #1
 8015356:	ed2d 8b02 	vpush	{d8}
 801535a:	6013      	str	r3, [r2, #0]
 801535c:	680b      	ldr	r3, [r1, #0]
 801535e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8015362:	4013      	ands	r3, r2
 8015364:	f24c 2440 	movw	r4, #49728	; 0xc240
 8015368:	42a3      	cmp	r3, r4
 801536a:	b091      	sub	sp, #68	; 0x44
 801536c:	4607      	mov	r7, r0
 801536e:	d01f      	beq.n	80153b0 <MotionDI_Initialize+0x68>
 8015370:	680b      	ldr	r3, [r1, #0]
 8015372:	f24c 2170 	movw	r1, #49776	; 0xc270
 8015376:	4013      	ands	r3, r2
 8015378:	428b      	cmp	r3, r1
 801537a:	d019      	beq.n	80153b0 <MotionDI_Initialize+0x68>
 801537c:	4b08      	ldr	r3, [pc, #32]	; (80153a0 <MotionDI_Initialize+0x58>)
 801537e:	2201      	movs	r2, #1
 8015380:	601a      	str	r2, [r3, #0]
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	2a00      	cmp	r2, #0
 8015386:	d1fc      	bne.n	8015382 <MotionDI_Initialize+0x3a>
 8015388:	4b06      	ldr	r3, [pc, #24]	; (80153a4 <MotionDI_Initialize+0x5c>)
 801538a:	4a07      	ldr	r2, [pc, #28]	; (80153a8 <MotionDI_Initialize+0x60>)
 801538c:	601a      	str	r2, [r3, #0]
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	4b06      	ldr	r3, [pc, #24]	; (80153ac <MotionDI_Initialize+0x64>)
 8015392:	429a      	cmp	r2, r3
 8015394:	d02b      	beq.n	80153ee <MotionDI_Initialize+0xa6>
 8015396:	e7fe      	b.n	8015396 <MotionDI_Initialize+0x4e>
 8015398:	e0002000 	.word	0xe0002000
 801539c:	e000ed00 	.word	0xe000ed00
 80153a0:	40023008 	.word	0x40023008
 80153a4:	40023000 	.word	0x40023000
 80153a8:	f407a5c2 	.word	0xf407a5c2
 80153ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80153b0:	4be3      	ldr	r3, [pc, #908]	; (8015740 <MotionDI_Initialize+0x3f8>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d1e1      	bne.n	801537c <MotionDI_Initialize+0x34>
 80153b8:	4ae2      	ldr	r2, [pc, #904]	; (8015744 <MotionDI_Initialize+0x3fc>)
 80153ba:	6813      	ldr	r3, [r2, #0]
 80153bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80153c0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80153c4:	d006      	beq.n	80153d4 <MotionDI_Initialize+0x8c>
 80153c6:	6813      	ldr	r3, [r2, #0]
 80153c8:	f240 4283 	movw	r2, #1155	; 0x483
 80153cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80153d0:	4293      	cmp	r3, r2
 80153d2:	d1d3      	bne.n	801537c <MotionDI_Initialize+0x34>
 80153d4:	4bdc      	ldr	r3, [pc, #880]	; (8015748 <MotionDI_Initialize+0x400>)
 80153d6:	2201      	movs	r2, #1
 80153d8:	601a      	str	r2, [r3, #0]
 80153da:	681a      	ldr	r2, [r3, #0]
 80153dc:	2a00      	cmp	r2, #0
 80153de:	d1fc      	bne.n	80153da <MotionDI_Initialize+0x92>
 80153e0:	4bda      	ldr	r3, [pc, #872]	; (801574c <MotionDI_Initialize+0x404>)
 80153e2:	4adb      	ldr	r2, [pc, #876]	; (8015750 <MotionDI_Initialize+0x408>)
 80153e4:	601a      	str	r2, [r3, #0]
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	4bda      	ldr	r3, [pc, #872]	; (8015754 <MotionDI_Initialize+0x40c>)
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d1d3      	bne.n	8015396 <MotionDI_Initialize+0x4e>
 80153ee:	4cda      	ldr	r4, [pc, #872]	; (8015758 <MotionDI_Initialize+0x410>)
 80153f0:	4dda      	ldr	r5, [pc, #872]	; (801575c <MotionDI_Initialize+0x414>)
 80153f2:	f8d7 c000 	ldr.w	ip, [r7]
 80153f6:	4bda      	ldr	r3, [pc, #872]	; (8015760 <MotionDI_Initialize+0x418>)
 80153f8:	49da      	ldr	r1, [pc, #872]	; (8015764 <MotionDI_Initialize+0x41c>)
 80153fa:	f504 62c9 	add.w	r2, r4, #1608	; 0x648
 80153fe:	2001      	movs	r0, #1
 8015400:	f8c2 c000 	str.w	ip, [r2]
 8015404:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 8015408:	f884 0644 	strb.w	r0, [r4, #1604]	; 0x644
 801540c:	652a      	str	r2, [r5, #80]	; 0x50
 801540e:	2014      	movs	r0, #20
 8015410:	f505 628c 	add.w	r2, r5, #1120	; 0x460
 8015414:	f505 6b8d 	add.w	fp, r5, #1128	; 0x468
 8015418:	2600      	movs	r6, #0
 801541a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801541e:	f8c5 0464 	str.w	r0, [r5, #1124]	; 0x464
 8015422:	f44f 00dc 	mov.w	r0, #7208960	; 0x6e0000
 8015426:	6011      	str	r1, [r2, #0]
 8015428:	f8c5 01c8 	str.w	r0, [r5, #456]	; 0x1c8
 801542c:	2230      	movs	r2, #48	; 0x30
 801542e:	f8cb 3000 	str.w	r3, [fp]
 8015432:	f8a5 c058 	strh.w	ip, [r5, #88]	; 0x58
 8015436:	f105 0014 	add.w	r0, r5, #20
 801543a:	4631      	mov	r1, r6
 801543c:	702e      	strb	r6, [r5, #0]
 801543e:	f885 646c 	strb.w	r6, [r5, #1132]	; 0x46c
 8015442:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
 8015446:	656e      	str	r6, [r5, #84]	; 0x54
 8015448:	64ae      	str	r6, [r5, #72]	; 0x48
 801544a:	f003 ff63 	bl	8019314 <memset>
 801544e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015452:	f44f 7281 	mov.w	r2, #258	; 0x102
 8015456:	82aa      	strh	r2, [r5, #20]
 8015458:	626b      	str	r3, [r5, #36]	; 0x24
 801545a:	636b      	str	r3, [r5, #52]	; 0x34
 801545c:	646b      	str	r3, [r5, #68]	; 0x44
 801545e:	ed97 0a00 	vldr	s0, [r7]
 8015462:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8015768 <MotionDI_Initialize+0x420>
 8015466:	612e      	str	r6, [r5, #16]
 8015468:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801546c:	f884 664c 	strb.w	r6, [r4, #1612]	; 0x64c
 8015470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015474:	ee17 2a90 	vmov	r2, s15
 8015478:	1e53      	subs	r3, r2, #1
 801547a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801547e:	d20b      	bcs.n	8015498 <MotionDI_Initialize+0x150>
 8015480:	f1a2 030a 	sub.w	r3, r2, #10
 8015484:	b29b      	uxth	r3, r3
 8015486:	2b5a      	cmp	r3, #90	; 0x5a
 8015488:	bf8c      	ite	hi
 801548a:	2300      	movhi	r3, #0
 801548c:	2301      	movls	r3, #1
 801548e:	f8c5 2464 	str.w	r2, [r5, #1124]	; 0x464
 8015492:	702b      	strb	r3, [r5, #0]
 8015494:	ed97 0a00 	vldr	s0, [r7]
 8015498:	4eb4      	ldr	r6, [pc, #720]	; (801576c <MotionDI_Initialize+0x424>)
 801549a:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8015770 <MotionDI_Initialize+0x428>
 801549e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8015774 <MotionDI_Initialize+0x42c>
 80154a2:	4fb5      	ldr	r7, [pc, #724]	; (8015778 <MotionDI_Initialize+0x430>)
 80154a4:	f7f9 f9ce 	bl	800e844 <iNemoEngine_gbias_init>
 80154a8:	f20f 296c 	addw	r9, pc, #620	; 0x26c
 80154ac:	e9d9 8900 	ldrd	r8, r9, [r9]
 80154b0:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 8015720 <MotionDI_Initialize+0x3d8>
 80154b4:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 8015728 <MotionDI_Initialize+0x3e0>
 80154b8:	ed9f 2b9d 	vldr	d2, [pc, #628]	; 8015730 <MotionDI_Initialize+0x3e8>
 80154bc:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 8015738 <MotionDI_Initialize+0x3f0>
 80154c0:	eddf 7aae 	vldr	s15, [pc, #696]	; 801577c <MotionDI_Initialize+0x434>
 80154c4:	eddf 4aae 	vldr	s9, [pc, #696]	; 8015780 <MotionDI_Initialize+0x438>
 80154c8:	ed9f 6aae 	vldr	s12, [pc, #696]	; 8015784 <MotionDI_Initialize+0x43c>
 80154cc:	ed9f 3aae 	vldr	s6, [pc, #696]	; 8015788 <MotionDI_Initialize+0x440>
 80154d0:	eddf 3aae 	vldr	s7, [pc, #696]	; 801578c <MotionDI_Initialize+0x444>
 80154d4:	ed9f 4aae 	vldr	s8, [pc, #696]	; 8015790 <MotionDI_Initialize+0x448>
 80154d8:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 80157a0 <MotionDI_Initialize+0x458>
 80154dc:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 80154e0:	f241 1ab6 	movw	sl, #4534	; 0x11b6
 80154e4:	f241 13b4 	movw	r3, #4532	; 0x11b4
 80154e8:	2500      	movs	r5, #0
 80154ea:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80154ee:	f606 00e8 	addw	r0, r6, #2280	; 0x8e8
 80154f2:	210a      	movs	r1, #10
 80154f4:	f886 18e0 	strb.w	r1, [r6, #2272]	; 0x8e0
 80154f8:	ed86 0b08 	vstr	d0, [r6, #32]
 80154fc:	ed86 1b0c 	vstr	d1, [r6, #48]	; 0x30
 8015500:	ed86 2b0e 	vstr	d2, [r6, #56]	; 0x38
 8015504:	ed86 5b06 	vstr	d5, [r6, #24]
 8015508:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
 801550c:	613d      	str	r5, [r7, #16]
 801550e:	753d      	strb	r5, [r7, #20]
 8015510:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 8015514:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 8015518:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 801551c:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 8015520:	52f5      	strh	r5, [r6, r3]
 8015522:	607d      	str	r5, [r7, #4]
 8015524:	723d      	strb	r5, [r7, #8]
 8015526:	61fd      	str	r5, [r7, #28]
 8015528:	f887 5020 	strb.w	r5, [r7, #32]
 801552c:	62bd      	str	r5, [r7, #40]	; 0x28
 801552e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
 8015532:	637d      	str	r5, [r7, #52]	; 0x34
 8015534:	f887 5038 	strb.w	r5, [r7, #56]	; 0x38
 8015538:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 801553c:	edc4 4a27 	vstr	s9, [r4, #156]	; 0x9c
 8015540:	ed84 6a28 	vstr	s12, [r4, #160]	; 0xa0
 8015544:	f806 500a 	strb.w	r5, [r6, sl]
 8015548:	ed9f 6a92 	vldr	s12, [pc, #584]	; 8015794 <MotionDI_Initialize+0x44c>
 801554c:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
 8015550:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 8015554:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 8015558:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 801555c:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 8015560:	ed86 8a86 	vstr	s16, [r6, #536]	; 0x218
 8015564:	643d      	str	r5, [r7, #64]	; 0x40
 8015566:	ed80 5b02 	vstr	d5, [r0, #8]
 801556a:	ed9f 5a8b 	vldr	s10, [pc, #556]	; 8015798 <MotionDI_Initialize+0x450>
 801556e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 801579c <MotionDI_Initialize+0x454>
 8015572:	ed80 8a82 	vstr	s16, [r0, #520]	; 0x208
 8015576:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 801557a:	e9c0 8906 	strd	r8, r9, [r0, #24]
 801557e:	eef2 4a04 	vmov.f32	s9, #36	; 0x41200000  10.0
 8015582:	f04f 0801 	mov.w	r8, #1
 8015586:	f04f 0902 	mov.w	r9, #2
 801558a:	f44f 7c00 	mov.w	ip, #512	; 0x200
 801558e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8015592:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8015596:	ed80 0b04 	vstr	d0, [r0, #16]
 801559a:	ed80 1b08 	vstr	d1, [r0, #32]
 801559e:	ed80 2b0a 	vstr	d2, [r0, #40]	; 0x28
 80155a2:	f88e 80c0 	strb.w	r8, [lr, #192]	; 0xc0
 80155a6:	edc0 7a83 	vstr	s15, [r0, #524]	; 0x20c
 80155aa:	edc0 7a84 	vstr	s15, [r0, #528]	; 0x210
 80155ae:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
 80155b2:	edc4 7aaf 	vstr	s15, [r4, #700]	; 0x2bc
 80155b6:	edc4 7ab0 	vstr	s15, [r4, #704]	; 0x2c0
 80155ba:	edc4 7ab1 	vstr	s15, [r4, #708]	; 0x2c4
 80155be:	edc4 7ab3 	vstr	s15, [r4, #716]	; 0x2cc
 80155c2:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 80155c6:	edc4 7ab5 	vstr	s15, [r4, #724]	; 0x2d4
 80155ca:	edc4 7ab7 	vstr	s15, [r4, #732]	; 0x2dc
 80155ce:	edc4 7ab8 	vstr	s15, [r4, #736]	; 0x2e0
 80155d2:	edc4 7ab9 	vstr	s15, [r4, #740]	; 0x2e4
 80155d6:	edc4 7abb 	vstr	s15, [r4, #748]	; 0x2ec
 80155da:	edc4 7abc 	vstr	s15, [r4, #752]	; 0x2f0
 80155de:	edc4 7abd 	vstr	s15, [r4, #756]	; 0x2f4
 80155e2:	edc4 7abf 	vstr	s15, [r4, #764]	; 0x2fc
 80155e6:	edc4 7ac0 	vstr	s15, [r4, #768]	; 0x300
 80155ea:	edc4 7ac1 	vstr	s15, [r4, #772]	; 0x304
 80155ee:	edc4 7ac3 	vstr	s15, [r4, #780]	; 0x30c
 80155f2:	edc4 7ac4 	vstr	s15, [r4, #784]	; 0x310
 80155f6:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 80155fa:	ed84 8ab6 	vstr	s16, [r4, #728]	; 0x2d8
 80155fe:	ed84 8aba 	vstr	s16, [r4, #744]	; 0x2e8
 8015602:	ed84 8abe 	vstr	s16, [r4, #760]	; 0x2f8
 8015606:	ed84 8ac2 	vstr	s16, [r4, #776]	; 0x308
 801560a:	edc4 7ac5 	vstr	s15, [r4, #788]	; 0x314
 801560e:	ed84 3a3b 	vstr	s6, [r4, #236]	; 0xec
 8015612:	edc4 3a3c 	vstr	s7, [r4, #240]	; 0xf0
 8015616:	ed84 4a3d 	vstr	s8, [r4, #244]	; 0xf4
 801561a:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801561e:	edc4 4a3f 	vstr	s9, [r4, #252]	; 0xfc
 8015622:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8015626:	edc4 7ac7 	vstr	s15, [r4, #796]	; 0x31c
 801562a:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 801562e:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 8015632:	edc4 7acb 	vstr	s15, [r4, #812]	; 0x32c
 8015636:	edc4 7acc 	vstr	s15, [r4, #816]	; 0x330
 801563a:	edc4 7acd 	vstr	s15, [r4, #820]	; 0x334
 801563e:	edc4 7aa1 	vstr	s15, [r4, #644]	; 0x284
 8015642:	edc4 7aa2 	vstr	s15, [r4, #648]	; 0x288
 8015646:	edc4 7aa3 	vstr	s15, [r4, #652]	; 0x28c
 801564a:	edc4 7aa5 	vstr	s15, [r4, #660]	; 0x294
 801564e:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
 8015652:	edc4 7aa7 	vstr	s15, [r4, #668]	; 0x29c
 8015656:	edc4 7aa9 	vstr	s15, [r4, #676]	; 0x2a4
 801565a:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
 801565e:	edc4 7aab 	vstr	s15, [r4, #684]	; 0x2ac
 8015662:	edc4 7aac 	vstr	s15, [r4, #688]	; 0x2b0
 8015666:	edc4 7aad 	vstr	s15, [r4, #692]	; 0x2b4
 801566a:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 801566e:	ed84 8ac6 	vstr	s16, [r4, #792]	; 0x318
 8015672:	ed84 8aca 	vstr	s16, [r4, #808]	; 0x328
 8015676:	ed84 8ace 	vstr	s16, [r4, #824]	; 0x338
 801567a:	ed84 8aa0 	vstr	s16, [r4, #640]	; 0x280
 801567e:	ed84 8aa4 	vstr	s16, [r4, #656]	; 0x290
 8015682:	ed84 8aa8 	vstr	s16, [r4, #672]	; 0x2a0
 8015686:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
 801568a:	ed84 8a43 	vstr	s16, [r4, #268]	; 0x10c
 801568e:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
 8015692:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 8015696:	ed84 5a45 	vstr	s10, [r4, #276]	; 0x114
 801569a:	edc4 5a46 	vstr	s11, [r4, #280]	; 0x118
 801569e:	ed84 6a47 	vstr	s12, [r4, #284]	; 0x11c
 80156a2:	f8a4 c124 	strh.w	ip, [r4, #292]	; 0x124
 80156a6:	ed81 8a21 	vstr	s16, [r1, #132]	; 0x84
 80156aa:	ed81 8a25 	vstr	s16, [r1, #148]	; 0x94
 80156ae:	ed81 8a29 	vstr	s16, [r1, #164]	; 0xa4
 80156b2:	ed81 8a2d 	vstr	s16, [r1, #180]	; 0xb4
 80156b6:	ed81 8a31 	vstr	s16, [r1, #196]	; 0xc4
 80156ba:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 80156be:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 80156c2:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 80156c6:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
 80156ca:	edc1 7a1e 	vstr	s15, [r1, #120]	; 0x78
 80156ce:	edc1 7a1f 	vstr	s15, [r1, #124]	; 0x7c
 80156d2:	edc1 7a20 	vstr	s15, [r1, #128]	; 0x80
 80156d6:	edc1 7a22 	vstr	s15, [r1, #136]	; 0x88
 80156da:	edc1 7a23 	vstr	s15, [r1, #140]	; 0x8c
 80156de:	edc1 7a24 	vstr	s15, [r1, #144]	; 0x90
 80156e2:	edc1 7a26 	vstr	s15, [r1, #152]	; 0x98
 80156e6:	edc1 7a27 	vstr	s15, [r1, #156]	; 0x9c
 80156ea:	edc1 7a28 	vstr	s15, [r1, #160]	; 0xa0
 80156ee:	edc1 7a2a 	vstr	s15, [r1, #168]	; 0xa8
 80156f2:	edc1 7a2b 	vstr	s15, [r1, #172]	; 0xac
 80156f6:	edc1 7a2c 	vstr	s15, [r1, #176]	; 0xb0
 80156fa:	edc1 7a2e 	vstr	s15, [r1, #184]	; 0xb8
 80156fe:	edc1 7a2f 	vstr	s15, [r1, #188]	; 0xbc
 8015702:	edc1 7a30 	vstr	s15, [r1, #192]	; 0xc0
 8015706:	edc1 7a32 	vstr	s15, [r1, #200]	; 0xc8
 801570a:	edc1 7a33 	vstr	s15, [r1, #204]	; 0xcc
 801570e:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 8015712:	edc1 7a34 	vstr	s15, [r1, #208]	; 0xd0
 8015716:	e04d      	b.n	80157b4 <MotionDI_Initialize+0x46c>
 8015718:	00000000 	.word	0x00000000
 801571c:	3fbfdfb7 	.word	0x3fbfdfb7
 8015720:	20000000 	.word	0x20000000
 8015724:	3fc55a40 	.word	0x3fc55a40
 8015728:	c0000000 	.word	0xc0000000
 801572c:	3fb2875e 	.word	0x3fb2875e
 8015730:	60000000 	.word	0x60000000
 8015734:	3f9f1fed 	.word	0x3f9f1fed
 8015738:	60000000 	.word	0x60000000
 801573c:	3fc76cab 	.word	0x3fc76cab
 8015740:	e0042000 	.word	0xe0042000
 8015744:	5c001000 	.word	0x5c001000
 8015748:	58024c08 	.word	0x58024c08
 801574c:	58024c00 	.word	0x58024c00
 8015750:	f407a5c2 	.word	0xf407a5c2
 8015754:	b5e8b5cd 	.word	0xb5e8b5cd
 8015758:	200013d8 	.word	0x200013d8
 801575c:	200020a8 	.word	0x200020a8
 8015760:	3e4ccccd 	.word	0x3e4ccccd
 8015764:	3a83126f 	.word	0x3a83126f
 8015768:	447a0000 	.word	0x447a0000
 801576c:	20000000 	.word	0x20000000
 8015770:	3dcccccd 	.word	0x3dcccccd
 8015774:	3f2ac083 	.word	0x3f2ac083
 8015778:	2000147c 	.word	0x2000147c
 801577c:	00000000 	.word	0x00000000
 8015780:	7f800000 	.word	0x7f800000
 8015784:	ff800000 	.word	0xff800000
 8015788:	3f639581 	.word	0x3f639581
 801578c:	402ab021 	.word	0x402ab021
 8015790:	3f13f7cf 	.word	0x3f13f7cf
 8015794:	39b24207 	.word	0x39b24207
 8015798:	39712c28 	.word	0x39712c28
 801579c:	3a09a027 	.word	0x3a09a027
 80157a0:	200010f8 	.word	0x200010f8
 80157a4:	3a51b717 	.word	0x3a51b717
 80157a8:	3a378034 	.word	0x3a378034
 80157ac:	3b378034 	.word	0x3b378034
 80157b0:	3f666666 	.word	0x3f666666
 80157b4:	ed84 3a4a 	vstr	s6, [r4, #296]	; 0x128
 80157b8:	edc4 3a4b 	vstr	s7, [r4, #300]	; 0x12c
 80157bc:	ed84 4a4c 	vstr	s8, [r4, #304]	; 0x130
 80157c0:	edc4 4a4e 	vstr	s9, [r4, #312]	; 0x138
 80157c4:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 80157c8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 80157cc:	ed81 8a35 	vstr	s16, [r1, #212]	; 0xd4
 80157d0:	ed81 8a39 	vstr	s16, [r1, #228]	; 0xe4
 80157d4:	ed81 8a3d 	vstr	s16, [r1, #244]	; 0xf4
 80157d8:	ed81 8a0f 	vstr	s16, [r1, #60]	; 0x3c
 80157dc:	ed81 8a13 	vstr	s16, [r1, #76]	; 0x4c
 80157e0:	ed81 8a17 	vstr	s16, [r1, #92]	; 0x5c
 80157e4:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
 80157e8:	edc1 7a37 	vstr	s15, [r1, #220]	; 0xdc
 80157ec:	edc1 7a38 	vstr	s15, [r1, #224]	; 0xe0
 80157f0:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
 80157f4:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
 80157f8:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
 80157fc:	edc1 7a10 	vstr	s15, [r1, #64]	; 0x40
 8015800:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
 8015804:	edc1 7a12 	vstr	s15, [r1, #72]	; 0x48
 8015808:	edc1 7a14 	vstr	s15, [r1, #80]	; 0x50
 801580c:	edc1 7a15 	vstr	s15, [r1, #84]	; 0x54
 8015810:	edc1 7a16 	vstr	s15, [r1, #88]	; 0x58
 8015814:	edc1 7a18 	vstr	s15, [r1, #96]	; 0x60
 8015818:	edc1 7a19 	vstr	s15, [r1, #100]	; 0x64
 801581c:	edc1 7a1a 	vstr	s15, [r1, #104]	; 0x68
 8015820:	edc1 7a1b 	vstr	s15, [r1, #108]	; 0x6c
 8015824:	edc1 7a1c 	vstr	s15, [r1, #112]	; 0x70
 8015828:	edc1 7a1d 	vstr	s15, [r1, #116]	; 0x74
 801582c:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 8015830:	ed84 8a52 	vstr	s16, [r4, #328]	; 0x148
 8015834:	f884 814c 	strb.w	r8, [r4, #332]	; 0x14c
 8015838:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
 801583c:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 8015840:	ed84 5a54 	vstr	s10, [r4, #336]	; 0x150
 8015844:	edc4 5a55 	vstr	s11, [r4, #340]	; 0x154
 8015848:	ed84 6a56 	vstr	s12, [r4, #344]	; 0x158
 801584c:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
 8015850:	edc0 7a29 	vstr	s15, [r0, #164]	; 0xa4
 8015854:	edc0 7a2a 	vstr	s15, [r0, #168]	; 0xa8
 8015858:	f884 9144 	strb.w	r9, [r4, #324]	; 0x144
 801585c:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 8015860:	f7fa fc0e 	bl	8010080 <iNemo_setOrientation.constprop.0>
 8015864:	f7fa fdde 	bl	8010424 <iNemo_setOrientation_6X.constprop.0>
 8015868:	4631      	mov	r1, r6
 801586a:	ed5f 4a32 	vldr	s9, [pc, #-200]	; 80157a4 <MotionDI_Initialize+0x45c>
 801586e:	f831 3f04 	ldrh.w	r3, [r1, #4]!
 8015872:	ed1f 5a33 	vldr	s10, [pc, #-204]	; 80157a8 <MotionDI_Initialize+0x460>
 8015876:	ed5f 5a33 	vldr	s11, [pc, #-204]	; 80157ac <MotionDI_Initialize+0x464>
 801587a:	ed5f 7a33 	vldr	s15, [pc, #-204]	; 80157b0 <MotionDI_Initialize+0x468>
 801587e:	f891 e002 	ldrb.w	lr, [r1, #2]
 8015882:	f8b6 c000 	ldrh.w	ip, [r6]
 8015886:	78b0      	ldrb	r0, [r6, #2]
 8015888:	494f      	ldr	r1, [pc, #316]	; (80159c8 <MotionDI_Initialize+0x680>)
 801588a:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
 801588e:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8015892:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8015896:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 801589a:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 801589e:	edc4 4a54 	vstr	s9, [r4, #336]	; 0x150
 80158a2:	edc4 4a45 	vstr	s9, [r4, #276]	; 0x114
 80158a6:	ed84 5a55 	vstr	s10, [r4, #340]	; 0x154
 80158aa:	ed84 5a46 	vstr	s10, [r4, #280]	; 0x118
 80158ae:	edc4 5a56 	vstr	s11, [r4, #344]	; 0x158
 80158b2:	edc4 5a47 	vstr	s11, [r4, #284]	; 0x11c
 80158b6:	ed84 6a4b 	vstr	s12, [r4, #300]	; 0x12c
 80158ba:	ed84 6a3c 	vstr	s12, [r4, #240]	; 0xf0
 80158be:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 80158c2:	f884 9161 	strb.w	r9, [r4, #353]	; 0x161
 80158c6:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 80158ca:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
 80158ce:	f8c4 2101 	str.w	r2, [r4, #257]	; 0x101
 80158d2:	ed84 7a62 	vstr	s14, [r4, #392]	; 0x188
 80158d6:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
 80158da:	f8ad c02d 	strh.w	ip, [sp, #45]	; 0x2d
 80158de:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80158e2:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
 80158e6:	edc4 7a3b 	vstr	s15, [r4, #236]	; 0xec
 80158ea:	edc4 7a61 	vstr	s15, [r4, #388]	; 0x184
 80158ee:	f8c4 113d 	str.w	r1, [r4, #317]	; 0x13d
 80158f2:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 80158f6:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 80158fa:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 80158fe:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
 8015902:	f8a4 918c 	strh.w	r9, [r4, #396]	; 0x18c
 8015906:	f8dd 1031 	ldr.w	r1, [sp, #49]	; 0x31
 801590a:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 801590e:	ed94 7a02 	vldr	s14, [r4, #8]
 8015912:	edd4 7a03 	vldr	s15, [r4, #12]
 8015916:	f8db 0000 	ldr.w	r0, [fp]
 801591a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80159cc <MotionDI_Initialize+0x684>
 801591e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80159d0 <MotionDI_Initialize+0x688>
 8015922:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8015926:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
 801592a:	f507 6bb6 	add.w	fp, r7, #1456	; 0x5b0
 801592e:	e9c4 2164 	strd	r2, r1, [r4, #400]	; 0x190
 8015932:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8015936:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
 801593a:	edc4 7a5f 	vstr	s15, [r4, #380]	; 0x17c
 801593e:	f8c4 e16c 	str.w	lr, [r4, #364]	; 0x16c
 8015942:	f8c4 c170 	str.w	ip, [r4, #368]	; 0x170
 8015946:	f8c4 9174 	str.w	r9, [r4, #372]	; 0x174
 801594a:	f7fa ff3d 	bl	80107c8 <MotionDI_setKnobs.part.0>
 801594e:	f207 59e4 	addw	r9, r7, #1508	; 0x5e4
 8015952:	4629      	mov	r1, r5
 8015954:	4658      	mov	r0, fp
 8015956:	2234      	movs	r2, #52	; 0x34
 8015958:	f003 fcdc 	bl	8019314 <memset>
 801595c:	4629      	mov	r1, r5
 801595e:	4648      	mov	r0, r9
 8015960:	2234      	movs	r2, #52	; 0x34
 8015962:	ed8b 8a03 	vstr	s16, [fp, #12]
 8015966:	ed8b 8a07 	vstr	s16, [fp, #28]
 801596a:	ed8b 8a0b 	vstr	s16, [fp, #44]	; 0x2c
 801596e:	f884 5684 	strb.w	r5, [r4, #1668]	; 0x684
 8015972:	f003 fccf 	bl	8019314 <memset>
 8015976:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80159c0 <MotionDI_Initialize+0x678>
 801597a:	f241 13b4 	movw	r3, #4532	; 0x11b4
 801597e:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 8015982:	2000      	movs	r0, #0
 8015984:	f207 672c 	addw	r7, r7, #1580	; 0x62c
 8015988:	2100      	movs	r1, #0
 801598a:	e9c2 0100 	strd	r0, r1, [r2]
 801598e:	ed87 7b00 	vstr	d7, [r7]
 8015992:	52f5      	strh	r5, [r6, r3]
 8015994:	f806 500a 	strb.w	r5, [r6, sl]
 8015998:	ed89 8a03 	vstr	s16, [r9, #12]
 801599c:	ed89 8a07 	vstr	s16, [r9, #28]
 80159a0:	ed89 8a0b 	vstr	s16, [r9, #44]	; 0x2c
 80159a4:	f8c4 86cc 	str.w	r8, [r4, #1740]	; 0x6cc
 80159a8:	f884 56b8 	strb.w	r5, [r4, #1720]	; 0x6b8
 80159ac:	f884 56c8 	strb.w	r5, [r4, #1736]	; 0x6c8
 80159b0:	b011      	add	sp, #68	; 0x44
 80159b2:	ecbd 8b02 	vpop	{d8}
 80159b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ba:	bf00      	nop
 80159bc:	f3af 8000 	nop.w
 80159c0:	00000000 	.word	0x00000000
 80159c4:	fff80000 	.word	0xfff80000
 80159c8:	01010001 	.word	0x01010001
 80159cc:	3a2c7da2 	.word	0x3a2c7da2
 80159d0:	3e051eb8 	.word	0x3e051eb8

080159d4 <MotionDI_setKnobs>:
 80159d4:	4b03      	ldr	r3, [pc, #12]	; (80159e4 <MotionDI_setKnobs+0x10>)
 80159d6:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 80159da:	b903      	cbnz	r3, 80159de <MotionDI_setKnobs+0xa>
 80159dc:	4770      	bx	lr
 80159de:	f7fa bef3 	b.w	80107c8 <MotionDI_setKnobs.part.0>
 80159e2:	bf00      	nop
 80159e4:	200013d8 	.word	0x200013d8

080159e8 <MotionDI_getKnobs>:
 80159e8:	4a22      	ldr	r2, [pc, #136]	; (8015a74 <MotionDI_getKnobs+0x8c>)
 80159ea:	f892 3644 	ldrb.w	r3, [r2, #1604]	; 0x644
 80159ee:	b903      	cbnz	r3, 80159f2 <MotionDI_getKnobs+0xa>
 80159f0:	4770      	bx	lr
 80159f2:	b470      	push	{r4, r5, r6}
 80159f4:	4920      	ldr	r1, [pc, #128]	; (8015a78 <MotionDI_getKnobs+0x90>)
 80159f6:	f892 5126 	ldrb.w	r5, [r2, #294]	; 0x126
 80159fa:	880b      	ldrh	r3, [r1, #0]
 80159fc:	f892 6125 	ldrb.w	r6, [r2, #293]	; 0x125
 8015a00:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
 8015a04:	b091      	sub	sp, #68	; 0x44
 8015a06:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
 8015a0a:	f8ad 302d 	strh.w	r3, [sp, #45]	; 0x2d
 8015a0e:	460b      	mov	r3, r1
 8015a10:	7889      	ldrb	r1, [r1, #2]
 8015a12:	f833 4f04 	ldrh.w	r4, [r3, #4]!
 8015a16:	f8ad 4031 	strh.w	r4, [sp, #49]	; 0x31
 8015a1a:	789b      	ldrb	r3, [r3, #2]
 8015a1c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8015a20:	2300      	movs	r3, #0
 8015a22:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8015a26:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8015a2a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8015a2e:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
 8015a32:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
 8015a36:	f8d2 40ec 	ldr.w	r4, [r2, #236]	; 0xec
 8015a3a:	f8dd 502d 	ldr.w	r5, [sp, #45]	; 0x2d
 8015a3e:	6303      	str	r3, [r0, #48]	; 0x30
 8015a40:	4b0e      	ldr	r3, [pc, #56]	; (8015a7c <MotionDI_getKnobs+0x94>)
 8015a42:	62c5      	str	r5, [r0, #44]	; 0x2c
 8015a44:	6204      	str	r4, [r0, #32]
 8015a46:	6241      	str	r1, [r0, #36]	; 0x24
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	6003      	str	r3, [r0, #0]
 8015a4c:	f892 4168 	ldrb.w	r4, [r2, #360]	; 0x168
 8015a50:	68d3      	ldr	r3, [r2, #12]
 8015a52:	6855      	ldr	r5, [r2, #4]
 8015a54:	6891      	ldr	r1, [r2, #8]
 8015a56:	7104      	strb	r4, [r0, #4]
 8015a58:	6816      	ldr	r6, [r2, #0]
 8015a5a:	6954      	ldr	r4, [r2, #20]
 8015a5c:	6086      	str	r6, [r0, #8]
 8015a5e:	60c5      	str	r5, [r0, #12]
 8015a60:	6104      	str	r4, [r0, #16]
 8015a62:	6141      	str	r1, [r0, #20]
 8015a64:	6183      	str	r3, [r0, #24]
 8015a66:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
 8015a6a:	7703      	strb	r3, [r0, #28]
 8015a6c:	b011      	add	sp, #68	; 0x44
 8015a6e:	bc70      	pop	{r4, r5, r6}
 8015a70:	4770      	bx	lr
 8015a72:	bf00      	nop
 8015a74:	200013d8 	.word	0x200013d8
 8015a78:	20000000 	.word	0x20000000
 8015a7c:	20002510 	.word	0x20002510

08015a80 <MotionDI_update>:
 8015a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a84:	ed2d 8b10 	vpush	{d8-d15}
 8015a88:	4cd2      	ldr	r4, [pc, #840]	; (8015dd4 <MotionDI_update+0x354>)
 8015a8a:	f894 3644 	ldrb.w	r3, [r4, #1604]	; 0x644
 8015a8e:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	f000 8197 	beq.w	8015dc6 <MotionDI_update+0x346>
 8015a98:	2300      	movs	r3, #0
 8015a9a:	4681      	mov	r9, r0
 8015a9c:	460d      	mov	r5, r1
 8015a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015aa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015aa6:	f7eb f9a1 	bl	8000dec <__aeabi_ldivmod>
 8015aaa:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 8015aae:	9017      	str	r0, [sp, #92]	; 0x5c
 8015ab0:	2b01      	cmp	r3, #1
 8015ab2:	f000 81a7 	beq.w	8015e04 <MotionDI_update+0x384>
 8015ab6:	2b02      	cmp	r3, #2
 8015ab8:	f000 81a9 	beq.w	8015e0e <MotionDI_update+0x38e>
 8015abc:	ab58      	add	r3, sp, #352	; 0x160
 8015abe:	9318      	str	r3, [sp, #96]	; 0x60
 8015ac0:	ab65      	add	r3, sp, #404	; 0x194
 8015ac2:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 8015ac6:	931c      	str	r3, [sp, #112]	; 0x70
 8015ac8:	f204 6754 	addw	r7, r4, #1620	; 0x654
 8015acc:	f894 8180 	ldrb.w	r8, [r4, #384]	; 0x180
 8015ad0:	f1b8 0f01 	cmp.w	r8, #1
 8015ad4:	f000 85de 	beq.w	8016694 <MotionDI_update+0xc14>
 8015ad8:	f1b8 0f02 	cmp.w	r8, #2
 8015adc:	f000 85df 	beq.w	801669e <MotionDI_update+0xc1e>
 8015ae0:	4ebd      	ldr	r6, [pc, #756]	; (8015dd8 <MotionDI_update+0x358>)
 8015ae2:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8015df8 <MotionDI_update+0x378>
 8015ae6:	edd7 0a00 	vldr	s1, [r7]
 8015aea:	ed97 1a01 	vldr	s2, [r7, #4]
 8015aee:	edd7 1a02 	vldr	s3, [r7, #8]
 8015af2:	ed97 2a03 	vldr	s4, [r7, #12]
 8015af6:	edd7 2a07 	vldr	s5, [r7, #28]
 8015afa:	ed97 3a0b 	vldr	s6, [r7, #44]	; 0x2c
 8015afe:	f8d8 3000 	ldr.w	r3, [r8]
 8015b02:	682f      	ldr	r7, [r5, #0]
 8015b04:	edd5 6a02 	vldr	s13, [r5, #8]
 8015b08:	ed95 7a03 	vldr	s14, [r5, #12]
 8015b0c:	edd5 7a04 	vldr	s15, [r5, #16]
 8015b10:	ed95 5a05 	vldr	s10, [r5, #20]
 8015b14:	edd5 5a06 	vldr	s11, [r5, #24]
 8015b18:	ed95 6a07 	vldr	s12, [r5, #28]
 8015b1c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015b20:	686d      	ldr	r5, [r5, #4]
 8015b22:	edd6 3a00 	vldr	s7, [r6]
 8015b26:	ed96 4a01 	vldr	s8, [r6, #4]
 8015b2a:	edd6 4a02 	vldr	s9, [r6, #8]
 8015b2e:	1afb      	subs	r3, r7, r3
 8015b30:	931a      	str	r3, [sp, #104]	; 0x68
 8015b32:	eb65 0302 	sbc.w	r3, r5, r2
 8015b36:	931b      	str	r3, [sp, #108]	; 0x6c
 8015b38:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8015b3c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8015b40:	ee37 7a41 	vsub.f32	s14, s14, s2
 8015b44:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8015b48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b4a:	ee66 6a82 	vmul.f32	s13, s13, s4
 8015b4e:	ee27 7a22 	vmul.f32	s14, s14, s5
 8015b52:	ee67 7a83 	vmul.f32	s15, s15, s6
 8015b56:	ee35 5a63 	vsub.f32	s10, s10, s7
 8015b5a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8015b5e:	ee36 6a64 	vsub.f32	s12, s12, s9
 8015b62:	2800      	cmp	r0, #0
 8015b64:	edc3 6a03 	vstr	s13, [r3, #12]
 8015b68:	ed83 7a04 	vstr	s14, [r3, #16]
 8015b6c:	edc3 7a05 	vstr	s15, [r3, #20]
 8015b70:	ed83 5a06 	vstr	s10, [r3, #24]
 8015b74:	edc3 5a07 	vstr	s11, [r3, #28]
 8015b78:	ed83 6a08 	vstr	s12, [r3, #32]
 8015b7c:	f171 0300 	sbcs.w	r3, r1, #0
 8015b80:	f2c0 86c1 	blt.w	8016906 <MotionDI_update+0xe86>
 8015b84:	f7eb f8f4 	bl	8000d70 <__aeabi_l2f>
 8015b88:	eddf 7a94 	vldr	s15, [pc, #592]	; 8015ddc <MotionDI_update+0x35c>
 8015b8c:	ee07 0a10 	vmov	s14, r0
 8015b90:	ee27 9a27 	vmul.f32	s18, s14, s15
 8015b94:	ab5b      	add	r3, sp, #364	; 0x16c
 8015b96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015b9a:	4e91      	ldr	r6, [pc, #580]	; (8015de0 <MotionDI_update+0x360>)
 8015b9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b9e:	f8c8 7000 	str.w	r7, [r8]
 8015ba2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8015ba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015baa:	f1a6 070c 	sub.w	r7, r6, #12
 8015bae:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015bb2:	aa5e      	add	r2, sp, #376	; 0x178
 8015bb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8015bb6:	3718      	adds	r7, #24
 8015bb8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015bbc:	aa5b      	add	r2, sp, #364	; 0x16c
 8015bbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8015bc0:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8015bc4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015bc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015bcc:	f506 73fa 	add.w	r3, r6, #500	; 0x1f4
 8015bd0:	f8c8 5004 	str.w	r5, [r8, #4]
 8015bd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015bd8:	ab5e      	add	r3, sp, #376	; 0x178
 8015bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015bde:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
 8015be2:	f506 7503 	add.w	r5, r6, #524	; 0x20c
 8015be6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015bea:	b183      	cbz	r3, 8015c0e <MotionDI_update+0x18e>
 8015bec:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8015bf0:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8015bf4:	431a      	orrs	r2, r3
 8015bf6:	07d5      	lsls	r5, r2, #31
 8015bf8:	f141 80ea 	bpl.w	8016dd0 <MotionDI_update+0x1350>
 8015bfc:	4979      	ldr	r1, [pc, #484]	; (8015de4 <MotionDI_update+0x364>)
 8015bfe:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
 8015c02:	2a00      	cmp	r2, #0
 8015c04:	f341 8231 	ble.w	801706a <MotionDI_update+0x15ea>
 8015c08:	3a01      	subs	r2, #1
 8015c0a:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
 8015c0e:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 8015c12:	931d      	str	r3, [sp, #116]	; 0x74
 8015c14:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 8015c18:	931e      	str	r3, [sp, #120]	; 0x78
 8015c1a:	b133      	cbz	r3, 8015c2a <MotionDI_update+0x1aa>
 8015c1c:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8015c20:	f003 0301 	and.w	r3, r3, #1
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	f041 80f3 	bne.w	8016e10 <MotionDI_update+0x1390>
 8015c2a:	ab84      	add	r3, sp, #528	; 0x210
 8015c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8015c2e:	ab90      	add	r3, sp, #576	; 0x240
 8015c30:	9317      	str	r3, [sp, #92]	; 0x5c
 8015c32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015c34:	b123      	cbz	r3, 8015c40 <MotionDI_update+0x1c0>
 8015c36:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8015c3a:	07d8      	lsls	r0, r3, #31
 8015c3c:	f101 836e 	bmi.w	801731c <MotionDI_update+0x189c>
 8015c40:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8015dfc <MotionDI_update+0x37c>
 8015c44:	4f68      	ldr	r7, [pc, #416]	; (8015de8 <MotionDI_update+0x368>)
 8015c46:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8015c4a:	f5a7 7800 	sub.w	r8, r7, #512	; 0x200
 8015c4e:	ad93      	add	r5, sp, #588	; 0x24c
 8015c50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015c54:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015c58:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8015c5a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015c5e:	f508 73fa 	add.w	r3, r8, #500	; 0x1f4
 8015c62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015c66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015c6c:	f508 721f 	add.w	r2, r8, #636	; 0x27c
 8015c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c72:	ad97      	add	r5, sp, #604	; 0x25c
 8015c74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015c78:	f508 7222 	add.w	r2, r8, #648	; 0x288
 8015c7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c7e:	f1a8 030c 	sub.w	r3, r8, #12
 8015c82:	ad9a      	add	r5, sp, #616	; 0x268
 8015c84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015c88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015c8c:	f108 077c 	add.w	r7, r8, #124	; 0x7c
 8015c90:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8015c94:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015c98:	af88      	add	r7, sp, #544	; 0x220
 8015c9a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015c9e:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8015ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8015ca4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015ca6:	f50d 7e0b 	add.w	lr, sp, #556	; 0x22c
 8015caa:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8015cae:	4661      	mov	r1, ip
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	462a      	mov	r2, r5
 8015cb4:	f7f9 fe50 	bl	800f958 <quatErr2EulerErr>
 8015cb8:	f508 70fa 	add.w	r0, r8, #500	; 0x1f4
 8015cbc:	682b      	ldr	r3, [r5, #0]
 8015cbe:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
 8015cc2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8015cc6:	462a      	mov	r2, r5
 8015cc8:	f7f9 fe46 	bl	800f958 <quatErr2EulerErr>
 8015ccc:	682a      	ldr	r2, [r5, #0]
 8015cce:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 8015cd2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015cd4:	f8cb 2074 	str.w	r2, [fp, #116]	; 0x74
 8015cd8:	a893      	add	r0, sp, #588	; 0x24c
 8015cda:	aa97      	add	r2, sp, #604	; 0x25c
 8015cdc:	f7fa fee0 	bl	8010aa0 <iNemo_quat2heading>
 8015ce0:	463a      	mov	r2, r7
 8015ce2:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015ce4:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8015ce8:	ed8b 0a1c 	vstr	s0, [fp, #112]	; 0x70
 8015cec:	4659      	mov	r1, fp
 8015cee:	f7fa fed7 	bl	8010aa0 <iNemo_quat2heading>
 8015cf2:	ab5b      	add	r3, sp, #364	; 0x16c
 8015cf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015cf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015cfa:	ed8b 0a0d 	vstr	s0, [fp, #52]	; 0x34
 8015cfe:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8015d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015d06:	f5a8 7782 	sub.w	r7, r8, #260	; 0x104
 8015d0a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015d0e:	aa5e      	add	r2, sp, #376	; 0x178
 8015d10:	ca07      	ldmia	r2, {r0, r1, r2}
 8015d12:	3718      	adds	r7, #24
 8015d14:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015d18:	aa5b      	add	r2, sp, #364	; 0x16c
 8015d1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8015d1c:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8015d20:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015d24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015d28:	f1a7 030c 	sub.w	r3, r7, #12
 8015d2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015d30:	ab5e      	add	r3, sp, #376	; 0x178
 8015d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015d36:	f107 030c 	add.w	r3, r7, #12
 8015d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	f040 872b 	bne.w	8016b9c <MotionDI_update+0x111c>
 8015d46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	f040 85e0 	bne.w	801690e <MotionDI_update+0xe8e>
 8015d4e:	4b26      	ldr	r3, [pc, #152]	; (8015de8 <MotionDI_update+0x368>)
 8015d50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d52:	ac93      	add	r4, sp, #588	; 0x24c
 8015d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015d58:	4b24      	ldr	r3, [pc, #144]	; (8015dec <MotionDI_update+0x36c>)
 8015d5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015d5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015d64:	4a22      	ldr	r2, [pc, #136]	; (8015df0 <MotionDI_update+0x370>)
 8015d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8015d68:	ac97      	add	r4, sp, #604	; 0x25c
 8015d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015d6e:	4a21      	ldr	r2, [pc, #132]	; (8015df4 <MotionDI_update+0x374>)
 8015d70:	ca07      	ldmia	r2, {r0, r1, r2}
 8015d72:	ac9a      	add	r4, sp, #616	; 0x268
 8015d74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015d78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d7a:	ab97      	add	r3, sp, #604	; 0x25c
 8015d7c:	f8c9 0000 	str.w	r0, [r9]
 8015d80:	f8c9 1004 	str.w	r1, [r9, #4]
 8015d84:	f8c9 2008 	str.w	r2, [r9, #8]
 8015d88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d8a:	4623      	mov	r3, r4
 8015d8c:	f8c9 001c 	str.w	r0, [r9, #28]
 8015d90:	f8c9 1020 	str.w	r1, [r9, #32]
 8015d94:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
 8015d98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d9a:	f8db 6048 	ldr.w	r6, [fp, #72]	; 0x48
 8015d9e:	f8db 504c 	ldr.w	r5, [fp, #76]	; 0x4c
 8015da2:	f8db 4050 	ldr.w	r4, [fp, #80]	; 0x50
 8015da6:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 8015daa:	f8c9 600c 	str.w	r6, [r9, #12]
 8015dae:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 8015db2:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
 8015db6:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 8015dba:	f8c9 5010 	str.w	r5, [r9, #16]
 8015dbe:	f8c9 4014 	str.w	r4, [r9, #20]
 8015dc2:	f8c9 3018 	str.w	r3, [r9, #24]
 8015dc6:	f20d 4da4 	addw	sp, sp, #1188	; 0x4a4
 8015dca:	ecbd 8b10 	vpop	{d8-d15}
 8015dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dd2:	bf00      	nop
 8015dd4:	200013d8 	.word	0x200013d8
 8015dd8:	20001a60 	.word	0x20001a60
 8015ddc:	358637bd 	.word	0x358637bd
 8015de0:	20001634 	.word	0x20001634
 8015de4:	200010f8 	.word	0x200010f8
 8015de8:	2000192c 	.word	0x2000192c
 8015dec:	20001920 	.word	0x20001920
 8015df0:	200019a8 	.word	0x200019a8
 8015df4:	200019b4 	.word	0x200019b4
 8015df8:	20001a98 	.word	0x20001a98
 8015dfc:	20001810 	.word	0x20001810
 8015e00:	447a0000 	.word	0x447a0000
 8015e04:	f894 3684 	ldrb.w	r3, [r4, #1668]	; 0x684
 8015e08:	2b03      	cmp	r3, #3
 8015e0a:	f43f ae57 	beq.w	8015abc <MotionDI_update+0x3c>
 8015e0e:	ed95 7a02 	vldr	s14, [r5, #8]
 8015e12:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8015e00 <MotionDI_update+0x380>
 8015e16:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
 8015e1a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e22:	bfb4      	ite	lt
 8015e24:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015e28:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015e2c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015e30:	af36      	add	r7, sp, #216	; 0xd8
 8015e32:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8015e00 <MotionDI_update+0x380>
 8015e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015e3a:	ee17 3a90 	vmov	r3, s15
 8015e3e:	edd5 7a03 	vldr	s15, [r5, #12]
 8015e42:	603b      	str	r3, [r7, #0]
 8015e44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e4c:	bfb4      	ite	lt
 8015e4e:	eebe 7a00 	vmovlt.f32	s14, #224	; 0xbf000000 -0.5
 8015e52:	eeb6 7a00 	vmovge.f32	s14, #96	; 0x3f000000  0.5
 8015e56:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015e5a:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 8015e00 <MotionDI_update+0x380>
 8015e5e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015e62:	ed95 7a04 	vldr	s14, [r5, #16]
 8015e66:	edc7 7a01 	vstr	s15, [r7, #4]
 8015e6a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e72:	ee17 1a90 	vmov	r1, s15
 8015e76:	bfac      	ite	ge
 8015e78:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015e7c:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015e80:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015e84:	2809      	cmp	r0, #9
 8015e86:	bf9c      	itt	ls
 8015e88:	3001      	addls	r0, #1
 8015e8a:	f884 064c 	strbls.w	r0, [r4, #1612]	; 0x64c
 8015e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015e92:	48de      	ldr	r0, [pc, #888]	; (801620c <MotionDI_update+0x78c>)
 8015e94:	edc7 7a02 	vstr	s15, [r7, #8]
 8015e98:	ee17 2a90 	vmov	r2, s15
 8015e9c:	f647 77fe 	movw	r7, #32766	; 0x7ffe
 8015ea0:	42bb      	cmp	r3, r7
 8015ea2:	bfa8      	it	ge
 8015ea4:	463b      	movge	r3, r7
 8015ea6:	42ba      	cmp	r2, r7
 8015ea8:	bfa8      	it	ge
 8015eaa:	463a      	movge	r2, r7
 8015eac:	4283      	cmp	r3, r0
 8015eae:	bfb8      	it	lt
 8015eb0:	4603      	movlt	r3, r0
 8015eb2:	4281      	cmp	r1, r0
 8015eb4:	f2c0 8794 	blt.w	8016de0 <MotionDI_update+0x1360>
 8015eb8:	428f      	cmp	r7, r1
 8015eba:	bfa8      	it	ge
 8015ebc:	460f      	movge	r7, r1
 8015ebe:	fa0f fe87 	sxth.w	lr, r7
 8015ec2:	4ed3      	ldr	r6, [pc, #844]	; (8016210 <MotionDI_update+0x790>)
 8015ec4:	48d1      	ldr	r0, [pc, #836]	; (801620c <MotionDI_update+0x78c>)
 8015ec6:	f8b6 11c8 	ldrh.w	r1, [r6, #456]	; 0x1c8
 8015eca:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8015ecc:	f8c6 71c4 	str.w	r7, [r6, #452]	; 0x1c4
 8015ed0:	4282      	cmp	r2, r0
 8015ed2:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8015ed6:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 8015eda:	bfb8      	it	lt
 8015edc:	4602      	movlt	r2, r0
 8015ede:	3101      	adds	r1, #1
 8015ee0:	f8b6 01ca 	ldrh.w	r0, [r6, #458]	; 0x1ca
 8015ee4:	f8ac e1ce 	strh.w	lr, [ip, #462]	; 0x1ce
 8015ee8:	b289      	uxth	r1, r1
 8015eea:	b21b      	sxth	r3, r3
 8015eec:	4281      	cmp	r1, r0
 8015eee:	f8ac 31cc 	strh.w	r3, [ip, #460]	; 0x1cc
 8015ef2:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8015ef6:	7833      	ldrb	r3, [r6, #0]
 8015ef8:	f8a6 11c8 	strh.w	r1, [r6, #456]	; 0x1c8
 8015efc:	b212      	sxth	r2, r2
 8015efe:	bf88      	it	hi
 8015f00:	2100      	movhi	r1, #0
 8015f02:	f8ac 21d0 	strh.w	r2, [ip, #464]	; 0x1d0
 8015f06:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
 8015f0a:	9739      	str	r7, [sp, #228]	; 0xe4
 8015f0c:	f8ad e0ea 	strh.w	lr, [sp, #234]	; 0xea
 8015f10:	9720      	str	r7, [sp, #128]	; 0x80
 8015f12:	bf88      	it	hi
 8015f14:	f8a6 11c8 	strhhi.w	r1, [r6, #456]	; 0x1c8
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	f001 81bb 	beq.w	8017294 <MotionDI_update+0x1814>
 8015f1e:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8015f22:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8015f26:	4313      	orrs	r3, r2
 8015f28:	f001 8343 	beq.w	80175b2 <MotionDI_update+0x1b32>
 8015f2c:	e9dd 7317 	ldrd	r7, r3, [sp, #92]	; 0x5c
 8015f30:	ebb7 0a03 	subs.w	sl, r7, r3
 8015f34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015f36:	f04f 0200 	mov.w	r2, #0
 8015f3a:	eb62 0b03 	sbc.w	fp, r2, r3
 8015f3e:	f1bb 0f00 	cmp.w	fp, #0
 8015f42:	bf08      	it	eq
 8015f44:	f5ba 7f7a 	cmpeq.w	sl, #1000	; 0x3e8
 8015f48:	f0c1 81a1 	bcc.w	801728e <MotionDI_update+0x180e>
 8015f4c:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8015f50:	fb03 f301 	mul.w	r3, r3, r1
 8015f54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015f58:	bf34      	ite	cc
 8015f5a:	2300      	movcc	r3, #0
 8015f5c:	2301      	movcs	r3, #1
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	f001 8195 	beq.w	801728e <MotionDI_update+0x180e>
 8015f64:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 8015f68:	49aa      	ldr	r1, [pc, #680]	; (8016214 <MotionDI_update+0x794>)
 8015f6a:	4658      	mov	r0, fp
 8015f6c:	f44f 7227 	mov.w	r2, #668	; 0x29c
 8015f70:	f003 f9c2 	bl	80192f8 <memcpy>
 8015f74:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8015f78:	9322      	str	r3, [sp, #136]	; 0x88
 8015f7a:	2b02      	cmp	r3, #2
 8015f7c:	f241 8613 	bls.w	8017ba6 <MotionDI_update+0x2126>
 8015f80:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 8015f84:	9221      	str	r2, [sp, #132]	; 0x84
 8015f86:	2a00      	cmp	r2, #0
 8015f88:	f001 845a 	beq.w	8017840 <MotionDI_update+0x1dc0>
 8015f8c:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8015f90:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8015f94:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8016218 <MotionDI_update+0x798>
 8015f98:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8015fa0:	f003 fa86 	bl	80194b0 <roundf>
 8015fa4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8015fa6:	9325      	str	r3, [sp, #148]	; 0x94
 8015fa8:	eefc 8ac0 	vcvt.u32.f32	s17, s0
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	f002 8127 	beq.w	8018200 <MotionDI_update+0x2780>
 8015fb2:	ee18 1a90 	vmov	r1, s17
 8015fb6:	4a99      	ldr	r2, [pc, #612]	; (801621c <MotionDI_update+0x79c>)
 8015fb8:	1acb      	subs	r3, r1, r3
 8015fba:	4293      	cmp	r3, r2
 8015fbc:	f242 8247 	bls.w	801844e <MotionDI_update+0x29ce>
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	7533      	strb	r3, [r6, #20]
 8015fc4:	4a96      	ldr	r2, [pc, #600]	; (8016220 <MotionDI_update+0x7a0>)
 8015fc6:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8015fca:	edd2 7a00 	vldr	s15, [r2]
 8015fce:	9318      	str	r3, [sp, #96]	; 0x60
 8015fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	ee87 ca27 	vdiv.f32	s24, s14, s15
 8015fda:	f002 81d0 	beq.w	801837e <MotionDI_update+0x28fe>
 8015fde:	ee6c ba0c 	vmul.f32	s23, s24, s24
 8015fe2:	ed9f 2a90 	vldr	s4, [pc, #576]	; 8016224 <MotionDI_update+0x7a4>
 8015fe6:	ee2b 2a82 	vmul.f32	s4, s23, s4
 8015fea:	f9bb 700a 	ldrsh.w	r7, [fp, #10]
 8015fee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015ff0:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 8015ff4:	f9bb 800c 	ldrsh.w	r8, [fp, #12]
 8015ff8:	eddf ca8b 	vldr	s25, [pc, #556]	; 8016228 <MotionDI_update+0x7a8>
 8015ffc:	eddf 3a8b 	vldr	s7, [pc, #556]	; 801622c <MotionDI_update+0x7ac>
 8016000:	eddf 1a8b 	vldr	s3, [pc, #556]	; 8016230 <MotionDI_update+0x7b0>
 8016004:	ed9f 3a8b 	vldr	s6, [pc, #556]	; 8016234 <MotionDI_update+0x7b4>
 8016008:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 801600c:	ee07 7a90 	vmov	s15, r7
 8016010:	ee0f 3a90 	vmov	s31, r3
 8016014:	eeb8 eae7 	vcvt.f32.s32	s28, s15
 8016018:	0853      	lsrs	r3, r2, #1
 801601a:	ee07 8a90 	vmov	s15, r8
 801601e:	4293      	cmp	r3, r2
 8016020:	eef8 daef 	vcvt.f32.s32	s27, s31
 8016024:	eeb8 fae7 	vcvt.f32.s32	s30, s15
 8016028:	931c      	str	r3, [sp, #112]	; 0x70
 801602a:	bf28      	it	cs
 801602c:	4613      	movcs	r3, r2
 801602e:	469a      	mov	sl, r3
 8016030:	ee6c ca2c 	vmul.f32	s25, s24, s25
 8016034:	ee13 3a90 	vmov	r3, s7
 8016038:	eeb0 5a6d 	vmov.f32	s10, s27
 801603c:	eef0 4a6d 	vmov.f32	s9, s27
 8016040:	eeb0 4a4e 	vmov.f32	s8, s28
 8016044:	eeb0 0a4e 	vmov.f32	s0, s28
 8016048:	eeb0 1a4f 	vmov.f32	s2, s30
 801604c:	eef0 0a4f 	vmov.f32	s1, s30
 8016050:	eef0 2a61 	vmov.f32	s5, s3
 8016054:	46de      	mov	lr, fp
 8016056:	f9be 100a 	ldrsh.w	r1, [lr, #10]
 801605a:	f9be 0008 	ldrsh.w	r0, [lr, #8]
 801605e:	f9be 200c 	ldrsh.w	r2, [lr, #12]
 8016062:	fb01 fc01 	mul.w	ip, r1, r1
 8016066:	fb00 cc00 	mla	ip, r0, r0, ip
 801606a:	fb02 cc02 	mla	ip, r2, r2, ip
 801606e:	ee07 ca90 	vmov	s15, ip
 8016072:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8016076:	eeb8 9a63 	vcvt.f32.u32	s18, s7
 801607a:	eef1 5ac6 	vsqrt.f32	s11, s12
 801607e:	3301      	adds	r3, #1
 8016080:	b29b      	uxth	r3, r3
 8016082:	f10e 0e06 	add.w	lr, lr, #6
 8016086:	ee07 0a90 	vmov	s15, r0
 801608a:	eef8 9a43 	vcvt.f32.u32	s19, s6
 801608e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016092:	eeb4 9ae5 	vcmpe.f32	s18, s11
 8016096:	ee07 1a90 	vmov	s15, r1
 801609a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801609e:	eef4 9ae5 	vcmpe.f32	s19, s11
 80160a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80160a6:	bf48      	it	mi
 80160a8:	eefc 3ae5 	vcvtmi.u32.f32	s7, s11
 80160ac:	ee07 2a90 	vmov	s15, r2
 80160b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160b4:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80160b8:	bfc8      	it	gt
 80160ba:	eebc 3ae5 	vcvtgt.u32.f32	s6, s11
 80160be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c2:	eef4 4ae6 	vcmpe.f32	s9, s13
 80160c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80160ca:	bfb8      	it	lt
 80160cc:	eeb0 5a66 	vmovlt.f32	s10, s13
 80160d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d4:	eeb4 4ac7 	vcmpe.f32	s8, s14
 80160d8:	bf88      	it	hi
 80160da:	eef0 4a66 	vmovhi.f32	s9, s13
 80160de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80160e6:	bfb8      	it	lt
 80160e8:	eeb0 4a47 	vmovlt.f32	s8, s14
 80160ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160f0:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80160f4:	bf88      	it	hi
 80160f6:	eeb0 0a47 	vmovhi.f32	s0, s14
 80160fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160fe:	eef4 0ae7 	vcmpe.f32	s1, s15
 8016102:	bfb8      	it	lt
 8016104:	eeb0 1a67 	vmovlt.f32	s2, s15
 8016108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801610c:	bf88      	it	hi
 801610e:	eef0 0a67 	vmovhi.f32	s1, s15
 8016112:	4553      	cmp	r3, sl
 8016114:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8016118:	ee71 1a86 	vadd.f32	s3, s3, s12
 801611c:	d39b      	bcc.n	8016056 <MotionDI_update+0x5d6>
 801611e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016120:	4293      	cmp	r3, r2
 8016122:	f082 81c2 	bcs.w	80184aa <MotionDI_update+0x2a2a>
 8016126:	3a01      	subs	r2, #1
 8016128:	1ad2      	subs	r2, r2, r3
 801612a:	fa13 fe82 	uxtah	lr, r3, r2
 801612e:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
 8016132:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016136:	f10b 0e06 	add.w	lr, fp, #6
 801613a:	eddf 9a3d 	vldr	s19, [pc, #244]	; 8016230 <MotionDI_update+0x7b0>
 801613e:	eb0b 0c43 	add.w	ip, fp, r3, lsl #1
 8016142:	eb0e 0e42 	add.w	lr, lr, r2, lsl #1
 8016146:	f9bc 200a 	ldrsh.w	r2, [ip, #10]
 801614a:	f9bc 1008 	ldrsh.w	r1, [ip, #8]
 801614e:	f9bc 300c 	ldrsh.w	r3, [ip, #12]
 8016152:	fb02 f002 	mul.w	r0, r2, r2
 8016156:	fb01 0001 	mla	r0, r1, r1, r0
 801615a:	fb03 0003 	mla	r0, r3, r3, r0
 801615e:	ee07 0a90 	vmov	s15, r0
 8016162:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8016166:	eeb8 9a63 	vcvt.f32.u32	s18, s7
 801616a:	eef1 5ac6 	vsqrt.f32	s11, s12
 801616e:	f10c 0c06 	add.w	ip, ip, #6
 8016172:	ee07 1a90 	vmov	s15, r1
 8016176:	eeb8 aa43 	vcvt.f32.u32	s20, s6
 801617a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801617e:	eef4 5ac9 	vcmpe.f32	s11, s18
 8016182:	ee07 2a90 	vmov	s15, r2
 8016186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801618a:	eef4 5aca 	vcmpe.f32	s11, s20
 801618e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016192:	bfc8      	it	gt
 8016194:	eefc 3ae5 	vcvtgt.u32.f32	s7, s11
 8016198:	ee07 3a90 	vmov	s15, r3
 801619c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a0:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80161a4:	bf48      	it	mi
 80161a6:	eebc 3ae5 	vcvtmi.u32.f32	s6, s11
 80161aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ae:	eef4 4ae6 	vcmpe.f32	s9, s13
 80161b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161b6:	bfb8      	it	lt
 80161b8:	eeb0 5a66 	vmovlt.f32	s10, s13
 80161bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c0:	eeb4 4ac7 	vcmpe.f32	s8, s14
 80161c4:	bf88      	it	hi
 80161c6:	eef0 4a66 	vmovhi.f32	s9, s13
 80161ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ce:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80161d2:	bfb8      	it	lt
 80161d4:	eeb0 4a47 	vmovlt.f32	s8, s14
 80161d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161dc:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80161e0:	bf88      	it	hi
 80161e2:	eeb0 0a47 	vmovhi.f32	s0, s14
 80161e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ea:	eef4 0ae7 	vcmpe.f32	s1, s15
 80161ee:	bfb8      	it	lt
 80161f0:	eeb0 1a67 	vmovlt.f32	s2, s15
 80161f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f8:	bf88      	it	hi
 80161fa:	eef0 0a67 	vmovhi.f32	s1, s15
 80161fe:	45e6      	cmp	lr, ip
 8016200:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8016204:	ee71 1a86 	vadd.f32	s3, s3, s12
 8016208:	d19d      	bne.n	8016146 <MotionDI_update+0x6c6>
 801620a:	e015      	b.n	8016238 <MotionDI_update+0x7b8>
 801620c:	ffff8002 	.word	0xffff8002
 8016210:	200020a8 	.word	0x200020a8
 8016214:	2000226c 	.word	0x2000226c
 8016218:	3a83126f 	.word	0x3a83126f
 801621c:	00278d00 	.word	0x00278d00
 8016220:	20002508 	.word	0x20002508
 8016224:	3ca3d70a 	.word	0x3ca3d70a
 8016228:	3dcccccd 	.word	0x3dcccccd
	...
 8016234:	fffffffe 	.word	0xfffffffe
 8016238:	ee75 7a64 	vsub.f32	s15, s10, s9
 801623c:	eef4 cae7 	vcmpe.f32	s25, s15
 8016240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016244:	f101 87fa 	bmi.w	801823c <MotionDI_update+0x27bc>
 8016248:	ee74 7a40 	vsub.f32	s15, s8, s0
 801624c:	eef4 cae7 	vcmpe.f32	s25, s15
 8016250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016254:	f101 87f2 	bmi.w	801823c <MotionDI_update+0x27bc>
 8016258:	ee71 7a60 	vsub.f32	s15, s2, s1
 801625c:	eef4 cae7 	vcmpe.f32	s25, s15
 8016260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016264:	f101 87ea 	bmi.w	801823c <MotionDI_update+0x27bc>
 8016268:	2301      	movs	r3, #1
 801626a:	9328      	str	r3, [sp, #160]	; 0xa0
 801626c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801626e:	ee07 1a90 	vmov	s15, r1
 8016272:	ee39 7aa2 	vadd.f32	s14, s19, s5
 8016276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801627a:	1e4b      	subs	r3, r1, #1
 801627c:	ee87 da27 	vdiv.f32	s26, s14, s15
 8016280:	9323      	str	r3, [sp, #140]	; 0x8c
 8016282:	ee07 3a10 	vmov	s14, r3
 8016286:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801628a:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 801628e:	eee7 1ac7 	vfms.f32	s3, s15, s14
 8016292:	ee81 7aa6 	vdiv.f32	s14, s3, s13
 8016296:	eeb4 7ac2 	vcmpe.f32	s14, s4
 801629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801629e:	f301 8482 	bgt.w	8017ba6 <MotionDI_update+0x2126>
 80162a2:	4b53      	ldr	r3, [pc, #332]	; (80163f0 <MotionDI_update+0x970>)
 80162a4:	ee13 2a10 	vmov	r2, s6
 80162a8:	ed93 7a00 	vldr	s14, [r3]
 80162ac:	ee13 3a90 	vmov	r3, s7
 80162b0:	1a9b      	subs	r3, r3, r2
 80162b2:	ee07 3a90 	vmov	s15, r3
 80162b6:	ee2c 7a07 	vmul.f32	s14, s24, s14
 80162ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80162be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c6:	f101 846e 	bmi.w	8017ba6 <MotionDI_update+0x2126>
 80162ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80162cc:	1aca      	subs	r2, r1, r3
 80162ce:	ee07 2a10 	vmov	s14, r2
 80162d2:	ee07 3a90 	vmov	s15, r3
 80162d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80162da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162de:	eec9 6a87 	vdiv.f32	s13, s19, s14
 80162e2:	ee82 7aa7 	vdiv.f32	s14, s5, s15
 80162e6:	ee77 7a66 	vsub.f32	s15, s14, s13
 80162ea:	eef0 7ae7 	vabs.f32	s15, s15
 80162ee:	eef4 cae7 	vcmpe.f32	s25, s15
 80162f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f6:	f101 8456 	bmi.w	8017ba6 <MotionDI_update+0x2126>
 80162fa:	ee7d 7a4c 	vsub.f32	s15, s26, s24
 80162fe:	eef0 7ae7 	vabs.f32	s15, s15
 8016302:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016306:	eeb4 cae7 	vcmpe.f32	s24, s15
 801630a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801630e:	f101 844a 	bmi.w	8017ba6 <MotionDI_update+0x2126>
 8016312:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8016316:	eddf 7a37 	vldr	s15, [pc, #220]	; 80163f4 <MotionDI_update+0x974>
 801631a:	ee07 3a10 	vmov	s14, r3
 801631e:	eeb8 9a47 	vcvt.f32.u32	s18, s14
 8016322:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 8016326:	ee69 7a27 	vmul.f32	s15, s18, s15
 801632a:	f50d 7a03 	add.w	sl, sp, #524	; 0x20c
 801632e:	ee17 0a90 	vmov	r0, s15
 8016332:	f7ea f8ad 	bl	8000490 <__aeabi_f2d>
 8016336:	ec41 0b10 	vmov	d0, r0, r1
 801633a:	f003 f985 	bl	8019648 <exp>
 801633e:	ec51 0b10 	vmov	r0, r1, d0
 8016342:	f7ea fbf5 	bl	8000b30 <__aeabi_d2f>
 8016346:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80163f8 <MotionDI_update+0x978>
 801634a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801634c:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
 8016350:	eec7 7a09 	vdiv.f32	s15, s14, s18
 8016354:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8016358:	0052      	lsls	r2, r2, #1
 801635a:	1f93      	subs	r3, r2, #6
 801635c:	4453      	add	r3, sl
 801635e:	3a0c      	subs	r2, #12
 8016360:	9318      	str	r3, [sp, #96]	; 0x60
 8016362:	eb0a 0302 	add.w	r3, sl, r2
 8016366:	931c      	str	r3, [sp, #112]	; 0x70
 8016368:	b20b      	sxth	r3, r1
 801636a:	9324      	str	r3, [sp, #144]	; 0x90
 801636c:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8016370:	971d      	str	r7, [sp, #116]	; 0x74
 8016372:	2303      	movs	r3, #3
 8016374:	ee09 0a90 	vmov	s19, r0
 8016378:	ee0a 0a90 	vmov	s21, r0
 801637c:	ee7a 6a69 	vsub.f32	s13, s20, s19
 8016380:	ee39 7aca 	vsub.f32	s14, s19, s20
 8016384:	eed7 aaa6 	vfnms.f32	s21, s15, s13
 8016388:	931f      	str	r3, [sp, #124]	; 0x7c
 801638a:	46c4      	mov	ip, r8
 801638c:	eea7 aa87 	vfma.f32	s20, s15, s14
 8016390:	9527      	str	r5, [sp, #156]	; 0x9c
 8016392:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 8016396:	eef0 ea6d 	vmov.f32	s29, s27
 801639a:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 801639e:	eef0 da4e 	vmov.f32	s27, s28
 80163a2:	eeb0 9a4f 	vmov.f32	s18, s30
 80163a6:	465a      	mov	r2, fp
 80163a8:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
 80163ac:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 80163b0:	f9b2 1012 	ldrsh.w	r1, [r2, #18]
 80163b4:	ee1f 2a90 	vmov	r2, s31
 80163b8:	4402      	add	r2, r0
 80163ba:	ee00 2a10 	vmov	s0, r2
 80163be:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80163c0:	441a      	add	r2, r3
 80163c2:	4663      	mov	r3, ip
 80163c4:	440b      	add	r3, r1
 80163c6:	ee0f 2a10 	vmov	s30, r2
 80163ca:	ee0e 3a10 	vmov	s28, r3
 80163ce:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80163d2:	eeb8 facf 	vcvt.f32.s32	s30, s30
 80163d6:	eeb8 eace 	vcvt.f32.s32	s28, s28
 80163da:	f04f 0800 	mov.w	r8, #0
 80163de:	ee20 0a0b 	vmul.f32	s0, s0, s22
 80163e2:	ee2f fa0b 	vmul.f32	s30, s30, s22
 80163e6:	ee2e ea0b 	vmul.f32	s28, s28, s22
 80163ea:	4647      	mov	r7, r8
 80163ec:	e020      	b.n	8016430 <MotionDI_update+0x9b0>
 80163ee:	bf00      	nop
 80163f0:	20002510 	.word	0x20002510
 80163f4:	bdd5e54c 	.word	0xbdd5e54c
 80163f8:	41193238 	.word	0x41193238
 80163fc:	f93a 0013 	ldrsh.w	r0, [sl, r3, lsl #1]
 8016400:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8016404:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8016408:	ee07 0a90 	vmov	s15, r0
 801640c:	eeb0 0a6e 	vmov.f32	s0, s29
 8016410:	eef8 eae7 	vcvt.f32.s32	s29, s15
 8016414:	ee07 1a90 	vmov	s15, r1
 8016418:	eeb0 fa6d 	vmov.f32	s30, s27
 801641c:	eef8 dae7 	vcvt.f32.s32	s27, s15
 8016420:	ee07 3a90 	vmov	s15, r3
 8016424:	eeb0 ea49 	vmov.f32	s28, s18
 8016428:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 801642c:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8016430:	4447      	add	r7, r8
 8016432:	007d      	lsls	r5, r7, #1
 8016434:	3506      	adds	r5, #6
 8016436:	ee6e eaaa 	vmul.f32	s29, s29, s21
 801643a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801643e:	eee9 ea80 	vfma.f32	s29, s19, s0
 8016442:	4455      	add	r5, sl
 8016444:	f108 0801 	add.w	r8, r8, #1
 8016448:	ee07 3a90 	vmov	s15, r3
 801644c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016450:	ee6d daaa 	vmul.f32	s27, s27, s21
 8016454:	eeea ea27 	vfma.f32	s29, s20, s15
 8016458:	f003 f82a 	bl	80194b0 <roundf>
 801645c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016460:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016464:	ee07 3a90 	vmov	s15, r3
 8016468:	eee9 da8f 	vfma.f32	s27, s19, s30
 801646c:	fa0f f888 	sxth.w	r8, r8
 8016470:	ee17 3a10 	vmov	r3, s14
 8016474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016478:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
 801647c:	eeb0 0a4f 	vmov.f32	s0, s30
 8016480:	eeea da27 	vfma.f32	s27, s20, s15
 8016484:	f003 f814 	bl	80194b0 <roundf>
 8016488:	ee29 9a2a 	vmul.f32	s18, s18, s21
 801648c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016490:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016494:	ee07 3a90 	vmov	s15, r3
 8016498:	eea9 9a8e 	vfma.f32	s18, s19, s28
 801649c:	eb0a 0747 	add.w	r7, sl, r7, lsl #1
 80164a0:	ee17 3a10 	vmov	r3, s14
 80164a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164a8:	807b      	strh	r3, [r7, #2]
 80164aa:	eeb0 0a4e 	vmov.f32	s0, s28
 80164ae:	eeaa 9a27 	vfma.f32	s18, s20, s15
 80164b2:	f002 fffd 	bl	80194b0 <roundf>
 80164b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80164ba:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80164be:	ee10 1a10 	vmov	r1, s0
 80164c2:	45c1      	cmp	r9, r8
 80164c4:	eb0a 0243 	add.w	r2, sl, r3, lsl #1
 80164c8:	80b9      	strh	r1, [r7, #4]
 80164ca:	dc97      	bgt.n	80163fc <MotionDI_update+0x97c>
 80164cc:	eeb0 0a6e 	vmov.f32	s0, s29
 80164d0:	f002 ffee 	bl	80194b0 <roundf>
 80164d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80164d8:	eeb0 0a6d 	vmov.f32	s0, s27
 80164dc:	ee17 3a90 	vmov	r3, s15
 80164e0:	b21f      	sxth	r7, r3
 80164e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80164e4:	801f      	strh	r7, [r3, #0]
 80164e6:	f002 ffe3 	bl	80194b0 <roundf>
 80164ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80164ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80164f0:	ee17 1a90 	vmov	r1, s15
 80164f4:	b20d      	sxth	r5, r1
 80164f6:	eeb0 0a49 	vmov.f32	s0, s18
 80164fa:	8055      	strh	r5, [r2, #2]
 80164fc:	f002 ffd8 	bl	80194b0 <roundf>
 8016500:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016504:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016506:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016508:	f9b3 1000 	ldrsh.w	r1, [r3]
 801650c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016510:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8016514:	ee10 ca10 	vmov	ip, s0
 8016518:	fa0f f38c 	sxth.w	r3, ip
 801651c:	8083      	strh	r3, [r0, #4]
 801651e:	19c8      	adds	r0, r1, r7
 8016520:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016522:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8016526:	442a      	add	r2, r5
 8016528:	18cb      	adds	r3, r1, r3
 801652a:	ee0e 0a10 	vmov	s28, r0
 801652e:	ee0d 2a90 	vmov	s27, r2
 8016532:	ee09 3a10 	vmov	s18, r3
 8016536:	eeb8 eace 	vcvt.f32.s32	s28, s28
 801653a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801653e:	eef8 daed 	vcvt.f32.s32	s27, s27
 8016542:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8016546:	ee2e ea0b 	vmul.f32	s28, s28, s22
 801654a:	ee6d da8b 	vmul.f32	s27, s27, s22
 801654e:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 8016552:	006d      	lsls	r5, r5, #1
 8016554:	f1a5 070c 	sub.w	r7, r5, #12
 8016558:	3d06      	subs	r5, #6
 801655a:	f93a 3007 	ldrsh.w	r3, [sl, r7]
 801655e:	ee07 3a90 	vmov	s15, r3
 8016562:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8016566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801656a:	ee07 3a10 	vmov	s14, r3
 801656e:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8016572:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016576:	4457      	add	r7, sl
 8016578:	eeea 7a87 	vfma.f32	s15, s21, s14
 801657c:	eb0a 0b05 	add.w	fp, sl, r5
 8016580:	f108 38ff 	add.w	r8, r8, #4294967295
 8016584:	eeb0 0a4e 	vmov.f32	s0, s28
 8016588:	eee9 7a8e 	vfma.f32	s15, s19, s28
 801658c:	fa0f f888 	sxth.w	r8, r8
 8016590:	eeb0 ea67 	vmov.f32	s28, s15
 8016594:	f002 ff8c 	bl	80194b0 <roundf>
 8016598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801659c:	ee07 3a90 	vmov	s15, r3
 80165a0:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 80165a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165a8:	ee07 3a10 	vmov	s14, r3
 80165ac:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80165b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80165b8:	eeea 7a87 	vfma.f32	s15, s21, s14
 80165bc:	ee10 3a10 	vmov	r3, s0
 80165c0:	eee9 7aad 	vfma.f32	s15, s19, s27
 80165c4:	f82a 3005 	strh.w	r3, [sl, r5]
 80165c8:	eeb0 0a6d 	vmov.f32	s0, s27
 80165cc:	eef0 da67 	vmov.f32	s27, s15
 80165d0:	f002 ff6e 	bl	80194b0 <roundf>
 80165d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80165d8:	ee07 3a90 	vmov	s15, r3
 80165dc:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
 80165e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165e4:	ee06 3a90 	vmov	s13, r3
 80165e8:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80165ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80165f0:	eeb0 7a40 	vmov.f32	s14, s0
 80165f4:	eeea 7aa6 	vfma.f32	s15, s21, s13
 80165f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80165fc:	eee9 7a89 	vfma.f32	s15, s19, s18
 8016600:	ee17 3a10 	vmov	r3, s14
 8016604:	eeb0 0a49 	vmov.f32	s0, s18
 8016608:	f8ab 3002 	strh.w	r3, [fp, #2]
 801660c:	eeb0 9a67 	vmov.f32	s18, s15
 8016610:	f002 ff4e 	bl	80194b0 <roundf>
 8016614:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016618:	f1b8 0f01 	cmp.w	r8, #1
 801661c:	ee10 3a10 	vmov	r3, s0
 8016620:	f8ab 3004 	strh.w	r3, [fp, #4]
 8016624:	dc93      	bgt.n	801654e <MotionDI_update+0xace>
 8016626:	eeb0 0a4e 	vmov.f32	s0, s28
 801662a:	f002 ff41 	bl	80194b0 <roundf>
 801662e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016632:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8016634:	ee17 3a90 	vmov	r3, s15
 8016638:	b21f      	sxth	r7, r3
 801663a:	eeb0 0a6d 	vmov.f32	s0, s27
 801663e:	812f      	strh	r7, [r5, #8]
 8016640:	f002 ff36 	bl	80194b0 <roundf>
 8016644:	eebd fac0 	vcvt.s32.f32	s30, s0
 8016648:	eeb0 0a49 	vmov.f32	s0, s18
 801664c:	ee1f 3a10 	vmov	r3, s30
 8016650:	b21a      	sxth	r2, r3
 8016652:	816a      	strh	r2, [r5, #10]
 8016654:	921d      	str	r2, [sp, #116]	; 0x74
 8016656:	f002 ff2b 	bl	80194b0 <roundf>
 801665a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801665c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016660:	3b01      	subs	r3, #1
 8016662:	b29b      	uxth	r3, r3
 8016664:	461a      	mov	r2, r3
 8016666:	931f      	str	r3, [sp, #124]	; 0x7c
 8016668:	ee10 3a10 	vmov	r3, s0
 801666c:	b21b      	sxth	r3, r3
 801666e:	ee0f 7a90 	vmov	s31, r7
 8016672:	469c      	mov	ip, r3
 8016674:	81ab      	strh	r3, [r5, #12]
 8016676:	2a00      	cmp	r2, #0
 8016678:	f001 82b5 	beq.w	8017be6 <MotionDI_update+0x2166>
 801667c:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 8016680:	eef8 dae7 	vcvt.f32.s32	s27, s15
 8016684:	ee07 3a90 	vmov	s15, r3
 8016688:	eef8 eaef 	vcvt.f32.s32	s29, s31
 801668c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8016690:	462a      	mov	r2, r5
 8016692:	e689      	b.n	80163a8 <MotionDI_update+0x928>
 8016694:	f894 36b8 	ldrb.w	r3, [r4, #1720]	; 0x6b8
 8016698:	2b03      	cmp	r3, #3
 801669a:	f43f aa21 	beq.w	8015ae0 <MotionDI_update+0x60>
 801669e:	462a      	mov	r2, r5
 80166a0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80166a2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80166a6:	f8cb 1000 	str.w	r1, [fp]
 80166aa:	6851      	ldr	r1, [r2, #4]
 80166ac:	6892      	ldr	r2, [r2, #8]
 80166ae:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80166b0:	edd4 2a23 	vldr	s5, [r4, #140]	; 0x8c
 80166b4:	ed94 2a24 	vldr	s4, [r4, #144]	; 0x90
 80166b8:	edc6 2a00 	vstr	s5, [r6]
 80166bc:	ab82      	add	r3, sp, #520	; 0x208
 80166be:	c307      	stmia	r3!, {r0, r1, r2}
 80166c0:	462e      	mov	r6, r5
 80166c2:	edd4 1a25 	vldr	s3, [r4, #148]	; 0x94
 80166c6:	f856 0f14 	ldr.w	r0, [r6, #20]!
 80166ca:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 80166ce:	6871      	ldr	r1, [r6, #4]
 80166d0:	68b2      	ldr	r2, [r6, #8]
 80166d2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80166d4:	ed86 2a01 	vstr	s4, [r6, #4]
 80166d8:	ae85      	add	r6, sp, #532	; 0x214
 80166da:	c607      	stmia	r6!, {r0, r1, r2}
 80166dc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80166de:	edc6 1a02 	vstr	s3, [r6, #8]
 80166e2:	b913      	cbnz	r3, 80166ea <MotionDI_update+0xc6a>
 80166e4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80166e6:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
 80166ea:	eddb 6a01 	vldr	s13, [fp, #4]
 80166ee:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 80166f2:	ed94 8a16 	vldr	s16, [r4, #88]	; 0x58
 80166f6:	ed9b 7a02 	vldr	s14, [fp, #8]
 80166fa:	ed94 3a19 	vldr	s6, [r4, #100]	; 0x64
 80166fe:	eddb 7a03 	vldr	s15, [fp, #12]
 8016702:	edd4 3a1a 	vldr	s7, [r4, #104]	; 0x68
 8016706:	eddb 4a04 	vldr	s9, [fp, #16]
 801670a:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
 801670e:	ed9b 5a05 	vldr	s10, [fp, #20]
 8016712:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8016716:	eddb 5a06 	vldr	s11, [fp, #24]
 801671a:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 801671e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8016722:	ed94 9a15 	vldr	s18, [r4, #84]	; 0x54
 8016726:	edd4 8a17 	vldr	s17, [r4, #92]	; 0x5c
 801672a:	eea6 6aa6 	vfma.f32	s12, s13, s13
 801672e:	3301      	adds	r3, #1
 8016730:	3201      	adds	r2, #1
 8016732:	eea7 3a07 	vfma.f32	s6, s14, s14
 8016736:	b21b      	sxth	r3, r3
 8016738:	b212      	sxth	r2, r2
 801673a:	eeb0 4a46 	vmov.f32	s8, s12
 801673e:	ed94 6a07 	vldr	s12, [r4, #28]
 8016742:	8323      	strh	r3, [r4, #24]
 8016744:	eee7 3aa7 	vfma.f32	s7, s15, s15
 8016748:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801674c:	eea4 1aa4 	vfma.f32	s2, s9, s9
 8016750:	eea5 0a05 	vfma.f32	s0, s10, s10
 8016754:	eee5 0aa5 	vfma.f32	s1, s11, s11
 8016758:	ee37 7a08 	vadd.f32	s14, s14, s16
 801675c:	ee74 4a86 	vadd.f32	s9, s9, s12
 8016760:	ed94 8a08 	vldr	s16, [r4, #32]
 8016764:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016768:	ed84 4a18 	vstr	s8, [r4, #96]	; 0x60
 801676c:	ee76 6a89 	vadd.f32	s13, s13, s18
 8016770:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8016774:	ee35 5a08 	vadd.f32	s10, s10, s16
 8016778:	ee75 5a86 	vadd.f32	s11, s11, s12
 801677c:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 8016780:	ed84 3a19 	vstr	s6, [r4, #100]	; 0x64
 8016784:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 8016788:	edc4 3a1a 	vstr	s7, [r4, #104]	; 0x68
 801678c:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 8016790:	ed84 1a0a 	vstr	s2, [r4, #40]	; 0x28
 8016794:	edc4 4a07 	vstr	s9, [r4, #28]
 8016798:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
 801679c:	ed84 5a08 	vstr	s10, [r4, #32]
 80167a0:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
 80167a4:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 80167a8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80167ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80167ae:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80167b2:	4288      	cmp	r0, r1
 80167b4:	f4ff a994 	bcc.w	8015ae0 <MotionDI_update+0x60>
 80167b8:	2a00      	cmp	r2, #0
 80167ba:	f341 81d1 	ble.w	8017b60 <MotionDI_update+0x20e0>
 80167be:	ee06 2a10 	vmov	s12, r2
 80167c2:	eeb8 8ac6 	vcvt.f32.s32	s16, s12
 80167c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80167ca:	ee88 6a88 	vdiv.f32	s12, s17, s16
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	edd4 9a1d 	vldr	s19, [r4, #116]	; 0x74
 80167d4:	ee26 3a03 	vmul.f32	s6, s12, s6
 80167d8:	ee63 3a86 	vmul.f32	s7, s7, s12
 80167dc:	ee26 7a07 	vmul.f32	s14, s12, s14
 80167e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80167e4:	ee66 6a26 	vmul.f32	s13, s12, s13
 80167e8:	ee33 9a83 	vadd.f32	s18, s7, s6
 80167ec:	ee26 6a04 	vmul.f32	s12, s12, s8
 80167f0:	ed94 4a1e 	vldr	s8, [r4, #120]	; 0x78
 80167f4:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 80167f8:	eea7 9a47 	vfms.f32	s18, s14, s14
 80167fc:	ee77 9a69 	vsub.f32	s19, s14, s19
 8016800:	ee37 4ac4 	vsub.f32	s8, s15, s8
 8016804:	eef0 9ae9 	vabs.f32	s19, s19
 8016808:	eeb0 4ac4 	vabs.f32	s8, s8
 801680c:	ee34 4a29 	vadd.f32	s8, s8, s19
 8016810:	edd4 9a1c 	vldr	s19, [r4, #112]	; 0x70
 8016814:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 8016818:	eea6 6ae6 	vfms.f32	s12, s13, s13
 801681c:	eea7 9ae7 	vfms.f32	s18, s15, s15
 8016820:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8016824:	ee36 6a09 	vadd.f32	s12, s12, s18
 8016828:	eef0 6ae6 	vabs.f32	s13, s13
 801682c:	ee74 6a26 	vadd.f32	s13, s8, s13
 8016830:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 8016834:	ed84 3a19 	vstr	s6, [r4, #100]	; 0x64
 8016838:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 801683c:	edc4 3a1a 	vstr	s7, [r4, #104]	; 0x68
 8016840:	f341 81c5 	ble.w	8017bce <MotionDI_update+0x214e>
 8016844:	ee07 3a90 	vmov	s15, r3
 8016848:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 801684c:	ed94 4a0e 	vldr	s8, [r4, #56]	; 0x38
 8016850:	ed94 3a0f 	vldr	s6, [r4, #60]	; 0x3c
 8016854:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8016858:	6921      	ldr	r1, [r4, #16]
 801685a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801685e:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8016862:	ee27 0a00 	vmul.f32	s0, s14, s0
 8016866:	ee60 0a87 	vmul.f32	s1, s1, s14
 801686a:	ee27 5a05 	vmul.f32	s10, s14, s10
 801686e:	ee70 3a80 	vadd.f32	s7, s1, s0
 8016872:	ee65 5a87 	vmul.f32	s11, s11, s14
 8016876:	eee5 3a45 	vfms.f32	s7, s10, s10
 801687a:	ee64 4a87 	vmul.f32	s9, s9, s14
 801687e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8016882:	ee35 3a43 	vsub.f32	s6, s10, s6
 8016886:	ee34 7ac4 	vsub.f32	s14, s9, s8
 801688a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801688e:	eeb0 4a41 	vmov.f32	s8, s2
 8016892:	eee5 3ae5 	vfms.f32	s7, s11, s11
 8016896:	eea4 4ae4 	vfms.f32	s8, s9, s9
 801689a:	eeb0 3ac3 	vabs.f32	s6, s6
 801689e:	eef0 7ae7 	vabs.f32	s15, s15
 80168a2:	ee77 7a83 	vadd.f32	s15, s15, s6
 80168a6:	eeb0 7ac7 	vabs.f32	s14, s14
 80168aa:	ee74 3a23 	vadd.f32	s7, s8, s7
 80168ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80168b2:	edc4 4a07 	vstr	s9, [r4, #28]
 80168b6:	ed84 1a0a 	vstr	s2, [r4, #40]	; 0x28
 80168ba:	ed84 5a08 	vstr	s10, [r4, #32]
 80168be:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
 80168c2:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
 80168c6:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 80168ca:	f280 845b 	bge.w	8017184 <MotionDI_update+0x1704>
 80168ce:	3b01      	subs	r3, #1
 80168d0:	ee07 3a90 	vmov	s15, r3
 80168d4:	ee69 3a23 	vmul.f32	s7, s18, s7
 80168d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80168dc:	edd4 5a01 	vldr	s11, [r4, #4]
 80168e0:	ee83 5aa7 	vdiv.f32	s10, s7, s15
 80168e4:	eeb4 5ae5 	vcmpe.f32	s10, s11
 80168e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ec:	f140 844a 	bpl.w	8017184 <MotionDI_update+0x1704>
 80168f0:	edd4 7a02 	vldr	s15, [r4, #8]
 80168f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168fc:	bf4c      	ite	mi
 80168fe:	2301      	movmi	r3, #1
 8016900:	2300      	movpl	r3, #0
 8016902:	f000 bc40 	b.w	8017186 <MotionDI_update+0x1706>
 8016906:	ed9f 9a9c 	vldr	s18, [pc, #624]	; 8016b78 <MotionDI_update+0x10f8>
 801690a:	f7ff b943 	b.w	8015b94 <MotionDI_update+0x114>
 801690e:	ad3f      	add	r5, sp, #252	; 0xfc
 8016910:	a846      	add	r0, sp, #280	; 0x118
 8016912:	2300      	movs	r3, #0
 8016914:	4999      	ldr	r1, [pc, #612]	; (8016b7c <MotionDI_update+0x10fc>)
 8016916:	901d      	str	r0, [sp, #116]	; 0x74
 8016918:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801691c:	602b      	str	r3, [r5, #0]
 801691e:	606b      	str	r3, [r5, #4]
 8016920:	60ab      	str	r3, [r5, #8]
 8016922:	af36      	add	r7, sp, #216	; 0xd8
 8016924:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8016928:	edc5 aa03 	vstr	s21, [r5, #12]
 801692c:	951f      	str	r5, [sp, #124]	; 0x7c
 801692e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8016930:	9218      	str	r2, [sp, #96]	; 0x60
 8016932:	4638      	mov	r0, r7
 8016934:	f501 7265 	add.w	r2, r1, #916	; 0x394
 8016938:	602b      	str	r3, [r5, #0]
 801693a:	606b      	str	r3, [r5, #4]
 801693c:	60ab      	str	r3, [r5, #8]
 801693e:	edc5 aa03 	vstr	s21, [r5, #12]
 8016942:	f7f7 ffcb 	bl	800e8dc <rotVect>
 8016946:	4a8e      	ldr	r2, [pc, #568]	; (8016b80 <MotionDI_update+0x1100>)
 8016948:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 801694c:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 8016950:	4650      	mov	r0, sl
 8016952:	f7f7 ffc3 	bl	800e8dc <rotVect>
 8016956:	4a8b      	ldr	r2, [pc, #556]	; (8016b84 <MotionDI_update+0x1104>)
 8016958:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801695c:	4640      	mov	r0, r8
 801695e:	f5a2 715f 	sub.w	r1, r2, #892	; 0x37c
 8016962:	f7f7 ffbb 	bl	800e8dc <rotVect>
 8016966:	4b88      	ldr	r3, [pc, #544]	; (8016b88 <MotionDI_update+0x1108>)
 8016968:	edd7 7a00 	vldr	s15, [r7]
 801696c:	ed97 7a01 	vldr	s14, [r7, #4]
 8016970:	ed9a 8a00 	vldr	s16, [sl]
 8016974:	edda 8a01 	vldr	s17, [sl, #4]
 8016978:	ed98 ba02 	vldr	s22, [r8, #8]
 801697c:	edd8 9a00 	vldr	s19, [r8]
 8016980:	ed98 aa01 	vldr	s20, [r8, #4]
 8016984:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8016988:	edc8 9a01 	vstr	s19, [r8, #4]
 801698c:	eeb1 ca67 	vneg.f32	s24, s15
 8016990:	eef1 ca47 	vneg.f32	s25, s14
 8016994:	eeb1 8a48 	vneg.f32	s16, s16
 8016998:	eef1 8a68 	vneg.f32	s17, s17
 801699c:	eef1 ba4b 	vneg.f32	s23, s22
 80169a0:	ed87 ca01 	vstr	s24, [r7, #4]
 80169a4:	edc7 ca00 	vstr	s25, [r7]
 80169a8:	ed8a 8a01 	vstr	s16, [sl, #4]
 80169ac:	edca 8a00 	vstr	s17, [sl]
 80169b0:	edc8 ba02 	vstr	s23, [r8, #8]
 80169b4:	ed88 aa00 	vstr	s20, [r8]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d057      	beq.n	8016a6c <MotionDI_update+0xfec>
 80169bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80169c0:	ed97 da02 	vldr	s26, [r7, #8]
 80169c4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80169c8:	eeed 7a0d 	vfma.f32	s15, s26, s26
 80169cc:	ee17 0a90 	vmov	r0, s15
 80169d0:	f7e9 fd5e 	bl	8000490 <__aeabi_f2d>
 80169d4:	ec41 0b10 	vmov	d0, r0, r1
 80169d8:	f002 fe7e 	bl	80196d8 <sqrt>
 80169dc:	ec51 0b10 	vmov	r0, r1, d0
 80169e0:	f7ea f8a6 	bl	8000b30 <__aeabi_d2f>
 80169e4:	ee0d 0a90 	vmov	s27, r0
 80169e8:	f7e9 fd52 	bl	8000490 <__aeabi_f2d>
 80169ec:	a360      	add	r3, pc, #384	; (adr r3, 8016b70 <MotionDI_update+0x10f0>)
 80169ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f2:	f7ea f817 	bl	8000a24 <__aeabi_dcmplt>
 80169f6:	b938      	cbnz	r0, 8016a08 <MotionDI_update+0xf88>
 80169f8:	eeca 7aad 	vdiv.f32	s15, s21, s27
 80169fc:	ee6c caa7 	vmul.f32	s25, s25, s15
 8016a00:	ee2c ca27 	vmul.f32	s24, s24, s15
 8016a04:	ee2d da27 	vmul.f32	s26, s26, s15
 8016a08:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8016a0c:	edc7 ca00 	vstr	s25, [r7]
 8016a10:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8016a14:	ed87 ca01 	vstr	s24, [r7, #4]
 8016a18:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8016a1c:	ed87 da02 	vstr	s26, [r7, #8]
 8016a20:	ee17 0a90 	vmov	r0, s15
 8016a24:	f7e9 fd34 	bl	8000490 <__aeabi_f2d>
 8016a28:	ec41 0b10 	vmov	d0, r0, r1
 8016a2c:	f002 fe54 	bl	80196d8 <sqrt>
 8016a30:	ec51 0b10 	vmov	r0, r1, d0
 8016a34:	f7ea f87c 	bl	8000b30 <__aeabi_d2f>
 8016a38:	ee0a 0a90 	vmov	s21, r0
 8016a3c:	f7e9 fd28 	bl	8000490 <__aeabi_f2d>
 8016a40:	a34b      	add	r3, pc, #300	; (adr r3, 8016b70 <MotionDI_update+0x10f0>)
 8016a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a46:	f7e9 ffed 	bl	8000a24 <__aeabi_dcmplt>
 8016a4a:	b948      	cbnz	r0, 8016a60 <MotionDI_update+0xfe0>
 8016a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016a50:	eec7 7a2a 	vdiv.f32	s15, s14, s21
 8016a54:	ee2a aa27 	vmul.f32	s20, s20, s15
 8016a58:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8016a5c:	ee6b baa7 	vmul.f32	s23, s23, s15
 8016a60:	ed88 aa00 	vstr	s20, [r8]
 8016a64:	edc8 9a01 	vstr	s19, [r8, #4]
 8016a68:	edc8 ba02 	vstr	s23, [r8, #8]
 8016a6c:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8016a70:	2a00      	cmp	r2, #0
 8016a72:	f000 81b8 	beq.w	8016de6 <MotionDI_update+0x1366>
 8016a76:	ee07 2a90 	vmov	s15, r2
 8016a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a7e:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8016a82:	ee88 8a27 	vdiv.f32	s16, s16, s15
 8016a86:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8016b98 <MotionDI_update+0x1118>
 8016a8a:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 8016a8e:	3301      	adds	r3, #1
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	fbb3 f1f2 	udiv	r1, r3, r2
 8016a96:	fb02 3311 	mls	r3, r2, r1, r3
 8016a9a:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
 8016a9e:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 8016aa2:	ed9a 7a02 	vldr	s14, [sl, #8]
 8016aa6:	ed98 6a0e 	vldr	s12, [r8, #56]	; 0x38
 8016aaa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016aae:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 8016ab2:	edd8 7a0d 	vldr	s15, [r8, #52]	; 0x34
 8016ab6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016aba:	ee77 8a28 	vadd.f32	s17, s14, s17
 8016abe:	ee37 8a88 	vadd.f32	s16, s15, s16
 8016ac2:	edc8 6a0e 	vstr	s13, [r8, #56]	; 0x38
 8016ac6:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 8016aca:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 8016ace:	2a00      	cmp	r2, #0
 8016ad0:	f040 8587 	bne.w	80175e2 <MotionDI_update+0x1b62>
 8016ad4:	4a2d      	ldr	r2, [pc, #180]	; (8016b8c <MotionDI_update+0x110c>)
 8016ad6:	9220      	str	r2, [sp, #128]	; 0x80
 8016ad8:	f102 0318 	add.w	r3, r2, #24
 8016adc:	9301      	str	r3, [sp, #4]
 8016ade:	4611      	mov	r1, r2
 8016ae0:	f1a2 0360 	sub.w	r3, r2, #96	; 0x60
 8016ae4:	9300      	str	r3, [sp, #0]
 8016ae6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016ae8:	f1a2 0310 	sub.w	r3, r2, #16
 8016aec:	3940      	subs	r1, #64	; 0x40
 8016aee:	3a20      	subs	r2, #32
 8016af0:	f7f8 fee4 	bl	800f8bc <SpacePointGyroPropRedist>
 8016af4:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 8016af8:	2b01      	cmp	r3, #1
 8016afa:	f001 8027 	beq.w	8017b4c <MotionDI_update+0x20cc>
 8016afe:	4b24      	ldr	r3, [pc, #144]	; (8016b90 <MotionDI_update+0x1110>)
 8016b00:	f894 c162 	ldrb.w	ip, [r4, #354]	; 0x162
 8016b04:	f8cd c004 	str.w	ip, [sp, #4]
 8016b08:	f103 020c 	add.w	r2, r3, #12
 8016b0c:	9200      	str	r2, [sp, #0]
 8016b0e:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 8016b12:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 8016b16:	4639      	mov	r1, r7
 8016b18:	f7f9 f930 	bl	800fd7c <output_update>
 8016b1c:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
 8016b20:	2300      	movs	r3, #0
 8016b22:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
 8016b26:	0793      	lsls	r3, r2, #30
 8016b28:	d40a      	bmi.n	8016b40 <MotionDI_update+0x10c0>
 8016b2a:	f894 1144 	ldrb.w	r1, [r4, #324]	; 0x144
 8016b2e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016b30:	fbb1 f3f0 	udiv	r3, r1, r0
 8016b34:	fb00 1613 	mls	r6, r0, r3, r1
 8016b38:	f016 0fff 	tst.w	r6, #255	; 0xff
 8016b3c:	f000 8687 	beq.w	801784e <MotionDI_update+0x1dce>
 8016b40:	4a14      	ldr	r2, [pc, #80]	; (8016b94 <MotionDI_update+0x1114>)
 8016b42:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016b44:	4611      	mov	r1, r2
 8016b46:	f7f8 f8d1 	bl	800ecec <m_qmult_eml>
 8016b4a:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 8016b4e:	2b01      	cmp	r3, #1
 8016b50:	f47f a8fd 	bne.w	8015d4e <MotionDI_update+0x2ce>
 8016b54:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016b56:	edd1 7a08 	vldr	s15, [r1, #32]
 8016b5a:	698a      	ldr	r2, [r1, #24]
 8016b5c:	69cb      	ldr	r3, [r1, #28]
 8016b5e:	618b      	str	r3, [r1, #24]
 8016b60:	eef1 7a67 	vneg.f32	s15, s15
 8016b64:	61ca      	str	r2, [r1, #28]
 8016b66:	edc1 7a08 	vstr	s15, [r1, #32]
 8016b6a:	f7ff b8f0 	b.w	8015d4e <MotionDI_update+0x2ce>
 8016b6e:	bf00      	nop
 8016b70:	a0b5ed8d 	.word	0xa0b5ed8d
 8016b74:	3eb0c6f7 	.word	0x3eb0c6f7
 8016b78:	3c23d70a 	.word	0x3c23d70a
 8016b7c:	200014a0 	.word	0x200014a0
 8016b80:	20001840 	.word	0x20001840
 8016b84:	20001828 	.word	0x20001828
 8016b88:	200010f8 	.word	0x200010f8
 8016b8c:	20001914 	.word	0x20001914
 8016b90:	200019a8 	.word	0x200019a8
 8016b94:	200018c4 	.word	0x200018c4
 8016b98:	2000181c 	.word	0x2000181c
 8016b9c:	ad46      	add	r5, sp, #280	; 0x118
 8016b9e:	951d      	str	r5, [sp, #116]	; 0x74
 8016ba0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8016ba2:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8016ba6:	9218      	str	r2, [sp, #96]	; 0x60
 8016ba8:	af36      	add	r7, sp, #216	; 0xd8
 8016baa:	2300      	movs	r3, #0
 8016bac:	4632      	mov	r2, r6
 8016bae:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8016bb2:	4638      	mov	r0, r7
 8016bb4:	f5a8 712c 	sub.w	r1, r8, #688	; 0x2b0
 8016bb8:	ae3f      	add	r6, sp, #252	; 0xfc
 8016bba:	602b      	str	r3, [r5, #0]
 8016bbc:	606b      	str	r3, [r5, #4]
 8016bbe:	60ab      	str	r3, [r5, #8]
 8016bc0:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8016bc4:	933f      	str	r3, [sp, #252]	; 0xfc
 8016bc6:	9340      	str	r3, [sp, #256]	; 0x100
 8016bc8:	9341      	str	r3, [sp, #260]	; 0x104
 8016bca:	edc5 9a03 	vstr	s19, [r5, #12]
 8016bce:	961f      	str	r6, [sp, #124]	; 0x7c
 8016bd0:	edcd 9a42 	vstr	s19, [sp, #264]	; 0x108
 8016bd4:	f7f7 fe82 	bl	800e8dc <rotVect>
 8016bd8:	f1a8 02ec 	sub.w	r2, r8, #236	; 0xec
 8016bdc:	f5a2 71d6 	sub.w	r1, r2, #428	; 0x1ac
 8016be0:	4650      	mov	r0, sl
 8016be2:	f502 753b 	add.w	r5, r2, #748	; 0x2ec
 8016be6:	f7f7 fe79 	bl	800e8dc <rotVect>
 8016bea:	a83c      	add	r0, sp, #240	; 0xf0
 8016bec:	3a18      	subs	r2, #24
 8016bee:	f2a5 41a4 	subw	r1, r5, #1188	; 0x4a4
 8016bf2:	f7f7 fe73 	bl	800e8dc <rotVect>
 8016bf6:	4b82      	ldr	r3, [pc, #520]	; (8016e00 <MotionDI_update+0x1380>)
 8016bf8:	edd7 7a00 	vldr	s15, [r7]
 8016bfc:	edd7 5a01 	vldr	s11, [r7, #4]
 8016c00:	edda ba00 	vldr	s23, [sl]
 8016c04:	ed9a 7a01 	vldr	s14, [sl, #4]
 8016c08:	ed9d ba3e 	vldr	s22, [sp, #248]	; 0xf8
 8016c0c:	ed9d 8a3c 	vldr	s16, [sp, #240]	; 0xf0
 8016c10:	eddd 8a3d 	vldr	s17, [sp, #244]	; 0xf4
 8016c14:	f893 38e0 	ldrb.w	r3, [r3, #2272]	; 0x8e0
 8016c18:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 8016c1c:	eeb1 aa67 	vneg.f32	s20, s15
 8016c20:	eef1 aa65 	vneg.f32	s21, s11
 8016c24:	eef1 ba6b 	vneg.f32	s23, s23
 8016c28:	eeb1 ca47 	vneg.f32	s24, s14
 8016c2c:	eeb1 da4b 	vneg.f32	s26, s22
 8016c30:	ed87 aa01 	vstr	s20, [r7, #4]
 8016c34:	edc7 aa00 	vstr	s21, [r7]
 8016c38:	edca ba01 	vstr	s23, [sl, #4]
 8016c3c:	ed8a ca00 	vstr	s24, [sl]
 8016c40:	ed8d da3e 	vstr	s26, [sp, #248]	; 0xf8
 8016c44:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d045      	beq.n	8016cd8 <MotionDI_update+0x1258>
 8016c4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016c50:	edd7 ca02 	vldr	s25, [r7, #8]
 8016c54:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8016c58:	eeec 7aac 	vfma.f32	s15, s25, s25
 8016c5c:	ee17 0a90 	vmov	r0, s15
 8016c60:	f7e9 fc16 	bl	8000490 <__aeabi_f2d>
 8016c64:	ec41 0b10 	vmov	d0, r0, r1
 8016c68:	f002 fd36 	bl	80196d8 <sqrt>
 8016c6c:	ec51 0b10 	vmov	r0, r1, d0
 8016c70:	f7e9 ff5e 	bl	8000b30 <__aeabi_d2f>
 8016c74:	ee07 0a90 	vmov	s15, r0
 8016c78:	ee89 6aa7 	vdiv.f32	s12, s19, s15
 8016c7c:	ee68 7a08 	vmul.f32	s15, s16, s16
 8016c80:	ee66 aa2a 	vmul.f32	s21, s12, s21
 8016c84:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8016c88:	ee26 aa0a 	vmul.f32	s20, s12, s20
 8016c8c:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8016c90:	ee26 6a2c 	vmul.f32	s12, s12, s25
 8016c94:	ee17 0a90 	vmov	r0, s15
 8016c98:	ed87 6a02 	vstr	s12, [r7, #8]
 8016c9c:	edc7 aa00 	vstr	s21, [r7]
 8016ca0:	ed87 aa01 	vstr	s20, [r7, #4]
 8016ca4:	f7e9 fbf4 	bl	8000490 <__aeabi_f2d>
 8016ca8:	ec41 0b10 	vmov	d0, r0, r1
 8016cac:	f002 fd14 	bl	80196d8 <sqrt>
 8016cb0:	ec51 0b10 	vmov	r0, r1, d0
 8016cb4:	f7e9 ff3c 	bl	8000b30 <__aeabi_d2f>
 8016cb8:	ee07 0a90 	vmov	s15, r0
 8016cbc:	eec9 6aa7 	vdiv.f32	s13, s19, s15
 8016cc0:	ee66 8aa8 	vmul.f32	s17, s13, s17
 8016cc4:	ee26 8a88 	vmul.f32	s16, s13, s16
 8016cc8:	ee66 6a8d 	vmul.f32	s13, s13, s26
 8016ccc:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 8016cd0:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 8016cd4:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 8016cd8:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8016cdc:	2a00      	cmp	r2, #0
 8016cde:	f000 8088 	beq.w	8016df2 <MotionDI_update+0x1372>
 8016ce2:	ee07 2a90 	vmov	s15, r2
 8016ce6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8016cea:	ee8c ca06 	vdiv.f32	s24, s24, s12
 8016cee:	eecb ba86 	vdiv.f32	s23, s23, s12
 8016cf2:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8016cf6:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8016d02:	fb02 3310 	mls	r3, r2, r0, r3
 8016d06:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
 8016d0a:	ed9a 5a02 	vldr	s10, [sl, #8]
 8016d0e:	edd4 5a9f 	vldr	s11, [r4, #636]	; 0x27c
 8016d12:	ed94 7a9d 	vldr	s14, [r4, #628]	; 0x274
 8016d16:	edd4 7a9e 	vldr	s15, [r4, #632]	; 0x278
 8016d1a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8016d1e:	ee37 7a0c 	vadd.f32	s14, s14, s24
 8016d22:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016d26:	ee77 7aab 	vadd.f32	s15, s15, s23
 8016d2a:	edc4 6a9f 	vstr	s13, [r4, #636]	; 0x27c
 8016d2e:	ed84 7a9d 	vstr	s14, [r4, #628]	; 0x274
 8016d32:	edc4 7a9e 	vstr	s15, [r4, #632]	; 0x278
 8016d36:	2900      	cmp	r1, #0
 8016d38:	f040 8446 	bne.w	80175c8 <MotionDI_update+0x1b48>
 8016d3c:	4931      	ldr	r1, [pc, #196]	; (8016e04 <MotionDI_update+0x1384>)
 8016d3e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016d40:	f101 0350 	add.w	r3, r1, #80	; 0x50
 8016d44:	e9cd 1800 	strd	r1, r8, [sp]
 8016d48:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8016d4c:	3120      	adds	r1, #32
 8016d4e:	f7f8 fdb5 	bl	800f8bc <SpacePointGyroPropRedist>
 8016d52:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8016d56:	2b01      	cmp	r3, #1
 8016d58:	f000 86eb 	beq.w	8017b32 <MotionDI_update+0x20b2>
 8016d5c:	4b2a      	ldr	r3, [pc, #168]	; (8016e08 <MotionDI_update+0x1388>)
 8016d5e:	f894 6126 	ldrb.w	r6, [r4, #294]	; 0x126
 8016d62:	9601      	str	r6, [sp, #4]
 8016d64:	f103 020c 	add.w	r2, r3, #12
 8016d68:	9200      	str	r2, [sp, #0]
 8016d6a:	4639      	mov	r1, r7
 8016d6c:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 8016d70:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 8016d74:	f7f9 f802 	bl	800fd7c <output_update>
 8016d78:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	0791      	lsls	r1, r2, #30
 8016d80:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
 8016d84:	d40a      	bmi.n	8016d9c <MotionDI_update+0x131c>
 8016d86:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 8016d8a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016d8c:	fbb1 f3f0 	udiv	r3, r1, r0
 8016d90:	fb00 1313 	mls	r3, r0, r3, r1
 8016d94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016d98:	f000 860e 	beq.w	80179b8 <MotionDI_update+0x1f38>
 8016d9c:	4a1b      	ldr	r2, [pc, #108]	; (8016e0c <MotionDI_update+0x138c>)
 8016d9e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016da0:	4611      	mov	r1, r2
 8016da2:	f7f7 ffa3 	bl	800ecec <m_qmult_eml>
 8016da6:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	f47e afcb 	bne.w	8015d46 <MotionDI_update+0x2c6>
 8016db0:	edd4 7ad7 	vldr	s15, [r4, #860]	; 0x35c
 8016db4:	f8d4 2354 	ldr.w	r2, [r4, #852]	; 0x354
 8016db8:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 8016dbc:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 8016dc0:	eef1 7a67 	vneg.f32	s15, s15
 8016dc4:	f8c4 2358 	str.w	r2, [r4, #856]	; 0x358
 8016dc8:	edc4 7ad7 	vstr	s15, [r4, #860]	; 0x35c
 8016dcc:	f7fe bfbb 	b.w	8015d46 <MotionDI_update+0x2c6>
 8016dd0:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 8016dd4:	931e      	str	r3, [sp, #120]	; 0x78
 8016dd6:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 8016dda:	931d      	str	r3, [sp, #116]	; 0x74
 8016ddc:	f7fe bf25 	b.w	8015c2a <MotionDI_update+0x1aa>
 8016de0:	46be      	mov	lr, r7
 8016de2:	f7ff b86e 	b.w	8015ec2 <MotionDI_update+0x442>
 8016de6:	2201      	movs	r2, #1
 8016de8:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
 8016dec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016df0:	e649      	b.n	8016a86 <MotionDI_update+0x1006>
 8016df2:	2201      	movs	r2, #1
 8016df4:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
 8016df8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016dfc:	e779      	b.n	8016cf2 <MotionDI_update+0x1272>
 8016dfe:	bf00      	nop
 8016e00:	20000000 	.word	0x20000000
 8016e04:	200016b4 	.word	0x200016b4
 8016e08:	200017a8 	.word	0x200017a8
 8016e0c:	200016c4 	.word	0x200016c4
 8016e10:	4ad2      	ldr	r2, [pc, #840]	; (801715c <MotionDI_update+0x16dc>)
 8016e12:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8016e16:	2300      	movs	r3, #0
 8016e18:	f5a2 7165 	sub.w	r1, r2, #916	; 0x394
 8016e1c:	a83c      	add	r0, sp, #240	; 0xf0
 8016e1e:	e9ca 3300 	strd	r3, r3, [sl]
 8016e22:	f8ca 3008 	str.w	r3, [sl, #8]
 8016e26:	f7f7 fd59 	bl	800e8dc <rotVect>
 8016e2a:	4acd      	ldr	r2, [pc, #820]	; (8017160 <MotionDI_update+0x16e0>)
 8016e2c:	ab3f      	add	r3, sp, #252	; 0xfc
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 8016e34:	931f      	str	r3, [sp, #124]	; 0x7c
 8016e36:	f7f7 fd51 	bl	800e8dc <rotVect>
 8016e3a:	4bca      	ldr	r3, [pc, #808]	; (8017164 <MotionDI_update+0x16e4>)
 8016e3c:	eddd 7a3c 	vldr	s15, [sp, #240]	; 0xf0
 8016e40:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8016e44:	ed90 8a00 	vldr	s16, [r0]
 8016e48:	edd0 8a01 	vldr	s17, [r0, #4]
 8016e4c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8016e50:	eef1 9a67 	vneg.f32	s19, s15
 8016e54:	eeb1 aa47 	vneg.f32	s20, s14
 8016e58:	eeb1 8a48 	vneg.f32	s16, s16
 8016e5c:	eef1 8a68 	vneg.f32	s17, s17
 8016e60:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 8016e64:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 8016e68:	ed80 8a01 	vstr	s16, [r0, #4]
 8016e6c:	edc0 8a00 	vstr	s17, [r0]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	f040 83d6 	bne.w	8017622 <MotionDI_update+0x1ba2>
 8016e76:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 8016e7a:	ed9f babb 	vldr	s22, [pc, #748]	; 8017168 <MotionDI_update+0x16e8>
 8016e7e:	4dbb      	ldr	r5, [pc, #748]	; (801716c <MotionDI_update+0x16ec>)
 8016e80:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8016e84:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8017180 <MotionDI_update+0x1700>
 8016e88:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8016e8c:	f8d8 1078 	ldr.w	r1, [r8, #120]	; 0x78
 8016e90:	f8d8 0080 	ldr.w	r0, [r8, #128]	; 0x80
 8016e94:	f8d8 c084 	ldr.w	ip, [r8, #132]	; 0x84
 8016e98:	f8c8 1088 	str.w	r1, [r8, #136]	; 0x88
 8016e9c:	ee00 2a10 	vmov	s0, r2
 8016ea0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8016ea4:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 8016ea8:	f8c8 208c 	str.w	r2, [r8, #140]	; 0x8c
 8016eac:	ee20 0a09 	vmul.f32	s0, s0, s18
 8016eb0:	f043 0302 	orr.w	r3, r3, #2
 8016eb4:	f083 0301 	eor.w	r3, r3, #1
 8016eb8:	4641      	mov	r1, r8
 8016eba:	22f8      	movs	r2, #248	; 0xf8
 8016ebc:	f8c8 0090 	str.w	r0, [r8, #144]	; 0x90
 8016ec0:	4658      	mov	r0, fp
 8016ec2:	ed8d 0a20 	vstr	s0, [sp, #128]	; 0x80
 8016ec6:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8016eca:	f8c8 c094 	str.w	ip, [r8, #148]	; 0x94
 8016ece:	f002 fa13 	bl	80192f8 <memcpy>
 8016ed2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016ed4:	f8cb 500c 	str.w	r5, [fp, #12]
 8016ed8:	6892      	ldr	r2, [r2, #8]
 8016eda:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
 8016ede:	2300      	movs	r3, #0
 8016ee0:	f508 7ef9 	add.w	lr, r8, #498	; 0x1f2
 8016ee4:	f208 1cf1 	addw	ip, r8, #497	; 0x1f1
 8016ee8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8016eea:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 8016eee:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8016ef2:	f108 02c8 	add.w	r2, r8, #200	; 0xc8
 8016ef6:	f508 71f8 	add.w	r1, r8, #496	; 0x1f0
 8016efa:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8016efe:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 8016f02:	ed8b aa06 	vstr	s20, [fp, #24]
 8016f06:	edcb 9a07 	vstr	s19, [fp, #28]
 8016f0a:	edcb aa08 	vstr	s21, [fp, #32]
 8016f0e:	ed8b ba05 	vstr	s22, [fp, #20]
 8016f12:	edcb 8a09 	vstr	s17, [fp, #36]	; 0x24
 8016f16:	ed8b 8a0a 	vstr	s16, [fp, #40]	; 0x28
 8016f1a:	4f95      	ldr	r7, [pc, #596]	; (8017170 <MotionDI_update+0x16f0>)
 8016f1c:	9510      	str	r5, [sp, #64]	; 0x40
 8016f1e:	e9cd ce13 	strd	ip, lr, [sp, #76]	; 0x4c
 8016f22:	920f      	str	r2, [sp, #60]	; 0x3c
 8016f24:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8016f28:	9112      	str	r1, [sp, #72]	; 0x48
 8016f2a:	f8cb 3010 	str.w	r3, [fp, #16]
 8016f2e:	ab46      	add	r3, sp, #280	; 0x118
 8016f30:	9715      	str	r7, [sp, #84]	; 0x54
 8016f32:	930e      	str	r3, [sp, #56]	; 0x38
 8016f34:	f7e9 faac 	bl	8000490 <__aeabi_f2d>
 8016f38:	edd4 3a56 	vldr	s7, [r4, #344]	; 0x158
 8016f3c:	ed94 3a55 	vldr	s6, [r4, #340]	; 0x154
 8016f40:	edd4 2a54 	vldr	s5, [r4, #336]	; 0x150
 8016f44:	edcd 3a1f 	vstr	s7, [sp, #124]	; 0x7c
 8016f48:	4602      	mov	r2, r0
 8016f4a:	460b      	mov	r3, r1
 8016f4c:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
 8016f50:	ed8d 3a1a 	vstr	s6, [sp, #104]	; 0x68
 8016f54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016f58:	edcd 2a17 	vstr	s5, [sp, #92]	; 0x5c
 8016f5c:	f7e9 fa76 	bl	800044c <__aeabi_ui2d>
 8016f60:	460b      	mov	r3, r1
 8016f62:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8016f66:	9108      	str	r1, [sp, #32]
 8016f68:	f894 113f 	ldrb.w	r1, [r4, #319]	; 0x13f
 8016f6c:	9107      	str	r1, [sp, #28]
 8016f6e:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
 8016f72:	9106      	str	r1, [sp, #24]
 8016f74:	f894 113d 	ldrb.w	r1, [r4, #317]	; 0x13d
 8016f78:	9105      	str	r1, [sp, #20]
 8016f7a:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 8016f7e:	9104      	str	r1, [sp, #16]
 8016f80:	4602      	mov	r2, r0
 8016f82:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 8016f86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016f8a:	f7e9 fa81 	bl	8000490 <__aeabi_f2d>
 8016f8e:	ed94 2a4d 	vldr	s4, [r4, #308]	; 0x134
 8016f92:	edd4 1a4c 	vldr	s3, [r4, #304]	; 0x130
 8016f96:	ed9d 3a1a 	vldr	s6, [sp, #104]	; 0x68
 8016f9a:	eddd 2a17 	vldr	s5, [sp, #92]	; 0x5c
 8016f9e:	ed9d 0a20 	vldr	s0, [sp, #128]	; 0x80
 8016fa2:	eddd 3a1f 	vldr	s7, [sp, #124]	; 0x7c
 8016fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016faa:	ad90      	add	r5, sp, #576	; 0x240
 8016fac:	f50d 7c1c 	add.w	ip, sp, #624	; 0x270
 8016fb0:	a984      	add	r1, sp, #528	; 0x210
 8016fb2:	ed94 1a4b 	vldr	s2, [r4, #300]	; 0x12c
 8016fb6:	edd4 0a4a 	vldr	s1, [r4, #296]	; 0x128
 8016fba:	9517      	str	r5, [sp, #92]	; 0x5c
 8016fbc:	e9cd 5c00 	strd	r5, ip, [sp]
 8016fc0:	ab8d      	add	r3, sp, #564	; 0x234
 8016fc2:	aa87      	add	r2, sp, #540	; 0x21c
 8016fc4:	a8a3      	add	r0, sp, #652	; 0x28c
 8016fc6:	911a      	str	r1, [sp, #104]	; 0x68
 8016fc8:	f7fd ffbc 	bl	8014f44 <SpacePointAlgorithm.isra.0>
 8016fcc:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
 8016fd0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8016fd4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8016fd8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8016fdc:	f8c8 01f4 	str.w	r0, [r8, #500]	; 0x1f4
 8016fe0:	f108 05f8 	add.w	r5, r8, #248	; 0xf8
 8016fe4:	2b01      	cmp	r3, #1
 8016fe6:	f8c8 11f8 	str.w	r1, [r8, #504]	; 0x1f8
 8016fea:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
 8016fee:	9f46      	ldr	r7, [sp, #280]	; 0x118
 8016ff0:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8016ff2:	9948      	ldr	r1, [sp, #288]	; 0x120
 8016ff4:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8016ff6:	9520      	str	r5, [sp, #128]	; 0x80
 8016ff8:	d115      	bne.n	8017026 <MotionDI_update+0x15a6>
 8016ffa:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
 8016ffe:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 8017002:	4a58      	ldr	r2, [pc, #352]	; (8017164 <MotionDI_update+0x16e4>)
 8017004:	f8c8 7078 	str.w	r7, [r8, #120]	; 0x78
 8017008:	2300      	movs	r3, #0
 801700a:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801700e:	f8c8 1080 	str.w	r1, [r8, #128]	; 0x80
 8017012:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
 8017016:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 801701a:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 801701e:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
 8017022:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
 8017026:	eddf 7a53 	vldr	s15, [pc, #332]	; 8017174 <MotionDI_update+0x16f4>
 801702a:	ed9a 6a00 	vldr	s12, [sl]
 801702e:	edda 6a01 	vldr	s13, [sl, #4]
 8017032:	ed9a 7a02 	vldr	s14, [sl, #8]
 8017036:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
 801703a:	ee26 5a27 	vmul.f32	s10, s12, s15
 801703e:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8017042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017046:	ed88 5a1b 	vstr	s10, [r8, #108]	; 0x6c
 801704a:	edc8 5a1c 	vstr	s11, [r8, #112]	; 0x70
 801704e:	edc8 7a1d 	vstr	s15, [r8, #116]	; 0x74
 8017052:	2b00      	cmp	r3, #0
 8017054:	f000 82db 	beq.w	801760e <MotionDI_update+0x1b8e>
 8017058:	f894 36ec 	ldrb.w	r3, [r4, #1772]	; 0x6ec
 801705c:	2b09      	cmp	r3, #9
 801705e:	f200 83e0 	bhi.w	8017822 <MotionDI_update+0x1da2>
 8017062:	3301      	adds	r3, #1
 8017064:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 8017068:	e2d3      	b.n	8017612 <MotionDI_update+0x1b92>
 801706a:	f8d4 2650 	ldr.w	r2, [r4, #1616]	; 0x650
 801706e:	f8d4 e6dc 	ldr.w	lr, [r4, #1756]	; 0x6dc
 8017072:	921d      	str	r2, [sp, #116]	; 0x74
 8017074:	2a00      	cmp	r2, #0
 8017076:	f040 837d 	bne.w	8017774 <MotionDI_update+0x1cf4>
 801707a:	f10e 0c01 	add.w	ip, lr, #1
 801707e:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 8017082:	921e      	str	r2, [sp, #120]	; 0x78
 8017084:	2a00      	cmp	r2, #0
 8017086:	f000 8544 	beq.w	8017b12 <MotionDI_update+0x2092>
 801708a:	ee07 ca90 	vmov	s15, ip
 801708e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017096:	eec7 5a27 	vdiv.f32	s11, s14, s15
 801709a:	4f37      	ldr	r7, [pc, #220]	; (8017178 <MotionDI_update+0x16f8>)
 801709c:	4a37      	ldr	r2, [pc, #220]	; (801717c <MotionDI_update+0x16fc>)
 801709e:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 80170a2:	463d      	mov	r5, r7
 80170a4:	4611      	mov	r1, r2
 80170a6:	4610      	mov	r0, r2
 80170a8:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 80170ac:	f101 0104 	add.w	r1, r1, #4
 80170b0:	f100 0008 	add.w	r0, r0, #8
 80170b4:	ecb5 7a01 	vldmia	r5!, {s14}
 80170b8:	ed92 4a00 	vldr	s8, [r2]
 80170bc:	edd1 4a00 	vldr	s9, [r1]
 80170c0:	ed90 5a00 	vldr	s10, [r0]
 80170c4:	ed95 6a00 	vldr	s12, [r5]
 80170c8:	edd7 6a02 	vldr	s13, [r7, #8]
 80170cc:	ee07 ea90 	vmov	s15, lr
 80170d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170d4:	eea7 7a84 	vfma.f32	s14, s15, s8
 80170d8:	eea7 6aa4 	vfma.f32	s12, s15, s9
 80170dc:	eee7 6a85 	vfma.f32	s13, s15, s10
 80170e0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80170e4:	ee67 7a25 	vmul.f32	s15, s14, s11
 80170e8:	ee26 7aa5 	vmul.f32	s14, s13, s11
 80170ec:	ed81 6a00 	vstr	s12, [r1]
 80170f0:	edc2 7a00 	vstr	s15, [r2]
 80170f4:	ed80 7a00 	vstr	s14, [r0]
 80170f8:	f47e ad92 	bne.w	8015c20 <MotionDI_update+0x1a0>
 80170fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80170fe:	b16b      	cbz	r3, 801711c <MotionDI_update+0x169c>
 8017100:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017104:	ee26 6a26 	vmul.f32	s12, s12, s13
 8017108:	ee27 7a26 	vmul.f32	s14, s14, s13
 801710c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017110:	ed84 6a46 	vstr	s12, [r4, #280]	; 0x118
 8017114:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 8017118:	edc4 7a45 	vstr	s15, [r4, #276]	; 0x114
 801711c:	edd1 6a00 	vldr	s13, [r1]
 8017120:	ed90 7a00 	vldr	s14, [r0]
 8017124:	edd2 7a00 	vldr	s15, [r2]
 8017128:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801712c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017130:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017134:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017138:	edc4 6a55 	vstr	s13, [r4, #340]	; 0x154
 801713c:	ed84 7a56 	vstr	s14, [r4, #344]	; 0x158
 8017140:	edc4 7a54 	vstr	s15, [r4, #336]	; 0x150
 8017144:	2300      	movs	r3, #0
 8017146:	2500      	movs	r5, #0
 8017148:	6013      	str	r3, [r2, #0]
 801714a:	600b      	str	r3, [r1, #0]
 801714c:	6003      	str	r3, [r0, #0]
 801714e:	f8c4 56dc 	str.w	r5, [r4, #1756]	; 0x6dc
 8017152:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017154:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
 8017158:	f7fe bd5f 	b.w	8015c1a <MotionDI_update+0x19a>
 801715c:	20001834 	.word	0x20001834
 8017160:	20001840 	.word	0x20001840
 8017164:	200010f8 	.word	0x200010f8
 8017168:	bf333333 	.word	0xbf333333
 801716c:	3f333333 	.word	0x3f333333
 8017170:	200008e8 	.word	0x200008e8
 8017174:	42652ee1 	.word	0x42652ee1
 8017178:	20000cec 	.word	0x20000cec
 801717c:	20001ab8 	.word	0x20001ab8
 8017180:	2000181c 	.word	0x2000181c
 8017184:	2300      	movs	r3, #0
 8017186:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 801718a:	f2c0 8328 	blt.w	80177de <MotionDI_update+0x1d5e>
 801718e:	f04f 0a00 	mov.w	sl, #0
 8017192:	4e5f      	ldr	r6, [pc, #380]	; (8017310 <MotionDI_update+0x1890>)
 8017194:	f8a4 a088 	strh.w	sl, [r4, #136]	; 0x88
 8017198:	f1a6 0c1c 	sub.w	ip, r6, #28
 801719c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80171a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80171a2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80171a6:	f1a6 0e64 	sub.w	lr, r6, #100	; 0x64
 80171aa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80171ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80171b2:	f1a6 0c48 	sub.w	ip, r6, #72	; 0x48
 80171b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171ba:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80171be:	2300      	movs	r3, #0
 80171c0:	f04f 0e00 	mov.w	lr, #0
 80171c4:	f1ba 0f01 	cmp.w	sl, #1
 80171c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80171cc:	bf98      	it	ls
 80171ce:	f206 660c 	addwls	r6, r6, #1548	; 0x60c
 80171d2:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 80171d6:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
 80171da:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80171de:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
 80171e2:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
 80171e6:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
 80171ea:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
 80171ee:	8323      	strh	r3, [r4, #24]
 80171f0:	f8c4 e01c 	str.w	lr, [r4, #28]
 80171f4:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 80171f8:	f8c4 e020 	str.w	lr, [r4, #32]
 80171fc:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 8017200:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
 8017204:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8017208:	f67e ac6b 	bls.w	8015ae2 <MotionDI_update+0x62>
 801720c:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
 8017210:	ed94 9a0e 	vldr	s18, [r4, #56]	; 0x38
 8017214:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8017218:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 801721c:	2b00      	cmp	r3, #0
 801721e:	f000 84cb 	beq.w	8017bb8 <MotionDI_update+0x2138>
 8017222:	ee71 1a88 	vadd.f32	s3, s3, s16
 8017226:	ee72 2a89 	vadd.f32	s5, s5, s18
 801722a:	ee32 2a28 	vadd.f32	s4, s4, s17
 801722e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8017232:	ee22 9a88 	vmul.f32	s18, s5, s16
 8017236:	ee62 8a08 	vmul.f32	s17, s4, s16
 801723a:	ee21 8a88 	vmul.f32	s16, s3, s16
 801723e:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 8017242:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 8017246:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 801724a:	4e32      	ldr	r6, [pc, #200]	; (8017314 <MotionDI_update+0x1894>)
 801724c:	2224      	movs	r2, #36	; 0x24
 801724e:	f106 0010 	add.w	r0, r6, #16
 8017252:	2100      	movs	r1, #0
 8017254:	f002 f85e 	bl	8019314 <memset>
 8017258:	f894 26c8 	ldrb.w	r2, [r4, #1736]	; 0x6c8
 801725c:	ed86 9a00 	vstr	s18, [r6]
 8017260:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017264:	2a01      	cmp	r2, #1
 8017266:	edc6 8a01 	vstr	s17, [r6, #4]
 801726a:	ed86 8a02 	vstr	s16, [r6, #8]
 801726e:	60f3      	str	r3, [r6, #12]
 8017270:	61f3      	str	r3, [r6, #28]
 8017272:	62f3      	str	r3, [r6, #44]	; 0x2c
 8017274:	f240 81c3 	bls.w	80175fe <MotionDI_update+0x1b7e>
 8017278:	2303      	movs	r3, #3
 801727a:	f1b8 0f01 	cmp.w	r8, #1
 801727e:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 8017282:	bf04      	itt	eq
 8017284:	2300      	moveq	r3, #0
 8017286:	f884 3180 	strbeq.w	r3, [r4, #384]	; 0x180
 801728a:	f7fe bc2a 	b.w	8015ae2 <MotionDI_update+0x62>
 801728e:	4288      	cmp	r0, r1
 8017290:	f43e ae68 	beq.w	8015f64 <MotionDI_update+0x4e4>
 8017294:	7d33      	ldrb	r3, [r6, #20]
 8017296:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 801729a:	aa58      	add	r2, sp, #352	; 0x160
 801729c:	9218      	str	r2, [sp, #96]	; 0x60
 801729e:	aa33      	add	r2, sp, #204	; 0xcc
 80172a0:	921e      	str	r2, [sp, #120]	; 0x78
 80172a2:	aa65      	add	r2, sp, #404	; 0x194
 80172a4:	921c      	str	r2, [sp, #112]	; 0x70
 80172a6:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 80172aa:	edd6 6a07 	vldr	s13, [r6, #28]
 80172ae:	ed96 7a08 	vldr	s14, [r6, #32]
 80172b2:	edd6 7a06 	vldr	s15, [r6, #24]
 80172b6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80172b8:	f8ca 2000 	str.w	r2, [sl]
 80172bc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80172c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80172c2:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 80172c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80172ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172ce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80172d0:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80172d2:	edc2 6a01 	vstr	s13, [r2, #4]
 80172d6:	ed82 7a02 	vstr	s14, [r2, #8]
 80172da:	edc2 7a00 	vstr	s15, [r2]
 80172de:	f8ca 3004 	str.w	r3, [sl, #4]
 80172e2:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80172e4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80172e6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80172e8:	f8ca 1008 	str.w	r1, [sl, #8]
 80172ec:	f8ca 200c 	str.w	r2, [sl, #12]
 80172f0:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80172f2:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80172f4:	f8ca 3010 	str.w	r3, [sl, #16]
 80172f8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80172fa:	4f07      	ldr	r7, [pc, #28]	; (8017318 <MotionDI_update+0x1898>)
 80172fc:	f8ca 0014 	str.w	r0, [sl, #20]
 8017300:	f8ca 1018 	str.w	r1, [sl, #24]
 8017304:	f8ca 201c 	str.w	r2, [sl, #28]
 8017308:	f8ca 3020 	str.w	r3, [sl, #32]
 801730c:	f7fe bbde 	b.w	8015acc <MotionDI_update+0x4c>
 8017310:	20001444 	.word	0x20001444
 8017314:	20001a60 	.word	0x20001a60
 8017318:	20001a2c 	.word	0x20001a2c
 801731c:	4ad6      	ldr	r2, [pc, #856]	; (8017678 <MotionDI_update+0x1bf8>)
 801731e:	4dd7      	ldr	r5, [pc, #860]	; (801767c <MotionDI_update+0x1bfc>)
 8017320:	af36      	add	r7, sp, #216	; 0xd8
 8017322:	2300      	movs	r3, #0
 8017324:	f5a2 71dc 	sub.w	r1, r2, #440	; 0x1b8
 8017328:	a839      	add	r0, sp, #228	; 0xe4
 801732a:	e9c7 3300 	strd	r3, r3, [r7]
 801732e:	60bb      	str	r3, [r7, #8]
 8017330:	f7f7 fad4 	bl	800e8dc <rotVect>
 8017334:	4ad2      	ldr	r2, [pc, #840]	; (8017680 <MotionDI_update+0x1c00>)
 8017336:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801733a:	f5a2 71d6 	sub.w	r1, r2, #428	; 0x1ac
 801733e:	4640      	mov	r0, r8
 8017340:	f7f7 facc 	bl	800e8dc <rotVect>
 8017344:	4acf      	ldr	r2, [pc, #828]	; (8017684 <MotionDI_update+0x1c04>)
 8017346:	a83f      	add	r0, sp, #252	; 0xfc
 8017348:	f5a2 71d0 	sub.w	r1, r2, #416	; 0x1a0
 801734c:	f7f7 fac6 	bl	800e8dc <rotVect>
 8017350:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 8017354:	ed9d 7a3a 	vldr	s14, [sp, #232]	; 0xe8
 8017358:	edd8 9a00 	vldr	s19, [r8]
 801735c:	ed98 aa01 	vldr	s20, [r8, #4]
 8017360:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 8017364:	ed9d 8a3f 	vldr	s16, [sp, #252]	; 0xfc
 8017368:	eddd 8a40 	vldr	s17, [sp, #256]	; 0x100
 801736c:	f895 38e0 	ldrb.w	r3, [r5, #2272]	; 0x8e0
 8017370:	9327      	str	r3, [sp, #156]	; 0x9c
 8017372:	eeb1 ca67 	vneg.f32	s24, s15
 8017376:	eef1 ca47 	vneg.f32	s25, s14
 801737a:	eef1 9a69 	vneg.f32	s19, s19
 801737e:	eeb1 aa4a 	vneg.f32	s20, s20
 8017382:	eef1 ba4b 	vneg.f32	s23, s22
 8017386:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 801738a:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 801738e:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 8017392:	edc8 9a01 	vstr	s19, [r8, #4]
 8017396:	ed88 aa00 	vstr	s20, [r8]
 801739a:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 801739e:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	f040 819d 	bne.w	80176e2 <MotionDI_update+0x1c62>
 80173a8:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 80173ac:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 80173b0:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 80173b4:	49b4      	ldr	r1, [pc, #720]	; (8017688 <MotionDI_update+0x1c08>)
 80173b6:	edd4 7ab0 	vldr	s15, [r4, #704]	; 0x2c0
 80173ba:	f8d4 e2c4 	ldr.w	lr, [r4, #708]	; 0x2c4
 80173be:	f8d4 c2c8 	ldr.w	ip, [r4, #712]	; 0x2c8
 80173c2:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 80173c6:	ee00 2a10 	vmov	s0, r2
 80173ca:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80173ce:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 80173d2:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
 80173d6:	ee20 0a09 	vmul.f32	s0, s0, s18
 80173da:	f043 0302 	orr.w	r3, r3, #2
 80173de:	f501 7af9 	add.w	sl, r1, #498	; 0x1f2
 80173e2:	f083 0301 	eor.w	r3, r3, #1
 80173e6:	22f8      	movs	r2, #248	; 0xf8
 80173e8:	4658      	mov	r0, fp
 80173ea:	ed8d 0a26 	vstr	s0, [sp, #152]	; 0x98
 80173ee:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 80173f2:	f8c4 e2d4 	str.w	lr, [r4, #724]	; 0x2d4
 80173f6:	f8c4 c2d8 	str.w	ip, [r4, #728]	; 0x2d8
 80173fa:	f001 ff7d 	bl	80192f8 <memcpy>
 80173fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8017402:	f8d5 c0c4 	ldr.w	ip, [r5, #196]	; 0xc4
 8017406:	f8d5 80c0 	ldr.w	r8, [r5, #192]	; 0xc0
 801740a:	edd5 7a2f 	vldr	s15, [r5, #188]	; 0xbc
 801740e:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
 8017412:	f10a 3eff 	add.w	lr, sl, #4294967295
 8017416:	edcb ca06 	vstr	s25, [fp, #24]
 801741a:	ed8b ca07 	vstr	s24, [fp, #28]
 801741e:	edcb aa08 	vstr	s21, [fp, #32]
 8017422:	edcb 8a03 	vstr	s17, [fp, #12]
 8017426:	ed8b 8a04 	vstr	s16, [fp, #16]
 801742a:	edcb ba05 	vstr	s23, [fp, #20]
 801742e:	ed8b aa09 	vstr	s20, [fp, #36]	; 0x24
 8017432:	edcb 9a0a 	vstr	s19, [fp, #40]	; 0x28
 8017436:	e9cd ea13 	strd	lr, sl, [sp, #76]	; 0x4c
 801743a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801743c:	4993      	ldr	r1, [pc, #588]	; (801768c <MotionDI_update+0x1c0c>)
 801743e:	9210      	str	r2, [sp, #64]	; 0x40
 8017440:	2300      	movs	r3, #0
 8017442:	f1aa 0002 	sub.w	r0, sl, #2
 8017446:	9012      	str	r0, [sp, #72]	; 0x48
 8017448:	9711      	str	r7, [sp, #68]	; 0x44
 801744a:	f8c4 838c 	str.w	r8, [r4, #908]	; 0x38c
 801744e:	f8c4 c390 	str.w	ip, [r4, #912]	; 0x390
 8017452:	edc4 7ae2 	vstr	s15, [r4, #904]	; 0x388
 8017456:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 801745a:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
 801745e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8017462:	9115      	str	r1, [sp, #84]	; 0x54
 8017464:	edd4 3a47 	vldr	s7, [r4, #284]	; 0x11c
 8017468:	ed94 3a46 	vldr	s6, [r4, #280]	; 0x118
 801746c:	edd4 2a45 	vldr	s5, [r4, #276]	; 0x114
 8017470:	edcd 3a25 	vstr	s7, [sp, #148]	; 0x94
 8017474:	f5aa 7395 	sub.w	r3, sl, #298	; 0x12a
 8017478:	ed8d 3a24 	vstr	s6, [sp, #144]	; 0x90
 801747c:	edcd 2a23 	vstr	s5, [sp, #140]	; 0x8c
 8017480:	ed94 2a3e 	vldr	s4, [r4, #248]	; 0xf8
 8017484:	edd4 1a3d 	vldr	s3, [r4, #244]	; 0xf4
 8017488:	ed94 1a3c 	vldr	s2, [r4, #240]	; 0xf0
 801748c:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 8017490:	930f      	str	r3, [sp, #60]	; 0x3c
 8017492:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 8017496:	ed8d 2a22 	vstr	s4, [sp, #136]	; 0x88
 801749a:	f50d 788c 	add.w	r8, sp, #280	; 0x118
 801749e:	edcd 1a21 	vstr	s3, [sp, #132]	; 0x84
 80174a2:	ed8d 1a20 	vstr	s2, [sp, #128]	; 0x80
 80174a6:	edcd 0a1f 	vstr	s1, [sp, #124]	; 0x7c
 80174aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80174ae:	f7e8 ffef 	bl	8000490 <__aeabi_f2d>
 80174b2:	4602      	mov	r2, r0
 80174b4:	460b      	mov	r3, r1
 80174b6:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
 80174ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80174be:	f7e8 ffc5 	bl	800044c <__aeabi_ui2d>
 80174c2:	460b      	mov	r3, r1
 80174c4:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 80174c8:	9108      	str	r1, [sp, #32]
 80174ca:	f894 1103 	ldrb.w	r1, [r4, #259]	; 0x103
 80174ce:	9107      	str	r1, [sp, #28]
 80174d0:	f894 1102 	ldrb.w	r1, [r4, #258]	; 0x102
 80174d4:	9106      	str	r1, [sp, #24]
 80174d6:	f894 1101 	ldrb.w	r1, [r4, #257]	; 0x101
 80174da:	9105      	str	r1, [sp, #20]
 80174dc:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
 80174e0:	9104      	str	r1, [sp, #16]
 80174e2:	4602      	mov	r2, r0
 80174e4:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 80174e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80174ec:	f7e8 ffd0 	bl	8000490 <__aeabi_f2d>
 80174f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80174f2:	9300      	str	r3, [sp, #0]
 80174f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80174f8:	a99c      	add	r1, sp, #624	; 0x270
 80174fa:	ab8d      	add	r3, sp, #564	; 0x234
 80174fc:	aa87      	add	r2, sp, #540	; 0x21c
 80174fe:	a8a3      	add	r0, sp, #652	; 0x28c
 8017500:	9101      	str	r1, [sp, #4]
 8017502:	ed9d 0a26 	vldr	s0, [sp, #152]	; 0x98
 8017506:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017508:	eddd 3a25 	vldr	s7, [sp, #148]	; 0x94
 801750c:	ed9d 3a24 	vldr	s6, [sp, #144]	; 0x90
 8017510:	eddd 2a23 	vldr	s5, [sp, #140]	; 0x8c
 8017514:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 8017518:	eddd 1a21 	vldr	s3, [sp, #132]	; 0x84
 801751c:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 8017520:	eddd 0a1f 	vldr	s1, [sp, #124]	; 0x7c
 8017524:	f7fd fd0e 	bl	8014f44 <SpacePointAlgorithm.isra.0>
 8017528:	46d4      	mov	ip, sl
 801752a:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
 801752e:	f894 3436 	ldrb.w	r3, [r4, #1078]	; 0x436
 8017532:	f84c 1f02 	str.w	r1, [ip, #2]!
 8017536:	f10a 0106 	add.w	r1, sl, #6
 801753a:	f10a 0a0a 	add.w	sl, sl, #10
 801753e:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
 8017542:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8017546:	6008      	str	r0, [r1, #0]
 8017548:	2b01      	cmp	r3, #1
 801754a:	f8ca 2000 	str.w	r2, [sl]
 801754e:	f8d8 e000 	ldr.w	lr, [r8]
 8017552:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017556:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801755a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801755e:	f000 830c 	beq.w	8017b7a <MotionDI_update+0x20fa>
 8017562:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017564:	3b01      	subs	r3, #1
 8017566:	b2db      	uxtb	r3, r3
 8017568:	2b08      	cmp	r3, #8
 801756a:	bf98      	it	ls
 801756c:	f885 38e0 	strbls.w	r3, [r5, #2272]	; 0x8e0
 8017570:	eddf 7a47 	vldr	s15, [pc, #284]	; 8017690 <MotionDI_update+0x1c10>
 8017574:	ed97 6a00 	vldr	s12, [r7]
 8017578:	edd7 6a01 	vldr	s13, [r7, #4]
 801757c:	ed97 7a02 	vldr	s14, [r7, #8]
 8017580:	f894 3435 	ldrb.w	r3, [r4, #1077]	; 0x435
 8017584:	ee26 5a27 	vmul.f32	s10, s12, s15
 8017588:	ee66 5aa7 	vmul.f32	s11, s13, s15
 801758c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017590:	ed84 5aac 	vstr	s10, [r4, #688]	; 0x2b0
 8017594:	edc4 5aad 	vstr	s11, [r4, #692]	; 0x2b4
 8017598:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 801759c:	2b00      	cmp	r3, #0
 801759e:	d07f      	beq.n	80176a0 <MotionDI_update+0x1c20>
 80175a0:	f894 36ed 	ldrb.w	r3, [r4, #1773]	; 0x6ed
 80175a4:	2b09      	cmp	r3, #9
 80175a6:	f200 8144 	bhi.w	8017832 <MotionDI_update+0x1db2>
 80175aa:	3301      	adds	r3, #1
 80175ac:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 80175b0:	e078      	b.n	80176a4 <MotionDI_update+0x1c24>
 80175b2:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 80175b6:	fb03 f301 	mul.w	r3, r3, r1
 80175ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80175be:	bf34      	ite	cc
 80175c0:	2300      	movcc	r3, #0
 80175c2:	2301      	movcs	r3, #1
 80175c4:	f7fe bccb 	b.w	8015f5e <MotionDI_update+0x4de>
 80175c8:	4b32      	ldr	r3, [pc, #200]	; (8017694 <MotionDI_update+0x1c14>)
 80175ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80175cc:	9200      	str	r2, [sp, #0]
 80175ce:	4651      	mov	r1, sl
 80175d0:	f1a3 020c 	sub.w	r2, r3, #12
 80175d4:	4618      	mov	r0, r3
 80175d6:	eeb0 0a49 	vmov.f32	s0, s18
 80175da:	f7f8 f8df 	bl	800f79c <SpacePointGyroProp>
 80175de:	f7ff bbad 	b.w	8016d3c <MotionDI_update+0x12bc>
 80175e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80175e4:	9200      	str	r2, [sp, #0]
 80175e6:	f108 0378 	add.w	r3, r8, #120	; 0x78
 80175ea:	eeb0 0a49 	vmov.f32	s0, s18
 80175ee:	4651      	mov	r1, sl
 80175f0:	4618      	mov	r0, r3
 80175f2:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 80175f6:	f7f8 f8d1 	bl	800f79c <SpacePointGyroProp>
 80175fa:	f7ff ba6b 	b.w	8016ad4 <MotionDI_update+0x1054>
 80175fe:	3201      	adds	r2, #1
 8017600:	2302      	movs	r3, #2
 8017602:	f884 26c8 	strb.w	r2, [r4, #1736]	; 0x6c8
 8017606:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 801760a:	f7fe ba6a 	b.w	8015ae2 <MotionDI_update+0x62>
 801760e:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 8017612:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8017616:	f083 0302 	eor.w	r3, r3, #2
 801761a:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 801761e:	f7fe bb08 	b.w	8015c32 <MotionDI_update+0x1b2>
 8017622:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017626:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 801762a:	ed9f ba1b 	vldr	s22, [pc, #108]	; 8017698 <MotionDI_update+0x1c18>
 801762e:	4d1b      	ldr	r5, [pc, #108]	; (801769c <MotionDI_update+0x1c1c>)
 8017630:	eee7 7a07 	vfma.f32	s15, s14, s14
 8017634:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8017638:	ee17 0a90 	vmov	r0, s15
 801763c:	f7e8 ff28 	bl	8000490 <__aeabi_f2d>
 8017640:	ec41 0b10 	vmov	d0, r0, r1
 8017644:	f002 f848 	bl	80196d8 <sqrt>
 8017648:	ec51 0b10 	vmov	r0, r1, d0
 801764c:	f7e9 fa70 	bl	8000b30 <__aeabi_d2f>
 8017650:	ee07 0a90 	vmov	s15, r0
 8017654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017658:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801765c:	ee2a aa27 	vmul.f32	s20, s20, s15
 8017660:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8017664:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8017668:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 801766c:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 8017670:	edcd aa3e 	vstr	s21, [sp, #248]	; 0xf8
 8017674:	e404      	b.n	8016e80 <MotionDI_update+0x1400>
 8017676:	bf00      	nop
 8017678:	20001634 	.word	0x20001634
 801767c:	20000000 	.word	0x20000000
 8017680:	20001640 	.word	0x20001640
 8017684:	20001628 	.word	0x20001628
 8017688:	2000161c 	.word	0x2000161c
 801768c:	20000010 	.word	0x20000010
 8017690:	42652ee1 	.word	0x42652ee1
 8017694:	20001694 	.word	0x20001694
 8017698:	bf3504f3 	.word	0xbf3504f3
 801769c:	3f3504f3 	.word	0x3f3504f3
 80176a0:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 80176a4:	4bc0      	ldr	r3, [pc, #768]	; (80179a8 <MotionDI_update+0x1f28>)
 80176a6:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
 80176aa:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80176ae:	6098      	str	r0, [r3, #8]
 80176b0:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 80176b4:	f843 1b04 	str.w	r1, [r3], #4
 80176b8:	f8d5 10c0 	ldr.w	r1, [r5, #192]	; 0xc0
 80176bc:	6019      	str	r1, [r3, #0]
 80176be:	f8d5 70a4 	ldr.w	r7, [r5, #164]	; 0xa4
 80176c2:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
 80176c6:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80176ca:	f8c4 73e8 	str.w	r7, [r4, #1000]	; 0x3e8
 80176ce:	f082 0302 	eor.w	r3, r2, #2
 80176d2:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 80176d6:	f8c4 03ec 	str.w	r0, [r4, #1004]	; 0x3ec
 80176da:	f8c4 13f0 	str.w	r1, [r4, #1008]	; 0x3f0
 80176de:	f7fe bab1 	b.w	8015c44 <MotionDI_update+0x1c4>
 80176e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80176e6:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 80176ea:	eee7 7a07 	vfma.f32	s15, s14, s14
 80176ee:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 80176f2:	eeea 7aaa 	vfma.f32	s15, s21, s21
 80176f6:	ee17 0a90 	vmov	r0, s15
 80176fa:	f7e8 fec9 	bl	8000490 <__aeabi_f2d>
 80176fe:	ec41 0b10 	vmov	d0, r0, r1
 8017702:	f001 ffe9 	bl	80196d8 <sqrt>
 8017706:	ec51 0b10 	vmov	r0, r1, d0
 801770a:	f7e9 fa11 	bl	8000b30 <__aeabi_d2f>
 801770e:	ee07 0a90 	vmov	s15, r0
 8017712:	ee8d 7a27 	vdiv.f32	s14, s26, s15
 8017716:	ee68 7a08 	vmul.f32	s15, s16, s16
 801771a:	ee6c ca87 	vmul.f32	s25, s25, s14
 801771e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017722:	ee2c ca07 	vmul.f32	s24, s24, s14
 8017726:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 801772a:	ee6a aa87 	vmul.f32	s21, s21, s14
 801772e:	ee17 0a90 	vmov	r0, s15
 8017732:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 8017736:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 801773a:	edcd aa3b 	vstr	s21, [sp, #236]	; 0xec
 801773e:	f7e8 fea7 	bl	8000490 <__aeabi_f2d>
 8017742:	ec41 0b10 	vmov	d0, r0, r1
 8017746:	f001 ffc7 	bl	80196d8 <sqrt>
 801774a:	ec51 0b10 	vmov	r0, r1, d0
 801774e:	f7e9 f9ef 	bl	8000b30 <__aeabi_d2f>
 8017752:	ee07 0a90 	vmov	s15, r0
 8017756:	eecd 7a27 	vdiv.f32	s15, s26, s15
 801775a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801775e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017762:	ee6b baa7 	vmul.f32	s23, s23, s15
 8017766:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 801776a:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 801776e:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 8017772:	e61b      	b.n	80173ac <MotionDI_update+0x192c>
 8017774:	f10e 0c01 	add.w	ip, lr, #1
 8017778:	ee07 ca90 	vmov	s15, ip
 801777c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017784:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8017788:	4d88      	ldr	r5, [pc, #544]	; (80179ac <MotionDI_update+0x1f2c>)
 801778a:	4628      	mov	r0, r5
 801778c:	f206 4284 	addw	r2, r6, #1156	; 0x484
 8017790:	f506 6191 	add.w	r1, r6, #1160	; 0x488
 8017794:	ecf0 6a01 	vldmia	r0!, {s13}
 8017798:	ed92 4a00 	vldr	s8, [r2]
 801779c:	ed90 7a00 	vldr	s14, [r0]
 80177a0:	edd1 4a00 	vldr	s9, [r1]
 80177a4:	edd5 7a02 	vldr	s15, [r5, #8]
 80177a8:	ee05 ea90 	vmov	s11, lr
 80177ac:	f206 408c 	addw	r0, r6, #1164	; 0x48c
 80177b0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80177b4:	ed90 5a00 	vldr	s10, [r0]
 80177b8:	eee5 6a84 	vfma.f32	s13, s11, s8
 80177bc:	eea5 7aa4 	vfma.f32	s14, s11, s9
 80177c0:	eee5 7a85 	vfma.f32	s15, s11, s10
 80177c4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80177c8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80177cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80177d0:	edc2 6a00 	vstr	s13, [r2]
 80177d4:	ed81 7a00 	vstr	s14, [r1]
 80177d8:	edc0 7a00 	vstr	s15, [r0]
 80177dc:	e44f      	b.n	801707e <MotionDI_update+0x15fe>
 80177de:	3a01      	subs	r2, #1
 80177e0:	ee07 2a90 	vmov	s15, r2
 80177e4:	ee28 6a06 	vmul.f32	s12, s16, s12
 80177e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177ec:	ed94 7a00 	vldr	s14, [r4]
 80177f0:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80177f4:	eef4 5ac7 	vcmpe.f32	s11, s14
 80177f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fc:	f57f acc7 	bpl.w	801718e <MotionDI_update+0x170e>
 8017800:	edd4 7a03 	vldr	s15, [r4, #12]
 8017804:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801780c:	f57f acbf 	bpl.w	801718e <MotionDI_update+0x170e>
 8017810:	2b00      	cmp	r3, #0
 8017812:	f43f acbc 	beq.w	801718e <MotionDI_update+0x170e>
 8017816:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 801781a:	3301      	adds	r3, #1
 801781c:	fa1f fa83 	uxth.w	sl, r3
 8017820:	e4b7      	b.n	8017192 <MotionDI_update+0x1712>
 8017822:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017824:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 8017828:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 801782c:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8017830:	e6ef      	b.n	8017612 <MotionDI_update+0x1b92>
 8017832:	ed84 6af1 	vstr	s12, [r4, #964]	; 0x3c4
 8017836:	edc4 6af2 	vstr	s13, [r4, #968]	; 0x3c8
 801783a:	ed84 7af3 	vstr	s14, [r4, #972]	; 0x3cc
 801783e:	e731      	b.n	80176a4 <MotionDI_update+0x1c24>
 8017840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017844:	6572      	str	r2, [r6, #84]	; 0x54
 8017846:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 801784a:	f7fe bb9f 	b.w	8015f8c <MotionDI_update+0x50c>
 801784e:	e9dd 701c 	ldrd	r7, r0, [sp, #112]	; 0x70
 8017852:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8017856:	f8d8 108c 	ldr.w	r1, [r8, #140]	; 0x8c
 801785a:	f8c8 3098 	str.w	r3, [r8, #152]	; 0x98
 801785e:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8017862:	f8d8 6094 	ldr.w	r6, [r8, #148]	; 0x94
 8017866:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 801786a:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
 801786e:	4950      	ldr	r1, [pc, #320]	; (80179b0 <MotionDI_update+0x1f30>)
 8017870:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
 8017874:	f042 0301 	orr.w	r3, r2, #1
 8017878:	463a      	mov	r2, r7
 801787a:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 801787e:	f7f7 fa35 	bl	800ecec <m_qmult_eml>
 8017882:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8017884:	494b      	ldr	r1, [pc, #300]	; (80179b4 <MotionDI_update+0x1f34>)
 8017886:	462a      	mov	r2, r5
 8017888:	f101 0040 	add.w	r0, r1, #64	; 0x40
 801788c:	f7f7 fa2e 	bl	800ecec <m_qmult_eml>
 8017890:	4629      	mov	r1, r5
 8017892:	4638      	mov	r0, r7
 8017894:	f7f7 fa2a 	bl	800ecec <m_qmult_eml>
 8017898:	ed95 9a01 	vldr	s18, [r5, #4]
 801789c:	edd5 9a00 	vldr	s19, [r5]
 80178a0:	edd5 8a02 	vldr	s17, [r5, #8]
 80178a4:	ed95 8a03 	vldr	s16, [r5, #12]
 80178a8:	ee69 7a09 	vmul.f32	s15, s18, s18
 80178ac:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80178b0:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80178b4:	eee8 7a08 	vfma.f32	s15, s16, s16
 80178b8:	ee17 0a90 	vmov	r0, s15
 80178bc:	f7e8 fde8 	bl	8000490 <__aeabi_f2d>
 80178c0:	ec41 0b10 	vmov	d0, r0, r1
 80178c4:	f001 ff08 	bl	80196d8 <sqrt>
 80178c8:	ec51 0b10 	vmov	r0, r1, d0
 80178cc:	f7e9 f930 	bl	8000b30 <__aeabi_d2f>
 80178d0:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
 80178d4:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 80178d8:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 80178dc:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 80178e0:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 80178e4:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 80178e8:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 80178ec:	ee07 3a10 	vmov	s14, r3
 80178f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80178f4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80178f8:	eec5 7a07 	vdiv.f32	s15, s10, s14
 80178fc:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8017900:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 8017904:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 8017908:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 801790c:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 8017910:	ee07 0a10 	vmov	s14, r0
 8017914:	eec5 5a07 	vdiv.f32	s11, s10, s14
 8017918:	ee27 6a86 	vmul.f32	s12, s15, s12
 801791c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017920:	ee26 7a06 	vmul.f32	s14, s12, s12
 8017924:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8017928:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801792c:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8017930:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8017934:	ee29 9a25 	vmul.f32	s18, s18, s11
 8017938:	ee68 8aa5 	vmul.f32	s17, s17, s11
 801793c:	ee28 8a25 	vmul.f32	s16, s16, s11
 8017940:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8017944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017948:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 801794c:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 8017950:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 8017954:	edc5 9a00 	vstr	s19, [r5]
 8017958:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 801795c:	ed85 9a01 	vstr	s18, [r5, #4]
 8017960:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 8017964:	edc5 8a02 	vstr	s17, [r5, #8]
 8017968:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 801796c:	ed85 8a03 	vstr	s16, [r5, #12]
 8017970:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 8017974:	f100 846a 	bmi.w	801824c <MotionDI_update+0x27cc>
 8017978:	2000      	movs	r0, #0
 801797a:	2300      	movs	r3, #0
 801797c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017980:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 8017984:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 8017988:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 801798c:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 8017990:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 8017994:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 8017998:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 801799c:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 80179a0:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 80179a4:	f7ff b8d1 	b.w	8016b4a <MotionDI_update+0x10ca>
 80179a8:	200017d8 	.word	0x200017d8
 80179ac:	20000414 	.word	0x20000414
 80179b0:	200018c4 	.word	0x200018c4
 80179b4:	200018a4 	.word	0x200018a4
 80179b8:	e9dd 701c 	ldrd	r7, r0, [sp, #112]	; 0x70
 80179bc:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
 80179c0:	f8d4 12d0 	ldr.w	r1, [r4, #720]	; 0x2d0
 80179c4:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 80179c8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80179cc:	f8d4 62d8 	ldr.w	r6, [r4, #728]	; 0x2d8
 80179d0:	f8c4 12e0 	str.w	r1, [r4, #736]	; 0x2e0
 80179d4:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80179d8:	49a2      	ldr	r1, [pc, #648]	; (8017c64 <MotionDI_update+0x21e4>)
 80179da:	f8c4 62e8 	str.w	r6, [r4, #744]	; 0x2e8
 80179de:	f042 0301 	orr.w	r3, r2, #1
 80179e2:	463a      	mov	r2, r7
 80179e4:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 80179e8:	f7f7 f980 	bl	800ecec <m_qmult_eml>
 80179ec:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80179ee:	499e      	ldr	r1, [pc, #632]	; (8017c68 <MotionDI_update+0x21e8>)
 80179f0:	462a      	mov	r2, r5
 80179f2:	f101 0040 	add.w	r0, r1, #64	; 0x40
 80179f6:	f7f7 f979 	bl	800ecec <m_qmult_eml>
 80179fa:	4629      	mov	r1, r5
 80179fc:	4638      	mov	r0, r7
 80179fe:	f7f7 f975 	bl	800ecec <m_qmult_eml>
 8017a02:	edd5 9a01 	vldr	s19, [r5, #4]
 8017a06:	ed95 aa00 	vldr	s20, [r5]
 8017a0a:	edd5 8a02 	vldr	s17, [r5, #8]
 8017a0e:	ed95 8a03 	vldr	s16, [r5, #12]
 8017a12:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8017a16:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8017a1a:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8017a1e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8017a22:	ee17 0a90 	vmov	r0, s15
 8017a26:	f7e8 fd33 	bl	8000490 <__aeabi_f2d>
 8017a2a:	ec41 0b10 	vmov	d0, r0, r1
 8017a2e:	f001 fe53 	bl	80196d8 <sqrt>
 8017a32:	ec51 0b10 	vmov	r0, r1, d0
 8017a36:	f7e9 f87b 	bl	8000b30 <__aeabi_d2f>
 8017a3a:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 8017a3e:	ed94 6ac4 	vldr	s12, [r4, #784]	; 0x310
 8017a42:	edd4 6ac3 	vldr	s13, [r4, #780]	; 0x30c
 8017a46:	edd4 4ac5 	vldr	s9, [r4, #788]	; 0x314
 8017a4a:	f8d4 12f0 	ldr.w	r1, [r4, #752]	; 0x2f0
 8017a4e:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 8017a52:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
 8017a56:	ee07 3a10 	vmov	s14, r3
 8017a5a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017a5e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8017a62:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8017a66:	f8d4 32ec 	ldr.w	r3, [r4, #748]	; 0x2ec
 8017a6a:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
 8017a6e:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
 8017a72:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
 8017a76:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
 8017a7a:	ee07 0a10 	vmov	s14, r0
 8017a7e:	eec5 5a07 	vdiv.f32	s11, s10, s14
 8017a82:	ee27 6a86 	vmul.f32	s12, s15, s12
 8017a86:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017a8a:	ee26 7a06 	vmul.f32	s14, s12, s12
 8017a8e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8017a92:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8017a96:	ee25 aa8a 	vmul.f32	s20, s11, s20
 8017a9a:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8017a9e:	ee65 9aa9 	vmul.f32	s19, s11, s19
 8017aa2:	ee65 8aa8 	vmul.f32	s17, s11, s17
 8017aa6:	ee28 8a25 	vmul.f32	s16, s16, s11
 8017aaa:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8017aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ab2:	ed84 6ac8 	vstr	s12, [r4, #800]	; 0x320
 8017ab6:	edc4 6ac7 	vstr	s13, [r4, #796]	; 0x31c
 8017aba:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 8017abe:	ed85 aa00 	vstr	s20, [r5]
 8017ac2:	ed84 aaaf 	vstr	s20, [r4, #700]	; 0x2bc
 8017ac6:	edc5 9a01 	vstr	s19, [r5, #4]
 8017aca:	edc4 9ab0 	vstr	s19, [r4, #704]	; 0x2c0
 8017ace:	edc5 8a02 	vstr	s17, [r5, #8]
 8017ad2:	edc4 8ab1 	vstr	s17, [r4, #708]	; 0x2c4
 8017ad6:	ed85 8a03 	vstr	s16, [r5, #12]
 8017ada:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 8017ade:	f100 83c5 	bmi.w	801826c <MotionDI_update+0x27ec>
 8017ae2:	2000      	movs	r0, #0
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017aea:	f8c4 0328 	str.w	r0, [r4, #808]	; 0x328
 8017aee:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
 8017af2:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 8017af6:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
 8017afa:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 8017afe:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
 8017b02:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
 8017b06:	f8c4 22f8 	str.w	r2, [r4, #760]	; 0x2f8
 8017b0a:	f8c4 2338 	str.w	r2, [r4, #824]	; 0x338
 8017b0e:	f7ff b94a 	b.w	8016da6 <MotionDI_update+0x1326>
 8017b12:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 8017b16:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 8017b1a:	f47e a886 	bne.w	8015c2a <MotionDI_update+0x1aa>
 8017b1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f040 84e4 	bne.w	80184ee <MotionDI_update+0x2a6e>
 8017b26:	4a51      	ldr	r2, [pc, #324]	; (8017c6c <MotionDI_update+0x21ec>)
 8017b28:	1d11      	adds	r1, r2, #4
 8017b2a:	f102 0008 	add.w	r0, r2, #8
 8017b2e:	f7ff bb09 	b.w	8017144 <MotionDI_update+0x16c4>
 8017b32:	2300      	movs	r3, #0
 8017b34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017b38:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 8017b3c:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
 8017b40:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
 8017b44:	f8c4 2360 	str.w	r2, [r4, #864]	; 0x360
 8017b48:	f7ff b908 	b.w	8016d5c <MotionDI_update+0x12dc>
 8017b4c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8017b4e:	2300      	movs	r3, #0
 8017b50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017b54:	618b      	str	r3, [r1, #24]
 8017b56:	61cb      	str	r3, [r1, #28]
 8017b58:	620b      	str	r3, [r1, #32]
 8017b5a:	624a      	str	r2, [r1, #36]	; 0x24
 8017b5c:	f7fe bfcf 	b.w	8016afe <MotionDI_update+0x107e>
 8017b60:	2300      	movs	r3, #0
 8017b62:	6563      	str	r3, [r4, #84]	; 0x54
 8017b64:	6623      	str	r3, [r4, #96]	; 0x60
 8017b66:	65a3      	str	r3, [r4, #88]	; 0x58
 8017b68:	6663      	str	r3, [r4, #100]	; 0x64
 8017b6a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017b6c:	66a3      	str	r3, [r4, #104]	; 0x68
 8017b6e:	2300      	movs	r3, #0
 8017b70:	4e3f      	ldr	r6, [pc, #252]	; (8017c70 <MotionDI_update+0x21f0>)
 8017b72:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8017b76:	f7fd bfb4 	b.w	8015ae2 <MotionDI_update+0x62>
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	f8c4 e2bc 	str.w	lr, [r4, #700]	; 0x2bc
 8017b80:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
 8017b84:	f8c4 12c4 	str.w	r1, [r4, #708]	; 0x2c4
 8017b88:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
 8017b8c:	f8c4 e2cc 	str.w	lr, [r4, #716]	; 0x2cc
 8017b90:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
 8017b94:	f8c4 12d4 	str.w	r1, [r4, #724]	; 0x2d4
 8017b98:	f8c4 22d8 	str.w	r2, [r4, #728]	; 0x2d8
 8017b9c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
 8017ba0:	f885 38e0 	strb.w	r3, [r5, #2272]	; 0x8e0
 8017ba4:	e4e4      	b.n	8017570 <MotionDI_update+0x1af0>
 8017ba6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017ba8:	60b2      	str	r2, [r6, #8]
 8017baa:	2300      	movs	r3, #0
 8017bac:	60f3      	str	r3, [r6, #12]
 8017bae:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 8017bb2:	7d33      	ldrb	r3, [r6, #20]
 8017bb4:	f7ff bb71 	b.w	801729a <MotionDI_update+0x181a>
 8017bb8:	2301      	movs	r3, #1
 8017bba:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 8017bbe:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 8017bc2:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 8017bc6:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
 8017bca:	f7ff bb3e 	b.w	801724a <MotionDI_update+0x17ca>
 8017bce:	2300      	movs	r3, #0
 8017bd0:	61e3      	str	r3, [r4, #28]
 8017bd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8017bd4:	6223      	str	r3, [r4, #32]
 8017bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8017bda:	6323      	str	r3, [r4, #48]	; 0x30
 8017bdc:	2300      	movs	r3, #0
 8017bde:	4e24      	ldr	r6, [pc, #144]	; (8017c70 <MotionDI_update+0x21f0>)
 8017be0:	8323      	strh	r3, [r4, #24]
 8017be2:	f7fd bf7e 	b.w	8015ae2 <MotionDI_update+0x62>
 8017be6:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8017be8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017bea:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8017bec:	4698      	mov	r8, r3
 8017bee:	f500 4372 	add.w	r3, r0, #61952	; 0xf200
 8017bf2:	3330      	adds	r3, #48	; 0x30
 8017bf4:	429a      	cmp	r2, r3
 8017bf6:	46ab      	mov	fp, r5
 8017bf8:	e9dd 9526 	ldrd	r9, r5, [sp, #152]	; 0x98
 8017bfc:	f200 83c7 	bhi.w	801838e <MotionDI_update+0x290e>
 8017c00:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 8017c04:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 8017c08:	9324      	str	r3, [sp, #144]	; 0x90
 8017c0a:	e9cd 021c 	strd	r0, r2, [sp, #112]	; 0x70
 8017c0e:	931f      	str	r3, [sp, #124]	; 0x7c
 8017c10:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
 8017c14:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8017c18:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
 8017c1c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8017c74 <MotionDI_update+0x21f4>
 8017c20:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8017c78 <MotionDI_update+0x21f8>
 8017c24:	eddf 5a15 	vldr	s11, [pc, #84]	; 8017c7c <MotionDI_update+0x21fc>
 8017c28:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8017c2c:	ee1f 2a90 	vmov	r2, s31
 8017c30:	1bc9      	subs	r1, r1, r7
 8017c32:	1a9b      	subs	r3, r3, r2
 8017c34:	fb01 f101 	mul.w	r1, r1, r1
 8017c38:	fb03 1103 	mla	r1, r3, r3, r1
 8017c3c:	eba0 0308 	sub.w	r3, r0, r8
 8017c40:	fb03 1303 	mla	r3, r3, r3, r1
 8017c44:	2201      	movs	r2, #1
 8017c46:	9318      	str	r3, [sp, #96]	; 0x60
 8017c48:	2300      	movs	r3, #0
 8017c4a:	e9cd 9526 	strd	r9, r5, [sp, #152]	; 0x98
 8017c4e:	ee6b baa7 	vmul.f32	s23, s23, s15
 8017c52:	ee2c 5a05 	vmul.f32	s10, s24, s10
 8017c56:	4611      	mov	r1, r2
 8017c58:	931e      	str	r3, [sp, #120]	; 0x78
 8017c5a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8017c5e:	4684      	mov	ip, r0
 8017c60:	e016      	b.n	8017c90 <MotionDI_update+0x2210>
 8017c62:	bf00      	nop
 8017c64:	200016c4 	.word	0x200016c4
 8017c68:	200016a4 	.word	0x200016a4
 8017c6c:	20001ab8 	.word	0x20001ab8
 8017c70:	20001a60 	.word	0x20001a60
 8017c74:	3c23d70a 	.word	0x3c23d70a
 8017c78:	3e99999a 	.word	0x3e99999a
 8017c7c:	3f6b851f 	.word	0x3f6b851f
 8017c80:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8017c84:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8017c88:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 8017c8c:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
 8017c90:	1c4b      	adds	r3, r1, #1
 8017c92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c96:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8017c9a:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8017c9e:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8017ca2:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 8017ca6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8017caa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8017cae:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8017cb2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8017cb6:	eba8 0805 	sub.w	r8, r8, r5
 8017cba:	fb08 f808 	mul.w	r8, r8, r8
 8017cbe:	1bc0      	subs	r0, r0, r7
 8017cc0:	fb00 8000 	mla	r0, r0, r0, r8
 8017cc4:	eba3 030c 	sub.w	r3, r3, ip
 8017cc8:	fb03 0303 	mla	r3, r3, r3, r0
 8017ccc:	ee07 3a10 	vmov	s14, r3
 8017cd0:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8017cd4:	eef4 bae7 	vcmpe.f32	s23, s15
 8017cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cdc:	d445      	bmi.n	8017d6a <MotionDI_update+0x22ea>
 8017cde:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8017ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017ce6:	eef4 bae7 	vcmpe.f32	s23, s15
 8017cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cee:	d43c      	bmi.n	8017d6a <MotionDI_update+0x22ea>
 8017cf0:	fb05 f905 	mul.w	r9, r5, r5
 8017cf4:	fb07 9907 	mla	r9, r7, r7, r9
 8017cf8:	fb0c 990c 	mla	r9, ip, ip, r9
 8017cfc:	ee07 9a90 	vmov	s15, r9
 8017d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d04:	eef1 6ae7 	vsqrt.f32	s13, s15
 8017d08:	ee36 6acc 	vsub.f32	s12, s13, s24
 8017d0c:	eeb0 6ac6 	vabs.f32	s12, s12
 8017d10:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8017d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d18:	d427      	bmi.n	8017d6a <MotionDI_update+0x22ea>
 8017d1a:	ee76 6acd 	vsub.f32	s13, s13, s26
 8017d1e:	eef0 6ae6 	vabs.f32	s13, s13
 8017d22:	eef4 cae6 	vcmpe.f32	s25, s13
 8017d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d2a:	d41e      	bmi.n	8017d6a <MotionDI_update+0x22ea>
 8017d2c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8017d2e:	2800      	cmp	r0, #0
 8017d30:	f040 82ab 	bne.w	801828a <MotionDI_update+0x280a>
 8017d34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	f040 837c 	bne.w	8018434 <MotionDI_update+0x29b4>
 8017d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017d3e:	1a59      	subs	r1, r3, r1
 8017d40:	f101 39ff 	add.w	r9, r1, #4294967295
 8017d44:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8017d48:	4601      	mov	r1, r0
 8017d4a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8017d4c:	fb03 0319 	mls	r3, r3, r9, r0
 8017d50:	931c      	str	r3, [sp, #112]	; 0x70
 8017d52:	2301      	movs	r3, #1
 8017d54:	9321      	str	r3, [sp, #132]	; 0x84
 8017d56:	931e      	str	r3, [sp, #120]	; 0x78
 8017d58:	2300      	movs	r3, #0
 8017d5a:	65f1      	str	r1, [r6, #92]	; 0x5c
 8017d5c:	f8a6 7060 	strh.w	r7, [r6, #96]	; 0x60
 8017d60:	f8a6 5062 	strh.w	r5, [r6, #98]	; 0x62
 8017d64:	f8a6 c064 	strh.w	ip, [r6, #100]	; 0x64
 8017d68:	931d      	str	r3, [sp, #116]	; 0x74
 8017d6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017d6c:	3201      	adds	r2, #1
 8017d6e:	b212      	sxth	r2, r2
 8017d70:	4293      	cmp	r3, r2
 8017d72:	4611      	mov	r1, r2
 8017d74:	dc84      	bgt.n	8017c80 <MotionDI_update+0x2200>
 8017d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d78:	f896 804c 	ldrb.w	r8, [r6, #76]	; 0x4c
 8017d7c:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 8017d80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017d82:	ea43 0808 	orr.w	r8, r3, r8
 8017d86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d88:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 8017d8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017d8e:	6573      	str	r3, [r6, #84]	; 0x54
 8017d90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017d92:	f886 804c 	strb.w	r8, [r6, #76]	; 0x4c
 8017d96:	e9dd 9526 	ldrd	r9, r5, [sp, #152]	; 0x98
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	f040 81c4 	bne.w	8018128 <MotionDI_update+0x26a8>
 8017da0:	f1b8 0f00 	cmp.w	r8, #0
 8017da4:	f000 835d 	beq.w	8018462 <MotionDI_update+0x29e2>
 8017da8:	6937      	ldr	r7, [r6, #16]
 8017daa:	b1df      	cbz	r7, 8017de4 <MotionDI_update+0x2364>
 8017dac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017dae:	f7e8 fb4d 	bl	800044c <__aeabi_ui2d>
 8017db2:	a3d3      	add	r3, pc, #844	; (adr r3, 8018100 <MotionDI_update+0x2680>)
 8017db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db8:	f7e8 fbc2 	bl	8000540 <__aeabi_dmul>
 8017dbc:	4602      	mov	r2, r0
 8017dbe:	4638      	mov	r0, r7
 8017dc0:	4688      	mov	r8, r1
 8017dc2:	4617      	mov	r7, r2
 8017dc4:	f7e8 fb42 	bl	800044c <__aeabi_ui2d>
 8017dc8:	4602      	mov	r2, r0
 8017dca:	460b      	mov	r3, r1
 8017dcc:	4638      	mov	r0, r7
 8017dce:	4641      	mov	r1, r8
 8017dd0:	f7e8 f9fe 	bl	80001d0 <__aeabi_dsub>
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017dda:	f7e8 fe23 	bl	8000a24 <__aeabi_dcmplt>
 8017dde:	2800      	cmp	r0, #0
 8017de0:	f040 836a 	bne.w	80184b8 <MotionDI_update+0x2a38>
 8017de4:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8017de8:	2b01      	cmp	r3, #1
 8017dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017dec:	f000 8361 	beq.w	80184b2 <MotionDI_update+0x2a32>
 8017df0:	2b0a      	cmp	r3, #10
 8017df2:	f240 8361 	bls.w	80184b8 <MotionDI_update+0x2a38>
 8017df6:	4ac4      	ldr	r2, [pc, #784]	; (8018108 <MotionDI_update+0x2688>)
 8017df8:	edd2 9a00 	vldr	s19, [r2]
 8017dfc:	aa58      	add	r2, sp, #352	; 0x160
 8017dfe:	2100      	movs	r1, #0
 8017e00:	2300      	movs	r3, #0
 8017e02:	9218      	str	r2, [sp, #96]	; 0x60
 8017e04:	4610      	mov	r0, r2
 8017e06:	2234      	movs	r2, #52	; 0x34
 8017e08:	932b      	str	r3, [sp, #172]	; 0xac
 8017e0a:	932c      	str	r3, [sp, #176]	; 0xb0
 8017e0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8017e0e:	932e      	str	r3, [sp, #184]	; 0xb8
 8017e10:	f88d 10aa 	strb.w	r1, [sp, #170]	; 0xaa
 8017e14:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8017e18:	912f      	str	r1, [sp, #188]	; 0xbc
 8017e1a:	f8ad 10c0 	strh.w	r1, [sp, #192]	; 0xc0
 8017e1e:	9131      	str	r1, [sp, #196]	; 0xc4
 8017e20:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 8017e24:	f001 fa76 	bl	8019314 <memset>
 8017e28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	f000 8382 	beq.w	8018536 <MotionDI_update+0x2ab6>
 8017e32:	461a      	mov	r2, r3
 8017e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017e36:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8017e38:	3301      	adds	r3, #1
 8017e3a:	1a9b      	subs	r3, r3, r2
 8017e3c:	fb93 f2f1 	sdiv	r2, r3, r1
 8017e40:	fb01 3312 	mls	r3, r1, r2, r3
 8017e44:	fa0f fa83 	sxth.w	sl, r3
 8017e48:	f1ba 0f00 	cmp.w	sl, #0
 8017e4c:	da03      	bge.n	8017e56 <MotionDI_update+0x23d6>
 8017e4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017e50:	441a      	add	r2, r3
 8017e52:	fa0f fa82 	sxth.w	sl, r2
 8017e56:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 8017e5a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017e5e:	f9b3 0062 	ldrsh.w	r0, [r3, #98]	; 0x62
 8017e62:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8017e66:	f9b3 7064 	ldrsh.w	r7, [r3, #100]	; 0x64
 8017e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e6c:	4602      	mov	r2, r0
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	f000 8382 	beq.w	8018578 <MotionDI_update+0x2af8>
 8017e74:	2200      	movs	r2, #0
 8017e76:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 8017e7a:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8017e7e:	951d      	str	r5, [sp, #116]	; 0x74
 8017e80:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 8017e84:	4611      	mov	r1, r2
 8017e86:	46d3      	mov	fp, sl
 8017e88:	4686      	mov	lr, r0
 8017e8a:	46e0      	mov	r8, ip
 8017e8c:	463d      	mov	r5, r7
 8017e8e:	4682      	mov	sl, r0
 8017e90:	4459      	add	r1, fp
 8017e92:	fb91 f3f9 	sdiv	r3, r1, r9
 8017e96:	fb09 1313 	mls	r3, r9, r3, r1
 8017e9a:	b21b      	sxth	r3, r3
 8017e9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ea0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017ea4:	3201      	adds	r2, #1
 8017ea6:	f9b3 0060 	ldrsh.w	r0, [r3, #96]	; 0x60
 8017eaa:	f9b3 1062 	ldrsh.w	r1, [r3, #98]	; 0x62
 8017eae:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8017eb2:	4584      	cmp	ip, r0
 8017eb4:	bfb8      	it	lt
 8017eb6:	4684      	movlt	ip, r0
 8017eb8:	4580      	cmp	r8, r0
 8017eba:	bfa8      	it	ge
 8017ebc:	4680      	movge	r8, r0
 8017ebe:	458a      	cmp	sl, r1
 8017ec0:	bfb8      	it	lt
 8017ec2:	468a      	movlt	sl, r1
 8017ec4:	458e      	cmp	lr, r1
 8017ec6:	bfa8      	it	ge
 8017ec8:	468e      	movge	lr, r1
 8017eca:	429f      	cmp	r7, r3
 8017ecc:	bfb8      	it	lt
 8017ece:	461f      	movlt	r7, r3
 8017ed0:	429d      	cmp	r5, r3
 8017ed2:	bfa8      	it	ge
 8017ed4:	461d      	movge	r5, r3
 8017ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ed8:	b212      	sxth	r2, r2
 8017eda:	429a      	cmp	r2, r3
 8017edc:	4611      	mov	r1, r2
 8017ede:	dbd7      	blt.n	8017e90 <MotionDI_update+0x2410>
 8017ee0:	ebac 0808 	sub.w	r8, ip, r8
 8017ee4:	ee07 8a90 	vmov	s15, r8
 8017ee8:	4629      	mov	r1, r5
 8017eea:	e9dd 951c 	ldrd	r9, r5, [sp, #112]	; 0x70
 8017eee:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8017ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ef6:	4652      	mov	r2, sl
 8017ef8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 801810c <MotionDI_update+0x268c>
 8017efc:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8018110 <MotionDI_update+0x2690>
 8017f00:	eec7 5a29 	vdiv.f32	s11, s14, s19
 8017f04:	ee25 6a86 	vmul.f32	s12, s11, s12
 8017f08:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8017f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f10:	f300 82b8 	bgt.w	8018484 <MotionDI_update+0x2a04>
 8017f14:	eba2 0e0e 	sub.w	lr, r2, lr
 8017f18:	ee07 ea10 	vmov	s14, lr
 8017f1c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8017f20:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8017f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f28:	f300 82ac 	bgt.w	8018484 <MotionDI_update+0x2a04>
 8017f2c:	1a7f      	subs	r7, r7, r1
 8017f2e:	ee07 7a10 	vmov	s14, r7
 8017f32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017f36:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8017f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f3e:	f300 82a1 	bgt.w	8018484 <MotionDI_update+0x2a04>
 8017f42:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
 8017f46:	ee65 5a86 	vmul.f32	s11, s11, s12
 8017f4a:	eef4 5ae7 	vcmpe.f32	s11, s15
 8017f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f52:	f100 8297 	bmi.w	8018484 <MotionDI_update+0x2a04>
 8017f56:	eef4 6ae5 	vcmpe.f32	s13, s11
 8017f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f5e:	f300 8291 	bgt.w	8018484 <MotionDI_update+0x2a04>
 8017f62:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8017f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f6a:	f300 828b 	bgt.w	8018484 <MotionDI_update+0x2a04>
 8017f6e:	edd6 6a06 	vldr	s13, [r6, #24]
 8017f72:	ed96 7a07 	vldr	s14, [r6, #28]
 8017f76:	edd6 7a08 	vldr	s15, [r6, #32]
 8017f7a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017f7e:	f10d 03ab 	add.w	r3, sp, #171	; 0xab
 8017f82:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f8a:	9300      	str	r3, [sp, #0]
 8017f8c:	ee16 3a90 	vmov	r3, s13
 8017f90:	ee17 1a90 	vmov	r1, s15
 8017f94:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
 8017f98:	ee17 3a10 	vmov	r3, s14
 8017f9c:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 8017fa0:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
 8017fa4:	495b      	ldr	r1, [pc, #364]	; (8018114 <MotionDI_update+0x2694>)
 8017fa6:	aa2d      	add	r2, sp, #180	; 0xb4
 8017fa8:	eeb0 0a69 	vmov.f32	s0, s19
 8017fac:	a831      	add	r0, sp, #196	; 0xc4
 8017fae:	ab2e      	add	r3, sp, #184	; 0xb8
 8017fb0:	f7f8 fc92 	bl	80108d8 <getAccStats.constprop.0>
 8017fb4:	eddf 7a58 	vldr	s15, [pc, #352]	; 8018118 <MotionDI_update+0x2698>
 8017fb8:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8017fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fc4:	f140 82e4 	bpl.w	8018590 <MotionDI_update+0x2b10>
 8017fc8:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8017fcc:	2b01      	cmp	r3, #1
 8017fce:	f000 82df 	beq.w	8018590 <MotionDI_update+0x2b10>
 8017fd2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	f000 82db 	beq.w	8018590 <MotionDI_update+0x2b10>
 8017fda:	7d33      	ldrb	r3, [r6, #20]
 8017fdc:	2b03      	cmp	r3, #3
 8017fde:	f001 8123 	beq.w	8019228 <MotionDI_update+0x37a8>
 8017fe2:	f8df c138 	ldr.w	ip, [pc, #312]	; 801811c <MotionDI_update+0x269c>
 8017fe6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8017fe8:	edc6 8a04 	vstr	s17, [r6, #16]
 8017fec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017ff0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017ff2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017ff6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017ff8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017ffc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017ffe:	f8dc 2000 	ldr.w	r2, [ip]
 8018002:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8018004:	603a      	str	r2, [r7, #0]
 8018006:	2103      	movs	r1, #3
 8018008:	2200      	movs	r2, #0
 801800a:	7531      	strb	r1, [r6, #20]
 801800c:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
 8018010:	2b00      	cmp	r3, #0
 8018012:	f041 8104 	bne.w	801921e <MotionDI_update+0x379e>
 8018016:	ab33      	add	r3, sp, #204	; 0xcc
 8018018:	931e      	str	r3, [sp, #120]	; 0x78
 801801a:	ab65      	add	r3, sp, #404	; 0x194
 801801c:	931c      	str	r3, [sp, #112]	; 0x70
 801801e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8018022:	4f3e      	ldr	r7, [pc, #248]	; (801811c <MotionDI_update+0x269c>)
 8018024:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018028:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801802a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801802e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018030:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018034:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018036:	f8dc 3000 	ldr.w	r3, [ip]
 801803a:	603b      	str	r3, [r7, #0]
 801803c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801803e:	4f38      	ldr	r7, [pc, #224]	; (8018120 <MotionDI_update+0x26a0>)
 8018040:	f7e8 fa04 	bl	800044c <__aeabi_ui2d>
 8018044:	a32e      	add	r3, pc, #184	; (adr r3, 8018100 <MotionDI_update+0x2680>)
 8018046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804a:	f7e8 fa79 	bl	8000540 <__aeabi_dmul>
 801804e:	f7e8 fd4f 	bl	8000af0 <__aeabi_d2uiz>
 8018052:	edd6 6a07 	vldr	s13, [r6, #28]
 8018056:	ed96 7a08 	vldr	s14, [r6, #32]
 801805a:	edd6 7a06 	vldr	s15, [r6, #24]
 801805e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018060:	f8d6 c028 	ldr.w	ip, [r6, #40]	; 0x28
 8018064:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8018066:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8018068:	64b0      	str	r0, [r6, #72]	; 0x48
 801806a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801806e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018076:	edc3 6a01 	vstr	s13, [r3, #4]
 801807a:	ed83 7a02 	vstr	s14, [r3, #8]
 801807e:	edc3 7a00 	vstr	s15, [r3]
 8018082:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8018084:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8018086:	61fb      	str	r3, [r7, #28]
 8018088:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 801808c:	eddf 4a25 	vldr	s9, [pc, #148]	; 8018124 <MotionDI_update+0x26a4>
 8018090:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
 8018094:	f8c7 c010 	str.w	ip, [r7, #16]
 8018098:	6178      	str	r0, [r7, #20]
 801809a:	f8d6 c03c 	ldr.w	ip, [r6, #60]	; 0x3c
 801809e:	6c30      	ldr	r0, [r6, #64]	; 0x40
 80180a0:	61b9      	str	r1, [r7, #24]
 80180a2:	623a      	str	r2, [r7, #32]
 80180a4:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80180a6:	f8c7 e00c 	str.w	lr, [r7, #12]
 80180aa:	2200      	movs	r2, #0
 80180ac:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 80180b0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80180b4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80180b8:	e9c6 3202 	strd	r3, r2, [r6, #8]
 80180bc:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 80180c0:	62b8      	str	r0, [r7, #40]	; 0x28
 80180c2:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 80180c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80180c8:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 80180cc:	7d33      	ldrb	r3, [r6, #20]
 80180ce:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 80180d2:	ee65 6a24 	vmul.f32	s13, s10, s9
 80180d6:	ee26 7a24 	vmul.f32	s14, s12, s9
 80180da:	ee65 7aa4 	vmul.f32	s15, s11, s9
 80180de:	2901      	cmp	r1, #1
 80180e0:	edc7 6a01 	vstr	s13, [r7, #4]
 80180e4:	edc7 7a00 	vstr	s15, [r7]
 80180e8:	ed87 7a02 	vstr	s14, [r7, #8]
 80180ec:	f47d acee 	bne.w	8015acc <MotionDI_update+0x4c>
 80180f0:	2b03      	cmp	r3, #3
 80180f2:	f47d aceb 	bne.w	8015acc <MotionDI_update+0x4c>
 80180f6:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
 80180fa:	f7fd bce7 	b.w	8015acc <MotionDI_update+0x4c>
 80180fe:	bf00      	nop
 8018100:	d2f1a9fc 	.word	0xd2f1a9fc
 8018104:	3f50624d 	.word	0x3f50624d
 8018108:	20002508 	.word	0x20002508
 801810c:	3f8ccccd 	.word	0x3f8ccccd
 8018110:	3f99999a 	.word	0x3f99999a
 8018114:	200020cc 	.word	0x200020cc
 8018118:	3d23d70a 	.word	0x3d23d70a
 801811c:	200020bc 	.word	0x200020bc
 8018120:	20001a2c 	.word	0x20001a2c
 8018124:	3a83126f 	.word	0x3a83126f
 8018128:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801812a:	2b00      	cmp	r3, #0
 801812c:	f47f ae38 	bne.w	8017da0 <MotionDI_update+0x2320>
 8018130:	461a      	mov	r2, r3
 8018132:	4bd0      	ldr	r3, [pc, #832]	; (8018474 <MotionDI_update+0x29f4>)
 8018134:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8018138:	edd3 7a00 	vldr	s15, [r3]
 801813c:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 801813e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8018142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801814a:	4611      	mov	r1, r2
 801814c:	4610      	mov	r0, r2
 801814e:	4613      	mov	r3, r2
 8018150:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 8018154:	3101      	adds	r1, #1
 8018156:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801815a:	f9b7 800a 	ldrsh.w	r8, [r7, #10]
 801815e:	f9b7 e00c 	ldrsh.w	lr, [r7, #12]
 8018162:	fa1f fc81 	uxth.w	ip, r1
 8018166:	45e2      	cmp	sl, ip
 8018168:	444a      	add	r2, r9
 801816a:	4443      	add	r3, r8
 801816c:	4470      	add	r0, lr
 801816e:	f107 0706 	add.w	r7, r7, #6
 8018172:	d8ef      	bhi.n	8018154 <MotionDI_update+0x26d4>
 8018174:	9922      	ldr	r1, [sp, #136]	; 0x88
 8018176:	fb92 f2f1 	sdiv	r2, r2, r1
 801817a:	ee07 2a90 	vmov	s15, r2
 801817e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018182:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018186:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 801818a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801818e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018192:	f100 81ec 	bmi.w	801856e <MotionDI_update+0x2aee>
 8018196:	eef1 6a47 	vneg.f32	s13, s14
 801819a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801819e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181a2:	dd03      	ble.n	80181ac <MotionDI_update+0x272c>
 80181a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80181a8:	edc6 7a06 	vstr	s15, [r6, #24]
 80181ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80181ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80181b2:	ee07 3a90 	vmov	s15, r3
 80181b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80181be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181c2:	f100 81cf 	bmi.w	8018564 <MotionDI_update+0x2ae4>
 80181c6:	eef1 6a47 	vneg.f32	s13, s14
 80181ca:	eef4 6ae7 	vcmpe.f32	s13, s15
 80181ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d2:	dd03      	ble.n	80181dc <MotionDI_update+0x275c>
 80181d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80181d8:	edc6 7a07 	vstr	s15, [r6, #28]
 80181dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80181de:	fb90 f3f3 	sdiv	r3, r0, r3
 80181e2:	ee07 3a90 	vmov	s15, r3
 80181e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80181ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181f2:	f140 81ab 	bpl.w	801854c <MotionDI_update+0x2acc>
 80181f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80181fa:	edc6 7a08 	vstr	s15, [r6, #32]
 80181fe:	e5cf      	b.n	8017da0 <MotionDI_update+0x2320>
 8018200:	7d33      	ldrb	r3, [r6, #20]
 8018202:	2b03      	cmp	r3, #3
 8018204:	f47d aede 	bne.w	8015fc4 <MotionDI_update+0x544>
 8018208:	6932      	ldr	r2, [r6, #16]
 801820a:	2a00      	cmp	r2, #0
 801820c:	f43d aeda 	beq.w	8015fc4 <MotionDI_update+0x544>
 8018210:	ee07 2a90 	vmov	s15, r2
 8018214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018218:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 801821c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018228:	f77d aecc 	ble.w	8015fc4 <MotionDI_update+0x544>
 801822c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801822e:	2200      	movs	r2, #0
 8018230:	e9c6 1202 	strd	r1, r2, [r6, #8]
 8018234:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 8018238:	f7ff b82f 	b.w	801729a <MotionDI_update+0x181a>
 801823c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801823e:	2b01      	cmp	r3, #1
 8018240:	f43f acb1 	beq.w	8017ba6 <MotionDI_update+0x2126>
 8018244:	2300      	movs	r3, #0
 8018246:	9328      	str	r3, [sp, #160]	; 0xa0
 8018248:	f7fe b810 	b.w	801626c <MotionDI_update+0x7ec>
 801824c:	ee75 7a47 	vsub.f32	s15, s10, s14
 8018250:	ee17 0a90 	vmov	r0, s15
 8018254:	f7e8 f91c 	bl	8000490 <__aeabi_f2d>
 8018258:	ec41 0b10 	vmov	d0, r0, r1
 801825c:	f001 fa3c 	bl	80196d8 <sqrt>
 8018260:	ec51 0b10 	vmov	r0, r1, d0
 8018264:	f7e8 fc64 	bl	8000b30 <__aeabi_d2f>
 8018268:	f7ff bb87 	b.w	801797a <MotionDI_update+0x1efa>
 801826c:	ee75 7a47 	vsub.f32	s15, s10, s14
 8018270:	ee17 0a90 	vmov	r0, s15
 8018274:	f7e8 f90c 	bl	8000490 <__aeabi_f2d>
 8018278:	ec41 0b10 	vmov	d0, r0, r1
 801827c:	f001 fa2c 	bl	80196d8 <sqrt>
 8018280:	ec51 0b10 	vmov	r0, r1, d0
 8018284:	f7e8 fc54 	bl	8000b30 <__aeabi_d2f>
 8018288:	e42c      	b.n	8017ae4 <MotionDI_update+0x2064>
 801828a:	4603      	mov	r3, r0
 801828c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801828e:	4283      	cmp	r3, r0
 8018290:	f000 8118 	beq.w	80184c4 <MotionDI_update+0x2a44>
 8018294:	4618      	mov	r0, r3
 8018296:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018298:	3301      	adds	r3, #1
 801829a:	eba3 0a00 	sub.w	sl, r3, r0
 801829e:	fb9a f9fe 	sdiv	r9, sl, lr
 80182a2:	fb0e a919 	mls	r9, lr, r9, sl
 80182a6:	9318      	str	r3, [sp, #96]	; 0x60
 80182a8:	fa0f f389 	sxth.w	r3, r9
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	da03      	bge.n	80182b8 <MotionDI_update+0x2838>
 80182b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80182b2:	4499      	add	r9, r3
 80182b4:	fa0f f389 	sxth.w	r3, r9
 80182b8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80182ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80182be:	fa0f f08a 	sxth.w	r0, sl
 80182c2:	2800      	cmp	r0, #0
 80182c4:	fa1f fa8a 	uxth.w	sl, sl
 80182c8:	db2a      	blt.n	8018320 <MotionDI_update+0x28a0>
 80182ca:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 80182ce:	4418      	add	r0, r3
 80182d0:	ebaa 0a00 	sub.w	sl, sl, r0
 80182d4:	fb90 f3fe 	sdiv	r3, r0, lr
 80182d8:	fb0e 0313 	mls	r3, lr, r3, r0
 80182dc:	b21b      	sxth	r3, r3
 80182de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80182e2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80182e6:	3801      	subs	r0, #1
 80182e8:	f8b3 9062 	ldrh.w	r9, [r3, #98]	; 0x62
 80182ec:	f8b3 8060 	ldrh.w	r8, [r3, #96]	; 0x60
 80182f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80182f4:	fb19 f905 	smulbb	r9, r9, r5
 80182f8:	fb17 9808 	smlabb	r8, r7, r8, r9
 80182fc:	fb1c 8303 	smlabb	r3, ip, r3, r8
 8018300:	ee07 3a90 	vmov	s15, r3
 8018304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018308:	eb0a 0300 	add.w	r3, sl, r0
 801830c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018310:	eef4 7ae5 	vcmpe.f32	s15, s11
 8018314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018318:	f73f ad27 	bgt.w	8017d6a <MotionDI_update+0x22ea>
 801831c:	041b      	lsls	r3, r3, #16
 801831e:	d5d9      	bpl.n	80182d4 <MotionDI_update+0x2854>
 8018320:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018322:	fb93 f9fe 	sdiv	r9, r3, lr
 8018326:	fb0e 3919 	mls	r9, lr, r9, r3
 801832a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801832c:	fa0f f089 	sxth.w	r0, r9
 8018330:	eba3 0901 	sub.w	r9, r3, r1
 8018334:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8018338:	9318      	str	r3, [sp, #96]	; 0x60
 801833a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801833c:	901d      	str	r0, [sp, #116]	; 0x74
 801833e:	f103 0801 	add.w	r8, r3, #1
 8018342:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018344:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8018348:	f109 30ff 	add.w	r0, r9, #4294967295
 801834c:	4699      	mov	r9, r3
 801834e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018350:	eba9 0903 	sub.w	r9, r9, r3
 8018354:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018356:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 801835a:	45f0      	cmp	r8, lr
 801835c:	fb03 9310 	mls	r3, r3, r0, r9
 8018360:	bfa8      	it	ge
 8018362:	46f0      	movge	r8, lr
 8018364:	fa1f f088 	uxth.w	r0, r8
 8018368:	65cb      	str	r3, [r1, #92]	; 0x5c
 801836a:	2301      	movs	r3, #1
 801836c:	9021      	str	r0, [sp, #132]	; 0x84
 801836e:	f8a1 7060 	strh.w	r7, [r1, #96]	; 0x60
 8018372:	f8a1 5062 	strh.w	r5, [r1, #98]	; 0x62
 8018376:	f8a1 c064 	strh.w	ip, [r1, #100]	; 0x64
 801837a:	931e      	str	r3, [sp, #120]	; 0x78
 801837c:	e4f5      	b.n	8017d6a <MotionDI_update+0x22ea>
 801837e:	ee6c ba0c 	vmul.f32	s23, s24, s24
 8018382:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8018478 <MotionDI_update+0x29f8>
 8018386:	ee2b 2a82 	vmul.f32	s4, s23, s4
 801838a:	f7fd be2e 	b.w	8015fea <MotionDI_update+0x56a>
 801838e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8018392:	429a      	cmp	r2, r3
 8018394:	bf14      	ite	ne
 8018396:	f5a2 436a 	subne.w	r3, r2, #59904	; 0xea00
 801839a:	9b1f      	ldreq	r3, [sp, #124]	; 0x7c
 801839c:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 80183a0:	921d      	str	r2, [sp, #116]	; 0x74
 80183a2:	bf18      	it	ne
 80183a4:	3b60      	subne	r3, #96	; 0x60
 80183a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80183a8:	931c      	str	r3, [sp, #112]	; 0x70
 80183aa:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 80183ae:	9324      	str	r3, [sp, #144]	; 0x90
 80183b0:	429a      	cmp	r2, r3
 80183b2:	f000 80b6 	beq.w	8018522 <MotionDI_update+0x2aa2>
 80183b6:	4619      	mov	r1, r3
 80183b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80183ba:	911f      	str	r1, [sp, #124]	; 0x7c
 80183bc:	3301      	adds	r3, #1
 80183be:	1a9a      	subs	r2, r3, r2
 80183c0:	fb92 fcf1 	sdiv	ip, r2, r1
 80183c4:	fb01 231c 	mls	r3, r1, ip, r2
 80183c8:	b21a      	sxth	r2, r3
 80183ca:	2a00      	cmp	r2, #0
 80183cc:	bfbc      	itt	lt
 80183ce:	18ca      	addlt	r2, r1, r3
 80183d0:	b212      	sxthlt	r2, r2
 80183d2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80183d4:	b20b      	sxth	r3, r1
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	dd28      	ble.n	801842c <MotionDI_update+0x29ac>
 80183da:	f101 3cff 	add.w	ip, r1, #4294967295
 80183de:	460b      	mov	r3, r1
 80183e0:	fa1f fc8c 	uxth.w	ip, ip
 80183e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80183e6:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 80183ea:	f10c 0c01 	add.w	ip, ip, #1
 80183ee:	46aa      	mov	sl, r5
 80183f0:	1a40      	subs	r0, r0, r1
 80183f2:	4494      	add	ip, r2
 80183f4:	461d      	mov	r5, r3
 80183f6:	e002      	b.n	80183fe <MotionDI_update+0x297e>
 80183f8:	3201      	adds	r2, #1
 80183fa:	4594      	cmp	ip, r2
 80183fc:	d011      	beq.n	8018422 <MotionDI_update+0x29a2>
 80183fe:	fb92 f3fe 	sdiv	r3, r2, lr
 8018402:	fb0e 2313 	mls	r3, lr, r3, r2
 8018406:	b21b      	sxth	r3, r3
 8018408:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801840c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018410:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018412:	1841      	adds	r1, r0, r1
 8018414:	65d9      	str	r1, [r3, #92]	; 0x5c
 8018416:	d5ef      	bpl.n	80183f8 <MotionDI_update+0x2978>
 8018418:	2d00      	cmp	r5, #0
 801841a:	d0ed      	beq.n	80183f8 <MotionDI_update+0x2978>
 801841c:	3d01      	subs	r5, #1
 801841e:	b2ad      	uxth	r5, r5
 8018420:	e7ea      	b.n	80183f8 <MotionDI_update+0x2978>
 8018422:	462b      	mov	r3, r5
 8018424:	9521      	str	r5, [sp, #132]	; 0x84
 8018426:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 801842a:	4655      	mov	r5, sl
 801842c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801842e:	6573      	str	r3, [r6, #84]	; 0x54
 8018430:	f7ff bbee 	b.w	8017c10 <MotionDI_update+0x2190>
 8018434:	9820      	ldr	r0, [sp, #128]	; 0x80
 8018436:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018438:	4680      	mov	r8, r0
 801843a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801843c:	1a59      	subs	r1, r3, r1
 801843e:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8018442:	3901      	subs	r1, #1
 8018444:	eba8 0900 	sub.w	r9, r8, r0
 8018448:	fb03 9111 	mls	r1, r3, r1, r9
 801844c:	e481      	b.n	8017d52 <MotionDI_update+0x22d2>
 801844e:	4a0b      	ldr	r2, [pc, #44]	; (801847c <MotionDI_update+0x29fc>)
 8018450:	4293      	cmp	r3, r2
 8018452:	d941      	bls.n	80184d8 <MotionDI_update+0x2a58>
 8018454:	7d33      	ldrb	r3, [r6, #20]
 8018456:	3b00      	subs	r3, #0
 8018458:	bf18      	it	ne
 801845a:	2301      	movne	r3, #1
 801845c:	7533      	strb	r3, [r6, #20]
 801845e:	f7fd bdb1 	b.w	8015fc4 <MotionDI_update+0x544>
 8018462:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8018466:	f8c6 800c 	str.w	r8, [r6, #12]
 801846a:	f8a6 81c8 	strh.w	r8, [r6, #456]	; 0x1c8
 801846e:	60b3      	str	r3, [r6, #8]
 8018470:	f7ff bb9f 	b.w	8017bb2 <MotionDI_update+0x2132>
 8018474:	20002508 	.word	0x20002508
 8018478:	3a03126f 	.word	0x3a03126f
 801847c:	000d2f00 	.word	0x000d2f00
 8018480:	00000000 	.word	0x00000000
 8018484:	ab33      	add	r3, sp, #204	; 0xcc
 8018486:	931e      	str	r3, [sp, #120]	; 0x78
 8018488:	ab65      	add	r3, sp, #404	; 0x194
 801848a:	931c      	str	r3, [sp, #112]	; 0x70
 801848c:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8018490:	2300      	movs	r3, #0
 8018492:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8018496:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 801849a:	60b3      	str	r3, [r6, #8]
 801849c:	2300      	movs	r3, #0
 801849e:	60f3      	str	r3, [r6, #12]
 80184a0:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 80184a4:	7d33      	ldrb	r3, [r6, #20]
 80184a6:	f7fe bf00 	b.w	80172aa <MotionDI_update+0x182a>
 80184aa:	ed5f 9a0b 	vldr	s19, [pc, #-44]	; 8018480 <MotionDI_update+0x2a00>
 80184ae:	f7fd bec3 	b.w	8016238 <MotionDI_update+0x7b8>
 80184b2:	2b05      	cmp	r3, #5
 80184b4:	f63f ac9f 	bhi.w	8017df6 <MotionDI_update+0x2376>
 80184b8:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 80184bc:	60b3      	str	r3, [r6, #8]
 80184be:	2300      	movs	r3, #0
 80184c0:	f7ff bb74 	b.w	8017bac <MotionDI_update+0x212c>
 80184c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80184c6:	3301      	adds	r3, #1
 80184c8:	fb93 f9fe 	sdiv	r9, r3, lr
 80184cc:	fb0e 3919 	mls	r9, lr, r9, r3
 80184d0:	9318      	str	r3, [sp, #96]	; 0x60
 80184d2:	fa0f f389 	sxth.w	r3, r9
 80184d6:	e6ef      	b.n	80182b8 <MotionDI_update+0x2838>
 80184d8:	4a2a      	ldr	r2, [pc, #168]	; (8018584 <MotionDI_update+0x2b04>)
 80184da:	4293      	cmp	r3, r2
 80184dc:	f67f ae90 	bls.w	8018200 <MotionDI_update+0x2780>
 80184e0:	7d33      	ldrb	r3, [r6, #20]
 80184e2:	2b02      	cmp	r3, #2
 80184e4:	bf28      	it	cs
 80184e6:	2302      	movcs	r3, #2
 80184e8:	7533      	strb	r3, [r6, #20]
 80184ea:	f7fd bd6b 	b.w	8015fc4 <MotionDI_update+0x544>
 80184ee:	4926      	ldr	r1, [pc, #152]	; (8018588 <MotionDI_update+0x2b08>)
 80184f0:	4608      	mov	r0, r1
 80184f2:	460a      	mov	r2, r1
 80184f4:	ed32 7a01 	vldmdb	r2!, {s14}
 80184f8:	edd1 7a00 	vldr	s15, [r1]
 80184fc:	edd0 6a01 	vldr	s13, [r0, #4]
 8018500:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018504:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018508:	ee27 7a06 	vmul.f32	s14, s14, s12
 801850c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018510:	3004      	adds	r0, #4
 8018512:	edc4 6a47 	vstr	s13, [r4, #284]	; 0x11c
 8018516:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 801851a:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
 801851e:	f7fe be11 	b.w	8017144 <MotionDI_update+0x16c4>
 8018522:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018524:	3301      	adds	r3, #1
 8018526:	4611      	mov	r1, r2
 8018528:	fb93 fcf2 	sdiv	ip, r3, r2
 801852c:	fb02 321c 	mls	r2, r2, ip, r3
 8018530:	b212      	sxth	r2, r2
 8018532:	911f      	str	r1, [sp, #124]	; 0x7c
 8018534:	e74d      	b.n	80183d2 <MotionDI_update+0x2952>
 8018536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018538:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801853a:	f103 0801 	add.w	r8, r3, #1
 801853e:	fb98 f3f2 	sdiv	r3, r8, r2
 8018542:	fb02 8313 	mls	r3, r2, r3, r8
 8018546:	fa0f fa83 	sxth.w	sl, r3
 801854a:	e484      	b.n	8017e56 <MotionDI_update+0x23d6>
 801854c:	eef1 6a47 	vneg.f32	s13, s14
 8018550:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018558:	bf44      	itt	mi
 801855a:	ee77 7a27 	vaddmi.f32	s15, s14, s15
 801855e:	edc6 7a08 	vstrmi	s15, [r6, #32]
 8018562:	e41d      	b.n	8017da0 <MotionDI_update+0x2320>
 8018564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018568:	edc6 7a07 	vstr	s15, [r6, #28]
 801856c:	e636      	b.n	80181dc <MotionDI_update+0x275c>
 801856e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018572:	edc6 7a06 	vstr	s15, [r6, #24]
 8018576:	e619      	b.n	80181ac <MotionDI_update+0x272c>
 8018578:	eddf 7a04 	vldr	s15, [pc, #16]	; 801858c <MotionDI_update+0x2b0c>
 801857c:	4639      	mov	r1, r7
 801857e:	4686      	mov	lr, r0
 8018580:	e4ba      	b.n	8017ef8 <MotionDI_update+0x2478>
 8018582:	bf00      	nop
 8018584:	00069780 	.word	0x00069780
 8018588:	20001abc 	.word	0x20001abc
 801858c:	00000000 	.word	0x00000000
 8018590:	4bb8      	ldr	r3, [pc, #736]	; (8018874 <MotionDI_update+0x2df4>)
 8018592:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018596:	ab33      	add	r3, sp, #204	; 0xcc
 8018598:	931e      	str	r3, [sp, #120]	; 0x78
 801859a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801859e:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
 80185a2:	af3f      	add	r7, sp, #252	; 0xfc
 80185a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80185a6:	971f      	str	r7, [sp, #124]	; 0x7c
 80185a8:	6008      	str	r0, [r1, #0]
 80185aa:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80185ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80185b0:	f88d c0d2 	strb.w	ip, [sp, #210]	; 0xd2
 80185b4:	af65      	add	r7, sp, #404	; 0x194
 80185b6:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 80185ba:	2300      	movs	r3, #0
 80185bc:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 80185c0:	971c      	str	r7, [sp, #112]	; 0x70
 80185c2:	4619      	mov	r1, r3
 80185c4:	e9c8 3300 	strd	r3, r3, [r8]
 80185c8:	e9c0 3300 	strd	r3, r3, [r0]
 80185cc:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80185d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80185d4:	f8c8 3008 	str.w	r3, [r8, #8]
 80185d8:	6183      	str	r3, [r0, #24]
 80185da:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
 80185de:	2200      	movs	r2, #0
 80185e0:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 80185e4:	605a      	str	r2, [r3, #4]
 80185e6:	609a      	str	r2, [r3, #8]
 80185e8:	60da      	str	r2, [r3, #12]
 80185ea:	615a      	str	r2, [r3, #20]
 80185ec:	619a      	str	r2, [r3, #24]
 80185ee:	61da      	str	r2, [r3, #28]
 80185f0:	601a      	str	r2, [r3, #0]
 80185f2:	f8c3 c010 	str.w	ip, [r3, #16]
 80185f6:	2270      	movs	r2, #112	; 0x70
 80185f8:	f8c3 c020 	str.w	ip, [r3, #32]
 80185fc:	f000 fe8a 	bl	8019314 <memset>
 8018600:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 8018604:	f8b6 1052 	ldrh.w	r1, [r6, #82]	; 0x52
 8018608:	f9b6 3058 	ldrsh.w	r3, [r6, #88]	; 0x58
 801860c:	428a      	cmp	r2, r1
 801860e:	f103 0301 	add.w	r3, r3, #1
 8018612:	f000 8616 	beq.w	8019242 <MotionDI_update+0x37c2>
 8018616:	1a9b      	subs	r3, r3, r2
 8018618:	fb93 f0f1 	sdiv	r0, r3, r1
 801861c:	fb01 3310 	mls	r3, r1, r0, r3
 8018620:	b21f      	sxth	r7, r3
 8018622:	2f00      	cmp	r7, #0
 8018624:	bfbc      	itt	lt
 8018626:	185b      	addlt	r3, r3, r1
 8018628:	b21f      	sxthlt	r7, r3
 801862a:	2a00      	cmp	r2, #0
 801862c:	f000 85ef 	beq.w	801920e <MotionDI_update+0x378e>
 8018630:	eddf 6a91 	vldr	s13, [pc, #580]	; 8018878 <MotionDI_update+0x2df8>
 8018634:	2000      	movs	r0, #0
 8018636:	eeb0 6a66 	vmov.f32	s12, s13
 801863a:	eef0 5a66 	vmov.f32	s11, s13
 801863e:	eb00 0c07 	add.w	ip, r0, r7
 8018642:	fb9c f3f1 	sdiv	r3, ip, r1
 8018646:	fb01 c313 	mls	r3, r1, r3, ip
 801864a:	b2db      	uxtb	r3, r3
 801864c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018650:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018654:	3001      	adds	r0, #1
 8018656:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 801865a:	ee05 ca10 	vmov	s10, ip
 801865e:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 8018662:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8018666:	ee07 ca10 	vmov	s14, ip
 801866a:	ee07 3a90 	vmov	s15, r3
 801866e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8018672:	b2c3      	uxtb	r3, r0
 8018674:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801867c:	429a      	cmp	r2, r3
 801867e:	ee75 5a85 	vadd.f32	s11, s11, s10
 8018682:	ee36 6a07 	vadd.f32	s12, s12, s14
 8018686:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801868a:	4618      	mov	r0, r3
 801868c:	d8d7      	bhi.n	801863e <MotionDI_update+0x2bbe>
 801868e:	ee07 2a10 	vmov	s14, r2
 8018692:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018696:	eddf 7a78 	vldr	s15, [pc, #480]	; 8018878 <MotionDI_update+0x2df8>
 801869a:	ee86 aa07 	vdiv.f32	s20, s12, s14
 801869e:	2000      	movs	r0, #0
 80186a0:	ee86 9a87 	vdiv.f32	s18, s13, s14
 80186a4:	eec5 aa87 	vdiv.f32	s21, s11, s14
 80186a8:	eef0 3a67 	vmov.f32	s7, s15
 80186ac:	eeb0 4a67 	vmov.f32	s8, s15
 80186b0:	eef0 4a67 	vmov.f32	s9, s15
 80186b4:	eeb0 5a67 	vmov.f32	s10, s15
 80186b8:	eef0 5a67 	vmov.f32	s11, s15
 80186bc:	eb00 0c07 	add.w	ip, r0, r7
 80186c0:	fb9c f3f1 	sdiv	r3, ip, r1
 80186c4:	fb01 c313 	mls	r3, r1, r3, ip
 80186c8:	b2db      	uxtb	r3, r3
 80186ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80186ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80186d2:	3001      	adds	r0, #1
 80186d4:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 80186d8:	ee06 ca10 	vmov	s12, ip
 80186dc:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 80186e0:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80186e4:	ee06 ca90 	vmov	s13, ip
 80186e8:	ee07 3a10 	vmov	s14, r3
 80186ec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80186f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80186f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80186f8:	ee36 6a6a 	vsub.f32	s12, s12, s21
 80186fc:	ee76 6aca 	vsub.f32	s13, s13, s20
 8018700:	ee37 7a49 	vsub.f32	s14, s14, s18
 8018704:	b2c3      	uxtb	r3, r0
 8018706:	429a      	cmp	r2, r3
 8018708:	eee6 5a06 	vfma.f32	s11, s12, s12
 801870c:	4618      	mov	r0, r3
 801870e:	eea6 5a26 	vfma.f32	s10, s12, s13
 8018712:	eea6 4aa6 	vfma.f32	s8, s13, s13
 8018716:	eee6 4a07 	vfma.f32	s9, s12, s14
 801871a:	eee6 3a87 	vfma.f32	s7, s13, s14
 801871e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8018722:	d8cb      	bhi.n	80186bc <MotionDI_update+0x2c3c>
 8018724:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018726:	edc3 5a00 	vstr	s11, [r3]
 801872a:	ed83 5a01 	vstr	s10, [r3, #4]
 801872e:	edc3 4a02 	vstr	s9, [r3, #8]
 8018732:	ed83 4a03 	vstr	s8, [r3, #12]
 8018736:	edc3 3a04 	vstr	s7, [r3, #16]
 801873a:	edc3 7a05 	vstr	s15, [r3, #20]
 801873e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018740:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8018744:	6819      	ldr	r1, [r3, #0]
 8018746:	68da      	ldr	r2, [r3, #12]
 8018748:	f8ca 1000 	str.w	r1, [sl]
 801874c:	4618      	mov	r0, r3
 801874e:	695b      	ldr	r3, [r3, #20]
 8018750:	f8ca 3020 	str.w	r3, [sl, #32]
 8018754:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018756:	6841      	ldr	r1, [r0, #4]
 8018758:	691b      	ldr	r3, [r3, #16]
 801875a:	f8ca 2010 	str.w	r2, [sl, #16]
 801875e:	f8ca 1004 	str.w	r1, [sl, #4]
 8018762:	6882      	ldr	r2, [r0, #8]
 8018764:	f8ca 100c 	str.w	r1, [sl, #12]
 8018768:	4650      	mov	r0, sl
 801876a:	4641      	mov	r1, r8
 801876c:	f8ca 2008 	str.w	r2, [sl, #8]
 8018770:	f8ca 2018 	str.w	r2, [sl, #24]
 8018774:	f8ca 3014 	str.w	r3, [sl, #20]
 8018778:	f8ca 301c 	str.w	r3, [sl, #28]
 801877c:	f7f6 fb52 	bl	800ee24 <st_accCal_MEMS_EIG3>
 8018780:	edd8 7a01 	vldr	s15, [r8, #4]
 8018784:	edd8 6a00 	vldr	s13, [r8]
 8018788:	ed98 7a02 	vldr	s14, [r8, #8]
 801878c:	eef0 7ae7 	vabs.f32	s15, s15
 8018790:	eef0 6ae6 	vabs.f32	s13, s13
 8018794:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801879c:	eeb0 7ac7 	vabs.f32	s14, s14
 80187a0:	bfb4      	ite	lt
 80187a2:	eeb0 6a66 	vmovlt.f32	s12, s13
 80187a6:	eeb0 6a67 	vmovge.f32	s12, s15
 80187aa:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80187ae:	bf88      	it	hi
 80187b0:	eef0 7a66 	vmovhi.f32	s15, s13
 80187b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80187bc:	bfa8      	it	ge
 80187be:	eeb0 6a47 	vmovge.f32	s12, s14
 80187c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c6:	bf88      	it	hi
 80187c8:	eef0 7a47 	vmovhi.f32	s15, s14
 80187cc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80187d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80187d4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80187d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187dc:	f73f ae58 	bgt.w	8018490 <MotionDI_update+0x2a10>
 80187e0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8018878 <MotionDI_update+0x2df8>
 80187e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80187e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80187e8:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 80187ec:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 80187f0:	2200      	movs	r2, #0
 80187f2:	e9c0 2200 	strd	r2, r2, [r0]
 80187f6:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80187fa:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80187fe:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8018802:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 8018806:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 801880a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 801880e:	6102      	str	r2, [r0, #16]
 8018810:	6142      	str	r2, [r0, #20]
 8018812:	6182      	str	r2, [r0, #24]
 8018814:	2900      	cmp	r1, #0
 8018816:	f000 80be 	beq.w	8018996 <MotionDI_update+0x2f16>
 801881a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801881c:	f8b6 c052 	ldrh.w	ip, [r6, #82]	; 0x52
 8018820:	edd3 fa00 	vldr	s31, [r3]
 8018824:	ed93 fa07 	vldr	s30, [r3, #28]
 8018828:	edd3 ea0d 	vldr	s29, [r3, #52]	; 0x34
 801882c:	edd3 ca01 	vldr	s25, [r3, #4]
 8018830:	ed93 ca02 	vldr	s24, [r3, #8]
 8018834:	edd3 ba08 	vldr	s23, [r3, #32]
 8018838:	ed93 ba03 	vldr	s22, [r3, #12]
 801883c:	ed93 0a04 	vldr	s0, [r3, #16]
 8018840:	edd3 0a05 	vldr	s1, [r3, #20]
 8018844:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
 8018848:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801884c:	ed93 2a0b 	vldr	s4, [r3, #44]	; 0x2c
 8018850:	edd3 2a0e 	vldr	s5, [r3, #56]	; 0x38
 8018854:	ed93 3a0f 	vldr	s6, [r3, #60]	; 0x3c
 8018858:	edd3 3a10 	vldr	s7, [r3, #64]	; 0x40
 801885c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018860:	eeb0 4a67 	vmov.f32	s8, s15
 8018864:	eeb0 da67 	vmov.f32	s26, s15
 8018868:	eef0 da67 	vmov.f32	s27, s15
 801886c:	eeb0 ea67 	vmov.f32	s28, s15
 8018870:	4660      	mov	r0, ip
 8018872:	e003      	b.n	801887c <MotionDI_update+0x2dfc>
 8018874:	0801b5a8 	.word	0x0801b5a8
 8018878:	00000000 	.word	0x00000000
 801887c:	eb02 0c07 	add.w	ip, r2, r7
 8018880:	fb9c f3f0 	sdiv	r3, ip, r0
 8018884:	fb00 c313 	mls	r3, r0, r3, ip
 8018888:	b2db      	uxtb	r3, r3
 801888a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801888e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018892:	3201      	adds	r2, #1
 8018894:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8018898:	ee06 ca10 	vmov	s12, ip
 801889c:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 80188a0:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80188a4:	ee06 ca90 	vmov	s13, ip
 80188a8:	ee07 3a10 	vmov	s14, r3
 80188ac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80188b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80188b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80188b8:	ee36 6a6a 	vsub.f32	s12, s12, s21
 80188bc:	ee37 7a49 	vsub.f32	s14, s14, s18
 80188c0:	ee76 6aca 	vsub.f32	s13, s13, s20
 80188c4:	ee66 4a06 	vmul.f32	s9, s12, s12
 80188c8:	ee26 5aa6 	vmul.f32	s10, s13, s13
 80188cc:	ee67 5a07 	vmul.f32	s11, s14, s14
 80188d0:	eea6 ba24 	vfma.f32	s22, s12, s9
 80188d4:	b2d3      	uxtb	r3, r2
 80188d6:	4299      	cmp	r1, r3
 80188d8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80188dc:	461a      	mov	r2, r3
 80188de:	eea6 1a05 	vfma.f32	s2, s12, s10
 80188e2:	eea7 2a05 	vfma.f32	s4, s14, s10
 80188e6:	eee4 faa4 	vfma.f32	s31, s9, s9
 80188ea:	eea6 0aa4 	vfma.f32	s0, s13, s9
 80188ee:	eea5 fa05 	vfma.f32	s30, s10, s10
 80188f2:	eee6 1a85 	vfma.f32	s3, s13, s10
 80188f6:	eee6 2a25 	vfma.f32	s5, s12, s11
 80188fa:	eee7 3a25 	vfma.f32	s7, s14, s11
 80188fe:	ee3e ea24 	vadd.f32	s28, s28, s9
 8018902:	ee7d da85 	vadd.f32	s27, s27, s10
 8018906:	ee66 4a26 	vmul.f32	s9, s12, s13
 801890a:	ee26 5a07 	vmul.f32	s10, s12, s14
 801890e:	ee26 6a87 	vmul.f32	s12, s13, s14
 8018912:	ed9d 7a20 	vldr	s14, [sp, #128]	; 0x80
 8018916:	ee37 7a05 	vadd.f32	s14, s14, s10
 801891a:	eee5 eaa5 	vfma.f32	s29, s11, s11
 801891e:	eea6 3aa5 	vfma.f32	s6, s13, s11
 8018922:	eee4 caa4 	vfma.f32	s25, s9, s9
 8018926:	eea5 ca05 	vfma.f32	s24, s10, s10
 801892a:	eee6 ba06 	vfma.f32	s23, s12, s12
 801892e:	ee3d da25 	vadd.f32	s26, s26, s11
 8018932:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8018936:	ee34 4a06 	vadd.f32	s8, s8, s12
 801893a:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
 801893e:	d89d      	bhi.n	801887c <MotionDI_update+0x2dfc>
 8018940:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018942:	edc3 fa00 	vstr	s31, [r3]
 8018946:	ed83 fa07 	vstr	s30, [r3, #28]
 801894a:	edc3 ea0d 	vstr	s29, [r3, #52]	; 0x34
 801894e:	ed83 ea12 	vstr	s28, [r3, #72]	; 0x48
 8018952:	edc3 da16 	vstr	s27, [r3, #88]	; 0x58
 8018956:	ed83 da19 	vstr	s26, [r3, #100]	; 0x64
 801895a:	edc3 ca01 	vstr	s25, [r3, #4]
 801895e:	ed83 ca02 	vstr	s24, [r3, #8]
 8018962:	edc3 ba08 	vstr	s23, [r3, #32]
 8018966:	ed83 ba03 	vstr	s22, [r3, #12]
 801896a:	ed83 0a04 	vstr	s0, [r3, #16]
 801896e:	edc3 0a05 	vstr	s1, [r3, #20]
 8018972:	ed83 1a09 	vstr	s2, [r3, #36]	; 0x24
 8018976:	edc3 1a0a 	vstr	s3, [r3, #40]	; 0x28
 801897a:	ed83 2a0b 	vstr	s4, [r3, #44]	; 0x2c
 801897e:	edc3 2a0e 	vstr	s5, [r3, #56]	; 0x38
 8018982:	ed83 3a0f 	vstr	s6, [r3, #60]	; 0x3c
 8018986:	edc3 3a10 	vstr	s7, [r3, #64]	; 0x40
 801898a:	ed83 4a17 	vstr	s8, [r3, #92]	; 0x5c
 801898e:	ed83 7a14 	vstr	s14, [r3, #80]	; 0x50
 8018992:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8018996:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018998:	f8cd a098 	str.w	sl, [sp, #152]	; 0x98
 801899c:	4617      	mov	r7, r2
 801899e:	ee07 1a90 	vmov	s15, r1
 80189a2:	2300      	movs	r3, #0
 80189a4:	f8d2 c048 	ldr.w	ip, [r2, #72]	; 0x48
 80189a8:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80189aa:	657b      	str	r3, [r7, #84]	; 0x54
 80189ac:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80189ae:	663b      	str	r3, [r7, #96]	; 0x60
 80189b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80189b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80189b6:	e9cd 9523 	strd	r9, r5, [sp, #140]	; 0x8c
 80189ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80189bc:	647a      	str	r2, [r7, #68]	; 0x44
 80189be:	2201      	movs	r2, #1
 80189c0:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80189c4:	f8c7 c018 	str.w	ip, [r7, #24]
 80189c8:	6338      	str	r0, [r7, #48]	; 0x30
 80189ca:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 80189ce:	2100      	movs	r1, #0
 80189d0:	4692      	mov	sl, r2
 80189d2:	469b      	mov	fp, r3
 80189d4:	f10a 33ff 	add.w	r3, sl, #4294967295
 80189d8:	fb0a f303 	mul.w	r3, sl, r3
 80189dc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80189e0:	f81b 2b01 	ldrb.w	r2, [fp], #1
 80189e4:	9220      	str	r2, [sp, #128]	; 0x80
 80189e6:	105b      	asrs	r3, r3, #1
 80189e8:	425b      	negs	r3, r3
 80189ea:	1c8f      	adds	r7, r1, #2
 80189ec:	1ccd      	adds	r5, r1, #3
 80189ee:	1d0a      	adds	r2, r1, #4
 80189f0:	f101 0e05 	add.w	lr, r1, #5
 80189f4:	eb07 0803 	add.w	r8, r7, r3
 80189f8:	462f      	mov	r7, r5
 80189fa:	4615      	mov	r5, r2
 80189fc:	4672      	mov	r2, lr
 80189fe:	441a      	add	r2, r3
 8018a00:	9222      	str	r2, [sp, #136]	; 0x88
 8018a02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018a04:	f101 0c01 	add.w	ip, r1, #1
 8018a08:	18c8      	adds	r0, r1, r3
 8018a0a:	eb0c 0903 	add.w	r9, ip, r3
 8018a0e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8018a12:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018a14:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018a16:	ed9c 7a00 	vldr	s14, [ip]
 8018a1a:	fb12 fe02 	smulbb	lr, r2, r2
 8018a1e:	ee07 ea90 	vmov	s15, lr
 8018a22:	441d      	add	r5, r3
 8018a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a28:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8018a2c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8018a2e:	9221      	str	r2, [sp, #132]	; 0x84
 8018a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a34:	441f      	add	r7, r3
 8018a36:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8018a3a:	f1ba 0f07 	cmp.w	sl, #7
 8018a3e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8018a42:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8018a46:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8018a4a:	9222      	str	r2, [sp, #136]	; 0x88
 8018a4c:	edcc 7a00 	vstr	s15, [ip]
 8018a50:	fa5f fe8a 	uxtb.w	lr, sl
 8018a54:	d06e      	beq.n	8018b34 <MotionDI_update+0x30b4>
 8018a56:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8018a58:	f89b c000 	ldrb.w	ip, [fp]
 8018a5c:	ed99 7a00 	vldr	s14, [r9]
 8018a60:	fb1c fc05 	smulbb	ip, ip, r5
 8018a64:	ee07 ca90 	vmov	s15, ip
 8018a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a6c:	f101 0c06 	add.w	ip, r1, #6
 8018a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a74:	4463      	add	r3, ip
 8018a76:	f1be 0f06 	cmp.w	lr, #6
 8018a7a:	462a      	mov	r2, r5
 8018a7c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8018a80:	edc9 7a00 	vstr	s15, [r9]
 8018a84:	d056      	beq.n	8018b34 <MotionDI_update+0x30b4>
 8018a86:	f89b c001 	ldrb.w	ip, [fp, #1]
 8018a8a:	ed98 7a00 	vldr	s14, [r8]
 8018a8e:	fb1c f005 	smulbb	r0, ip, r5
 8018a92:	ee07 0a90 	vmov	s15, r0
 8018a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a9a:	f1be 0f05 	cmp.w	lr, #5
 8018a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018aa2:	edc8 7a00 	vstr	s15, [r8]
 8018aa6:	d045      	beq.n	8018b34 <MotionDI_update+0x30b4>
 8018aa8:	f89b c002 	ldrb.w	ip, [fp, #2]
 8018aac:	ed97 7a00 	vldr	s14, [r7]
 8018ab0:	fb1c f005 	smulbb	r0, ip, r5
 8018ab4:	ee07 0a90 	vmov	s15, r0
 8018ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018abc:	f1be 0f04 	cmp.w	lr, #4
 8018ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018ac4:	edc7 7a00 	vstr	s15, [r7]
 8018ac8:	d034      	beq.n	8018b34 <MotionDI_update+0x30b4>
 8018aca:	9821      	ldr	r0, [sp, #132]	; 0x84
 8018acc:	f89b 7003 	ldrb.w	r7, [fp, #3]
 8018ad0:	ed90 7a00 	vldr	s14, [r0]
 8018ad4:	fb17 f005 	smulbb	r0, r7, r5
 8018ad8:	ee07 0a90 	vmov	s15, r0
 8018adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ae0:	9821      	ldr	r0, [sp, #132]	; 0x84
 8018ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018ae6:	f1be 0f03 	cmp.w	lr, #3
 8018aea:	edc0 7a00 	vstr	s15, [r0]
 8018aee:	d021      	beq.n	8018b34 <MotionDI_update+0x30b4>
 8018af0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8018af2:	f89b 5004 	ldrb.w	r5, [fp, #4]
 8018af6:	ed90 7a00 	vldr	s14, [r0]
 8018afa:	fb15 f002 	smulbb	r0, r5, r2
 8018afe:	ee07 0a90 	vmov	s15, r0
 8018b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b0c:	f1be 0f01 	cmp.w	lr, #1
 8018b10:	edc2 7a00 	vstr	s15, [r2]
 8018b14:	d10e      	bne.n	8018b34 <MotionDI_update+0x30b4>
 8018b16:	f89b 2005 	ldrb.w	r2, [fp, #5]
 8018b1a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8018b1c:	ed93 7a00 	vldr	s14, [r3]
 8018b20:	fb12 f200 	smulbb	r2, r2, r0
 8018b24:	ee07 2a90 	vmov	s15, r2
 8018b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b30:	edc3 7a00 	vstr	s15, [r3]
 8018b34:	f10a 0a01 	add.w	sl, sl, #1
 8018b38:	f1ba 0f08 	cmp.w	sl, #8
 8018b3c:	f101 0108 	add.w	r1, r1, #8
 8018b40:	f47f af48 	bne.w	80189d4 <MotionDI_update+0x2f54>
 8018b44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018b46:	e9dd 9523 	ldrd	r9, r5, [sp, #140]	; 0x8c
 8018b4a:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
 8018b4e:	4613      	mov	r3, r2
 8018b50:	edd3 6a00 	vldr	s13, [r3]
 8018b54:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8018b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018b5c:	ece3 7a01 	vstmia	r3!, {s15}
 8018b60:	455b      	cmp	r3, fp
 8018b62:	d1f5      	bne.n	8018b50 <MotionDI_update+0x30d0>
 8018b64:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8018b66:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8018b6a:	4638      	mov	r0, r7
 8018b6c:	4641      	mov	r1, r8
 8018b6e:	f7f6 fa4b 	bl	800f008 <st_accCal_MEMS_ellipsoidFit7>
 8018b72:	ed98 5a04 	vldr	s10, [r8, #16]
 8018b76:	ed98 3a01 	vldr	s6, [r8, #4]
 8018b7a:	edd8 4a03 	vldr	s9, [r8, #12]
 8018b7e:	ed97 6a07 	vldr	s12, [r7, #28]
 8018b82:	edd8 3a00 	vldr	s7, [r8]
 8018b86:	edd7 ca01 	vldr	s25, [r7, #4]
 8018b8a:	edd8 5a05 	vldr	s11, [r8, #20]
 8018b8e:	ed98 4a02 	vldr	s8, [r8, #8]
 8018b92:	edd7 6a08 	vldr	s13, [r7, #32]
 8018b96:	ed97 0a02 	vldr	s0, [r7, #8]
 8018b9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018b9e:	ed97 1a03 	vldr	s2, [r7, #12]
 8018ba2:	ed97 da00 	vldr	s26, [r7]
 8018ba6:	edd8 2a06 	vldr	s5, [r8, #24]
 8018baa:	edd7 1a04 	vldr	s3, [r7, #16]
 8018bae:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8018bb2:	eef1 7a45 	vneg.f32	s15, s10
 8018bb6:	eec7 ba83 	vdiv.f32	s23, s15, s6
 8018bba:	ee23 6a06 	vmul.f32	s12, s6, s12
 8018bbe:	eef1 7a64 	vneg.f32	s15, s9
 8018bc2:	ee87 caa3 	vdiv.f32	s24, s15, s7
 8018bc6:	eea3 6aac 	vfma.f32	s12, s7, s25
 8018bca:	eef1 7a65 	vneg.f32	s15, s11
 8018bce:	eea4 6a26 	vfma.f32	s12, s8, s13
 8018bd2:	ee63 6a26 	vmul.f32	s13, s6, s13
 8018bd6:	ee87 ba84 	vdiv.f32	s22, s15, s8
 8018bda:	eee3 6a80 	vfma.f32	s13, s7, s0
 8018bde:	ee64 7a00 	vmul.f32	s15, s8, s0
 8018be2:	eeb0 0a66 	vmov.f32	s0, s13
 8018be6:	eee3 7a2c 	vfma.f32	s15, s6, s25
 8018bea:	eef0 6a46 	vmov.f32	s13, s12
 8018bee:	eee4 6a87 	vfma.f32	s13, s9, s14
 8018bf2:	ee23 7a07 	vmul.f32	s14, s6, s14
 8018bf6:	ee25 2a2b 	vmul.f32	s4, s10, s23
 8018bfa:	eee3 7a8d 	vfma.f32	s15, s7, s26
 8018bfe:	eea3 7a81 	vfma.f32	s14, s7, s2
 8018c02:	eea4 2a8c 	vfma.f32	s4, s9, s24
 8018c06:	eee4 7a81 	vfma.f32	s15, s9, s2
 8018c0a:	eeb0 1a47 	vmov.f32	s2, s14
 8018c0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8018c12:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8018c16:	edd7 ca0b 	vldr	s25, [r7, #44]	; 0x2c
 8018c1a:	ee32 2a82 	vadd.f32	s4, s5, s4
 8018c1e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8018c22:	ee23 7a07 	vmul.f32	s14, s6, s14
 8018c26:	eea5 2a8b 	vfma.f32	s4, s11, s22
 8018c2a:	eea3 7aa1 	vfma.f32	s14, s7, s3
 8018c2e:	eee5 7a21 	vfma.f32	s15, s10, s3
 8018c32:	eeb0 2ac2 	vabs.f32	s4, s4
 8018c36:	eeb1 dac2 	vsqrt.f32	s26, s4
 8018c3a:	eef0 1a47 	vmov.f32	s3, s14
 8018c3e:	ed97 2a05 	vldr	s4, [r7, #20]
 8018c42:	ee22 7a86 	vmul.f32	s14, s5, s12
 8018c46:	eee5 7a82 	vfma.f32	s15, s11, s4
 8018c4a:	eea5 7aac 	vfma.f32	s14, s11, s25
 8018c4e:	eea4 0a20 	vfma.f32	s0, s8, s1
 8018c52:	edd7 0a06 	vldr	s1, [r7, #24]
 8018c56:	ee37 7a26 	vadd.f32	s14, s14, s13
 8018c5a:	eee2 7aa0 	vfma.f32	s15, s5, s1
 8018c5e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8018c62:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018c66:	eea4 0aa6 	vfma.f32	s0, s9, s13
 8018c6a:	eea4 1a26 	vfma.f32	s2, s8, s13
 8018c6e:	ee63 6a2c 	vmul.f32	s13, s6, s25
 8018c72:	eea3 7aa7 	vfma.f32	s14, s7, s15
 8018c76:	eee3 6a82 	vfma.f32	s13, s7, s4
 8018c7a:	edd7 ca11 	vldr	s25, [r7, #68]	; 0x44
 8018c7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8018c82:	ed97 2a12 	vldr	s4, [r7, #72]	; 0x48
 8018c86:	ee23 6a06 	vmul.f32	s12, s6, s12
 8018c8a:	eea5 0a27 	vfma.f32	s0, s10, s15
 8018c8e:	eea3 6aa0 	vfma.f32	s12, s7, s1
 8018c92:	eee4 1a27 	vfma.f32	s3, s8, s15
 8018c96:	eef0 0a66 	vmov.f32	s1, s13
 8018c9a:	ee62 7aac 	vmul.f32	s15, s5, s25
 8018c9e:	eef0 6a47 	vmov.f32	s13, s14
 8018ca2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8018ca6:	eee5 7a87 	vfma.f32	s15, s11, s14
 8018caa:	eea4 1a82 	vfma.f32	s2, s9, s4
 8018cae:	eee4 0a07 	vfma.f32	s1, s8, s14
 8018cb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018cb6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8018cba:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8018cbe:	eeb0 2a41 	vmov.f32	s4, s2
 8018cc2:	eea5 2a07 	vfma.f32	s4, s10, s14
 8018cc6:	eee4 1a87 	vfma.f32	s3, s9, s14
 8018cca:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8018cce:	ee22 7a80 	vmul.f32	s14, s5, s0
 8018cd2:	eea4 6a2c 	vfma.f32	s12, s8, s25
 8018cd6:	eea5 7a81 	vfma.f32	s14, s11, s2
 8018cda:	eee4 6a27 	vfma.f32	s13, s8, s15
 8018cde:	eef1 dac3 	vsqrt.f32	s27, s6
 8018ce2:	eeb1 3ae3 	vsqrt.f32	s6, s7
 8018ce6:	eef1 3ac4 	vsqrt.f32	s7, s8
 8018cea:	ee37 4a02 	vadd.f32	s8, s14, s4
 8018cee:	eef0 7a46 	vmov.f32	s15, s12
 8018cf2:	eee4 7a80 	vfma.f32	s15, s9, s0
 8018cf6:	eee4 6a84 	vfma.f32	s13, s9, s8
 8018cfa:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8018cfe:	ed97 4a16 	vldr	s8, [r7, #88]	; 0x58
 8018d02:	eeb0 2a60 	vmov.f32	s4, s1
 8018d06:	eea4 2a81 	vfma.f32	s4, s9, s2
 8018d0a:	eee5 1a04 	vfma.f32	s3, s10, s8
 8018d0e:	edd7 4a17 	vldr	s9, [r7, #92]	; 0x5c
 8018d12:	ed97 1a1a 	vldr	s2, [r7, #104]	; 0x68
 8018d16:	ee22 4a80 	vmul.f32	s8, s5, s0
 8018d1a:	ee69 ca8d 	vmul.f32	s25, s19, s26
 8018d1e:	eea5 4aa4 	vfma.f32	s8, s11, s9
 8018d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018d26:	ee34 4a21 	vadd.f32	s8, s8, s3
 8018d2a:	ee87 6a2c 	vdiv.f32	s12, s14, s25
 8018d2e:	eea5 2a24 	vfma.f32	s4, s10, s9
 8018d32:	eee5 7a00 	vfma.f32	s15, s10, s0
 8018d36:	eee5 6a04 	vfma.f32	s13, s10, s8
 8018d3a:	ee62 4a81 	vmul.f32	s9, s5, s2
 8018d3e:	ed97 5a19 	vldr	s10, [r7, #100]	; 0x64
 8018d42:	eee5 4a85 	vfma.f32	s9, s11, s10
 8018d46:	eee5 7a81 	vfma.f32	s15, s11, s2
 8018d4a:	ee74 4a82 	vadd.f32	s9, s9, s4
 8018d4e:	ed97 5a1b 	vldr	s10, [r7, #108]	; 0x6c
 8018d52:	eee5 6aa4 	vfma.f32	s13, s11, s9
 8018d56:	eee2 7a85 	vfma.f32	s15, s5, s10
 8018d5a:	ee66 da2d 	vmul.f32	s27, s12, s27
 8018d5e:	eee2 6aa7 	vfma.f32	s13, s5, s15
 8018d62:	ee26 ea23 	vmul.f32	s28, s12, s7
 8018d66:	ee26 6a03 	vmul.f32	s12, s12, s6
 8018d6a:	eef4 dac7 	vcmpe.f32	s27, s14
 8018d6e:	eef0 5a66 	vmov.f32	s11, s13
 8018d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d7a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8018d7e:	bf4c      	ite	mi
 8018d80:	ee37 7a6d 	vsubmi.f32	s14, s14, s27
 8018d84:	ee3d 7ac7 	vsubpl.f32	s14, s27, s14
 8018d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d8c:	bf4c      	ite	mi
 8018d8e:	ee76 6ac6 	vsubmi.f32	s13, s13, s12
 8018d92:	ee76 6a66 	vsubpl.f32	s13, s12, s13
 8018d96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018d9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8018d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018da2:	eeb4 eae7 	vcmpe.f32	s28, s15
 8018da6:	bfb8      	it	lt
 8018da8:	eeb0 7a66 	vmovlt.f32	s14, s13
 8018dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018db0:	bf4c      	ite	mi
 8018db2:	ee77 7ace 	vsubmi.f32	s15, s15, s28
 8018db6:	ee7e 7a67 	vsubpl.f32	s15, s28, s15
 8018dba:	eddf 6af2 	vldr	s13, [pc, #968]	; 8019184 <MotionDI_update+0x3704>
 8018dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dc6:	bfa8      	it	ge
 8018dc8:	eef0 7a47 	vmovge.f32	s15, s14
 8018dcc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd4:	f57f ab5c 	bpl.w	8018490 <MotionDI_update+0x2a10>
 8018dd8:	ee3e 7a2d 	vadd.f32	s14, s28, s27
 8018ddc:	eddf 4aea 	vldr	s9, [pc, #936]	; 8019188 <MotionDI_update+0x3708>
 8018de0:	eddf 6aea 	vldr	s13, [pc, #936]	; 801918c <MotionDI_update+0x370c>
 8018de4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018de8:	eeb0 4a4e 	vmov.f32	s8, s28
 8018dec:	eea7 4a64 	vfms.f32	s8, s14, s9
 8018df0:	eeb0 7ac4 	vabs.f32	s14, s8
 8018df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dfc:	bfa8      	it	ge
 8018dfe:	eef0 7a47 	vmovge.f32	s15, s14
 8018e02:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e0a:	f57f ab41 	bpl.w	8018490 <MotionDI_update+0x2a10>
 8018e0e:	eef0 7ae5 	vabs.f32	s15, s11
 8018e12:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8018e16:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8018e1a:	eef1 5ac7 	vsqrt.f32	s11, s14
 8018e1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018e22:	eef1 7ae5 	vsqrt.f32	s15, s11
 8018e26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018e2a:	eec7 ca8d 	vdiv.f32	s25, s15, s26
 8018e2e:	eef4 cac7 	vcmpe.f32	s25, s14
 8018e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e36:	f73f ab2b 	bgt.w	8018490 <MotionDI_update+0x2a10>
 8018e3a:	eddf ead5 	vldr	s29, [pc, #852]	; 8019190 <MotionDI_update+0x3710>
 8018e3e:	ed9f dad5 	vldr	s26, [pc, #852]	; 8019194 <MotionDI_update+0x3714>
 8018e42:	ee26 0a2e 	vmul.f32	s0, s12, s29
 8018e46:	f000 fb33 	bl	80194b0 <roundf>
 8018e4a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8018e4c:	ee60 7a0d 	vmul.f32	s15, s0, s26
 8018e50:	ee2d 0aae 	vmul.f32	s0, s27, s29
 8018e54:	edc7 7a00 	vstr	s15, [r7]
 8018e58:	f000 fb2a 	bl	80194b0 <roundf>
 8018e5c:	ee60 7a0d 	vmul.f32	s15, s0, s26
 8018e60:	ee2e 0a2e 	vmul.f32	s0, s28, s29
 8018e64:	edc7 7a04 	vstr	s15, [r7, #16]
 8018e68:	f000 fb22 	bl	80194b0 <roundf>
 8018e6c:	ee60 7a0d 	vmul.f32	s15, s0, s26
 8018e70:	ee3c 0a2a 	vadd.f32	s0, s24, s21
 8018e74:	edc7 7a08 	vstr	s15, [r7, #32]
 8018e78:	971d      	str	r7, [sp, #116]	; 0x74
 8018e7a:	f000 fb19 	bl	80194b0 <roundf>
 8018e7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018e82:	ee3b 0a8a 	vadd.f32	s0, s23, s20
 8018e86:	ee17 3a90 	vmov	r3, s15
 8018e8a:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 8018e8e:	f000 fb0f 	bl	80194b0 <roundf>
 8018e92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018e96:	ee3b 0a09 	vadd.f32	s0, s22, s18
 8018e9a:	ee17 3a90 	vmov	r3, s15
 8018e9e:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 8018ea2:	f000 fb05 	bl	80194b0 <roundf>
 8018ea6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018eaa:	f10d 03aa 	add.w	r3, sp, #170	; 0xaa
 8018eae:	ee17 7a90 	vmov	r7, s15
 8018eb2:	9300      	str	r3, [sp, #0]
 8018eb4:	991d      	ldr	r1, [sp, #116]	; 0x74
 8018eb6:	edc6 8a04 	vstr	s17, [r6, #16]
 8018eba:	aa2b      	add	r2, sp, #172	; 0xac
 8018ebc:	ab2c      	add	r3, sp, #176	; 0xb0
 8018ebe:	eeb0 0a69 	vmov.f32	s0, s19
 8018ec2:	a82f      	add	r0, sp, #188	; 0xbc
 8018ec4:	f8ad 70c0 	strh.w	r7, [sp, #192]	; 0xc0
 8018ec8:	f7f7 fd06 	bl	80108d8 <getAccStats.constprop.0>
 8018ecc:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 8018ed0:	f89d 20aa 	ldrb.w	r2, [sp, #170]	; 0xaa
 8018ed4:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8019198 <MotionDI_update+0x3718>
 8018ed8:	231e      	movs	r3, #30
 8018eda:	fb03 f301 	mul.w	r3, r3, r1
 8018ede:	ee07 3a90 	vmov	s15, r3
 8018ee2:	ee07 2a10 	vmov	s14, r2
 8018ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018eea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018eee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018efa:	f73f aac9 	bgt.w	8018490 <MotionDI_update+0x2a10>
 8018efe:	eddd 3a2c 	vldr	s7, [sp, #176]	; 0xb0
 8018f02:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801919c <MotionDI_update+0x371c>
 8018f06:	eef4 3ae7 	vcmpe.f32	s7, s15
 8018f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f0e:	f73f aabf 	bgt.w	8018490 <MotionDI_update+0x2a10>
 8018f12:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8018f16:	eef4 3ae7 	vcmpe.f32	s7, s15
 8018f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f1e:	dd04      	ble.n	8018f2a <MotionDI_update+0x34aa>
 8018f20:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 8018f24:	4293      	cmp	r3, r2
 8018f26:	f67f aab3 	bls.w	8018490 <MotionDI_update+0x2a10>
 8018f2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d170      	bne.n	8019012 <MotionDI_update+0x3592>
 8018f30:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 8018f34:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8018f38:	f9bd 10c0 	ldrsh.w	r1, [sp, #192]	; 0xc0
 8018f3c:	ed96 1a06 	vldr	s2, [r6, #24]
 8018f40:	edd6 1a07 	vldr	s3, [r6, #28]
 8018f44:	eddf 2a91 	vldr	s5, [pc, #580]	; 801918c <MotionDI_update+0x370c>
 8018f48:	ed96 2a08 	vldr	s4, [r6, #32]
 8018f4c:	ee06 2a90 	vmov	s13, r2
 8018f50:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 8018f54:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018f58:	ee07 2a10 	vmov	s14, r2
 8018f5c:	2b01      	cmp	r3, #1
 8018f5e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018f62:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8018f66:	bf18      	it	ne
 8018f68:	eef0 5a46 	vmovne.f32	s11, s12
 8018f6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018f6e:	eeb1 3a04 	vmov.f32	s6, #20	; 0x40a00000  5.0
 8018f72:	ee33 3a65 	vsub.f32	s6, s6, s11
 8018f76:	ee07 1a90 	vmov	s15, r1
 8018f7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018f7e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8018f82:	ed92 4a00 	vldr	s8, [r2]
 8018f86:	edd2 4a04 	vldr	s9, [r2, #16]
 8018f8a:	ed92 5a08 	vldr	s10, [r2, #32]
 8018f8e:	eee1 6a03 	vfma.f32	s13, s2, s6
 8018f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f96:	ee27 7a25 	vmul.f32	s14, s14, s11
 8018f9a:	ee34 4a46 	vsub.f32	s8, s8, s12
 8018f9e:	eea3 7a21 	vfma.f32	s14, s6, s3
 8018fa2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018fa6:	ee24 4a22 	vmul.f32	s8, s8, s5
 8018faa:	eee3 7a02 	vfma.f32	s15, s6, s4
 8018fae:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8018fb2:	eeb0 3a46 	vmov.f32	s6, s12
 8018fb6:	eea5 3a84 	vfma.f32	s6, s11, s8
 8018fba:	ee74 4ac6 	vsub.f32	s9, s9, s12
 8018fbe:	ee35 5a46 	vsub.f32	s10, s10, s12
 8018fc2:	ee27 7a22 	vmul.f32	s14, s14, s5
 8018fc6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8018fca:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8018fce:	ee16 3a90 	vmov	r3, s13
 8018fd2:	ee25 5a22 	vmul.f32	s10, s10, s5
 8018fd6:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8018fda:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018fde:	eeb0 4a43 	vmov.f32	s8, s6
 8018fe2:	eeb0 3a46 	vmov.f32	s6, s12
 8018fe6:	eea4 3aa5 	vfma.f32	s6, s9, s11
 8018fea:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 8018fee:	eea5 6a25 	vfma.f32	s12, s10, s11
 8018ff2:	ee17 3a10 	vmov	r3, s14
 8018ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ffa:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 8018ffe:	ee17 3a90 	vmov	r3, s15
 8019002:	ed82 4a00 	vstr	s8, [r2]
 8019006:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
 801900a:	ed82 3a04 	vstr	s6, [r2, #16]
 801900e:	ed82 6a08 	vstr	s12, [r2, #32]
 8019012:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019016:	ee77 caec 	vsub.f32	s25, s15, s25
 801901a:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801901e:	eddf 5a60 	vldr	s11, [pc, #384]	; 80191a0 <MotionDI_update+0x3720>
 8019022:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8019024:	ee83 6aac 	vdiv.f32	s12, s7, s25
 8019028:	ee06 3a90 	vmov	s13, r3
 801902c:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8019030:	ee07 3a10 	vmov	s14, r3
 8019034:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8019038:	ee07 3a90 	vmov	s15, r3
 801903c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801903e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019042:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801904a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801904e:	6818      	ldr	r0, [r3, #0]
 8019050:	6919      	ldr	r1, [r3, #16]
 8019052:	f8d3 c020 	ldr.w	ip, [r3, #32]
 8019056:	edc7 6a01 	vstr	s13, [r7, #4]
 801905a:	f240 1303 	movw	r3, #259	; 0x103
 801905e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019062:	ed87 7a02 	vstr	s14, [r7, #8]
 8019066:	edc7 7a03 	vstr	s15, [r7, #12]
 801906a:	6138      	str	r0, [r7, #16]
 801906c:	6239      	str	r1, [r7, #32]
 801906e:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 8019072:	803b      	strh	r3, [r7, #0]
 8019074:	f340 80ad 	ble.w	80191d2 <MotionDI_update+0x3752>
 8019078:	2302      	movs	r3, #2
 801907a:	703b      	strb	r3, [r7, #0]
 801907c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801907e:	2200      	movs	r2, #0
 8019080:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
 8019084:	2b00      	cmp	r3, #0
 8019086:	f43e afca 	beq.w	801801e <MotionDI_update+0x259e>
 801908a:	7d32      	ldrb	r2, [r6, #20]
 801908c:	2a03      	cmp	r2, #3
 801908e:	f47e afc6 	bne.w	801801e <MotionDI_update+0x259e>
 8019092:	ee07 3a90 	vmov	s15, r3
 8019096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801909a:	eddf 6a42 	vldr	s13, [pc, #264]	; 80191a4 <MotionDI_update+0x3724>
 801909e:	ee38 6a67 	vsub.f32	s12, s16, s15
 80190a2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80190a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190aa:	f100 808f 	bmi.w	80191cc <MotionDI_update+0x374c>
 80190ae:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80191a8 <MotionDI_update+0x3728>
 80190b2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80190b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ba:	f140 8096 	bpl.w	80191ea <MotionDI_update+0x376a>
 80190be:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80190c2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80191ac <MotionDI_update+0x372c>
 80190c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80190ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80190ce:	eee7 7a26 	vfma.f32	s15, s14, s13
 80190d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80190d4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80190d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80190dc:	ed9f 8a34 	vldr	s16, [pc, #208]	; 80191b0 <MotionDI_update+0x3730>
 80190e0:	ed93 7a04 	vldr	s14, [r3, #16]
 80190e4:	ed96 6a09 	vldr	s12, [r6, #36]	; 0x24
 80190e8:	ed93 0a01 	vldr	s0, [r3, #4]
 80190ec:	edd6 6a06 	vldr	s13, [r6, #24]
 80190f0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80190f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190f8:	bfa8      	it	ge
 80190fa:	eeb0 8a67 	vmovge.f32	s16, s15
 80190fe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8019102:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8019106:	461f      	mov	r7, r3
 8019108:	ee68 7a87 	vmul.f32	s15, s17, s14
 801910c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8019110:	eee8 7a06 	vfma.f32	s15, s16, s12
 8019114:	eea8 0a26 	vfma.f32	s0, s16, s13
 8019118:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
 801911c:	f000 f9c8 	bl	80194b0 <roundf>
 8019120:	edd7 7a08 	vldr	s15, [r7, #32]
 8019124:	ed97 7a02 	vldr	s14, [r7, #8]
 8019128:	ed96 6a0d 	vldr	s12, [r6, #52]	; 0x34
 801912c:	edd6 6a07 	vldr	s13, [r6, #28]
 8019130:	ed86 0a06 	vstr	s0, [r6, #24]
 8019134:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019138:	ee28 7a87 	vmul.f32	s14, s17, s14
 801913c:	eee8 7a06 	vfma.f32	s15, s16, s12
 8019140:	eea8 7a26 	vfma.f32	s14, s16, s13
 8019144:	edc6 7a0d 	vstr	s15, [r6, #52]	; 0x34
 8019148:	eeb0 0a47 	vmov.f32	s0, s14
 801914c:	f000 f9b0 	bl	80194b0 <roundf>
 8019150:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019154:	edd6 6a11 	vldr	s13, [r6, #68]	; 0x44
 8019158:	ed97 6a03 	vldr	s12, [r7, #12]
 801915c:	ed96 7a08 	vldr	s14, [r6, #32]
 8019160:	ed86 0a07 	vstr	s0, [r6, #28]
 8019164:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019168:	ee28 0a86 	vmul.f32	s0, s17, s12
 801916c:	eee8 7a26 	vfma.f32	s15, s16, s13
 8019170:	eea8 0a07 	vfma.f32	s0, s16, s14
 8019174:	edc6 7a11 	vstr	s15, [r6, #68]	; 0x44
 8019178:	f000 f99a 	bl	80194b0 <roundf>
 801917c:	ed86 0a08 	vstr	s0, [r6, #32]
 8019180:	e022      	b.n	80191c8 <MotionDI_update+0x3748>
 8019182:	bf00      	nop
 8019184:	3e99999a 	.word	0x3e99999a
 8019188:	3eaaaaab 	.word	0x3eaaaaab
 801918c:	3e4ccccd 	.word	0x3e4ccccd
 8019190:	49742400 	.word	0x49742400
 8019194:	358637bd 	.word	0x358637bd
 8019198:	3c23d70a 	.word	0x3c23d70a
 801919c:	3e19999a 	.word	0x3e19999a
 80191a0:	3d75c28f 	.word	0x3d75c28f
 80191a4:	42f00000 	.word	0x42f00000
 80191a8:	45e10000 	.word	0x45e10000
 80191ac:	38941a9d 	.word	0x38941a9d
 80191b0:	00000000 	.word	0x00000000
 80191b4:	3df5c28f 	.word	0x3df5c28f
 80191b8:	47a8c000 	.word	0x47a8c000
 80191bc:	367e3344 	.word	0x367e3344
 80191c0:	7fc00000 	.word	0x7fc00000
 80191c4:	3dcccccd 	.word	0x3dcccccd
 80191c8:	f7fe bf38 	b.w	801803c <MotionDI_update+0x25bc>
 80191cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80191d0:	e77f      	b.n	80190d2 <MotionDI_update+0x3652>
 80191d2:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 80191b4 <MotionDI_update+0x3734>
 80191d6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80191da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191de:	f77f af4d 	ble.w	801907c <MotionDI_update+0x35fc>
 80191e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80191e4:	2301      	movs	r3, #1
 80191e6:	7013      	strb	r3, [r2, #0]
 80191e8:	e748      	b.n	801907c <MotionDI_update+0x35fc>
 80191ea:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 80191b8 <MotionDI_update+0x3738>
 80191ee:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80191f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191f6:	d52b      	bpl.n	8019250 <MotionDI_update+0x37d0>
 80191f8:	ee37 7a48 	vsub.f32	s14, s14, s16
 80191fc:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 80191bc <MotionDI_update+0x373c>
 8019200:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019204:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019208:	eee7 7a26 	vfma.f32	s15, s14, s13
 801920c:	e761      	b.n	80190d2 <MotionDI_update+0x3652>
 801920e:	ed1f 9a14 	vldr	s18, [pc, #-80]	; 80191c0 <MotionDI_update+0x3740>
 8019212:	eeb0 aa49 	vmov.f32	s20, s18
 8019216:	eef0 aa49 	vmov.f32	s21, s18
 801921a:	f7ff ba90 	b.w	801873e <MotionDI_update+0x2cbe>
 801921e:	aa33      	add	r2, sp, #204	; 0xcc
 8019220:	921e      	str	r2, [sp, #120]	; 0x78
 8019222:	aa65      	add	r2, sp, #404	; 0x194
 8019224:	921c      	str	r2, [sp, #112]	; 0x70
 8019226:	e734      	b.n	8019092 <MotionDI_update+0x3612>
 8019228:	2300      	movs	r3, #0
 801922a:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 801922e:	ab33      	add	r3, sp, #204	; 0xcc
 8019230:	931e      	str	r3, [sp, #120]	; 0x78
 8019232:	ab65      	add	r3, sp, #404	; 0x194
 8019234:	edc6 8a04 	vstr	s17, [r6, #16]
 8019238:	931c      	str	r3, [sp, #112]	; 0x70
 801923a:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 801923e:	f7ff b92a 	b.w	8018496 <MotionDI_update+0x2a16>
 8019242:	fb93 f7f2 	sdiv	r7, r3, r2
 8019246:	fb02 3317 	mls	r3, r2, r7, r3
 801924a:	b21f      	sxth	r7, r3
 801924c:	f7ff b9ed 	b.w	801862a <MotionDI_update+0x2baa>
 8019250:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 80191c4 <MotionDI_update+0x3744>
 8019254:	e73d      	b.n	80190d2 <MotionDI_update+0x3652>
 8019256:	bf00      	nop

08019258 <MotionDI_GetLibVersion>:
 8019258:	4b10      	ldr	r3, [pc, #64]	; (801929c <MotionDI_GetLibVersion+0x44>)
 801925a:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 801925e:	b90b      	cbnz	r3, 8019264 <MotionDI_GetLibVersion+0xc>
 8019260:	4618      	mov	r0, r3
 8019262:	4770      	bx	lr
 8019264:	b470      	push	{r4, r5, r6}
 8019266:	4e0e      	ldr	r6, [pc, #56]	; (80192a0 <MotionDI_GetLibVersion+0x48>)
 8019268:	4604      	mov	r4, r0
 801926a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801926c:	b08b      	sub	sp, #44	; 0x2c
 801926e:	ad01      	add	r5, sp, #4
 8019270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019272:	6833      	ldr	r3, [r6, #0]
 8019274:	f825 3b02 	strh.w	r3, [r5], #2
 8019278:	0c1b      	lsrs	r3, r3, #16
 801927a:	702b      	strb	r3, [r5, #0]
 801927c:	ad01      	add	r5, sp, #4
 801927e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019280:	882e      	ldrh	r6, [r5, #0]
 8019282:	60e3      	str	r3, [r4, #12]
 8019284:	78ad      	ldrb	r5, [r5, #2]
 8019286:	6020      	str	r0, [r4, #0]
 8019288:	2312      	movs	r3, #18
 801928a:	4618      	mov	r0, r3
 801928c:	6061      	str	r1, [r4, #4]
 801928e:	60a2      	str	r2, [r4, #8]
 8019290:	8226      	strh	r6, [r4, #16]
 8019292:	74a5      	strb	r5, [r4, #18]
 8019294:	b00b      	add	sp, #44	; 0x2c
 8019296:	bc70      	pop	{r4, r5, r6}
 8019298:	4770      	bx	lr
 801929a:	bf00      	nop
 801929c:	200013d8 	.word	0x200013d8
 80192a0:	0801b530 	.word	0x0801b530

080192a4 <__errno>:
 80192a4:	4b01      	ldr	r3, [pc, #4]	; (80192ac <__errno+0x8>)
 80192a6:	6818      	ldr	r0, [r3, #0]
 80192a8:	4770      	bx	lr
 80192aa:	bf00      	nop
 80192ac:	20001354 	.word	0x20001354

080192b0 <__libc_init_array>:
 80192b0:	b570      	push	{r4, r5, r6, lr}
 80192b2:	4d0d      	ldr	r5, [pc, #52]	; (80192e8 <__libc_init_array+0x38>)
 80192b4:	4c0d      	ldr	r4, [pc, #52]	; (80192ec <__libc_init_array+0x3c>)
 80192b6:	1b64      	subs	r4, r4, r5
 80192b8:	10a4      	asrs	r4, r4, #2
 80192ba:	2600      	movs	r6, #0
 80192bc:	42a6      	cmp	r6, r4
 80192be:	d109      	bne.n	80192d4 <__libc_init_array+0x24>
 80192c0:	4d0b      	ldr	r5, [pc, #44]	; (80192f0 <__libc_init_array+0x40>)
 80192c2:	4c0c      	ldr	r4, [pc, #48]	; (80192f4 <__libc_init_array+0x44>)
 80192c4:	f002 f85a 	bl	801b37c <_init>
 80192c8:	1b64      	subs	r4, r4, r5
 80192ca:	10a4      	asrs	r4, r4, #2
 80192cc:	2600      	movs	r6, #0
 80192ce:	42a6      	cmp	r6, r4
 80192d0:	d105      	bne.n	80192de <__libc_init_array+0x2e>
 80192d2:	bd70      	pop	{r4, r5, r6, pc}
 80192d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80192d8:	4798      	blx	r3
 80192da:	3601      	adds	r6, #1
 80192dc:	e7ee      	b.n	80192bc <__libc_init_array+0xc>
 80192de:	f855 3b04 	ldr.w	r3, [r5], #4
 80192e2:	4798      	blx	r3
 80192e4:	3601      	adds	r6, #1
 80192e6:	e7f2      	b.n	80192ce <__libc_init_array+0x1e>
 80192e8:	0801ba30 	.word	0x0801ba30
 80192ec:	0801ba30 	.word	0x0801ba30
 80192f0:	0801ba30 	.word	0x0801ba30
 80192f4:	0801ba34 	.word	0x0801ba34

080192f8 <memcpy>:
 80192f8:	440a      	add	r2, r1
 80192fa:	4291      	cmp	r1, r2
 80192fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8019300:	d100      	bne.n	8019304 <memcpy+0xc>
 8019302:	4770      	bx	lr
 8019304:	b510      	push	{r4, lr}
 8019306:	f811 4b01 	ldrb.w	r4, [r1], #1
 801930a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801930e:	4291      	cmp	r1, r2
 8019310:	d1f9      	bne.n	8019306 <memcpy+0xe>
 8019312:	bd10      	pop	{r4, pc}

08019314 <memset>:
 8019314:	4402      	add	r2, r0
 8019316:	4603      	mov	r3, r0
 8019318:	4293      	cmp	r3, r2
 801931a:	d100      	bne.n	801931e <memset+0xa>
 801931c:	4770      	bx	lr
 801931e:	f803 1b01 	strb.w	r1, [r3], #1
 8019322:	e7f9      	b.n	8019318 <memset+0x4>
 8019324:	0000      	movs	r0, r0
	...

08019328 <floor>:
 8019328:	ec51 0b10 	vmov	r0, r1, d0
 801932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019330:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019334:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019338:	2e13      	cmp	r6, #19
 801933a:	ee10 5a10 	vmov	r5, s0
 801933e:	ee10 8a10 	vmov	r8, s0
 8019342:	460c      	mov	r4, r1
 8019344:	dc32      	bgt.n	80193ac <floor+0x84>
 8019346:	2e00      	cmp	r6, #0
 8019348:	da14      	bge.n	8019374 <floor+0x4c>
 801934a:	a333      	add	r3, pc, #204	; (adr r3, 8019418 <floor+0xf0>)
 801934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019350:	f7e6 ff40 	bl	80001d4 <__adddf3>
 8019354:	2200      	movs	r2, #0
 8019356:	2300      	movs	r3, #0
 8019358:	f7e7 fb82 	bl	8000a60 <__aeabi_dcmpgt>
 801935c:	b138      	cbz	r0, 801936e <floor+0x46>
 801935e:	2c00      	cmp	r4, #0
 8019360:	da57      	bge.n	8019412 <floor+0xea>
 8019362:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019366:	431d      	orrs	r5, r3
 8019368:	d001      	beq.n	801936e <floor+0x46>
 801936a:	4c2d      	ldr	r4, [pc, #180]	; (8019420 <floor+0xf8>)
 801936c:	2500      	movs	r5, #0
 801936e:	4621      	mov	r1, r4
 8019370:	4628      	mov	r0, r5
 8019372:	e025      	b.n	80193c0 <floor+0x98>
 8019374:	4f2b      	ldr	r7, [pc, #172]	; (8019424 <floor+0xfc>)
 8019376:	4137      	asrs	r7, r6
 8019378:	ea01 0307 	and.w	r3, r1, r7
 801937c:	4303      	orrs	r3, r0
 801937e:	d01f      	beq.n	80193c0 <floor+0x98>
 8019380:	a325      	add	r3, pc, #148	; (adr r3, 8019418 <floor+0xf0>)
 8019382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019386:	f7e6 ff25 	bl	80001d4 <__adddf3>
 801938a:	2200      	movs	r2, #0
 801938c:	2300      	movs	r3, #0
 801938e:	f7e7 fb67 	bl	8000a60 <__aeabi_dcmpgt>
 8019392:	2800      	cmp	r0, #0
 8019394:	d0eb      	beq.n	801936e <floor+0x46>
 8019396:	2c00      	cmp	r4, #0
 8019398:	bfbe      	ittt	lt
 801939a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801939e:	fa43 f606 	asrlt.w	r6, r3, r6
 80193a2:	19a4      	addlt	r4, r4, r6
 80193a4:	ea24 0407 	bic.w	r4, r4, r7
 80193a8:	2500      	movs	r5, #0
 80193aa:	e7e0      	b.n	801936e <floor+0x46>
 80193ac:	2e33      	cmp	r6, #51	; 0x33
 80193ae:	dd0b      	ble.n	80193c8 <floor+0xa0>
 80193b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80193b4:	d104      	bne.n	80193c0 <floor+0x98>
 80193b6:	ee10 2a10 	vmov	r2, s0
 80193ba:	460b      	mov	r3, r1
 80193bc:	f7e6 ff0a 	bl	80001d4 <__adddf3>
 80193c0:	ec41 0b10 	vmov	d0, r0, r1
 80193c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80193cc:	f04f 33ff 	mov.w	r3, #4294967295
 80193d0:	fa23 f707 	lsr.w	r7, r3, r7
 80193d4:	4207      	tst	r7, r0
 80193d6:	d0f3      	beq.n	80193c0 <floor+0x98>
 80193d8:	a30f      	add	r3, pc, #60	; (adr r3, 8019418 <floor+0xf0>)
 80193da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193de:	f7e6 fef9 	bl	80001d4 <__adddf3>
 80193e2:	2200      	movs	r2, #0
 80193e4:	2300      	movs	r3, #0
 80193e6:	f7e7 fb3b 	bl	8000a60 <__aeabi_dcmpgt>
 80193ea:	2800      	cmp	r0, #0
 80193ec:	d0bf      	beq.n	801936e <floor+0x46>
 80193ee:	2c00      	cmp	r4, #0
 80193f0:	da02      	bge.n	80193f8 <floor+0xd0>
 80193f2:	2e14      	cmp	r6, #20
 80193f4:	d103      	bne.n	80193fe <floor+0xd6>
 80193f6:	3401      	adds	r4, #1
 80193f8:	ea25 0507 	bic.w	r5, r5, r7
 80193fc:	e7b7      	b.n	801936e <floor+0x46>
 80193fe:	2301      	movs	r3, #1
 8019400:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019404:	fa03 f606 	lsl.w	r6, r3, r6
 8019408:	4435      	add	r5, r6
 801940a:	4545      	cmp	r5, r8
 801940c:	bf38      	it	cc
 801940e:	18e4      	addcc	r4, r4, r3
 8019410:	e7f2      	b.n	80193f8 <floor+0xd0>
 8019412:	2500      	movs	r5, #0
 8019414:	462c      	mov	r4, r5
 8019416:	e7aa      	b.n	801936e <floor+0x46>
 8019418:	8800759c 	.word	0x8800759c
 801941c:	7e37e43c 	.word	0x7e37e43c
 8019420:	bff00000 	.word	0xbff00000
 8019424:	000fffff 	.word	0x000fffff

08019428 <cosf>:
 8019428:	ee10 3a10 	vmov	r3, s0
 801942c:	b507      	push	{r0, r1, r2, lr}
 801942e:	4a1e      	ldr	r2, [pc, #120]	; (80194a8 <cosf+0x80>)
 8019430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019434:	4293      	cmp	r3, r2
 8019436:	dc06      	bgt.n	8019446 <cosf+0x1e>
 8019438:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80194ac <cosf+0x84>
 801943c:	b003      	add	sp, #12
 801943e:	f85d eb04 	ldr.w	lr, [sp], #4
 8019442:	f001 b8ed 	b.w	801a620 <__kernel_cosf>
 8019446:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801944a:	db04      	blt.n	8019456 <cosf+0x2e>
 801944c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019450:	b003      	add	sp, #12
 8019452:	f85d fb04 	ldr.w	pc, [sp], #4
 8019456:	4668      	mov	r0, sp
 8019458:	f000 ffa2 	bl	801a3a0 <__ieee754_rem_pio2f>
 801945c:	f000 0003 	and.w	r0, r0, #3
 8019460:	2801      	cmp	r0, #1
 8019462:	d009      	beq.n	8019478 <cosf+0x50>
 8019464:	2802      	cmp	r0, #2
 8019466:	d010      	beq.n	801948a <cosf+0x62>
 8019468:	b9b0      	cbnz	r0, 8019498 <cosf+0x70>
 801946a:	eddd 0a01 	vldr	s1, [sp, #4]
 801946e:	ed9d 0a00 	vldr	s0, [sp]
 8019472:	f001 f8d5 	bl	801a620 <__kernel_cosf>
 8019476:	e7eb      	b.n	8019450 <cosf+0x28>
 8019478:	eddd 0a01 	vldr	s1, [sp, #4]
 801947c:	ed9d 0a00 	vldr	s0, [sp]
 8019480:	f001 fba4 	bl	801abcc <__kernel_sinf>
 8019484:	eeb1 0a40 	vneg.f32	s0, s0
 8019488:	e7e2      	b.n	8019450 <cosf+0x28>
 801948a:	eddd 0a01 	vldr	s1, [sp, #4]
 801948e:	ed9d 0a00 	vldr	s0, [sp]
 8019492:	f001 f8c5 	bl	801a620 <__kernel_cosf>
 8019496:	e7f5      	b.n	8019484 <cosf+0x5c>
 8019498:	eddd 0a01 	vldr	s1, [sp, #4]
 801949c:	ed9d 0a00 	vldr	s0, [sp]
 80194a0:	2001      	movs	r0, #1
 80194a2:	f001 fb93 	bl	801abcc <__kernel_sinf>
 80194a6:	e7d3      	b.n	8019450 <cosf+0x28>
 80194a8:	3f490fd8 	.word	0x3f490fd8
 80194ac:	00000000 	.word	0x00000000

080194b0 <roundf>:
 80194b0:	ee10 0a10 	vmov	r0, s0
 80194b4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80194b8:	3a7f      	subs	r2, #127	; 0x7f
 80194ba:	2a16      	cmp	r2, #22
 80194bc:	dc15      	bgt.n	80194ea <roundf+0x3a>
 80194be:	2a00      	cmp	r2, #0
 80194c0:	da08      	bge.n	80194d4 <roundf+0x24>
 80194c2:	3201      	adds	r2, #1
 80194c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80194c8:	d101      	bne.n	80194ce <roundf+0x1e>
 80194ca:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80194ce:	ee00 3a10 	vmov	s0, r3
 80194d2:	4770      	bx	lr
 80194d4:	4907      	ldr	r1, [pc, #28]	; (80194f4 <roundf+0x44>)
 80194d6:	4111      	asrs	r1, r2
 80194d8:	4208      	tst	r0, r1
 80194da:	d0fa      	beq.n	80194d2 <roundf+0x22>
 80194dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80194e0:	4113      	asrs	r3, r2
 80194e2:	4403      	add	r3, r0
 80194e4:	ea23 0301 	bic.w	r3, r3, r1
 80194e8:	e7f1      	b.n	80194ce <roundf+0x1e>
 80194ea:	2a80      	cmp	r2, #128	; 0x80
 80194ec:	d1f1      	bne.n	80194d2 <roundf+0x22>
 80194ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80194f2:	4770      	bx	lr
 80194f4:	007fffff 	.word	0x007fffff

080194f8 <sinf>:
 80194f8:	ee10 3a10 	vmov	r3, s0
 80194fc:	b507      	push	{r0, r1, r2, lr}
 80194fe:	4a1f      	ldr	r2, [pc, #124]	; (801957c <sinf+0x84>)
 8019500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019504:	4293      	cmp	r3, r2
 8019506:	dc07      	bgt.n	8019518 <sinf+0x20>
 8019508:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8019580 <sinf+0x88>
 801950c:	2000      	movs	r0, #0
 801950e:	b003      	add	sp, #12
 8019510:	f85d eb04 	ldr.w	lr, [sp], #4
 8019514:	f001 bb5a 	b.w	801abcc <__kernel_sinf>
 8019518:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801951c:	db04      	blt.n	8019528 <sinf+0x30>
 801951e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019522:	b003      	add	sp, #12
 8019524:	f85d fb04 	ldr.w	pc, [sp], #4
 8019528:	4668      	mov	r0, sp
 801952a:	f000 ff39 	bl	801a3a0 <__ieee754_rem_pio2f>
 801952e:	f000 0003 	and.w	r0, r0, #3
 8019532:	2801      	cmp	r0, #1
 8019534:	d00a      	beq.n	801954c <sinf+0x54>
 8019536:	2802      	cmp	r0, #2
 8019538:	d00f      	beq.n	801955a <sinf+0x62>
 801953a:	b9c0      	cbnz	r0, 801956e <sinf+0x76>
 801953c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019540:	ed9d 0a00 	vldr	s0, [sp]
 8019544:	2001      	movs	r0, #1
 8019546:	f001 fb41 	bl	801abcc <__kernel_sinf>
 801954a:	e7ea      	b.n	8019522 <sinf+0x2a>
 801954c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019550:	ed9d 0a00 	vldr	s0, [sp]
 8019554:	f001 f864 	bl	801a620 <__kernel_cosf>
 8019558:	e7e3      	b.n	8019522 <sinf+0x2a>
 801955a:	eddd 0a01 	vldr	s1, [sp, #4]
 801955e:	ed9d 0a00 	vldr	s0, [sp]
 8019562:	2001      	movs	r0, #1
 8019564:	f001 fb32 	bl	801abcc <__kernel_sinf>
 8019568:	eeb1 0a40 	vneg.f32	s0, s0
 801956c:	e7d9      	b.n	8019522 <sinf+0x2a>
 801956e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019572:	ed9d 0a00 	vldr	s0, [sp]
 8019576:	f001 f853 	bl	801a620 <__kernel_cosf>
 801957a:	e7f5      	b.n	8019568 <sinf+0x70>
 801957c:	3f490fd8 	.word	0x3f490fd8
 8019580:	00000000 	.word	0x00000000

08019584 <tanf>:
 8019584:	ee10 3a10 	vmov	r3, s0
 8019588:	b507      	push	{r0, r1, r2, lr}
 801958a:	4a12      	ldr	r2, [pc, #72]	; (80195d4 <tanf+0x50>)
 801958c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019590:	4293      	cmp	r3, r2
 8019592:	dc07      	bgt.n	80195a4 <tanf+0x20>
 8019594:	eddf 0a10 	vldr	s1, [pc, #64]	; 80195d8 <tanf+0x54>
 8019598:	2001      	movs	r0, #1
 801959a:	b003      	add	sp, #12
 801959c:	f85d eb04 	ldr.w	lr, [sp], #4
 80195a0:	f001 bb5c 	b.w	801ac5c <__kernel_tanf>
 80195a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80195a8:	db04      	blt.n	80195b4 <tanf+0x30>
 80195aa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80195ae:	b003      	add	sp, #12
 80195b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80195b4:	4668      	mov	r0, sp
 80195b6:	f000 fef3 	bl	801a3a0 <__ieee754_rem_pio2f>
 80195ba:	0040      	lsls	r0, r0, #1
 80195bc:	f000 0002 	and.w	r0, r0, #2
 80195c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80195c4:	ed9d 0a00 	vldr	s0, [sp]
 80195c8:	f1c0 0001 	rsb	r0, r0, #1
 80195cc:	f001 fb46 	bl	801ac5c <__kernel_tanf>
 80195d0:	e7ed      	b.n	80195ae <tanf+0x2a>
 80195d2:	bf00      	nop
 80195d4:	3f490fda 	.word	0x3f490fda
 80195d8:	00000000 	.word	0x00000000

080195dc <asin>:
 80195dc:	b538      	push	{r3, r4, r5, lr}
 80195de:	ed2d 8b02 	vpush	{d8}
 80195e2:	ec55 4b10 	vmov	r4, r5, d0
 80195e6:	f000 f8cf 	bl	8019788 <__ieee754_asin>
 80195ea:	4622      	mov	r2, r4
 80195ec:	462b      	mov	r3, r5
 80195ee:	4620      	mov	r0, r4
 80195f0:	4629      	mov	r1, r5
 80195f2:	eeb0 8a40 	vmov.f32	s16, s0
 80195f6:	eef0 8a60 	vmov.f32	s17, s1
 80195fa:	f7e7 fa3b 	bl	8000a74 <__aeabi_dcmpun>
 80195fe:	b9a8      	cbnz	r0, 801962c <asin+0x50>
 8019600:	ec45 4b10 	vmov	d0, r4, r5
 8019604:	f001 fddc 	bl	801b1c0 <fabs>
 8019608:	4b0c      	ldr	r3, [pc, #48]	; (801963c <asin+0x60>)
 801960a:	ec51 0b10 	vmov	r0, r1, d0
 801960e:	2200      	movs	r2, #0
 8019610:	f7e7 fa26 	bl	8000a60 <__aeabi_dcmpgt>
 8019614:	b150      	cbz	r0, 801962c <asin+0x50>
 8019616:	f7ff fe45 	bl	80192a4 <__errno>
 801961a:	ecbd 8b02 	vpop	{d8}
 801961e:	2321      	movs	r3, #33	; 0x21
 8019620:	6003      	str	r3, [r0, #0]
 8019622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019626:	4806      	ldr	r0, [pc, #24]	; (8019640 <asin+0x64>)
 8019628:	f001 bdde 	b.w	801b1e8 <nan>
 801962c:	eeb0 0a48 	vmov.f32	s0, s16
 8019630:	eef0 0a68 	vmov.f32	s1, s17
 8019634:	ecbd 8b02 	vpop	{d8}
 8019638:	bd38      	pop	{r3, r4, r5, pc}
 801963a:	bf00      	nop
 801963c:	3ff00000 	.word	0x3ff00000
 8019640:	0801b5b0 	.word	0x0801b5b0

08019644 <atan2>:
 8019644:	f000 bab4 	b.w	8019bb0 <__ieee754_atan2>

08019648 <exp>:
 8019648:	b538      	push	{r3, r4, r5, lr}
 801964a:	ed2d 8b02 	vpush	{d8}
 801964e:	ec55 4b10 	vmov	r4, r5, d0
 8019652:	f000 fb79 	bl	8019d48 <__ieee754_exp>
 8019656:	eeb0 8a40 	vmov.f32	s16, s0
 801965a:	eef0 8a60 	vmov.f32	s17, s1
 801965e:	ec45 4b10 	vmov	d0, r4, r5
 8019662:	f001 fdb6 	bl	801b1d2 <finite>
 8019666:	b168      	cbz	r0, 8019684 <exp+0x3c>
 8019668:	a317      	add	r3, pc, #92	; (adr r3, 80196c8 <exp+0x80>)
 801966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801966e:	4620      	mov	r0, r4
 8019670:	4629      	mov	r1, r5
 8019672:	f7e7 f9f5 	bl	8000a60 <__aeabi_dcmpgt>
 8019676:	b160      	cbz	r0, 8019692 <exp+0x4a>
 8019678:	f7ff fe14 	bl	80192a4 <__errno>
 801967c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80196b8 <exp+0x70>
 8019680:	2322      	movs	r3, #34	; 0x22
 8019682:	6003      	str	r3, [r0, #0]
 8019684:	eeb0 0a48 	vmov.f32	s0, s16
 8019688:	eef0 0a68 	vmov.f32	s1, s17
 801968c:	ecbd 8b02 	vpop	{d8}
 8019690:	bd38      	pop	{r3, r4, r5, pc}
 8019692:	a30f      	add	r3, pc, #60	; (adr r3, 80196d0 <exp+0x88>)
 8019694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019698:	4620      	mov	r0, r4
 801969a:	4629      	mov	r1, r5
 801969c:	f7e7 f9c2 	bl	8000a24 <__aeabi_dcmplt>
 80196a0:	2800      	cmp	r0, #0
 80196a2:	d0ef      	beq.n	8019684 <exp+0x3c>
 80196a4:	f7ff fdfe 	bl	80192a4 <__errno>
 80196a8:	2322      	movs	r3, #34	; 0x22
 80196aa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80196c0 <exp+0x78>
 80196ae:	6003      	str	r3, [r0, #0]
 80196b0:	e7e8      	b.n	8019684 <exp+0x3c>
 80196b2:	bf00      	nop
 80196b4:	f3af 8000 	nop.w
 80196b8:	00000000 	.word	0x00000000
 80196bc:	7ff00000 	.word	0x7ff00000
	...
 80196c8:	fefa39ef 	.word	0xfefa39ef
 80196cc:	40862e42 	.word	0x40862e42
 80196d0:	d52d3051 	.word	0xd52d3051
 80196d4:	c0874910 	.word	0xc0874910

080196d8 <sqrt>:
 80196d8:	b538      	push	{r3, r4, r5, lr}
 80196da:	ed2d 8b02 	vpush	{d8}
 80196de:	ec55 4b10 	vmov	r4, r5, d0
 80196e2:	f000 fcb3 	bl	801a04c <__ieee754_sqrt>
 80196e6:	4622      	mov	r2, r4
 80196e8:	462b      	mov	r3, r5
 80196ea:	4620      	mov	r0, r4
 80196ec:	4629      	mov	r1, r5
 80196ee:	eeb0 8a40 	vmov.f32	s16, s0
 80196f2:	eef0 8a60 	vmov.f32	s17, s1
 80196f6:	f7e7 f9bd 	bl	8000a74 <__aeabi_dcmpun>
 80196fa:	b990      	cbnz	r0, 8019722 <sqrt+0x4a>
 80196fc:	2200      	movs	r2, #0
 80196fe:	2300      	movs	r3, #0
 8019700:	4620      	mov	r0, r4
 8019702:	4629      	mov	r1, r5
 8019704:	f7e7 f98e 	bl	8000a24 <__aeabi_dcmplt>
 8019708:	b158      	cbz	r0, 8019722 <sqrt+0x4a>
 801970a:	f7ff fdcb 	bl	80192a4 <__errno>
 801970e:	2321      	movs	r3, #33	; 0x21
 8019710:	6003      	str	r3, [r0, #0]
 8019712:	2200      	movs	r2, #0
 8019714:	2300      	movs	r3, #0
 8019716:	4610      	mov	r0, r2
 8019718:	4619      	mov	r1, r3
 801971a:	f7e7 f83b 	bl	8000794 <__aeabi_ddiv>
 801971e:	ec41 0b18 	vmov	d8, r0, r1
 8019722:	eeb0 0a48 	vmov.f32	s0, s16
 8019726:	eef0 0a68 	vmov.f32	s1, s17
 801972a:	ecbd 8b02 	vpop	{d8}
 801972e:	bd38      	pop	{r3, r4, r5, pc}

08019730 <acosf>:
 8019730:	b508      	push	{r3, lr}
 8019732:	ed2d 8b02 	vpush	{d8}
 8019736:	eeb0 8a40 	vmov.f32	s16, s0
 801973a:	f000 fd39 	bl	801a1b0 <__ieee754_acosf>
 801973e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019746:	eef0 8a40 	vmov.f32	s17, s0
 801974a:	d615      	bvs.n	8019778 <acosf+0x48>
 801974c:	eeb0 0a48 	vmov.f32	s0, s16
 8019750:	f001 fd52 	bl	801b1f8 <fabsf>
 8019754:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019758:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019760:	dd0a      	ble.n	8019778 <acosf+0x48>
 8019762:	f7ff fd9f 	bl	80192a4 <__errno>
 8019766:	ecbd 8b02 	vpop	{d8}
 801976a:	2321      	movs	r3, #33	; 0x21
 801976c:	6003      	str	r3, [r0, #0]
 801976e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019772:	4804      	ldr	r0, [pc, #16]	; (8019784 <acosf+0x54>)
 8019774:	f001 bd8a 	b.w	801b28c <nanf>
 8019778:	eeb0 0a68 	vmov.f32	s0, s17
 801977c:	ecbd 8b02 	vpop	{d8}
 8019780:	bd08      	pop	{r3, pc}
 8019782:	bf00      	nop
 8019784:	0801b5b0 	.word	0x0801b5b0

08019788 <__ieee754_asin>:
 8019788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801978c:	ed2d 8b04 	vpush	{d8-d9}
 8019790:	ec55 4b10 	vmov	r4, r5, d0
 8019794:	4bcc      	ldr	r3, [pc, #816]	; (8019ac8 <__ieee754_asin+0x340>)
 8019796:	b083      	sub	sp, #12
 8019798:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801979c:	4598      	cmp	r8, r3
 801979e:	9501      	str	r5, [sp, #4]
 80197a0:	dd35      	ble.n	801980e <__ieee754_asin+0x86>
 80197a2:	ee10 3a10 	vmov	r3, s0
 80197a6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80197aa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80197ae:	ea58 0303 	orrs.w	r3, r8, r3
 80197b2:	d117      	bne.n	80197e4 <__ieee754_asin+0x5c>
 80197b4:	a3aa      	add	r3, pc, #680	; (adr r3, 8019a60 <__ieee754_asin+0x2d8>)
 80197b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197ba:	ee10 0a10 	vmov	r0, s0
 80197be:	4629      	mov	r1, r5
 80197c0:	f7e6 febe 	bl	8000540 <__aeabi_dmul>
 80197c4:	a3a8      	add	r3, pc, #672	; (adr r3, 8019a68 <__ieee754_asin+0x2e0>)
 80197c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197ca:	4606      	mov	r6, r0
 80197cc:	460f      	mov	r7, r1
 80197ce:	4620      	mov	r0, r4
 80197d0:	4629      	mov	r1, r5
 80197d2:	f7e6 feb5 	bl	8000540 <__aeabi_dmul>
 80197d6:	4602      	mov	r2, r0
 80197d8:	460b      	mov	r3, r1
 80197da:	4630      	mov	r0, r6
 80197dc:	4639      	mov	r1, r7
 80197de:	f7e6 fcf9 	bl	80001d4 <__adddf3>
 80197e2:	e00b      	b.n	80197fc <__ieee754_asin+0x74>
 80197e4:	ee10 2a10 	vmov	r2, s0
 80197e8:	462b      	mov	r3, r5
 80197ea:	ee10 0a10 	vmov	r0, s0
 80197ee:	4629      	mov	r1, r5
 80197f0:	f7e6 fcee 	bl	80001d0 <__aeabi_dsub>
 80197f4:	4602      	mov	r2, r0
 80197f6:	460b      	mov	r3, r1
 80197f8:	f7e6 ffcc 	bl	8000794 <__aeabi_ddiv>
 80197fc:	4604      	mov	r4, r0
 80197fe:	460d      	mov	r5, r1
 8019800:	ec45 4b10 	vmov	d0, r4, r5
 8019804:	b003      	add	sp, #12
 8019806:	ecbd 8b04 	vpop	{d8-d9}
 801980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801980e:	4baf      	ldr	r3, [pc, #700]	; (8019acc <__ieee754_asin+0x344>)
 8019810:	4598      	cmp	r8, r3
 8019812:	dc11      	bgt.n	8019838 <__ieee754_asin+0xb0>
 8019814:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019818:	f280 80ae 	bge.w	8019978 <__ieee754_asin+0x1f0>
 801981c:	a394      	add	r3, pc, #592	; (adr r3, 8019a70 <__ieee754_asin+0x2e8>)
 801981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019822:	ee10 0a10 	vmov	r0, s0
 8019826:	4629      	mov	r1, r5
 8019828:	f7e6 fcd4 	bl	80001d4 <__adddf3>
 801982c:	4ba8      	ldr	r3, [pc, #672]	; (8019ad0 <__ieee754_asin+0x348>)
 801982e:	2200      	movs	r2, #0
 8019830:	f7e7 f916 	bl	8000a60 <__aeabi_dcmpgt>
 8019834:	2800      	cmp	r0, #0
 8019836:	d1e3      	bne.n	8019800 <__ieee754_asin+0x78>
 8019838:	ec45 4b10 	vmov	d0, r4, r5
 801983c:	f001 fcc0 	bl	801b1c0 <fabs>
 8019840:	49a3      	ldr	r1, [pc, #652]	; (8019ad0 <__ieee754_asin+0x348>)
 8019842:	ec53 2b10 	vmov	r2, r3, d0
 8019846:	2000      	movs	r0, #0
 8019848:	f7e6 fcc2 	bl	80001d0 <__aeabi_dsub>
 801984c:	4ba1      	ldr	r3, [pc, #644]	; (8019ad4 <__ieee754_asin+0x34c>)
 801984e:	2200      	movs	r2, #0
 8019850:	f7e6 fe76 	bl	8000540 <__aeabi_dmul>
 8019854:	a388      	add	r3, pc, #544	; (adr r3, 8019a78 <__ieee754_asin+0x2f0>)
 8019856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801985a:	4604      	mov	r4, r0
 801985c:	460d      	mov	r5, r1
 801985e:	f7e6 fe6f 	bl	8000540 <__aeabi_dmul>
 8019862:	a387      	add	r3, pc, #540	; (adr r3, 8019a80 <__ieee754_asin+0x2f8>)
 8019864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019868:	f7e6 fcb4 	bl	80001d4 <__adddf3>
 801986c:	4622      	mov	r2, r4
 801986e:	462b      	mov	r3, r5
 8019870:	f7e6 fe66 	bl	8000540 <__aeabi_dmul>
 8019874:	a384      	add	r3, pc, #528	; (adr r3, 8019a88 <__ieee754_asin+0x300>)
 8019876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801987a:	f7e6 fca9 	bl	80001d0 <__aeabi_dsub>
 801987e:	4622      	mov	r2, r4
 8019880:	462b      	mov	r3, r5
 8019882:	f7e6 fe5d 	bl	8000540 <__aeabi_dmul>
 8019886:	a382      	add	r3, pc, #520	; (adr r3, 8019a90 <__ieee754_asin+0x308>)
 8019888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801988c:	f7e6 fca2 	bl	80001d4 <__adddf3>
 8019890:	4622      	mov	r2, r4
 8019892:	462b      	mov	r3, r5
 8019894:	f7e6 fe54 	bl	8000540 <__aeabi_dmul>
 8019898:	a37f      	add	r3, pc, #508	; (adr r3, 8019a98 <__ieee754_asin+0x310>)
 801989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801989e:	f7e6 fc97 	bl	80001d0 <__aeabi_dsub>
 80198a2:	4622      	mov	r2, r4
 80198a4:	462b      	mov	r3, r5
 80198a6:	f7e6 fe4b 	bl	8000540 <__aeabi_dmul>
 80198aa:	a37d      	add	r3, pc, #500	; (adr r3, 8019aa0 <__ieee754_asin+0x318>)
 80198ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b0:	f7e6 fc90 	bl	80001d4 <__adddf3>
 80198b4:	4622      	mov	r2, r4
 80198b6:	462b      	mov	r3, r5
 80198b8:	f7e6 fe42 	bl	8000540 <__aeabi_dmul>
 80198bc:	a37a      	add	r3, pc, #488	; (adr r3, 8019aa8 <__ieee754_asin+0x320>)
 80198be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198c2:	ec41 0b18 	vmov	d8, r0, r1
 80198c6:	4620      	mov	r0, r4
 80198c8:	4629      	mov	r1, r5
 80198ca:	f7e6 fe39 	bl	8000540 <__aeabi_dmul>
 80198ce:	a378      	add	r3, pc, #480	; (adr r3, 8019ab0 <__ieee754_asin+0x328>)
 80198d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198d4:	f7e6 fc7c 	bl	80001d0 <__aeabi_dsub>
 80198d8:	4622      	mov	r2, r4
 80198da:	462b      	mov	r3, r5
 80198dc:	f7e6 fe30 	bl	8000540 <__aeabi_dmul>
 80198e0:	a375      	add	r3, pc, #468	; (adr r3, 8019ab8 <__ieee754_asin+0x330>)
 80198e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198e6:	f7e6 fc75 	bl	80001d4 <__adddf3>
 80198ea:	4622      	mov	r2, r4
 80198ec:	462b      	mov	r3, r5
 80198ee:	f7e6 fe27 	bl	8000540 <__aeabi_dmul>
 80198f2:	a373      	add	r3, pc, #460	; (adr r3, 8019ac0 <__ieee754_asin+0x338>)
 80198f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198f8:	f7e6 fc6a 	bl	80001d0 <__aeabi_dsub>
 80198fc:	4622      	mov	r2, r4
 80198fe:	462b      	mov	r3, r5
 8019900:	f7e6 fe1e 	bl	8000540 <__aeabi_dmul>
 8019904:	4b72      	ldr	r3, [pc, #456]	; (8019ad0 <__ieee754_asin+0x348>)
 8019906:	2200      	movs	r2, #0
 8019908:	f7e6 fc64 	bl	80001d4 <__adddf3>
 801990c:	ec45 4b10 	vmov	d0, r4, r5
 8019910:	4606      	mov	r6, r0
 8019912:	460f      	mov	r7, r1
 8019914:	f000 fb9a 	bl	801a04c <__ieee754_sqrt>
 8019918:	4b6f      	ldr	r3, [pc, #444]	; (8019ad8 <__ieee754_asin+0x350>)
 801991a:	4598      	cmp	r8, r3
 801991c:	ec5b ab10 	vmov	sl, fp, d0
 8019920:	f340 80dc 	ble.w	8019adc <__ieee754_asin+0x354>
 8019924:	4632      	mov	r2, r6
 8019926:	463b      	mov	r3, r7
 8019928:	ec51 0b18 	vmov	r0, r1, d8
 801992c:	f7e6 ff32 	bl	8000794 <__aeabi_ddiv>
 8019930:	4652      	mov	r2, sl
 8019932:	465b      	mov	r3, fp
 8019934:	f7e6 fe04 	bl	8000540 <__aeabi_dmul>
 8019938:	4652      	mov	r2, sl
 801993a:	465b      	mov	r3, fp
 801993c:	f7e6 fc4a 	bl	80001d4 <__adddf3>
 8019940:	4602      	mov	r2, r0
 8019942:	460b      	mov	r3, r1
 8019944:	f7e6 fc46 	bl	80001d4 <__adddf3>
 8019948:	a347      	add	r3, pc, #284	; (adr r3, 8019a68 <__ieee754_asin+0x2e0>)
 801994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801994e:	f7e6 fc3f 	bl	80001d0 <__aeabi_dsub>
 8019952:	4602      	mov	r2, r0
 8019954:	460b      	mov	r3, r1
 8019956:	a142      	add	r1, pc, #264	; (adr r1, 8019a60 <__ieee754_asin+0x2d8>)
 8019958:	e9d1 0100 	ldrd	r0, r1, [r1]
 801995c:	f7e6 fc38 	bl	80001d0 <__aeabi_dsub>
 8019960:	9b01      	ldr	r3, [sp, #4]
 8019962:	2b00      	cmp	r3, #0
 8019964:	bfdc      	itt	le
 8019966:	4602      	movle	r2, r0
 8019968:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801996c:	4604      	mov	r4, r0
 801996e:	460d      	mov	r5, r1
 8019970:	bfdc      	itt	le
 8019972:	4614      	movle	r4, r2
 8019974:	461d      	movle	r5, r3
 8019976:	e743      	b.n	8019800 <__ieee754_asin+0x78>
 8019978:	ee10 2a10 	vmov	r2, s0
 801997c:	ee10 0a10 	vmov	r0, s0
 8019980:	462b      	mov	r3, r5
 8019982:	4629      	mov	r1, r5
 8019984:	f7e6 fddc 	bl	8000540 <__aeabi_dmul>
 8019988:	a33b      	add	r3, pc, #236	; (adr r3, 8019a78 <__ieee754_asin+0x2f0>)
 801998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801998e:	4606      	mov	r6, r0
 8019990:	460f      	mov	r7, r1
 8019992:	f7e6 fdd5 	bl	8000540 <__aeabi_dmul>
 8019996:	a33a      	add	r3, pc, #232	; (adr r3, 8019a80 <__ieee754_asin+0x2f8>)
 8019998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801999c:	f7e6 fc1a 	bl	80001d4 <__adddf3>
 80199a0:	4632      	mov	r2, r6
 80199a2:	463b      	mov	r3, r7
 80199a4:	f7e6 fdcc 	bl	8000540 <__aeabi_dmul>
 80199a8:	a337      	add	r3, pc, #220	; (adr r3, 8019a88 <__ieee754_asin+0x300>)
 80199aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ae:	f7e6 fc0f 	bl	80001d0 <__aeabi_dsub>
 80199b2:	4632      	mov	r2, r6
 80199b4:	463b      	mov	r3, r7
 80199b6:	f7e6 fdc3 	bl	8000540 <__aeabi_dmul>
 80199ba:	a335      	add	r3, pc, #212	; (adr r3, 8019a90 <__ieee754_asin+0x308>)
 80199bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199c0:	f7e6 fc08 	bl	80001d4 <__adddf3>
 80199c4:	4632      	mov	r2, r6
 80199c6:	463b      	mov	r3, r7
 80199c8:	f7e6 fdba 	bl	8000540 <__aeabi_dmul>
 80199cc:	a332      	add	r3, pc, #200	; (adr r3, 8019a98 <__ieee754_asin+0x310>)
 80199ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199d2:	f7e6 fbfd 	bl	80001d0 <__aeabi_dsub>
 80199d6:	4632      	mov	r2, r6
 80199d8:	463b      	mov	r3, r7
 80199da:	f7e6 fdb1 	bl	8000540 <__aeabi_dmul>
 80199de:	a330      	add	r3, pc, #192	; (adr r3, 8019aa0 <__ieee754_asin+0x318>)
 80199e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199e4:	f7e6 fbf6 	bl	80001d4 <__adddf3>
 80199e8:	4632      	mov	r2, r6
 80199ea:	463b      	mov	r3, r7
 80199ec:	f7e6 fda8 	bl	8000540 <__aeabi_dmul>
 80199f0:	a32d      	add	r3, pc, #180	; (adr r3, 8019aa8 <__ieee754_asin+0x320>)
 80199f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f6:	4680      	mov	r8, r0
 80199f8:	4689      	mov	r9, r1
 80199fa:	4630      	mov	r0, r6
 80199fc:	4639      	mov	r1, r7
 80199fe:	f7e6 fd9f 	bl	8000540 <__aeabi_dmul>
 8019a02:	a32b      	add	r3, pc, #172	; (adr r3, 8019ab0 <__ieee754_asin+0x328>)
 8019a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a08:	f7e6 fbe2 	bl	80001d0 <__aeabi_dsub>
 8019a0c:	4632      	mov	r2, r6
 8019a0e:	463b      	mov	r3, r7
 8019a10:	f7e6 fd96 	bl	8000540 <__aeabi_dmul>
 8019a14:	a328      	add	r3, pc, #160	; (adr r3, 8019ab8 <__ieee754_asin+0x330>)
 8019a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a1a:	f7e6 fbdb 	bl	80001d4 <__adddf3>
 8019a1e:	4632      	mov	r2, r6
 8019a20:	463b      	mov	r3, r7
 8019a22:	f7e6 fd8d 	bl	8000540 <__aeabi_dmul>
 8019a26:	a326      	add	r3, pc, #152	; (adr r3, 8019ac0 <__ieee754_asin+0x338>)
 8019a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a2c:	f7e6 fbd0 	bl	80001d0 <__aeabi_dsub>
 8019a30:	4632      	mov	r2, r6
 8019a32:	463b      	mov	r3, r7
 8019a34:	f7e6 fd84 	bl	8000540 <__aeabi_dmul>
 8019a38:	4b25      	ldr	r3, [pc, #148]	; (8019ad0 <__ieee754_asin+0x348>)
 8019a3a:	2200      	movs	r2, #0
 8019a3c:	f7e6 fbca 	bl	80001d4 <__adddf3>
 8019a40:	4602      	mov	r2, r0
 8019a42:	460b      	mov	r3, r1
 8019a44:	4640      	mov	r0, r8
 8019a46:	4649      	mov	r1, r9
 8019a48:	f7e6 fea4 	bl	8000794 <__aeabi_ddiv>
 8019a4c:	4622      	mov	r2, r4
 8019a4e:	462b      	mov	r3, r5
 8019a50:	f7e6 fd76 	bl	8000540 <__aeabi_dmul>
 8019a54:	4602      	mov	r2, r0
 8019a56:	460b      	mov	r3, r1
 8019a58:	4620      	mov	r0, r4
 8019a5a:	4629      	mov	r1, r5
 8019a5c:	e6bf      	b.n	80197de <__ieee754_asin+0x56>
 8019a5e:	bf00      	nop
 8019a60:	54442d18 	.word	0x54442d18
 8019a64:	3ff921fb 	.word	0x3ff921fb
 8019a68:	33145c07 	.word	0x33145c07
 8019a6c:	3c91a626 	.word	0x3c91a626
 8019a70:	8800759c 	.word	0x8800759c
 8019a74:	7e37e43c 	.word	0x7e37e43c
 8019a78:	0dfdf709 	.word	0x0dfdf709
 8019a7c:	3f023de1 	.word	0x3f023de1
 8019a80:	7501b288 	.word	0x7501b288
 8019a84:	3f49efe0 	.word	0x3f49efe0
 8019a88:	b5688f3b 	.word	0xb5688f3b
 8019a8c:	3fa48228 	.word	0x3fa48228
 8019a90:	0e884455 	.word	0x0e884455
 8019a94:	3fc9c155 	.word	0x3fc9c155
 8019a98:	03eb6f7d 	.word	0x03eb6f7d
 8019a9c:	3fd4d612 	.word	0x3fd4d612
 8019aa0:	55555555 	.word	0x55555555
 8019aa4:	3fc55555 	.word	0x3fc55555
 8019aa8:	b12e9282 	.word	0xb12e9282
 8019aac:	3fb3b8c5 	.word	0x3fb3b8c5
 8019ab0:	1b8d0159 	.word	0x1b8d0159
 8019ab4:	3fe6066c 	.word	0x3fe6066c
 8019ab8:	9c598ac8 	.word	0x9c598ac8
 8019abc:	40002ae5 	.word	0x40002ae5
 8019ac0:	1c8a2d4b 	.word	0x1c8a2d4b
 8019ac4:	40033a27 	.word	0x40033a27
 8019ac8:	3fefffff 	.word	0x3fefffff
 8019acc:	3fdfffff 	.word	0x3fdfffff
 8019ad0:	3ff00000 	.word	0x3ff00000
 8019ad4:	3fe00000 	.word	0x3fe00000
 8019ad8:	3fef3332 	.word	0x3fef3332
 8019adc:	ee10 2a10 	vmov	r2, s0
 8019ae0:	ee10 0a10 	vmov	r0, s0
 8019ae4:	465b      	mov	r3, fp
 8019ae6:	4659      	mov	r1, fp
 8019ae8:	f7e6 fb74 	bl	80001d4 <__adddf3>
 8019aec:	4632      	mov	r2, r6
 8019aee:	463b      	mov	r3, r7
 8019af0:	ec41 0b19 	vmov	d9, r0, r1
 8019af4:	ec51 0b18 	vmov	r0, r1, d8
 8019af8:	f7e6 fe4c 	bl	8000794 <__aeabi_ddiv>
 8019afc:	4602      	mov	r2, r0
 8019afe:	460b      	mov	r3, r1
 8019b00:	ec51 0b19 	vmov	r0, r1, d9
 8019b04:	f7e6 fd1c 	bl	8000540 <__aeabi_dmul>
 8019b08:	f04f 0800 	mov.w	r8, #0
 8019b0c:	4606      	mov	r6, r0
 8019b0e:	460f      	mov	r7, r1
 8019b10:	4642      	mov	r2, r8
 8019b12:	465b      	mov	r3, fp
 8019b14:	4640      	mov	r0, r8
 8019b16:	4659      	mov	r1, fp
 8019b18:	f7e6 fd12 	bl	8000540 <__aeabi_dmul>
 8019b1c:	4602      	mov	r2, r0
 8019b1e:	460b      	mov	r3, r1
 8019b20:	4620      	mov	r0, r4
 8019b22:	4629      	mov	r1, r5
 8019b24:	f7e6 fb54 	bl	80001d0 <__aeabi_dsub>
 8019b28:	4642      	mov	r2, r8
 8019b2a:	4604      	mov	r4, r0
 8019b2c:	460d      	mov	r5, r1
 8019b2e:	465b      	mov	r3, fp
 8019b30:	4650      	mov	r0, sl
 8019b32:	4659      	mov	r1, fp
 8019b34:	f7e6 fb4e 	bl	80001d4 <__adddf3>
 8019b38:	4602      	mov	r2, r0
 8019b3a:	460b      	mov	r3, r1
 8019b3c:	4620      	mov	r0, r4
 8019b3e:	4629      	mov	r1, r5
 8019b40:	f7e6 fe28 	bl	8000794 <__aeabi_ddiv>
 8019b44:	4602      	mov	r2, r0
 8019b46:	460b      	mov	r3, r1
 8019b48:	f7e6 fb44 	bl	80001d4 <__adddf3>
 8019b4c:	4602      	mov	r2, r0
 8019b4e:	460b      	mov	r3, r1
 8019b50:	a113      	add	r1, pc, #76	; (adr r1, 8019ba0 <__ieee754_asin+0x418>)
 8019b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b56:	f7e6 fb3b 	bl	80001d0 <__aeabi_dsub>
 8019b5a:	4602      	mov	r2, r0
 8019b5c:	460b      	mov	r3, r1
 8019b5e:	4630      	mov	r0, r6
 8019b60:	4639      	mov	r1, r7
 8019b62:	f7e6 fb35 	bl	80001d0 <__aeabi_dsub>
 8019b66:	4642      	mov	r2, r8
 8019b68:	4604      	mov	r4, r0
 8019b6a:	460d      	mov	r5, r1
 8019b6c:	465b      	mov	r3, fp
 8019b6e:	4640      	mov	r0, r8
 8019b70:	4659      	mov	r1, fp
 8019b72:	f7e6 fb2f 	bl	80001d4 <__adddf3>
 8019b76:	4602      	mov	r2, r0
 8019b78:	460b      	mov	r3, r1
 8019b7a:	a10b      	add	r1, pc, #44	; (adr r1, 8019ba8 <__ieee754_asin+0x420>)
 8019b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b80:	f7e6 fb26 	bl	80001d0 <__aeabi_dsub>
 8019b84:	4602      	mov	r2, r0
 8019b86:	460b      	mov	r3, r1
 8019b88:	4620      	mov	r0, r4
 8019b8a:	4629      	mov	r1, r5
 8019b8c:	f7e6 fb20 	bl	80001d0 <__aeabi_dsub>
 8019b90:	4602      	mov	r2, r0
 8019b92:	460b      	mov	r3, r1
 8019b94:	a104      	add	r1, pc, #16	; (adr r1, 8019ba8 <__ieee754_asin+0x420>)
 8019b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b9a:	e6df      	b.n	801995c <__ieee754_asin+0x1d4>
 8019b9c:	f3af 8000 	nop.w
 8019ba0:	33145c07 	.word	0x33145c07
 8019ba4:	3c91a626 	.word	0x3c91a626
 8019ba8:	54442d18 	.word	0x54442d18
 8019bac:	3fe921fb 	.word	0x3fe921fb

08019bb0 <__ieee754_atan2>:
 8019bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bb4:	ec57 6b11 	vmov	r6, r7, d1
 8019bb8:	4273      	negs	r3, r6
 8019bba:	f8df e184 	ldr.w	lr, [pc, #388]	; 8019d40 <__ieee754_atan2+0x190>
 8019bbe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019bc2:	4333      	orrs	r3, r6
 8019bc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019bc8:	4573      	cmp	r3, lr
 8019bca:	ec51 0b10 	vmov	r0, r1, d0
 8019bce:	ee11 8a10 	vmov	r8, s2
 8019bd2:	d80a      	bhi.n	8019bea <__ieee754_atan2+0x3a>
 8019bd4:	4244      	negs	r4, r0
 8019bd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019bda:	4304      	orrs	r4, r0
 8019bdc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019be0:	4574      	cmp	r4, lr
 8019be2:	ee10 9a10 	vmov	r9, s0
 8019be6:	468c      	mov	ip, r1
 8019be8:	d907      	bls.n	8019bfa <__ieee754_atan2+0x4a>
 8019bea:	4632      	mov	r2, r6
 8019bec:	463b      	mov	r3, r7
 8019bee:	f7e6 faf1 	bl	80001d4 <__adddf3>
 8019bf2:	ec41 0b10 	vmov	d0, r0, r1
 8019bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bfa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019bfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019c02:	4334      	orrs	r4, r6
 8019c04:	d103      	bne.n	8019c0e <__ieee754_atan2+0x5e>
 8019c06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c0a:	f001 b939 	b.w	801ae80 <atan>
 8019c0e:	17bc      	asrs	r4, r7, #30
 8019c10:	f004 0402 	and.w	r4, r4, #2
 8019c14:	ea53 0909 	orrs.w	r9, r3, r9
 8019c18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019c1c:	d107      	bne.n	8019c2e <__ieee754_atan2+0x7e>
 8019c1e:	2c02      	cmp	r4, #2
 8019c20:	d060      	beq.n	8019ce4 <__ieee754_atan2+0x134>
 8019c22:	2c03      	cmp	r4, #3
 8019c24:	d1e5      	bne.n	8019bf2 <__ieee754_atan2+0x42>
 8019c26:	a142      	add	r1, pc, #264	; (adr r1, 8019d30 <__ieee754_atan2+0x180>)
 8019c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c2c:	e7e1      	b.n	8019bf2 <__ieee754_atan2+0x42>
 8019c2e:	ea52 0808 	orrs.w	r8, r2, r8
 8019c32:	d106      	bne.n	8019c42 <__ieee754_atan2+0x92>
 8019c34:	f1bc 0f00 	cmp.w	ip, #0
 8019c38:	da5f      	bge.n	8019cfa <__ieee754_atan2+0x14a>
 8019c3a:	a13f      	add	r1, pc, #252	; (adr r1, 8019d38 <__ieee754_atan2+0x188>)
 8019c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c40:	e7d7      	b.n	8019bf2 <__ieee754_atan2+0x42>
 8019c42:	4572      	cmp	r2, lr
 8019c44:	d10f      	bne.n	8019c66 <__ieee754_atan2+0xb6>
 8019c46:	4293      	cmp	r3, r2
 8019c48:	f104 34ff 	add.w	r4, r4, #4294967295
 8019c4c:	d107      	bne.n	8019c5e <__ieee754_atan2+0xae>
 8019c4e:	2c02      	cmp	r4, #2
 8019c50:	d84c      	bhi.n	8019cec <__ieee754_atan2+0x13c>
 8019c52:	4b35      	ldr	r3, [pc, #212]	; (8019d28 <__ieee754_atan2+0x178>)
 8019c54:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8019c58:	e9d4 0100 	ldrd	r0, r1, [r4]
 8019c5c:	e7c9      	b.n	8019bf2 <__ieee754_atan2+0x42>
 8019c5e:	2c02      	cmp	r4, #2
 8019c60:	d848      	bhi.n	8019cf4 <__ieee754_atan2+0x144>
 8019c62:	4b32      	ldr	r3, [pc, #200]	; (8019d2c <__ieee754_atan2+0x17c>)
 8019c64:	e7f6      	b.n	8019c54 <__ieee754_atan2+0xa4>
 8019c66:	4573      	cmp	r3, lr
 8019c68:	d0e4      	beq.n	8019c34 <__ieee754_atan2+0x84>
 8019c6a:	1a9b      	subs	r3, r3, r2
 8019c6c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8019c70:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019c74:	da1e      	bge.n	8019cb4 <__ieee754_atan2+0x104>
 8019c76:	2f00      	cmp	r7, #0
 8019c78:	da01      	bge.n	8019c7e <__ieee754_atan2+0xce>
 8019c7a:	323c      	adds	r2, #60	; 0x3c
 8019c7c:	db1e      	blt.n	8019cbc <__ieee754_atan2+0x10c>
 8019c7e:	4632      	mov	r2, r6
 8019c80:	463b      	mov	r3, r7
 8019c82:	f7e6 fd87 	bl	8000794 <__aeabi_ddiv>
 8019c86:	ec41 0b10 	vmov	d0, r0, r1
 8019c8a:	f001 fa99 	bl	801b1c0 <fabs>
 8019c8e:	f001 f8f7 	bl	801ae80 <atan>
 8019c92:	ec51 0b10 	vmov	r0, r1, d0
 8019c96:	2c01      	cmp	r4, #1
 8019c98:	d013      	beq.n	8019cc2 <__ieee754_atan2+0x112>
 8019c9a:	2c02      	cmp	r4, #2
 8019c9c:	d015      	beq.n	8019cca <__ieee754_atan2+0x11a>
 8019c9e:	2c00      	cmp	r4, #0
 8019ca0:	d0a7      	beq.n	8019bf2 <__ieee754_atan2+0x42>
 8019ca2:	a319      	add	r3, pc, #100	; (adr r3, 8019d08 <__ieee754_atan2+0x158>)
 8019ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca8:	f7e6 fa92 	bl	80001d0 <__aeabi_dsub>
 8019cac:	a318      	add	r3, pc, #96	; (adr r3, 8019d10 <__ieee754_atan2+0x160>)
 8019cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cb2:	e014      	b.n	8019cde <__ieee754_atan2+0x12e>
 8019cb4:	a118      	add	r1, pc, #96	; (adr r1, 8019d18 <__ieee754_atan2+0x168>)
 8019cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cba:	e7ec      	b.n	8019c96 <__ieee754_atan2+0xe6>
 8019cbc:	2000      	movs	r0, #0
 8019cbe:	2100      	movs	r1, #0
 8019cc0:	e7e9      	b.n	8019c96 <__ieee754_atan2+0xe6>
 8019cc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019cc6:	4619      	mov	r1, r3
 8019cc8:	e793      	b.n	8019bf2 <__ieee754_atan2+0x42>
 8019cca:	a30f      	add	r3, pc, #60	; (adr r3, 8019d08 <__ieee754_atan2+0x158>)
 8019ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cd0:	f7e6 fa7e 	bl	80001d0 <__aeabi_dsub>
 8019cd4:	4602      	mov	r2, r0
 8019cd6:	460b      	mov	r3, r1
 8019cd8:	a10d      	add	r1, pc, #52	; (adr r1, 8019d10 <__ieee754_atan2+0x160>)
 8019cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cde:	f7e6 fa77 	bl	80001d0 <__aeabi_dsub>
 8019ce2:	e786      	b.n	8019bf2 <__ieee754_atan2+0x42>
 8019ce4:	a10a      	add	r1, pc, #40	; (adr r1, 8019d10 <__ieee754_atan2+0x160>)
 8019ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cea:	e782      	b.n	8019bf2 <__ieee754_atan2+0x42>
 8019cec:	a10c      	add	r1, pc, #48	; (adr r1, 8019d20 <__ieee754_atan2+0x170>)
 8019cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cf2:	e77e      	b.n	8019bf2 <__ieee754_atan2+0x42>
 8019cf4:	2000      	movs	r0, #0
 8019cf6:	2100      	movs	r1, #0
 8019cf8:	e77b      	b.n	8019bf2 <__ieee754_atan2+0x42>
 8019cfa:	a107      	add	r1, pc, #28	; (adr r1, 8019d18 <__ieee754_atan2+0x168>)
 8019cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d00:	e777      	b.n	8019bf2 <__ieee754_atan2+0x42>
 8019d02:	bf00      	nop
 8019d04:	f3af 8000 	nop.w
 8019d08:	33145c07 	.word	0x33145c07
 8019d0c:	3ca1a626 	.word	0x3ca1a626
 8019d10:	54442d18 	.word	0x54442d18
 8019d14:	400921fb 	.word	0x400921fb
 8019d18:	54442d18 	.word	0x54442d18
 8019d1c:	3ff921fb 	.word	0x3ff921fb
 8019d20:	54442d18 	.word	0x54442d18
 8019d24:	3fe921fb 	.word	0x3fe921fb
 8019d28:	0801b5b8 	.word	0x0801b5b8
 8019d2c:	0801b5d0 	.word	0x0801b5d0
 8019d30:	54442d18 	.word	0x54442d18
 8019d34:	c00921fb 	.word	0xc00921fb
 8019d38:	54442d18 	.word	0x54442d18
 8019d3c:	bff921fb 	.word	0xbff921fb
 8019d40:	7ff00000 	.word	0x7ff00000
 8019d44:	00000000 	.word	0x00000000

08019d48 <__ieee754_exp>:
 8019d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d4c:	ec55 4b10 	vmov	r4, r5, d0
 8019d50:	49b5      	ldr	r1, [pc, #724]	; (801a028 <__ieee754_exp+0x2e0>)
 8019d52:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019d56:	428b      	cmp	r3, r1
 8019d58:	ed2d 8b04 	vpush	{d8-d9}
 8019d5c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8019d60:	d93d      	bls.n	8019dde <__ieee754_exp+0x96>
 8019d62:	49b2      	ldr	r1, [pc, #712]	; (801a02c <__ieee754_exp+0x2e4>)
 8019d64:	428b      	cmp	r3, r1
 8019d66:	d918      	bls.n	8019d9a <__ieee754_exp+0x52>
 8019d68:	ee10 3a10 	vmov	r3, s0
 8019d6c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8019d70:	4313      	orrs	r3, r2
 8019d72:	d009      	beq.n	8019d88 <__ieee754_exp+0x40>
 8019d74:	ee10 2a10 	vmov	r2, s0
 8019d78:	462b      	mov	r3, r5
 8019d7a:	4620      	mov	r0, r4
 8019d7c:	4629      	mov	r1, r5
 8019d7e:	f7e6 fa29 	bl	80001d4 <__adddf3>
 8019d82:	4604      	mov	r4, r0
 8019d84:	460d      	mov	r5, r1
 8019d86:	e002      	b.n	8019d8e <__ieee754_exp+0x46>
 8019d88:	b10e      	cbz	r6, 8019d8e <__ieee754_exp+0x46>
 8019d8a:	2400      	movs	r4, #0
 8019d8c:	2500      	movs	r5, #0
 8019d8e:	ecbd 8b04 	vpop	{d8-d9}
 8019d92:	ec45 4b10 	vmov	d0, r4, r5
 8019d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d9a:	a38d      	add	r3, pc, #564	; (adr r3, 8019fd0 <__ieee754_exp+0x288>)
 8019d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019da0:	ee10 0a10 	vmov	r0, s0
 8019da4:	4629      	mov	r1, r5
 8019da6:	f7e6 fe5b 	bl	8000a60 <__aeabi_dcmpgt>
 8019daa:	4607      	mov	r7, r0
 8019dac:	b130      	cbz	r0, 8019dbc <__ieee754_exp+0x74>
 8019dae:	ecbd 8b04 	vpop	{d8-d9}
 8019db2:	2000      	movs	r0, #0
 8019db4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019db8:	f001 b857 	b.w	801ae6a <__math_oflow>
 8019dbc:	a386      	add	r3, pc, #536	; (adr r3, 8019fd8 <__ieee754_exp+0x290>)
 8019dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	4629      	mov	r1, r5
 8019dc6:	f7e6 fe2d 	bl	8000a24 <__aeabi_dcmplt>
 8019dca:	2800      	cmp	r0, #0
 8019dcc:	f000 808b 	beq.w	8019ee6 <__ieee754_exp+0x19e>
 8019dd0:	ecbd 8b04 	vpop	{d8-d9}
 8019dd4:	4638      	mov	r0, r7
 8019dd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dda:	f001 b83d 	b.w	801ae58 <__math_uflow>
 8019dde:	4a94      	ldr	r2, [pc, #592]	; (801a030 <__ieee754_exp+0x2e8>)
 8019de0:	4293      	cmp	r3, r2
 8019de2:	f240 80ac 	bls.w	8019f3e <__ieee754_exp+0x1f6>
 8019de6:	4a93      	ldr	r2, [pc, #588]	; (801a034 <__ieee754_exp+0x2ec>)
 8019de8:	4293      	cmp	r3, r2
 8019dea:	d87c      	bhi.n	8019ee6 <__ieee754_exp+0x19e>
 8019dec:	4b92      	ldr	r3, [pc, #584]	; (801a038 <__ieee754_exp+0x2f0>)
 8019dee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8019df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019df6:	ee10 0a10 	vmov	r0, s0
 8019dfa:	4629      	mov	r1, r5
 8019dfc:	f7e6 f9e8 	bl	80001d0 <__aeabi_dsub>
 8019e00:	4b8e      	ldr	r3, [pc, #568]	; (801a03c <__ieee754_exp+0x2f4>)
 8019e02:	00f7      	lsls	r7, r6, #3
 8019e04:	443b      	add	r3, r7
 8019e06:	ed93 7b00 	vldr	d7, [r3]
 8019e0a:	f1c6 0a01 	rsb	sl, r6, #1
 8019e0e:	4680      	mov	r8, r0
 8019e10:	4689      	mov	r9, r1
 8019e12:	ebaa 0a06 	sub.w	sl, sl, r6
 8019e16:	eeb0 8a47 	vmov.f32	s16, s14
 8019e1a:	eef0 8a67 	vmov.f32	s17, s15
 8019e1e:	ec53 2b18 	vmov	r2, r3, d8
 8019e22:	4640      	mov	r0, r8
 8019e24:	4649      	mov	r1, r9
 8019e26:	f7e6 f9d3 	bl	80001d0 <__aeabi_dsub>
 8019e2a:	4604      	mov	r4, r0
 8019e2c:	460d      	mov	r5, r1
 8019e2e:	4622      	mov	r2, r4
 8019e30:	462b      	mov	r3, r5
 8019e32:	4620      	mov	r0, r4
 8019e34:	4629      	mov	r1, r5
 8019e36:	f7e6 fb83 	bl	8000540 <__aeabi_dmul>
 8019e3a:	a369      	add	r3, pc, #420	; (adr r3, 8019fe0 <__ieee754_exp+0x298>)
 8019e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e40:	4606      	mov	r6, r0
 8019e42:	460f      	mov	r7, r1
 8019e44:	f7e6 fb7c 	bl	8000540 <__aeabi_dmul>
 8019e48:	a367      	add	r3, pc, #412	; (adr r3, 8019fe8 <__ieee754_exp+0x2a0>)
 8019e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e4e:	f7e6 f9bf 	bl	80001d0 <__aeabi_dsub>
 8019e52:	4632      	mov	r2, r6
 8019e54:	463b      	mov	r3, r7
 8019e56:	f7e6 fb73 	bl	8000540 <__aeabi_dmul>
 8019e5a:	a365      	add	r3, pc, #404	; (adr r3, 8019ff0 <__ieee754_exp+0x2a8>)
 8019e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e60:	f7e6 f9b8 	bl	80001d4 <__adddf3>
 8019e64:	4632      	mov	r2, r6
 8019e66:	463b      	mov	r3, r7
 8019e68:	f7e6 fb6a 	bl	8000540 <__aeabi_dmul>
 8019e6c:	a362      	add	r3, pc, #392	; (adr r3, 8019ff8 <__ieee754_exp+0x2b0>)
 8019e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e72:	f7e6 f9ad 	bl	80001d0 <__aeabi_dsub>
 8019e76:	4632      	mov	r2, r6
 8019e78:	463b      	mov	r3, r7
 8019e7a:	f7e6 fb61 	bl	8000540 <__aeabi_dmul>
 8019e7e:	a360      	add	r3, pc, #384	; (adr r3, 801a000 <__ieee754_exp+0x2b8>)
 8019e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e84:	f7e6 f9a6 	bl	80001d4 <__adddf3>
 8019e88:	4632      	mov	r2, r6
 8019e8a:	463b      	mov	r3, r7
 8019e8c:	f7e6 fb58 	bl	8000540 <__aeabi_dmul>
 8019e90:	4602      	mov	r2, r0
 8019e92:	460b      	mov	r3, r1
 8019e94:	4620      	mov	r0, r4
 8019e96:	4629      	mov	r1, r5
 8019e98:	f7e6 f99a 	bl	80001d0 <__aeabi_dsub>
 8019e9c:	4602      	mov	r2, r0
 8019e9e:	460b      	mov	r3, r1
 8019ea0:	4606      	mov	r6, r0
 8019ea2:	460f      	mov	r7, r1
 8019ea4:	4620      	mov	r0, r4
 8019ea6:	4629      	mov	r1, r5
 8019ea8:	f7e6 fb4a 	bl	8000540 <__aeabi_dmul>
 8019eac:	ec41 0b19 	vmov	d9, r0, r1
 8019eb0:	f1ba 0f00 	cmp.w	sl, #0
 8019eb4:	d15d      	bne.n	8019f72 <__ieee754_exp+0x22a>
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019ebc:	4630      	mov	r0, r6
 8019ebe:	4639      	mov	r1, r7
 8019ec0:	f7e6 f986 	bl	80001d0 <__aeabi_dsub>
 8019ec4:	4602      	mov	r2, r0
 8019ec6:	460b      	mov	r3, r1
 8019ec8:	ec51 0b19 	vmov	r0, r1, d9
 8019ecc:	f7e6 fc62 	bl	8000794 <__aeabi_ddiv>
 8019ed0:	4622      	mov	r2, r4
 8019ed2:	462b      	mov	r3, r5
 8019ed4:	f7e6 f97c 	bl	80001d0 <__aeabi_dsub>
 8019ed8:	4602      	mov	r2, r0
 8019eda:	460b      	mov	r3, r1
 8019edc:	2000      	movs	r0, #0
 8019ede:	4958      	ldr	r1, [pc, #352]	; (801a040 <__ieee754_exp+0x2f8>)
 8019ee0:	f7e6 f976 	bl	80001d0 <__aeabi_dsub>
 8019ee4:	e74d      	b.n	8019d82 <__ieee754_exp+0x3a>
 8019ee6:	4857      	ldr	r0, [pc, #348]	; (801a044 <__ieee754_exp+0x2fc>)
 8019ee8:	a347      	add	r3, pc, #284	; (adr r3, 801a008 <__ieee754_exp+0x2c0>)
 8019eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eee:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8019ef2:	4629      	mov	r1, r5
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	f7e6 fb23 	bl	8000540 <__aeabi_dmul>
 8019efa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019efe:	f7e6 f969 	bl	80001d4 <__adddf3>
 8019f02:	f7e6 fdcd 	bl	8000aa0 <__aeabi_d2iz>
 8019f06:	4682      	mov	sl, r0
 8019f08:	f7e6 fab0 	bl	800046c <__aeabi_i2d>
 8019f0c:	a340      	add	r3, pc, #256	; (adr r3, 801a010 <__ieee754_exp+0x2c8>)
 8019f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f12:	4606      	mov	r6, r0
 8019f14:	460f      	mov	r7, r1
 8019f16:	f7e6 fb13 	bl	8000540 <__aeabi_dmul>
 8019f1a:	4602      	mov	r2, r0
 8019f1c:	460b      	mov	r3, r1
 8019f1e:	4620      	mov	r0, r4
 8019f20:	4629      	mov	r1, r5
 8019f22:	f7e6 f955 	bl	80001d0 <__aeabi_dsub>
 8019f26:	a33c      	add	r3, pc, #240	; (adr r3, 801a018 <__ieee754_exp+0x2d0>)
 8019f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f2c:	4680      	mov	r8, r0
 8019f2e:	4689      	mov	r9, r1
 8019f30:	4630      	mov	r0, r6
 8019f32:	4639      	mov	r1, r7
 8019f34:	f7e6 fb04 	bl	8000540 <__aeabi_dmul>
 8019f38:	ec41 0b18 	vmov	d8, r0, r1
 8019f3c:	e76f      	b.n	8019e1e <__ieee754_exp+0xd6>
 8019f3e:	4a42      	ldr	r2, [pc, #264]	; (801a048 <__ieee754_exp+0x300>)
 8019f40:	4293      	cmp	r3, r2
 8019f42:	d811      	bhi.n	8019f68 <__ieee754_exp+0x220>
 8019f44:	a336      	add	r3, pc, #216	; (adr r3, 801a020 <__ieee754_exp+0x2d8>)
 8019f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f4a:	ee10 0a10 	vmov	r0, s0
 8019f4e:	4629      	mov	r1, r5
 8019f50:	f7e6 f940 	bl	80001d4 <__adddf3>
 8019f54:	4b3a      	ldr	r3, [pc, #232]	; (801a040 <__ieee754_exp+0x2f8>)
 8019f56:	2200      	movs	r2, #0
 8019f58:	f7e6 fd82 	bl	8000a60 <__aeabi_dcmpgt>
 8019f5c:	b138      	cbz	r0, 8019f6e <__ieee754_exp+0x226>
 8019f5e:	4b38      	ldr	r3, [pc, #224]	; (801a040 <__ieee754_exp+0x2f8>)
 8019f60:	2200      	movs	r2, #0
 8019f62:	4620      	mov	r0, r4
 8019f64:	4629      	mov	r1, r5
 8019f66:	e70a      	b.n	8019d7e <__ieee754_exp+0x36>
 8019f68:	f04f 0a00 	mov.w	sl, #0
 8019f6c:	e75f      	b.n	8019e2e <__ieee754_exp+0xe6>
 8019f6e:	4682      	mov	sl, r0
 8019f70:	e75d      	b.n	8019e2e <__ieee754_exp+0xe6>
 8019f72:	4632      	mov	r2, r6
 8019f74:	463b      	mov	r3, r7
 8019f76:	2000      	movs	r0, #0
 8019f78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8019f7c:	f7e6 f928 	bl	80001d0 <__aeabi_dsub>
 8019f80:	4602      	mov	r2, r0
 8019f82:	460b      	mov	r3, r1
 8019f84:	ec51 0b19 	vmov	r0, r1, d9
 8019f88:	f7e6 fc04 	bl	8000794 <__aeabi_ddiv>
 8019f8c:	4602      	mov	r2, r0
 8019f8e:	460b      	mov	r3, r1
 8019f90:	ec51 0b18 	vmov	r0, r1, d8
 8019f94:	f7e6 f91c 	bl	80001d0 <__aeabi_dsub>
 8019f98:	4642      	mov	r2, r8
 8019f9a:	464b      	mov	r3, r9
 8019f9c:	f7e6 f918 	bl	80001d0 <__aeabi_dsub>
 8019fa0:	4602      	mov	r2, r0
 8019fa2:	460b      	mov	r3, r1
 8019fa4:	2000      	movs	r0, #0
 8019fa6:	4926      	ldr	r1, [pc, #152]	; (801a040 <__ieee754_exp+0x2f8>)
 8019fa8:	f7e6 f912 	bl	80001d0 <__aeabi_dsub>
 8019fac:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8019fb0:	4592      	cmp	sl, r2
 8019fb2:	db02      	blt.n	8019fba <__ieee754_exp+0x272>
 8019fb4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8019fb8:	e6e3      	b.n	8019d82 <__ieee754_exp+0x3a>
 8019fba:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8019fbe:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8019fc2:	2200      	movs	r2, #0
 8019fc4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8019fc8:	f7e6 faba 	bl	8000540 <__aeabi_dmul>
 8019fcc:	e6d9      	b.n	8019d82 <__ieee754_exp+0x3a>
 8019fce:	bf00      	nop
 8019fd0:	fefa39ef 	.word	0xfefa39ef
 8019fd4:	40862e42 	.word	0x40862e42
 8019fd8:	d52d3051 	.word	0xd52d3051
 8019fdc:	c0874910 	.word	0xc0874910
 8019fe0:	72bea4d0 	.word	0x72bea4d0
 8019fe4:	3e663769 	.word	0x3e663769
 8019fe8:	c5d26bf1 	.word	0xc5d26bf1
 8019fec:	3ebbbd41 	.word	0x3ebbbd41
 8019ff0:	af25de2c 	.word	0xaf25de2c
 8019ff4:	3f11566a 	.word	0x3f11566a
 8019ff8:	16bebd93 	.word	0x16bebd93
 8019ffc:	3f66c16c 	.word	0x3f66c16c
 801a000:	5555553e 	.word	0x5555553e
 801a004:	3fc55555 	.word	0x3fc55555
 801a008:	652b82fe 	.word	0x652b82fe
 801a00c:	3ff71547 	.word	0x3ff71547
 801a010:	fee00000 	.word	0xfee00000
 801a014:	3fe62e42 	.word	0x3fe62e42
 801a018:	35793c76 	.word	0x35793c76
 801a01c:	3dea39ef 	.word	0x3dea39ef
 801a020:	8800759c 	.word	0x8800759c
 801a024:	7e37e43c 	.word	0x7e37e43c
 801a028:	40862e41 	.word	0x40862e41
 801a02c:	7fefffff 	.word	0x7fefffff
 801a030:	3fd62e42 	.word	0x3fd62e42
 801a034:	3ff0a2b1 	.word	0x3ff0a2b1
 801a038:	0801b5f8 	.word	0x0801b5f8
 801a03c:	0801b608 	.word	0x0801b608
 801a040:	3ff00000 	.word	0x3ff00000
 801a044:	0801b5e8 	.word	0x0801b5e8
 801a048:	3defffff 	.word	0x3defffff

0801a04c <__ieee754_sqrt>:
 801a04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a050:	ec55 4b10 	vmov	r4, r5, d0
 801a054:	4e55      	ldr	r6, [pc, #340]	; (801a1ac <__ieee754_sqrt+0x160>)
 801a056:	43ae      	bics	r6, r5
 801a058:	ee10 0a10 	vmov	r0, s0
 801a05c:	ee10 3a10 	vmov	r3, s0
 801a060:	462a      	mov	r2, r5
 801a062:	4629      	mov	r1, r5
 801a064:	d110      	bne.n	801a088 <__ieee754_sqrt+0x3c>
 801a066:	ee10 2a10 	vmov	r2, s0
 801a06a:	462b      	mov	r3, r5
 801a06c:	f7e6 fa68 	bl	8000540 <__aeabi_dmul>
 801a070:	4602      	mov	r2, r0
 801a072:	460b      	mov	r3, r1
 801a074:	4620      	mov	r0, r4
 801a076:	4629      	mov	r1, r5
 801a078:	f7e6 f8ac 	bl	80001d4 <__adddf3>
 801a07c:	4604      	mov	r4, r0
 801a07e:	460d      	mov	r5, r1
 801a080:	ec45 4b10 	vmov	d0, r4, r5
 801a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a088:	2d00      	cmp	r5, #0
 801a08a:	dc10      	bgt.n	801a0ae <__ieee754_sqrt+0x62>
 801a08c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a090:	4330      	orrs	r0, r6
 801a092:	d0f5      	beq.n	801a080 <__ieee754_sqrt+0x34>
 801a094:	b15d      	cbz	r5, 801a0ae <__ieee754_sqrt+0x62>
 801a096:	ee10 2a10 	vmov	r2, s0
 801a09a:	462b      	mov	r3, r5
 801a09c:	ee10 0a10 	vmov	r0, s0
 801a0a0:	f7e6 f896 	bl	80001d0 <__aeabi_dsub>
 801a0a4:	4602      	mov	r2, r0
 801a0a6:	460b      	mov	r3, r1
 801a0a8:	f7e6 fb74 	bl	8000794 <__aeabi_ddiv>
 801a0ac:	e7e6      	b.n	801a07c <__ieee754_sqrt+0x30>
 801a0ae:	1512      	asrs	r2, r2, #20
 801a0b0:	d074      	beq.n	801a19c <__ieee754_sqrt+0x150>
 801a0b2:	07d4      	lsls	r4, r2, #31
 801a0b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a0b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801a0bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801a0c0:	bf5e      	ittt	pl
 801a0c2:	0fda      	lsrpl	r2, r3, #31
 801a0c4:	005b      	lslpl	r3, r3, #1
 801a0c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801a0ca:	2400      	movs	r4, #0
 801a0cc:	0fda      	lsrs	r2, r3, #31
 801a0ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801a0d2:	107f      	asrs	r7, r7, #1
 801a0d4:	005b      	lsls	r3, r3, #1
 801a0d6:	2516      	movs	r5, #22
 801a0d8:	4620      	mov	r0, r4
 801a0da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801a0de:	1886      	adds	r6, r0, r2
 801a0e0:	428e      	cmp	r6, r1
 801a0e2:	bfde      	ittt	le
 801a0e4:	1b89      	suble	r1, r1, r6
 801a0e6:	18b0      	addle	r0, r6, r2
 801a0e8:	18a4      	addle	r4, r4, r2
 801a0ea:	0049      	lsls	r1, r1, #1
 801a0ec:	3d01      	subs	r5, #1
 801a0ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801a0f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801a0f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a0fa:	d1f0      	bne.n	801a0de <__ieee754_sqrt+0x92>
 801a0fc:	462a      	mov	r2, r5
 801a0fe:	f04f 0e20 	mov.w	lr, #32
 801a102:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a106:	4281      	cmp	r1, r0
 801a108:	eb06 0c05 	add.w	ip, r6, r5
 801a10c:	dc02      	bgt.n	801a114 <__ieee754_sqrt+0xc8>
 801a10e:	d113      	bne.n	801a138 <__ieee754_sqrt+0xec>
 801a110:	459c      	cmp	ip, r3
 801a112:	d811      	bhi.n	801a138 <__ieee754_sqrt+0xec>
 801a114:	f1bc 0f00 	cmp.w	ip, #0
 801a118:	eb0c 0506 	add.w	r5, ip, r6
 801a11c:	da43      	bge.n	801a1a6 <__ieee754_sqrt+0x15a>
 801a11e:	2d00      	cmp	r5, #0
 801a120:	db41      	blt.n	801a1a6 <__ieee754_sqrt+0x15a>
 801a122:	f100 0801 	add.w	r8, r0, #1
 801a126:	1a09      	subs	r1, r1, r0
 801a128:	459c      	cmp	ip, r3
 801a12a:	bf88      	it	hi
 801a12c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801a130:	eba3 030c 	sub.w	r3, r3, ip
 801a134:	4432      	add	r2, r6
 801a136:	4640      	mov	r0, r8
 801a138:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801a13c:	f1be 0e01 	subs.w	lr, lr, #1
 801a140:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801a144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a148:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a14c:	d1db      	bne.n	801a106 <__ieee754_sqrt+0xba>
 801a14e:	430b      	orrs	r3, r1
 801a150:	d006      	beq.n	801a160 <__ieee754_sqrt+0x114>
 801a152:	1c50      	adds	r0, r2, #1
 801a154:	bf13      	iteet	ne
 801a156:	3201      	addne	r2, #1
 801a158:	3401      	addeq	r4, #1
 801a15a:	4672      	moveq	r2, lr
 801a15c:	f022 0201 	bicne.w	r2, r2, #1
 801a160:	1063      	asrs	r3, r4, #1
 801a162:	0852      	lsrs	r2, r2, #1
 801a164:	07e1      	lsls	r1, r4, #31
 801a166:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a16a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a16e:	bf48      	it	mi
 801a170:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801a174:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801a178:	4614      	mov	r4, r2
 801a17a:	e781      	b.n	801a080 <__ieee754_sqrt+0x34>
 801a17c:	0ad9      	lsrs	r1, r3, #11
 801a17e:	3815      	subs	r0, #21
 801a180:	055b      	lsls	r3, r3, #21
 801a182:	2900      	cmp	r1, #0
 801a184:	d0fa      	beq.n	801a17c <__ieee754_sqrt+0x130>
 801a186:	02cd      	lsls	r5, r1, #11
 801a188:	d50a      	bpl.n	801a1a0 <__ieee754_sqrt+0x154>
 801a18a:	f1c2 0420 	rsb	r4, r2, #32
 801a18e:	fa23 f404 	lsr.w	r4, r3, r4
 801a192:	1e55      	subs	r5, r2, #1
 801a194:	4093      	lsls	r3, r2
 801a196:	4321      	orrs	r1, r4
 801a198:	1b42      	subs	r2, r0, r5
 801a19a:	e78a      	b.n	801a0b2 <__ieee754_sqrt+0x66>
 801a19c:	4610      	mov	r0, r2
 801a19e:	e7f0      	b.n	801a182 <__ieee754_sqrt+0x136>
 801a1a0:	0049      	lsls	r1, r1, #1
 801a1a2:	3201      	adds	r2, #1
 801a1a4:	e7ef      	b.n	801a186 <__ieee754_sqrt+0x13a>
 801a1a6:	4680      	mov	r8, r0
 801a1a8:	e7bd      	b.n	801a126 <__ieee754_sqrt+0xda>
 801a1aa:	bf00      	nop
 801a1ac:	7ff00000 	.word	0x7ff00000

0801a1b0 <__ieee754_acosf>:
 801a1b0:	b508      	push	{r3, lr}
 801a1b2:	ee10 3a10 	vmov	r3, s0
 801a1b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a1ba:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801a1be:	ed2d 8b0c 	vpush	{d8-d13}
 801a1c2:	d10a      	bne.n	801a1da <__ieee754_acosf+0x2a>
 801a1c4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 801a35c <__ieee754_acosf+0x1ac>
 801a1c8:	ed9f 8a65 	vldr	s16, [pc, #404]	; 801a360 <__ieee754_acosf+0x1b0>
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	bfd8      	it	le
 801a1d0:	eeb0 0a48 	vmovle.f32	s0, s16
 801a1d4:	ecbd 8b0c 	vpop	{d8-d13}
 801a1d8:	bd08      	pop	{r3, pc}
 801a1da:	dd04      	ble.n	801a1e6 <__ieee754_acosf+0x36>
 801a1dc:	ee30 8a40 	vsub.f32	s16, s0, s0
 801a1e0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801a1e4:	e7f6      	b.n	801a1d4 <__ieee754_acosf+0x24>
 801a1e6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801a1ea:	da3c      	bge.n	801a266 <__ieee754_acosf+0xb6>
 801a1ec:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801a1f0:	f340 80b1 	ble.w	801a356 <__ieee754_acosf+0x1a6>
 801a1f4:	ee60 7a00 	vmul.f32	s15, s0, s0
 801a1f8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801a364 <__ieee754_acosf+0x1b4>
 801a1fc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801a368 <__ieee754_acosf+0x1b8>
 801a200:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 801a36c <__ieee754_acosf+0x1bc>
 801a204:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 801a370 <__ieee754_acosf+0x1c0>
 801a208:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801a20c:	eddf 6a59 	vldr	s13, [pc, #356]	; 801a374 <__ieee754_acosf+0x1c4>
 801a210:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a214:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801a378 <__ieee754_acosf+0x1c8>
 801a218:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a21c:	eddf 6a57 	vldr	s13, [pc, #348]	; 801a37c <__ieee754_acosf+0x1cc>
 801a220:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a224:	ed9f 7a56 	vldr	s14, [pc, #344]	; 801a380 <__ieee754_acosf+0x1d0>
 801a228:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a22c:	eddf 6a55 	vldr	s13, [pc, #340]	; 801a384 <__ieee754_acosf+0x1d4>
 801a230:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801a234:	eddf 6a54 	vldr	s13, [pc, #336]	; 801a388 <__ieee754_acosf+0x1d8>
 801a238:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a23c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 801a38c <__ieee754_acosf+0x1dc>
 801a240:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801a244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a248:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a24c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801a254:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a258:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801a390 <__ieee754_acosf+0x1e0>
 801a25c:	ee30 0a48 	vsub.f32	s0, s0, s16
 801a260:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a264:	e7b6      	b.n	801a1d4 <__ieee754_acosf+0x24>
 801a266:	2b00      	cmp	r3, #0
 801a268:	eddf da3e 	vldr	s27, [pc, #248]	; 801a364 <__ieee754_acosf+0x1b4>
 801a26c:	eddf ca3e 	vldr	s25, [pc, #248]	; 801a368 <__ieee754_acosf+0x1b8>
 801a270:	ed9f ca40 	vldr	s24, [pc, #256]	; 801a374 <__ieee754_acosf+0x1c4>
 801a274:	eddf ba40 	vldr	s23, [pc, #256]	; 801a378 <__ieee754_acosf+0x1c8>
 801a278:	ed9f ba40 	vldr	s22, [pc, #256]	; 801a37c <__ieee754_acosf+0x1cc>
 801a27c:	eddf 8a40 	vldr	s17, [pc, #256]	; 801a380 <__ieee754_acosf+0x1d0>
 801a280:	ed9f da40 	vldr	s26, [pc, #256]	; 801a384 <__ieee754_acosf+0x1d4>
 801a284:	eddf aa39 	vldr	s21, [pc, #228]	; 801a36c <__ieee754_acosf+0x1bc>
 801a288:	ed9f aa3f 	vldr	s20, [pc, #252]	; 801a388 <__ieee754_acosf+0x1d8>
 801a28c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801a38c <__ieee754_acosf+0x1dc>
 801a290:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801a294:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a298:	da28      	bge.n	801a2ec <__ieee754_acosf+0x13c>
 801a29a:	ee30 0a09 	vadd.f32	s0, s0, s18
 801a29e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a2a2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801a2a6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801a2aa:	eeac ca80 	vfma.f32	s24, s25, s0
 801a2ae:	eeaa aa80 	vfma.f32	s20, s21, s0
 801a2b2:	eeec ba00 	vfma.f32	s23, s24, s0
 801a2b6:	eeea 9a00 	vfma.f32	s19, s20, s0
 801a2ba:	eeab ba80 	vfma.f32	s22, s23, s0
 801a2be:	eea9 9a80 	vfma.f32	s18, s19, s0
 801a2c2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801a2c6:	ee68 8a80 	vmul.f32	s17, s17, s0
 801a2ca:	f000 f9a5 	bl	801a618 <__ieee754_sqrtf>
 801a2ce:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801a2d2:	eddf 7a30 	vldr	s15, [pc, #192]	; 801a394 <__ieee754_acosf+0x1e4>
 801a2d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a2da:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801a2de:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a2e2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801a398 <__ieee754_acosf+0x1e8>
 801a2e6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a2ea:	e773      	b.n	801a1d4 <__ieee754_acosf+0x24>
 801a2ec:	ee39 8a40 	vsub.f32	s16, s18, s0
 801a2f0:	ee28 8a27 	vmul.f32	s16, s16, s15
 801a2f4:	eeb0 0a48 	vmov.f32	s0, s16
 801a2f8:	f000 f98e 	bl	801a618 <__ieee754_sqrtf>
 801a2fc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801a300:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801a304:	eeac ca88 	vfma.f32	s24, s25, s16
 801a308:	eeaa aa88 	vfma.f32	s20, s21, s16
 801a30c:	eeec ba08 	vfma.f32	s23, s24, s16
 801a310:	ee10 3a10 	vmov	r3, s0
 801a314:	eeab ba88 	vfma.f32	s22, s23, s16
 801a318:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801a31c:	f023 030f 	bic.w	r3, r3, #15
 801a320:	eeea 9a08 	vfma.f32	s19, s20, s16
 801a324:	ee07 3a90 	vmov	s15, r3
 801a328:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801a32c:	eeb0 6a48 	vmov.f32	s12, s16
 801a330:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801a334:	eea9 9a88 	vfma.f32	s18, s19, s16
 801a338:	ee70 6a27 	vadd.f32	s13, s0, s15
 801a33c:	ee68 8a88 	vmul.f32	s17, s17, s16
 801a340:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801a344:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801a348:	eea0 7a26 	vfma.f32	s14, s0, s13
 801a34c:	ee37 0a87 	vadd.f32	s0, s15, s14
 801a350:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a354:	e73e      	b.n	801a1d4 <__ieee754_acosf+0x24>
 801a356:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801a39c <__ieee754_acosf+0x1ec>
 801a35a:	e73b      	b.n	801a1d4 <__ieee754_acosf+0x24>
 801a35c:	00000000 	.word	0x00000000
 801a360:	40490fdb 	.word	0x40490fdb
 801a364:	3811ef08 	.word	0x3811ef08
 801a368:	3a4f7f04 	.word	0x3a4f7f04
 801a36c:	bf303361 	.word	0xbf303361
 801a370:	33a22168 	.word	0x33a22168
 801a374:	bd241146 	.word	0xbd241146
 801a378:	3e4e0aa8 	.word	0x3e4e0aa8
 801a37c:	bea6b090 	.word	0xbea6b090
 801a380:	3e2aaaab 	.word	0x3e2aaaab
 801a384:	3d9dc62e 	.word	0x3d9dc62e
 801a388:	4001572d 	.word	0x4001572d
 801a38c:	c019d139 	.word	0xc019d139
 801a390:	3fc90fda 	.word	0x3fc90fda
 801a394:	b3a22168 	.word	0xb3a22168
 801a398:	40490fda 	.word	0x40490fda
 801a39c:	3fc90fdb 	.word	0x3fc90fdb

0801a3a0 <__ieee754_rem_pio2f>:
 801a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3a2:	ee10 6a10 	vmov	r6, s0
 801a3a6:	4b8e      	ldr	r3, [pc, #568]	; (801a5e0 <__ieee754_rem_pio2f+0x240>)
 801a3a8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801a3ac:	429d      	cmp	r5, r3
 801a3ae:	b087      	sub	sp, #28
 801a3b0:	eef0 7a40 	vmov.f32	s15, s0
 801a3b4:	4604      	mov	r4, r0
 801a3b6:	dc05      	bgt.n	801a3c4 <__ieee754_rem_pio2f+0x24>
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	ed80 0a00 	vstr	s0, [r0]
 801a3be:	6043      	str	r3, [r0, #4]
 801a3c0:	2000      	movs	r0, #0
 801a3c2:	e01a      	b.n	801a3fa <__ieee754_rem_pio2f+0x5a>
 801a3c4:	4b87      	ldr	r3, [pc, #540]	; (801a5e4 <__ieee754_rem_pio2f+0x244>)
 801a3c6:	429d      	cmp	r5, r3
 801a3c8:	dc46      	bgt.n	801a458 <__ieee754_rem_pio2f+0xb8>
 801a3ca:	2e00      	cmp	r6, #0
 801a3cc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801a5e8 <__ieee754_rem_pio2f+0x248>
 801a3d0:	4b86      	ldr	r3, [pc, #536]	; (801a5ec <__ieee754_rem_pio2f+0x24c>)
 801a3d2:	f025 050f 	bic.w	r5, r5, #15
 801a3d6:	dd1f      	ble.n	801a418 <__ieee754_rem_pio2f+0x78>
 801a3d8:	429d      	cmp	r5, r3
 801a3da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a3de:	d00e      	beq.n	801a3fe <__ieee754_rem_pio2f+0x5e>
 801a3e0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801a5f0 <__ieee754_rem_pio2f+0x250>
 801a3e4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801a3e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a3ec:	ed80 0a00 	vstr	s0, [r0]
 801a3f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3f4:	2001      	movs	r0, #1
 801a3f6:	edc4 7a01 	vstr	s15, [r4, #4]
 801a3fa:	b007      	add	sp, #28
 801a3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3fe:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801a5f4 <__ieee754_rem_pio2f+0x254>
 801a402:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801a5f8 <__ieee754_rem_pio2f+0x258>
 801a406:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a40a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801a40e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a412:	edc0 6a00 	vstr	s13, [r0]
 801a416:	e7eb      	b.n	801a3f0 <__ieee754_rem_pio2f+0x50>
 801a418:	429d      	cmp	r5, r3
 801a41a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a41e:	d00e      	beq.n	801a43e <__ieee754_rem_pio2f+0x9e>
 801a420:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801a5f0 <__ieee754_rem_pio2f+0x250>
 801a424:	ee37 0a87 	vadd.f32	s0, s15, s14
 801a428:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a42c:	ed80 0a00 	vstr	s0, [r0]
 801a430:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a434:	f04f 30ff 	mov.w	r0, #4294967295
 801a438:	edc4 7a01 	vstr	s15, [r4, #4]
 801a43c:	e7dd      	b.n	801a3fa <__ieee754_rem_pio2f+0x5a>
 801a43e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801a5f4 <__ieee754_rem_pio2f+0x254>
 801a442:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801a5f8 <__ieee754_rem_pio2f+0x258>
 801a446:	ee77 7a80 	vadd.f32	s15, s15, s0
 801a44a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801a44e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a452:	edc0 6a00 	vstr	s13, [r0]
 801a456:	e7eb      	b.n	801a430 <__ieee754_rem_pio2f+0x90>
 801a458:	4b68      	ldr	r3, [pc, #416]	; (801a5fc <__ieee754_rem_pio2f+0x25c>)
 801a45a:	429d      	cmp	r5, r3
 801a45c:	dc72      	bgt.n	801a544 <__ieee754_rem_pio2f+0x1a4>
 801a45e:	f000 fecb 	bl	801b1f8 <fabsf>
 801a462:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801a600 <__ieee754_rem_pio2f+0x260>
 801a466:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a46a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a46e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a476:	ee17 0a90 	vmov	r0, s15
 801a47a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a5e8 <__ieee754_rem_pio2f+0x248>
 801a47e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a482:	281f      	cmp	r0, #31
 801a484:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801a5f0 <__ieee754_rem_pio2f+0x250>
 801a488:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a48c:	eeb1 6a47 	vneg.f32	s12, s14
 801a490:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a494:	ee16 2a90 	vmov	r2, s13
 801a498:	dc1c      	bgt.n	801a4d4 <__ieee754_rem_pio2f+0x134>
 801a49a:	495a      	ldr	r1, [pc, #360]	; (801a604 <__ieee754_rem_pio2f+0x264>)
 801a49c:	1e47      	subs	r7, r0, #1
 801a49e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801a4a2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801a4a6:	428b      	cmp	r3, r1
 801a4a8:	d014      	beq.n	801a4d4 <__ieee754_rem_pio2f+0x134>
 801a4aa:	6022      	str	r2, [r4, #0]
 801a4ac:	ed94 7a00 	vldr	s14, [r4]
 801a4b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a4b4:	2e00      	cmp	r6, #0
 801a4b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a4ba:	ed84 0a01 	vstr	s0, [r4, #4]
 801a4be:	da9c      	bge.n	801a3fa <__ieee754_rem_pio2f+0x5a>
 801a4c0:	eeb1 7a47 	vneg.f32	s14, s14
 801a4c4:	eeb1 0a40 	vneg.f32	s0, s0
 801a4c8:	ed84 7a00 	vstr	s14, [r4]
 801a4cc:	ed84 0a01 	vstr	s0, [r4, #4]
 801a4d0:	4240      	negs	r0, r0
 801a4d2:	e792      	b.n	801a3fa <__ieee754_rem_pio2f+0x5a>
 801a4d4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a4d8:	15eb      	asrs	r3, r5, #23
 801a4da:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801a4de:	2d08      	cmp	r5, #8
 801a4e0:	dde3      	ble.n	801a4aa <__ieee754_rem_pio2f+0x10a>
 801a4e2:	eddf 7a44 	vldr	s15, [pc, #272]	; 801a5f4 <__ieee754_rem_pio2f+0x254>
 801a4e6:	eddf 5a44 	vldr	s11, [pc, #272]	; 801a5f8 <__ieee754_rem_pio2f+0x258>
 801a4ea:	eef0 6a40 	vmov.f32	s13, s0
 801a4ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a4f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 801a4f6:	eea6 0a27 	vfma.f32	s0, s12, s15
 801a4fa:	eef0 7a40 	vmov.f32	s15, s0
 801a4fe:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a502:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a506:	ee15 2a90 	vmov	r2, s11
 801a50a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a50e:	1a5b      	subs	r3, r3, r1
 801a510:	2b19      	cmp	r3, #25
 801a512:	dc04      	bgt.n	801a51e <__ieee754_rem_pio2f+0x17e>
 801a514:	edc4 5a00 	vstr	s11, [r4]
 801a518:	eeb0 0a66 	vmov.f32	s0, s13
 801a51c:	e7c6      	b.n	801a4ac <__ieee754_rem_pio2f+0x10c>
 801a51e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a608 <__ieee754_rem_pio2f+0x268>
 801a522:	eeb0 0a66 	vmov.f32	s0, s13
 801a526:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a52a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a52e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801a60c <__ieee754_rem_pio2f+0x26c>
 801a532:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a536:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a53a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a53e:	ed84 7a00 	vstr	s14, [r4]
 801a542:	e7b3      	b.n	801a4ac <__ieee754_rem_pio2f+0x10c>
 801a544:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a548:	db06      	blt.n	801a558 <__ieee754_rem_pio2f+0x1b8>
 801a54a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a54e:	edc0 7a01 	vstr	s15, [r0, #4]
 801a552:	edc0 7a00 	vstr	s15, [r0]
 801a556:	e733      	b.n	801a3c0 <__ieee754_rem_pio2f+0x20>
 801a558:	15ea      	asrs	r2, r5, #23
 801a55a:	3a86      	subs	r2, #134	; 0x86
 801a55c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a560:	ee07 3a90 	vmov	s15, r3
 801a564:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a568:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a610 <__ieee754_rem_pio2f+0x270>
 801a56c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a570:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a574:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a578:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a57c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a580:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a588:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a58c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a590:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a598:	edcd 7a05 	vstr	s15, [sp, #20]
 801a59c:	d11e      	bne.n	801a5dc <__ieee754_rem_pio2f+0x23c>
 801a59e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5a6:	bf14      	ite	ne
 801a5a8:	2302      	movne	r3, #2
 801a5aa:	2301      	moveq	r3, #1
 801a5ac:	4919      	ldr	r1, [pc, #100]	; (801a614 <__ieee754_rem_pio2f+0x274>)
 801a5ae:	9101      	str	r1, [sp, #4]
 801a5b0:	2102      	movs	r1, #2
 801a5b2:	9100      	str	r1, [sp, #0]
 801a5b4:	a803      	add	r0, sp, #12
 801a5b6:	4621      	mov	r1, r4
 801a5b8:	f000 f892 	bl	801a6e0 <__kernel_rem_pio2f>
 801a5bc:	2e00      	cmp	r6, #0
 801a5be:	f6bf af1c 	bge.w	801a3fa <__ieee754_rem_pio2f+0x5a>
 801a5c2:	edd4 7a00 	vldr	s15, [r4]
 801a5c6:	eef1 7a67 	vneg.f32	s15, s15
 801a5ca:	edc4 7a00 	vstr	s15, [r4]
 801a5ce:	edd4 7a01 	vldr	s15, [r4, #4]
 801a5d2:	eef1 7a67 	vneg.f32	s15, s15
 801a5d6:	edc4 7a01 	vstr	s15, [r4, #4]
 801a5da:	e779      	b.n	801a4d0 <__ieee754_rem_pio2f+0x130>
 801a5dc:	2303      	movs	r3, #3
 801a5de:	e7e5      	b.n	801a5ac <__ieee754_rem_pio2f+0x20c>
 801a5e0:	3f490fd8 	.word	0x3f490fd8
 801a5e4:	4016cbe3 	.word	0x4016cbe3
 801a5e8:	3fc90f80 	.word	0x3fc90f80
 801a5ec:	3fc90fd0 	.word	0x3fc90fd0
 801a5f0:	37354443 	.word	0x37354443
 801a5f4:	37354400 	.word	0x37354400
 801a5f8:	2e85a308 	.word	0x2e85a308
 801a5fc:	43490f80 	.word	0x43490f80
 801a600:	3f22f984 	.word	0x3f22f984
 801a604:	0801b618 	.word	0x0801b618
 801a608:	2e85a300 	.word	0x2e85a300
 801a60c:	248d3132 	.word	0x248d3132
 801a610:	43800000 	.word	0x43800000
 801a614:	0801b698 	.word	0x0801b698

0801a618 <__ieee754_sqrtf>:
 801a618:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a61c:	4770      	bx	lr
	...

0801a620 <__kernel_cosf>:
 801a620:	ee10 3a10 	vmov	r3, s0
 801a624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a628:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a62c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a630:	da05      	bge.n	801a63e <__kernel_cosf+0x1e>
 801a632:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a636:	ee17 2a90 	vmov	r2, s15
 801a63a:	2a00      	cmp	r2, #0
 801a63c:	d03d      	beq.n	801a6ba <__kernel_cosf+0x9a>
 801a63e:	ee60 5a00 	vmul.f32	s11, s0, s0
 801a642:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a6c0 <__kernel_cosf+0xa0>
 801a646:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801a6c4 <__kernel_cosf+0xa4>
 801a64a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801a6c8 <__kernel_cosf+0xa8>
 801a64e:	4a1f      	ldr	r2, [pc, #124]	; (801a6cc <__kernel_cosf+0xac>)
 801a650:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801a654:	4293      	cmp	r3, r2
 801a656:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a6d0 <__kernel_cosf+0xb0>
 801a65a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a65e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801a6d4 <__kernel_cosf+0xb4>
 801a662:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801a666:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801a6d8 <__kernel_cosf+0xb8>
 801a66a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a66e:	eeb0 7a66 	vmov.f32	s14, s13
 801a672:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801a676:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a67a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801a67e:	ee67 6a25 	vmul.f32	s13, s14, s11
 801a682:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801a686:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a68a:	dc04      	bgt.n	801a696 <__kernel_cosf+0x76>
 801a68c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801a690:	ee36 0a47 	vsub.f32	s0, s12, s14
 801a694:	4770      	bx	lr
 801a696:	4a11      	ldr	r2, [pc, #68]	; (801a6dc <__kernel_cosf+0xbc>)
 801a698:	4293      	cmp	r3, r2
 801a69a:	bfda      	itte	le
 801a69c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801a6a0:	ee06 3a90 	vmovle	s13, r3
 801a6a4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801a6a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a6ac:	ee36 0a66 	vsub.f32	s0, s12, s13
 801a6b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a6b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a6b8:	4770      	bx	lr
 801a6ba:	eeb0 0a46 	vmov.f32	s0, s12
 801a6be:	4770      	bx	lr
 801a6c0:	ad47d74e 	.word	0xad47d74e
 801a6c4:	310f74f6 	.word	0x310f74f6
 801a6c8:	3d2aaaab 	.word	0x3d2aaaab
 801a6cc:	3e999999 	.word	0x3e999999
 801a6d0:	b493f27c 	.word	0xb493f27c
 801a6d4:	37d00d01 	.word	0x37d00d01
 801a6d8:	bab60b61 	.word	0xbab60b61
 801a6dc:	3f480000 	.word	0x3f480000

0801a6e0 <__kernel_rem_pio2f>:
 801a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6e4:	ed2d 8b04 	vpush	{d8-d9}
 801a6e8:	b0d9      	sub	sp, #356	; 0x164
 801a6ea:	4688      	mov	r8, r1
 801a6ec:	9002      	str	r0, [sp, #8]
 801a6ee:	49bb      	ldr	r1, [pc, #748]	; (801a9dc <__kernel_rem_pio2f+0x2fc>)
 801a6f0:	9866      	ldr	r0, [sp, #408]	; 0x198
 801a6f2:	9301      	str	r3, [sp, #4]
 801a6f4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801a6f8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801a6fc:	1e59      	subs	r1, r3, #1
 801a6fe:	1d13      	adds	r3, r2, #4
 801a700:	db27      	blt.n	801a752 <__kernel_rem_pio2f+0x72>
 801a702:	f1b2 0b03 	subs.w	fp, r2, #3
 801a706:	bf48      	it	mi
 801a708:	f102 0b04 	addmi.w	fp, r2, #4
 801a70c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801a710:	1c45      	adds	r5, r0, #1
 801a712:	00ec      	lsls	r4, r5, #3
 801a714:	1a47      	subs	r7, r0, r1
 801a716:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801a9ec <__kernel_rem_pio2f+0x30c>
 801a71a:	9403      	str	r4, [sp, #12]
 801a71c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801a720:	eb0a 0c01 	add.w	ip, sl, r1
 801a724:	ae1c      	add	r6, sp, #112	; 0x70
 801a726:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801a72a:	2400      	movs	r4, #0
 801a72c:	4564      	cmp	r4, ip
 801a72e:	dd12      	ble.n	801a756 <__kernel_rem_pio2f+0x76>
 801a730:	9b01      	ldr	r3, [sp, #4]
 801a732:	ac1c      	add	r4, sp, #112	; 0x70
 801a734:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801a738:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801a73c:	f04f 0c00 	mov.w	ip, #0
 801a740:	45d4      	cmp	ip, sl
 801a742:	dc27      	bgt.n	801a794 <__kernel_rem_pio2f+0xb4>
 801a744:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801a748:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801a9ec <__kernel_rem_pio2f+0x30c>
 801a74c:	4627      	mov	r7, r4
 801a74e:	2600      	movs	r6, #0
 801a750:	e016      	b.n	801a780 <__kernel_rem_pio2f+0xa0>
 801a752:	2000      	movs	r0, #0
 801a754:	e7dc      	b.n	801a710 <__kernel_rem_pio2f+0x30>
 801a756:	42e7      	cmn	r7, r4
 801a758:	bf5d      	ittte	pl
 801a75a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801a75e:	ee07 3a90 	vmovpl	s15, r3
 801a762:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a766:	eef0 7a47 	vmovmi.f32	s15, s14
 801a76a:	ece6 7a01 	vstmia	r6!, {s15}
 801a76e:	3401      	adds	r4, #1
 801a770:	e7dc      	b.n	801a72c <__kernel_rem_pio2f+0x4c>
 801a772:	ecf9 6a01 	vldmia	r9!, {s13}
 801a776:	ed97 7a00 	vldr	s14, [r7]
 801a77a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a77e:	3601      	adds	r6, #1
 801a780:	428e      	cmp	r6, r1
 801a782:	f1a7 0704 	sub.w	r7, r7, #4
 801a786:	ddf4      	ble.n	801a772 <__kernel_rem_pio2f+0x92>
 801a788:	eceb 7a01 	vstmia	fp!, {s15}
 801a78c:	f10c 0c01 	add.w	ip, ip, #1
 801a790:	3404      	adds	r4, #4
 801a792:	e7d5      	b.n	801a740 <__kernel_rem_pio2f+0x60>
 801a794:	ab08      	add	r3, sp, #32
 801a796:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801a79a:	eddf 8a93 	vldr	s17, [pc, #588]	; 801a9e8 <__kernel_rem_pio2f+0x308>
 801a79e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801a9e4 <__kernel_rem_pio2f+0x304>
 801a7a2:	9304      	str	r3, [sp, #16]
 801a7a4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801a7a8:	4656      	mov	r6, sl
 801a7aa:	00b3      	lsls	r3, r6, #2
 801a7ac:	9305      	str	r3, [sp, #20]
 801a7ae:	ab58      	add	r3, sp, #352	; 0x160
 801a7b0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801a7b4:	ac08      	add	r4, sp, #32
 801a7b6:	ab44      	add	r3, sp, #272	; 0x110
 801a7b8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801a7bc:	46a4      	mov	ip, r4
 801a7be:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801a7c2:	4637      	mov	r7, r6
 801a7c4:	2f00      	cmp	r7, #0
 801a7c6:	f1a0 0004 	sub.w	r0, r0, #4
 801a7ca:	dc4f      	bgt.n	801a86c <__kernel_rem_pio2f+0x18c>
 801a7cc:	4628      	mov	r0, r5
 801a7ce:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801a7d2:	f000 fd61 	bl	801b298 <scalbnf>
 801a7d6:	eeb0 8a40 	vmov.f32	s16, s0
 801a7da:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801a7de:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a7e2:	f000 fd11 	bl	801b208 <floorf>
 801a7e6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801a7ea:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a7ee:	2d00      	cmp	r5, #0
 801a7f0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801a7f4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a7f8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a7fc:	ee17 9a90 	vmov	r9, s15
 801a800:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a804:	dd44      	ble.n	801a890 <__kernel_rem_pio2f+0x1b0>
 801a806:	f106 3cff 	add.w	ip, r6, #4294967295
 801a80a:	ab08      	add	r3, sp, #32
 801a80c:	f1c5 0e08 	rsb	lr, r5, #8
 801a810:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801a814:	fa47 f00e 	asr.w	r0, r7, lr
 801a818:	4481      	add	r9, r0
 801a81a:	fa00 f00e 	lsl.w	r0, r0, lr
 801a81e:	1a3f      	subs	r7, r7, r0
 801a820:	f1c5 0007 	rsb	r0, r5, #7
 801a824:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801a828:	4107      	asrs	r7, r0
 801a82a:	2f00      	cmp	r7, #0
 801a82c:	dd3f      	ble.n	801a8ae <__kernel_rem_pio2f+0x1ce>
 801a82e:	f04f 0e00 	mov.w	lr, #0
 801a832:	f109 0901 	add.w	r9, r9, #1
 801a836:	4673      	mov	r3, lr
 801a838:	4576      	cmp	r6, lr
 801a83a:	dc6b      	bgt.n	801a914 <__kernel_rem_pio2f+0x234>
 801a83c:	2d00      	cmp	r5, #0
 801a83e:	dd04      	ble.n	801a84a <__kernel_rem_pio2f+0x16a>
 801a840:	2d01      	cmp	r5, #1
 801a842:	d078      	beq.n	801a936 <__kernel_rem_pio2f+0x256>
 801a844:	2d02      	cmp	r5, #2
 801a846:	f000 8081 	beq.w	801a94c <__kernel_rem_pio2f+0x26c>
 801a84a:	2f02      	cmp	r7, #2
 801a84c:	d12f      	bne.n	801a8ae <__kernel_rem_pio2f+0x1ce>
 801a84e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a852:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a856:	b353      	cbz	r3, 801a8ae <__kernel_rem_pio2f+0x1ce>
 801a858:	4628      	mov	r0, r5
 801a85a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801a85e:	f000 fd1b 	bl	801b298 <scalbnf>
 801a862:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801a866:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a86a:	e020      	b.n	801a8ae <__kernel_rem_pio2f+0x1ce>
 801a86c:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a870:	3f01      	subs	r7, #1
 801a872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a87a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a87e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a882:	ecac 0a01 	vstmia	ip!, {s0}
 801a886:	ed90 0a00 	vldr	s0, [r0]
 801a88a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a88e:	e799      	b.n	801a7c4 <__kernel_rem_pio2f+0xe4>
 801a890:	d105      	bne.n	801a89e <__kernel_rem_pio2f+0x1be>
 801a892:	1e70      	subs	r0, r6, #1
 801a894:	ab08      	add	r3, sp, #32
 801a896:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801a89a:	11ff      	asrs	r7, r7, #7
 801a89c:	e7c5      	b.n	801a82a <__kernel_rem_pio2f+0x14a>
 801a89e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a8a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8aa:	da31      	bge.n	801a910 <__kernel_rem_pio2f+0x230>
 801a8ac:	2700      	movs	r7, #0
 801a8ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b6:	f040 809b 	bne.w	801a9f0 <__kernel_rem_pio2f+0x310>
 801a8ba:	1e74      	subs	r4, r6, #1
 801a8bc:	46a4      	mov	ip, r4
 801a8be:	2000      	movs	r0, #0
 801a8c0:	45d4      	cmp	ip, sl
 801a8c2:	da4a      	bge.n	801a95a <__kernel_rem_pio2f+0x27a>
 801a8c4:	2800      	cmp	r0, #0
 801a8c6:	d07a      	beq.n	801a9be <__kernel_rem_pio2f+0x2de>
 801a8c8:	ab08      	add	r3, sp, #32
 801a8ca:	3d08      	subs	r5, #8
 801a8cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	f000 8081 	beq.w	801a9d8 <__kernel_rem_pio2f+0x2f8>
 801a8d6:	4628      	mov	r0, r5
 801a8d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a8dc:	00a5      	lsls	r5, r4, #2
 801a8de:	f000 fcdb 	bl	801b298 <scalbnf>
 801a8e2:	aa44      	add	r2, sp, #272	; 0x110
 801a8e4:	1d2b      	adds	r3, r5, #4
 801a8e6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801a9e8 <__kernel_rem_pio2f+0x308>
 801a8ea:	18d1      	adds	r1, r2, r3
 801a8ec:	4622      	mov	r2, r4
 801a8ee:	2a00      	cmp	r2, #0
 801a8f0:	f280 80ae 	bge.w	801aa50 <__kernel_rem_pio2f+0x370>
 801a8f4:	4622      	mov	r2, r4
 801a8f6:	2a00      	cmp	r2, #0
 801a8f8:	f2c0 80cc 	blt.w	801aa94 <__kernel_rem_pio2f+0x3b4>
 801a8fc:	a944      	add	r1, sp, #272	; 0x110
 801a8fe:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801a902:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801a9e0 <__kernel_rem_pio2f+0x300>
 801a906:	eddf 7a39 	vldr	s15, [pc, #228]	; 801a9ec <__kernel_rem_pio2f+0x30c>
 801a90a:	2000      	movs	r0, #0
 801a90c:	1aa1      	subs	r1, r4, r2
 801a90e:	e0b6      	b.n	801aa7e <__kernel_rem_pio2f+0x39e>
 801a910:	2702      	movs	r7, #2
 801a912:	e78c      	b.n	801a82e <__kernel_rem_pio2f+0x14e>
 801a914:	6820      	ldr	r0, [r4, #0]
 801a916:	b94b      	cbnz	r3, 801a92c <__kernel_rem_pio2f+0x24c>
 801a918:	b118      	cbz	r0, 801a922 <__kernel_rem_pio2f+0x242>
 801a91a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801a91e:	6020      	str	r0, [r4, #0]
 801a920:	2001      	movs	r0, #1
 801a922:	f10e 0e01 	add.w	lr, lr, #1
 801a926:	3404      	adds	r4, #4
 801a928:	4603      	mov	r3, r0
 801a92a:	e785      	b.n	801a838 <__kernel_rem_pio2f+0x158>
 801a92c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801a930:	6020      	str	r0, [r4, #0]
 801a932:	4618      	mov	r0, r3
 801a934:	e7f5      	b.n	801a922 <__kernel_rem_pio2f+0x242>
 801a936:	1e74      	subs	r4, r6, #1
 801a938:	a808      	add	r0, sp, #32
 801a93a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801a93e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801a942:	f10d 0c20 	add.w	ip, sp, #32
 801a946:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801a94a:	e77e      	b.n	801a84a <__kernel_rem_pio2f+0x16a>
 801a94c:	1e74      	subs	r4, r6, #1
 801a94e:	a808      	add	r0, sp, #32
 801a950:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801a954:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801a958:	e7f3      	b.n	801a942 <__kernel_rem_pio2f+0x262>
 801a95a:	ab08      	add	r3, sp, #32
 801a95c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a960:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a964:	4318      	orrs	r0, r3
 801a966:	e7ab      	b.n	801a8c0 <__kernel_rem_pio2f+0x1e0>
 801a968:	f10c 0c01 	add.w	ip, ip, #1
 801a96c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801a970:	2c00      	cmp	r4, #0
 801a972:	d0f9      	beq.n	801a968 <__kernel_rem_pio2f+0x288>
 801a974:	9b05      	ldr	r3, [sp, #20]
 801a976:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801a97a:	eb0d 0003 	add.w	r0, sp, r3
 801a97e:	9b01      	ldr	r3, [sp, #4]
 801a980:	18f4      	adds	r4, r6, r3
 801a982:	ab1c      	add	r3, sp, #112	; 0x70
 801a984:	1c77      	adds	r7, r6, #1
 801a986:	384c      	subs	r0, #76	; 0x4c
 801a988:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a98c:	4466      	add	r6, ip
 801a98e:	42be      	cmp	r6, r7
 801a990:	f6ff af0b 	blt.w	801a7aa <__kernel_rem_pio2f+0xca>
 801a994:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801a998:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a99c:	ee07 3a90 	vmov	s15, r3
 801a9a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9a4:	f04f 0c00 	mov.w	ip, #0
 801a9a8:	ece4 7a01 	vstmia	r4!, {s15}
 801a9ac:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801a9ec <__kernel_rem_pio2f+0x30c>
 801a9b0:	46a1      	mov	r9, r4
 801a9b2:	458c      	cmp	ip, r1
 801a9b4:	dd07      	ble.n	801a9c6 <__kernel_rem_pio2f+0x2e6>
 801a9b6:	ece0 7a01 	vstmia	r0!, {s15}
 801a9ba:	3701      	adds	r7, #1
 801a9bc:	e7e7      	b.n	801a98e <__kernel_rem_pio2f+0x2ae>
 801a9be:	9804      	ldr	r0, [sp, #16]
 801a9c0:	f04f 0c01 	mov.w	ip, #1
 801a9c4:	e7d2      	b.n	801a96c <__kernel_rem_pio2f+0x28c>
 801a9c6:	ecfe 6a01 	vldmia	lr!, {s13}
 801a9ca:	ed39 7a01 	vldmdb	r9!, {s14}
 801a9ce:	f10c 0c01 	add.w	ip, ip, #1
 801a9d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a9d6:	e7ec      	b.n	801a9b2 <__kernel_rem_pio2f+0x2d2>
 801a9d8:	3c01      	subs	r4, #1
 801a9da:	e775      	b.n	801a8c8 <__kernel_rem_pio2f+0x1e8>
 801a9dc:	0801b9dc 	.word	0x0801b9dc
 801a9e0:	0801b9b0 	.word	0x0801b9b0
 801a9e4:	43800000 	.word	0x43800000
 801a9e8:	3b800000 	.word	0x3b800000
 801a9ec:	00000000 	.word	0x00000000
 801a9f0:	9b03      	ldr	r3, [sp, #12]
 801a9f2:	eeb0 0a48 	vmov.f32	s0, s16
 801a9f6:	1a98      	subs	r0, r3, r2
 801a9f8:	f000 fc4e 	bl	801b298 <scalbnf>
 801a9fc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801a9e4 <__kernel_rem_pio2f+0x304>
 801aa00:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801aa04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa08:	db19      	blt.n	801aa3e <__kernel_rem_pio2f+0x35e>
 801aa0a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801a9e8 <__kernel_rem_pio2f+0x308>
 801aa0e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801aa12:	aa08      	add	r2, sp, #32
 801aa14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aa18:	1c74      	adds	r4, r6, #1
 801aa1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa1e:	3508      	adds	r5, #8
 801aa20:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801aa24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aa28:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801aa2c:	ee10 3a10 	vmov	r3, s0
 801aa30:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801aa34:	ee17 3a90 	vmov	r3, s15
 801aa38:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801aa3c:	e74b      	b.n	801a8d6 <__kernel_rem_pio2f+0x1f6>
 801aa3e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801aa42:	aa08      	add	r2, sp, #32
 801aa44:	ee10 3a10 	vmov	r3, s0
 801aa48:	4634      	mov	r4, r6
 801aa4a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801aa4e:	e742      	b.n	801a8d6 <__kernel_rem_pio2f+0x1f6>
 801aa50:	a808      	add	r0, sp, #32
 801aa52:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801aa56:	9001      	str	r0, [sp, #4]
 801aa58:	ee07 0a90 	vmov	s15, r0
 801aa5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa60:	3a01      	subs	r2, #1
 801aa62:	ee67 7a80 	vmul.f32	s15, s15, s0
 801aa66:	ee20 0a07 	vmul.f32	s0, s0, s14
 801aa6a:	ed61 7a01 	vstmdb	r1!, {s15}
 801aa6e:	e73e      	b.n	801a8ee <__kernel_rem_pio2f+0x20e>
 801aa70:	ecfc 6a01 	vldmia	ip!, {s13}
 801aa74:	ecb6 7a01 	vldmia	r6!, {s14}
 801aa78:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aa7c:	3001      	adds	r0, #1
 801aa7e:	4550      	cmp	r0, sl
 801aa80:	dc01      	bgt.n	801aa86 <__kernel_rem_pio2f+0x3a6>
 801aa82:	4288      	cmp	r0, r1
 801aa84:	ddf4      	ble.n	801aa70 <__kernel_rem_pio2f+0x390>
 801aa86:	a858      	add	r0, sp, #352	; 0x160
 801aa88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801aa8c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801aa90:	3a01      	subs	r2, #1
 801aa92:	e730      	b.n	801a8f6 <__kernel_rem_pio2f+0x216>
 801aa94:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801aa96:	2a02      	cmp	r2, #2
 801aa98:	dc09      	bgt.n	801aaae <__kernel_rem_pio2f+0x3ce>
 801aa9a:	2a00      	cmp	r2, #0
 801aa9c:	dc2a      	bgt.n	801aaf4 <__kernel_rem_pio2f+0x414>
 801aa9e:	d043      	beq.n	801ab28 <__kernel_rem_pio2f+0x448>
 801aaa0:	f009 0007 	and.w	r0, r9, #7
 801aaa4:	b059      	add	sp, #356	; 0x164
 801aaa6:	ecbd 8b04 	vpop	{d8-d9}
 801aaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaae:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801aab0:	2b03      	cmp	r3, #3
 801aab2:	d1f5      	bne.n	801aaa0 <__kernel_rem_pio2f+0x3c0>
 801aab4:	ab30      	add	r3, sp, #192	; 0xc0
 801aab6:	442b      	add	r3, r5
 801aab8:	461a      	mov	r2, r3
 801aaba:	4619      	mov	r1, r3
 801aabc:	4620      	mov	r0, r4
 801aabe:	2800      	cmp	r0, #0
 801aac0:	f1a1 0104 	sub.w	r1, r1, #4
 801aac4:	dc51      	bgt.n	801ab6a <__kernel_rem_pio2f+0x48a>
 801aac6:	4621      	mov	r1, r4
 801aac8:	2901      	cmp	r1, #1
 801aaca:	f1a2 0204 	sub.w	r2, r2, #4
 801aace:	dc5c      	bgt.n	801ab8a <__kernel_rem_pio2f+0x4aa>
 801aad0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801a9ec <__kernel_rem_pio2f+0x30c>
 801aad4:	3304      	adds	r3, #4
 801aad6:	2c01      	cmp	r4, #1
 801aad8:	dc67      	bgt.n	801abaa <__kernel_rem_pio2f+0x4ca>
 801aada:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801aade:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801aae2:	2f00      	cmp	r7, #0
 801aae4:	d167      	bne.n	801abb6 <__kernel_rem_pio2f+0x4d6>
 801aae6:	edc8 6a00 	vstr	s13, [r8]
 801aaea:	ed88 7a01 	vstr	s14, [r8, #4]
 801aaee:	edc8 7a02 	vstr	s15, [r8, #8]
 801aaf2:	e7d5      	b.n	801aaa0 <__kernel_rem_pio2f+0x3c0>
 801aaf4:	aa30      	add	r2, sp, #192	; 0xc0
 801aaf6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801a9ec <__kernel_rem_pio2f+0x30c>
 801aafa:	4413      	add	r3, r2
 801aafc:	4622      	mov	r2, r4
 801aafe:	2a00      	cmp	r2, #0
 801ab00:	da24      	bge.n	801ab4c <__kernel_rem_pio2f+0x46c>
 801ab02:	b34f      	cbz	r7, 801ab58 <__kernel_rem_pio2f+0x478>
 801ab04:	eef1 7a47 	vneg.f32	s15, s14
 801ab08:	edc8 7a00 	vstr	s15, [r8]
 801ab0c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801ab10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab14:	aa31      	add	r2, sp, #196	; 0xc4
 801ab16:	2301      	movs	r3, #1
 801ab18:	429c      	cmp	r4, r3
 801ab1a:	da20      	bge.n	801ab5e <__kernel_rem_pio2f+0x47e>
 801ab1c:	b10f      	cbz	r7, 801ab22 <__kernel_rem_pio2f+0x442>
 801ab1e:	eef1 7a67 	vneg.f32	s15, s15
 801ab22:	edc8 7a01 	vstr	s15, [r8, #4]
 801ab26:	e7bb      	b.n	801aaa0 <__kernel_rem_pio2f+0x3c0>
 801ab28:	aa30      	add	r2, sp, #192	; 0xc0
 801ab2a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801a9ec <__kernel_rem_pio2f+0x30c>
 801ab2e:	4413      	add	r3, r2
 801ab30:	2c00      	cmp	r4, #0
 801ab32:	da05      	bge.n	801ab40 <__kernel_rem_pio2f+0x460>
 801ab34:	b10f      	cbz	r7, 801ab3a <__kernel_rem_pio2f+0x45a>
 801ab36:	eef1 7a67 	vneg.f32	s15, s15
 801ab3a:	edc8 7a00 	vstr	s15, [r8]
 801ab3e:	e7af      	b.n	801aaa0 <__kernel_rem_pio2f+0x3c0>
 801ab40:	ed33 7a01 	vldmdb	r3!, {s14}
 801ab44:	3c01      	subs	r4, #1
 801ab46:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ab4a:	e7f1      	b.n	801ab30 <__kernel_rem_pio2f+0x450>
 801ab4c:	ed73 7a01 	vldmdb	r3!, {s15}
 801ab50:	3a01      	subs	r2, #1
 801ab52:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab56:	e7d2      	b.n	801aafe <__kernel_rem_pio2f+0x41e>
 801ab58:	eef0 7a47 	vmov.f32	s15, s14
 801ab5c:	e7d4      	b.n	801ab08 <__kernel_rem_pio2f+0x428>
 801ab5e:	ecb2 7a01 	vldmia	r2!, {s14}
 801ab62:	3301      	adds	r3, #1
 801ab64:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ab68:	e7d6      	b.n	801ab18 <__kernel_rem_pio2f+0x438>
 801ab6a:	edd1 7a00 	vldr	s15, [r1]
 801ab6e:	edd1 6a01 	vldr	s13, [r1, #4]
 801ab72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ab76:	3801      	subs	r0, #1
 801ab78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab7c:	ed81 7a00 	vstr	s14, [r1]
 801ab80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ab84:	edc1 7a01 	vstr	s15, [r1, #4]
 801ab88:	e799      	b.n	801aabe <__kernel_rem_pio2f+0x3de>
 801ab8a:	edd2 7a00 	vldr	s15, [r2]
 801ab8e:	edd2 6a01 	vldr	s13, [r2, #4]
 801ab92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ab96:	3901      	subs	r1, #1
 801ab98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab9c:	ed82 7a00 	vstr	s14, [r2]
 801aba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aba4:	edc2 7a01 	vstr	s15, [r2, #4]
 801aba8:	e78e      	b.n	801aac8 <__kernel_rem_pio2f+0x3e8>
 801abaa:	ed33 7a01 	vldmdb	r3!, {s14}
 801abae:	3c01      	subs	r4, #1
 801abb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801abb4:	e78f      	b.n	801aad6 <__kernel_rem_pio2f+0x3f6>
 801abb6:	eef1 6a66 	vneg.f32	s13, s13
 801abba:	eeb1 7a47 	vneg.f32	s14, s14
 801abbe:	edc8 6a00 	vstr	s13, [r8]
 801abc2:	ed88 7a01 	vstr	s14, [r8, #4]
 801abc6:	eef1 7a67 	vneg.f32	s15, s15
 801abca:	e790      	b.n	801aaee <__kernel_rem_pio2f+0x40e>

0801abcc <__kernel_sinf>:
 801abcc:	ee10 3a10 	vmov	r3, s0
 801abd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801abd4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801abd8:	da04      	bge.n	801abe4 <__kernel_sinf+0x18>
 801abda:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801abde:	ee17 3a90 	vmov	r3, s15
 801abe2:	b35b      	cbz	r3, 801ac3c <__kernel_sinf+0x70>
 801abe4:	ee20 7a00 	vmul.f32	s14, s0, s0
 801abe8:	eddf 7a15 	vldr	s15, [pc, #84]	; 801ac40 <__kernel_sinf+0x74>
 801abec:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801ac44 <__kernel_sinf+0x78>
 801abf0:	eea7 6a27 	vfma.f32	s12, s14, s15
 801abf4:	eddf 7a14 	vldr	s15, [pc, #80]	; 801ac48 <__kernel_sinf+0x7c>
 801abf8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801abfc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801ac4c <__kernel_sinf+0x80>
 801ac00:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ac04:	eddf 7a12 	vldr	s15, [pc, #72]	; 801ac50 <__kernel_sinf+0x84>
 801ac08:	ee60 6a07 	vmul.f32	s13, s0, s14
 801ac0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ac10:	b930      	cbnz	r0, 801ac20 <__kernel_sinf+0x54>
 801ac12:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801ac54 <__kernel_sinf+0x88>
 801ac16:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ac1a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801ac1e:	4770      	bx	lr
 801ac20:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801ac24:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801ac28:	eee0 7a86 	vfma.f32	s15, s1, s12
 801ac2c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801ac30:	eddf 7a09 	vldr	s15, [pc, #36]	; 801ac58 <__kernel_sinf+0x8c>
 801ac34:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801ac38:	ee30 0a60 	vsub.f32	s0, s0, s1
 801ac3c:	4770      	bx	lr
 801ac3e:	bf00      	nop
 801ac40:	2f2ec9d3 	.word	0x2f2ec9d3
 801ac44:	b2d72f34 	.word	0xb2d72f34
 801ac48:	3638ef1b 	.word	0x3638ef1b
 801ac4c:	b9500d01 	.word	0xb9500d01
 801ac50:	3c088889 	.word	0x3c088889
 801ac54:	be2aaaab 	.word	0xbe2aaaab
 801ac58:	3e2aaaab 	.word	0x3e2aaaab

0801ac5c <__kernel_tanf>:
 801ac5c:	b508      	push	{r3, lr}
 801ac5e:	ee10 3a10 	vmov	r3, s0
 801ac62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ac66:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801ac6a:	eef0 7a40 	vmov.f32	s15, s0
 801ac6e:	da17      	bge.n	801aca0 <__kernel_tanf+0x44>
 801ac70:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801ac74:	ee17 1a10 	vmov	r1, s14
 801ac78:	bb41      	cbnz	r1, 801accc <__kernel_tanf+0x70>
 801ac7a:	1c43      	adds	r3, r0, #1
 801ac7c:	4313      	orrs	r3, r2
 801ac7e:	d108      	bne.n	801ac92 <__kernel_tanf+0x36>
 801ac80:	f000 faba 	bl	801b1f8 <fabsf>
 801ac84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ac88:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ac8c:	eeb0 0a67 	vmov.f32	s0, s15
 801ac90:	bd08      	pop	{r3, pc}
 801ac92:	2801      	cmp	r0, #1
 801ac94:	d0fa      	beq.n	801ac8c <__kernel_tanf+0x30>
 801ac96:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801ac9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ac9e:	e7f5      	b.n	801ac8c <__kernel_tanf+0x30>
 801aca0:	494c      	ldr	r1, [pc, #304]	; (801add4 <__kernel_tanf+0x178>)
 801aca2:	428a      	cmp	r2, r1
 801aca4:	db12      	blt.n	801accc <__kernel_tanf+0x70>
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	bfb8      	it	lt
 801acaa:	eef1 7a40 	vneglt.f32	s15, s0
 801acae:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801add8 <__kernel_tanf+0x17c>
 801acb2:	ee70 7a67 	vsub.f32	s15, s0, s15
 801acb6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801addc <__kernel_tanf+0x180>
 801acba:	bfb8      	it	lt
 801acbc:	eef1 0a60 	vneglt.f32	s1, s1
 801acc0:	ee70 0a60 	vsub.f32	s1, s0, s1
 801acc4:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801acc8:	eddf 0a45 	vldr	s1, [pc, #276]	; 801ade0 <__kernel_tanf+0x184>
 801accc:	eddf 5a45 	vldr	s11, [pc, #276]	; 801ade4 <__kernel_tanf+0x188>
 801acd0:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801ade8 <__kernel_tanf+0x18c>
 801acd4:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801adec <__kernel_tanf+0x190>
 801acd8:	493e      	ldr	r1, [pc, #248]	; (801add4 <__kernel_tanf+0x178>)
 801acda:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801acde:	428a      	cmp	r2, r1
 801ace0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801ace4:	eea7 6a25 	vfma.f32	s12, s14, s11
 801ace8:	eddf 5a41 	vldr	s11, [pc, #260]	; 801adf0 <__kernel_tanf+0x194>
 801acec:	eee6 5a07 	vfma.f32	s11, s12, s14
 801acf0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801adf4 <__kernel_tanf+0x198>
 801acf4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801acf8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801adf8 <__kernel_tanf+0x19c>
 801acfc:	eee6 5a07 	vfma.f32	s11, s12, s14
 801ad00:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801adfc <__kernel_tanf+0x1a0>
 801ad04:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ad08:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801ae00 <__kernel_tanf+0x1a4>
 801ad0c:	eee7 5a05 	vfma.f32	s11, s14, s10
 801ad10:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801ae04 <__kernel_tanf+0x1a8>
 801ad14:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ad18:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801ae08 <__kernel_tanf+0x1ac>
 801ad1c:	eee5 5a07 	vfma.f32	s11, s10, s14
 801ad20:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801ae0c <__kernel_tanf+0x1b0>
 801ad24:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ad28:	eddf 5a39 	vldr	s11, [pc, #228]	; 801ae10 <__kernel_tanf+0x1b4>
 801ad2c:	eee5 5a07 	vfma.f32	s11, s10, s14
 801ad30:	eeb0 7a46 	vmov.f32	s14, s12
 801ad34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801ad38:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801ad3c:	eeb0 6a60 	vmov.f32	s12, s1
 801ad40:	eea7 6a05 	vfma.f32	s12, s14, s10
 801ad44:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801ae14 <__kernel_tanf+0x1b8>
 801ad48:	eee6 0a26 	vfma.f32	s1, s12, s13
 801ad4c:	eee5 0a07 	vfma.f32	s1, s10, s14
 801ad50:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801ad54:	db1d      	blt.n	801ad92 <__kernel_tanf+0x136>
 801ad56:	ee06 0a90 	vmov	s13, r0
 801ad5a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801ad5e:	ee27 6a07 	vmul.f32	s12, s14, s14
 801ad62:	ee37 7a00 	vadd.f32	s14, s14, s0
 801ad66:	179b      	asrs	r3, r3, #30
 801ad68:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801ad6c:	f003 0302 	and.w	r3, r3, #2
 801ad70:	f1c3 0301 	rsb	r3, r3, #1
 801ad74:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801ad78:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801ad7c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801ad80:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801ad84:	ee07 3a90 	vmov	s15, r3
 801ad88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad8c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ad90:	e77c      	b.n	801ac8c <__kernel_tanf+0x30>
 801ad92:	2801      	cmp	r0, #1
 801ad94:	d01b      	beq.n	801adce <__kernel_tanf+0x172>
 801ad96:	4b20      	ldr	r3, [pc, #128]	; (801ae18 <__kernel_tanf+0x1bc>)
 801ad98:	ee17 2a10 	vmov	r2, s14
 801ad9c:	401a      	ands	r2, r3
 801ad9e:	ee06 2a10 	vmov	s12, r2
 801ada2:	ee76 7a67 	vsub.f32	s15, s12, s15
 801ada6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801adaa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801adae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801adb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801adb6:	ee16 2a90 	vmov	r2, s13
 801adba:	4013      	ands	r3, r2
 801adbc:	ee07 3a90 	vmov	s15, r3
 801adc0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801adc4:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801adc8:	eee7 7a26 	vfma.f32	s15, s14, s13
 801adcc:	e75e      	b.n	801ac8c <__kernel_tanf+0x30>
 801adce:	eef0 7a47 	vmov.f32	s15, s14
 801add2:	e75b      	b.n	801ac8c <__kernel_tanf+0x30>
 801add4:	3f2ca140 	.word	0x3f2ca140
 801add8:	3f490fda 	.word	0x3f490fda
 801addc:	33222168 	.word	0x33222168
 801ade0:	00000000 	.word	0x00000000
 801ade4:	b79bae5f 	.word	0xb79bae5f
 801ade8:	38a3f445 	.word	0x38a3f445
 801adec:	37d95384 	.word	0x37d95384
 801adf0:	3a1a26c8 	.word	0x3a1a26c8
 801adf4:	3b6b6916 	.word	0x3b6b6916
 801adf8:	3cb327a4 	.word	0x3cb327a4
 801adfc:	3e088889 	.word	0x3e088889
 801ae00:	3895c07a 	.word	0x3895c07a
 801ae04:	398137b9 	.word	0x398137b9
 801ae08:	3abede48 	.word	0x3abede48
 801ae0c:	3c11371f 	.word	0x3c11371f
 801ae10:	3d5d0dd1 	.word	0x3d5d0dd1
 801ae14:	3eaaaaab 	.word	0x3eaaaaab
 801ae18:	fffff000 	.word	0xfffff000

0801ae1c <with_errno>:
 801ae1c:	b570      	push	{r4, r5, r6, lr}
 801ae1e:	4604      	mov	r4, r0
 801ae20:	460d      	mov	r5, r1
 801ae22:	4616      	mov	r6, r2
 801ae24:	f7fe fa3e 	bl	80192a4 <__errno>
 801ae28:	4629      	mov	r1, r5
 801ae2a:	6006      	str	r6, [r0, #0]
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	bd70      	pop	{r4, r5, r6, pc}

0801ae30 <xflow>:
 801ae30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae32:	4614      	mov	r4, r2
 801ae34:	461d      	mov	r5, r3
 801ae36:	b108      	cbz	r0, 801ae3c <xflow+0xc>
 801ae38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ae3c:	e9cd 2300 	strd	r2, r3, [sp]
 801ae40:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae44:	4620      	mov	r0, r4
 801ae46:	4629      	mov	r1, r5
 801ae48:	f7e5 fb7a 	bl	8000540 <__aeabi_dmul>
 801ae4c:	2222      	movs	r2, #34	; 0x22
 801ae4e:	b003      	add	sp, #12
 801ae50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae54:	f7ff bfe2 	b.w	801ae1c <with_errno>

0801ae58 <__math_uflow>:
 801ae58:	b508      	push	{r3, lr}
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ae60:	f7ff ffe6 	bl	801ae30 <xflow>
 801ae64:	ec41 0b10 	vmov	d0, r0, r1
 801ae68:	bd08      	pop	{r3, pc}

0801ae6a <__math_oflow>:
 801ae6a:	b508      	push	{r3, lr}
 801ae6c:	2200      	movs	r2, #0
 801ae6e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801ae72:	f7ff ffdd 	bl	801ae30 <xflow>
 801ae76:	ec41 0b10 	vmov	d0, r0, r1
 801ae7a:	bd08      	pop	{r3, pc}
 801ae7c:	0000      	movs	r0, r0
	...

0801ae80 <atan>:
 801ae80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae84:	ec55 4b10 	vmov	r4, r5, d0
 801ae88:	4bc3      	ldr	r3, [pc, #780]	; (801b198 <atan+0x318>)
 801ae8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ae8e:	429e      	cmp	r6, r3
 801ae90:	46ab      	mov	fp, r5
 801ae92:	dd18      	ble.n	801aec6 <atan+0x46>
 801ae94:	4bc1      	ldr	r3, [pc, #772]	; (801b19c <atan+0x31c>)
 801ae96:	429e      	cmp	r6, r3
 801ae98:	dc01      	bgt.n	801ae9e <atan+0x1e>
 801ae9a:	d109      	bne.n	801aeb0 <atan+0x30>
 801ae9c:	b144      	cbz	r4, 801aeb0 <atan+0x30>
 801ae9e:	4622      	mov	r2, r4
 801aea0:	462b      	mov	r3, r5
 801aea2:	4620      	mov	r0, r4
 801aea4:	4629      	mov	r1, r5
 801aea6:	f7e5 f995 	bl	80001d4 <__adddf3>
 801aeaa:	4604      	mov	r4, r0
 801aeac:	460d      	mov	r5, r1
 801aeae:	e006      	b.n	801aebe <atan+0x3e>
 801aeb0:	f1bb 0f00 	cmp.w	fp, #0
 801aeb4:	f300 8131 	bgt.w	801b11a <atan+0x29a>
 801aeb8:	a59b      	add	r5, pc, #620	; (adr r5, 801b128 <atan+0x2a8>)
 801aeba:	e9d5 4500 	ldrd	r4, r5, [r5]
 801aebe:	ec45 4b10 	vmov	d0, r4, r5
 801aec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aec6:	4bb6      	ldr	r3, [pc, #728]	; (801b1a0 <atan+0x320>)
 801aec8:	429e      	cmp	r6, r3
 801aeca:	dc14      	bgt.n	801aef6 <atan+0x76>
 801aecc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801aed0:	429e      	cmp	r6, r3
 801aed2:	dc0d      	bgt.n	801aef0 <atan+0x70>
 801aed4:	a396      	add	r3, pc, #600	; (adr r3, 801b130 <atan+0x2b0>)
 801aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeda:	ee10 0a10 	vmov	r0, s0
 801aede:	4629      	mov	r1, r5
 801aee0:	f7e5 f978 	bl	80001d4 <__adddf3>
 801aee4:	4baf      	ldr	r3, [pc, #700]	; (801b1a4 <atan+0x324>)
 801aee6:	2200      	movs	r2, #0
 801aee8:	f7e5 fdba 	bl	8000a60 <__aeabi_dcmpgt>
 801aeec:	2800      	cmp	r0, #0
 801aeee:	d1e6      	bne.n	801aebe <atan+0x3e>
 801aef0:	f04f 3aff 	mov.w	sl, #4294967295
 801aef4:	e02b      	b.n	801af4e <atan+0xce>
 801aef6:	f000 f963 	bl	801b1c0 <fabs>
 801aefa:	4bab      	ldr	r3, [pc, #684]	; (801b1a8 <atan+0x328>)
 801aefc:	429e      	cmp	r6, r3
 801aefe:	ec55 4b10 	vmov	r4, r5, d0
 801af02:	f300 80bf 	bgt.w	801b084 <atan+0x204>
 801af06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801af0a:	429e      	cmp	r6, r3
 801af0c:	f300 80a0 	bgt.w	801b050 <atan+0x1d0>
 801af10:	ee10 2a10 	vmov	r2, s0
 801af14:	ee10 0a10 	vmov	r0, s0
 801af18:	462b      	mov	r3, r5
 801af1a:	4629      	mov	r1, r5
 801af1c:	f7e5 f95a 	bl	80001d4 <__adddf3>
 801af20:	4ba0      	ldr	r3, [pc, #640]	; (801b1a4 <atan+0x324>)
 801af22:	2200      	movs	r2, #0
 801af24:	f7e5 f954 	bl	80001d0 <__aeabi_dsub>
 801af28:	2200      	movs	r2, #0
 801af2a:	4606      	mov	r6, r0
 801af2c:	460f      	mov	r7, r1
 801af2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801af32:	4620      	mov	r0, r4
 801af34:	4629      	mov	r1, r5
 801af36:	f7e5 f94d 	bl	80001d4 <__adddf3>
 801af3a:	4602      	mov	r2, r0
 801af3c:	460b      	mov	r3, r1
 801af3e:	4630      	mov	r0, r6
 801af40:	4639      	mov	r1, r7
 801af42:	f7e5 fc27 	bl	8000794 <__aeabi_ddiv>
 801af46:	f04f 0a00 	mov.w	sl, #0
 801af4a:	4604      	mov	r4, r0
 801af4c:	460d      	mov	r5, r1
 801af4e:	4622      	mov	r2, r4
 801af50:	462b      	mov	r3, r5
 801af52:	4620      	mov	r0, r4
 801af54:	4629      	mov	r1, r5
 801af56:	f7e5 faf3 	bl	8000540 <__aeabi_dmul>
 801af5a:	4602      	mov	r2, r0
 801af5c:	460b      	mov	r3, r1
 801af5e:	4680      	mov	r8, r0
 801af60:	4689      	mov	r9, r1
 801af62:	f7e5 faed 	bl	8000540 <__aeabi_dmul>
 801af66:	a374      	add	r3, pc, #464	; (adr r3, 801b138 <atan+0x2b8>)
 801af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af6c:	4606      	mov	r6, r0
 801af6e:	460f      	mov	r7, r1
 801af70:	f7e5 fae6 	bl	8000540 <__aeabi_dmul>
 801af74:	a372      	add	r3, pc, #456	; (adr r3, 801b140 <atan+0x2c0>)
 801af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af7a:	f7e5 f92b 	bl	80001d4 <__adddf3>
 801af7e:	4632      	mov	r2, r6
 801af80:	463b      	mov	r3, r7
 801af82:	f7e5 fadd 	bl	8000540 <__aeabi_dmul>
 801af86:	a370      	add	r3, pc, #448	; (adr r3, 801b148 <atan+0x2c8>)
 801af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af8c:	f7e5 f922 	bl	80001d4 <__adddf3>
 801af90:	4632      	mov	r2, r6
 801af92:	463b      	mov	r3, r7
 801af94:	f7e5 fad4 	bl	8000540 <__aeabi_dmul>
 801af98:	a36d      	add	r3, pc, #436	; (adr r3, 801b150 <atan+0x2d0>)
 801af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af9e:	f7e5 f919 	bl	80001d4 <__adddf3>
 801afa2:	4632      	mov	r2, r6
 801afa4:	463b      	mov	r3, r7
 801afa6:	f7e5 facb 	bl	8000540 <__aeabi_dmul>
 801afaa:	a36b      	add	r3, pc, #428	; (adr r3, 801b158 <atan+0x2d8>)
 801afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afb0:	f7e5 f910 	bl	80001d4 <__adddf3>
 801afb4:	4632      	mov	r2, r6
 801afb6:	463b      	mov	r3, r7
 801afb8:	f7e5 fac2 	bl	8000540 <__aeabi_dmul>
 801afbc:	a368      	add	r3, pc, #416	; (adr r3, 801b160 <atan+0x2e0>)
 801afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc2:	f7e5 f907 	bl	80001d4 <__adddf3>
 801afc6:	4642      	mov	r2, r8
 801afc8:	464b      	mov	r3, r9
 801afca:	f7e5 fab9 	bl	8000540 <__aeabi_dmul>
 801afce:	a366      	add	r3, pc, #408	; (adr r3, 801b168 <atan+0x2e8>)
 801afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd4:	4680      	mov	r8, r0
 801afd6:	4689      	mov	r9, r1
 801afd8:	4630      	mov	r0, r6
 801afda:	4639      	mov	r1, r7
 801afdc:	f7e5 fab0 	bl	8000540 <__aeabi_dmul>
 801afe0:	a363      	add	r3, pc, #396	; (adr r3, 801b170 <atan+0x2f0>)
 801afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe6:	f7e5 f8f3 	bl	80001d0 <__aeabi_dsub>
 801afea:	4632      	mov	r2, r6
 801afec:	463b      	mov	r3, r7
 801afee:	f7e5 faa7 	bl	8000540 <__aeabi_dmul>
 801aff2:	a361      	add	r3, pc, #388	; (adr r3, 801b178 <atan+0x2f8>)
 801aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff8:	f7e5 f8ea 	bl	80001d0 <__aeabi_dsub>
 801affc:	4632      	mov	r2, r6
 801affe:	463b      	mov	r3, r7
 801b000:	f7e5 fa9e 	bl	8000540 <__aeabi_dmul>
 801b004:	a35e      	add	r3, pc, #376	; (adr r3, 801b180 <atan+0x300>)
 801b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b00a:	f7e5 f8e1 	bl	80001d0 <__aeabi_dsub>
 801b00e:	4632      	mov	r2, r6
 801b010:	463b      	mov	r3, r7
 801b012:	f7e5 fa95 	bl	8000540 <__aeabi_dmul>
 801b016:	a35c      	add	r3, pc, #368	; (adr r3, 801b188 <atan+0x308>)
 801b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b01c:	f7e5 f8d8 	bl	80001d0 <__aeabi_dsub>
 801b020:	4632      	mov	r2, r6
 801b022:	463b      	mov	r3, r7
 801b024:	f7e5 fa8c 	bl	8000540 <__aeabi_dmul>
 801b028:	4602      	mov	r2, r0
 801b02a:	460b      	mov	r3, r1
 801b02c:	4640      	mov	r0, r8
 801b02e:	4649      	mov	r1, r9
 801b030:	f7e5 f8d0 	bl	80001d4 <__adddf3>
 801b034:	4622      	mov	r2, r4
 801b036:	462b      	mov	r3, r5
 801b038:	f7e5 fa82 	bl	8000540 <__aeabi_dmul>
 801b03c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b040:	4602      	mov	r2, r0
 801b042:	460b      	mov	r3, r1
 801b044:	d14b      	bne.n	801b0de <atan+0x25e>
 801b046:	4620      	mov	r0, r4
 801b048:	4629      	mov	r1, r5
 801b04a:	f7e5 f8c1 	bl	80001d0 <__aeabi_dsub>
 801b04e:	e72c      	b.n	801aeaa <atan+0x2a>
 801b050:	ee10 0a10 	vmov	r0, s0
 801b054:	4b53      	ldr	r3, [pc, #332]	; (801b1a4 <atan+0x324>)
 801b056:	2200      	movs	r2, #0
 801b058:	4629      	mov	r1, r5
 801b05a:	f7e5 f8b9 	bl	80001d0 <__aeabi_dsub>
 801b05e:	4b51      	ldr	r3, [pc, #324]	; (801b1a4 <atan+0x324>)
 801b060:	4606      	mov	r6, r0
 801b062:	460f      	mov	r7, r1
 801b064:	2200      	movs	r2, #0
 801b066:	4620      	mov	r0, r4
 801b068:	4629      	mov	r1, r5
 801b06a:	f7e5 f8b3 	bl	80001d4 <__adddf3>
 801b06e:	4602      	mov	r2, r0
 801b070:	460b      	mov	r3, r1
 801b072:	4630      	mov	r0, r6
 801b074:	4639      	mov	r1, r7
 801b076:	f7e5 fb8d 	bl	8000794 <__aeabi_ddiv>
 801b07a:	f04f 0a01 	mov.w	sl, #1
 801b07e:	4604      	mov	r4, r0
 801b080:	460d      	mov	r5, r1
 801b082:	e764      	b.n	801af4e <atan+0xce>
 801b084:	4b49      	ldr	r3, [pc, #292]	; (801b1ac <atan+0x32c>)
 801b086:	429e      	cmp	r6, r3
 801b088:	da1d      	bge.n	801b0c6 <atan+0x246>
 801b08a:	ee10 0a10 	vmov	r0, s0
 801b08e:	4b48      	ldr	r3, [pc, #288]	; (801b1b0 <atan+0x330>)
 801b090:	2200      	movs	r2, #0
 801b092:	4629      	mov	r1, r5
 801b094:	f7e5 f89c 	bl	80001d0 <__aeabi_dsub>
 801b098:	4b45      	ldr	r3, [pc, #276]	; (801b1b0 <atan+0x330>)
 801b09a:	4606      	mov	r6, r0
 801b09c:	460f      	mov	r7, r1
 801b09e:	2200      	movs	r2, #0
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	4629      	mov	r1, r5
 801b0a4:	f7e5 fa4c 	bl	8000540 <__aeabi_dmul>
 801b0a8:	4b3e      	ldr	r3, [pc, #248]	; (801b1a4 <atan+0x324>)
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	f7e5 f892 	bl	80001d4 <__adddf3>
 801b0b0:	4602      	mov	r2, r0
 801b0b2:	460b      	mov	r3, r1
 801b0b4:	4630      	mov	r0, r6
 801b0b6:	4639      	mov	r1, r7
 801b0b8:	f7e5 fb6c 	bl	8000794 <__aeabi_ddiv>
 801b0bc:	f04f 0a02 	mov.w	sl, #2
 801b0c0:	4604      	mov	r4, r0
 801b0c2:	460d      	mov	r5, r1
 801b0c4:	e743      	b.n	801af4e <atan+0xce>
 801b0c6:	462b      	mov	r3, r5
 801b0c8:	ee10 2a10 	vmov	r2, s0
 801b0cc:	4939      	ldr	r1, [pc, #228]	; (801b1b4 <atan+0x334>)
 801b0ce:	2000      	movs	r0, #0
 801b0d0:	f7e5 fb60 	bl	8000794 <__aeabi_ddiv>
 801b0d4:	f04f 0a03 	mov.w	sl, #3
 801b0d8:	4604      	mov	r4, r0
 801b0da:	460d      	mov	r5, r1
 801b0dc:	e737      	b.n	801af4e <atan+0xce>
 801b0de:	4b36      	ldr	r3, [pc, #216]	; (801b1b8 <atan+0x338>)
 801b0e0:	4e36      	ldr	r6, [pc, #216]	; (801b1bc <atan+0x33c>)
 801b0e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801b0e6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801b0ea:	e9da 2300 	ldrd	r2, r3, [sl]
 801b0ee:	f7e5 f86f 	bl	80001d0 <__aeabi_dsub>
 801b0f2:	4622      	mov	r2, r4
 801b0f4:	462b      	mov	r3, r5
 801b0f6:	f7e5 f86b 	bl	80001d0 <__aeabi_dsub>
 801b0fa:	4602      	mov	r2, r0
 801b0fc:	460b      	mov	r3, r1
 801b0fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b102:	f7e5 f865 	bl	80001d0 <__aeabi_dsub>
 801b106:	f1bb 0f00 	cmp.w	fp, #0
 801b10a:	4604      	mov	r4, r0
 801b10c:	460d      	mov	r5, r1
 801b10e:	f6bf aed6 	bge.w	801aebe <atan+0x3e>
 801b112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b116:	461d      	mov	r5, r3
 801b118:	e6d1      	b.n	801aebe <atan+0x3e>
 801b11a:	a51d      	add	r5, pc, #116	; (adr r5, 801b190 <atan+0x310>)
 801b11c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b120:	e6cd      	b.n	801aebe <atan+0x3e>
 801b122:	bf00      	nop
 801b124:	f3af 8000 	nop.w
 801b128:	54442d18 	.word	0x54442d18
 801b12c:	bff921fb 	.word	0xbff921fb
 801b130:	8800759c 	.word	0x8800759c
 801b134:	7e37e43c 	.word	0x7e37e43c
 801b138:	e322da11 	.word	0xe322da11
 801b13c:	3f90ad3a 	.word	0x3f90ad3a
 801b140:	24760deb 	.word	0x24760deb
 801b144:	3fa97b4b 	.word	0x3fa97b4b
 801b148:	a0d03d51 	.word	0xa0d03d51
 801b14c:	3fb10d66 	.word	0x3fb10d66
 801b150:	c54c206e 	.word	0xc54c206e
 801b154:	3fb745cd 	.word	0x3fb745cd
 801b158:	920083ff 	.word	0x920083ff
 801b15c:	3fc24924 	.word	0x3fc24924
 801b160:	5555550d 	.word	0x5555550d
 801b164:	3fd55555 	.word	0x3fd55555
 801b168:	2c6a6c2f 	.word	0x2c6a6c2f
 801b16c:	bfa2b444 	.word	0xbfa2b444
 801b170:	52defd9a 	.word	0x52defd9a
 801b174:	3fadde2d 	.word	0x3fadde2d
 801b178:	af749a6d 	.word	0xaf749a6d
 801b17c:	3fb3b0f2 	.word	0x3fb3b0f2
 801b180:	fe231671 	.word	0xfe231671
 801b184:	3fbc71c6 	.word	0x3fbc71c6
 801b188:	9998ebc4 	.word	0x9998ebc4
 801b18c:	3fc99999 	.word	0x3fc99999
 801b190:	54442d18 	.word	0x54442d18
 801b194:	3ff921fb 	.word	0x3ff921fb
 801b198:	440fffff 	.word	0x440fffff
 801b19c:	7ff00000 	.word	0x7ff00000
 801b1a0:	3fdbffff 	.word	0x3fdbffff
 801b1a4:	3ff00000 	.word	0x3ff00000
 801b1a8:	3ff2ffff 	.word	0x3ff2ffff
 801b1ac:	40038000 	.word	0x40038000
 801b1b0:	3ff80000 	.word	0x3ff80000
 801b1b4:	bff00000 	.word	0xbff00000
 801b1b8:	0801ba08 	.word	0x0801ba08
 801b1bc:	0801b9e8 	.word	0x0801b9e8

0801b1c0 <fabs>:
 801b1c0:	ec51 0b10 	vmov	r0, r1, d0
 801b1c4:	ee10 2a10 	vmov	r2, s0
 801b1c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b1cc:	ec43 2b10 	vmov	d0, r2, r3
 801b1d0:	4770      	bx	lr

0801b1d2 <finite>:
 801b1d2:	b082      	sub	sp, #8
 801b1d4:	ed8d 0b00 	vstr	d0, [sp]
 801b1d8:	9801      	ldr	r0, [sp, #4]
 801b1da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801b1de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b1e2:	0fc0      	lsrs	r0, r0, #31
 801b1e4:	b002      	add	sp, #8
 801b1e6:	4770      	bx	lr

0801b1e8 <nan>:
 801b1e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b1f0 <nan+0x8>
 801b1ec:	4770      	bx	lr
 801b1ee:	bf00      	nop
 801b1f0:	00000000 	.word	0x00000000
 801b1f4:	7ff80000 	.word	0x7ff80000

0801b1f8 <fabsf>:
 801b1f8:	ee10 3a10 	vmov	r3, s0
 801b1fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b200:	ee00 3a10 	vmov	s0, r3
 801b204:	4770      	bx	lr
	...

0801b208 <floorf>:
 801b208:	ee10 3a10 	vmov	r3, s0
 801b20c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b210:	3a7f      	subs	r2, #127	; 0x7f
 801b212:	2a16      	cmp	r2, #22
 801b214:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b218:	dc2a      	bgt.n	801b270 <floorf+0x68>
 801b21a:	2a00      	cmp	r2, #0
 801b21c:	da11      	bge.n	801b242 <floorf+0x3a>
 801b21e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b280 <floorf+0x78>
 801b222:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b226:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b22e:	dd05      	ble.n	801b23c <floorf+0x34>
 801b230:	2b00      	cmp	r3, #0
 801b232:	da23      	bge.n	801b27c <floorf+0x74>
 801b234:	4a13      	ldr	r2, [pc, #76]	; (801b284 <floorf+0x7c>)
 801b236:	2900      	cmp	r1, #0
 801b238:	bf18      	it	ne
 801b23a:	4613      	movne	r3, r2
 801b23c:	ee00 3a10 	vmov	s0, r3
 801b240:	4770      	bx	lr
 801b242:	4911      	ldr	r1, [pc, #68]	; (801b288 <floorf+0x80>)
 801b244:	4111      	asrs	r1, r2
 801b246:	420b      	tst	r3, r1
 801b248:	d0fa      	beq.n	801b240 <floorf+0x38>
 801b24a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b280 <floorf+0x78>
 801b24e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b252:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b25a:	ddef      	ble.n	801b23c <floorf+0x34>
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	bfbe      	ittt	lt
 801b260:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801b264:	fa40 f202 	asrlt.w	r2, r0, r2
 801b268:	189b      	addlt	r3, r3, r2
 801b26a:	ea23 0301 	bic.w	r3, r3, r1
 801b26e:	e7e5      	b.n	801b23c <floorf+0x34>
 801b270:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b274:	d3e4      	bcc.n	801b240 <floorf+0x38>
 801b276:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b27a:	4770      	bx	lr
 801b27c:	2300      	movs	r3, #0
 801b27e:	e7dd      	b.n	801b23c <floorf+0x34>
 801b280:	7149f2ca 	.word	0x7149f2ca
 801b284:	bf800000 	.word	0xbf800000
 801b288:	007fffff 	.word	0x007fffff

0801b28c <nanf>:
 801b28c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b294 <nanf+0x8>
 801b290:	4770      	bx	lr
 801b292:	bf00      	nop
 801b294:	7fc00000 	.word	0x7fc00000

0801b298 <scalbnf>:
 801b298:	ee10 3a10 	vmov	r3, s0
 801b29c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b2a0:	d025      	beq.n	801b2ee <scalbnf+0x56>
 801b2a2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b2a6:	d302      	bcc.n	801b2ae <scalbnf+0x16>
 801b2a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b2ac:	4770      	bx	lr
 801b2ae:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b2b2:	d122      	bne.n	801b2fa <scalbnf+0x62>
 801b2b4:	4b2a      	ldr	r3, [pc, #168]	; (801b360 <scalbnf+0xc8>)
 801b2b6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801b364 <scalbnf+0xcc>
 801b2ba:	4298      	cmp	r0, r3
 801b2bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b2c0:	db16      	blt.n	801b2f0 <scalbnf+0x58>
 801b2c2:	ee10 3a10 	vmov	r3, s0
 801b2c6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b2ca:	3a19      	subs	r2, #25
 801b2cc:	4402      	add	r2, r0
 801b2ce:	2afe      	cmp	r2, #254	; 0xfe
 801b2d0:	dd15      	ble.n	801b2fe <scalbnf+0x66>
 801b2d2:	ee10 3a10 	vmov	r3, s0
 801b2d6:	eddf 7a24 	vldr	s15, [pc, #144]	; 801b368 <scalbnf+0xd0>
 801b2da:	eddf 6a24 	vldr	s13, [pc, #144]	; 801b36c <scalbnf+0xd4>
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	eeb0 7a67 	vmov.f32	s14, s15
 801b2e4:	bfb8      	it	lt
 801b2e6:	eef0 7a66 	vmovlt.f32	s15, s13
 801b2ea:	ee27 0a27 	vmul.f32	s0, s14, s15
 801b2ee:	4770      	bx	lr
 801b2f0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b370 <scalbnf+0xd8>
 801b2f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b2f8:	4770      	bx	lr
 801b2fa:	0dd2      	lsrs	r2, r2, #23
 801b2fc:	e7e6      	b.n	801b2cc <scalbnf+0x34>
 801b2fe:	2a00      	cmp	r2, #0
 801b300:	dd06      	ble.n	801b310 <scalbnf+0x78>
 801b302:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b306:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b30a:	ee00 3a10 	vmov	s0, r3
 801b30e:	4770      	bx	lr
 801b310:	f112 0f16 	cmn.w	r2, #22
 801b314:	da1a      	bge.n	801b34c <scalbnf+0xb4>
 801b316:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b31a:	4298      	cmp	r0, r3
 801b31c:	ee10 3a10 	vmov	r3, s0
 801b320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b324:	dd0a      	ble.n	801b33c <scalbnf+0xa4>
 801b326:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801b368 <scalbnf+0xd0>
 801b32a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801b36c <scalbnf+0xd4>
 801b32e:	eef0 7a40 	vmov.f32	s15, s0
 801b332:	2b00      	cmp	r3, #0
 801b334:	bf18      	it	ne
 801b336:	eeb0 0a47 	vmovne.f32	s0, s14
 801b33a:	e7db      	b.n	801b2f4 <scalbnf+0x5c>
 801b33c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801b370 <scalbnf+0xd8>
 801b340:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801b374 <scalbnf+0xdc>
 801b344:	eef0 7a40 	vmov.f32	s15, s0
 801b348:	2b00      	cmp	r3, #0
 801b34a:	e7f3      	b.n	801b334 <scalbnf+0x9c>
 801b34c:	3219      	adds	r2, #25
 801b34e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b352:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b356:	eddf 7a08 	vldr	s15, [pc, #32]	; 801b378 <scalbnf+0xe0>
 801b35a:	ee07 3a10 	vmov	s14, r3
 801b35e:	e7c4      	b.n	801b2ea <scalbnf+0x52>
 801b360:	ffff3cb0 	.word	0xffff3cb0
 801b364:	4c000000 	.word	0x4c000000
 801b368:	7149f2ca 	.word	0x7149f2ca
 801b36c:	f149f2ca 	.word	0xf149f2ca
 801b370:	0da24260 	.word	0x0da24260
 801b374:	8da24260 	.word	0x8da24260
 801b378:	33000000 	.word	0x33000000

0801b37c <_init>:
 801b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b37e:	bf00      	nop
 801b380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b382:	bc08      	pop	{r3}
 801b384:	469e      	mov	lr, r3
 801b386:	4770      	bx	lr

0801b388 <_fini>:
 801b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b38a:	bf00      	nop
 801b38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b38e:	bc08      	pop	{r3}
 801b390:	469e      	mov	lr, r3
 801b392:	4770      	bx	lr
