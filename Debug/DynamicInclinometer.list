
DynamicInclinometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0801dcc8  0801dcc8  0002dcc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e3b0  0801e3b0  000313c4  2**0
                  CONTENTS
  4 .ARM          00000008  0801e3b0  0801e3b0  0002e3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e3b8  0801e3b8  000313c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e3b8  0801e3b8  0002e3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e3bc  0801e3bc  0002e3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013c4  20000000  0801e3c0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001758  200013c8  0801f784  000313c8  2**3
                  ALLOC
 10 ._user_heap_stack 00008200  20002b20  0801f784  00032b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000313c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004304d  00000000  00000000  000313f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c32  00000000  00000000  00074441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036e0  00000000  00000000  0007a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003470  00000000  00000000  0007d758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dde9  00000000  00000000  00080bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000328d4  00000000  00000000  000ae9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011121d  00000000  00000000  000e1285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a3  00000000  00000000  001f24a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f8b8  00000000  00000000  001f2548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200013c8 	.word	0x200013c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801dcac 	.word	0x0801dcac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200013cc 	.word	0x200013cc
 80001cc:	0801dcac 	.word	0x0801dcac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_frsub>:
 8000c78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	e002      	b.n	8000c84 <__addsf3>
 8000c7e:	bf00      	nop

08000c80 <__aeabi_fsub>:
 8000c80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c84 <__addsf3>:
 8000c84:	0042      	lsls	r2, r0, #1
 8000c86:	bf1f      	itttt	ne
 8000c88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c8c:	ea92 0f03 	teqne	r2, r3
 8000c90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c98:	d06a      	beq.n	8000d70 <__addsf3+0xec>
 8000c9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ca2:	bfc1      	itttt	gt
 8000ca4:	18d2      	addgt	r2, r2, r3
 8000ca6:	4041      	eorgt	r1, r0
 8000ca8:	4048      	eorgt	r0, r1
 8000caa:	4041      	eorgt	r1, r0
 8000cac:	bfb8      	it	lt
 8000cae:	425b      	neglt	r3, r3
 8000cb0:	2b19      	cmp	r3, #25
 8000cb2:	bf88      	it	hi
 8000cb4:	4770      	bxhi	lr
 8000cb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cc2:	bf18      	it	ne
 8000cc4:	4240      	negne	r0, r0
 8000cc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4249      	negne	r1, r1
 8000cd6:	ea92 0f03 	teq	r2, r3
 8000cda:	d03f      	beq.n	8000d5c <__addsf3+0xd8>
 8000cdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ce0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ce4:	eb10 000c 	adds.w	r0, r0, ip
 8000ce8:	f1c3 0320 	rsb	r3, r3, #32
 8000cec:	fa01 f103 	lsl.w	r1, r1, r3
 8000cf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__addsf3+0x78>
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d00:	d313      	bcc.n	8000d2a <__addsf3+0xa6>
 8000d02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d06:	d306      	bcc.n	8000d16 <__addsf3+0x92>
 8000d08:	0840      	lsrs	r0, r0, #1
 8000d0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d0e:	f102 0201 	add.w	r2, r2, #1
 8000d12:	2afe      	cmp	r2, #254	; 0xfe
 8000d14:	d251      	bcs.n	8000dba <__addsf3+0x136>
 8000d16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d1e:	bf08      	it	eq
 8000d20:	f020 0001 	biceq.w	r0, r0, #1
 8000d24:	ea40 0003 	orr.w	r0, r0, r3
 8000d28:	4770      	bx	lr
 8000d2a:	0049      	lsls	r1, r1, #1
 8000d2c:	eb40 0000 	adc.w	r0, r0, r0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	bf28      	it	cs
 8000d34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d38:	d2ed      	bcs.n	8000d16 <__addsf3+0x92>
 8000d3a:	fab0 fc80 	clz	ip, r0
 8000d3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d42:	ebb2 020c 	subs.w	r2, r2, ip
 8000d46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d4a:	bfaa      	itet	ge
 8000d4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d50:	4252      	neglt	r2, r2
 8000d52:	4318      	orrge	r0, r3
 8000d54:	bfbc      	itt	lt
 8000d56:	40d0      	lsrlt	r0, r2
 8000d58:	4318      	orrlt	r0, r3
 8000d5a:	4770      	bx	lr
 8000d5c:	f092 0f00 	teq	r2, #0
 8000d60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d64:	bf06      	itte	eq
 8000d66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d6a:	3201      	addeq	r2, #1
 8000d6c:	3b01      	subne	r3, #1
 8000d6e:	e7b5      	b.n	8000cdc <__addsf3+0x58>
 8000d70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d78:	bf18      	it	ne
 8000d7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d7e:	d021      	beq.n	8000dc4 <__addsf3+0x140>
 8000d80:	ea92 0f03 	teq	r2, r3
 8000d84:	d004      	beq.n	8000d90 <__addsf3+0x10c>
 8000d86:	f092 0f00 	teq	r2, #0
 8000d8a:	bf08      	it	eq
 8000d8c:	4608      	moveq	r0, r1
 8000d8e:	4770      	bx	lr
 8000d90:	ea90 0f01 	teq	r0, r1
 8000d94:	bf1c      	itt	ne
 8000d96:	2000      	movne	r0, #0
 8000d98:	4770      	bxne	lr
 8000d9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d9e:	d104      	bne.n	8000daa <__addsf3+0x126>
 8000da0:	0040      	lsls	r0, r0, #1
 8000da2:	bf28      	it	cs
 8000da4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dae:	bf3c      	itt	cc
 8000db0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000db4:	4770      	bxcc	lr
 8000db6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	4770      	bx	lr
 8000dc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dc8:	bf16      	itet	ne
 8000dca:	4608      	movne	r0, r1
 8000dcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dd0:	4601      	movne	r1, r0
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	bf06      	itte	eq
 8000dd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dda:	ea90 0f01 	teqeq	r0, r1
 8000dde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_ui2f>:
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e004      	b.n	8000df4 <__aeabi_i2f+0x8>
 8000dea:	bf00      	nop

08000dec <__aeabi_i2f>:
 8000dec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000df0:	bf48      	it	mi
 8000df2:	4240      	negmi	r0, r0
 8000df4:	ea5f 0c00 	movs.w	ip, r0
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e00:	4601      	mov	r1, r0
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	e01c      	b.n	8000e42 <__aeabi_l2f+0x2a>

08000e08 <__aeabi_ul2f>:
 8000e08:	ea50 0201 	orrs.w	r2, r0, r1
 8000e0c:	bf08      	it	eq
 8000e0e:	4770      	bxeq	lr
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e00a      	b.n	8000e2c <__aeabi_l2f+0x14>
 8000e16:	bf00      	nop

08000e18 <__aeabi_l2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__aeabi_l2f+0x14>
 8000e26:	4240      	negs	r0, r0
 8000e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2c:	ea5f 0c01 	movs.w	ip, r1
 8000e30:	bf02      	ittt	eq
 8000e32:	4684      	moveq	ip, r0
 8000e34:	4601      	moveq	r1, r0
 8000e36:	2000      	moveq	r0, #0
 8000e38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e3c:	bf08      	it	eq
 8000e3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e46:	fabc f28c 	clz	r2, ip
 8000e4a:	3a08      	subs	r2, #8
 8000e4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e50:	db10      	blt.n	8000e74 <__aeabi_l2f+0x5c>
 8000e52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e56:	4463      	add	r3, ip
 8000e58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	f020 0001 	biceq.w	r0, r0, #1
 8000e72:	4770      	bx	lr
 8000e74:	f102 0220 	add.w	r2, r2, #32
 8000e78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e84:	fa21 f202 	lsr.w	r2, r1, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_ldivmod>:
 8000e94:	b97b      	cbnz	r3, 8000eb6 <__aeabi_ldivmod+0x22>
 8000e96:	b972      	cbnz	r2, 8000eb6 <__aeabi_ldivmod+0x22>
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	bfbe      	ittt	lt
 8000e9c:	2000      	movlt	r0, #0
 8000e9e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ea2:	e006      	blt.n	8000eb2 <__aeabi_ldivmod+0x1e>
 8000ea4:	bf08      	it	eq
 8000ea6:	2800      	cmpeq	r0, #0
 8000ea8:	bf1c      	itt	ne
 8000eaa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eae:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb2:	f000 b9bf 	b.w	8001234 <__aeabi_idiv0>
 8000eb6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eba:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ebe:	2900      	cmp	r1, #0
 8000ec0:	db09      	blt.n	8000ed6 <__aeabi_ldivmod+0x42>
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db1a      	blt.n	8000efc <__aeabi_ldivmod+0x68>
 8000ec6:	f000 f84d 	bl	8000f64 <__udivmoddi4>
 8000eca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed2:	b004      	add	sp, #16
 8000ed4:	4770      	bx	lr
 8000ed6:	4240      	negs	r0, r0
 8000ed8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db1b      	blt.n	8000f18 <__aeabi_ldivmod+0x84>
 8000ee0:	f000 f840 	bl	8000f64 <__udivmoddi4>
 8000ee4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eec:	b004      	add	sp, #16
 8000eee:	4240      	negs	r0, r0
 8000ef0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef4:	4252      	negs	r2, r2
 8000ef6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000efa:	4770      	bx	lr
 8000efc:	4252      	negs	r2, r2
 8000efe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f02:	f000 f82f 	bl	8000f64 <__udivmoddi4>
 8000f06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f0e:	b004      	add	sp, #16
 8000f10:	4240      	negs	r0, r0
 8000f12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f16:	4770      	bx	lr
 8000f18:	4252      	negs	r2, r2
 8000f1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f1e:	f000 f821 	bl	8000f64 <__udivmoddi4>
 8000f22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2a:	b004      	add	sp, #16
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f32:	4770      	bx	lr

08000f34 <__aeabi_uldivmod>:
 8000f34:	b953      	cbnz	r3, 8000f4c <__aeabi_uldivmod+0x18>
 8000f36:	b94a      	cbnz	r2, 8000f4c <__aeabi_uldivmod+0x18>
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	bf08      	it	eq
 8000f3c:	2800      	cmpeq	r0, #0
 8000f3e:	bf1c      	itt	ne
 8000f40:	f04f 31ff 	movne.w	r1, #4294967295
 8000f44:	f04f 30ff 	movne.w	r0, #4294967295
 8000f48:	f000 b974 	b.w	8001234 <__aeabi_idiv0>
 8000f4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f54:	f000 f806 	bl	8000f64 <__udivmoddi4>
 8000f58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f60:	b004      	add	sp, #16
 8000f62:	4770      	bx	lr

08000f64 <__udivmoddi4>:
 8000f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f68:	9d08      	ldr	r5, [sp, #32]
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	468e      	mov	lr, r1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d14d      	bne.n	800100e <__udivmoddi4+0xaa>
 8000f72:	428a      	cmp	r2, r1
 8000f74:	4694      	mov	ip, r2
 8000f76:	d969      	bls.n	800104c <__udivmoddi4+0xe8>
 8000f78:	fab2 f282 	clz	r2, r2
 8000f7c:	b152      	cbz	r2, 8000f94 <__udivmoddi4+0x30>
 8000f7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000f82:	f1c2 0120 	rsb	r1, r2, #32
 8000f86:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000f92:	4094      	lsls	r4, r2
 8000f94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f98:	0c21      	lsrs	r1, r4, #16
 8000f9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000f9e:	fa1f f78c 	uxth.w	r7, ip
 8000fa2:	fb08 e316 	mls	r3, r8, r6, lr
 8000fa6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000faa:	fb06 f107 	mul.w	r1, r6, r7
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d90a      	bls.n	8000fc8 <__udivmoddi4+0x64>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000fba:	f080 811f 	bcs.w	80011fc <__udivmoddi4+0x298>
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	f240 811c 	bls.w	80011fc <__udivmoddi4+0x298>
 8000fc4:	3e02      	subs	r6, #2
 8000fc6:	4463      	add	r3, ip
 8000fc8:	1a5b      	subs	r3, r3, r1
 8000fca:	b2a4      	uxth	r4, r4
 8000fcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000fd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd8:	fb00 f707 	mul.w	r7, r0, r7
 8000fdc:	42a7      	cmp	r7, r4
 8000fde:	d90a      	bls.n	8000ff6 <__udivmoddi4+0x92>
 8000fe0:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fe8:	f080 810a 	bcs.w	8001200 <__udivmoddi4+0x29c>
 8000fec:	42a7      	cmp	r7, r4
 8000fee:	f240 8107 	bls.w	8001200 <__udivmoddi4+0x29c>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ffa:	1be4      	subs	r4, r4, r7
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	b11d      	cbz	r5, 8001008 <__udivmoddi4+0xa4>
 8001000:	40d4      	lsrs	r4, r2
 8001002:	2300      	movs	r3, #0
 8001004:	e9c5 4300 	strd	r4, r3, [r5]
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	428b      	cmp	r3, r1
 8001010:	d909      	bls.n	8001026 <__udivmoddi4+0xc2>
 8001012:	2d00      	cmp	r5, #0
 8001014:	f000 80ef 	beq.w	80011f6 <__udivmoddi4+0x292>
 8001018:	2600      	movs	r6, #0
 800101a:	e9c5 0100 	strd	r0, r1, [r5]
 800101e:	4630      	mov	r0, r6
 8001020:	4631      	mov	r1, r6
 8001022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001026:	fab3 f683 	clz	r6, r3
 800102a:	2e00      	cmp	r6, #0
 800102c:	d14a      	bne.n	80010c4 <__udivmoddi4+0x160>
 800102e:	428b      	cmp	r3, r1
 8001030:	d302      	bcc.n	8001038 <__udivmoddi4+0xd4>
 8001032:	4282      	cmp	r2, r0
 8001034:	f200 80f9 	bhi.w	800122a <__udivmoddi4+0x2c6>
 8001038:	1a84      	subs	r4, r0, r2
 800103a:	eb61 0303 	sbc.w	r3, r1, r3
 800103e:	2001      	movs	r0, #1
 8001040:	469e      	mov	lr, r3
 8001042:	2d00      	cmp	r5, #0
 8001044:	d0e0      	beq.n	8001008 <__udivmoddi4+0xa4>
 8001046:	e9c5 4e00 	strd	r4, lr, [r5]
 800104a:	e7dd      	b.n	8001008 <__udivmoddi4+0xa4>
 800104c:	b902      	cbnz	r2, 8001050 <__udivmoddi4+0xec>
 800104e:	deff      	udf	#255	; 0xff
 8001050:	fab2 f282 	clz	r2, r2
 8001054:	2a00      	cmp	r2, #0
 8001056:	f040 8092 	bne.w	800117e <__udivmoddi4+0x21a>
 800105a:	eba1 010c 	sub.w	r1, r1, ip
 800105e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001062:	fa1f fe8c 	uxth.w	lr, ip
 8001066:	2601      	movs	r6, #1
 8001068:	0c20      	lsrs	r0, r4, #16
 800106a:	fbb1 f3f7 	udiv	r3, r1, r7
 800106e:	fb07 1113 	mls	r1, r7, r3, r1
 8001072:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001076:	fb0e f003 	mul.w	r0, lr, r3
 800107a:	4288      	cmp	r0, r1
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x12c>
 800107e:	eb1c 0101 	adds.w	r1, ip, r1
 8001082:	f103 38ff 	add.w	r8, r3, #4294967295
 8001086:	d202      	bcs.n	800108e <__udivmoddi4+0x12a>
 8001088:	4288      	cmp	r0, r1
 800108a:	f200 80cb 	bhi.w	8001224 <__udivmoddi4+0x2c0>
 800108e:	4643      	mov	r3, r8
 8001090:	1a09      	subs	r1, r1, r0
 8001092:	b2a4      	uxth	r4, r4
 8001094:	fbb1 f0f7 	udiv	r0, r1, r7
 8001098:	fb07 1110 	mls	r1, r7, r0, r1
 800109c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010a0:	fb0e fe00 	mul.w	lr, lr, r0
 80010a4:	45a6      	cmp	lr, r4
 80010a6:	d908      	bls.n	80010ba <__udivmoddi4+0x156>
 80010a8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80010b0:	d202      	bcs.n	80010b8 <__udivmoddi4+0x154>
 80010b2:	45a6      	cmp	lr, r4
 80010b4:	f200 80bb 	bhi.w	800122e <__udivmoddi4+0x2ca>
 80010b8:	4608      	mov	r0, r1
 80010ba:	eba4 040e 	sub.w	r4, r4, lr
 80010be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010c2:	e79c      	b.n	8000ffe <__udivmoddi4+0x9a>
 80010c4:	f1c6 0720 	rsb	r7, r6, #32
 80010c8:	40b3      	lsls	r3, r6
 80010ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80010ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80010d2:	fa20 f407 	lsr.w	r4, r0, r7
 80010d6:	fa01 f306 	lsl.w	r3, r1, r6
 80010da:	431c      	orrs	r4, r3
 80010dc:	40f9      	lsrs	r1, r7
 80010de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010e2:	fa00 f306 	lsl.w	r3, r0, r6
 80010e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80010ea:	0c20      	lsrs	r0, r4, #16
 80010ec:	fa1f fe8c 	uxth.w	lr, ip
 80010f0:	fb09 1118 	mls	r1, r9, r8, r1
 80010f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f8:	fb08 f00e 	mul.w	r0, r8, lr
 80010fc:	4288      	cmp	r0, r1
 80010fe:	fa02 f206 	lsl.w	r2, r2, r6
 8001102:	d90b      	bls.n	800111c <__udivmoddi4+0x1b8>
 8001104:	eb1c 0101 	adds.w	r1, ip, r1
 8001108:	f108 3aff 	add.w	sl, r8, #4294967295
 800110c:	f080 8088 	bcs.w	8001220 <__udivmoddi4+0x2bc>
 8001110:	4288      	cmp	r0, r1
 8001112:	f240 8085 	bls.w	8001220 <__udivmoddi4+0x2bc>
 8001116:	f1a8 0802 	sub.w	r8, r8, #2
 800111a:	4461      	add	r1, ip
 800111c:	1a09      	subs	r1, r1, r0
 800111e:	b2a4      	uxth	r4, r4
 8001120:	fbb1 f0f9 	udiv	r0, r1, r9
 8001124:	fb09 1110 	mls	r1, r9, r0, r1
 8001128:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800112c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001130:	458e      	cmp	lr, r1
 8001132:	d908      	bls.n	8001146 <__udivmoddi4+0x1e2>
 8001134:	eb1c 0101 	adds.w	r1, ip, r1
 8001138:	f100 34ff 	add.w	r4, r0, #4294967295
 800113c:	d26c      	bcs.n	8001218 <__udivmoddi4+0x2b4>
 800113e:	458e      	cmp	lr, r1
 8001140:	d96a      	bls.n	8001218 <__udivmoddi4+0x2b4>
 8001142:	3802      	subs	r0, #2
 8001144:	4461      	add	r1, ip
 8001146:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800114a:	fba0 9402 	umull	r9, r4, r0, r2
 800114e:	eba1 010e 	sub.w	r1, r1, lr
 8001152:	42a1      	cmp	r1, r4
 8001154:	46c8      	mov	r8, r9
 8001156:	46a6      	mov	lr, r4
 8001158:	d356      	bcc.n	8001208 <__udivmoddi4+0x2a4>
 800115a:	d053      	beq.n	8001204 <__udivmoddi4+0x2a0>
 800115c:	b15d      	cbz	r5, 8001176 <__udivmoddi4+0x212>
 800115e:	ebb3 0208 	subs.w	r2, r3, r8
 8001162:	eb61 010e 	sbc.w	r1, r1, lr
 8001166:	fa01 f707 	lsl.w	r7, r1, r7
 800116a:	fa22 f306 	lsr.w	r3, r2, r6
 800116e:	40f1      	lsrs	r1, r6
 8001170:	431f      	orrs	r7, r3
 8001172:	e9c5 7100 	strd	r7, r1, [r5]
 8001176:	2600      	movs	r6, #0
 8001178:	4631      	mov	r1, r6
 800117a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117e:	f1c2 0320 	rsb	r3, r2, #32
 8001182:	40d8      	lsrs	r0, r3
 8001184:	fa0c fc02 	lsl.w	ip, ip, r2
 8001188:	fa21 f303 	lsr.w	r3, r1, r3
 800118c:	4091      	lsls	r1, r2
 800118e:	4301      	orrs	r1, r0
 8001190:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001194:	fa1f fe8c 	uxth.w	lr, ip
 8001198:	fbb3 f0f7 	udiv	r0, r3, r7
 800119c:	fb07 3610 	mls	r6, r7, r0, r3
 80011a0:	0c0b      	lsrs	r3, r1, #16
 80011a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011a6:	fb00 f60e 	mul.w	r6, r0, lr
 80011aa:	429e      	cmp	r6, r3
 80011ac:	fa04 f402 	lsl.w	r4, r4, r2
 80011b0:	d908      	bls.n	80011c4 <__udivmoddi4+0x260>
 80011b2:	eb1c 0303 	adds.w	r3, ip, r3
 80011b6:	f100 38ff 	add.w	r8, r0, #4294967295
 80011ba:	d22f      	bcs.n	800121c <__udivmoddi4+0x2b8>
 80011bc:	429e      	cmp	r6, r3
 80011be:	d92d      	bls.n	800121c <__udivmoddi4+0x2b8>
 80011c0:	3802      	subs	r0, #2
 80011c2:	4463      	add	r3, ip
 80011c4:	1b9b      	subs	r3, r3, r6
 80011c6:	b289      	uxth	r1, r1
 80011c8:	fbb3 f6f7 	udiv	r6, r3, r7
 80011cc:	fb07 3316 	mls	r3, r7, r6, r3
 80011d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011d4:	fb06 f30e 	mul.w	r3, r6, lr
 80011d8:	428b      	cmp	r3, r1
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0x28a>
 80011dc:	eb1c 0101 	adds.w	r1, ip, r1
 80011e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80011e4:	d216      	bcs.n	8001214 <__udivmoddi4+0x2b0>
 80011e6:	428b      	cmp	r3, r1
 80011e8:	d914      	bls.n	8001214 <__udivmoddi4+0x2b0>
 80011ea:	3e02      	subs	r6, #2
 80011ec:	4461      	add	r1, ip
 80011ee:	1ac9      	subs	r1, r1, r3
 80011f0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80011f4:	e738      	b.n	8001068 <__udivmoddi4+0x104>
 80011f6:	462e      	mov	r6, r5
 80011f8:	4628      	mov	r0, r5
 80011fa:	e705      	b.n	8001008 <__udivmoddi4+0xa4>
 80011fc:	4606      	mov	r6, r0
 80011fe:	e6e3      	b.n	8000fc8 <__udivmoddi4+0x64>
 8001200:	4618      	mov	r0, r3
 8001202:	e6f8      	b.n	8000ff6 <__udivmoddi4+0x92>
 8001204:	454b      	cmp	r3, r9
 8001206:	d2a9      	bcs.n	800115c <__udivmoddi4+0x1f8>
 8001208:	ebb9 0802 	subs.w	r8, r9, r2
 800120c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001210:	3801      	subs	r0, #1
 8001212:	e7a3      	b.n	800115c <__udivmoddi4+0x1f8>
 8001214:	4646      	mov	r6, r8
 8001216:	e7ea      	b.n	80011ee <__udivmoddi4+0x28a>
 8001218:	4620      	mov	r0, r4
 800121a:	e794      	b.n	8001146 <__udivmoddi4+0x1e2>
 800121c:	4640      	mov	r0, r8
 800121e:	e7d1      	b.n	80011c4 <__udivmoddi4+0x260>
 8001220:	46d0      	mov	r8, sl
 8001222:	e77b      	b.n	800111c <__udivmoddi4+0x1b8>
 8001224:	3b02      	subs	r3, #2
 8001226:	4461      	add	r1, ip
 8001228:	e732      	b.n	8001090 <__udivmoddi4+0x12c>
 800122a:	4630      	mov	r0, r6
 800122c:	e709      	b.n	8001042 <__udivmoddi4+0xde>
 800122e:	4464      	add	r4, ip
 8001230:	3802      	subs	r0, #2
 8001232:	e742      	b.n	80010ba <__udivmoddi4+0x156>

08001234 <__aeabi_idiv0>:
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop

08001238 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e030      	b.n	80012b2 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	7b1a      	ldrb	r2, [r3, #12]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	695a      	ldr	r2, [r3, #20]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HTS221_RegisterBusIO+0x84>)
 800128c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HTS221_RegisterBusIO+0x88>)
 8001292:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4798      	blx	r3
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	e002      	b.n	80012b2 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	080018ef 	.word	0x080018ef
 80012c0:	08001951 	.word	0x08001951

080012c4 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d108      	bne.n	80012e8 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 faa4 	bl	8001824 <HTS221_Initialize>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	e004      	b.n	80012f2 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001308:	2b01      	cmp	r3, #1
 800130a:	d111      	bne.n	8001330 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f878 	bl	8001402 <HTS221_HUM_Disable>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	e00d      	b.n	800133a <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f95f 	bl	80015e2 <HTS221_TEMP_Disable>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e004      	b.n	800133a <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	331c      	adds	r3, #28
 8001350:	6839      	ldr	r1, [r7, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fc28 	bl	8001ba8 <hts221_device_id_get>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e000      	b.n	8001366 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2201      	movs	r2, #1
 800137e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HTS221_GetCapabilities+0x44>)
 8001396:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HTS221_GetCapabilities+0x44>)
 800139c:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	41480000 	.word	0x41480000

080013b8 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e015      	b.n	80013fa <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10b      	bne.n	80013f0 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	331c      	adds	r3, #28
 80013dc:	2101      	movs	r1, #1
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fbf3 	bl	8001bca <hts221_power_on_set>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e004      	b.n	80013fa <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	e015      	b.n	8001444 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10b      	bne.n	800143a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	331c      	adds	r3, #28
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fbce 	bl	8001bca <hts221_power_on_set>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	e004      	b.n	8001444 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f96f 	bl	800173c <HTS221_GetOutputDataRate>
 800145e:	4603      	mov	r3, r0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001474:	ed97 0a00 	vldr	s0, [r7]
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f9a3 	bl	80017c4 <HTS221_SetOutputDataRate>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	331c      	adds	r3, #28
 8001496:	f107 020c 	add.w	r2, r7, #12
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fc58 	bl	8001d52 <hts221_hum_adc_point_0_get>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	e06b      	b.n	8001586 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f103 021c 	add.w	r2, r3, #28
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	3304      	adds	r3, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4610      	mov	r0, r2
 80014be:	f000 fbaa 	bl	8001c16 <hts221_hum_rh_point_0_get>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
 80014cc:	e05b      	b.n	8001586 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 021c 	add.w	r2, r3, #28
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	3308      	adds	r3, #8
 80014da:	4619      	mov	r1, r3
 80014dc:	4610      	mov	r0, r2
 80014de:	f000 fc5c 	bl	8001d9a <hts221_hum_adc_point_1_get>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	e04b      	b.n	8001586 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f103 021c 	add.w	r2, r3, #28
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	330c      	adds	r3, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f000 fba8 	bl	8001c52 <hts221_hum_rh_point_1_get>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	e03b      	b.n	8001586 <HTS221_HUM_GetHumidity+0xfe>
 800150e:	2300      	movs	r3, #0
 8001510:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	331c      	adds	r3, #28
 8001516:	f107 021c 	add.w	r2, r7, #28
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fafd 	bl	8001b1c <hts221_humidity_raw_get>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	e02b      	b.n	8001586 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800152e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f99a 	bl	800187c <Linear_Interpolation>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	d503      	bpl.n	800156a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001590 <HTS221_HUM_GetHumidity+0x108>
 8001574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd02      	ble.n	8001584 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HTS221_HUM_GetHumidity+0x10c>)
 8001582:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	42c80000 	.word	0x42c80000
 8001594:	42c80000 	.word	0x42c80000

08001598 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e015      	b.n	80015da <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10b      	bne.n	80015d0 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	331c      	adds	r3, #28
 80015bc:	2101      	movs	r1, #1
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fb03 	bl	8001bca <hts221_power_on_set>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e004      	b.n	80015da <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e015      	b.n	8001624 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10b      	bne.n	800161a <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	331c      	adds	r3, #28
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fade 	bl	8001bca <hts221_power_on_set>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	e004      	b.n	8001624 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f87f 	bl	800173c <HTS221_GetOutputDataRate>
 800163e:	4603      	mov	r3, r0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001654:	ed97 0a00 	vldr	s0, [r7]
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f8b3 	bl	80017c4 <HTS221_SetOutputDataRate>
 800165e:	4603      	mov	r3, r0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	331c      	adds	r3, #28
 8001676:	f107 020c 	add.w	r2, r7, #12
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fbb0 	bl	8001de2 <hts221_temp_adc_point_0_get>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	e052      	b.n	8001734 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f103 021c 	add.w	r2, r3, #28
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	3304      	adds	r3, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f000 faf6 	bl	8001c8e <hts221_temp_deg_point_0_get>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ac:	e042      	b.n	8001734 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f103 021c 	add.w	r2, r3, #28
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	3308      	adds	r3, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	4610      	mov	r0, r2
 80016be:	f000 fbb4 	bl	8001e2a <hts221_temp_adc_point_1_get>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	e032      	b.n	8001734 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 021c 	add.w	r2, r3, #28
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	330c      	adds	r3, #12
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f000 fb07 	bl	8001cf0 <hts221_temp_deg_point_1_get>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	e022      	b.n	8001734 <HTS221_TEMP_GetTemperature+0xcc>
 80016ee:	2300      	movs	r3, #0
 80016f0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	331c      	adds	r3, #28
 80016f6:	f107 021c 	add.w	r2, r7, #28
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fa30 	bl	8001b62 <hts221_temperature_raw_get>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	e012      	b.n	8001734 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800170e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	eeb0 0a67 	vmov.f32	s0, s15
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f8aa 	bl	800187c <Linear_Interpolation>
 8001728:	eef0 7a40 	vmov.f32	s15, s0
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	331c      	adds	r3, #28
 800174e:	f107 020b 	add.w	r2, r7, #11
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f983 	bl	8001a60 <hts221_data_rate_get>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	e025      	b.n	80017b2 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d81d      	bhi.n	80017a8 <HTS221_GetOutputDataRate+0x6c>
 800176c:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <HTS221_GetOutputDataRate+0x38>)
 800176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001772:	bf00      	nop
 8001774:	08001785 	.word	0x08001785
 8001778:	0800178f 	.word	0x0800178f
 800177c:	08001799 	.word	0x08001799
 8001780:	080017a1 	.word	0x080017a1
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
      break;
 800178c:	e010      	b.n	80017b0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001794:	601a      	str	r2, [r3, #0]
      break;
 8001796:	e00b      	b.n	80017b0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HTS221_GetOutputDataRate+0x80>)
 800179c:	601a      	str	r2, [r3, #0]
      break;
 800179e:	e007      	b.n	80017b0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HTS221_GetOutputDataRate+0x84>)
 80017a4:	601a      	str	r2, [r3, #0]
      break;
 80017a6:	e003      	b.n	80017b0 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	60fb      	str	r3, [r7, #12]
      break;
 80017ae:	bf00      	nop
  }

  return ret;
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40e00000 	.word	0x40e00000
 80017c0:	41480000 	.word	0x41480000

080017c4 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80017d0:	edd7 7a00 	vldr	s15, [r7]
 80017d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	d801      	bhi.n	80017e6 <HTS221_SetOutputDataRate+0x22>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00b      	b.n	80017fe <HTS221_SetOutputDataRate+0x3a>
 80017e6:	edd7 7a00 	vldr	s15, [r7]
 80017ea:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	d801      	bhi.n	80017fc <HTS221_SetOutputDataRate+0x38>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e000      	b.n	80017fe <HTS221_SetOutputDataRate+0x3a>
 80017fc:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80017fe:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	331c      	adds	r3, #28
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f902 	bl	8001a12 <hts221_data_rate_set>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
 8001818:	e000      	b.n	800181c <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	331c      	adds	r3, #28
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f9c9 	bl	8001bca <hts221_power_on_set>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e017      	b.n	8001874 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	331c      	adds	r3, #28
 8001848:	2101      	movs	r1, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f940 	bl	8001ad0 <hts221_block_data_update_set>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e00b      	b.n	8001874 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800185c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffaf 	bl	80017c4 <HTS221_SetOutputDataRate>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	e000      	b.n	8001874 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	ed93 7a03 	vldr	s14, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	edd3 7a01 	vldr	s15, [r3, #4]
 8001894:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001898:	edd7 7a00 	vldr	s15, [r7]
 800189c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	ed93 6a00 	vldr	s12, [r3]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80018bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018dc:	eef0 7a66 	vmov.f32	s15, s13
}
 80018e0:	eeb0 0a67 	vmov.f32	s0, s15
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80018ee:	b590      	push	{r4, r7, lr}
 80018f0:	b087      	sub	sp, #28
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	461a      	mov	r2, r3
 80018fa:	460b      	mov	r3, r1
 80018fc:	72fb      	strb	r3, [r7, #11]
 80018fe:	4613      	mov	r3, r2
 8001900:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10e      	bne.n	800192c <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	695c      	ldr	r4, [r3, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	7b1b      	ldrb	r3, [r3, #12]
 8001916:	b298      	uxth	r0, r3
 8001918:	7afb      	ldrb	r3, [r7, #11]
 800191a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800191e:	b2db      	uxtb	r3, r3
 8001920:	b299      	uxth	r1, r3
 8001922:	893b      	ldrh	r3, [r7, #8]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	47a0      	blx	r4
 8001928:	4603      	mov	r3, r0
 800192a:	e00d      	b.n	8001948 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	695c      	ldr	r4, [r3, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	7b1b      	ldrb	r3, [r3, #12]
 8001934:	b298      	uxth	r0, r3
 8001936:	7afb      	ldrb	r3, [r7, #11]
 8001938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193c:	b2db      	uxtb	r3, r3
 800193e:	b299      	uxth	r1, r3
 8001940:	893b      	ldrh	r3, [r7, #8]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	47a0      	blx	r4
 8001946:	4603      	mov	r3, r0
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}

08001950 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	461a      	mov	r2, r3
 800195c:	460b      	mov	r3, r1
 800195e:	72fb      	strb	r3, [r7, #11]
 8001960:	4613      	mov	r3, r2
 8001962:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10e      	bne.n	800198e <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	691c      	ldr	r4, [r3, #16]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	7b1b      	ldrb	r3, [r3, #12]
 8001978:	b298      	uxth	r0, r3
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001980:	b2db      	uxtb	r3, r3
 8001982:	b299      	uxth	r1, r3
 8001984:	893b      	ldrh	r3, [r7, #8]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	47a0      	blx	r4
 800198a:	4603      	mov	r3, r0
 800198c:	e00d      	b.n	80019aa <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	691c      	ldr	r4, [r3, #16]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	7b1b      	ldrb	r3, [r3, #12]
 8001996:	b298      	uxth	r0, r3
 8001998:	7afb      	ldrb	r3, [r7, #11]
 800199a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	b299      	uxth	r1, r3
 80019a2:	893b      	ldrh	r3, [r7, #8]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	47a0      	blx	r4
 80019a8:	4603      	mov	r3, r0
  }
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd90      	pop	{r4, r7, pc}

080019b2 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 80019b2:	b590      	push	{r4, r7, lr}
 80019b4:	b087      	sub	sp, #28
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	461a      	mov	r2, r3
 80019be:	460b      	mov	r3, r1
 80019c0:	72fb      	strb	r3, [r7, #11]
 80019c2:	4613      	mov	r3, r2
 80019c4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685c      	ldr	r4, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6898      	ldr	r0, [r3, #8]
 80019ce:	893b      	ldrh	r3, [r7, #8]
 80019d0:	7af9      	ldrb	r1, [r7, #11]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	47a0      	blx	r4
 80019d6:	6178      	str	r0, [r7, #20]

  return ret;
 80019d8:	697b      	ldr	r3, [r7, #20]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}

080019e2 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80019e2:	b590      	push	{r4, r7, lr}
 80019e4:	b087      	sub	sp, #28
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	461a      	mov	r2, r3
 80019ee:	460b      	mov	r3, r1
 80019f0:	72fb      	strb	r3, [r7, #11]
 80019f2:	4613      	mov	r3, r2
 80019f4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681c      	ldr	r4, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6898      	ldr	r0, [r3, #8]
 80019fe:	893b      	ldrh	r3, [r7, #8]
 8001a00:	7af9      	ldrb	r1, [r7, #11]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	47a0      	blx	r4
 8001a06:	6178      	str	r0, [r7, #20]

  return ret;
 8001a08:	697b      	ldr	r3, [r7, #20]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}

08001a12 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a1e:	f107 0208 	add.w	r2, r7, #8
 8001a22:	2301      	movs	r3, #1
 8001a24:	2120      	movs	r1, #32
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffc3 	bl	80019b2 <hts221_read_reg>
 8001a2c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10f      	bne.n	8001a54 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	7a3b      	ldrb	r3, [r7, #8]
 8001a3e:	f362 0301 	bfi	r3, r2, #0, #2
 8001a42:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a44:	f107 0208 	add.w	r2, r7, #8
 8001a48:	2301      	movs	r3, #1
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ffc8 	bl	80019e2 <hts221_write_reg>
 8001a52:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a54:	68fb      	ldr	r3, [r7, #12]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a6a:	f107 0208 	add.w	r2, r7, #8
 8001a6e:	2301      	movs	r3, #1
 8001a70:	2120      	movs	r1, #32
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff9d 	bl	80019b2 <hts221_read_reg>
 8001a78:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8001a7a:	7a3b      	ldrb	r3, [r7, #8]
 8001a7c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d81a      	bhi.n	8001abc <hts221_data_rate_get+0x5c>
 8001a86:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <hts221_data_rate_get+0x2c>)
 8001a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001aa5 	.word	0x08001aa5
 8001a94:	08001aad 	.word	0x08001aad
 8001a98:	08001ab5 	.word	0x08001ab5
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
      break;
 8001aa2:	e00f      	b.n	8001ac4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
      break;
 8001aaa:	e00b      	b.n	8001ac4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
      break;
 8001ab2:	e007      	b.n	8001ac4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	701a      	strb	r2, [r3, #0]
      break;
 8001aba:	e003      	b.n	8001ac4 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	701a      	strb	r2, [r3, #0]
      break;
 8001ac2:	bf00      	nop
  }

  return ret;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop

08001ad0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001adc:	f107 0208 	add.w	r2, r7, #8
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff64 	bl	80019b2 <hts221_read_reg>
 8001aea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	7a3b      	ldrb	r3, [r7, #8]
 8001afc:	f362 0382 	bfi	r3, r2, #2, #1
 8001b00:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001b02:	f107 0208 	add.w	r2, r7, #8
 8001b06:	2301      	movs	r3, #1
 8001b08:	2120      	movs	r1, #32
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff69 	bl	80019e2 <hts221_write_reg>
 8001b10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001b26:	f107 0208 	add.w	r2, r7, #8
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	2128      	movs	r1, #40	; 0x28
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff3f 	bl	80019b2 <hts221_read_reg>
 8001b34:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001b36:	7a7b      	ldrb	r3, [r7, #9]
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	7a3b      	ldrb	r3, [r7, #8]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b58:	68fb      	ldr	r3, [r7, #12]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001b6c:	f107 0208 	add.w	r2, r7, #8
 8001b70:	2302      	movs	r3, #2
 8001b72:	212a      	movs	r1, #42	; 0x2a
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff1c 	bl	80019b2 <hts221_read_reg>
 8001b7a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001b7c:	7a7b      	ldrb	r3, [r7, #9]
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	7a3b      	ldrb	r3, [r7, #8]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fefa 	bl	80019b2 <hts221_read_reg>
 8001bbe:	60f8      	str	r0, [r7, #12]

  return ret;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001bd6:	f107 0208 	add.w	r2, r7, #8
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2120      	movs	r1, #32
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fee7 	bl	80019b2 <hts221_read_reg>
 8001be4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10f      	bne.n	8001c0c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	7a3b      	ldrb	r3, [r7, #8]
 8001bf6:	f362 13c7 	bfi	r3, r2, #7, #1
 8001bfa:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001bfc:	f107 0208 	add.w	r2, r7, #8
 8001c00:	2301      	movs	r3, #1
 8001c02:	2120      	movs	r1, #32
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff feec 	bl	80019e2 <hts221_write_reg>
 8001c0a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001c20:	f107 020b 	add.w	r2, r7, #11
 8001c24:	2301      	movs	r3, #1
 8001c26:	2130      	movs	r1, #48	; 0x30
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fec2 	bl	80019b2 <hts221_read_reg>
 8001c2e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c3a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001c48:	68fb      	ldr	r3, [r7, #12]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001c5c:	f107 020b 	add.w	r2, r7, #11
 8001c60:	2301      	movs	r3, #1
 8001c62:	2131      	movs	r1, #49	; 0x31
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fea4 	bl	80019b2 <hts221_read_reg>
 8001c6a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c76:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001c84:	68fb      	ldr	r3, [r7, #12]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001c98:	f107 020f 	add.w	r2, r7, #15
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2132      	movs	r1, #50	; 0x32
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fe86 	bl	80019b2 <hts221_read_reg>
 8001ca6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d11b      	bne.n	8001ce6 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001cae:	f107 0210 	add.w	r2, r7, #16
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	2135      	movs	r1, #53	; 0x35
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fe7b 	bl	80019b2 <hts221_read_reg>
 8001cbc:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001cbe:	7c3b      	ldrb	r3, [r7, #16]
 8001cc0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	4413      	add	r3, r2
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001ce6:	697b      	ldr	r3, [r7, #20]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001cfa:	f107 020f 	add.w	r2, r7, #15
 8001cfe:	2301      	movs	r3, #1
 8001d00:	2133      	movs	r1, #51	; 0x33
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fe55 	bl	80019b2 <hts221_read_reg>
 8001d08:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11b      	bne.n	8001d48 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001d10:	f107 0210 	add.w	r2, r7, #16
 8001d14:	2301      	movs	r3, #1
 8001d16:	2135      	movs	r1, #53	; 0x35
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fe4a 	bl	80019b2 <hts221_read_reg>
 8001d1e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8001d20:	7c3b      	ldrb	r3, [r7, #16]
 8001d22:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	4413      	add	r3, r2
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001d48:	697b      	ldr	r3, [r7, #20]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001d5c:	f107 0208 	add.w	r2, r7, #8
 8001d60:	2302      	movs	r3, #2
 8001d62:	2136      	movs	r1, #54	; 0x36
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fe24 	bl	80019b2 <hts221_read_reg>
 8001d6a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001d6c:	7a7b      	ldrb	r3, [r7, #9]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	7a3b      	ldrb	r3, [r7, #8]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001d7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001d90:	68fb      	ldr	r3, [r7, #12]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001da4:	f107 0208 	add.w	r2, r7, #8
 8001da8:	2302      	movs	r3, #2
 8001daa:	213a      	movs	r1, #58	; 0x3a
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fe00 	bl	80019b2 <hts221_read_reg>
 8001db2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001db4:	7a7b      	ldrb	r3, [r7, #9]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	7a3b      	ldrb	r3, [r7, #8]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001dc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001dec:	f107 0208 	add.w	r2, r7, #8
 8001df0:	2302      	movs	r3, #2
 8001df2:	213c      	movs	r1, #60	; 0x3c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fddc 	bl	80019b2 <hts221_read_reg>
 8001dfa:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001dfc:	7a7b      	ldrb	r3, [r7, #9]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	7a3b      	ldrb	r3, [r7, #8]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001e0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001e20:	68fb      	ldr	r3, [r7, #12]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001e34:	f107 0208 	add.w	r2, r7, #8
 8001e38:	2302      	movs	r3, #2
 8001e3a:	213e      	movs	r1, #62	; 0x3e
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fdb8 	bl	80019b2 <hts221_read_reg>
 8001e42:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001e44:	7a7b      	ldrb	r3, [r7, #9]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	7a3b      	ldrb	r3, [r7, #8]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001e56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001e68:	68fb      	ldr	r3, [r7, #12]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e04d      	b.n	8001f2c <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	7b1a      	ldrb	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <LIS2DW12_RegisterBusIO+0xc4>)
 8001ecc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <LIS2DW12_RegisterBusIO+0xc8>)
 8001ed2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e020      	b.n	8001f2c <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4798      	blx	r3
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e016      	b.n	8001f2c <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d112      	bne.n	8001f2c <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10d      	bne.n	8001f2c <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001f10:	2305      	movs	r3, #5
 8001f12:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	461a      	mov	r2, r3
 8001f18:	2121      	movs	r1, #33	; 0x21
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fd87 	bl	8002a2e <LIS2DW12_Write_Reg>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08002dc1 	.word	0x08002dc1
 8001f3c:	08002df7 	.word	0x08002df7

08001f40 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	331c      	adds	r3, #28
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 fa94 	bl	800347c <lis2dw12_auto_increment_set>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5e:	e04b      	b.n	8001ff8 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	331c      	adds	r3, #28
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f001 f9a8 	bl	80032bc <lis2dw12_block_data_update_set>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e03f      	b.n	8001ff8 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	331c      	adds	r3, #28
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 faa2 	bl	80034c8 <lis2dw12_fifo_mode_set>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e033      	b.n	8001ff8 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	331c      	adds	r3, #28
 8001f94:	2104      	movs	r1, #4
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 ff78 	bl	8002e8c <lis2dw12_power_mode_set>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e027      	b.n	8001ff8 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <LIS2DW12_Init+0xc0>)
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	331c      	adds	r3, #28
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 f869 	bl	800309c <lis2dw12_data_rate_set>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd4:	e010      	b.n	8001ff8 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	331c      	adds	r3, #28
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 f993 	bl	8003308 <lis2dw12_full_scale_set>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	e004      	b.n	8001ff8 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	42c80000 	.word	0x42c80000

08002004 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f888 	bl	8002122 <LIS2DW12_ACC_Disable>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
 800201c:	e010      	b.n	8002040 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	331c      	adds	r3, #28
 8002056:	6839      	ldr	r1, [r7, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f001 f9fe 	bl	800345a <lis2dw12_device_id_get>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	e000      	b.n	800206c <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2210      	movs	r2, #16
 80020a0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2200      	movs	r2, #0
 80020a6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <LIS2DW12_GetCapabilities+0x58>)
 80020b4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	44c80000 	.word	0x44c80000

080020d0 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e019      	b.n	800211a <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80020f8:	461a      	mov	r2, r3
 80020fa:	eeb0 0a67 	vmov.f32	s0, s15
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fcb0 	bl	8002a64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e004      	b.n	800211a <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e010      	b.n	800215a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	331c      	adds	r3, #28
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f000 ffac 	bl	800309c <lis2dw12_data_rate_set>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	e004      	b.n	800215a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	331c      	adds	r3, #28
 8002176:	f107 020b 	add.w	r2, r7, #11
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f001 f8e9 	bl	8003354 <lis2dw12_full_scale_get>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	e0a0      	b.n	80022d0 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	331c      	adds	r3, #28
 8002192:	f107 020a 	add.w	r2, r7, #10
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fec5 	bl	8002f28 <lis2dw12_power_mode_get>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	e092      	b.n	80022d0 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 80021aa:	7abb      	ldrb	r3, [r7, #10]
 80021ac:	2b1b      	cmp	r3, #27
 80021ae:	f200 8087 	bhi.w	80022c0 <LIS2DW12_ACC_GetSensitivity+0x15c>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <LIS2DW12_ACC_GetSensitivity+0x54>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	08002229 	.word	0x08002229
 80021bc:	08002275 	.word	0x08002275
 80021c0:	08002275 	.word	0x08002275
 80021c4:	08002275 	.word	0x08002275
 80021c8:	08002275 	.word	0x08002275
 80021cc:	080022c1 	.word	0x080022c1
 80021d0:	080022c1 	.word	0x080022c1
 80021d4:	080022c1 	.word	0x080022c1
 80021d8:	08002229 	.word	0x08002229
 80021dc:	08002275 	.word	0x08002275
 80021e0:	08002275 	.word	0x08002275
 80021e4:	08002275 	.word	0x08002275
 80021e8:	080022c1 	.word	0x080022c1
 80021ec:	080022c1 	.word	0x080022c1
 80021f0:	080022c1 	.word	0x080022c1
 80021f4:	080022c1 	.word	0x080022c1
 80021f8:	08002229 	.word	0x08002229
 80021fc:	08002275 	.word	0x08002275
 8002200:	08002275 	.word	0x08002275
 8002204:	08002275 	.word	0x08002275
 8002208:	08002275 	.word	0x08002275
 800220c:	080022c1 	.word	0x080022c1
 8002210:	080022c1 	.word	0x080022c1
 8002214:	080022c1 	.word	0x080022c1
 8002218:	08002229 	.word	0x08002229
 800221c:	08002275 	.word	0x08002275
 8002220:	08002275 	.word	0x08002275
 8002224:	08002275 	.word	0x08002275
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002228:	7afb      	ldrb	r3, [r7, #11]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d81a      	bhi.n	8002264 <LIS2DW12_ACC_GetSensitivity+0x100>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002245 	.word	0x08002245
 8002238:	0800224d 	.word	0x0800224d
 800223c:	08002255 	.word	0x08002255
 8002240:	0800225d 	.word	0x0800225d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002248:	601a      	str	r2, [r3, #0]
          break;
 800224a:	e012      	b.n	8002272 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002250:	601a      	str	r2, [r3, #0]
          break;
 8002252:	e00e      	b.n	8002272 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4a22      	ldr	r2, [pc, #136]	; (80022e0 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8002258:	601a      	str	r2, [r3, #0]
          break;
 800225a:	e00a      	b.n	8002272 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8002260:	601a      	str	r2, [r3, #0]
          break;
 8002262:	e006      	b.n	8002272 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002268:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	60fb      	str	r3, [r7, #12]
          break;
 8002270:	bf00      	nop
      }
      break;
 8002272:	e02c      	b.n	80022ce <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002274:	7afb      	ldrb	r3, [r7, #11]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d81a      	bhi.n	80022b0 <LIS2DW12_ACC_GetSensitivity+0x14c>
 800227a:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	08002291 	.word	0x08002291
 8002284:	08002299 	.word	0x08002299
 8002288:	080022a1 	.word	0x080022a1
 800228c:	080022a9 	.word	0x080022a9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4a16      	ldr	r2, [pc, #88]	; (80022ec <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002294:	601a      	str	r2, [r3, #0]
          break;
 8002296:	e012      	b.n	80022be <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 800229c:	601a      	str	r2, [r3, #0]
          break;
 800229e:	e00e      	b.n	80022be <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80022a4:	601a      	str	r2, [r3, #0]
          break;
 80022a6:	e00a      	b.n	80022be <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <LIS2DW12_ACC_GetSensitivity+0x178>)
 80022ac:	601a      	str	r2, [r3, #0]
          break;
 80022ae:	e006      	b.n	80022be <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80022b4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	60fb      	str	r3, [r7, #12]
          break;
 80022bc:	bf00      	nop
      }
      break;
 80022be:	e006      	b.n	80022ce <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80022c4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	60fb      	str	r3, [r7, #12]
      break;
 80022cc:	bf00      	nop
  }

  return ret;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	3f79db23 	.word	0x3f79db23
 80022dc:	3ff9db23 	.word	0x3ff9db23
 80022e0:	4079db23 	.word	0x4079db23
 80022e4:	40f9db23 	.word	0x40f9db23
 80022e8:	bf800000 	.word	0xbf800000
 80022ec:	3e79db23 	.word	0x3e79db23
 80022f0:	3ef9db23 	.word	0x3ef9db23

080022f4 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	331c      	adds	r3, #28
 8002306:	f107 020b 	add.w	r2, r7, #11
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f000 ff0b 	bl	8003128 <lis2dw12_data_rate_get>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	e1d4      	b.n	80026c8 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	331c      	adds	r3, #28
 8002322:	f107 020a 	add.w	r2, r7, #10
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fdfd 	bl	8002f28 <lis2dw12_power_mode_get>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	e1c6      	b.n	80026c8 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	2b32      	cmp	r3, #50	; 0x32
 800233e:	f200 81bb 	bhi.w	80026b8 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	08002415 	.word	0x08002415
 800234c:	0800241f 	.word	0x0800241f
 8002350:	080024bd 	.word	0x080024bd
 8002354:	080024c5 	.word	0x080024c5
 8002358:	080024cd 	.word	0x080024cd
 800235c:	080024d5 	.word	0x080024d5
 8002360:	080024dd 	.word	0x080024dd
 8002364:	080024e5 	.word	0x080024e5
 8002368:	08002581 	.word	0x08002581
 800236c:	0800261d 	.word	0x0800261d
 8002370:	080026b9 	.word	0x080026b9
 8002374:	080026b9 	.word	0x080026b9
 8002378:	080026b9 	.word	0x080026b9
 800237c:	080026b9 	.word	0x080026b9
 8002380:	080026b9 	.word	0x080026b9
 8002384:	080026b9 	.word	0x080026b9
 8002388:	080026b9 	.word	0x080026b9
 800238c:	080026b9 	.word	0x080026b9
 8002390:	08002415 	.word	0x08002415
 8002394:	080026b9 	.word	0x080026b9
 8002398:	080026b9 	.word	0x080026b9
 800239c:	080026b9 	.word	0x080026b9
 80023a0:	080026b9 	.word	0x080026b9
 80023a4:	080026b9 	.word	0x080026b9
 80023a8:	080026b9 	.word	0x080026b9
 80023ac:	080026b9 	.word	0x080026b9
 80023b0:	080026b9 	.word	0x080026b9
 80023b4:	080026b9 	.word	0x080026b9
 80023b8:	080026b9 	.word	0x080026b9
 80023bc:	080026b9 	.word	0x080026b9
 80023c0:	080026b9 	.word	0x080026b9
 80023c4:	080026b9 	.word	0x080026b9
 80023c8:	080026b9 	.word	0x080026b9
 80023cc:	080026b9 	.word	0x080026b9
 80023d0:	080026b9 	.word	0x080026b9
 80023d4:	080026b9 	.word	0x080026b9
 80023d8:	080026b9 	.word	0x080026b9
 80023dc:	080026b9 	.word	0x080026b9
 80023e0:	080026b9 	.word	0x080026b9
 80023e4:	080026b9 	.word	0x080026b9
 80023e8:	080026b9 	.word	0x080026b9
 80023ec:	080026b9 	.word	0x080026b9
 80023f0:	080026b9 	.word	0x080026b9
 80023f4:	080026b9 	.word	0x080026b9
 80023f8:	080026b9 	.word	0x080026b9
 80023fc:	080026b9 	.word	0x080026b9
 8002400:	080026b9 	.word	0x080026b9
 8002404:	080026b9 	.word	0x080026b9
 8002408:	080026b9 	.word	0x080026b9
 800240c:	080026b9 	.word	0x080026b9
 8002410:	08002415 	.word	0x08002415
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
      break;
 800241c:	e153      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800241e:	7abb      	ldrb	r3, [r7, #10]
 8002420:	2b1b      	cmp	r3, #27
 8002422:	d843      	bhi.n	80024ac <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8002424:	a201      	add	r2, pc, #4	; (adr r2, 800242c <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8002426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242a:	bf00      	nop
 800242c:	080024a5 	.word	0x080024a5
 8002430:	080024a5 	.word	0x080024a5
 8002434:	080024a5 	.word	0x080024a5
 8002438:	080024a5 	.word	0x080024a5
 800243c:	0800249d 	.word	0x0800249d
 8002440:	080024ad 	.word	0x080024ad
 8002444:	080024ad 	.word	0x080024ad
 8002448:	080024ad 	.word	0x080024ad
 800244c:	080024a5 	.word	0x080024a5
 8002450:	080024a5 	.word	0x080024a5
 8002454:	080024a5 	.word	0x080024a5
 8002458:	080024a5 	.word	0x080024a5
 800245c:	080024ad 	.word	0x080024ad
 8002460:	080024ad 	.word	0x080024ad
 8002464:	080024ad 	.word	0x080024ad
 8002468:	080024ad 	.word	0x080024ad
 800246c:	080024a5 	.word	0x080024a5
 8002470:	080024a5 	.word	0x080024a5
 8002474:	080024a5 	.word	0x080024a5
 8002478:	080024a5 	.word	0x080024a5
 800247c:	0800249d 	.word	0x0800249d
 8002480:	080024ad 	.word	0x080024ad
 8002484:	080024ad 	.word	0x080024ad
 8002488:	080024ad 	.word	0x080024ad
 800248c:	080024a5 	.word	0x080024a5
 8002490:	080024a5 	.word	0x080024a5
 8002494:	080024a5 	.word	0x080024a5
 8002498:	080024a5 	.word	0x080024a5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4a8c      	ldr	r2, [pc, #560]	; (80026d0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80024a0:	601a      	str	r2, [r3, #0]
          break;
 80024a2:	e00a      	b.n	80024ba <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4a8b      	ldr	r2, [pc, #556]	; (80026d4 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80024a8:	601a      	str	r2, [r3, #0]
          break;
 80024aa:	e006      	b.n	80024ba <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4a8a      	ldr	r2, [pc, #552]	; (80026d8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80024b0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	60fb      	str	r3, [r7, #12]
          break;
 80024b8:	bf00      	nop
      }
      break;
 80024ba:	e104      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4a84      	ldr	r2, [pc, #528]	; (80026d0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80024c0:	601a      	str	r2, [r3, #0]
      break;
 80024c2:	e100      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4a85      	ldr	r2, [pc, #532]	; (80026dc <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80024c8:	601a      	str	r2, [r3, #0]
      break;
 80024ca:	e0fc      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4a84      	ldr	r2, [pc, #528]	; (80026e0 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80024d0:	601a      	str	r2, [r3, #0]
      break;
 80024d2:	e0f8      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4a83      	ldr	r2, [pc, #524]	; (80026e4 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80024d8:	601a      	str	r2, [r3, #0]
      break;
 80024da:	e0f4      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4a82      	ldr	r2, [pc, #520]	; (80026e8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80024e0:	601a      	str	r2, [r3, #0]
      break;
 80024e2:	e0f0      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80024e4:	7abb      	ldrb	r3, [r7, #10]
 80024e6:	2b1b      	cmp	r3, #27
 80024e8:	d842      	bhi.n	8002570 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002569 	.word	0x08002569
 80024f4:	08002569 	.word	0x08002569
 80024f8:	08002569 	.word	0x08002569
 80024fc:	08002569 	.word	0x08002569
 8002500:	08002561 	.word	0x08002561
 8002504:	08002571 	.word	0x08002571
 8002508:	08002571 	.word	0x08002571
 800250c:	08002571 	.word	0x08002571
 8002510:	08002569 	.word	0x08002569
 8002514:	08002569 	.word	0x08002569
 8002518:	08002569 	.word	0x08002569
 800251c:	08002569 	.word	0x08002569
 8002520:	08002571 	.word	0x08002571
 8002524:	08002571 	.word	0x08002571
 8002528:	08002571 	.word	0x08002571
 800252c:	08002571 	.word	0x08002571
 8002530:	08002569 	.word	0x08002569
 8002534:	08002569 	.word	0x08002569
 8002538:	08002569 	.word	0x08002569
 800253c:	08002569 	.word	0x08002569
 8002540:	08002561 	.word	0x08002561
 8002544:	08002571 	.word	0x08002571
 8002548:	08002571 	.word	0x08002571
 800254c:	08002571 	.word	0x08002571
 8002550:	08002569 	.word	0x08002569
 8002554:	08002569 	.word	0x08002569
 8002558:	08002569 	.word	0x08002569
 800255c:	08002569 	.word	0x08002569
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4a62      	ldr	r2, [pc, #392]	; (80026ec <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8002564:	601a      	str	r2, [r3, #0]
          break;
 8002566:	e00a      	b.n	800257e <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4a5f      	ldr	r2, [pc, #380]	; (80026e8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800256c:	601a      	str	r2, [r3, #0]
          break;
 800256e:	e006      	b.n	800257e <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4a59      	ldr	r2, [pc, #356]	; (80026d8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002574:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	60fb      	str	r3, [r7, #12]
          break;
 800257c:	bf00      	nop
      }
      break;
 800257e:	e0a2      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002580:	7abb      	ldrb	r3, [r7, #10]
 8002582:	2b1b      	cmp	r3, #27
 8002584:	d842      	bhi.n	800260c <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	08002605 	.word	0x08002605
 8002590:	08002605 	.word	0x08002605
 8002594:	08002605 	.word	0x08002605
 8002598:	08002605 	.word	0x08002605
 800259c:	080025fd 	.word	0x080025fd
 80025a0:	0800260d 	.word	0x0800260d
 80025a4:	0800260d 	.word	0x0800260d
 80025a8:	0800260d 	.word	0x0800260d
 80025ac:	08002605 	.word	0x08002605
 80025b0:	08002605 	.word	0x08002605
 80025b4:	08002605 	.word	0x08002605
 80025b8:	08002605 	.word	0x08002605
 80025bc:	0800260d 	.word	0x0800260d
 80025c0:	0800260d 	.word	0x0800260d
 80025c4:	0800260d 	.word	0x0800260d
 80025c8:	0800260d 	.word	0x0800260d
 80025cc:	08002605 	.word	0x08002605
 80025d0:	08002605 	.word	0x08002605
 80025d4:	08002605 	.word	0x08002605
 80025d8:	08002605 	.word	0x08002605
 80025dc:	080025fd 	.word	0x080025fd
 80025e0:	0800260d 	.word	0x0800260d
 80025e4:	0800260d 	.word	0x0800260d
 80025e8:	0800260d 	.word	0x0800260d
 80025ec:	08002605 	.word	0x08002605
 80025f0:	08002605 	.word	0x08002605
 80025f4:	08002605 	.word	0x08002605
 80025f8:	08002605 	.word	0x08002605
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4a3c      	ldr	r2, [pc, #240]	; (80026f0 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002600:	601a      	str	r2, [r3, #0]
          break;
 8002602:	e00a      	b.n	800261a <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4a38      	ldr	r2, [pc, #224]	; (80026e8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002608:	601a      	str	r2, [r3, #0]
          break;
 800260a:	e006      	b.n	800261a <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002610:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	60fb      	str	r3, [r7, #12]
          break;
 8002618:	bf00      	nop
      }
      break;
 800261a:	e054      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 800261c:	7abb      	ldrb	r3, [r7, #10]
 800261e:	2b1b      	cmp	r3, #27
 8002620:	d842      	bhi.n	80026a8 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	080026a1 	.word	0x080026a1
 800262c:	080026a1 	.word	0x080026a1
 8002630:	080026a1 	.word	0x080026a1
 8002634:	080026a1 	.word	0x080026a1
 8002638:	08002699 	.word	0x08002699
 800263c:	080026a9 	.word	0x080026a9
 8002640:	080026a9 	.word	0x080026a9
 8002644:	080026a9 	.word	0x080026a9
 8002648:	080026a1 	.word	0x080026a1
 800264c:	080026a1 	.word	0x080026a1
 8002650:	080026a1 	.word	0x080026a1
 8002654:	080026a1 	.word	0x080026a1
 8002658:	080026a9 	.word	0x080026a9
 800265c:	080026a9 	.word	0x080026a9
 8002660:	080026a9 	.word	0x080026a9
 8002664:	080026a9 	.word	0x080026a9
 8002668:	080026a1 	.word	0x080026a1
 800266c:	080026a1 	.word	0x080026a1
 8002670:	080026a1 	.word	0x080026a1
 8002674:	080026a1 	.word	0x080026a1
 8002678:	08002699 	.word	0x08002699
 800267c:	080026a9 	.word	0x080026a9
 8002680:	080026a9 	.word	0x080026a9
 8002684:	080026a9 	.word	0x080026a9
 8002688:	080026a1 	.word	0x080026a1
 800268c:	080026a1 	.word	0x080026a1
 8002690:	080026a1 	.word	0x080026a1
 8002694:	080026a1 	.word	0x080026a1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 800269c:	601a      	str	r2, [r3, #0]
          break;
 800269e:	e00a      	b.n	80026b6 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80026a4:	601a      	str	r2, [r3, #0]
          break;
 80026a6:	e006      	b.n	80026b6 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80026ac:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	60fb      	str	r3, [r7, #12]
          break;
 80026b4:	bf00      	nop
      }
      break;
 80026b6:	e006      	b.n	80026c6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80026bc:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	60fb      	str	r3, [r7, #12]
      break;
 80026c4:	bf00      	nop
  }

  return ret;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	41480000 	.word	0x41480000
 80026d4:	3fcccccd 	.word	0x3fcccccd
 80026d8:	bf800000 	.word	0xbf800000
 80026dc:	41c80000 	.word	0x41c80000
 80026e0:	42480000 	.word	0x42480000
 80026e4:	42c80000 	.word	0x42c80000
 80026e8:	43480000 	.word	0x43480000
 80026ec:	43c80000 	.word	0x43c80000
 80026f0:	44480000 	.word	0x44480000
 80026f4:	44c80000 	.word	0x44c80000

080026f8 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002704:	2200      	movs	r2, #0
 8002706:	2100      	movs	r1, #0
 8002708:	ed97 0a00 	vldr	s0, [r7]
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f805 	bl	800271c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8002712:	4603      	mov	r3, r0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	ed87 0a02 	vstr	s0, [r7, #8]
 8002728:	460b      	mov	r3, r1
 800272a:	71fb      	strb	r3, [r7, #7]
 800272c:	4613      	mov	r3, r2
 800272e:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002736:	2b01      	cmp	r3, #1
 8002738:	d109      	bne.n	800274e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800273a:	79ba      	ldrb	r2, [r7, #6]
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4619      	mov	r1, r3
 8002740:	ed97 0a02 	vldr	s0, [r7, #8]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f98d 	bl	8002a64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800274a:	4603      	mov	r3, r0
 800274c:	e008      	b.n	8002760 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800274e:	79ba      	ldrb	r2, [r7, #6]
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	4619      	mov	r1, r3
 8002754:	ed97 0a02 	vldr	s0, [r7, #8]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fa9f 	bl	8002c9c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800275e:	4603      	mov	r3, r0
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	331c      	adds	r3, #28
 800277a:	f107 020b 	add.w	r2, r7, #11
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fde7 	bl	8003354 <lis2dw12_full_scale_get>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 800278c:	f04f 33ff 	mov.w	r3, #4294967295
 8002790:	e027      	b.n	80027e2 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8002792:	7afb      	ldrb	r3, [r7, #11]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d81b      	bhi.n	80027d0 <LIS2DW12_ACC_GetFullScale+0x68>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <LIS2DW12_ACC_GetFullScale+0x38>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027b9 	.word	0x080027b9
 80027a8:	080027c1 	.word	0x080027c1
 80027ac:	080027c9 	.word	0x080027c9
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2202      	movs	r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
      break;
 80027b6:	e013      	b.n	80027e0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2204      	movs	r2, #4
 80027bc:	601a      	str	r2, [r3, #0]
      break;
 80027be:	e00f      	b.n	80027e0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2208      	movs	r2, #8
 80027c4:	601a      	str	r2, [r3, #0]
      break;
 80027c6:	e00b      	b.n	80027e0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2210      	movs	r2, #16
 80027cc:	601a      	str	r2, [r3, #0]
      break;
 80027ce:	e007      	b.n	80027e0 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f04f 32ff 	mov.w	r2, #4294967295
 80027d6:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295
 80027dc:	60fb      	str	r3, [r7, #12]
      break;
 80027de:	bf00      	nop
  }

  return ret;
 80027e0:	68fb      	ldr	r3, [r7, #12]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop

080027ec <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	dd0b      	ble.n	8002814 <LIS2DW12_ACC_SetFullScale+0x28>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b04      	cmp	r3, #4
 8002800:	dd06      	ble.n	8002810 <LIS2DW12_ACC_SetFullScale+0x24>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b08      	cmp	r3, #8
 8002806:	dc01      	bgt.n	800280c <LIS2DW12_ACC_SetFullScale+0x20>
 8002808:	2302      	movs	r3, #2
 800280a:	e004      	b.n	8002816 <LIS2DW12_ACC_SetFullScale+0x2a>
 800280c:	2303      	movs	r3, #3
 800280e:	e002      	b.n	8002816 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002814:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8002816:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	331c      	adds	r3, #28
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fd71 	bl	8003308 <lis2dw12_full_scale_set>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	e000      	b.n	8002834 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	331c      	adds	r3, #28
 800284e:	f107 020b 	add.w	r2, r7, #11
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fb67 	bl	8002f28 <lis2dw12_power_mode_get>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8002860:	f04f 33ff 	mov.w	r3, #4294967295
 8002864:	e089      	b.n	800297a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	331c      	adds	r3, #28
 800286a:	f107 020c 	add.w	r2, r7, #12
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fda7 	bl	80033c4 <lis2dw12_acceleration_raw_get>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	e07b      	b.n	800297a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8002882:	7afb      	ldrb	r3, [r7, #11]
 8002884:	2b1b      	cmp	r3, #27
 8002886:	d873      	bhi.n	8002970 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002888:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 800288a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288e:	bf00      	nop
 8002890:	08002901 	.word	0x08002901
 8002894:	08002939 	.word	0x08002939
 8002898:	08002939 	.word	0x08002939
 800289c:	08002939 	.word	0x08002939
 80028a0:	08002939 	.word	0x08002939
 80028a4:	08002971 	.word	0x08002971
 80028a8:	08002971 	.word	0x08002971
 80028ac:	08002971 	.word	0x08002971
 80028b0:	08002901 	.word	0x08002901
 80028b4:	08002939 	.word	0x08002939
 80028b8:	08002939 	.word	0x08002939
 80028bc:	08002939 	.word	0x08002939
 80028c0:	08002971 	.word	0x08002971
 80028c4:	08002971 	.word	0x08002971
 80028c8:	08002971 	.word	0x08002971
 80028cc:	08002971 	.word	0x08002971
 80028d0:	08002901 	.word	0x08002901
 80028d4:	08002939 	.word	0x08002939
 80028d8:	08002939 	.word	0x08002939
 80028dc:	08002939 	.word	0x08002939
 80028e0:	08002939 	.word	0x08002939
 80028e4:	08002971 	.word	0x08002971
 80028e8:	08002971 	.word	0x08002971
 80028ec:	08002971 	.word	0x08002971
 80028f0:	08002901 	.word	0x08002901
 80028f4:	08002939 	.word	0x08002939
 80028f8:	08002939 	.word	0x08002939
 80028fc:	08002939 	.word	0x08002939
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002900:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	da00      	bge.n	800290a <LIS2DW12_ACC_GetAxesRaw+0xce>
 8002908:	330f      	adds	r3, #15
 800290a:	111b      	asrs	r3, r3, #4
 800290c:	b21a      	sxth	r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8002912:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002916:	2b00      	cmp	r3, #0
 8002918:	da00      	bge.n	800291c <LIS2DW12_ACC_GetAxesRaw+0xe0>
 800291a:	330f      	adds	r3, #15
 800291c:	111b      	asrs	r3, r3, #4
 800291e:	b21a      	sxth	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8002924:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	da00      	bge.n	800292e <LIS2DW12_ACC_GetAxesRaw+0xf2>
 800292c:	330f      	adds	r3, #15
 800292e:	111b      	asrs	r3, r3, #4
 8002930:	b21a      	sxth	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	809a      	strh	r2, [r3, #4]
      break;
 8002936:	e01f      	b.n	8002978 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002938:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	da00      	bge.n	8002942 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8002940:	3303      	adds	r3, #3
 8002942:	109b      	asrs	r3, r3, #2
 8002944:	b21a      	sxth	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 800294a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800294e:	2b00      	cmp	r3, #0
 8002950:	da00      	bge.n	8002954 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8002952:	3303      	adds	r3, #3
 8002954:	109b      	asrs	r3, r3, #2
 8002956:	b21a      	sxth	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 800295c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	da00      	bge.n	8002966 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8002964:	3303      	adds	r3, #3
 8002966:	109b      	asrs	r3, r3, #2
 8002968:	b21a      	sxth	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	809a      	strh	r2, [r3, #4]
      break;
 800296e:	e003      	b.n	8002978 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
 8002974:	617b      	str	r3, [r7, #20]
      break;
 8002976:	bf00      	nop
  }

  return ret;
 8002978:	697b      	ldr	r3, [r7, #20]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop

08002984 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ff4e 	bl	800283c <LIS2DW12_ACC_GetAxesRaw>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	e03c      	b.n	8002a26 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4619      	mov	r1, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fbd6 	bl	8002164 <LIS2DW12_ACC_GetSensitivity>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	e030      	b.n	8002a26 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80029c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029dc:	ee17 2a90 	vmov	r2, s15
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80029e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029fc:	ee17 2a90 	vmov	r2, s15
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002a04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a1c:	ee17 2a90 	vmov	r2, s15
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	70fb      	strb	r3, [r7, #3]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 001c 	add.w	r0, r3, #28
 8002a44:	1cba      	adds	r2, r7, #2
 8002a46:	78f9      	ldrb	r1, [r7, #3]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f000 fa07 	bl	8002e5c <lis2dw12_write_reg>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
 8002a58:	e000      	b.n	8002a5c <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a70:	460b      	mov	r3, r1
 8002a72:	71fb      	strb	r3, [r7, #7]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d80b      	bhi.n	8002a98 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002a80:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002ac5 	.word	0x08002ac5
 8002a8c:	08002af1 	.word	0x08002af1
 8002a90:	08002b1d 	.word	0x08002b1d
 8002a94:	08002b49 	.word	0x08002b49
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002a98:	79bb      	ldrb	r3, [r7, #6]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d002      	beq.n	8002aa4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8002aa2:	e002      	b.n	8002aaa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002aa4:	2314      	movs	r3, #20
 8002aa6:	75fb      	strb	r3, [r7, #23]
          break;
 8002aa8:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002aaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	d400      	bmi.n	8002abe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002abc:	e05a      	b.n	8002b74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002abe:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002ac0:	60bb      	str	r3, [r7, #8]
      break;
 8002ac2:	e057      	b.n	8002b74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8002ac4:	79bb      	ldrb	r3, [r7, #6]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d002      	beq.n	8002ad0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002aca:	2303      	movs	r3, #3
 8002acc:	75fb      	strb	r3, [r7, #23]
          break;
 8002ace:	e002      	b.n	8002ad6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002ad0:	2313      	movs	r3, #19
 8002ad2:	75fb      	strb	r3, [r7, #23]
          break;
 8002ad4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002ad6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ada:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002c80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	dc00      	bgt.n	8002aea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002ae8:	e044      	b.n	8002b74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002aea:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002aec:	60bb      	str	r3, [r7, #8]
      break;
 8002aee:	e041      	b.n	8002b74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002af0:	79bb      	ldrb	r3, [r7, #6]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d002      	beq.n	8002afc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8002af6:	2302      	movs	r3, #2
 8002af8:	75fb      	strb	r3, [r7, #23]
          break;
 8002afa:	e002      	b.n	8002b02 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002afc:	2312      	movs	r3, #18
 8002afe:	75fb      	strb	r3, [r7, #23]
          break;
 8002b00:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b06:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002c80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	dc00      	bgt.n	8002b16 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002b14:	e02e      	b.n	8002b74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002b16:	4b5b      	ldr	r3, [pc, #364]	; (8002c84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002b18:	60bb      	str	r3, [r7, #8]
      break;
 8002b1a:	e02b      	b.n	8002b74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002b1c:	79bb      	ldrb	r3, [r7, #6]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d002      	beq.n	8002b28 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
          break;
 8002b26:	e002      	b.n	8002b2e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002b28:	2311      	movs	r3, #17
 8002b2a:	75fb      	strb	r3, [r7, #23]
          break;
 8002b2c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b32:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002c80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	dc00      	bgt.n	8002b42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002b40:	e018      	b.n	8002b74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002b44:	60bb      	str	r3, [r7, #8]
      break;
 8002b46:	e015      	b.n	8002b74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002b48:	79bb      	ldrb	r3, [r7, #6]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d002      	beq.n	8002b54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]
          break;
 8002b52:	e002      	b.n	8002b5a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002b54:	2310      	movs	r3, #16
 8002b56:	75fb      	strb	r3, [r7, #23]
          break;
 8002b58:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002b5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b5e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002c80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6a:	dc00      	bgt.n	8002b6e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002b6c:	e001      	b.n	8002b72 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002b6e:	4b45      	ldr	r3, [pc, #276]	; (8002c84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002b70:	60bb      	str	r3, [r7, #8]
      break;
 8002b72:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002b74:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b78:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002c88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	d801      	bhi.n	8002b8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e04d      	b.n	8002c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002b8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b8e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	d801      	bhi.n	8002ba0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e042      	b.n	8002c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ba0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ba4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb0:	d801      	bhi.n	8002bb6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e037      	b.n	8002c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002bb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bba:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002c8c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc6:	d801      	bhi.n	8002bcc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	e02c      	b.n	8002c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002bcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002c90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	d801      	bhi.n	8002be2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002bde:	2305      	movs	r3, #5
 8002be0:	e021      	b.n	8002c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002be2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002be6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002c80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	d801      	bhi.n	8002bf8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002bf4:	2306      	movs	r3, #6
 8002bf6:	e016      	b.n	8002c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002bf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bfc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002c94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c08:	d801      	bhi.n	8002c0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	e00b      	b.n	8002c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c12:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c98 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	d801      	bhi.n	8002c24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002c20:	2308      	movs	r3, #8
 8002c22:	e000      	b.n	8002c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c24:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002c26:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	331c      	adds	r3, #28
 8002c2c:	7dba      	ldrb	r2, [r7, #22]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fa33 	bl	800309c <lis2dw12_data_rate_set>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	e018      	b.n	8002c74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	331c      	adds	r3, #28
 8002c46:	7dfa      	ldrb	r2, [r7, #23]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f91e 	bl	8002e8c <lis2dw12_power_mode_set>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	e00b      	b.n	8002c74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	79fa      	ldrb	r2, [r7, #7]
 8002c66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	79ba      	ldrb	r2, [r7, #6]
 8002c6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	41480000 	.word	0x41480000
 8002c80:	43480000 	.word	0x43480000
 8002c84:	43480000 	.word	0x43480000
 8002c88:	3fcccccd 	.word	0x3fcccccd
 8002c8c:	42480000 	.word	0x42480000
 8002c90:	42c80000 	.word	0x42c80000
 8002c94:	43c80000 	.word	0x43c80000
 8002c98:	44480000 	.word	0x44480000

08002c9c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	79fa      	ldrb	r2, [r7, #7]
 8002cb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	79ba      	ldrb	r2, [r7, #6]
 8002cbc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002cc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cc4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002d84 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd0:	d801      	bhi.n	8002cd6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002cd4:	e04d      	b.n	8002d72 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8002cd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cda:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	d801      	bhi.n	8002cec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002cea:	e042      	b.n	8002d72 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002cec:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cf0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfc:	d801      	bhi.n	8002d02 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002d00:	e037      	b.n	8002d72 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8002d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d06:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002d94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	d801      	bhi.n	8002d18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002d14:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002d16:	e02c      	b.n	8002d72 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8002d18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d1c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002d9c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	d801      	bhi.n	8002d2e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002d2c:	e021      	b.n	8002d72 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8002d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d32:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002da4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3e:	d801      	bhi.n	8002d44 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002d42:	e016      	b.n	8002d72 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8002d44:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d48:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002dac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d54:	d801      	bhi.n	8002d5a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002d58:	e00b      	b.n	8002d72 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d5e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002db4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6a:	d801      	bhi.n	8002d70 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002d6e:	e000      	b.n	8002d72 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	3fcccccd 	.word	0x3fcccccd
 8002d88:	3fcccccd 	.word	0x3fcccccd
 8002d8c:	41480000 	.word	0x41480000
 8002d90:	41c80000 	.word	0x41c80000
 8002d94:	42480000 	.word	0x42480000
 8002d98:	42480000 	.word	0x42480000
 8002d9c:	42c80000 	.word	0x42c80000
 8002da0:	42c80000 	.word	0x42c80000
 8002da4:	43480000 	.word	0x43480000
 8002da8:	43480000 	.word	0x43480000
 8002dac:	43c80000 	.word	0x43c80000
 8002db0:	43c80000 	.word	0x43c80000
 8002db4:	44480000 	.word	0x44480000
 8002db8:	44480000 	.word	0x44480000
 8002dbc:	44c80000 	.word	0x44c80000

08002dc0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	460b      	mov	r3, r1
 8002dce:	72fb      	strb	r3, [r7, #11]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	695c      	ldr	r4, [r3, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	7b1b      	ldrb	r3, [r3, #12]
 8002de0:	b298      	uxth	r0, r3
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	b299      	uxth	r1, r3
 8002de6:	893b      	ldrh	r3, [r7, #8]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	47a0      	blx	r4
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}

08002df6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002df6:	b590      	push	{r4, r7, lr}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	461a      	mov	r2, r3
 8002e02:	460b      	mov	r3, r1
 8002e04:	72fb      	strb	r3, [r7, #11]
 8002e06:	4613      	mov	r3, r2
 8002e08:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	691c      	ldr	r4, [r3, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	7b1b      	ldrb	r3, [r3, #12]
 8002e16:	b298      	uxth	r0, r3
 8002e18:	7afb      	ldrb	r3, [r7, #11]
 8002e1a:	b299      	uxth	r1, r3
 8002e1c:	893b      	ldrh	r3, [r7, #8]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	47a0      	blx	r4
 8002e22:	4603      	mov	r3, r0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd90      	pop	{r4, r7, pc}

08002e2c <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	461a      	mov	r2, r3
 8002e38:	460b      	mov	r3, r1
 8002e3a:	72fb      	strb	r3, [r7, #11]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685c      	ldr	r4, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6898      	ldr	r0, [r3, #8]
 8002e48:	893b      	ldrh	r3, [r7, #8]
 8002e4a:	7af9      	ldrb	r1, [r7, #11]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	47a0      	blx	r4
 8002e50:	6178      	str	r0, [r7, #20]

  return ret;
 8002e52:	697b      	ldr	r3, [r7, #20]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	461a      	mov	r2, r3
 8002e68:	460b      	mov	r3, r1
 8002e6a:	72fb      	strb	r3, [r7, #11]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681c      	ldr	r4, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6898      	ldr	r0, [r3, #8]
 8002e78:	893b      	ldrh	r3, [r7, #8]
 8002e7a:	7af9      	ldrb	r1, [r7, #11]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	47a0      	blx	r4
 8002e80:	6178      	str	r0, [r7, #20]

  return ret;
 8002e82:	697b      	ldr	r3, [r7, #20]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd90      	pop	{r4, r7, pc}

08002e8c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002e98:	f107 0210 	add.w	r2, r7, #16
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	2120      	movs	r1, #32
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ffc3 	bl	8002e2c <lis2dw12_read_reg>
 8002ea6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	7c3b      	ldrb	r3, [r7, #16]
 8002eba:	f362 0383 	bfi	r3, r2, #2, #2
 8002ebe:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	7c3b      	ldrb	r3, [r7, #16]
 8002eca:	f362 0301 	bfi	r3, r2, #0, #2
 8002ece:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002ed0:	f107 0210 	add.w	r2, r7, #16
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	2120      	movs	r1, #32
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ffbf 	bl	8002e5c <lis2dw12_write_reg>
 8002ede:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002ee6:	f107 020c 	add.w	r2, r7, #12
 8002eea:	2301      	movs	r3, #1
 8002eec:	2125      	movs	r1, #37	; 0x25
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ff9c 	bl	8002e2c <lis2dw12_read_reg>
 8002ef4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d110      	bne.n	8002f1e <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	7b3b      	ldrb	r3, [r7, #12]
 8002f08:	f362 0382 	bfi	r3, r2, #2, #1
 8002f0c:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002f0e:	f107 020c 	add.w	r2, r7, #12
 8002f12:	2301      	movs	r3, #1
 8002f14:	2125      	movs	r1, #37	; 0x25
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ffa0 	bl	8002e5c <lis2dw12_write_reg>
 8002f1c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002f1e:	697b      	ldr	r3, [r7, #20]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f32:	f107 0210 	add.w	r2, r7, #16
 8002f36:	2301      	movs	r3, #1
 8002f38:	2120      	movs	r1, #32
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ff76 	bl	8002e2c <lis2dw12_read_reg>
 8002f40:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 80a3 	bne.w	8003090 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002f4a:	f107 020c 	add.w	r2, r7, #12
 8002f4e:	2301      	movs	r3, #1
 8002f50:	2125      	movs	r1, #37	; 0x25
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff6a 	bl	8002e2c <lis2dw12_read_reg>
 8002f58:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002f5a:	7b3b      	ldrb	r3, [r7, #12]
 8002f5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	011a      	lsls	r2, r3, #4
 8002f64:	7c3b      	ldrb	r3, [r7, #16]
 8002f66:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002f70:	7c3a      	ldrb	r2, [r7, #16]
 8002f72:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002f76:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002f78:	4413      	add	r3, r2
 8002f7a:	2b1b      	cmp	r3, #27
 8002f7c:	f200 8084 	bhi.w	8003088 <lis2dw12_power_mode_get+0x160>
 8002f80:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <lis2dw12_power_mode_get+0x60>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08003019 	.word	0x08003019
 8002f8c:	08003011 	.word	0x08003011
 8002f90:	08003009 	.word	0x08003009
 8002f94:	08003001 	.word	0x08003001
 8002f98:	08002ff9 	.word	0x08002ff9
 8002f9c:	08003089 	.word	0x08003089
 8002fa0:	08003089 	.word	0x08003089
 8002fa4:	08003089 	.word	0x08003089
 8002fa8:	08003039 	.word	0x08003039
 8002fac:	08003031 	.word	0x08003031
 8002fb0:	08003029 	.word	0x08003029
 8002fb4:	08003021 	.word	0x08003021
 8002fb8:	08003089 	.word	0x08003089
 8002fbc:	08003089 	.word	0x08003089
 8002fc0:	08003089 	.word	0x08003089
 8002fc4:	08003089 	.word	0x08003089
 8002fc8:	08003061 	.word	0x08003061
 8002fcc:	08003059 	.word	0x08003059
 8002fd0:	08003051 	.word	0x08003051
 8002fd4:	08003049 	.word	0x08003049
 8002fd8:	08003041 	.word	0x08003041
 8002fdc:	08003089 	.word	0x08003089
 8002fe0:	08003089 	.word	0x08003089
 8002fe4:	08003089 	.word	0x08003089
 8002fe8:	08003081 	.word	0x08003081
 8002fec:	08003079 	.word	0x08003079
 8002ff0:	08003071 	.word	0x08003071
 8002ff4:	08003069 	.word	0x08003069
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	701a      	strb	r2, [r3, #0]
        break;
 8002ffe:	e048      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2203      	movs	r2, #3
 8003004:	701a      	strb	r2, [r3, #0]
        break;
 8003006:	e044      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2202      	movs	r2, #2
 800300c:	701a      	strb	r2, [r3, #0]
        break;
 800300e:	e040      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
        break;
 8003016:	e03c      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
        break;
 800301e:	e038      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	220b      	movs	r2, #11
 8003024:	701a      	strb	r2, [r3, #0]
        break;
 8003026:	e034      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	220a      	movs	r2, #10
 800302c:	701a      	strb	r2, [r3, #0]
        break;
 800302e:	e030      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2209      	movs	r2, #9
 8003034:	701a      	strb	r2, [r3, #0]
        break;
 8003036:	e02c      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2208      	movs	r2, #8
 800303c:	701a      	strb	r2, [r3, #0]
        break;
 800303e:	e028      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2214      	movs	r2, #20
 8003044:	701a      	strb	r2, [r3, #0]
        break;
 8003046:	e024      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2213      	movs	r2, #19
 800304c:	701a      	strb	r2, [r3, #0]
        break;
 800304e:	e020      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2212      	movs	r2, #18
 8003054:	701a      	strb	r2, [r3, #0]
        break;
 8003056:	e01c      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2211      	movs	r2, #17
 800305c:	701a      	strb	r2, [r3, #0]
        break;
 800305e:	e018      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2210      	movs	r2, #16
 8003064:	701a      	strb	r2, [r3, #0]
        break;
 8003066:	e014      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	221b      	movs	r2, #27
 800306c:	701a      	strb	r2, [r3, #0]
        break;
 800306e:	e010      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	221a      	movs	r2, #26
 8003074:	701a      	strb	r2, [r3, #0]
        break;
 8003076:	e00c      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2219      	movs	r2, #25
 800307c:	701a      	strb	r2, [r3, #0]
        break;
 800307e:	e008      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2218      	movs	r2, #24
 8003084:	701a      	strb	r2, [r3, #0]
        break;
 8003086:	e004      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2204      	movs	r2, #4
 800308c:	701a      	strb	r2, [r3, #0]
        break;
 800308e:	e000      	b.n	8003092 <lis2dw12_power_mode_get+0x16a>
    }
  }
 8003090:	bf00      	nop

  return ret;
 8003092:	697b      	ldr	r3, [r7, #20]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80030a8:	f107 0210 	add.w	r2, r7, #16
 80030ac:	2301      	movs	r3, #1
 80030ae:	2120      	movs	r1, #32
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff febb 	bl	8002e2c <lis2dw12_read_reg>
 80030b6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	7c3b      	ldrb	r3, [r7, #16]
 80030c8:	f362 1307 	bfi	r3, r2, #4, #4
 80030cc:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80030ce:	f107 0210 	add.w	r2, r7, #16
 80030d2:	2301      	movs	r3, #1
 80030d4:	2120      	movs	r1, #32
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff fec0 	bl	8002e5c <lis2dw12_write_reg>
 80030dc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80030e4:	f107 020c 	add.w	r2, r7, #12
 80030e8:	2301      	movs	r3, #1
 80030ea:	2122      	movs	r1, #34	; 0x22
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff fe9d 	bl	8002e2c <lis2dw12_read_reg>
 80030f2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d110      	bne.n	800311c <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	b2da      	uxtb	r2, r3
 8003104:	7b3b      	ldrb	r3, [r7, #12]
 8003106:	f362 0301 	bfi	r3, r2, #0, #2
 800310a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800310c:	f107 020c 	add.w	r2, r7, #12
 8003110:	2301      	movs	r3, #1
 8003112:	2122      	movs	r1, #34	; 0x22
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff fea1 	bl	8002e5c <lis2dw12_write_reg>
 800311a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800311c:	697b      	ldr	r3, [r7, #20]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003132:	f107 0210 	add.w	r2, r7, #16
 8003136:	2301      	movs	r3, #1
 8003138:	2120      	movs	r1, #32
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fe76 	bl	8002e2c <lis2dw12_read_reg>
 8003140:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 80b3 	bne.w	80032b0 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800314a:	f107 020c 	add.w	r2, r7, #12
 800314e:	2301      	movs	r3, #1
 8003150:	2122      	movs	r1, #34	; 0x22
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fe6a 	bl	8002e2c <lis2dw12_read_reg>
 8003158:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800315a:	7b3b      	ldrb	r3, [r7, #12]
 800315c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003160:	b2db      	uxtb	r3, r3
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	7c3a      	ldrb	r2, [r7, #16]
 8003166:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	4413      	add	r3, r2
 800316e:	2b32      	cmp	r3, #50	; 0x32
 8003170:	f200 809a 	bhi.w	80032a8 <lis2dw12_data_rate_get+0x180>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <lis2dw12_data_rate_get+0x54>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	08003249 	.word	0x08003249
 8003180:	08003251 	.word	0x08003251
 8003184:	08003259 	.word	0x08003259
 8003188:	08003261 	.word	0x08003261
 800318c:	08003269 	.word	0x08003269
 8003190:	08003271 	.word	0x08003271
 8003194:	08003279 	.word	0x08003279
 8003198:	08003281 	.word	0x08003281
 800319c:	08003289 	.word	0x08003289
 80031a0:	08003291 	.word	0x08003291
 80031a4:	080032a9 	.word	0x080032a9
 80031a8:	080032a9 	.word	0x080032a9
 80031ac:	080032a9 	.word	0x080032a9
 80031b0:	080032a9 	.word	0x080032a9
 80031b4:	080032a9 	.word	0x080032a9
 80031b8:	080032a9 	.word	0x080032a9
 80031bc:	080032a9 	.word	0x080032a9
 80031c0:	080032a9 	.word	0x080032a9
 80031c4:	080032a1 	.word	0x080032a1
 80031c8:	080032a9 	.word	0x080032a9
 80031cc:	080032a9 	.word	0x080032a9
 80031d0:	080032a9 	.word	0x080032a9
 80031d4:	080032a9 	.word	0x080032a9
 80031d8:	080032a9 	.word	0x080032a9
 80031dc:	080032a9 	.word	0x080032a9
 80031e0:	080032a9 	.word	0x080032a9
 80031e4:	080032a9 	.word	0x080032a9
 80031e8:	080032a9 	.word	0x080032a9
 80031ec:	080032a9 	.word	0x080032a9
 80031f0:	080032a9 	.word	0x080032a9
 80031f4:	080032a9 	.word	0x080032a9
 80031f8:	080032a9 	.word	0x080032a9
 80031fc:	080032a9 	.word	0x080032a9
 8003200:	080032a9 	.word	0x080032a9
 8003204:	080032a9 	.word	0x080032a9
 8003208:	080032a9 	.word	0x080032a9
 800320c:	080032a9 	.word	0x080032a9
 8003210:	080032a9 	.word	0x080032a9
 8003214:	080032a9 	.word	0x080032a9
 8003218:	080032a9 	.word	0x080032a9
 800321c:	080032a9 	.word	0x080032a9
 8003220:	080032a9 	.word	0x080032a9
 8003224:	080032a9 	.word	0x080032a9
 8003228:	080032a9 	.word	0x080032a9
 800322c:	080032a9 	.word	0x080032a9
 8003230:	080032a9 	.word	0x080032a9
 8003234:	080032a9 	.word	0x080032a9
 8003238:	080032a9 	.word	0x080032a9
 800323c:	080032a9 	.word	0x080032a9
 8003240:	080032a9 	.word	0x080032a9
 8003244:	08003299 	.word	0x08003299
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
        break;
 800324e:	e030      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
        break;
 8003256:	e02c      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2202      	movs	r2, #2
 800325c:	701a      	strb	r2, [r3, #0]
        break;
 800325e:	e028      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2203      	movs	r2, #3
 8003264:	701a      	strb	r2, [r3, #0]
        break;
 8003266:	e024      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2204      	movs	r2, #4
 800326c:	701a      	strb	r2, [r3, #0]
        break;
 800326e:	e020      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2205      	movs	r2, #5
 8003274:	701a      	strb	r2, [r3, #0]
        break;
 8003276:	e01c      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2206      	movs	r2, #6
 800327c:	701a      	strb	r2, [r3, #0]
        break;
 800327e:	e018      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2207      	movs	r2, #7
 8003284:	701a      	strb	r2, [r3, #0]
        break;
 8003286:	e014      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2208      	movs	r2, #8
 800328c:	701a      	strb	r2, [r3, #0]
        break;
 800328e:	e010      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2209      	movs	r2, #9
 8003294:	701a      	strb	r2, [r3, #0]
        break;
 8003296:	e00c      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2232      	movs	r2, #50	; 0x32
 800329c:	701a      	strb	r2, [r3, #0]
        break;
 800329e:	e008      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2212      	movs	r2, #18
 80032a4:	701a      	strb	r2, [r3, #0]
        break;
 80032a6:	e004      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
        break;
 80032ae:	e000      	b.n	80032b2 <lis2dw12_data_rate_get+0x18a>
    }
  }
 80032b0:	bf00      	nop

  return ret;
 80032b2:	697b      	ldr	r3, [r7, #20]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80032c8:	f107 0208 	add.w	r2, r7, #8
 80032cc:	2301      	movs	r3, #1
 80032ce:	2121      	movs	r1, #33	; 0x21
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fdab 	bl	8002e2c <lis2dw12_read_reg>
 80032d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10f      	bne.n	80032fe <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	7a3b      	ldrb	r3, [r7, #8]
 80032e8:	f362 03c3 	bfi	r3, r2, #3, #1
 80032ec:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80032ee:	f107 0208 	add.w	r2, r7, #8
 80032f2:	2301      	movs	r3, #1
 80032f4:	2121      	movs	r1, #33	; 0x21
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff fdb0 	bl	8002e5c <lis2dw12_write_reg>
 80032fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032fe:	68fb      	ldr	r3, [r7, #12]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003314:	f107 0208 	add.w	r2, r7, #8
 8003318:	2301      	movs	r3, #1
 800331a:	2125      	movs	r1, #37	; 0x25
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff fd85 	bl	8002e2c <lis2dw12_read_reg>
 8003322:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	b2da      	uxtb	r2, r3
 8003332:	7a3b      	ldrb	r3, [r7, #8]
 8003334:	f362 1305 	bfi	r3, r2, #4, #2
 8003338:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800333a:	f107 0208 	add.w	r2, r7, #8
 800333e:	2301      	movs	r3, #1
 8003340:	2125      	movs	r1, #37	; 0x25
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fd8a 	bl	8002e5c <lis2dw12_write_reg>
 8003348:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800335e:	f107 0208 	add.w	r2, r7, #8
 8003362:	2301      	movs	r3, #1
 8003364:	2125      	movs	r1, #37	; 0x25
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fd60 	bl	8002e2c <lis2dw12_read_reg>
 800336c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800336e:	7a3b      	ldrb	r3, [r7, #8]
 8003370:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d81a      	bhi.n	80033b0 <lis2dw12_full_scale_get+0x5c>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <lis2dw12_full_scale_get+0x2c>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	08003399 	.word	0x08003399
 8003388:	080033a1 	.word	0x080033a1
 800338c:	080033a9 	.word	0x080033a9
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
      break;
 8003396:	e00f      	b.n	80033b8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
      break;
 800339e:	e00b      	b.n	80033b8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
      break;
 80033a6:	e007      	b.n	80033b8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2203      	movs	r2, #3
 80033ac:	701a      	strb	r2, [r3, #0]
      break;
 80033ae:	e003      	b.n	80033b8 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
      break;
 80033b6:	bf00      	nop
  }

  return ret;
 80033b8:	68fb      	ldr	r3, [r7, #12]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop

080033c4 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80033ce:	f107 020c 	add.w	r2, r7, #12
 80033d2:	2306      	movs	r3, #6
 80033d4:	2128      	movs	r1, #40	; 0x28
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fd28 	bl	8002e2c <lis2dw12_read_reg>
 80033dc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80033de:	7b7b      	ldrb	r3, [r7, #13]
 80033e0:	b21a      	sxth	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	7b3b      	ldrb	r3, [r7, #12]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	b21a      	sxth	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	3302      	adds	r3, #2
 8003406:	b212      	sxth	r2, r2
 8003408:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	3302      	adds	r3, #2
 800340e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003412:	b29b      	uxth	r3, r3
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	b29a      	uxth	r2, r3
 8003418:	7bbb      	ldrb	r3, [r7, #14]
 800341a:	b29b      	uxth	r3, r3
 800341c:	4413      	add	r3, r2
 800341e:	b29a      	uxth	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	3302      	adds	r3, #2
 8003424:	b212      	sxth	r2, r2
 8003426:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003428:	7c7a      	ldrb	r2, [r7, #17]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	3304      	adds	r3, #4
 800342e:	b212      	sxth	r2, r2
 8003430:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	3304      	adds	r3, #4
 8003436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343a:	b29b      	uxth	r3, r3
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	b29a      	uxth	r2, r3
 8003440:	7c3b      	ldrb	r3, [r7, #16]
 8003442:	b29b      	uxth	r3, r3
 8003444:	4413      	add	r3, r2
 8003446:	b29a      	uxth	r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	3304      	adds	r3, #4
 800344c:	b212      	sxth	r2, r2
 800344e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003450:	697b      	ldr	r3, [r7, #20]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003464:	2301      	movs	r3, #1
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	210f      	movs	r1, #15
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fcde 	bl	8002e2c <lis2dw12_read_reg>
 8003470:	60f8      	str	r0, [r7, #12]

  return ret;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003488:	f107 0208 	add.w	r2, r7, #8
 800348c:	2301      	movs	r3, #1
 800348e:	2121      	movs	r1, #33	; 0x21
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff fccb 	bl	8002e2c <lis2dw12_read_reg>
 8003496:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	7a3b      	ldrb	r3, [r7, #8]
 80034a8:	f362 0382 	bfi	r3, r2, #2, #1
 80034ac:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80034ae:	f107 0208 	add.w	r2, r7, #8
 80034b2:	2301      	movs	r3, #1
 80034b4:	2121      	movs	r1, #33	; 0x21
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fcd0 	bl	8002e5c <lis2dw12_write_reg>
 80034bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80034d4:	f107 0208 	add.w	r2, r7, #8
 80034d8:	2301      	movs	r3, #1
 80034da:	212e      	movs	r1, #46	; 0x2e
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fca5 	bl	8002e2c <lis2dw12_read_reg>
 80034e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10f      	bne.n	800350a <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	7a3b      	ldrb	r3, [r7, #8]
 80034f4:	f362 1347 	bfi	r3, r2, #5, #3
 80034f8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80034fa:	f107 0208 	add.w	r2, r7, #8
 80034fe:	2301      	movs	r3, #1
 8003500:	212e      	movs	r1, #46	; 0x2e
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fcaa 	bl	8002e5c <lis2dw12_write_reg>
 8003508:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d103      	bne.n	8003530 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003528:	f04f 33ff 	mov.w	r3, #4294967295
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e063      	b.n	80035f8 <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	7b1a      	ldrb	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a26      	ldr	r2, [pc, #152]	; (8003604 <LIS2MDL_RegisterBusIO+0xf0>)
 800356c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <LIS2MDL_RegisterBusIO+0xf4>)
 8003572:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	e036      	b.n	80035f8 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4798      	blx	r3
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 8003596:	f04f 33ff 	mov.w	r3, #4294967295
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e02c      	b.n	80035f8 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d028      	beq.n	80035f8 <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d123      	bne.n	80035f8 <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10d      	bne.n	80035d4 <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80035b8:	2334      	movs	r3, #52	; 0x34
 80035ba:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80035bc:	7afb      	ldrb	r3, [r7, #11]
 80035be:	461a      	mov	r2, r3
 80035c0:	2162      	movs	r1, #98	; 0x62
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fb1b 	bl	8003bfe <LIS2MDL_Write_Reg>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d014      	beq.n	80035f8 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	e012      	b.n	80035fa <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d101      	bne.n	80035e0 <LIS2MDL_RegisterBusIO+0xcc>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	e00c      	b.n	80035fa <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	331c      	adds	r3, #28
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 ff70 	bl	80044cc <lis2mdl_i2c_interface_set>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	e000      	b.n	80035fa <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 80035f8:	68fb      	ldr	r3, [r7, #12]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	08003c55 	.word	0x08003c55
 8003608:	08003cd7 	.word	0x08003cd7

0800360c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d144      	bne.n	80036a6 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800361c:	f107 0208 	add.w	r2, r7, #8
 8003620:	2301      	movs	r3, #1
 8003622:	2162      	movs	r1, #98	; 0x62
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fb97 	bl	8003d58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003630:	f04f 33ff 	mov.w	r3, #4294967295
 8003634:	e06c      	b.n	8003710 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003636:	f107 020c 	add.w	r2, r7, #12
 800363a:	2301      	movs	r3, #1
 800363c:	2160      	movs	r1, #96	; 0x60
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fb8a 	bl	8003d58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
 800364e:	e05f      	b.n	8003710 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003650:	7a3b      	ldrb	r3, [r7, #8]
 8003652:	f043 0310 	orr.w	r3, r3, #16
 8003656:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003658:	7a3b      	ldrb	r3, [r7, #8]
 800365a:	f36f 0341 	bfc	r3, #1, #1
 800365e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003660:	7b3b      	ldrb	r3, [r7, #12]
 8003662:	2202      	movs	r2, #2
 8003664:	f362 0301 	bfi	r3, r2, #0, #2
 8003668:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800366a:	7b3b      	ldrb	r3, [r7, #12]
 800366c:	f043 030c 	orr.w	r3, r3, #12
 8003670:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003672:	f107 0208 	add.w	r2, r7, #8
 8003676:	2301      	movs	r3, #1
 8003678:	2162      	movs	r1, #98	; 0x62
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fcab 	bl	8003fd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
 800368a:	e041      	b.n	8003710 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800368c:	f107 020c 	add.w	r2, r7, #12
 8003690:	2301      	movs	r3, #1
 8003692:	2160      	movs	r1, #96	; 0x60
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fc9e 	bl	8003fd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d032      	beq.n	8003706 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295
 80036a4:	e034      	b.n	8003710 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	331c      	adds	r3, #28
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fe65 	bl	800437c <lis2mdl_block_data_update_set>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	e028      	b.n	8003710 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	331c      	adds	r3, #28
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fdd4 	bl	8004272 <lis2mdl_operating_mode_set>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295
 80036d4:	e01c      	b.n	8003710 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	331c      	adds	r3, #28
 80036da:	2103      	movs	r1, #3
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fdee 	bl	80042be <lis2mdl_data_rate_set>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	e010      	b.n	8003710 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	331c      	adds	r3, #28
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fec3 	bl	8004480 <lis2mdl_self_test_set>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
 8003704:	e004      	b.n	8003710 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8a5 	bl	8003870 <LIS2MDL_MAG_Disable>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800372c:	f04f 33ff 	mov.w	r3, #4294967295
 8003730:	e004      	b.n	800373c <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d10b      	bne.n	800376e <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003756:	2301      	movs	r3, #1
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	214f      	movs	r1, #79	; 0x4f
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fafb 	bl	8003d58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00e      	beq.n	8003786 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003768:	f04f 33ff 	mov.w	r3, #4294967295
 800376c:	e00c      	b.n	8003788 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	331c      	adds	r3, #28
 8003772:	6839      	ldr	r1, [r7, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fe72 	bl	800445e <lis2mdl_device_id_get>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003780:	f04f 33ff 	mov.w	r3, #4294967295
 8003784:	e000      	b.n	8003788 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2200      	movs	r2, #0
 80037b6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2232      	movs	r2, #50	; 0x32
 80037c2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <LIS2MDL_GetCapabilities+0x58>)
 80037d8:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	42c80000 	.word	0x42c80000

080037ec <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e032      	b.n	8003868 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d11d      	bne.n	8003846 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800380a:	f107 020c 	add.w	r2, r7, #12
 800380e:	2301      	movs	r3, #1
 8003810:	2160      	movs	r1, #96	; 0x60
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 faa0 	bl	8003d58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	e021      	b.n	8003868 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003824:	7b3b      	ldrb	r3, [r7, #12]
 8003826:	f36f 0301 	bfc	r3, #0, #2
 800382a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800382c:	f107 020c 	add.w	r2, r7, #12
 8003830:	2301      	movs	r3, #1
 8003832:	2160      	movs	r1, #96	; 0x60
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fbce 	bl	8003fd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003840:	f04f 33ff 	mov.w	r3, #4294967295
 8003844:	e010      	b.n	8003868 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	331c      	adds	r3, #28
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fd10 	bl	8004272 <lis2mdl_operating_mode_set>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	e004      	b.n	8003868 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e033      	b.n	80038ee <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d11e      	bne.n	80038cc <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800388e:	f107 020c 	add.w	r2, r7, #12
 8003892:	2301      	movs	r3, #1
 8003894:	2160      	movs	r1, #96	; 0x60
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa5e 	bl	8003d58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295
 80038a6:	e022      	b.n	80038ee <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80038a8:	7b3b      	ldrb	r3, [r7, #12]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f362 0301 	bfi	r3, r2, #0, #2
 80038b0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80038b2:	f107 020c 	add.w	r2, r7, #12
 80038b6:	2301      	movs	r3, #1
 80038b8:	2160      	movs	r1, #96	; 0x60
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fb8b 	bl	8003fd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00e      	beq.n	80038e4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ca:	e010      	b.n	80038ee <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	331c      	adds	r3, #28
 80038d0:	2102      	movs	r1, #2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fccd 	bl	8004272 <lis2mdl_operating_mode_set>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	e004      	b.n	80038ee <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003906:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	331c      	adds	r3, #28
 800392a:	f107 020b 	add.w	r2, r7, #11
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fceb 	bl	800430c <lis2mdl_data_rate_get>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
 8003940:	e023      	b.n	800398a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003942:	7afb      	ldrb	r3, [r7, #11]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d81b      	bhi.n	8003980 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003961 	.word	0x08003961
 8003954:	08003969 	.word	0x08003969
 8003958:	08003971 	.word	0x08003971
 800395c:	08003979 	.word	0x08003979
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003964:	601a      	str	r2, [r3, #0]
      break;
 8003966:	e00f      	b.n	8003988 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 800396c:	601a      	str	r2, [r3, #0]
      break;
 800396e:	e00b      	b.n	8003988 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003974:	601a      	str	r2, [r3, #0]
      break;
 8003976:	e007      	b.n	8003988 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 800397c:	601a      	str	r2, [r3, #0]
      break;
 800397e:	e003      	b.n	8003988 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
 8003984:	60fb      	str	r3, [r7, #12]
      break;
 8003986:	bf00      	nop
  }

  return ret;
 8003988:	68fb      	ldr	r3, [r7, #12]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	41200000 	.word	0x41200000
 8003998:	41a00000 	.word	0x41a00000
 800399c:	42480000 	.word	0x42480000
 80039a0:	42c80000 	.word	0x42c80000

080039a4 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80039b0:	edd7 7a00 	vldr	s15, [r7]
 80039b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	d801      	bhi.n	80039c6 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80039c2:	2300      	movs	r3, #0
 80039c4:	e016      	b.n	80039f4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80039c6:	edd7 7a00 	vldr	s15, [r7]
 80039ca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80039ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	d801      	bhi.n	80039dc <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80039d8:	2301      	movs	r3, #1
 80039da:	e00b      	b.n	80039f4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80039dc:	edd7 7a00 	vldr	s15, [r7]
 80039e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003a68 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80039e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ec:	d801      	bhi.n	80039f2 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e000      	b.n	80039f4 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80039f2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80039f4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d121      	bne.n	8003a42 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80039fe:	f107 020c 	add.w	r2, r7, #12
 8003a02:	2301      	movs	r3, #1
 8003a04:	2160      	movs	r1, #96	; 0x60
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f9a6 	bl	8003d58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295
 8003a16:	e022      	b.n	8003a5e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	7b3b      	ldrb	r3, [r7, #12]
 8003a22:	f362 0383 	bfi	r3, r2, #2, #2
 8003a26:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003a28:	f107 020c 	add.w	r2, r7, #12
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	2160      	movs	r1, #96	; 0x60
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fad0 	bl	8003fd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00f      	beq.n	8003a5c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a40:	e00d      	b.n	8003a5e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	331c      	adds	r3, #28
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fc37 	bl	80042be <lis2mdl_data_rate_set>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	e000      	b.n	8003a5e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	42480000 	.word	0x42480000

08003a6c <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2232      	movs	r2, #50	; 0x32
 8003a7a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	331c      	adds	r3, #28
 8003ab0:	f107 0208 	add.w	r2, r7, #8
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fc86 	bl	80043c8 <lis2mdl_magnetic_raw_get>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	e00c      	b.n	8003ae2 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003ac8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003ad0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003ad8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b088      	sub	sp, #32
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d137      	bne.n	8003b6c <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003afc:	f107 0218 	add.w	r2, r7, #24
 8003b00:	2306      	movs	r3, #6
 8003b02:	2168      	movs	r1, #104	; 0x68
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f927 	bl	8003d58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
 8003b14:	e06f      	b.n	8003bf6 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003b16:	7e7b      	ldrb	r3, [r7, #25]
 8003b18:	b21b      	sxth	r3, r3
 8003b1a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003b1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	7e3b      	ldrb	r3, [r7, #24]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	b21b      	sxth	r3, r3
 8003b30:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003b32:	7efb      	ldrb	r3, [r7, #27]
 8003b34:	b21b      	sxth	r3, r3
 8003b36:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003b38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	7ebb      	ldrb	r3, [r7, #26]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	b21b      	sxth	r3, r3
 8003b4c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003b4e:	7f7b      	ldrb	r3, [r7, #29]
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003b54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	7f3b      	ldrb	r3, [r7, #28]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	b21b      	sxth	r3, r3
 8003b68:	82bb      	strh	r3, [r7, #20]
 8003b6a:	e00d      	b.n	8003b88 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	331c      	adds	r3, #28
 8003b70:	f107 0210 	add.w	r2, r7, #16
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fc26 	bl	80043c8 <lis2mdl_magnetic_raw_get>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	e036      	b.n	8003bf6 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff feb1 	bl	80038f6 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003b94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ba0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bac:	ee17 2a90 	vmov	r2, s15
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003bb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bcc:	ee17 2a90 	vmov	r2, s15
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003bd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003be0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bec:	ee17 2a90 	vmov	r2, s15
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	70fb      	strb	r3, [r7, #3]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d10b      	bne.n	8003c2e <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003c16:	1cba      	adds	r2, r7, #2
 8003c18:	78f9      	ldrb	r1, [r7, #3]
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f9da 	bl	8003fd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	e00e      	b.n	8003c4c <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f103 001c 	add.w	r0, r3, #28
 8003c34:	1cba      	adds	r2, r7, #2
 8003c36:	78f9      	ldrb	r1, [r7, #3]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f000 fb02 	bl	8004242 <lis2mdl_write_reg>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	e000      	b.n	8003c4c <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	460b      	mov	r3, r1
 8003c62:	72fb      	strb	r3, [r7, #11]
 8003c64:	4613      	mov	r3, r2
 8003c66:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10e      	bne.n	8003c92 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	695c      	ldr	r4, [r3, #20]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	7b1b      	ldrb	r3, [r3, #12]
 8003c7c:	b298      	uxth	r0, r3
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
 8003c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	b299      	uxth	r1, r3
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	47a0      	blx	r4
 8003c8e:	4603      	mov	r3, r0
 8003c90:	e01d      	b.n	8003cce <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d10b      	bne.n	8003cb2 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	695c      	ldr	r4, [r3, #20]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	7b1b      	ldrb	r3, [r3, #12]
 8003ca2:	b298      	uxth	r0, r3
 8003ca4:	7afb      	ldrb	r3, [r7, #11]
 8003ca6:	b299      	uxth	r1, r3
 8003ca8:	893b      	ldrh	r3, [r7, #8]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	47a0      	blx	r4
 8003cae:	4603      	mov	r3, r0
 8003cb0:	e00d      	b.n	8003cce <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	695c      	ldr	r4, [r3, #20]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	7b1b      	ldrb	r3, [r3, #12]
 8003cba:	b298      	uxth	r0, r3
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
 8003cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	b299      	uxth	r1, r3
 8003cc6:	893b      	ldrh	r3, [r7, #8]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	47a0      	blx	r4
 8003ccc:	4603      	mov	r3, r0
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd90      	pop	{r4, r7, pc}

08003cd6 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cd6:	b590      	push	{r4, r7, lr}
 8003cd8:	b087      	sub	sp, #28
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	72fb      	strb	r3, [r7, #11]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10e      	bne.n	8003d14 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	691c      	ldr	r4, [r3, #16]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	7b1b      	ldrb	r3, [r3, #12]
 8003cfe:	b298      	uxth	r0, r3
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	47a0      	blx	r4
 8003d10:	4603      	mov	r3, r0
 8003d12:	e01d      	b.n	8003d50 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d10b      	bne.n	8003d34 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	691c      	ldr	r4, [r3, #16]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	7b1b      	ldrb	r3, [r3, #12]
 8003d24:	b298      	uxth	r0, r3
 8003d26:	7afb      	ldrb	r3, [r7, #11]
 8003d28:	b299      	uxth	r1, r3
 8003d2a:	893b      	ldrh	r3, [r7, #8]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	47a0      	blx	r4
 8003d30:	4603      	mov	r3, r0
 8003d32:	e00d      	b.n	8003d50 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	691c      	ldr	r4, [r3, #16]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	7b1b      	ldrb	r3, [r3, #12]
 8003d3c:	b298      	uxth	r0, r3
 8003d3e:	7afb      	ldrb	r3, [r7, #11]
 8003d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	b299      	uxth	r1, r3
 8003d48:	893b      	ldrh	r3, [r7, #8]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	47a0      	blx	r4
 8003d4e:	4603      	mov	r3, r0
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd90      	pop	{r4, r7, pc}

08003d58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	461a      	mov	r2, r3
 8003d64:	460b      	mov	r3, r1
 8003d66:	72fb      	strb	r3, [r7, #11]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003d72:	2340      	movs	r3, #64	; 0x40
 8003d74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003d7e:	233d      	movs	r3, #61	; 0x3d
 8003d80:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003d82:	2315      	movs	r3, #21
 8003d84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003d88:	2316      	movs	r3, #22
 8003d8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003d8e:	2317      	movs	r3, #23
 8003d90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003d94:	2314      	movs	r3, #20
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003d9a:	2344      	movs	r3, #68	; 0x44
 8003d9c:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003da4:	2339      	movs	r3, #57	; 0x39
 8003da6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003db0:	2329      	movs	r3, #41	; 0x29
 8003db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003db6:	231e      	movs	r3, #30
 8003db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003dc8:	2310      	movs	r3, #16
 8003dca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003dd4:	2340      	movs	r3, #64	; 0x40
 8003dd6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f103 001c 	add.w	r0, r3, #28
 8003de0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003de4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003de8:	2301      	movs	r3, #1
 8003dea:	f000 fa2a 	bl	8004242 <lis2mdl_write_reg>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295
 8003df8:	e0e9      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f103 001c 	add.w	r0, r3, #28
 8003e00:	f107 021f 	add.w	r2, r7, #31
 8003e04:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f000 fa1a 	bl	8004242 <lis2mdl_write_reg>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	e0d9      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f103 001c 	add.w	r0, r3, #28
 8003e20:	f107 020b 	add.w	r2, r7, #11
 8003e24:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f000 fa0a 	bl	8004242 <lis2mdl_write_reg>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
 8003e38:	e0c9      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f103 001c 	add.w	r0, r3, #28
 8003e40:	f107 021d 	add.w	r2, r7, #29
 8003e44:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f000 f9fa 	bl	8004242 <lis2mdl_write_reg>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	e0b9      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f103 001c 	add.w	r0, r3, #28
 8003e60:	f107 021e 	add.w	r2, r7, #30
 8003e64:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f000 f9ea 	bl	8004242 <lis2mdl_write_reg>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	e0a9      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f103 001c 	add.w	r0, r3, #28
 8003e80:	f107 0220 	add.w	r2, r7, #32
 8003e84:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f000 f9da 	bl	8004242 <lis2mdl_write_reg>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295
 8003e98:	e099      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f103 001c 	add.w	r0, r3, #28
 8003ea0:	f107 021c 	add.w	r2, r7, #28
 8003ea4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f000 f9b2 	bl	8004212 <lis2mdl_read_reg>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb8:	e089      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003eba:	7f3b      	ldrb	r3, [r7, #28]
 8003ebc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d102      	bne.n	8003eca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003ec4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003ec8:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f103 001c 	add.w	r0, r3, #28
 8003ed0:	f107 021c 	add.w	r2, r7, #28
 8003ed4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f000 f9b2 	bl	8004242 <lis2mdl_write_reg>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	e071      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f103 001c 	add.w	r0, r3, #28
 8003ef0:	f107 0214 	add.w	r2, r7, #20
 8003ef4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003ef8:	2306      	movs	r3, #6
 8003efa:	f000 f98a 	bl	8004212 <lis2mdl_read_reg>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003f04:	f04f 33ff 	mov.w	r3, #4294967295
 8003f08:	e061      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f103 001c 	add.w	r0, r3, #28
 8003f10:	f107 021b 	add.w	r2, r7, #27
 8003f14:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f000 f97a 	bl	8004212 <lis2mdl_read_reg>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003f24:	f04f 33ff 	mov.w	r3, #4294967295
 8003f28:	e051      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003f2a:	7efa      	ldrb	r2, [r7, #27]
 8003f2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003f30:	4013      	ands	r3, r2
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d1e6      	bne.n	8003f0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f103 001c 	add.w	r0, r3, #28
 8003f42:	f107 021b 	add.w	r2, r7, #27
 8003f46:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f000 f961 	bl	8004212 <lis2mdl_read_reg>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	e038      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003f5c:	7efa      	ldrb	r2, [r7, #27]
 8003f5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f62:	4013      	ands	r3, r2
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d1e6      	bne.n	8003f3c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f103 001c 	add.w	r0, r3, #28
 8003f74:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003f78:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f000 f960 	bl	8004242 <lis2mdl_write_reg>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8c:	e01f      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f103 001c 	add.w	r0, r3, #28
 8003f94:	893b      	ldrh	r3, [r7, #8]
 8003f96:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	f000 f939 	bl	8004212 <lis2mdl_read_reg>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	e010      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f103 001c 	add.w	r0, r3, #28
 8003fb2:	f107 0220 	add.w	r2, r7, #32
 8003fb6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f000 f941 	bl	8004242 <lis2mdl_write_reg>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	e000      	b.n	8003fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3730      	adds	r7, #48	; 0x30
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b08c      	sub	sp, #48	; 0x30
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	72fb      	strb	r3, [r7, #11]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003ff0:	2340      	movs	r3, #64	; 0x40
 8003ff2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003ffc:	233c      	movs	r3, #60	; 0x3c
 8003ffe:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004000:	2315      	movs	r3, #21
 8004002:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004006:	2316      	movs	r3, #22
 8004008:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800400c:	2317      	movs	r3, #23
 800400e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004016:	2314      	movs	r3, #20
 8004018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800401c:	2344      	movs	r3, #68	; 0x44
 800401e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004020:	2339      	movs	r3, #57	; 0x39
 8004022:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800402c:	2329      	movs	r3, #41	; 0x29
 800402e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004032:	231e      	movs	r3, #30
 8004034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800403e:	2310      	movs	r3, #16
 8004040:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004044:	2300      	movs	r3, #0
 8004046:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004050:	230e      	movs	r3, #14
 8004052:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f103 001c 	add.w	r0, r3, #28
 800405c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004060:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004064:	2301      	movs	r3, #1
 8004066:	f000 f8ec 	bl	8004242 <lis2mdl_write_reg>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004070:	f04f 33ff 	mov.w	r3, #4294967295
 8004074:	e0c9      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f103 001c 	add.w	r0, r3, #28
 800407c:	f107 021f 	add.w	r2, r7, #31
 8004080:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004084:	2301      	movs	r3, #1
 8004086:	f000 f8dc 	bl	8004242 <lis2mdl_write_reg>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004090:	f04f 33ff 	mov.w	r3, #4294967295
 8004094:	e0b9      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f103 001c 	add.w	r0, r3, #28
 800409c:	f107 020b 	add.w	r2, r7, #11
 80040a0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80040a4:	2301      	movs	r3, #1
 80040a6:	f000 f8cc 	bl	8004242 <lis2mdl_write_reg>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80040b0:	f04f 33ff 	mov.w	r3, #4294967295
 80040b4:	e0a9      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f103 001c 	add.w	r0, r3, #28
 80040bc:	f107 021e 	add.w	r2, r7, #30
 80040c0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80040c4:	2301      	movs	r3, #1
 80040c6:	f000 f8bc 	bl	8004242 <lis2mdl_write_reg>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	e099      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f103 001c 	add.w	r0, r3, #28
 80040dc:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80040e0:	2301      	movs	r3, #1
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	f000 f8ad 	bl	8004242 <lis2mdl_write_reg>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	e08a      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f103 001c 	add.w	r0, r3, #28
 80040fa:	f107 021d 	add.w	r2, r7, #29
 80040fe:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004102:	2301      	movs	r3, #1
 8004104:	f000 f89d 	bl	8004242 <lis2mdl_write_reg>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	e07a      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f103 001c 	add.w	r0, r3, #28
 800411a:	f107 0220 	add.w	r2, r7, #32
 800411e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004122:	2301      	movs	r3, #1
 8004124:	f000 f88d 	bl	8004242 <lis2mdl_write_reg>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	e06a      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f103 001c 	add.w	r0, r3, #28
 800413a:	f107 021c 	add.w	r2, r7, #28
 800413e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004142:	2301      	movs	r3, #1
 8004144:	f000 f865 	bl	8004212 <lis2mdl_read_reg>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 800414e:	f04f 33ff 	mov.w	r3, #4294967295
 8004152:	e05a      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004154:	7f3b      	ldrb	r3, [r7, #28]
 8004156:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800415a:	429a      	cmp	r2, r3
 800415c:	d102      	bne.n	8004164 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800415e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004162:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f103 001c 	add.w	r0, r3, #28
 800416a:	f107 021c 	add.w	r2, r7, #28
 800416e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004172:	2301      	movs	r3, #1
 8004174:	f000 f865 	bl	8004242 <lis2mdl_write_reg>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	e042      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f103 001c 	add.w	r0, r3, #28
 800418a:	f107 0214 	add.w	r2, r7, #20
 800418e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004192:	2306      	movs	r3, #6
 8004194:	f000 f83d 	bl	8004212 <lis2mdl_read_reg>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
 80041a2:	e032      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f103 001c 	add.w	r0, r3, #28
 80041aa:	f107 021b 	add.w	r2, r7, #27
 80041ae:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80041b2:	2301      	movs	r3, #1
 80041b4:	f000 f82d 	bl	8004212 <lis2mdl_read_reg>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	e022      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80041c4:	7efa      	ldrb	r2, [r7, #27]
 80041c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80041ca:	4013      	ands	r3, r2
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d1e6      	bne.n	80041a4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f103 001c 	add.w	r0, r3, #28
 80041dc:	f107 021b 	add.w	r2, r7, #27
 80041e0:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80041e4:	2301      	movs	r3, #1
 80041e6:	f000 f814 	bl	8004212 <lis2mdl_read_reg>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	e009      	b.n	800420a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80041f6:	7efa      	ldrb	r2, [r7, #27]
 80041f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80041fc:	4013      	ands	r3, r2
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004204:	429a      	cmp	r2, r3
 8004206:	d1e6      	bne.n	80041d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3730      	adds	r7, #48	; 0x30
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004212:	b590      	push	{r4, r7, lr}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	461a      	mov	r2, r3
 800421e:	460b      	mov	r3, r1
 8004220:	72fb      	strb	r3, [r7, #11]
 8004222:	4613      	mov	r3, r2
 8004224:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685c      	ldr	r4, [r3, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6898      	ldr	r0, [r3, #8]
 800422e:	893b      	ldrh	r3, [r7, #8]
 8004230:	7af9      	ldrb	r1, [r7, #11]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	47a0      	blx	r4
 8004236:	6178      	str	r0, [r7, #20]

  return ret;
 8004238:	697b      	ldr	r3, [r7, #20]
}
 800423a:	4618      	mov	r0, r3
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd90      	pop	{r4, r7, pc}

08004242 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004242:	b590      	push	{r4, r7, lr}
 8004244:	b087      	sub	sp, #28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	461a      	mov	r2, r3
 800424e:	460b      	mov	r3, r1
 8004250:	72fb      	strb	r3, [r7, #11]
 8004252:	4613      	mov	r3, r2
 8004254:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681c      	ldr	r4, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6898      	ldr	r0, [r3, #8]
 800425e:	893b      	ldrh	r3, [r7, #8]
 8004260:	7af9      	ldrb	r1, [r7, #11]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	47a0      	blx	r4
 8004266:	6178      	str	r0, [r7, #20]

  return ret;
 8004268:	697b      	ldr	r3, [r7, #20]
}
 800426a:	4618      	mov	r0, r3
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}

08004272 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800427e:	f107 0208 	add.w	r2, r7, #8
 8004282:	2301      	movs	r3, #1
 8004284:	2160      	movs	r1, #96	; 0x60
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ffc3 	bl	8004212 <lis2mdl_read_reg>
 800428c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10f      	bne.n	80042b4 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	b2da      	uxtb	r2, r3
 800429c:	7a3b      	ldrb	r3, [r7, #8]
 800429e:	f362 0301 	bfi	r3, r2, #0, #2
 80042a2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80042a4:	f107 0208 	add.w	r2, r7, #8
 80042a8:	2301      	movs	r3, #1
 80042aa:	2160      	movs	r1, #96	; 0x60
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ffc8 	bl	8004242 <lis2mdl_write_reg>
 80042b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042b4:	68fb      	ldr	r3, [r7, #12]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	460b      	mov	r3, r1
 80042c8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80042ca:	f107 0208 	add.w	r2, r7, #8
 80042ce:	2301      	movs	r3, #1
 80042d0:	2160      	movs	r1, #96	; 0x60
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff ff9d 	bl	8004212 <lis2mdl_read_reg>
 80042d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10f      	bne.n	8004300 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	7a3b      	ldrb	r3, [r7, #8]
 80042ea:	f362 0383 	bfi	r3, r2, #2, #2
 80042ee:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80042f0:	f107 0208 	add.w	r2, r7, #8
 80042f4:	2301      	movs	r3, #1
 80042f6:	2160      	movs	r1, #96	; 0x60
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ffa2 	bl	8004242 <lis2mdl_write_reg>
 80042fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004300:	68fb      	ldr	r3, [r7, #12]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004316:	f107 0208 	add.w	r2, r7, #8
 800431a:	2301      	movs	r3, #1
 800431c:	2160      	movs	r1, #96	; 0x60
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff ff77 	bl	8004212 <lis2mdl_read_reg>
 8004324:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004326:	7a3b      	ldrb	r3, [r7, #8]
 8004328:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b03      	cmp	r3, #3
 8004330:	d81a      	bhi.n	8004368 <lis2mdl_data_rate_get+0x5c>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <lis2mdl_data_rate_get+0x2c>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	08004349 	.word	0x08004349
 800433c:	08004351 	.word	0x08004351
 8004340:	08004359 	.word	0x08004359
 8004344:	08004361 	.word	0x08004361
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
      break;
 800434e:	e00f      	b.n	8004370 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
      break;
 8004356:	e00b      	b.n	8004370 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2202      	movs	r2, #2
 800435c:	701a      	strb	r2, [r3, #0]
      break;
 800435e:	e007      	b.n	8004370 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2203      	movs	r2, #3
 8004364:	701a      	strb	r2, [r3, #0]
      break;
 8004366:	e003      	b.n	8004370 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
      break;
 800436e:	bf00      	nop
  }

  return ret;
 8004370:	68fb      	ldr	r3, [r7, #12]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop

0800437c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004388:	f107 0208 	add.w	r2, r7, #8
 800438c:	2301      	movs	r3, #1
 800438e:	2162      	movs	r1, #98	; 0x62
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff3e 	bl	8004212 <lis2mdl_read_reg>
 8004396:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	7a3b      	ldrb	r3, [r7, #8]
 80043a8:	f362 1304 	bfi	r3, r2, #4, #1
 80043ac:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80043ae:	f107 0208 	add.w	r2, r7, #8
 80043b2:	2301      	movs	r3, #1
 80043b4:	2162      	movs	r1, #98	; 0x62
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ff43 	bl	8004242 <lis2mdl_write_reg>
 80043bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80043be:	68fb      	ldr	r3, [r7, #12]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80043d2:	f107 020c 	add.w	r2, r7, #12
 80043d6:	2306      	movs	r3, #6
 80043d8:	2168      	movs	r1, #104	; 0x68
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ff19 	bl	8004212 <lis2mdl_read_reg>
 80043e0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80043e2:	7b7b      	ldrb	r3, [r7, #13]
 80043e4:	b21a      	sxth	r2, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	7b3b      	ldrb	r3, [r7, #12]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	b21a      	sxth	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	3302      	adds	r3, #2
 800440a:	b212      	sxth	r2, r2
 800440c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	3302      	adds	r3, #2
 8004412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004416:	b29b      	uxth	r3, r3
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	b29a      	uxth	r2, r3
 800441c:	7bbb      	ldrb	r3, [r7, #14]
 800441e:	b29b      	uxth	r3, r3
 8004420:	4413      	add	r3, r2
 8004422:	b29a      	uxth	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	3302      	adds	r3, #2
 8004428:	b212      	sxth	r2, r2
 800442a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800442c:	7c7a      	ldrb	r2, [r7, #17]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	3304      	adds	r3, #4
 8004432:	b212      	sxth	r2, r2
 8004434:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	3304      	adds	r3, #4
 800443a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443e:	b29b      	uxth	r3, r3
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	b29a      	uxth	r2, r3
 8004444:	7c3b      	ldrb	r3, [r7, #16]
 8004446:	b29b      	uxth	r3, r3
 8004448:	4413      	add	r3, r2
 800444a:	b29a      	uxth	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	3304      	adds	r3, #4
 8004450:	b212      	sxth	r2, r2
 8004452:	801a      	strh	r2, [r3, #0]

  return ret;
 8004454:	697b      	ldr	r3, [r7, #20]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004468:	2301      	movs	r3, #1
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	214f      	movs	r1, #79	; 0x4f
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fecf 	bl	8004212 <lis2mdl_read_reg>
 8004474:	60f8      	str	r0, [r7, #12]

  return ret;
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800448c:	f107 0208 	add.w	r2, r7, #8
 8004490:	2301      	movs	r3, #1
 8004492:	2162      	movs	r1, #98	; 0x62
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff febc 	bl	8004212 <lis2mdl_read_reg>
 800449a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	7a3b      	ldrb	r3, [r7, #8]
 80044ac:	f362 0341 	bfi	r3, r2, #1, #1
 80044b0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80044b2:	f107 0208 	add.w	r2, r7, #8
 80044b6:	2301      	movs	r3, #1
 80044b8:	2162      	movs	r1, #98	; 0x62
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fec1 	bl	8004242 <lis2mdl_write_reg>
 80044c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044c2:	68fb      	ldr	r3, [r7, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80044d8:	f107 0208 	add.w	r2, r7, #8
 80044dc:	2301      	movs	r3, #1
 80044de:	2162      	movs	r1, #98	; 0x62
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fe96 	bl	8004212 <lis2mdl_read_reg>
 80044e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10f      	bne.n	800450e <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	7a3b      	ldrb	r3, [r7, #8]
 80044f8:	f362 1345 	bfi	r3, r2, #5, #1
 80044fc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80044fe:	f107 0208 	add.w	r2, r7, #8
 8004502:	2301      	movs	r3, #1
 8004504:	2162      	movs	r1, #98	; 0x62
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fe9b 	bl	8004242 <lis2mdl_write_reg>
 800450c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800450e:	68fb      	ldr	r3, [r7, #12]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d103      	bne.n	8004534 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 800452c:	f04f 33ff 	mov.w	r3, #4294967295
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e04d      	b.n	80045d0 <LPS22HH_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	7b1a      	ldrb	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	699a      	ldr	r2, [r3, #24]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <LPS22HH_RegisterBusIO+0xc4>)
 8004570:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1a      	ldr	r2, [pc, #104]	; (80045e0 <LPS22HH_RegisterBusIO+0xc8>)
 8004576:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 8004586:	f04f 33ff 	mov.w	r3, #4294967295
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e020      	b.n	80045d0 <LPS22HH_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4798      	blx	r3
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <LPS22HH_RegisterBusIO+0x8a>
    {
      ret = LPS22HH_ERROR;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	e016      	b.n	80045d0 <LPS22HH_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d112      	bne.n	80045d0 <LPS22HH_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10d      	bne.n	80045d0 <LPS22HH_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80045b4:	2301      	movs	r3, #1
 80045b6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80045b8:	7afb      	ldrb	r3, [r7, #11]
 80045ba:	461a      	mov	r2, r3
 80045bc:	2110      	movs	r1, #16
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9df 	bl	8004982 <LPS22HH_Write_Reg>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <LPS22HH_RegisterBusIO+0xb8>
          {
            ret = LPS22HH_ERROR;
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295
 80045ce:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	08004cab 	.word	0x08004cab
 80045e0:	08004ce1 	.word	0x08004ce1

080045e4 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d108      	bne.n	8004608 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fb0e 	bl	8004c18 <LPS22HH_Initialize>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295
 8004606:	e004      	b.n	8004612 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004628:	2b01      	cmp	r3, #1
 800462a:	d111      	bne.n	8004650 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f877 	bl	8004720 <LPS22HH_PRESS_Disable>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
 800463c:	e00d      	b.n	800465a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f918 	bl	8004874 <LPS22HH_TEMP_Disable>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	e004      	b.n	800465a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	331c      	adds	r3, #28
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fd1a 	bl	80050ac <lps22hh_device_id_get>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 800467e:	f04f 33ff 	mov.w	r3, #4294967295
 8004682:	e000      	b.n	8004686 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2200      	movs	r2, #0
 800469e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2201      	movs	r2, #1
 80046aa:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <LPS22HH_GetCapabilities+0x44>)
 80046be:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <LPS22HH_GetCapabilities+0x44>)
 80046c4:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	43480000 	.word	0x43480000

080046d8 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e014      	b.n	8004718 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f103 021c 	add.w	r2, r3, #28
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f000 fb93 	bl	8004e28 <lps22hh_data_rate_set>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	e004      	b.n	8004718 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e024      	b.n	8004780 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11a      	bne.n	8004776 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f103 021c 	add.w	r2, r3, #28
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	332b      	adds	r3, #43	; 0x2b
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f000 fbb9 	bl	8004ec4 <lps22hh_data_rate_get>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004758:	f04f 33ff 	mov.w	r3, #4294967295
 800475c:	e010      	b.n	8004780 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	331c      	adds	r3, #28
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fb5f 	bl	8004e28 <lps22hh_data_rate_set>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004770:	f04f 33ff 	mov.w	r3, #4294967295
 8004774:	e004      	b.n	8004780 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f90f 	bl	80049b8 <LPS22HH_GetOutputDataRate>
 800479a:	4603      	mov	r3, r0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d106      	bne.n	80047c8 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80047ba:	ed97 0a00 	vldr	s0, [r7]
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f95e 	bl	8004a80 <LPS22HH_SetOutputDataRate_When_Enabled>
 80047c4:	4603      	mov	r3, r0
 80047c6:	e005      	b.n	80047d4 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80047c8:	ed97 0a00 	vldr	s0, [r7]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f9c9 	bl	8004b64 <LPS22HH_SetOutputDataRate_When_Disabled>
 80047d2:	4603      	mov	r3, r0
  }
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80047e6:	f107 030c 	add.w	r3, r7, #12
 80047ea:	2204      	movs	r2, #4
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f016 fdb4 	bl	801b35c <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	331c      	adds	r3, #28
 80047f8:	f107 020c 	add.w	r2, r7, #12
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fc08 	bl	8005014 <lps22hh_pressure_raw_get>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800480a:	f04f 33ff 	mov.w	r3, #4294967295
 800480e:	e009      	b.n	8004824 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fab0 	bl	8004d78 <lps22hh_from_lsb_to_hpa>
 8004818:	eef0 7a40 	vmov.f32	s15, s0
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e014      	b.n	800486c <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f103 021c 	add.w	r2, r3, #28
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f000 fae9 	bl	8004e28 <lps22hh_data_rate_set>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800485c:	f04f 33ff 	mov.w	r3, #4294967295
 8004860:	e004      	b.n	800486c <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	e024      	b.n	80048d4 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004890:	2b00      	cmp	r3, #0
 8004892:	d11a      	bne.n	80048ca <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f103 021c 	add.w	r2, r3, #28
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	332b      	adds	r3, #43	; 0x2b
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f000 fb0f 	bl	8004ec4 <lps22hh_data_rate_get>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
 80048b0:	e010      	b.n	80048d4 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	331c      	adds	r3, #28
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fab5 	bl	8004e28 <lps22hh_data_rate_set>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	e004      	b.n	80048d4 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f865 	bl	80049b8 <LPS22HH_GetOutputDataRate>
 80048ee:	4603      	mov	r3, r0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800490a:	2b01      	cmp	r3, #1
 800490c:	d106      	bne.n	800491c <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800490e:	ed97 0a00 	vldr	s0, [r7]
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f8b4 	bl	8004a80 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004918:	4603      	mov	r3, r0
 800491a:	e005      	b.n	8004928 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800491c:	ed97 0a00 	vldr	s0, [r7]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f91f 	bl	8004b64 <LPS22HH_SetOutputDataRate_When_Disabled>
 8004926:	4603      	mov	r3, r0
  }
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800493a:	f107 030c 	add.w	r3, r7, #12
 800493e:	2202      	movs	r2, #2
 8004940:	2100      	movs	r1, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f016 fd0a 	bl	801b35c <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	331c      	adds	r3, #28
 800494c:	f107 020c 	add.w	r2, r7, #12
 8004950:	4611      	mov	r1, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fb87 	bl	8005066 <lps22hh_temperature_raw_get>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 800495e:	f04f 33ff 	mov.w	r3, #4294967295
 8004962:	e00a      	b.n	800497a <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8004964:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fa1d 	bl	8004da8 <lps22hh_from_lsb_to_celsius>
 800496e:	eef0 7a40 	vmov.f32	s15, s0
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	70fb      	strb	r3, [r7, #3]
 800498e:	4613      	mov	r3, r2
 8004990:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f103 001c 	add.w	r0, r3, #28
 8004998:	1cba      	adds	r2, r7, #2
 800499a:	78f9      	ldrb	r1, [r7, #3]
 800499c:	2301      	movs	r3, #1
 800499e:	f000 f9d2 	bl	8004d46 <lps22hh_write_reg>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ac:	e000      	b.n	80049b0 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	331c      	adds	r3, #28
 80049ca:	f107 020b 	add.w	r2, r7, #11
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fa77 	bl	8004ec4 <lps22hh_data_rate_get>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
 80049e0:	e03d      	b.n	8004a5e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 80049e2:	7afb      	ldrb	r3, [r7, #11]
 80049e4:	2b07      	cmp	r3, #7
 80049e6:	d835      	bhi.n	8004a54 <LPS22HH_GetOutputDataRate+0x9c>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <LPS22HH_GetOutputDataRate+0x38>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a11 	.word	0x08004a11
 80049f4:	08004a1b 	.word	0x08004a1b
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	08004a2d 	.word	0x08004a2d
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a3d 	.word	0x08004a3d
 8004a08:	08004a45 	.word	0x08004a45
 8004a0c:	08004a4d 	.word	0x08004a4d
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
      break;
 8004a18:	e020      	b.n	8004a5c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a20:	601a      	str	r2, [r3, #0]
      break;
 8004a22:	e01b      	b.n	8004a5c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <LPS22HH_GetOutputDataRate+0xb0>)
 8004a28:	601a      	str	r2, [r3, #0]
      break;
 8004a2a:	e017      	b.n	8004a5c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <LPS22HH_GetOutputDataRate+0xb4>)
 8004a30:	601a      	str	r2, [r3, #0]
      break;
 8004a32:	e013      	b.n	8004a5c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <LPS22HH_GetOutputDataRate+0xb8>)
 8004a38:	601a      	str	r2, [r3, #0]
      break;
 8004a3a:	e00f      	b.n	8004a5c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	4a0d      	ldr	r2, [pc, #52]	; (8004a74 <LPS22HH_GetOutputDataRate+0xbc>)
 8004a40:	601a      	str	r2, [r3, #0]
      break;
 8004a42:	e00b      	b.n	8004a5c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <LPS22HH_GetOutputDataRate+0xc0>)
 8004a48:	601a      	str	r2, [r3, #0]
      break;
 8004a4a:	e007      	b.n	8004a5c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <LPS22HH_GetOutputDataRate+0xc4>)
 8004a50:	601a      	str	r2, [r3, #0]
      break;
 8004a52:	e003      	b.n	8004a5c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295
 8004a58:	60fb      	str	r3, [r7, #12]
      break;
 8004a5a:	bf00      	nop
  }

  return ret;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	41200000 	.word	0x41200000
 8004a6c:	41c80000 	.word	0x41c80000
 8004a70:	42480000 	.word	0x42480000
 8004a74:	42960000 	.word	0x42960000
 8004a78:	42c80000 	.word	0x42c80000
 8004a7c:	43480000 	.word	0x43480000

08004a80 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004a8c:	edd7 7a00 	vldr	s15, [r7]
 8004a90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9c:	d801      	bhi.n	8004aa2 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e037      	b.n	8004b12 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004aa2:	edd7 7a00 	vldr	s15, [r7]
 8004aa6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab2:	d801      	bhi.n	8004ab8 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e02c      	b.n	8004b12 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004ab8:	edd7 7a00 	vldr	s15, [r7]
 8004abc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac8:	d801      	bhi.n	8004ace <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8004aca:	2303      	movs	r3, #3
 8004acc:	e021      	b.n	8004b12 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004ace:	edd7 7a00 	vldr	s15, [r7]
 8004ad2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004b58 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8004ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ade:	d801      	bhi.n	8004ae4 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	e016      	b.n	8004b12 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004ae4:	edd7 7a00 	vldr	s15, [r7]
 8004ae8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004b5c <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8004aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af4:	d801      	bhi.n	8004afa <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8004af6:	2305      	movs	r3, #5
 8004af8:	e00b      	b.n	8004b12 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004afa:	edd7 7a00 	vldr	s15, [r7]
 8004afe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004b60 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8004b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0a:	d801      	bhi.n	8004b10 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8004b0c:	2306      	movs	r3, #6
 8004b0e:	e000      	b.n	8004b12 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004b10:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004b12:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	331c      	adds	r3, #28
 8004b18:	7bfa      	ldrb	r2, [r7, #15]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f983 	bl	8004e28 <lps22hh_data_rate_set>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8004b28:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2c:	e00f      	b.n	8004b4e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f103 021c 	add.w	r2, r3, #28
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	332b      	adds	r3, #43	; 0x2b
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f000 f9c2 	bl	8004ec4 <lps22hh_data_rate_get>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8004b46:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4a:	e000      	b.n	8004b4e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	42480000 	.word	0x42480000
 8004b5c:	42960000 	.word	0x42960000
 8004b60:	42c80000 	.word	0x42c80000

08004b64 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004b70:	edd7 7a00 	vldr	s15, [r7]
 8004b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	d801      	bhi.n	8004b86 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e037      	b.n	8004bf6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004b86:	edd7 7a00 	vldr	s15, [r7]
 8004b8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b96:	d801      	bhi.n	8004b9c <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e02c      	b.n	8004bf6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004b9c:	edd7 7a00 	vldr	s15, [r7]
 8004ba0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bac:	d801      	bhi.n	8004bb2 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e021      	b.n	8004bf6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004bb2:	edd7 7a00 	vldr	s15, [r7]
 8004bb6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004c0c <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8004bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	d801      	bhi.n	8004bc8 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	e016      	b.n	8004bf6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004bc8:	edd7 7a00 	vldr	s15, [r7]
 8004bcc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004c10 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8004bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd8:	d801      	bhi.n	8004bde <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8004bda:	2305      	movs	r3, #5
 8004bdc:	e00b      	b.n	8004bf6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004bde:	edd7 7a00 	vldr	s15, [r7]
 8004be2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004c14 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8004be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bee:	d801      	bhi.n	8004bf4 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8004bf0:	2306      	movs	r3, #6
 8004bf2:	e000      	b.n	8004bf6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8004bf4:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	42480000 	.word	0x42480000
 8004c10:	42960000 	.word	0x42960000
 8004c14:	42c80000 	.word	0x42c80000

08004c18 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	331c      	adds	r3, #28
 8004c24:	2111      	movs	r1, #17
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fa9d 	bl	8005166 <lps22hh_i3c_interface_set>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	e034      	b.n	8004ca2 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	331c      	adds	r3, #28
 8004c3c:	2110      	movs	r1, #16
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f8f2 	bl	8004e28 <lps22hh_data_rate_set>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8004c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4e:	e028      	b.n	8004ca2 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	331c      	adds	r3, #28
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fa5f 	bl	800511a <lps22hh_lp_bandwidth_set>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	e01c      	b.n	8004ca2 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	331c      	adds	r3, #28
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f8b4 	bl	8004ddc <lps22hh_block_data_update_set>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7e:	e010      	b.n	8004ca2 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	331c      	adds	r3, #28
 8004c84:	2101      	movs	r1, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fa21 	bl	80050ce <lps22hh_auto_increment_set>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8004c92:	f04f 33ff 	mov.w	r3, #4294967295
 8004c96:	e004      	b.n	8004ca2 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HH_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004caa:	b590      	push	{r4, r7, lr}
 8004cac:	b087      	sub	sp, #28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	72fb      	strb	r3, [r7, #11]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	695c      	ldr	r4, [r3, #20]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	7b1b      	ldrb	r3, [r3, #12]
 8004cca:	b298      	uxth	r0, r3
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
 8004cce:	b299      	uxth	r1, r3
 8004cd0:	893b      	ldrh	r3, [r7, #8]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	47a0      	blx	r4
 8004cd6:	4603      	mov	r3, r0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd90      	pop	{r4, r7, pc}

08004ce0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	460b      	mov	r3, r1
 8004cee:	72fb      	strb	r3, [r7, #11]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	691c      	ldr	r4, [r3, #16]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	7b1b      	ldrb	r3, [r3, #12]
 8004d00:	b298      	uxth	r0, r3
 8004d02:	7afb      	ldrb	r3, [r7, #11]
 8004d04:	b299      	uxth	r1, r3
 8004d06:	893b      	ldrh	r3, [r7, #8]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	47a0      	blx	r4
 8004d0c:	4603      	mov	r3, r0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd90      	pop	{r4, r7, pc}

08004d16 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004d16:	b590      	push	{r4, r7, lr}
 8004d18:	b087      	sub	sp, #28
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	461a      	mov	r2, r3
 8004d22:	460b      	mov	r3, r1
 8004d24:	72fb      	strb	r3, [r7, #11]
 8004d26:	4613      	mov	r3, r2
 8004d28:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685c      	ldr	r4, [r3, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6898      	ldr	r0, [r3, #8]
 8004d32:	893b      	ldrh	r3, [r7, #8]
 8004d34:	7af9      	ldrb	r1, [r7, #11]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	47a0      	blx	r4
 8004d3a:	6178      	str	r0, [r7, #20]

  return ret;
 8004d3c:	697b      	ldr	r3, [r7, #20]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd90      	pop	{r4, r7, pc}

08004d46 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004d46:	b590      	push	{r4, r7, lr}
 8004d48:	b087      	sub	sp, #28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	461a      	mov	r2, r3
 8004d52:	460b      	mov	r3, r1
 8004d54:	72fb      	strb	r3, [r7, #11]
 8004d56:	4613      	mov	r3, r2
 8004d58:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681c      	ldr	r4, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6898      	ldr	r0, [r3, #8]
 8004d62:	893b      	ldrh	r3, [r7, #8]
 8004d64:	7af9      	ldrb	r1, [r7, #11]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	47a0      	blx	r4
 8004d6a:	6178      	str	r0, [r7, #20]

  return ret;
 8004d6c:	697b      	ldr	r3, [r7, #20]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd90      	pop	{r4, r7, pc}
	...

08004d78 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004da4 <lps22hh_from_lsb_to_hpa+0x2c>
 8004d8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d92:	eef0 7a66 	vmov.f32	s15, s13
}
 8004d96:	eeb0 0a67 	vmov.f32	s0, s15
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	49800000 	.word	0x49800000

08004da8 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dbe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004dd8 <lps22hh_from_lsb_to_celsius+0x30>
 8004dc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dc6:	eef0 7a66 	vmov.f32	s15, s13
}
 8004dca:	eeb0 0a67 	vmov.f32	s0, s15
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	42c80000 	.word	0x42c80000

08004ddc <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004de8:	f107 0208 	add.w	r2, r7, #8
 8004dec:	2301      	movs	r3, #1
 8004dee:	2110      	movs	r1, #16
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ff90 	bl	8004d16 <lps22hh_read_reg>
 8004df6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	7a3b      	ldrb	r3, [r7, #8]
 8004e08:	f362 0341 	bfi	r3, r2, #1, #1
 8004e0c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004e0e:	f107 0208 	add.w	r2, r7, #8
 8004e12:	2301      	movs	r3, #1
 8004e14:	2110      	movs	r1, #16
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ff95 	bl	8004d46 <lps22hh_write_reg>
 8004e1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004e34:	f107 0210 	add.w	r2, r7, #16
 8004e38:	2301      	movs	r3, #1
 8004e3a:	2110      	movs	r1, #16
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ff6a 	bl	8004d16 <lps22hh_read_reg>
 8004e42:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d107      	bne.n	8004e5a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004e4a:	f107 020c 	add.w	r2, r7, #12
 8004e4e:	2301      	movs	r3, #1
 8004e50:	2111      	movs	r1, #17
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff ff5f 	bl	8004d16 <lps22hh_read_reg>
 8004e58:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10f      	bne.n	8004e80 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	7c3b      	ldrb	r3, [r7, #16]
 8004e6a:	f362 1306 	bfi	r3, r2, #4, #3
 8004e6e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004e70:	f107 0210 	add.w	r2, r7, #16
 8004e74:	2301      	movs	r3, #1
 8004e76:	2110      	movs	r1, #16
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff64 	bl	8004d46 <lps22hh_write_reg>
 8004e7e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d119      	bne.n	8004eba <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	7b3b      	ldrb	r3, [r7, #12]
 8004e92:	f362 0341 	bfi	r3, r2, #1, #1
 8004e96:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	08db      	lsrs	r3, r3, #3
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	7b3b      	ldrb	r3, [r7, #12]
 8004ea4:	f362 0300 	bfi	r3, r2, #0, #1
 8004ea8:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004eaa:	f107 020c 	add.w	r2, r7, #12
 8004eae:	2301      	movs	r3, #1
 8004eb0:	2111      	movs	r1, #17
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ff47 	bl	8004d46 <lps22hh_write_reg>
 8004eb8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004eba:	697b      	ldr	r3, [r7, #20]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004ece:	f107 0210 	add.w	r2, r7, #16
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	2110      	movs	r1, #16
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff ff1d 	bl	8004d16 <lps22hh_read_reg>
 8004edc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004ee4:	f107 020c 	add.w	r2, r7, #12
 8004ee8:	2301      	movs	r3, #1
 8004eea:	2111      	movs	r1, #17
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff12 	bl	8004d16 <lps22hh_read_reg>
 8004ef2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 8086 	bne.w	8005008 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004efc:	f107 020c 	add.w	r2, r7, #12
 8004f00:	2301      	movs	r3, #1
 8004f02:	2111      	movs	r1, #17
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff ff06 	bl	8004d16 <lps22hh_read_reg>
 8004f0a:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004f0c:	7b3b      	ldrb	r3, [r7, #12]
 8004f0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	011a      	lsls	r2, r3, #4
 8004f16:	7b3b      	ldrb	r3, [r7, #12]
 8004f18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8004f22:	7c3a      	ldrb	r2, [r7, #16]
 8004f24:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004f28:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8004f2a:	4413      	add	r3, r2
 8004f2c:	2b15      	cmp	r3, #21
 8004f2e:	d867      	bhi.n	8005000 <lps22hh_data_rate_get+0x13c>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <lps22hh_data_rate_get+0x74>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f91 	.word	0x08004f91
 8004f3c:	08004fa1 	.word	0x08004fa1
 8004f40:	08004fa9 	.word	0x08004fa9
 8004f44:	08004fb1 	.word	0x08004fb1
 8004f48:	08004fb9 	.word	0x08004fb9
 8004f4c:	08004fc1 	.word	0x08004fc1
 8004f50:	08004ff1 	.word	0x08004ff1
 8004f54:	08004ff9 	.word	0x08004ff9
 8004f58:	08004f99 	.word	0x08004f99
 8004f5c:	08005001 	.word	0x08005001
 8004f60:	08005001 	.word	0x08005001
 8004f64:	08005001 	.word	0x08005001
 8004f68:	08005001 	.word	0x08005001
 8004f6c:	08005001 	.word	0x08005001
 8004f70:	08005001 	.word	0x08005001
 8004f74:	08005001 	.word	0x08005001
 8004f78:	08005001 	.word	0x08005001
 8004f7c:	08004fc9 	.word	0x08004fc9
 8004f80:	08004fd1 	.word	0x08004fd1
 8004f84:	08004fd9 	.word	0x08004fd9
 8004f88:	08004fe1 	.word	0x08004fe1
 8004f8c:	08004fe9 	.word	0x08004fe9
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]
        break;
 8004f96:	e038      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	701a      	strb	r2, [r3, #0]
        break;
 8004f9e:	e034      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
        break;
 8004fa6:	e030      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2202      	movs	r2, #2
 8004fac:	701a      	strb	r2, [r3, #0]
        break;
 8004fae:	e02c      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	701a      	strb	r2, [r3, #0]
        break;
 8004fb6:	e028      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	701a      	strb	r2, [r3, #0]
        break;
 8004fbe:	e024      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2205      	movs	r2, #5
 8004fc4:	701a      	strb	r2, [r3, #0]
        break;
 8004fc6:	e020      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2211      	movs	r2, #17
 8004fcc:	701a      	strb	r2, [r3, #0]
        break;
 8004fce:	e01c      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2212      	movs	r2, #18
 8004fd4:	701a      	strb	r2, [r3, #0]
        break;
 8004fd6:	e018      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2213      	movs	r2, #19
 8004fdc:	701a      	strb	r2, [r3, #0]
        break;
 8004fde:	e014      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2214      	movs	r2, #20
 8004fe4:	701a      	strb	r2, [r3, #0]
        break;
 8004fe6:	e010      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2215      	movs	r2, #21
 8004fec:	701a      	strb	r2, [r3, #0]
        break;
 8004fee:	e00c      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2206      	movs	r2, #6
 8004ff4:	701a      	strb	r2, [r3, #0]
        break;
 8004ff6:	e008      	b.n	800500a <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2207      	movs	r2, #7
 8004ffc:	701a      	strb	r2, [r3, #0]
        break;
 8004ffe:	e004      	b.n	800500a <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
        break;
 8005006:	e000      	b.n	800500a <lps22hh_data_rate_get+0x146>
    }
  }
 8005008:	bf00      	nop

  return ret;
 800500a:	697b      	ldr	r3, [r7, #20]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800501e:	f107 0208 	add.w	r2, r7, #8
 8005022:	2303      	movs	r3, #3
 8005024:	2128      	movs	r1, #40	; 0x28
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fe75 	bl	8004d16 <lps22hh_read_reg>
 800502c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800502e:	7abb      	ldrb	r3, [r7, #10]
 8005030:	461a      	mov	r2, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	7a7a      	ldrb	r2, [r7, #9]
 800503e:	441a      	add	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	7a3a      	ldrb	r2, [r7, #8]
 800504c:	441a      	add	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	021a      	lsls	r2, r3, #8
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	601a      	str	r2, [r3, #0]

  return ret;
 800505c:	68fb      	ldr	r3, [r7, #12]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005070:	f107 0208 	add.w	r2, r7, #8
 8005074:	2302      	movs	r3, #2
 8005076:	212b      	movs	r1, #43	; 0x2b
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fe4c 	bl	8004d16 <lps22hh_read_reg>
 800507e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005080:	7a7b      	ldrb	r3, [r7, #9]
 8005082:	b21a      	sxth	r2, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800508e:	b29b      	uxth	r3, r3
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	b29a      	uxth	r2, r3
 8005094:	7a3b      	ldrb	r3, [r7, #8]
 8005096:	b29b      	uxth	r3, r3
 8005098:	4413      	add	r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	b21a      	sxth	r2, r3
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	801a      	strh	r2, [r3, #0]

  return ret;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80050b6:	2301      	movs	r3, #1
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	210f      	movs	r1, #15
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fe2a 	bl	8004d16 <lps22hh_read_reg>
 80050c2:	60f8      	str	r0, [r7, #12]

  return ret;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80050da:	f107 0208 	add.w	r2, r7, #8
 80050de:	2301      	movs	r3, #1
 80050e0:	2111      	movs	r1, #17
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fe17 	bl	8004d16 <lps22hh_read_reg>
 80050e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10f      	bne.n	8005110 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	7a3b      	ldrb	r3, [r7, #8]
 80050fa:	f362 1304 	bfi	r3, r2, #4, #1
 80050fe:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005100:	f107 0208 	add.w	r2, r7, #8
 8005104:	2301      	movs	r3, #1
 8005106:	2111      	movs	r1, #17
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff fe1c 	bl	8004d46 <lps22hh_write_reg>
 800510e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005110:	68fb      	ldr	r3, [r7, #12]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005126:	f107 0208 	add.w	r2, r7, #8
 800512a:	2301      	movs	r3, #1
 800512c:	2110      	movs	r1, #16
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff fdf1 	bl	8004d16 <lps22hh_read_reg>
 8005134:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10f      	bne.n	800515c <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	b2da      	uxtb	r2, r3
 8005144:	7a3b      	ldrb	r3, [r7, #8]
 8005146:	f362 0383 	bfi	r3, r2, #2, #2
 800514a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800514c:	f107 0208 	add.w	r2, r7, #8
 8005150:	2301      	movs	r3, #1
 8005152:	2110      	movs	r1, #16
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff fdf6 	bl	8004d46 <lps22hh_write_reg>
 800515a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800515c:	68fb      	ldr	r3, [r7, #12]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005172:	f107 0208 	add.w	r2, r7, #8
 8005176:	2301      	movs	r3, #1
 8005178:	210e      	movs	r1, #14
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fdcb 	bl	8004d16 <lps22hh_read_reg>
 8005180:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d118      	bne.n	80051ba <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	b2da      	uxtb	r2, r3
 8005190:	7a3b      	ldrb	r3, [r7, #8]
 8005192:	f362 0341 	bfi	r3, r2, #1, #1
 8005196:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	7a3b      	ldrb	r3, [r7, #8]
 80051a4:	f362 13c7 	bfi	r3, r2, #7, #1
 80051a8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80051aa:	f107 0208 	add.w	r2, r7, #8
 80051ae:	2301      	movs	r3, #1
 80051b0:	210e      	movs	r1, #14
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fdc7 	bl	8004d46 <lps22hh_write_reg>
 80051b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d103      	bne.n	80051e0 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e04d      	b.n	800527c <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	7b1a      	ldrb	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1b      	ldr	r2, [pc, #108]	; (8005288 <LSM6DSO_RegisterBusIO+0xc4>)
 800521c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1a      	ldr	r2, [pc, #104]	; (800528c <LSM6DSO_RegisterBusIO+0xc8>)
 8005222:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d103      	bne.n	800523a <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8005232:	f04f 33ff 	mov.w	r3, #4294967295
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e020      	b.n	800527c <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4798      	blx	r3
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 8005246:	f04f 33ff 	mov.w	r3, #4294967295
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e016      	b.n	800527c <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d112      	bne.n	800527c <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10d      	bne.n	800527c <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005260:	230c      	movs	r3, #12
 8005262:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005264:	7afb      	ldrb	r3, [r7, #11]
 8005266:	461a      	mov	r2, r3
 8005268:	2112      	movs	r1, #18
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 ff59 	bl	8006122 <LSM6DSO_Write_Reg>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 8005276:	f04f 33ff 	mov.w	r3, #4294967295
 800527a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800527c:	68fb      	ldr	r3, [r7, #12]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	080065c5 	.word	0x080065c5
 800528c:	080065fb 	.word	0x080065fb

08005290 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	331c      	adds	r3, #28
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 fe97 	bl	8006fd2 <lsm6dso_i3c_disable_set>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295
 80052ae:	e060      	b.n	8005372 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	331c      	adds	r3, #28
 80052b4:	2101      	movs	r1, #1
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 fe65 	bl	8006f86 <lsm6dso_auto_increment_set>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	e054      	b.n	8005372 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	331c      	adds	r3, #28
 80052cc:	2101      	movs	r1, #1
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 fd66 	bl	8006da0 <lsm6dso_block_data_update_set>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
 80052de:	e048      	b.n	8005372 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	331c      	adds	r3, #28
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 feb9 	bl	800705e <lsm6dso_fifo_mode_set>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80052f2:	f04f 33ff 	mov.w	r3, #4294967295
 80052f6:	e03c      	b.n	8005372 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2204      	movs	r2, #4
 80052fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	331c      	adds	r3, #28
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f001 fa20 	bl	800674c <lsm6dso_xl_data_rate_set>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8005312:	f04f 33ff 	mov.w	r3, #4294967295
 8005316:	e02c      	b.n	8005372 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	331c      	adds	r3, #28
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f001 f9b6 	bl	8006690 <lsm6dso_xl_full_scale_set>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 800532a:	f04f 33ff 	mov.w	r3, #4294967295
 800532e:	e020      	b.n	8005372 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2204      	movs	r2, #4
 8005334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	331c      	adds	r3, #28
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fbd0 	bl	8006ae4 <lsm6dso_gy_data_rate_set>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	e010      	b.n	8005372 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	331c      	adds	r3, #28
 8005354:	2106      	movs	r1, #6
 8005356:	4618      	mov	r0, r3
 8005358:	f001 fb5c 	bl	8006a14 <lsm6dso_gy_full_scale_set>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8005362:	f04f 33ff 	mov.w	r3, #4294967295
 8005366:	e004      	b.n	8005372 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f888 	bl	8005498 <LSM6DSO_ACC_Disable>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800538e:	f04f 33ff 	mov.w	r3, #4294967295
 8005392:	e015      	b.n	80053c0 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fc2e 	bl	8005bf6 <LSM6DSO_GYRO_Disable>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295
 80053a4:	e00c      	b.n	80053c0 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	331c      	adds	r3, #28
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 fdc3 	bl	8006f64 <lsm6dso_device_id_get>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80053e4:	f04f 33ff 	mov.w	r3, #4294967295
 80053e8:	e000      	b.n	80053ec <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2201      	movs	r2, #1
 8005408:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2200      	movs	r2, #0
 800540e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800541c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2210      	movs	r2, #16
 8005422:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	4a07      	ldr	r2, [pc, #28]	; (800544c <LSM6DSO_GetCapabilities+0x58>)
 800542e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4a06      	ldr	r2, [pc, #24]	; (800544c <LSM6DSO_GetCapabilities+0x58>)
 8005434:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	45d02000 	.word	0x45d02000

08005450 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	e014      	b.n	8005490 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f103 021c 	add.w	r2, r3, #28
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f001 f969 	bl	800674c <lsm6dso_xl_data_rate_set>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005480:	f04f 33ff 	mov.w	r3, #4294967295
 8005484:	e004      	b.n	8005490 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e01f      	b.n	80054ee <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f103 021c 	add.w	r2, r3, #28
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	332b      	adds	r3, #43	; 0x2b
 80054b8:	4619      	mov	r1, r3
 80054ba:	4610      	mov	r0, r2
 80054bc:	f001 fa42 	bl	8006944 <lsm6dso_xl_data_rate_get>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	e010      	b.n	80054ee <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	331c      	adds	r3, #28
 80054d0:	2100      	movs	r1, #0
 80054d2:	4618      	mov	r0, r3
 80054d4:	f001 f93a 	bl	800674c <lsm6dso_xl_data_rate_set>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	e004      	b.n	80054ee <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	331c      	adds	r3, #28
 800550a:	f107 020b 	add.w	r2, r7, #11
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f001 f8e3 	bl	80066dc <lsm6dso_xl_full_scale_get>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800551c:	f04f 33ff 	mov.w	r3, #4294967295
 8005520:	e023      	b.n	800556a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005522:	7afb      	ldrb	r3, [r7, #11]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d81b      	bhi.n	8005560 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005541 	.word	0x08005541
 8005534:	08005559 	.word	0x08005559
 8005538:	08005549 	.word	0x08005549
 800553c:	08005551 	.word	0x08005551
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	4a0c      	ldr	r2, [pc, #48]	; (8005574 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005544:	601a      	str	r2, [r3, #0]
      break;
 8005546:	e00f      	b.n	8005568 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	4a0b      	ldr	r2, [pc, #44]	; (8005578 <LSM6DSO_ACC_GetSensitivity+0x80>)
 800554c:	601a      	str	r2, [r3, #0]
      break;
 800554e:	e00b      	b.n	8005568 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005554:	601a      	str	r2, [r3, #0]
      break;
 8005556:	e007      	b.n	8005568 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	4a09      	ldr	r2, [pc, #36]	; (8005580 <LSM6DSO_ACC_GetSensitivity+0x88>)
 800555c:	601a      	str	r2, [r3, #0]
      break;
 800555e:	e003      	b.n	8005568 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005560:	f04f 33ff 	mov.w	r3, #4294967295
 8005564:	60fb      	str	r3, [r7, #12]
      break;
 8005566:	bf00      	nop
  }

  return ret;
 8005568:	68fb      	ldr	r3, [r7, #12]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	3d79db23 	.word	0x3d79db23
 8005578:	3df9db23 	.word	0x3df9db23
 800557c:	3e79db23 	.word	0x3e79db23
 8005580:	3ef9db23 	.word	0x3ef9db23

08005584 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	331c      	adds	r3, #28
 8005596:	f107 020b 	add.w	r2, r7, #11
 800559a:	4611      	mov	r1, r2
 800559c:	4618      	mov	r0, r3
 800559e:	f001 f9d1 	bl	8006944 <lsm6dso_xl_data_rate_get>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80055a8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ac:	e054      	b.n	8005658 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80055ae:	7afb      	ldrb	r3, [r7, #11]
 80055b0:	2b0b      	cmp	r3, #11
 80055b2:	d84c      	bhi.n	800564e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80055b4:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	080055ed 	.word	0x080055ed
 80055c0:	080055ff 	.word	0x080055ff
 80055c4:	08005607 	.word	0x08005607
 80055c8:	0800560f 	.word	0x0800560f
 80055cc:	08005617 	.word	0x08005617
 80055d0:	0800561f 	.word	0x0800561f
 80055d4:	08005627 	.word	0x08005627
 80055d8:	0800562f 	.word	0x0800562f
 80055dc:	08005637 	.word	0x08005637
 80055e0:	0800563f 	.word	0x0800563f
 80055e4:	08005647 	.word	0x08005647
 80055e8:	080055f7 	.word	0x080055f7
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
      break;
 80055f4:	e02f      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	4a19      	ldr	r2, [pc, #100]	; (8005660 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80055fa:	601a      	str	r2, [r3, #0]
      break;
 80055fc:	e02b      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	4a18      	ldr	r2, [pc, #96]	; (8005664 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8005602:	601a      	str	r2, [r3, #0]
      break;
 8005604:	e027      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800560a:	601a      	str	r2, [r3, #0]
      break;
 800560c:	e023      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	4a16      	ldr	r2, [pc, #88]	; (800566c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8005612:	601a      	str	r2, [r3, #0]
      break;
 8005614:	e01f      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	4a15      	ldr	r2, [pc, #84]	; (8005670 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800561a:	601a      	str	r2, [r3, #0]
      break;
 800561c:	e01b      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	4a14      	ldr	r2, [pc, #80]	; (8005674 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8005622:	601a      	str	r2, [r3, #0]
      break;
 8005624:	e017      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800562a:	601a      	str	r2, [r3, #0]
      break;
 800562c:	e013      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	4a12      	ldr	r2, [pc, #72]	; (800567c <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8005632:	601a      	str	r2, [r3, #0]
      break;
 8005634:	e00f      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	4a11      	ldr	r2, [pc, #68]	; (8005680 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800563a:	601a      	str	r2, [r3, #0]
      break;
 800563c:	e00b      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	4a10      	ldr	r2, [pc, #64]	; (8005684 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8005642:	601a      	str	r2, [r3, #0]
      break;
 8005644:	e007      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	4a0f      	ldr	r2, [pc, #60]	; (8005688 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 800564a:	601a      	str	r2, [r3, #0]
      break;
 800564c:	e003      	b.n	8005656 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 800564e:	f04f 33ff 	mov.w	r3, #4294967295
 8005652:	60fb      	str	r3, [r7, #12]
      break;
 8005654:	bf00      	nop
  }

  return ret;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	3fcccccd 	.word	0x3fcccccd
 8005664:	41480000 	.word	0x41480000
 8005668:	41d00000 	.word	0x41d00000
 800566c:	42500000 	.word	0x42500000
 8005670:	42d00000 	.word	0x42d00000
 8005674:	43500000 	.word	0x43500000
 8005678:	43d08000 	.word	0x43d08000
 800567c:	44504000 	.word	0x44504000
 8005680:	44d06000 	.word	0x44d06000
 8005684:	45505000 	.word	0x45505000
 8005688:	45d05800 	.word	0x45d05800

0800568c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8005698:	2100      	movs	r1, #0
 800569a:	ed97 0a00 	vldr	s0, [r7]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f806 	bl	80056b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80056a4:	4603      	mov	r3, r0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	; 0x30
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80056bc:	460b      	mov	r3, r1
 80056be:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	f000 80ea 	beq.w	80058a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	f300 8163 	bgt.w	800599c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d074      	beq.n	80057c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80056de:	e15d      	b.n	800599c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f103 001c 	add.w	r0, r3, #28
 80056e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80056ea:	2301      	movs	r3, #1
 80056ec:	2114      	movs	r1, #20
 80056ee:	f000 ff9f 	bl	8006630 <lsm6dso_read_reg>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80056f8:	f04f 33ff 	mov.w	r3, #4294967295
 80056fc:	e16c      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80056fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d025      	beq.n	8005758 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005712:	2b01      	cmp	r3, #1
 8005714:	d10b      	bne.n	800572e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	331c      	adds	r3, #28
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f001 f815 	bl	800674c <lsm6dso_xl_data_rate_set>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8005728:	f04f 33ff 	mov.w	r3, #4294967295
 800572c:	e154      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800572e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005732:	f36f 13c7 	bfc	r3, #7, #1
 8005736:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f103 001c 	add.w	r0, r3, #28
 8005740:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005744:	2301      	movs	r3, #1
 8005746:	2114      	movs	r1, #20
 8005748:	f000 ff8a 	bl	8006660 <lsm6dso_write_reg>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	e13f      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f103 001c 	add.w	r0, r3, #28
 800575e:	f107 0220 	add.w	r2, r7, #32
 8005762:	2301      	movs	r3, #1
 8005764:	2115      	movs	r1, #21
 8005766:	f000 ff63 	bl	8006630 <lsm6dso_read_reg>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8005770:	f04f 33ff 	mov.w	r3, #4294967295
 8005774:	e130      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d014      	beq.n	80057ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8005784:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005788:	f36f 1304 	bfc	r3, #4, #1
 800578c:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f103 001c 	add.w	r0, r3, #28
 8005796:	f107 0220 	add.w	r2, r7, #32
 800579a:	2301      	movs	r3, #1
 800579c:	2115      	movs	r1, #21
 800579e:	f000 ff5f 	bl	8006660 <lsm6dso_write_reg>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	e114      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80057ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80057b2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80057b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057be:	d400      	bmi.n	80057c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80057c0:	e0f0      	b.n	80059a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80057c2:	4b87      	ldr	r3, [pc, #540]	; (80059e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c6:	e0ed      	b.n	80059a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f103 001c 	add.w	r0, r3, #28
 80057ce:	f107 021c 	add.w	r2, r7, #28
 80057d2:	2301      	movs	r3, #1
 80057d4:	2114      	movs	r1, #20
 80057d6:	f000 ff2b 	bl	8006630 <lsm6dso_read_reg>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80057e0:	f04f 33ff 	mov.w	r3, #4294967295
 80057e4:	e0f8      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80057e6:	7f3b      	ldrb	r3, [r7, #28]
 80057e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d023      	beq.n	800583a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d10b      	bne.n	8005814 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	331c      	adds	r3, #28
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f000 ffa2 	bl	800674c <lsm6dso_xl_data_rate_set>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800580e:	f04f 33ff 	mov.w	r3, #4294967295
 8005812:	e0e1      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005814:	7f3b      	ldrb	r3, [r7, #28]
 8005816:	f36f 13c7 	bfc	r3, #7, #1
 800581a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f103 001c 	add.w	r0, r3, #28
 8005822:	f107 021c 	add.w	r2, r7, #28
 8005826:	2301      	movs	r3, #1
 8005828:	2114      	movs	r1, #20
 800582a:	f000 ff19 	bl	8006660 <lsm6dso_write_reg>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8005834:	f04f 33ff 	mov.w	r3, #4294967295
 8005838:	e0ce      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f103 001c 	add.w	r0, r3, #28
 8005840:	f107 0218 	add.w	r2, r7, #24
 8005844:	2301      	movs	r3, #1
 8005846:	2115      	movs	r1, #21
 8005848:	f000 fef2 	bl	8006630 <lsm6dso_read_reg>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	e0bf      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8005858:	7e3b      	ldrb	r3, [r7, #24]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d112      	bne.n	800588a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8005864:	7e3b      	ldrb	r3, [r7, #24]
 8005866:	f043 0310 	orr.w	r3, r3, #16
 800586a:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f103 001c 	add.w	r0, r3, #28
 8005872:	f107 0218 	add.w	r2, r7, #24
 8005876:	2301      	movs	r3, #1
 8005878:	2115      	movs	r1, #21
 800587a:	f000 fef1 	bl	8006660 <lsm6dso_write_reg>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8005884:	f04f 33ff 	mov.w	r3, #4294967295
 8005888:	e0a6      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800588a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800588e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80059e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589a:	dc00      	bgt.n	800589e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 800589c:	e082      	b.n	80059a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800589e:	4b52      	ldr	r3, [pc, #328]	; (80059e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a2:	e07f      	b.n	80059a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f103 001c 	add.w	r0, r3, #28
 80058aa:	f107 0210 	add.w	r2, r7, #16
 80058ae:	2301      	movs	r3, #1
 80058b0:	2115      	movs	r1, #21
 80058b2:	f000 febd 	bl	8006630 <lsm6dso_read_reg>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 80058bc:	f04f 33ff 	mov.w	r3, #4294967295
 80058c0:	e08a      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80058c2:	7c3b      	ldrb	r3, [r7, #16]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d012      	beq.n	80058f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 80058ce:	7c3b      	ldrb	r3, [r7, #16]
 80058d0:	f36f 1304 	bfc	r3, #4, #1
 80058d4:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f103 001c 	add.w	r0, r3, #28
 80058dc:	f107 0210 	add.w	r2, r7, #16
 80058e0:	2301      	movs	r3, #1
 80058e2:	2115      	movs	r1, #21
 80058e4:	f000 febc 	bl	8006660 <lsm6dso_write_reg>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 80058ee:	f04f 33ff 	mov.w	r3, #4294967295
 80058f2:	e071      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d108      	bne.n	8005910 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f979 	bl	8005bf6 <LSM6DSO_GYRO_Disable>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	e063      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f103 001c 	add.w	r0, r3, #28
 8005916:	f107 0214 	add.w	r2, r7, #20
 800591a:	2301      	movs	r3, #1
 800591c:	2114      	movs	r1, #20
 800591e:	f000 fe87 	bl	8006630 <lsm6dso_read_reg>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
 800592c:	e054      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800592e:	7d3b      	ldrb	r3, [r7, #20]
 8005930:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d123      	bne.n	8005982 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005940:	2b01      	cmp	r3, #1
 8005942:	d10b      	bne.n	800595c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	331c      	adds	r3, #28
 8005948:	2100      	movs	r1, #0
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fefe 	bl	800674c <lsm6dso_xl_data_rate_set>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	e03d      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 800595c:	7d3b      	ldrb	r3, [r7, #20]
 800595e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005962:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f103 001c 	add.w	r0, r3, #28
 800596a:	f107 0214 	add.w	r2, r7, #20
 800596e:	2301      	movs	r3, #1
 8005970:	2114      	movs	r1, #20
 8005972:	f000 fe75 	bl	8006660 <lsm6dso_write_reg>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 800597c:	f04f 33ff 	mov.w	r3, #4294967295
 8005980:	e02a      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005982:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005986:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80059e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800598a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800598e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005992:	dc00      	bgt.n	8005996 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8005994:	e006      	b.n	80059a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
 800599a:	e003      	b.n	80059a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 800599c:	f04f 33ff 	mov.w	r3, #4294967295
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80059a2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d102      	bne.n	80059b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	e012      	b.n	80059d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d106      	bne.n	80059ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80059bc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fbc9 	bl	8006158 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80059c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80059c8:	e005      	b.n	80059d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80059ca:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fc5a 	bl	8006288 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80059d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3730      	adds	r7, #48	; 0x30
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	41480000 	.word	0x41480000
 80059e4:	43500000 	.word	0x43500000
 80059e8:	43500000 	.word	0x43500000

080059ec <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	331c      	adds	r3, #28
 80059fe:	f107 020b 	add.w	r2, r7, #11
 8005a02:	4611      	mov	r1, r2
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fe69 	bl	80066dc <lsm6dso_xl_full_scale_get>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	e023      	b.n	8005a5e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005a16:	7afb      	ldrb	r3, [r7, #11]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d81b      	bhi.n	8005a54 <LSM6DSO_ACC_GetFullScale+0x68>
 8005a1c:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <LSM6DSO_ACC_GetFullScale+0x38>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a35 	.word	0x08005a35
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a45 	.word	0x08005a45
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2202      	movs	r2, #2
 8005a38:	601a      	str	r2, [r3, #0]
      break;
 8005a3a:	e00f      	b.n	8005a5c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	601a      	str	r2, [r3, #0]
      break;
 8005a42:	e00b      	b.n	8005a5c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2208      	movs	r2, #8
 8005a48:	601a      	str	r2, [r3, #0]
      break;
 8005a4a:	e007      	b.n	8005a5c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2210      	movs	r2, #16
 8005a50:	601a      	str	r2, [r3, #0]
      break;
 8005a52:	e003      	b.n	8005a5c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
 8005a58:	60fb      	str	r3, [r7, #12]
      break;
 8005a5a:	bf00      	nop
  }

  return ret;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop

08005a68 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	dd0b      	ble.n	8005a90 <LSM6DSO_ACC_SetFullScale+0x28>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	dd06      	ble.n	8005a8c <LSM6DSO_ACC_SetFullScale+0x24>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	dc01      	bgt.n	8005a88 <LSM6DSO_ACC_SetFullScale+0x20>
 8005a84:	2303      	movs	r3, #3
 8005a86:	e004      	b.n	8005a92 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e002      	b.n	8005a92 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e000      	b.n	8005a92 <LSM6DSO_ACC_SetFullScale+0x2a>
 8005a90:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8005a92:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	331c      	adds	r3, #28
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fdf7 	bl	8006690 <lsm6dso_xl_full_scale_set>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	e000      	b.n	8005ab0 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	331c      	adds	r3, #28
 8005ac6:	f107 0208 	add.w	r2, r7, #8
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 f9d8 	bl	8006e82 <lsm6dso_acceleration_raw_get>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8005adc:	e00c      	b.n	8005af8 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005ade:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005ae6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005aee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	331c      	adds	r3, #28
 8005b14:	f107 0210 	add.w	r2, r7, #16
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 f9b1 	bl	8006e82 <lsm6dso_acceleration_raw_get>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8005b26:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2a:	e03c      	b.n	8005ba6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005b2c:	f107 030c 	add.w	r3, r7, #12
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff fce0 	bl	80054f8 <LSM6DSO_ACC_GetSensitivity>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b42:	e030      	b.n	8005ba6 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8005b44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b48:	ee07 3a90 	vmov	s15, r3
 8005b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b50:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b5c:	ee17 2a90 	vmov	r2, s15
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8005b64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b70:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b7c:	ee17 2a90 	vmov	r2, s15
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8005b84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b88:	ee07 3a90 	vmov	s15, r3
 8005b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b9c:	ee17 2a90 	vmov	r2, s15
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e014      	b.n	8005bee <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f103 021c 	add.w	r2, r3, #28
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f000 ff86 	bl	8006ae4 <lsm6dso_gy_data_rate_set>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005bde:	f04f 33ff 	mov.w	r3, #4294967295
 8005be2:	e004      	b.n	8005bee <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e01f      	b.n	8005c4c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f103 021c 	add.w	r2, r3, #28
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	332c      	adds	r3, #44	; 0x2c
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f001 f85f 	bl	8006cdc <lsm6dso_gy_data_rate_get>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005c24:	f04f 33ff 	mov.w	r3, #4294967295
 8005c28:	e010      	b.n	8005c4c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	331c      	adds	r3, #28
 8005c2e:	2100      	movs	r1, #0
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 ff57 	bl	8006ae4 <lsm6dso_gy_data_rate_set>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c40:	e004      	b.n	8005c4c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	331c      	adds	r3, #28
 8005c66:	f107 020b 	add.w	r2, r7, #11
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fef7 	bl	8006a60 <lsm6dso_gy_full_scale_get>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005c78:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7c:	e02d      	b.n	8005cda <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	2b06      	cmp	r3, #6
 8005c82:	d825      	bhi.n	8005cd0 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8005c84:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005ca9 	.word	0x08005ca9
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cd1 	.word	0x08005cd1
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cd1 	.word	0x08005cd1
 8005ca4:	08005cc9 	.word	0x08005cc9
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	4a0e      	ldr	r2, [pc, #56]	; (8005ce4 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8005cac:	601a      	str	r2, [r3, #0]
      break;
 8005cae:	e013      	b.n	8005cd8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	4a0d      	ldr	r2, [pc, #52]	; (8005ce8 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8005cb4:	601a      	str	r2, [r3, #0]
      break;
 8005cb6:	e00f      	b.n	8005cd8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	4a0c      	ldr	r2, [pc, #48]	; (8005cec <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8005cbc:	601a      	str	r2, [r3, #0]
      break;
 8005cbe:	e00b      	b.n	8005cd8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	4a0b      	ldr	r2, [pc, #44]	; (8005cf0 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8005cc4:	601a      	str	r2, [r3, #0]
      break;
 8005cc6:	e007      	b.n	8005cd8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	4a0a      	ldr	r2, [pc, #40]	; (8005cf4 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8005ccc:	601a      	str	r2, [r3, #0]
      break;
 8005cce:	e003      	b.n	8005cd8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8005cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd4:	60fb      	str	r3, [r7, #12]
      break;
 8005cd6:	bf00      	nop
  }

  return ret;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	408c0000 	.word	0x408c0000
 8005ce8:	410c0000 	.word	0x410c0000
 8005cec:	418c0000 	.word	0x418c0000
 8005cf0:	420c0000 	.word	0x420c0000
 8005cf4:	428c0000 	.word	0x428c0000

08005cf8 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	331c      	adds	r3, #28
 8005d0a:	f107 020b 	add.w	r2, r7, #11
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ffe3 	bl	8006cdc <lsm6dso_gy_data_rate_get>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d20:	e04e      	b.n	8005dc0 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8005d22:	7afb      	ldrb	r3, [r7, #11]
 8005d24:	2b0a      	cmp	r3, #10
 8005d26:	d846      	bhi.n	8005db6 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d5d 	.word	0x08005d5d
 8005d34:	08005d67 	.word	0x08005d67
 8005d38:	08005d6f 	.word	0x08005d6f
 8005d3c:	08005d77 	.word	0x08005d77
 8005d40:	08005d7f 	.word	0x08005d7f
 8005d44:	08005d87 	.word	0x08005d87
 8005d48:	08005d8f 	.word	0x08005d8f
 8005d4c:	08005d97 	.word	0x08005d97
 8005d50:	08005d9f 	.word	0x08005d9f
 8005d54:	08005da7 	.word	0x08005da7
 8005d58:	08005daf 	.word	0x08005daf
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
      break;
 8005d64:	e02b      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8005d6a:	601a      	str	r2, [r3, #0]
      break;
 8005d6c:	e027      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8005d72:	601a      	str	r2, [r3, #0]
      break;
 8005d74:	e023      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8005d7a:	601a      	str	r2, [r3, #0]
      break;
 8005d7c:	e01f      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	4a14      	ldr	r2, [pc, #80]	; (8005dd4 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8005d82:	601a      	str	r2, [r3, #0]
      break;
 8005d84:	e01b      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8005d8a:	601a      	str	r2, [r3, #0]
      break;
 8005d8c:	e017      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8005d92:	601a      	str	r2, [r3, #0]
      break;
 8005d94:	e013      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	4a11      	ldr	r2, [pc, #68]	; (8005de0 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8005d9a:	601a      	str	r2, [r3, #0]
      break;
 8005d9c:	e00f      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	4a10      	ldr	r2, [pc, #64]	; (8005de4 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8005da2:	601a      	str	r2, [r3, #0]
      break;
 8005da4:	e00b      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	4a0f      	ldr	r2, [pc, #60]	; (8005de8 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8005daa:	601a      	str	r2, [r3, #0]
      break;
 8005dac:	e007      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	4a0e      	ldr	r2, [pc, #56]	; (8005dec <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8005db2:	601a      	str	r2, [r3, #0]
      break;
 8005db4:	e003      	b.n	8005dbe <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8005db6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dba:	60fb      	str	r3, [r7, #12]
      break;
 8005dbc:	bf00      	nop
  }

  return ret;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	41480000 	.word	0x41480000
 8005dcc:	41d00000 	.word	0x41d00000
 8005dd0:	42500000 	.word	0x42500000
 8005dd4:	42d00000 	.word	0x42d00000
 8005dd8:	43500000 	.word	0x43500000
 8005ddc:	43d08000 	.word	0x43d08000
 8005de0:	44504000 	.word	0x44504000
 8005de4:	44d06000 	.word	0x44d06000
 8005de8:	45505000 	.word	0x45505000
 8005dec:	45d05800 	.word	0x45d05800

08005df0 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	ed97 0a00 	vldr	s0, [r7]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f806 	bl	8005e14 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005e08:	4603      	mov	r3, r0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e20:	460b      	mov	r3, r1
 8005e22:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d028      	beq.n	8005e88 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8005e36:	e05c      	b.n	8005ef2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f103 001c 	add.w	r0, r3, #28
 8005e3e:	f107 0214 	add.w	r2, r7, #20
 8005e42:	2301      	movs	r3, #1
 8005e44:	2116      	movs	r1, #22
 8005e46:	f000 fbf3 	bl	8006630 <lsm6dso_read_reg>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005e50:	f04f 33ff 	mov.w	r3, #4294967295
 8005e54:	e06c      	b.n	8005f30 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8005e56:	7d3b      	ldrb	r3, [r7, #20]
 8005e58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d04b      	beq.n	8005efa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005e62:	7d3b      	ldrb	r3, [r7, #20]
 8005e64:	f36f 13c7 	bfc	r3, #7, #1
 8005e68:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f103 001c 	add.w	r0, r3, #28
 8005e70:	f107 0214 	add.w	r2, r7, #20
 8005e74:	2301      	movs	r3, #1
 8005e76:	2116      	movs	r1, #22
 8005e78:	f000 fbf2 	bl	8006660 <lsm6dso_write_reg>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d03b      	beq.n	8005efa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8005e82:	f04f 33ff 	mov.w	r3, #4294967295
 8005e86:	e053      	b.n	8005f30 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f103 001c 	add.w	r0, r3, #28
 8005e8e:	f107 0210 	add.w	r2, r7, #16
 8005e92:	2301      	movs	r3, #1
 8005e94:	2116      	movs	r1, #22
 8005e96:	f000 fbcb 	bl	8006630 <lsm6dso_read_reg>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea4:	e044      	b.n	8005f30 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8005ea6:	7c3b      	ldrb	r3, [r7, #16]
 8005ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d112      	bne.n	8005ed8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8005eb2:	7c3b      	ldrb	r3, [r7, #16]
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f103 001c 	add.w	r0, r3, #28
 8005ec0:	f107 0210 	add.w	r2, r7, #16
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	2116      	movs	r1, #22
 8005ec8:	f000 fbca 	bl	8006660 <lsm6dso_write_reg>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8005ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed6:	e02b      	b.n	8005f30 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005ed8:	edd7 7a06 	vldr	s15, [r7, #24]
 8005edc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005f38 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8005ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee8:	dc00      	bgt.n	8005eec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8005eea:	e007      	b.n	8005efc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8005eee:	61bb      	str	r3, [r7, #24]
 8005ef0:	e004      	b.n	8005efc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef6:	61fb      	str	r3, [r7, #28]
      break;
 8005ef8:	e000      	b.n	8005efc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8005efa:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d102      	bne.n	8005f0a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
 8005f08:	e012      	b.n	8005f30 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d106      	bne.n	8005f22 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005f14:	ed97 0a06 	vldr	s0, [r7, #24]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fa45 	bl	80063a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8005f1e:	61f8      	str	r0, [r7, #28]
 8005f20:	e005      	b.n	8005f2e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005f22:	ed97 0a06 	vldr	s0, [r7, #24]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 faca 	bl	80064c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8005f2c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8005f2e:	69fb      	ldr	r3, [r7, #28]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	43500000 	.word	0x43500000
 8005f3c:	43500000 	.word	0x43500000

08005f40 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	331c      	adds	r3, #28
 8005f52:	f107 020b 	add.w	r2, r7, #11
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fd81 	bl	8006a60 <lsm6dso_gy_full_scale_get>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005f64:	f04f 33ff 	mov.w	r3, #4294967295
 8005f68:	e030      	b.n	8005fcc <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
 8005f6c:	2b06      	cmp	r3, #6
 8005f6e:	d828      	bhi.n	8005fc2 <LSM6DSO_GYRO_GetFullScale+0x82>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005f95 	.word	0x08005f95
 8005f80:	08005fa5 	.word	0x08005fa5
 8005f84:	08005fc3 	.word	0x08005fc3
 8005f88:	08005faf 	.word	0x08005faf
 8005f8c:	08005fc3 	.word	0x08005fc3
 8005f90:	08005fb9 	.word	0x08005fb9
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	227d      	movs	r2, #125	; 0x7d
 8005f98:	601a      	str	r2, [r3, #0]
      break;
 8005f9a:	e016      	b.n	8005fca <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	22fa      	movs	r2, #250	; 0xfa
 8005fa0:	601a      	str	r2, [r3, #0]
      break;
 8005fa2:	e012      	b.n	8005fca <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005faa:	601a      	str	r2, [r3, #0]
      break;
 8005fac:	e00d      	b.n	8005fca <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fb4:	601a      	str	r2, [r3, #0]
      break;
 8005fb6:	e008      	b.n	8005fca <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005fbe:	601a      	str	r2, [r3, #0]
      break;
 8005fc0:	e003      	b.n	8005fca <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	60fb      	str	r3, [r7, #12]
      break;
 8005fc8:	bf00      	nop
  }

  return ret;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b7d      	cmp	r3, #125	; 0x7d
 8005fe2:	dd12      	ble.n	800600a <LSM6DSO_GYRO_SetFullScale+0x36>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2bfa      	cmp	r3, #250	; 0xfa
 8005fe8:	dd0d      	ble.n	8006006 <LSM6DSO_GYRO_SetFullScale+0x32>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ff0:	dd07      	ble.n	8006002 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ff8:	dc01      	bgt.n	8005ffe <LSM6DSO_GYRO_SetFullScale+0x2a>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	e006      	b.n	800600c <LSM6DSO_GYRO_SetFullScale+0x38>
 8005ffe:	2306      	movs	r3, #6
 8006000:	e004      	b.n	800600c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006002:	2302      	movs	r3, #2
 8006004:	e002      	b.n	800600c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006006:	2300      	movs	r3, #0
 8006008:	e000      	b.n	800600c <LSM6DSO_GYRO_SetFullScale+0x38>
 800600a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 800600c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	331c      	adds	r3, #28
 8006012:	7bfa      	ldrb	r2, [r7, #15]
 8006014:	4611      	mov	r1, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fcfc 	bl	8006a14 <lsm6dso_gy_full_scale_set>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006022:	f04f 33ff 	mov.w	r3, #4294967295
 8006026:	e000      	b.n	800602a <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	331c      	adds	r3, #28
 8006040:	f107 0208 	add.w	r2, r7, #8
 8006044:	4611      	mov	r1, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fed0 	bl	8006dec <lsm6dso_angular_rate_raw_get>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	e00c      	b.n	8006072 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006058:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006060:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006068:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	331c      	adds	r3, #28
 8006088:	f107 0210 	add.w	r2, r7, #16
 800608c:	4611      	mov	r1, r2
 800608e:	4618      	mov	r0, r3
 8006090:	f000 feac 	bl	8006dec <lsm6dso_angular_rate_raw_get>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 800609a:	f04f 33ff 	mov.w	r3, #4294967295
 800609e:	e03c      	b.n	800611a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80060a0:	f107 030c 	add.w	r3, r7, #12
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fdd4 	bl	8005c54 <LSM6DSO_GYRO_GetSensitivity>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80060b2:	f04f 33ff 	mov.w	r3, #4294967295
 80060b6:	e030      	b.n	800611a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80060b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80060c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060d0:	ee17 2a90 	vmov	r2, s15
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80060d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060dc:	ee07 3a90 	vmov	s15, r3
 80060e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80060e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060f0:	ee17 2a90 	vmov	r2, s15
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80060f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006104:	edd7 7a03 	vldr	s15, [r7, #12]
 8006108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006110:	ee17 2a90 	vmov	r2, s15
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
 800612e:	4613      	mov	r3, r2
 8006130:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f103 001c 	add.w	r0, r3, #28
 8006138:	1cba      	adds	r2, r7, #2
 800613a:	78f9      	ldrb	r1, [r7, #3]
 800613c:	2301      	movs	r3, #1
 800613e:	f000 fa8f 	bl	8006660 <lsm6dso_write_reg>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006148:	f04f 33ff 	mov.w	r3, #4294967295
 800614c:	e000      	b.n	8006150 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006164:	edd7 7a00 	vldr	s15, [r7]
 8006168:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006268 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 800616c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006174:	d801      	bhi.n	800617a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006176:	230b      	movs	r3, #11
 8006178:	e063      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800617a:	edd7 7a00 	vldr	s15, [r7]
 800617e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618a:	d801      	bhi.n	8006190 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 800618c:	2301      	movs	r3, #1
 800618e:	e058      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006190:	edd7 7a00 	vldr	s15, [r7]
 8006194:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800619c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a0:	d801      	bhi.n	80061a6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e04d      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80061a6:	edd7 7a00 	vldr	s15, [r7]
 80061aa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800626c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80061ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b6:	d801      	bhi.n	80061bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80061b8:	2303      	movs	r3, #3
 80061ba:	e042      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80061bc:	edd7 7a00 	vldr	s15, [r7]
 80061c0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006270 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80061c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061cc:	d801      	bhi.n	80061d2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80061ce:	2304      	movs	r3, #4
 80061d0:	e037      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80061d2:	edd7 7a00 	vldr	s15, [r7]
 80061d6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006274 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80061da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e2:	d801      	bhi.n	80061e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80061e4:	2305      	movs	r3, #5
 80061e6:	e02c      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80061e8:	edd7 7a00 	vldr	s15, [r7]
 80061ec:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006278 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80061f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f8:	d801      	bhi.n	80061fe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80061fa:	2306      	movs	r3, #6
 80061fc:	e021      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80061fe:	edd7 7a00 	vldr	s15, [r7]
 8006202:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800627c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800620a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620e:	d801      	bhi.n	8006214 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006210:	2307      	movs	r3, #7
 8006212:	e016      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006214:	edd7 7a00 	vldr	s15, [r7]
 8006218:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006280 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 800621c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006224:	d801      	bhi.n	800622a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006226:	2308      	movs	r3, #8
 8006228:	e00b      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800622a:	edd7 7a00 	vldr	s15, [r7]
 800622e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006284 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623a:	d801      	bhi.n	8006240 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800623c:	2309      	movs	r3, #9
 800623e:	e000      	b.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006240:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006242:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	331c      	adds	r3, #28
 8006248:	7bfa      	ldrb	r2, [r7, #15]
 800624a:	4611      	mov	r1, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fa7d 	bl	800674c <lsm6dso_xl_data_rate_set>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006258:	f04f 33ff 	mov.w	r3, #4294967295
 800625c:	e000      	b.n	8006260 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	3fcccccd 	.word	0x3fcccccd
 800626c:	42500000 	.word	0x42500000
 8006270:	42d00000 	.word	0x42d00000
 8006274:	43500000 	.word	0x43500000
 8006278:	43d08000 	.word	0x43d08000
 800627c:	44504000 	.word	0x44504000
 8006280:	44d06000 	.word	0x44d06000
 8006284:	45505000 	.word	0x45505000

08006288 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006294:	edd7 7a00 	vldr	s15, [r7]
 8006298:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006388 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 800629c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a4:	d801      	bhi.n	80062aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80062a6:	230b      	movs	r3, #11
 80062a8:	e063      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80062aa:	edd7 7a00 	vldr	s15, [r7]
 80062ae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80062b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	d801      	bhi.n	80062c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80062bc:	2301      	movs	r3, #1
 80062be:	e058      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80062c0:	edd7 7a00 	vldr	s15, [r7]
 80062c4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80062c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d0:	d801      	bhi.n	80062d6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80062d2:	2302      	movs	r3, #2
 80062d4:	e04d      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80062d6:	edd7 7a00 	vldr	s15, [r7]
 80062da:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800638c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80062de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e6:	d801      	bhi.n	80062ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80062e8:	2303      	movs	r3, #3
 80062ea:	e042      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80062ec:	edd7 7a00 	vldr	s15, [r7]
 80062f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006390 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80062f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062fc:	d801      	bhi.n	8006302 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80062fe:	2304      	movs	r3, #4
 8006300:	e037      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006302:	edd7 7a00 	vldr	s15, [r7]
 8006306:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006394 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800630a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800630e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006312:	d801      	bhi.n	8006318 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006314:	2305      	movs	r3, #5
 8006316:	e02c      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006318:	edd7 7a00 	vldr	s15, [r7]
 800631c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006398 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006328:	d801      	bhi.n	800632e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800632a:	2306      	movs	r3, #6
 800632c:	e021      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800632e:	edd7 7a00 	vldr	s15, [r7]
 8006332:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800639c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800633a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633e:	d801      	bhi.n	8006344 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006340:	2307      	movs	r3, #7
 8006342:	e016      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006344:	edd7 7a00 	vldr	s15, [r7]
 8006348:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80063a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 800634c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006354:	d801      	bhi.n	800635a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006356:	2308      	movs	r3, #8
 8006358:	e00b      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800635a:	edd7 7a00 	vldr	s15, [r7]
 800635e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80063a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8006362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636a:	d801      	bhi.n	8006370 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800636c:	2309      	movs	r3, #9
 800636e:	e000      	b.n	8006372 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006370:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	3fcccccd 	.word	0x3fcccccd
 800638c:	42500000 	.word	0x42500000
 8006390:	42d00000 	.word	0x42d00000
 8006394:	43500000 	.word	0x43500000
 8006398:	43d08000 	.word	0x43d08000
 800639c:	44504000 	.word	0x44504000
 80063a0:	44d06000 	.word	0x44d06000
 80063a4:	45505000 	.word	0x45505000

080063a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80063b4:	edd7 7a00 	vldr	s15, [r7]
 80063b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80063bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c4:	d801      	bhi.n	80063ca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e058      	b.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80063ca:	edd7 7a00 	vldr	s15, [r7]
 80063ce:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80063d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063da:	d801      	bhi.n	80063e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80063dc:	2302      	movs	r3, #2
 80063de:	e04d      	b.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80063e0:	edd7 7a00 	vldr	s15, [r7]
 80063e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80064a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80063e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f0:	d801      	bhi.n	80063f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80063f2:	2303      	movs	r3, #3
 80063f4:	e042      	b.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80063f6:	edd7 7a00 	vldr	s15, [r7]
 80063fa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80064a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80063fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006406:	d801      	bhi.n	800640c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006408:	2304      	movs	r3, #4
 800640a:	e037      	b.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800640c:	edd7 7a00 	vldr	s15, [r7]
 8006410:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80064ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641c:	d801      	bhi.n	8006422 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800641e:	2305      	movs	r3, #5
 8006420:	e02c      	b.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006422:	edd7 7a00 	vldr	s15, [r7]
 8006426:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80064b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800642a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800642e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006432:	d801      	bhi.n	8006438 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006434:	2306      	movs	r3, #6
 8006436:	e021      	b.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006438:	edd7 7a00 	vldr	s15, [r7]
 800643c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80064b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006448:	d801      	bhi.n	800644e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800644a:	2307      	movs	r3, #7
 800644c:	e016      	b.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800644e:	edd7 7a00 	vldr	s15, [r7]
 8006452:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80064b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800645a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645e:	d801      	bhi.n	8006464 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006460:	2308      	movs	r3, #8
 8006462:	e00b      	b.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006464:	edd7 7a00 	vldr	s15, [r7]
 8006468:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80064bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800646c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006474:	d801      	bhi.n	800647a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006476:	2309      	movs	r3, #9
 8006478:	e000      	b.n	800647c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800647a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800647c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	331c      	adds	r3, #28
 8006482:	7bfa      	ldrb	r2, [r7, #15]
 8006484:	4611      	mov	r1, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fb2c 	bl	8006ae4 <lsm6dso_gy_data_rate_set>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8006492:	f04f 33ff 	mov.w	r3, #4294967295
 8006496:	e000      	b.n	800649a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	42500000 	.word	0x42500000
 80064a8:	42d00000 	.word	0x42d00000
 80064ac:	43500000 	.word	0x43500000
 80064b0:	43d08000 	.word	0x43d08000
 80064b4:	44504000 	.word	0x44504000
 80064b8:	44d06000 	.word	0x44d06000
 80064bc:	45505000 	.word	0x45505000

080064c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80064cc:	edd7 7a00 	vldr	s15, [r7]
 80064d0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80064d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064dc:	d801      	bhi.n	80064e2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80064de:	2301      	movs	r3, #1
 80064e0:	e058      	b.n	8006594 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80064e2:	edd7 7a00 	vldr	s15, [r7]
 80064e6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80064ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f2:	d801      	bhi.n	80064f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e04d      	b.n	8006594 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80064f8:	edd7 7a00 	vldr	s15, [r7]
 80064fc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80065a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006508:	d801      	bhi.n	800650e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800650a:	2303      	movs	r3, #3
 800650c:	e042      	b.n	8006594 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800650e:	edd7 7a00 	vldr	s15, [r7]
 8006512:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80065ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800651a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651e:	d801      	bhi.n	8006524 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006520:	2304      	movs	r3, #4
 8006522:	e037      	b.n	8006594 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006524:	edd7 7a00 	vldr	s15, [r7]
 8006528:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80065b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800652c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006534:	d801      	bhi.n	800653a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006536:	2305      	movs	r3, #5
 8006538:	e02c      	b.n	8006594 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800653a:	edd7 7a00 	vldr	s15, [r7]
 800653e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80065b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654a:	d801      	bhi.n	8006550 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800654c:	2306      	movs	r3, #6
 800654e:	e021      	b.n	8006594 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006550:	edd7 7a00 	vldr	s15, [r7]
 8006554:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80065b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800655c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006560:	d801      	bhi.n	8006566 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8006562:	2307      	movs	r3, #7
 8006564:	e016      	b.n	8006594 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006566:	edd7 7a00 	vldr	s15, [r7]
 800656a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80065bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800656e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006576:	d801      	bhi.n	800657c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006578:	2308      	movs	r3, #8
 800657a:	e00b      	b.n	8006594 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800657c:	edd7 7a00 	vldr	s15, [r7]
 8006580:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80065c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658c:	d801      	bhi.n	8006592 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800658e:	2309      	movs	r3, #9
 8006590:	e000      	b.n	8006594 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006592:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	42500000 	.word	0x42500000
 80065ac:	42d00000 	.word	0x42d00000
 80065b0:	43500000 	.word	0x43500000
 80065b4:	43d08000 	.word	0x43d08000
 80065b8:	44504000 	.word	0x44504000
 80065bc:	44d06000 	.word	0x44d06000
 80065c0:	45505000 	.word	0x45505000

080065c4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80065c4:	b590      	push	{r4, r7, lr}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	461a      	mov	r2, r3
 80065d0:	460b      	mov	r3, r1
 80065d2:	72fb      	strb	r3, [r7, #11]
 80065d4:	4613      	mov	r3, r2
 80065d6:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	695c      	ldr	r4, [r3, #20]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	7b1b      	ldrb	r3, [r3, #12]
 80065e4:	b298      	uxth	r0, r3
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	b299      	uxth	r1, r3
 80065ea:	893b      	ldrh	r3, [r7, #8]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	47a0      	blx	r4
 80065f0:	4603      	mov	r3, r0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd90      	pop	{r4, r7, pc}

080065fa <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80065fa:	b590      	push	{r4, r7, lr}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	461a      	mov	r2, r3
 8006606:	460b      	mov	r3, r1
 8006608:	72fb      	strb	r3, [r7, #11]
 800660a:	4613      	mov	r3, r2
 800660c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	691c      	ldr	r4, [r3, #16]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	7b1b      	ldrb	r3, [r3, #12]
 800661a:	b298      	uxth	r0, r3
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	b299      	uxth	r1, r3
 8006620:	893b      	ldrh	r3, [r7, #8]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	47a0      	blx	r4
 8006626:	4603      	mov	r3, r0
}
 8006628:	4618      	mov	r0, r3
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	bd90      	pop	{r4, r7, pc}

08006630 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006630:	b590      	push	{r4, r7, lr}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	461a      	mov	r2, r3
 800663c:	460b      	mov	r3, r1
 800663e:	72fb      	strb	r3, [r7, #11]
 8006640:	4613      	mov	r3, r2
 8006642:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	685c      	ldr	r4, [r3, #4]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6898      	ldr	r0, [r3, #8]
 800664c:	893b      	ldrh	r3, [r7, #8]
 800664e:	7af9      	ldrb	r1, [r7, #11]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	47a0      	blx	r4
 8006654:	6178      	str	r0, [r7, #20]

  return ret;
 8006656:	697b      	ldr	r3, [r7, #20]
}
 8006658:	4618      	mov	r0, r3
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	bd90      	pop	{r4, r7, pc}

08006660 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	607a      	str	r2, [r7, #4]
 800666a:	461a      	mov	r2, r3
 800666c:	460b      	mov	r3, r1
 800666e:	72fb      	strb	r3, [r7, #11]
 8006670:	4613      	mov	r3, r2
 8006672:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681c      	ldr	r4, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6898      	ldr	r0, [r3, #8]
 800667c:	893b      	ldrh	r3, [r7, #8]
 800667e:	7af9      	ldrb	r1, [r7, #11]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	47a0      	blx	r4
 8006684:	6178      	str	r0, [r7, #20]

  return ret;
 8006686:	697b      	ldr	r3, [r7, #20]
}
 8006688:	4618      	mov	r0, r3
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	bd90      	pop	{r4, r7, pc}

08006690 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800669c:	f107 0208 	add.w	r2, r7, #8
 80066a0:	2301      	movs	r3, #1
 80066a2:	2110      	movs	r1, #16
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff ffc3 	bl	8006630 <lsm6dso_read_reg>
 80066aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10f      	bne.n	80066d2 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	7a3b      	ldrb	r3, [r7, #8]
 80066bc:	f362 0383 	bfi	r3, r2, #2, #2
 80066c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80066c2:	f107 0208 	add.w	r2, r7, #8
 80066c6:	2301      	movs	r3, #1
 80066c8:	2110      	movs	r1, #16
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff ffc8 	bl	8006660 <lsm6dso_write_reg>
 80066d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066d2:	68fb      	ldr	r3, [r7, #12]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80066e6:	f107 0208 	add.w	r2, r7, #8
 80066ea:	2301      	movs	r3, #1
 80066ec:	2110      	movs	r1, #16
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff ff9e 	bl	8006630 <lsm6dso_read_reg>
 80066f4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80066f6:	7a3b      	ldrb	r3, [r7, #8]
 80066f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d81a      	bhi.n	8006738 <lsm6dso_xl_full_scale_get+0x5c>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <lsm6dso_xl_full_scale_get+0x2c>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	08006719 	.word	0x08006719
 800670c:	08006721 	.word	0x08006721
 8006710:	08006729 	.word	0x08006729
 8006714:	08006731 	.word	0x08006731
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2200      	movs	r2, #0
 800671c:	701a      	strb	r2, [r3, #0]
      break;
 800671e:	e00f      	b.n	8006740 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2201      	movs	r2, #1
 8006724:	701a      	strb	r2, [r3, #0]
      break;
 8006726:	e00b      	b.n	8006740 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2202      	movs	r2, #2
 800672c:	701a      	strb	r2, [r3, #0]
      break;
 800672e:	e007      	b.n	8006740 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2203      	movs	r2, #3
 8006734:	701a      	strb	r2, [r3, #0]
      break;
 8006736:	e003      	b.n	8006740 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	701a      	strb	r2, [r3, #0]
      break;
 800673e:	bf00      	nop
  }

  return ret;
 8006740:	68fb      	ldr	r3, [r7, #12]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop

0800674c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fca1 	bl	80070aa <lsm6dso_fsm_enable_get>
 8006768:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 80c4 	bne.w	80068fa <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006772:	7b3b      	ldrb	r3, [r7, #12]
 8006774:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006778:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800677a:	7b3b      	ldrb	r3, [r7, #12]
 800677c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006780:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006782:	4313      	orrs	r3, r2
 8006784:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006786:	7b3b      	ldrb	r3, [r7, #12]
 8006788:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800678c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800678e:	4313      	orrs	r3, r2
 8006790:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006792:	7b3b      	ldrb	r3, [r7, #12]
 8006794:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006798:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800679a:	4313      	orrs	r3, r2
 800679c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800679e:	7b3b      	ldrb	r3, [r7, #12]
 80067a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80067a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80067a6:	4313      	orrs	r3, r2
 80067a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80067aa:	7b3b      	ldrb	r3, [r7, #12]
 80067ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80067b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80067b6:	7b3b      	ldrb	r3, [r7, #12]
 80067b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80067bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80067be:	4313      	orrs	r3, r2
 80067c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80067c2:	7b3b      	ldrb	r3, [r7, #12]
 80067c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80067c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80067ca:	4313      	orrs	r3, r2
 80067cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80067ce:	7b7b      	ldrb	r3, [r7, #13]
 80067d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80067d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80067d6:	4313      	orrs	r3, r2
 80067d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80067da:	7b7b      	ldrb	r3, [r7, #13]
 80067dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80067e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80067e2:	4313      	orrs	r3, r2
 80067e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80067e6:	7b7b      	ldrb	r3, [r7, #13]
 80067e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80067ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80067ee:	4313      	orrs	r3, r2
 80067f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80067f2:	7b7b      	ldrb	r3, [r7, #13]
 80067f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80067f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80067fa:	4313      	orrs	r3, r2
 80067fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80067fe:	7b7b      	ldrb	r3, [r7, #13]
 8006800:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006804:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006806:	4313      	orrs	r3, r2
 8006808:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800680a:	7b7b      	ldrb	r3, [r7, #13]
 800680c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006810:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006812:	4313      	orrs	r3, r2
 8006814:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006816:	7b7b      	ldrb	r3, [r7, #13]
 8006818:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800681c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800681e:	4313      	orrs	r3, r2
 8006820:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006822:	7b7b      	ldrb	r3, [r7, #13]
 8006824:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006828:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800682a:	4313      	orrs	r3, r2
 800682c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800682e:	2b01      	cmp	r3, #1
 8006830:	d163      	bne.n	80068fa <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006832:	f107 030b 	add.w	r3, r7, #11
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fc57 	bl	80070ec <lsm6dso_fsm_data_rate_get>
 800683e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d159      	bne.n	80068fa <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	2b03      	cmp	r3, #3
 800684a:	d853      	bhi.n	80068f4 <lsm6dso_xl_data_rate_set+0x1a8>
 800684c:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <lsm6dso_xl_data_rate_set+0x108>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	08006865 	.word	0x08006865
 8006858:	08006877 	.word	0x08006877
 800685c:	08006895 	.word	0x08006895
 8006860:	080068bf 	.word	0x080068bf
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800686e:	e045      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	75fb      	strb	r3, [r7, #23]
            break;
 8006874:	e042      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800687c:	2302      	movs	r3, #2
 800687e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006880:	e03c      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d102      	bne.n	800688e <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006888:	2302      	movs	r3, #2
 800688a:	75fb      	strb	r3, [r7, #23]
            break;
 800688c:	e036      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	75fb      	strb	r3, [r7, #23]
            break;
 8006892:	e033      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800689a:	2303      	movs	r3, #3
 800689c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800689e:	e02d      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d102      	bne.n	80068ac <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80068a6:	2303      	movs	r3, #3
 80068a8:	75fb      	strb	r3, [r7, #23]
            break;
 80068aa:	e027      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d102      	bne.n	80068b8 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80068b2:	2303      	movs	r3, #3
 80068b4:	75fb      	strb	r3, [r7, #23]
            break;
 80068b6:	e021      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	75fb      	strb	r3, [r7, #23]
            break;
 80068bc:	e01e      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80068c4:	2304      	movs	r3, #4
 80068c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80068c8:	e018      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d102      	bne.n	80068d6 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80068d0:	2304      	movs	r3, #4
 80068d2:	75fb      	strb	r3, [r7, #23]
            break;
 80068d4:	e012      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d102      	bne.n	80068e2 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80068dc:	2304      	movs	r3, #4
 80068de:	75fb      	strb	r3, [r7, #23]
            break;
 80068e0:	e00c      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d102      	bne.n	80068ee <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80068e8:	2304      	movs	r3, #4
 80068ea:	75fb      	strb	r3, [r7, #23]
            break;
 80068ec:	e006      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	75fb      	strb	r3, [r7, #23]
            break;
 80068f2:	e003      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	75fb      	strb	r3, [r7, #23]
            break;
 80068f8:	e000      	b.n	80068fc <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80068fa:	bf00      	nop
    }
  }

  if (ret == 0)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d107      	bne.n	8006912 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006902:	f107 0208 	add.w	r2, r7, #8
 8006906:	2301      	movs	r3, #1
 8006908:	2110      	movs	r1, #16
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fe90 	bl	8006630 <lsm6dso_read_reg>
 8006910:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10f      	bne.n	8006938 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	b2da      	uxtb	r2, r3
 8006920:	7a3b      	ldrb	r3, [r7, #8]
 8006922:	f362 1307 	bfi	r3, r2, #4, #4
 8006926:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006928:	f107 0208 	add.w	r2, r7, #8
 800692c:	2301      	movs	r3, #1
 800692e:	2110      	movs	r1, #16
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fe95 	bl	8006660 <lsm6dso_write_reg>
 8006936:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006938:	693b      	ldr	r3, [r7, #16]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop

08006944 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800694e:	f107 0208 	add.w	r2, r7, #8
 8006952:	2301      	movs	r3, #1
 8006954:	2110      	movs	r1, #16
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fe6a 	bl	8006630 <lsm6dso_read_reg>
 800695c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800695e:	7a3b      	ldrb	r3, [r7, #8]
 8006960:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b0b      	cmp	r3, #11
 8006968:	d84a      	bhi.n	8006a00 <lsm6dso_xl_data_rate_get+0xbc>
 800696a:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <lsm6dso_xl_data_rate_get+0x2c>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	080069a1 	.word	0x080069a1
 8006974:	080069a9 	.word	0x080069a9
 8006978:	080069b1 	.word	0x080069b1
 800697c:	080069b9 	.word	0x080069b9
 8006980:	080069c1 	.word	0x080069c1
 8006984:	080069c9 	.word	0x080069c9
 8006988:	080069d1 	.word	0x080069d1
 800698c:	080069d9 	.word	0x080069d9
 8006990:	080069e1 	.word	0x080069e1
 8006994:	080069e9 	.word	0x080069e9
 8006998:	080069f1 	.word	0x080069f1
 800699c:	080069f9 	.word	0x080069f9
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
      break;
 80069a6:	e02f      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	701a      	strb	r2, [r3, #0]
      break;
 80069ae:	e02b      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2202      	movs	r2, #2
 80069b4:	701a      	strb	r2, [r3, #0]
      break;
 80069b6:	e027      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2203      	movs	r2, #3
 80069bc:	701a      	strb	r2, [r3, #0]
      break;
 80069be:	e023      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2204      	movs	r2, #4
 80069c4:	701a      	strb	r2, [r3, #0]
      break;
 80069c6:	e01f      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2205      	movs	r2, #5
 80069cc:	701a      	strb	r2, [r3, #0]
      break;
 80069ce:	e01b      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2206      	movs	r2, #6
 80069d4:	701a      	strb	r2, [r3, #0]
      break;
 80069d6:	e017      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2207      	movs	r2, #7
 80069dc:	701a      	strb	r2, [r3, #0]
      break;
 80069de:	e013      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2208      	movs	r2, #8
 80069e4:	701a      	strb	r2, [r3, #0]
      break;
 80069e6:	e00f      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2209      	movs	r2, #9
 80069ec:	701a      	strb	r2, [r3, #0]
      break;
 80069ee:	e00b      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	220a      	movs	r2, #10
 80069f4:	701a      	strb	r2, [r3, #0]
      break;
 80069f6:	e007      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	220b      	movs	r2, #11
 80069fc:	701a      	strb	r2, [r3, #0]
      break;
 80069fe:	e003      	b.n	8006a08 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
      break;
 8006a06:	bf00      	nop
  }

  return ret;
 8006a08:	68fb      	ldr	r3, [r7, #12]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop

08006a14 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006a20:	f107 0208 	add.w	r2, r7, #8
 8006a24:	2301      	movs	r3, #1
 8006a26:	2111      	movs	r1, #17
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fe01 	bl	8006630 <lsm6dso_read_reg>
 8006a2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10f      	bne.n	8006a56 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	7a3b      	ldrb	r3, [r7, #8]
 8006a40:	f362 0343 	bfi	r3, r2, #1, #3
 8006a44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006a46:	f107 0208 	add.w	r2, r7, #8
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	2111      	movs	r1, #17
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff fe06 	bl	8006660 <lsm6dso_write_reg>
 8006a54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a56:	68fb      	ldr	r3, [r7, #12]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006a6a:	f107 0208 	add.w	r2, r7, #8
 8006a6e:	2301      	movs	r3, #1
 8006a70:	2111      	movs	r1, #17
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff fddc 	bl	8006630 <lsm6dso_read_reg>
 8006a78:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8006a7a:	7a3b      	ldrb	r3, [r7, #8]
 8006a7c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d824      	bhi.n	8006ad0 <lsm6dso_gy_full_scale_get+0x70>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <lsm6dso_gy_full_scale_get+0x2c>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006aa9 	.word	0x08006aa9
 8006a90:	08006ab1 	.word	0x08006ab1
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ad1 	.word	0x08006ad1
 8006a9c:	08006ac1 	.word	0x08006ac1
 8006aa0:	08006ad1 	.word	0x08006ad1
 8006aa4:	08006ac9 	.word	0x08006ac9
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	701a      	strb	r2, [r3, #0]
      break;
 8006aae:	e013      	b.n	8006ad8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	701a      	strb	r2, [r3, #0]
      break;
 8006ab6:	e00f      	b.n	8006ad8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2202      	movs	r2, #2
 8006abc:	701a      	strb	r2, [r3, #0]
      break;
 8006abe:	e00b      	b.n	8006ad8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	701a      	strb	r2, [r3, #0]
      break;
 8006ac6:	e007      	b.n	8006ad8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2206      	movs	r2, #6
 8006acc:	701a      	strb	r2, [r3, #0]
      break;
 8006ace:	e003      	b.n	8006ad8 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	701a      	strb	r2, [r3, #0]
      break;
 8006ad6:	bf00      	nop
  }

  return ret;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop

08006ae4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006af4:	f107 030c 	add.w	r3, r7, #12
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fad5 	bl	80070aa <lsm6dso_fsm_enable_get>
 8006b00:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 80c4 	bne.w	8006c92 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b0a:	7b3b      	ldrb	r3, [r7, #12]
 8006b0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006b12:	7b3b      	ldrb	r3, [r7, #12]
 8006b14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b18:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006b1e:	7b3b      	ldrb	r3, [r7, #12]
 8006b20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006b26:	4313      	orrs	r3, r2
 8006b28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006b2a:	7b3b      	ldrb	r3, [r7, #12]
 8006b2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006b32:	4313      	orrs	r3, r2
 8006b34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006b36:	7b3b      	ldrb	r3, [r7, #12]
 8006b38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006b42:	7b3b      	ldrb	r3, [r7, #12]
 8006b44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006b4e:	7b3b      	ldrb	r3, [r7, #12]
 8006b50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006b56:	4313      	orrs	r3, r2
 8006b58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006b5a:	7b3b      	ldrb	r3, [r7, #12]
 8006b5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006b62:	4313      	orrs	r3, r2
 8006b64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006b66:	7b7b      	ldrb	r3, [r7, #13]
 8006b68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006b72:	7b7b      	ldrb	r3, [r7, #13]
 8006b74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006b7e:	7b7b      	ldrb	r3, [r7, #13]
 8006b80:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006b86:	4313      	orrs	r3, r2
 8006b88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006b8a:	7b7b      	ldrb	r3, [r7, #13]
 8006b8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006b92:	4313      	orrs	r3, r2
 8006b94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006b96:	7b7b      	ldrb	r3, [r7, #13]
 8006b98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006ba2:	7b7b      	ldrb	r3, [r7, #13]
 8006ba4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ba8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006baa:	4313      	orrs	r3, r2
 8006bac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006bae:	7b7b      	ldrb	r3, [r7, #13]
 8006bb0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006bb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006bba:	7b7b      	ldrb	r3, [r7, #13]
 8006bbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006bc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d163      	bne.n	8006c92 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006bca:	f107 030b 	add.w	r3, r7, #11
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fa8b 	bl	80070ec <lsm6dso_fsm_data_rate_get>
 8006bd6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d159      	bne.n	8006c92 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d853      	bhi.n	8006c8c <lsm6dso_gy_data_rate_set+0x1a8>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <lsm6dso_gy_data_rate_set+0x108>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c0f 	.word	0x08006c0f
 8006bf4:	08006c2d 	.word	0x08006c2d
 8006bf8:	08006c57 	.word	0x08006c57
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d102      	bne.n	8006c08 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006c06:	e045      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	75fb      	strb	r3, [r7, #23]
            break;
 8006c0c:	e042      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006c14:	2302      	movs	r3, #2
 8006c16:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006c18:	e03c      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d102      	bne.n	8006c26 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006c20:	2302      	movs	r3, #2
 8006c22:	75fb      	strb	r3, [r7, #23]
            break;
 8006c24:	e036      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	75fb      	strb	r3, [r7, #23]
            break;
 8006c2a:	e033      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006c32:	2303      	movs	r3, #3
 8006c34:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006c36:	e02d      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d102      	bne.n	8006c44 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	75fb      	strb	r3, [r7, #23]
            break;
 8006c42:	e027      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d102      	bne.n	8006c50 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	75fb      	strb	r3, [r7, #23]
            break;
 8006c4e:	e021      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	75fb      	strb	r3, [r7, #23]
            break;
 8006c54:	e01e      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006c60:	e018      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d102      	bne.n	8006c6e <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006c68:	2304      	movs	r3, #4
 8006c6a:	75fb      	strb	r3, [r7, #23]
            break;
 8006c6c:	e012      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d102      	bne.n	8006c7a <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006c74:	2304      	movs	r3, #4
 8006c76:	75fb      	strb	r3, [r7, #23]
            break;
 8006c78:	e00c      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d102      	bne.n	8006c86 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006c80:	2304      	movs	r3, #4
 8006c82:	75fb      	strb	r3, [r7, #23]
            break;
 8006c84:	e006      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	75fb      	strb	r3, [r7, #23]
            break;
 8006c8a:	e003      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	75fb      	strb	r3, [r7, #23]
            break;
 8006c90:	e000      	b.n	8006c94 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006c92:	bf00      	nop
    }
  }

  if (ret == 0)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d107      	bne.n	8006caa <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006c9a:	f107 0208 	add.w	r2, r7, #8
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	2111      	movs	r1, #17
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fcc4 	bl	8006630 <lsm6dso_read_reg>
 8006ca8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10f      	bne.n	8006cd0 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	7a3b      	ldrb	r3, [r7, #8]
 8006cba:	f362 1307 	bfi	r3, r2, #4, #4
 8006cbe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006cc0:	f107 0208 	add.w	r2, r7, #8
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	2111      	movs	r1, #17
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff fcc9 	bl	8006660 <lsm6dso_write_reg>
 8006cce:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006cd0:	693b      	ldr	r3, [r7, #16]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop

08006cdc <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006ce6:	f107 0208 	add.w	r2, r7, #8
 8006cea:	2301      	movs	r3, #1
 8006cec:	2111      	movs	r1, #17
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff fc9e 	bl	8006630 <lsm6dso_read_reg>
 8006cf4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8006cf6:	7a3b      	ldrb	r3, [r7, #8]
 8006cf8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b0a      	cmp	r3, #10
 8006d00:	d844      	bhi.n	8006d8c <lsm6dso_gy_data_rate_get+0xb0>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <lsm6dso_gy_data_rate_get+0x2c>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d35 	.word	0x08006d35
 8006d0c:	08006d3d 	.word	0x08006d3d
 8006d10:	08006d45 	.word	0x08006d45
 8006d14:	08006d4d 	.word	0x08006d4d
 8006d18:	08006d55 	.word	0x08006d55
 8006d1c:	08006d5d 	.word	0x08006d5d
 8006d20:	08006d65 	.word	0x08006d65
 8006d24:	08006d6d 	.word	0x08006d6d
 8006d28:	08006d75 	.word	0x08006d75
 8006d2c:	08006d7d 	.word	0x08006d7d
 8006d30:	08006d85 	.word	0x08006d85
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
      break;
 8006d3a:	e02b      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	701a      	strb	r2, [r3, #0]
      break;
 8006d42:	e027      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2202      	movs	r2, #2
 8006d48:	701a      	strb	r2, [r3, #0]
      break;
 8006d4a:	e023      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2203      	movs	r2, #3
 8006d50:	701a      	strb	r2, [r3, #0]
      break;
 8006d52:	e01f      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2204      	movs	r2, #4
 8006d58:	701a      	strb	r2, [r3, #0]
      break;
 8006d5a:	e01b      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2205      	movs	r2, #5
 8006d60:	701a      	strb	r2, [r3, #0]
      break;
 8006d62:	e017      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2206      	movs	r2, #6
 8006d68:	701a      	strb	r2, [r3, #0]
      break;
 8006d6a:	e013      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2207      	movs	r2, #7
 8006d70:	701a      	strb	r2, [r3, #0]
      break;
 8006d72:	e00f      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2208      	movs	r2, #8
 8006d78:	701a      	strb	r2, [r3, #0]
      break;
 8006d7a:	e00b      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2209      	movs	r2, #9
 8006d80:	701a      	strb	r2, [r3, #0]
      break;
 8006d82:	e007      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	220a      	movs	r2, #10
 8006d88:	701a      	strb	r2, [r3, #0]
      break;
 8006d8a:	e003      	b.n	8006d94 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
      break;
 8006d92:	bf00      	nop
  }

  return ret;
 8006d94:	68fb      	ldr	r3, [r7, #12]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop

08006da0 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006dac:	f107 0208 	add.w	r2, r7, #8
 8006db0:	2301      	movs	r3, #1
 8006db2:	2112      	movs	r1, #18
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff fc3b 	bl	8006630 <lsm6dso_read_reg>
 8006dba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10f      	bne.n	8006de2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	7a3b      	ldrb	r3, [r7, #8]
 8006dcc:	f362 1386 	bfi	r3, r2, #6, #1
 8006dd0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006dd2:	f107 0208 	add.w	r2, r7, #8
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	2112      	movs	r1, #18
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff fc40 	bl	8006660 <lsm6dso_write_reg>
 8006de0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006de2:	68fb      	ldr	r3, [r7, #12]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8006df6:	f107 020c 	add.w	r2, r7, #12
 8006dfa:	2306      	movs	r3, #6
 8006dfc:	2122      	movs	r1, #34	; 0x22
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff fc16 	bl	8006630 <lsm6dso_read_reg>
 8006e04:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006e06:	7b7b      	ldrb	r3, [r7, #13]
 8006e08:	b21a      	sxth	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	021b      	lsls	r3, r3, #8
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	7b3b      	ldrb	r3, [r7, #12]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4413      	add	r3, r2
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	b21a      	sxth	r2, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006e28:	7bfa      	ldrb	r2, [r7, #15]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	b212      	sxth	r2, r2
 8006e30:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	3302      	adds	r3, #2
 8006e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	4413      	add	r3, r2
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	3302      	adds	r3, #2
 8006e4c:	b212      	sxth	r2, r2
 8006e4e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006e50:	7c7a      	ldrb	r2, [r7, #17]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	3304      	adds	r3, #4
 8006e56:	b212      	sxth	r2, r2
 8006e58:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	7c3b      	ldrb	r3, [r7, #16]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	3304      	adds	r3, #4
 8006e74:	b212      	sxth	r2, r2
 8006e76:	801a      	strh	r2, [r3, #0]

  return ret;
 8006e78:	697b      	ldr	r3, [r7, #20]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006e8c:	f107 020c 	add.w	r2, r7, #12
 8006e90:	2306      	movs	r3, #6
 8006e92:	2128      	movs	r1, #40	; 0x28
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff fbcb 	bl	8006630 <lsm6dso_read_reg>
 8006e9a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006e9c:	7b7b      	ldrb	r3, [r7, #13]
 8006e9e:	b21a      	sxth	r2, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	7b3b      	ldrb	r3, [r7, #12]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	b21a      	sxth	r2, r3
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006ebe:	7bfa      	ldrb	r2, [r7, #15]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	b212      	sxth	r2, r2
 8006ec6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	3302      	adds	r3, #2
 8006ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	4413      	add	r3, r2
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	b212      	sxth	r2, r2
 8006ee4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006ee6:	7c7a      	ldrb	r2, [r7, #17]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	3304      	adds	r3, #4
 8006eec:	b212      	sxth	r2, r2
 8006eee:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	7c3b      	ldrb	r3, [r7, #16]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	b212      	sxth	r2, r2
 8006f0c:	801a      	strh	r2, [r3, #0]

  return ret;
 8006f0e:	697b      	ldr	r3, [r7, #20]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006f24:	f107 0208 	add.w	r2, r7, #8
 8006f28:	2301      	movs	r3, #1
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff fb7f 	bl	8006630 <lsm6dso_read_reg>
 8006f32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10f      	bne.n	8006f5a <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	7a3b      	ldrb	r3, [r7, #8]
 8006f44:	f362 1387 	bfi	r3, r2, #6, #2
 8006f48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006f4a:	f107 0208 	add.w	r2, r7, #8
 8006f4e:	2301      	movs	r3, #1
 8006f50:	2101      	movs	r1, #1
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fb84 	bl	8006660 <lsm6dso_write_reg>
 8006f58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006f6e:	2301      	movs	r3, #1
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	210f      	movs	r1, #15
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff fb5b 	bl	8006630 <lsm6dso_read_reg>
 8006f7a:	60f8      	str	r0, [r7, #12]

  return ret;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006f92:	f107 0208 	add.w	r2, r7, #8
 8006f96:	2301      	movs	r3, #1
 8006f98:	2112      	movs	r1, #18
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff fb48 	bl	8006630 <lsm6dso_read_reg>
 8006fa0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10f      	bne.n	8006fc8 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	7a3b      	ldrb	r3, [r7, #8]
 8006fb2:	f362 0382 	bfi	r3, r2, #2, #1
 8006fb6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006fb8:	f107 0208 	add.w	r2, r7, #8
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	2112      	movs	r1, #18
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fb4d 	bl	8006660 <lsm6dso_write_reg>
 8006fc6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006fde:	f107 020c 	add.w	r2, r7, #12
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	2118      	movs	r1, #24
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff fb22 	bl	8006630 <lsm6dso_read_reg>
 8006fec:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d111      	bne.n	8007018 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	09db      	lsrs	r3, r3, #7
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	7b3b      	ldrb	r3, [r7, #12]
 8007002:	f362 0341 	bfi	r3, r2, #1, #1
 8007006:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007008:	f107 020c 	add.w	r2, r7, #12
 800700c:	2301      	movs	r3, #1
 800700e:	2118      	movs	r1, #24
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff fb25 	bl	8006660 <lsm6dso_write_reg>
 8007016:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d107      	bne.n	800702e <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800701e:	f107 0210 	add.w	r2, r7, #16
 8007022:	2301      	movs	r3, #1
 8007024:	2162      	movs	r1, #98	; 0x62
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fb02 	bl	8006630 <lsm6dso_read_reg>
 800702c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10f      	bne.n	8007054 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	b2da      	uxtb	r2, r3
 800703c:	7c3b      	ldrb	r3, [r7, #16]
 800703e:	f362 03c4 	bfi	r3, r2, #3, #2
 8007042:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007044:	f107 0210 	add.w	r2, r7, #16
 8007048:	2301      	movs	r3, #1
 800704a:	2162      	movs	r1, #98	; 0x62
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff fb07 	bl	8006660 <lsm6dso_write_reg>
 8007052:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8007054:	697b      	ldr	r3, [r7, #20]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800706a:	f107 0208 	add.w	r2, r7, #8
 800706e:	2301      	movs	r3, #1
 8007070:	210a      	movs	r1, #10
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fadc 	bl	8006630 <lsm6dso_read_reg>
 8007078:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10f      	bne.n	80070a0 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	b2da      	uxtb	r2, r3
 8007088:	7a3b      	ldrb	r3, [r7, #8]
 800708a:	f362 0302 	bfi	r3, r2, #0, #3
 800708e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007090:	f107 0208 	add.w	r2, r7, #8
 8007094:	2301      	movs	r3, #1
 8007096:	210a      	movs	r1, #10
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff fae1 	bl	8006660 <lsm6dso_write_reg>
 800709e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80070a0:	68fb      	ldr	r3, [r7, #12]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80070b4:	2102      	movs	r1, #2
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7ff ff2e 	bl	8006f18 <lsm6dso_mem_bank_set>
 80070bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80070c4:	2302      	movs	r3, #2
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	2146      	movs	r1, #70	; 0x46
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fab0 	bl	8006630 <lsm6dso_read_reg>
 80070d0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80070d8:	2100      	movs	r1, #0
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff ff1c 	bl	8006f18 <lsm6dso_mem_bank_set>
 80070e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80070e2:	68fb      	ldr	r3, [r7, #12]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80070f6:	2102      	movs	r1, #2
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff ff0d 	bl	8006f18 <lsm6dso_mem_bank_set>
 80070fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d107      	bne.n	8007116 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8007106:	f107 0208 	add.w	r2, r7, #8
 800710a:	2301      	movs	r3, #1
 800710c:	215f      	movs	r1, #95	; 0x5f
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff fa8e 	bl	8006630 <lsm6dso_read_reg>
 8007114:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d12a      	bne.n	8007172 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 800711c:	7a3b      	ldrb	r3, [r7, #8]
 800711e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b03      	cmp	r3, #3
 8007126:	d81b      	bhi.n	8007160 <lsm6dso_fsm_data_rate_get+0x74>
 8007128:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <lsm6dso_fsm_data_rate_get+0x44>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007141 	.word	0x08007141
 8007134:	08007149 	.word	0x08007149
 8007138:	08007151 	.word	0x08007151
 800713c:	08007159 	.word	0x08007159
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	701a      	strb	r2, [r3, #0]
        break;
 8007146:	e00f      	b.n	8007168 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2201      	movs	r2, #1
 800714c:	701a      	strb	r2, [r3, #0]
        break;
 800714e:	e00b      	b.n	8007168 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2202      	movs	r2, #2
 8007154:	701a      	strb	r2, [r3, #0]
        break;
 8007156:	e007      	b.n	8007168 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2203      	movs	r2, #3
 800715c:	701a      	strb	r2, [r3, #0]
        break;
 800715e:	e003      	b.n	8007168 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
        break;
 8007166:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007168:	2100      	movs	r1, #0
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff fed4 	bl	8006f18 <lsm6dso_mem_bank_set>
 8007170:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007172:	68fb      	ldr	r3, [r7, #12]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d103      	bne.n	8007194 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 800718c:	f04f 33ff 	mov.w	r3, #4294967295
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e030      	b.n	80071f6 <STTS751_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	7b1a      	ldrb	r2, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	695a      	ldr	r2, [r3, #20]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699a      	ldr	r2, [r3, #24]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <STTS751_RegisterBusIO+0x84>)
 80071d0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a0b      	ldr	r2, [pc, #44]	; (8007204 <STTS751_RegisterBusIO+0x88>)
 80071d6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <STTS751_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4798      	blx	r3
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	e002      	b.n	80071f6 <STTS751_RegisterBusIO+0x7a>
    }
    else
    {
      ret = STTS751_ERROR;
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295
 80071f4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80071f6:	68fb      	ldr	r3, [r7, #12]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	08007689 	.word	0x08007689
 8007204:	080076f7 	.word	0x080076f7

08007208 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d127      	bne.n	800726a <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	331c      	adds	r3, #28
 800721e:	2101      	movs	r1, #1
 8007220:	4618      	mov	r0, r3
 8007222:	f000 fc4c 	bl	8007abe <stts751_pin_event_route_set>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 800722c:	f04f 33ff 	mov.w	r3, #4294967295
 8007230:	e020      	b.n	8007274 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007238:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	331c      	adds	r3, #28
 800723e:	2103      	movs	r1, #3
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fbaf 	bl	80079a4 <stts751_resolution_set>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 800724c:	f04f 33ff 	mov.w	r3, #4294967295
 8007250:	e010      	b.n	8007274 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	331c      	adds	r3, #28
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	4618      	mov	r0, r3
 800725a:	f000 facd 	bl	80077f8 <stts751_temp_data_rate_set>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8007264:	f04f 33ff 	mov.w	r3, #4294967295
 8007268:	e004      	b.n	8007274 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800728a:	2b01      	cmp	r3, #1
 800728c:	d108      	bne.n	80072a0 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f870 	bl	8007374 <STTS751_TEMP_Disable>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 800729a:	f04f 33ff 	mov.w	r3, #4294967295
 800729e:	e004      	b.n	80072aa <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return STTS751_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	331c      	adds	r3, #28
 80072c0:	f107 020c 	add.w	r2, r7, #12
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fc1f 	bl	8007b0a <stts751_device_id_get>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295
 80072d6:	e003      	b.n	80072e0 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 80072d8:	7b7a      	ldrb	r2, [r7, #13]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2200      	movs	r2, #0
 80072f6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2201      	movs	r2, #1
 8007302:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2200      	movs	r2, #0
 8007308:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007318:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e012      	b.n	800736c <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800734c:	eeb0 0a67 	vmov.f32	s0, s15
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f8b5 	bl	80074c0 <STTS751_TEMP_SetOutputDataRate>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 800735c:	f04f 33ff 	mov.w	r3, #4294967295
 8007360:	e004      	b.n	800736c <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	e01c      	b.n	80073c4 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	332c      	adds	r3, #44	; 0x2c
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f81b 	bl	80073cc <STTS751_TEMP_GetOutputDataRate>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 800739c:	f04f 33ff 	mov.w	r3, #4294967295
 80073a0:	e010      	b.n	80073c4 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	331c      	adds	r3, #28
 80073a6:	2180      	movs	r1, #128	; 0x80
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fa25 	bl	80077f8 <stts751_temp_data_rate_set>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 80073b4:	f04f 33ff 	mov.w	r3, #4294967295
 80073b8:	e004      	b.n	80073c4 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return STTS751_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	331c      	adds	r3, #28
 80073de:	f107 020b 	add.w	r2, r7, #11
 80073e2:	4611      	mov	r1, r2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fa5d 	bl	80078a4 <stts751_temp_data_rate_get>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 80073f0:	f04f 33ff 	mov.w	r3, #4294967295
 80073f4:	e060      	b.n	80074b8 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	2b90      	cmp	r3, #144	; 0x90
 80073fa:	d021      	beq.n	8007440 <STTS751_TEMP_GetOutputDataRate+0x74>
 80073fc:	2b90      	cmp	r3, #144	; 0x90
 80073fe:	dc56      	bgt.n	80074ae <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007400:	2b09      	cmp	r3, #9
 8007402:	dc1b      	bgt.n	800743c <STTS751_TEMP_GetOutputDataRate+0x70>
 8007404:	2b00      	cmp	r3, #0
 8007406:	db52      	blt.n	80074ae <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007408:	2b09      	cmp	r3, #9
 800740a:	d850      	bhi.n	80074ae <STTS751_TEMP_GetOutputDataRate+0xe2>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <STTS751_TEMP_GetOutputDataRate+0x48>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	0800744b 	.word	0x0800744b
 8007418:	08007455 	.word	0x08007455
 800741c:	0800745f 	.word	0x0800745f
 8007420:	08007469 	.word	0x08007469
 8007424:	08007473 	.word	0x08007473
 8007428:	0800747d 	.word	0x0800747d
 800742c:	08007487 	.word	0x08007487
 8007430:	08007491 	.word	0x08007491
 8007434:	0800749b 	.word	0x0800749b
 8007438:	080074a5 	.word	0x080074a5
 800743c:	2b80      	cmp	r3, #128	; 0x80
 800743e:	d136      	bne.n	80074ae <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
      break;
 8007448:	e035      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8007450:	601a      	str	r2, [r3, #0]
      break;
 8007452:	e030      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 800745a:	601a      	str	r2, [r3, #0]
      break;
 800745c:	e02b      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8007464:	601a      	str	r2, [r3, #0]
      break;
 8007466:	e026      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800746e:	601a      	str	r2, [r3, #0]
      break;
 8007470:	e021      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007478:	601a      	str	r2, [r3, #0]
      break;
 800747a:	e01c      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007482:	601a      	str	r2, [r3, #0]
      break;
 8007484:	e017      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800748c:	601a      	str	r2, [r3, #0]
      break;
 800748e:	e012      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8007496:	601a      	str	r2, [r3, #0]
      break;
 8007498:	e00d      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80074a0:	601a      	str	r2, [r3, #0]
      break;
 80074a2:	e008      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80074aa:	601a      	str	r2, [r3, #0]
      break;
 80074ac:	e003      	b.n	80074b6 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 80074ae:	f04f 33ff 	mov.w	r3, #4294967295
 80074b2:	60fb      	str	r3, [r7, #12]
      break;
 80074b4:	bf00      	nop
  }

  return ret;
 80074b6:	68fb      	ldr	r3, [r7, #12]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	331c      	adds	r3, #28
 80074d0:	f107 020e 	add.w	r2, r7, #14
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fa8a 	bl	80079f0 <stts751_resolution_get>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 80074e2:	f04f 33ff 	mov.w	r3, #4294967295
 80074e6:	e0a5      	b.n	8007634 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 80074e8:	edd7 7a00 	vldr	s15, [r7]
 80074ec:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80074f0:	eef4 7a47 	vcmp.f32	s15, s14
 80074f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f8:	d10e      	bne.n	8007518 <STTS751_TEMP_SetOutputDataRate+0x58>
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d10b      	bne.n	8007518 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	331c      	adds	r3, #28
 8007504:	2101      	movs	r1, #1
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fa4c 	bl	80079a4 <stts751_resolution_set>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8007512:	f04f 33ff 	mov.w	r3, #4294967295
 8007516:	e08d      	b.n	8007634 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8007518:	edd7 7a00 	vldr	s15, [r7]
 800751c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800763c <STTS751_TEMP_SetOutputDataRate+0x17c>
 8007520:	eef4 7a47 	vcmp.f32	s15, s14
 8007524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007528:	d111      	bne.n	800754e <STTS751_TEMP_SetOutputDataRate+0x8e>
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b03      	cmp	r3, #3
 800752e:	d002      	beq.n	8007536 <STTS751_TEMP_SetOutputDataRate+0x76>
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d10b      	bne.n	800754e <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	331c      	adds	r3, #28
 800753a:	2100      	movs	r1, #0
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fa31 	bl	80079a4 <stts751_resolution_set>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	e072      	b.n	8007634 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800754e:	edd7 7a00 	vldr	s15, [r7]
 8007552:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007640 <STTS751_TEMP_SetOutputDataRate+0x180>
 8007556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800755a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755e:	d801      	bhi.n	8007564 <STTS751_TEMP_SetOutputDataRate+0xa4>
 8007560:	2300      	movs	r3, #0
 8007562:	e058      	b.n	8007616 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007564:	edd7 7a00 	vldr	s15, [r7]
 8007568:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800756c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007574:	d801      	bhi.n	800757a <STTS751_TEMP_SetOutputDataRate+0xba>
 8007576:	2301      	movs	r3, #1
 8007578:	e04d      	b.n	8007616 <STTS751_TEMP_SetOutputDataRate+0x156>
 800757a:	edd7 7a00 	vldr	s15, [r7]
 800757e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8007582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758a:	d801      	bhi.n	8007590 <STTS751_TEMP_SetOutputDataRate+0xd0>
 800758c:	2302      	movs	r3, #2
 800758e:	e042      	b.n	8007616 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007590:	edd7 7a00 	vldr	s15, [r7]
 8007594:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800759c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a0:	d801      	bhi.n	80075a6 <STTS751_TEMP_SetOutputDataRate+0xe6>
 80075a2:	2303      	movs	r3, #3
 80075a4:	e037      	b.n	8007616 <STTS751_TEMP_SetOutputDataRate+0x156>
 80075a6:	edd7 7a00 	vldr	s15, [r7]
 80075aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b6:	d801      	bhi.n	80075bc <STTS751_TEMP_SetOutputDataRate+0xfc>
 80075b8:	2304      	movs	r3, #4
 80075ba:	e02c      	b.n	8007616 <STTS751_TEMP_SetOutputDataRate+0x156>
 80075bc:	edd7 7a00 	vldr	s15, [r7]
 80075c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80075c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075cc:	d801      	bhi.n	80075d2 <STTS751_TEMP_SetOutputDataRate+0x112>
 80075ce:	2305      	movs	r3, #5
 80075d0:	e021      	b.n	8007616 <STTS751_TEMP_SetOutputDataRate+0x156>
 80075d2:	edd7 7a00 	vldr	s15, [r7]
 80075d6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80075da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e2:	d801      	bhi.n	80075e8 <STTS751_TEMP_SetOutputDataRate+0x128>
 80075e4:	2306      	movs	r3, #6
 80075e6:	e016      	b.n	8007616 <STTS751_TEMP_SetOutputDataRate+0x156>
 80075e8:	edd7 7a00 	vldr	s15, [r7]
 80075ec:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80075f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f8:	d801      	bhi.n	80075fe <STTS751_TEMP_SetOutputDataRate+0x13e>
 80075fa:	2307      	movs	r3, #7
 80075fc:	e00b      	b.n	8007616 <STTS751_TEMP_SetOutputDataRate+0x156>
 80075fe:	edd7 7a00 	vldr	s15, [r7]
 8007602:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800760a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760e:	d801      	bhi.n	8007614 <STTS751_TEMP_SetOutputDataRate+0x154>
 8007610:	2308      	movs	r3, #8
 8007612:	e000      	b.n	8007616 <STTS751_TEMP_SetOutputDataRate+0x156>
 8007614:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8007616:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	331c      	adds	r3, #28
 800761c:	7bfa      	ldrb	r2, [r7, #15]
 800761e:	4611      	mov	r1, r2
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f8e9 	bl	80077f8 <stts751_temp_data_rate_set>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 800762c:	f04f 33ff 	mov.w	r3, #4294967295
 8007630:	e000      	b.n	8007634 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	42000000 	.word	0x42000000
 8007640:	3d800000 	.word	0x3d800000

08007644 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	331c      	adds	r3, #28
 8007652:	f107 020e 	add.w	r2, r7, #14
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f000 fa01 	bl	8007a60 <stts751_temperature_raw_get>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8007664:	f04f 33ff 	mov.w	r3, #4294967295
 8007668:	e00a      	b.n	8007680 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 800766a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f8a8 	bl	80077c4 <stts751_from_lsb_to_celsius>
 8007674:	eef0 7a40 	vmov.f32	s15, s0
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b089      	sub	sp, #36	; 0x24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	461a      	mov	r2, r3
 8007694:	460b      	mov	r3, r1
 8007696:	72fb      	strb	r3, [r7, #11]
 8007698:	4613      	mov	r3, r2
 800769a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d11f      	bne.n	80076ec <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80076ac:	2300      	movs	r3, #0
 80076ae:	83fb      	strh	r3, [r7, #30]
 80076b0:	e018      	b.n	80076e4 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	695c      	ldr	r4, [r3, #20]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	7b1b      	ldrb	r3, [r3, #12]
 80076ba:	b298      	uxth	r0, r3
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	b29a      	uxth	r2, r3
 80076c0:	8bfb      	ldrh	r3, [r7, #30]
 80076c2:	4413      	add	r3, r2
 80076c4:	b299      	uxth	r1, r3
 80076c6:	8bfb      	ldrh	r3, [r7, #30]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	441a      	add	r2, r3
 80076cc:	2301      	movs	r3, #1
 80076ce:	47a0      	blx	r4
 80076d0:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 80076d8:	f04f 33ff 	mov.w	r3, #4294967295
 80076dc:	e007      	b.n	80076ee <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80076de:	8bfb      	ldrh	r3, [r7, #30]
 80076e0:	3301      	adds	r3, #1
 80076e2:	83fb      	strh	r3, [r7, #30]
 80076e4:	8bfa      	ldrh	r2, [r7, #30]
 80076e6:	893b      	ldrh	r3, [r7, #8]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d3e2      	bcc.n	80076b2 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 80076ec:	69bb      	ldr	r3, [r7, #24]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3724      	adds	r7, #36	; 0x24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd90      	pop	{r4, r7, pc}

080076f6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80076f6:	b590      	push	{r4, r7, lr}
 80076f8:	b089      	sub	sp, #36	; 0x24
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	461a      	mov	r2, r3
 8007702:	460b      	mov	r3, r1
 8007704:	72fb      	strb	r3, [r7, #11]
 8007706:	4613      	mov	r3, r2
 8007708:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d11f      	bne.n	800775a <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800771a:	2300      	movs	r3, #0
 800771c:	83fb      	strh	r3, [r7, #30]
 800771e:	e018      	b.n	8007752 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	691c      	ldr	r4, [r3, #16]
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	7b1b      	ldrb	r3, [r3, #12]
 8007728:	b298      	uxth	r0, r3
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	b29a      	uxth	r2, r3
 800772e:	8bfb      	ldrh	r3, [r7, #30]
 8007730:	4413      	add	r3, r2
 8007732:	b299      	uxth	r1, r3
 8007734:	8bfb      	ldrh	r3, [r7, #30]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	441a      	add	r2, r3
 800773a:	2301      	movs	r3, #1
 800773c:	47a0      	blx	r4
 800773e:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007746:	f04f 33ff 	mov.w	r3, #4294967295
 800774a:	e007      	b.n	800775c <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800774c:	8bfb      	ldrh	r3, [r7, #30]
 800774e:	3301      	adds	r3, #1
 8007750:	83fb      	strh	r3, [r7, #30]
 8007752:	8bfa      	ldrh	r2, [r7, #30]
 8007754:	893b      	ldrh	r3, [r7, #8]
 8007756:	429a      	cmp	r2, r3
 8007758:	d3e2      	bcc.n	8007720 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800775a:	69bb      	ldr	r3, [r7, #24]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3724      	adds	r7, #36	; 0x24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd90      	pop	{r4, r7, pc}

08007764 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007764:	b590      	push	{r4, r7, lr}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	461a      	mov	r2, r3
 8007770:	460b      	mov	r3, r1
 8007772:	72fb      	strb	r3, [r7, #11]
 8007774:	4613      	mov	r3, r2
 8007776:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685c      	ldr	r4, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6898      	ldr	r0, [r3, #8]
 8007780:	893b      	ldrh	r3, [r7, #8]
 8007782:	7af9      	ldrb	r1, [r7, #11]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	47a0      	blx	r4
 8007788:	6178      	str	r0, [r7, #20]

  return ret;
 800778a:	697b      	ldr	r3, [r7, #20]
}
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	bd90      	pop	{r4, r7, pc}

08007794 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007794:	b590      	push	{r4, r7, lr}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	607a      	str	r2, [r7, #4]
 800779e:	461a      	mov	r2, r3
 80077a0:	460b      	mov	r3, r1
 80077a2:	72fb      	strb	r3, [r7, #11]
 80077a4:	4613      	mov	r3, r2
 80077a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681c      	ldr	r4, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6898      	ldr	r0, [r3, #8]
 80077b0:	893b      	ldrh	r3, [r7, #8]
 80077b2:	7af9      	ldrb	r1, [r7, #11]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	47a0      	blx	r4
 80077b8:	6178      	str	r0, [r7, #20]

  return ret;
 80077ba:	697b      	ldr	r3, [r7, #20]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd90      	pop	{r4, r7, pc}

080077c4 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 80077ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80077f4 <stts751_from_lsb_to_celsius+0x30>
 80077de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80077e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80077e6:	eeb0 0a67 	vmov.f32	s0, s15
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	43800000 	.word	0x43800000

080077f8 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8007804:	23aa      	movs	r3, #170	; 0xaa
 8007806:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8007808:	f107 020c 	add.w	r2, r7, #12
 800780c:	2301      	movs	r3, #1
 800780e:	2104      	movs	r1, #4
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff ffa7 	bl	8007764 <stts751_read_reg>
 8007816:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10f      	bne.n	800783e <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	b2da      	uxtb	r2, r3
 8007826:	7b3b      	ldrb	r3, [r7, #12]
 8007828:	f362 0303 	bfi	r3, r2, #0, #4
 800782c:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800782e:	f107 020c 	add.w	r2, r7, #12
 8007832:	2301      	movs	r3, #1
 8007834:	2104      	movs	r1, #4
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff ffac 	bl	8007794 <stts751_write_reg>
 800783c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d107      	bne.n	8007854 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8007844:	f107 0210 	add.w	r2, r7, #16
 8007848:	2301      	movs	r3, #1
 800784a:	2103      	movs	r1, #3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ff89 	bl	8007764 <stts751_read_reg>
 8007852:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d111      	bne.n	800787e <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	09db      	lsrs	r3, r3, #7
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	b2da      	uxtb	r2, r3
 8007866:	7c3b      	ldrb	r3, [r7, #16]
 8007868:	f362 1386 	bfi	r3, r2, #6, #1
 800786c:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800786e:	f107 0210 	add.w	r2, r7, #16
 8007872:	2301      	movs	r3, #1
 8007874:	2103      	movs	r1, #3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff ff8c 	bl	8007794 <stts751_write_reg>
 800787c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <stts751_temp_data_rate_set+0xa2>
 8007884:	78fb      	ldrb	r3, [r7, #3]
 8007886:	2b90      	cmp	r3, #144	; 0x90
 8007888:	d107      	bne.n	800789a <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 800788a:	f107 020b 	add.w	r2, r7, #11
 800788e:	2301      	movs	r3, #1
 8007890:	210f      	movs	r1, #15
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff ff7e 	bl	8007794 <stts751_write_reg>
 8007898:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800789a:	697b      	ldr	r3, [r7, #20]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80078ae:	f107 0210 	add.w	r2, r7, #16
 80078b2:	2301      	movs	r3, #1
 80078b4:	2104      	movs	r1, #4
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff ff54 	bl	8007764 <stts751_read_reg>
 80078bc:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d107      	bne.n	80078d4 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80078c4:	f107 020c 	add.w	r2, r7, #12
 80078c8:	2301      	movs	r3, #1
 80078ca:	2103      	movs	r1, #3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ff49 	bl	8007764 <stts751_read_reg>
 80078d2:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 80078d4:	7b3b      	ldrb	r3, [r7, #12]
 80078d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	01db      	lsls	r3, r3, #7
 80078de:	7c3a      	ldrb	r2, [r7, #16]
 80078e0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	4413      	add	r3, r2
 80078e8:	2b90      	cmp	r3, #144	; 0x90
 80078ea:	d025      	beq.n	8007938 <stts751_temp_data_rate_get+0x94>
 80078ec:	2b90      	cmp	r3, #144	; 0x90
 80078ee:	dc4f      	bgt.n	8007990 <stts751_temp_data_rate_get+0xec>
 80078f0:	2b09      	cmp	r3, #9
 80078f2:	dc1b      	bgt.n	800792c <stts751_temp_data_rate_get+0x88>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db4b      	blt.n	8007990 <stts751_temp_data_rate_get+0xec>
 80078f8:	2b09      	cmp	r3, #9
 80078fa:	d849      	bhi.n	8007990 <stts751_temp_data_rate_get+0xec>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <stts751_temp_data_rate_get+0x60>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007941 	.word	0x08007941
 8007908:	08007949 	.word	0x08007949
 800790c:	08007951 	.word	0x08007951
 8007910:	08007959 	.word	0x08007959
 8007914:	08007961 	.word	0x08007961
 8007918:	08007969 	.word	0x08007969
 800791c:	08007971 	.word	0x08007971
 8007920:	08007979 	.word	0x08007979
 8007924:	08007981 	.word	0x08007981
 8007928:	08007989 	.word	0x08007989
 800792c:	2b80      	cmp	r3, #128	; 0x80
 800792e:	d12f      	bne.n	8007990 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2280      	movs	r2, #128	; 0x80
 8007934:	701a      	strb	r2, [r3, #0]
      break;
 8007936:	e02f      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2290      	movs	r2, #144	; 0x90
 800793c:	701a      	strb	r2, [r3, #0]
      break;
 800793e:	e02b      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
      break;
 8007946:	e027      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2201      	movs	r2, #1
 800794c:	701a      	strb	r2, [r3, #0]
      break;
 800794e:	e023      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2202      	movs	r2, #2
 8007954:	701a      	strb	r2, [r3, #0]
      break;
 8007956:	e01f      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2203      	movs	r2, #3
 800795c:	701a      	strb	r2, [r3, #0]
      break;
 800795e:	e01b      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2204      	movs	r2, #4
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e017      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2205      	movs	r2, #5
 800796c:	701a      	strb	r2, [r3, #0]
      break;
 800796e:	e013      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2206      	movs	r2, #6
 8007974:	701a      	strb	r2, [r3, #0]
      break;
 8007976:	e00f      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2207      	movs	r2, #7
 800797c:	701a      	strb	r2, [r3, #0]
      break;
 800797e:	e00b      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2208      	movs	r2, #8
 8007984:	701a      	strb	r2, [r3, #0]
      break;
 8007986:	e007      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2209      	movs	r2, #9
 800798c:	701a      	strb	r2, [r3, #0]
      break;
 800798e:	e003      	b.n	8007998 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2280      	movs	r2, #128	; 0x80
 8007994:	701a      	strb	r2, [r3, #0]
      break;
 8007996:	bf00      	nop
  }

  return ret;
 8007998:	697b      	ldr	r3, [r7, #20]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop

080079a4 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80079b0:	f107 0208 	add.w	r2, r7, #8
 80079b4:	2301      	movs	r3, #1
 80079b6:	2103      	movs	r1, #3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff fed3 	bl	8007764 <stts751_read_reg>
 80079be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10f      	bne.n	80079e6 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	f003 0303 	and.w	r3, r3, #3
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	7a3b      	ldrb	r3, [r7, #8]
 80079d0:	f362 0383 	bfi	r3, r2, #2, #2
 80079d4:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80079d6:	f107 0208 	add.w	r2, r7, #8
 80079da:	2301      	movs	r3, #1
 80079dc:	2103      	movs	r1, #3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff fed8 	bl	8007794 <stts751_write_reg>
 80079e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80079fa:	f107 0208 	add.w	r2, r7, #8
 80079fe:	2301      	movs	r3, #1
 8007a00:	2103      	movs	r1, #3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff feae 	bl	8007764 <stts751_read_reg>
 8007a08:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8007a0a:	7a3b      	ldrb	r3, [r7, #8]
 8007a0c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d81a      	bhi.n	8007a4c <stts751_resolution_get+0x5c>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <stts751_resolution_get+0x2c>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a35 	.word	0x08007a35
 8007a20:	08007a3d 	.word	0x08007a3d
 8007a24:	08007a2d 	.word	0x08007a2d
 8007a28:	08007a45 	.word	0x08007a45
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
      break;
 8007a32:	e00f      	b.n	8007a54 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	701a      	strb	r2, [r3, #0]
      break;
 8007a3a:	e00b      	b.n	8007a54 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	701a      	strb	r2, [r3, #0]
      break;
 8007a42:	e007      	b.n	8007a54 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2203      	movs	r2, #3
 8007a48:	701a      	strb	r2, [r3, #0]
      break;
 8007a4a:	e003      	b.n	8007a54 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	701a      	strb	r2, [r3, #0]
      break;
 8007a52:	bf00      	nop
  }

  return ret;
 8007a54:	68fb      	ldr	r3, [r7, #12]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop

08007a60 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8007a6a:	f107 0308 	add.w	r3, r7, #8
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	2301      	movs	r3, #1
 8007a72:	2100      	movs	r1, #0
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff fe75 	bl	8007764 <stts751_read_reg>
 8007a7a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d118      	bne.n	8007ab4 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8007a82:	f107 0208 	add.w	r2, r7, #8
 8007a86:	2301      	movs	r3, #1
 8007a88:	2102      	movs	r1, #2
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff fe6a 	bl	8007764 <stts751_read_reg>
 8007a90:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8007a92:	7a7b      	ldrb	r3, [r7, #9]
 8007a94:	b21a      	sxth	r2, r3
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	7a3b      	ldrb	r3, [r7, #8]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	b21a      	sxth	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8007aca:	f107 0208 	add.w	r2, r7, #8
 8007ace:	2301      	movs	r3, #1
 8007ad0:	2103      	movs	r1, #3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fe46 	bl	8007764 <stts751_read_reg>
 8007ad8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10f      	bne.n	8007b00 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	7a3b      	ldrb	r3, [r7, #8]
 8007aea:	f362 13c7 	bfi	r3, r2, #7, #1
 8007aee:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8007af0:	f107 0208 	add.w	r2, r7, #8
 8007af4:	2301      	movs	r3, #1
 8007af6:	2103      	movs	r1, #3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fe4b 	bl	8007794 <stts751_write_reg>
 8007afe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b00:	68fb      	ldr	r3, [r7, #12]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	2301      	movs	r3, #1
 8007b18:	21fd      	movs	r1, #253	; 0xfd
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fe22 	bl	8007764 <stts751_read_reg>
 8007b20:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d107      	bne.n	8007b38 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	21fe      	movs	r1, #254	; 0xfe
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fe17 	bl	8007764 <stts751_read_reg>
 8007b36:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	1c9a      	adds	r2, r3, #2
 8007b42:	2301      	movs	r3, #1
 8007b44:	21ff      	movs	r1, #255	; 0xff
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fe0c 	bl	8007764 <stts751_read_reg>
 8007b4c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8007b66:	2301      	movs	r3, #1
 8007b68:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d06e      	beq.n	8007c52 <IKS01A3_ENV_SENSOR_Init+0xfa>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	f200 809d 	bhi.w	8007cb6 <IKS01A3_ENV_SENSOR_Init+0x15e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <IKS01A3_ENV_SENSOR_Init+0x32>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d032      	beq.n	8007bee <IKS01A3_ENV_SENSOR_Init+0x96>
 8007b88:	e095      	b.n	8007cb6 <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8007b8a:	6838      	ldr	r0, [r7, #0]
 8007b8c:	f000 f9a8 	bl	8007ee0 <HTS221_0_Probe>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007b96:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9a:	e0cc      	b.n	8007d36 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007b9c:	4a68      	ldr	r2, [pc, #416]	; (8007d40 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	4967      	ldr	r1, [pc, #412]	; (8007d44 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007bae:	f107 0108 	add.w	r1, r7, #8
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4798      	blx	r3
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007bbc:	f06f 0306 	mvn.w	r3, #6
 8007bc0:	e0b9      	b.n	8007d36 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007bc2:	7a3b      	ldrb	r3, [r7, #8]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d103      	bne.n	8007bd0 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007bd0:	7abb      	ldrb	r3, [r7, #10]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d103      	bne.n	8007bde <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	f043 0304 	orr.w	r3, r3, #4
 8007bdc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007bde:	7a7b      	ldrb	r3, [r7, #9]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d16c      	bne.n	8007cbe <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	f043 0302 	orr.w	r3, r3, #2
 8007bea:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007bec:	e067      	b.n	8007cbe <IKS01A3_ENV_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8007bee:	6838      	ldr	r0, [r7, #0]
 8007bf0:	f000 fa30 	bl	8008054 <LPS22HH_0_Probe>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfe:	e09a      	b.n	8007d36 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c00:	4a4f      	ldr	r2, [pc, #316]	; (8007d40 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	494e      	ldr	r1, [pc, #312]	; (8007d44 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c12:	f107 0108 	add.w	r1, r7, #8
 8007c16:	4610      	mov	r0, r2
 8007c18:	4798      	blx	r3
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c20:	f06f 0306 	mvn.w	r3, #6
 8007c24:	e087      	b.n	8007d36 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007c26:	7a3b      	ldrb	r3, [r7, #8]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d103      	bne.n	8007c34 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007c34:	7abb      	ldrb	r3, [r7, #10]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d103      	bne.n	8007c42 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	f043 0304 	orr.w	r3, r3, #4
 8007c40:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007c42:	7a7b      	ldrb	r3, [r7, #9]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d13c      	bne.n	8007cc2 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	f043 0302 	orr.w	r3, r3, #2
 8007c4e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007c50:	e037      	b.n	8007cc2 <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c52:	6838      	ldr	r0, [r7, #0]
 8007c54:	f000 faba 	bl	80081cc <STTS751_0_Probe>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c62:	e068      	b.n	8007d36 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c64:	4a36      	ldr	r2, [pc, #216]	; (8007d40 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	4935      	ldr	r1, [pc, #212]	; (8007d44 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c76:	f107 0108 	add.w	r1, r7, #8
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4798      	blx	r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c84:	f06f 0306 	mvn.w	r3, #6
 8007c88:	e055      	b.n	8007d36 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8007c8a:	7a3b      	ldrb	r3, [r7, #8]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d103      	bne.n	8007c98 <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f043 0301 	orr.w	r3, r3, #1
 8007c96:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8007c98:	7abb      	ldrb	r3, [r7, #10]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d103      	bne.n	8007ca6 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	f043 0304 	orr.w	r3, r3, #4
 8007ca4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8007ca6:	7a7b      	ldrb	r3, [r7, #9]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d10c      	bne.n	8007cc6 <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	f043 0302 	orr.w	r3, r3, #2
 8007cb2:	61bb      	str	r3, [r7, #24]
      }
      break;
 8007cb4:	e007      	b.n	8007cc6 <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007cb6:	f06f 0301 	mvn.w	r3, #1
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007cbc:	e004      	b.n	8007cc8 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007cbe:	bf00      	nop
 8007cc0:	e002      	b.n	8007cc8 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007cc2:	bf00      	nop
 8007cc4:	e000      	b.n	8007cc8 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8007cc6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	e031      	b.n	8007d36 <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61fb      	str	r3, [r7, #28]
 8007cd6:	e02a      	b.n	8007d2e <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	6a3a      	ldr	r2, [r7, #32]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d11e      	bne.n	8007d22 <IKS01A3_ENV_SENSOR_Init+0x1ca>
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	6a3a      	ldr	r2, [r7, #32]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d118      	bne.n	8007d22 <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007cf0:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007cf8:	4814      	ldr	r0, [pc, #80]	; (8007d4c <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	4413      	add	r3, r2
 8007d02:	440b      	add	r3, r1
 8007d04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	490e      	ldr	r1, [pc, #56]	; (8007d44 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d12:	4610      	mov	r0, r2
 8007d14:	4798      	blx	r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007d1c:	f06f 0304 	mvn.w	r3, #4
 8007d20:	e009      	b.n	8007d36 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d9d1      	bls.n	8007cd8 <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3728      	adds	r7, #40	; 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20001b08 	.word	0x20001b08
 8007d44:	20001ad8 	.word	0x20001ad8
 8007d48:	20001314 	.word	0x20001314
 8007d4c:	20001ae4 	.word	0x20001ae4

08007d50 <IKS01A3_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d903      	bls.n	8007d68 <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d60:	f06f 0301 	mvn.w	r3, #1
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e028      	b.n	8007dba <IKS01A3_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007d68:	4a16      	ldr	r2, [pc, #88]	; (8007dc4 <IKS01A3_ENV_SENSOR_Enable+0x74>)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	4013      	ands	r3, r2
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d11c      	bne.n	8007db4 <IKS01A3_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007d7a:	4a13      	ldr	r2, [pc, #76]	; (8007dc8 <IKS01A3_ENV_SENSOR_Enable+0x78>)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d82:	4812      	ldr	r0, [pc, #72]	; (8007dcc <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	4413      	add	r3, r2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	490e      	ldr	r1, [pc, #56]	; (8007dd0 <IKS01A3_ENV_SENSOR_Enable+0x80>)
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <IKS01A3_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007da6:	f06f 0304 	mvn.w	r3, #4
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e005      	b.n	8007dba <IKS01A3_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	e002      	b.n	8007dba <IKS01A3_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007db4:	f06f 0301 	mvn.w	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007dba:	68fb      	ldr	r3, [r7, #12]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20001b14 	.word	0x20001b14
 8007dc8:	20001314 	.word	0x20001314
 8007dcc:	20001ae4 	.word	0x20001ae4
 8007dd0:	20001ad8 	.word	0x20001ad8

08007dd4 <IKS01A3_ENV_SENSOR_Disable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d903      	bls.n	8007dec <IKS01A3_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007de4:	f06f 0301 	mvn.w	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	e028      	b.n	8007e3e <IKS01A3_ENV_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007dec:	4a16      	ldr	r2, [pc, #88]	; (8007e48 <IKS01A3_ENV_SENSOR_Disable+0x74>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	4013      	ands	r3, r2
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d11c      	bne.n	8007e38 <IKS01A3_ENV_SENSOR_Disable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007dfe:	4a13      	ldr	r2, [pc, #76]	; (8007e4c <IKS01A3_ENV_SENSOR_Disable+0x78>)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e06:	4812      	ldr	r0, [pc, #72]	; (8007e50 <IKS01A3_ENV_SENSOR_Disable+0x7c>)
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	4413      	add	r3, r2
 8007e10:	440b      	add	r3, r1
 8007e12:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	490e      	ldr	r1, [pc, #56]	; (8007e54 <IKS01A3_ENV_SENSOR_Disable+0x80>)
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <IKS01A3_ENV_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e2a:	f06f 0304 	mvn.w	r3, #4
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e005      	b.n	8007e3e <IKS01A3_ENV_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e002      	b.n	8007e3e <IKS01A3_ENV_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007e38:	f06f 0301 	mvn.w	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	20001b14 	.word	0x20001b14
 8007e4c:	20001314 	.word	0x20001314
 8007e50:	20001ae4 	.word	0x20001ae4
 8007e54:	20001ad8 	.word	0x20001ad8

08007e58 <IKS01A3_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d903      	bls.n	8007e72 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e6a:	f06f 0301 	mvn.w	r3, #1
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	e029      	b.n	8007ec6 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007e72:	4a17      	ldr	r2, [pc, #92]	; (8007ed0 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d11d      	bne.n	8007ec0 <IKS01A3_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007e84:	4a13      	ldr	r2, [pc, #76]	; (8007ed4 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e8c:	4812      	ldr	r0, [pc, #72]	; (8007ed8 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4613      	mov	r3, r2
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	440b      	add	r3, r1
 8007e98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	490f      	ldr	r1, [pc, #60]	; (8007edc <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <IKS01A3_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007eb2:	f06f 0304 	mvn.w	r3, #4
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	e005      	b.n	8007ec6 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	e002      	b.n	8007ec6 <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007ec0:	f06f 0301 	mvn.w	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007ec6:	697b      	ldr	r3, [r7, #20]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20001b14 	.word	0x20001b14
 8007ed4:	20001314 	.word	0x20001314
 8007ed8:	20001ae4 	.word	0x20001ae4
 8007edc:	20001ad8 	.word	0x20001ad8

08007ee0 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b090      	sub	sp, #64	; 0x40
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8007eec:	2300      	movs	r3, #0
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8007ef0:	23bf      	movs	r3, #191	; 0xbf
 8007ef2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007ef6:	4b49      	ldr	r3, [pc, #292]	; (800801c <HTS221_0_Probe+0x13c>)
 8007ef8:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007efa:	4b49      	ldr	r3, [pc, #292]	; (8008020 <HTS221_0_Probe+0x140>)
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007efe:	4b49      	ldr	r3, [pc, #292]	; (8008024 <HTS221_0_Probe+0x144>)
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007f02:	4b49      	ldr	r3, [pc, #292]	; (8008028 <HTS221_0_Probe+0x148>)
 8007f04:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007f06:	4b49      	ldr	r3, [pc, #292]	; (800802c <HTS221_0_Probe+0x14c>)
 8007f08:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007f0a:	f107 0320 	add.w	r3, r7, #32
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4847      	ldr	r0, [pc, #284]	; (8008030 <HTS221_0_Probe+0x150>)
 8007f12:	f7f9 f991 	bl	8001238 <HTS221_RegisterBusIO>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f1c:	f06f 0306 	mvn.w	r3, #6
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f22:	e076      	b.n	8008012 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007f24:	f107 031f 	add.w	r3, r7, #31
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4841      	ldr	r0, [pc, #260]	; (8008030 <HTS221_0_Probe+0x150>)
 8007f2c:	f7f9 fa09 	bl	8001342 <HTS221_ReadID>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f36:	f06f 0306 	mvn.w	r3, #6
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f3c:	e069      	b.n	8008012 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8007f3e:	7ffb      	ldrb	r3, [r7, #31]
 8007f40:	2bbc      	cmp	r3, #188	; 0xbc
 8007f42:	d003      	beq.n	8007f4c <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f44:	f06f 0306 	mvn.w	r3, #6
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f4a:	e062      	b.n	8008012 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007f4c:	f107 030c 	add.w	r3, r7, #12
 8007f50:	4619      	mov	r1, r3
 8007f52:	4837      	ldr	r0, [pc, #220]	; (8008030 <HTS221_0_Probe+0x150>)
 8007f54:	f7f9 fa0c 	bl	8001370 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007f58:	7b3b      	ldrb	r3, [r7, #12]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	7b7b      	ldrb	r3, [r7, #13]
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007f66:	4313      	orrs	r3, r2
 8007f68:	4a32      	ldr	r2, [pc, #200]	; (8008034 <HTS221_0_Probe+0x154>)
 8007f6a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8007f6c:	4b32      	ldr	r3, [pc, #200]	; (8008038 <HTS221_0_Probe+0x158>)
 8007f6e:	4a30      	ldr	r2, [pc, #192]	; (8008030 <HTS221_0_Probe+0x150>)
 8007f70:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8007f72:	4b32      	ldr	r3, [pc, #200]	; (800803c <HTS221_0_Probe+0x15c>)
 8007f74:	4a32      	ldr	r2, [pc, #200]	; (8008040 <HTS221_0_Probe+0x160>)
 8007f76:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d11d      	bne.n	8007fba <HTS221_0_Probe+0xda>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d018      	beq.n	8007fba <HTS221_0_Probe+0xda>
 8007f88:	7b3b      	ldrb	r3, [r7, #12]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d115      	bne.n	8007fba <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007f8e:	4b2d      	ldr	r3, [pc, #180]	; (8008044 <HTS221_0_Probe+0x164>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	4a2d      	ldr	r2, [pc, #180]	; (8008048 <HTS221_0_Probe+0x168>)
 8007f94:	492d      	ldr	r1, [pc, #180]	; (800804c <HTS221_0_Probe+0x16c>)
 8007f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007f9a:	4b28      	ldr	r3, [pc, #160]	; (800803c <HTS221_0_Probe+0x15c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a25      	ldr	r2, [pc, #148]	; (8008038 <HTS221_0_Probe+0x158>)
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4798      	blx	r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fae:	f06f 0304 	mvn.w	r3, #4
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb4:	e001      	b.n	8007fba <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d11d      	bne.n	8007ffc <HTS221_0_Probe+0x11c>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d018      	beq.n	8007ffc <HTS221_0_Probe+0x11c>
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d115      	bne.n	8007ffc <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <HTS221_0_Probe+0x164>)
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	4a1c      	ldr	r2, [pc, #112]	; (8008048 <HTS221_0_Probe+0x168>)
 8007fd6:	491e      	ldr	r1, [pc, #120]	; (8008050 <HTS221_0_Probe+0x170>)
 8007fd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8007fdc:	4b17      	ldr	r3, [pc, #92]	; (800803c <HTS221_0_Probe+0x15c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a15      	ldr	r2, [pc, #84]	; (8008038 <HTS221_0_Probe+0x158>)
 8007fe4:	6812      	ldr	r2, [r2, #0]
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4798      	blx	r3
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ff0:	f06f 0304 	mvn.w	r3, #4
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff6:	e001      	b.n	8007ffc <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d107      	bne.n	8008012 <HTS221_0_Probe+0x132>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800800c:	f06f 0304 	mvn.w	r3, #4
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8008012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008014:	4618      	mov	r0, r3
 8008016:	3740      	adds	r7, #64	; 0x40
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	080102a1 	.word	0x080102a1
 8008020:	0801031d 	.word	0x0801031d
 8008024:	080103d1 	.word	0x080103d1
 8008028:	0801036d 	.word	0x0801036d
 800802c:	08010435 	.word	0x08010435
 8008030:	20001b20 	.word	0x20001b20
 8008034:	20001b14 	.word	0x20001b14
 8008038:	20001ad8 	.word	0x20001ad8
 800803c:	20001b08 	.word	0x20001b08
 8008040:	200011c0 	.word	0x200011c0
 8008044:	20001314 	.word	0x20001314
 8008048:	20001ae4 	.word	0x20001ae4
 800804c:	200011e4 	.word	0x200011e4
 8008050:	200011d0 	.word	0x200011d0

08008054 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b090      	sub	sp, #64	; 0x40
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8008060:	2300      	movs	r3, #0
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8008064:	23bb      	movs	r3, #187	; 0xbb
 8008066:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 800806a:	4b4a      	ldr	r3, [pc, #296]	; (8008194 <LPS22HH_0_Probe+0x140>)
 800806c:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800806e:	4b4a      	ldr	r3, [pc, #296]	; (8008198 <LPS22HH_0_Probe+0x144>)
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008072:	4b4a      	ldr	r3, [pc, #296]	; (800819c <LPS22HH_0_Probe+0x148>)
 8008074:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008076:	4b4a      	ldr	r3, [pc, #296]	; (80081a0 <LPS22HH_0_Probe+0x14c>)
 8008078:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 800807a:	4b4a      	ldr	r3, [pc, #296]	; (80081a4 <LPS22HH_0_Probe+0x150>)
 800807c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800807e:	f107 0320 	add.w	r3, r7, #32
 8008082:	4619      	mov	r1, r3
 8008084:	4848      	ldr	r0, [pc, #288]	; (80081a8 <LPS22HH_0_Probe+0x154>)
 8008086:	f7fc fa47 	bl	8004518 <LPS22HH_RegisterBusIO>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008090:	f06f 0306 	mvn.w	r3, #6
 8008094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008096:	e078      	b.n	800818a <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8008098:	f107 031f 	add.w	r3, r7, #31
 800809c:	4619      	mov	r1, r3
 800809e:	4842      	ldr	r0, [pc, #264]	; (80081a8 <LPS22HH_0_Probe+0x154>)
 80080a0:	f7fc fadf 	bl	8004662 <LPS22HH_ReadID>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80080aa:	f06f 0306 	mvn.w	r3, #6
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b0:	e06b      	b.n	800818a <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 80080b2:	7ffb      	ldrb	r3, [r7, #31]
 80080b4:	2bb3      	cmp	r3, #179	; 0xb3
 80080b6:	d003      	beq.n	80080c0 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80080b8:	f06f 0306 	mvn.w	r3, #6
 80080bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080be:	e064      	b.n	800818a <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 80080c0:	f107 030c 	add.w	r3, r7, #12
 80080c4:	4619      	mov	r1, r3
 80080c6:	4838      	ldr	r0, [pc, #224]	; (80081a8 <LPS22HH_0_Probe+0x154>)
 80080c8:	f7fc fae2 	bl	8004690 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80080cc:	7b3b      	ldrb	r3, [r7, #12]
 80080ce:	461a      	mov	r2, r3
 80080d0:	7b7b      	ldrb	r3, [r7, #13]
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80080da:	4313      	orrs	r3, r2
 80080dc:	4a33      	ldr	r2, [pc, #204]	; (80081ac <LPS22HH_0_Probe+0x158>)
 80080de:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 80080e0:	4b33      	ldr	r3, [pc, #204]	; (80081b0 <LPS22HH_0_Probe+0x15c>)
 80080e2:	4a31      	ldr	r2, [pc, #196]	; (80081a8 <LPS22HH_0_Probe+0x154>)
 80080e4:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 80080e6:	4b33      	ldr	r3, [pc, #204]	; (80081b4 <LPS22HH_0_Probe+0x160>)
 80080e8:	4a33      	ldr	r2, [pc, #204]	; (80081b8 <LPS22HH_0_Probe+0x164>)
 80080ea:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80080ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d11e      	bne.n	8008130 <LPS22HH_0_Probe+0xdc>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d019      	beq.n	8008130 <LPS22HH_0_Probe+0xdc>
 80080fc:	7b3b      	ldrb	r3, [r7, #12]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d116      	bne.n	8008130 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8008102:	4b2e      	ldr	r3, [pc, #184]	; (80081bc <LPS22HH_0_Probe+0x168>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	4a2e      	ldr	r2, [pc, #184]	; (80081c0 <LPS22HH_0_Probe+0x16c>)
 8008108:	3303      	adds	r3, #3
 800810a:	492e      	ldr	r1, [pc, #184]	; (80081c4 <LPS22HH_0_Probe+0x170>)
 800810c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008110:	4b28      	ldr	r3, [pc, #160]	; (80081b4 <LPS22HH_0_Probe+0x160>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a26      	ldr	r2, [pc, #152]	; (80081b0 <LPS22HH_0_Probe+0x15c>)
 8008118:	6852      	ldr	r2, [r2, #4]
 800811a:	4610      	mov	r0, r2
 800811c:	4798      	blx	r3
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008124:	f06f 0304 	mvn.w	r3, #4
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800812a:	e001      	b.n	8008130 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800812c:	2300      	movs	r3, #0
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d11e      	bne.n	8008174 <LPS22HH_0_Probe+0x120>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d019      	beq.n	8008174 <LPS22HH_0_Probe+0x120>
 8008140:	7b7b      	ldrb	r3, [r7, #13]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d116      	bne.n	8008174 <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8008146:	4b1d      	ldr	r3, [pc, #116]	; (80081bc <LPS22HH_0_Probe+0x168>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	4a1d      	ldr	r2, [pc, #116]	; (80081c0 <LPS22HH_0_Probe+0x16c>)
 800814c:	3303      	adds	r3, #3
 800814e:	491e      	ldr	r1, [pc, #120]	; (80081c8 <LPS22HH_0_Probe+0x174>)
 8008150:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008154:	4b17      	ldr	r3, [pc, #92]	; (80081b4 <LPS22HH_0_Probe+0x160>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a15      	ldr	r2, [pc, #84]	; (80081b0 <LPS22HH_0_Probe+0x15c>)
 800815c:	6852      	ldr	r2, [r2, #4]
 800815e:	4610      	mov	r0, r2
 8008160:	4798      	blx	r3
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008168:	f06f 0304 	mvn.w	r3, #4
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800816e:	e001      	b.n	8008174 <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008170:	2300      	movs	r3, #0
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d107      	bne.n	800818a <LPS22HH_0_Probe+0x136>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008184:	f06f 0304 	mvn.w	r3, #4
 8008188:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800818a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800818c:	4618      	mov	r0, r3
 800818e:	3740      	adds	r7, #64	; 0x40
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	080102a1 	.word	0x080102a1
 8008198:	0801031d 	.word	0x0801031d
 800819c:	080103d1 	.word	0x080103d1
 80081a0:	0801036d 	.word	0x0801036d
 80081a4:	08010435 	.word	0x08010435
 80081a8:	20001b4c 	.word	0x20001b4c
 80081ac:	20001b14 	.word	0x20001b14
 80081b0:	20001ad8 	.word	0x20001ad8
 80081b4:	20001b08 	.word	0x20001b08
 80081b8:	20001260 	.word	0x20001260
 80081bc:	20001314 	.word	0x20001314
 80081c0:	20001ae4 	.word	0x20001ae4
 80081c4:	20001284 	.word	0x20001284
 80081c8:	20001270 	.word	0x20001270

080081cc <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b090      	sub	sp, #64	; 0x40
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 80081d8:	2300      	movs	r3, #0
 80081da:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 80081dc:	2395      	movs	r3, #149	; 0x95
 80081de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 80081e2:	4b3f      	ldr	r3, [pc, #252]	; (80082e0 <STTS751_0_Probe+0x114>)
 80081e4:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80081e6:	4b3f      	ldr	r3, [pc, #252]	; (80082e4 <STTS751_0_Probe+0x118>)
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80081ea:	4b3f      	ldr	r3, [pc, #252]	; (80082e8 <STTS751_0_Probe+0x11c>)
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80081ee:	4b3f      	ldr	r3, [pc, #252]	; (80082ec <STTS751_0_Probe+0x120>)
 80081f0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 80081f2:	4b3f      	ldr	r3, [pc, #252]	; (80082f0 <STTS751_0_Probe+0x124>)
 80081f4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 80081f6:	f107 0320 	add.w	r3, r7, #32
 80081fa:	4619      	mov	r1, r3
 80081fc:	483d      	ldr	r0, [pc, #244]	; (80082f4 <STTS751_0_Probe+0x128>)
 80081fe:	f7fe ffbd 	bl	800717c <STTS751_RegisterBusIO>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008208:	f06f 0306 	mvn.w	r3, #6
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800820e:	e061      	b.n	80082d4 <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8008210:	f107 031f 	add.w	r3, r7, #31
 8008214:	4619      	mov	r1, r3
 8008216:	4837      	ldr	r0, [pc, #220]	; (80082f4 <STTS751_0_Probe+0x128>)
 8008218:	f7ff f84b 	bl	80072b2 <STTS751_ReadID>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008222:	f06f 0306 	mvn.w	r3, #6
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008228:	e054      	b.n	80082d4 <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 800822a:	7ffb      	ldrb	r3, [r7, #31]
 800822c:	2b53      	cmp	r3, #83	; 0x53
 800822e:	d003      	beq.n	8008238 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008230:	f06f 0306 	mvn.w	r3, #6
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008236:	e04d      	b.n	80082d4 <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	4619      	mov	r1, r3
 800823e:	482d      	ldr	r0, [pc, #180]	; (80082f4 <STTS751_0_Probe+0x128>)
 8008240:	f7ff f852 	bl	80072e8 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008244:	7b3b      	ldrb	r3, [r7, #12]
 8008246:	461a      	mov	r2, r3
 8008248:	7b7b      	ldrb	r3, [r7, #13]
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008252:	4313      	orrs	r3, r2
 8008254:	4a28      	ldr	r2, [pc, #160]	; (80082f8 <STTS751_0_Probe+0x12c>)
 8008256:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008258:	4b28      	ldr	r3, [pc, #160]	; (80082fc <STTS751_0_Probe+0x130>)
 800825a:	4a26      	ldr	r2, [pc, #152]	; (80082f4 <STTS751_0_Probe+0x128>)
 800825c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800825e:	4b28      	ldr	r3, [pc, #160]	; (8008300 <STTS751_0_Probe+0x134>)
 8008260:	4a28      	ldr	r2, [pc, #160]	; (8008304 <STTS751_0_Probe+0x138>)
 8008262:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d11e      	bne.n	80082a8 <STTS751_0_Probe+0xdc>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d019      	beq.n	80082a8 <STTS751_0_Probe+0xdc>
 8008274:	7b3b      	ldrb	r3, [r7, #12]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d116      	bne.n	80082a8 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800827a:	4b23      	ldr	r3, [pc, #140]	; (8008308 <STTS751_0_Probe+0x13c>)
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	4a23      	ldr	r2, [pc, #140]	; (800830c <STTS751_0_Probe+0x140>)
 8008280:	3306      	adds	r3, #6
 8008282:	4923      	ldr	r1, [pc, #140]	; (8008310 <STTS751_0_Probe+0x144>)
 8008284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8008288:	4b1d      	ldr	r3, [pc, #116]	; (8008300 <STTS751_0_Probe+0x134>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1b      	ldr	r2, [pc, #108]	; (80082fc <STTS751_0_Probe+0x130>)
 8008290:	6892      	ldr	r2, [r2, #8]
 8008292:	4610      	mov	r0, r2
 8008294:	4798      	blx	r3
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800829c:	f06f 0304 	mvn.w	r3, #4
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082a2:	e001      	b.n	80082a8 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80082a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d107      	bne.n	80082be <STTS751_0_Probe+0xf2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80082b8:	f06f 0304 	mvn.w	r3, #4
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80082be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d107      	bne.n	80082d4 <STTS751_0_Probe+0x108>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d002      	beq.n	80082d4 <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80082ce:	f06f 0304 	mvn.w	r3, #4
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80082d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3740      	adds	r7, #64	; 0x40
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	080102a1 	.word	0x080102a1
 80082e4:	0801031d 	.word	0x0801031d
 80082e8:	080103d1 	.word	0x080103d1
 80082ec:	0801036d 	.word	0x0801036d
 80082f0:	08010435 	.word	0x08010435
 80082f4:	20001b78 	.word	0x20001b78
 80082f8:	20001b14 	.word	0x20001b14
 80082fc:	20001ad8 	.word	0x20001ad8
 8008300:	20001b08 	.word	0x20001b08
 8008304:	200012f0 	.word	0x200012f0
 8008308:	20001314 	.word	0x20001314
 800830c:	20001ae4 	.word	0x20001ae4
 8008310:	20001300 	.word	0x20001300

08008314 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08e      	sub	sp, #56	; 0x38
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800831e:	2300      	movs	r3, #0
 8008320:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8008322:	2301      	movs	r3, #1
 8008324:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b02      	cmp	r3, #2
 800832e:	d06e      	beq.n	800840e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b02      	cmp	r3, #2
 8008334:	f200 809d 	bhi.w	8008472 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d032      	beq.n	80083aa <IKS01A3_MOTION_SENSOR_Init+0x96>
 8008344:	e095      	b.n	8008472 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8008346:	6838      	ldr	r0, [r7, #0]
 8008348:	f000 fa32 	bl	80087b0 <LSM6DSO_0_Probe>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8008352:	f04f 33ff 	mov.w	r3, #4294967295
 8008356:	e0cc      	b.n	80084f2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008358:	4a68      	ldr	r2, [pc, #416]	; (80084fc <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	4967      	ldr	r1, [pc, #412]	; (8008500 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800836a:	f107 010c 	add.w	r1, r7, #12
 800836e:	4610      	mov	r0, r2
 8008370:	4798      	blx	r3
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008378:	f06f 0306 	mvn.w	r3, #6
 800837c:	e0b9      	b.n	80084f2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800837e:	7b3b      	ldrb	r3, [r7, #12]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d103      	bne.n	800838c <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	f043 0302 	orr.w	r3, r3, #2
 800838a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800838c:	7b7b      	ldrb	r3, [r7, #13]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d103      	bne.n	800839a <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	f043 0301 	orr.w	r3, r3, #1
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d16c      	bne.n	800847a <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	f043 0304 	orr.w	r3, r3, #4
 80083a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80083a8:	e067      	b.n	800847a <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80083aa:	6838      	ldr	r0, [r7, #0]
 80083ac:	f000 fabc 	bl	8008928 <LIS2DW12_0_Probe>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80083b6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ba:	e09a      	b.n	80084f2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80083bc:	4a4f      	ldr	r2, [pc, #316]	; (80084fc <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	494e      	ldr	r1, [pc, #312]	; (8008500 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083ce:	f107 010c 	add.w	r1, r7, #12
 80083d2:	4610      	mov	r0, r2
 80083d4:	4798      	blx	r3
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80083dc:	f06f 0306 	mvn.w	r3, #6
 80083e0:	e087      	b.n	80084f2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80083e2:	7b3b      	ldrb	r3, [r7, #12]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d103      	bne.n	80083f0 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	f043 0302 	orr.w	r3, r3, #2
 80083ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80083f0:	7b7b      	ldrb	r3, [r7, #13]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d103      	bne.n	80083fe <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	f043 0301 	orr.w	r3, r3, #1
 80083fc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d13c      	bne.n	800847e <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	f043 0304 	orr.w	r3, r3, #4
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800840c:	e037      	b.n	800847e <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800840e:	6838      	ldr	r0, [r7, #0]
 8008410:	f000 fb2e 	bl	8008a70 <LIS2MDL_0_Probe>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295
 800841e:	e068      	b.n	80084f2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008420:	4a36      	ldr	r2, [pc, #216]	; (80084fc <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	4935      	ldr	r1, [pc, #212]	; (8008500 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008432:	f107 010c 	add.w	r1, r7, #12
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008440:	f06f 0306 	mvn.w	r3, #6
 8008444:	e055      	b.n	80084f2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008446:	7b3b      	ldrb	r3, [r7, #12]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d103      	bne.n	8008454 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	f043 0302 	orr.w	r3, r3, #2
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008454:	7b7b      	ldrb	r3, [r7, #13]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d103      	bne.n	8008462 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	f043 0301 	orr.w	r3, r3, #1
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d10c      	bne.n	8008482 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	f043 0304 	orr.w	r3, r3, #4
 800846e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008470:	e007      	b.n	8008482 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008472:	f06f 0301 	mvn.w	r3, #1
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008478:	e004      	b.n	8008484 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800847a:	bf00      	nop
 800847c:	e002      	b.n	8008484 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800847e:	bf00      	nop
 8008480:	e000      	b.n	8008484 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008482:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800848a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848c:	e031      	b.n	80084f2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800848e:	2300      	movs	r3, #0
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008492:	e02a      	b.n	80084ea <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	4013      	ands	r3, r2
 800849a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800849c:	429a      	cmp	r2, r3
 800849e:	d11e      	bne.n	80084de <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80084a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	4013      	ands	r3, r2
 80084a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d118      	bne.n	80084de <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80084ac:	4a15      	ldr	r2, [pc, #84]	; (8008504 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80084b4:	4814      	ldr	r0, [pc, #80]	; (8008508 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	4613      	mov	r3, r2
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	4413      	add	r3, r2
 80084be:	440b      	add	r3, r1
 80084c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	490e      	ldr	r1, [pc, #56]	; (8008500 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80084ce:	4610      	mov	r0, r2
 80084d0:	4798      	blx	r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80084d8:	f06f 0304 	mvn.w	r3, #4
 80084dc:	e009      	b.n	80084f2 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	005b      	lsls	r3, r3, #1
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e6:	3301      	adds	r3, #1
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d9d1      	bls.n	8008494 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3738      	adds	r7, #56	; 0x38
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20001bd8 	.word	0x20001bd8
 8008500:	20001ba8 	.word	0x20001ba8
 8008504:	20001328 	.word	0x20001328
 8008508:	20001bb4 	.word	0x20001bb4

0800850c <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d903      	bls.n	8008524 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800851c:	f06f 0301 	mvn.w	r3, #1
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e028      	b.n	8008576 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008524:	4a16      	ldr	r2, [pc, #88]	; (8008580 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	4013      	ands	r3, r2
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d11c      	bne.n	8008570 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008536:	4a13      	ldr	r2, [pc, #76]	; (8008584 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800853e:	4812      	ldr	r0, [pc, #72]	; (8008588 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	4413      	add	r3, r2
 8008548:	440b      	add	r3, r1
 800854a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	490e      	ldr	r1, [pc, #56]	; (800858c <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008562:	f06f 0304 	mvn.w	r3, #4
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	e005      	b.n	8008576 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	e002      	b.n	8008576 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008570:	f06f 0301 	mvn.w	r3, #1
 8008574:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008576:	68fb      	ldr	r3, [r7, #12]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20001be4 	.word	0x20001be4
 8008584:	20001328 	.word	0x20001328
 8008588:	20001bb4 	.word	0x20001bb4
 800858c:	20001ba8 	.word	0x20001ba8

08008590 <IKS01A3_MOTION_SENSOR_Disable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d903      	bls.n	80085a8 <IKS01A3_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80085a0:	f06f 0301 	mvn.w	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	e028      	b.n	80085fa <IKS01A3_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80085a8:	4a16      	ldr	r2, [pc, #88]	; (8008604 <IKS01A3_MOTION_SENSOR_Disable+0x74>)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	4013      	ands	r3, r2
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d11c      	bne.n	80085f4 <IKS01A3_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80085ba:	4a13      	ldr	r2, [pc, #76]	; (8008608 <IKS01A3_MOTION_SENSOR_Disable+0x78>)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085c2:	4812      	ldr	r0, [pc, #72]	; (800860c <IKS01A3_MOTION_SENSOR_Disable+0x7c>)
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	4613      	mov	r3, r2
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	4413      	add	r3, r2
 80085cc:	440b      	add	r3, r1
 80085ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	490e      	ldr	r1, [pc, #56]	; (8008610 <IKS01A3_MOTION_SENSOR_Disable+0x80>)
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80085dc:	4610      	mov	r0, r2
 80085de:	4798      	blx	r3
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <IKS01A3_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80085e6:	f06f 0304 	mvn.w	r3, #4
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	e005      	b.n	80085fa <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	e002      	b.n	80085fa <IKS01A3_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80085f4:	f06f 0301 	mvn.w	r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80085fa:	68fb      	ldr	r3, [r7, #12]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20001be4 	.word	0x20001be4
 8008608:	20001328 	.word	0x20001328
 800860c:	20001bb4 	.word	0x20001bb4
 8008610:	20001ba8 	.word	0x20001ba8

08008614 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d903      	bls.n	800862e <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008626:	f06f 0301 	mvn.w	r3, #1
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	e029      	b.n	8008682 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800862e:	4a17      	ldr	r2, [pc, #92]	; (800868c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	4013      	ands	r3, r2
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	429a      	cmp	r2, r3
 800863e:	d11d      	bne.n	800867c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008640:	4a13      	ldr	r2, [pc, #76]	; (8008690 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008648:	4812      	ldr	r0, [pc, #72]	; (8008694 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	4613      	mov	r3, r2
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	4413      	add	r3, r2
 8008652:	440b      	add	r3, r1
 8008654:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	490f      	ldr	r1, [pc, #60]	; (8008698 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4610      	mov	r0, r2
 8008666:	4798      	blx	r3
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800866e:	f06f 0304 	mvn.w	r3, #4
 8008672:	617b      	str	r3, [r7, #20]
 8008674:	e005      	b.n	8008682 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	e002      	b.n	8008682 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800867c:	f06f 0301 	mvn.w	r3, #1
 8008680:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008682:	697b      	ldr	r3, [r7, #20]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20001be4 	.word	0x20001be4
 8008690:	20001328 	.word	0x20001328
 8008694:	20001bb4 	.word	0x20001bb4
 8008698:	20001ba8 	.word	0x20001ba8

0800869c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d903      	bls.n	80086b8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80086b0:	f06f 0301 	mvn.w	r3, #1
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	e02a      	b.n	800870e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80086b8:	4a17      	ldr	r2, [pc, #92]	; (8008718 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4013      	ands	r3, r2
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d11e      	bne.n	8008708 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80086ca:	4a14      	ldr	r2, [pc, #80]	; (800871c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80086d2:	4813      	ldr	r0, [pc, #76]	; (8008720 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	4613      	mov	r3, r2
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	4413      	add	r3, r2
 80086dc:	440b      	add	r3, r1
 80086de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	490f      	ldr	r1, [pc, #60]	; (8008724 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80086ec:	ed97 0a01 	vldr	s0, [r7, #4]
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086fa:	f06f 0304 	mvn.w	r3, #4
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	e005      	b.n	800870e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	e002      	b.n	800870e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008708:	f06f 0301 	mvn.w	r3, #1
 800870c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800870e:	697b      	ldr	r3, [r7, #20]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	20001be4 	.word	0x20001be4
 800871c:	20001328 	.word	0x20001328
 8008720:	20001bb4 	.word	0x20001bb4
 8008724:	20001ba8 	.word	0x20001ba8

08008728 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d903      	bls.n	8008742 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800873a:	f06f 0301 	mvn.w	r3, #1
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	e029      	b.n	8008796 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008742:	4a17      	ldr	r2, [pc, #92]	; (80087a0 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4013      	ands	r3, r2
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	429a      	cmp	r2, r3
 8008752:	d11d      	bne.n	8008790 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8008754:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800875c:	4812      	ldr	r0, [pc, #72]	; (80087a8 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4613      	mov	r3, r2
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	4413      	add	r3, r2
 8008766:	440b      	add	r3, r1
 8008768:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	490f      	ldr	r1, [pc, #60]	; (80087ac <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4610      	mov	r0, r2
 800877a:	4798      	blx	r3
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008782:	f06f 0304 	mvn.w	r3, #4
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	e005      	b.n	8008796 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	e002      	b.n	8008796 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008790:	f06f 0301 	mvn.w	r3, #1
 8008794:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008796:	697b      	ldr	r3, [r7, #20]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20001be4 	.word	0x20001be4
 80087a4:	20001328 	.word	0x20001328
 80087a8:	20001bb4 	.word	0x20001bb4
 80087ac:	20001ba8 	.word	0x20001ba8

080087b0 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b092      	sub	sp, #72	; 0x48
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80087b8:	2300      	movs	r3, #0
 80087ba:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80087bc:	2300      	movs	r3, #0
 80087be:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80087c0:	23d7      	movs	r3, #215	; 0xd7
 80087c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80087c6:	4b4a      	ldr	r3, [pc, #296]	; (80088f0 <LSM6DSO_0_Probe+0x140>)
 80087c8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80087ca:	4b4a      	ldr	r3, [pc, #296]	; (80088f4 <LSM6DSO_0_Probe+0x144>)
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80087ce:	4b4a      	ldr	r3, [pc, #296]	; (80088f8 <LSM6DSO_0_Probe+0x148>)
 80087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80087d2:	4b4a      	ldr	r3, [pc, #296]	; (80088fc <LSM6DSO_0_Probe+0x14c>)
 80087d4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 80087d6:	4b4a      	ldr	r3, [pc, #296]	; (8008900 <LSM6DSO_0_Probe+0x150>)
 80087d8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80087da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087de:	4619      	mov	r1, r3
 80087e0:	4848      	ldr	r0, [pc, #288]	; (8008904 <LSM6DSO_0_Probe+0x154>)
 80087e2:	f7fc fcef 	bl	80051c4 <LSM6DSO_RegisterBusIO>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087ec:	f06f 0306 	mvn.w	r3, #6
 80087f0:	647b      	str	r3, [r7, #68]	; 0x44
 80087f2:	e077      	b.n	80088e4 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80087f4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80087f8:	4619      	mov	r1, r3
 80087fa:	4842      	ldr	r0, [pc, #264]	; (8008904 <LSM6DSO_0_Probe+0x154>)
 80087fc:	f7fc fde4 	bl	80053c8 <LSM6DSO_ReadID>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008806:	f06f 0306 	mvn.w	r3, #6
 800880a:	647b      	str	r3, [r7, #68]	; 0x44
 800880c:	e06a      	b.n	80088e4 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 800880e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008812:	2b6c      	cmp	r3, #108	; 0x6c
 8008814:	d003      	beq.n	800881e <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008816:	f06f 0306 	mvn.w	r3, #6
 800881a:	647b      	str	r3, [r7, #68]	; 0x44
 800881c:	e062      	b.n	80088e4 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800881e:	f107 0308 	add.w	r3, r7, #8
 8008822:	4619      	mov	r1, r3
 8008824:	4837      	ldr	r0, [pc, #220]	; (8008904 <LSM6DSO_0_Probe+0x154>)
 8008826:	f7fc fde5 	bl	80053f4 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800882a:	7a7b      	ldrb	r3, [r7, #9]
 800882c:	461a      	mov	r2, r3
 800882e:	7a3b      	ldrb	r3, [r7, #8]
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	431a      	orrs	r2, r3
 8008834:	7abb      	ldrb	r3, [r7, #10]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4313      	orrs	r3, r2
 800883a:	4a33      	ldr	r2, [pc, #204]	; (8008908 <LSM6DSO_0_Probe+0x158>)
 800883c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800883e:	4b33      	ldr	r3, [pc, #204]	; (800890c <LSM6DSO_0_Probe+0x15c>)
 8008840:	4a30      	ldr	r2, [pc, #192]	; (8008904 <LSM6DSO_0_Probe+0x154>)
 8008842:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008844:	4b32      	ldr	r3, [pc, #200]	; (8008910 <LSM6DSO_0_Probe+0x160>)
 8008846:	4a33      	ldr	r2, [pc, #204]	; (8008914 <LSM6DSO_0_Probe+0x164>)
 8008848:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800884a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800884c:	2b00      	cmp	r3, #0
 800884e:	d11d      	bne.n	800888c <LSM6DSO_0_Probe+0xdc>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d018      	beq.n	800888c <LSM6DSO_0_Probe+0xdc>
 800885a:	7a7b      	ldrb	r3, [r7, #9]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d115      	bne.n	800888c <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008860:	4b2d      	ldr	r3, [pc, #180]	; (8008918 <LSM6DSO_0_Probe+0x168>)
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4a2d      	ldr	r2, [pc, #180]	; (800891c <LSM6DSO_0_Probe+0x16c>)
 8008866:	492e      	ldr	r1, [pc, #184]	; (8008920 <LSM6DSO_0_Probe+0x170>)
 8008868:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800886c:	4b28      	ldr	r3, [pc, #160]	; (8008910 <LSM6DSO_0_Probe+0x160>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a26      	ldr	r2, [pc, #152]	; (800890c <LSM6DSO_0_Probe+0x15c>)
 8008874:	6812      	ldr	r2, [r2, #0]
 8008876:	4610      	mov	r0, r2
 8008878:	4798      	blx	r3
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008880:	f06f 0304 	mvn.w	r3, #4
 8008884:	647b      	str	r3, [r7, #68]	; 0x44
 8008886:	e001      	b.n	800888c <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008888:	2300      	movs	r3, #0
 800888a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800888c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888e:	2b00      	cmp	r3, #0
 8008890:	d11d      	bne.n	80088ce <LSM6DSO_0_Probe+0x11e>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d018      	beq.n	80088ce <LSM6DSO_0_Probe+0x11e>
 800889c:	7a3b      	ldrb	r3, [r7, #8]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d115      	bne.n	80088ce <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80088a2:	4b1d      	ldr	r3, [pc, #116]	; (8008918 <LSM6DSO_0_Probe+0x168>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	4a1d      	ldr	r2, [pc, #116]	; (800891c <LSM6DSO_0_Probe+0x16c>)
 80088a8:	491e      	ldr	r1, [pc, #120]	; (8008924 <LSM6DSO_0_Probe+0x174>)
 80088aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80088ae:	4b18      	ldr	r3, [pc, #96]	; (8008910 <LSM6DSO_0_Probe+0x160>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a15      	ldr	r2, [pc, #84]	; (800890c <LSM6DSO_0_Probe+0x15c>)
 80088b6:	6812      	ldr	r2, [r2, #0]
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80088c2:	f06f 0304 	mvn.w	r3, #4
 80088c6:	647b      	str	r3, [r7, #68]	; 0x44
 80088c8:	e001      	b.n	80088ce <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80088ca:	2300      	movs	r3, #0
 80088cc:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80088ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d107      	bne.n	80088e4 <LSM6DSO_0_Probe+0x134>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80088de:	f06f 0304 	mvn.w	r3, #4
 80088e2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80088e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3748      	adds	r7, #72	; 0x48
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	080102a1 	.word	0x080102a1
 80088f4:	0801031d 	.word	0x0801031d
 80088f8:	080103d1 	.word	0x080103d1
 80088fc:	0801036d 	.word	0x0801036d
 8008900:	08010435 	.word	0x08010435
 8008904:	20001bf0 	.word	0x20001bf0
 8008908:	20001be4 	.word	0x20001be4
 800890c:	20001ba8 	.word	0x20001ba8
 8008910:	20001bd8 	.word	0x20001bd8
 8008914:	20001298 	.word	0x20001298
 8008918:	20001328 	.word	0x20001328
 800891c:	20001bb4 	.word	0x20001bb4
 8008920:	200012cc 	.word	0x200012cc
 8008924:	200012a8 	.word	0x200012a8

08008928 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b092      	sub	sp, #72	; 0x48
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008930:	2300      	movs	r3, #0
 8008932:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8008934:	2300      	movs	r3, #0
 8008936:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008938:	2333      	movs	r3, #51	; 0x33
 800893a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 800893e:	4b3f      	ldr	r3, [pc, #252]	; (8008a3c <LIS2DW12_0_Probe+0x114>)
 8008940:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008942:	4b3f      	ldr	r3, [pc, #252]	; (8008a40 <LIS2DW12_0_Probe+0x118>)
 8008944:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008946:	4b3f      	ldr	r3, [pc, #252]	; (8008a44 <LIS2DW12_0_Probe+0x11c>)
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800894a:	4b3f      	ldr	r3, [pc, #252]	; (8008a48 <LIS2DW12_0_Probe+0x120>)
 800894c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 800894e:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <LIS2DW12_0_Probe+0x124>)
 8008950:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8008952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008956:	4619      	mov	r1, r3
 8008958:	483d      	ldr	r0, [pc, #244]	; (8008a50 <LIS2DW12_0_Probe+0x128>)
 800895a:	f7f9 fa8b 	bl	8001e74 <LIS2DW12_RegisterBusIO>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008964:	f06f 0306 	mvn.w	r3, #6
 8008968:	647b      	str	r3, [r7, #68]	; 0x44
 800896a:	e062      	b.n	8008a32 <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800896c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008970:	4619      	mov	r1, r3
 8008972:	4837      	ldr	r0, [pc, #220]	; (8008a50 <LIS2DW12_0_Probe+0x128>)
 8008974:	f7f9 fb68 	bl	8002048 <LIS2DW12_ReadID>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800897e:	f06f 0306 	mvn.w	r3, #6
 8008982:	647b      	str	r3, [r7, #68]	; 0x44
 8008984:	e055      	b.n	8008a32 <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 8008986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800898a:	2b44      	cmp	r3, #68	; 0x44
 800898c:	d003      	beq.n	8008996 <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800898e:	f06f 0306 	mvn.w	r3, #6
 8008992:	647b      	str	r3, [r7, #68]	; 0x44
 8008994:	e04d      	b.n	8008a32 <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8008996:	f107 0308 	add.w	r3, r7, #8
 800899a:	4619      	mov	r1, r3
 800899c:	482c      	ldr	r0, [pc, #176]	; (8008a50 <LIS2DW12_0_Probe+0x128>)
 800899e:	f7f9 fb69 	bl	8002074 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80089a2:	7a7b      	ldrb	r3, [r7, #9]
 80089a4:	461a      	mov	r2, r3
 80089a6:	7a3b      	ldrb	r3, [r7, #8]
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	431a      	orrs	r2, r3
 80089ac:	7abb      	ldrb	r3, [r7, #10]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4313      	orrs	r3, r2
 80089b2:	4a28      	ldr	r2, [pc, #160]	; (8008a54 <LIS2DW12_0_Probe+0x12c>)
 80089b4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80089b6:	4b28      	ldr	r3, [pc, #160]	; (8008a58 <LIS2DW12_0_Probe+0x130>)
 80089b8:	4a25      	ldr	r2, [pc, #148]	; (8008a50 <LIS2DW12_0_Probe+0x128>)
 80089ba:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80089bc:	4b27      	ldr	r3, [pc, #156]	; (8008a5c <LIS2DW12_0_Probe+0x134>)
 80089be:	4a28      	ldr	r2, [pc, #160]	; (8008a60 <LIS2DW12_0_Probe+0x138>)
 80089c0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80089c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d11e      	bne.n	8008a06 <LIS2DW12_0_Probe+0xde>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d019      	beq.n	8008a06 <LIS2DW12_0_Probe+0xde>
 80089d2:	7a3b      	ldrb	r3, [r7, #8]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d116      	bne.n	8008a06 <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80089d8:	4b22      	ldr	r3, [pc, #136]	; (8008a64 <LIS2DW12_0_Probe+0x13c>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	4a22      	ldr	r2, [pc, #136]	; (8008a68 <LIS2DW12_0_Probe+0x140>)
 80089de:	3303      	adds	r3, #3
 80089e0:	4922      	ldr	r1, [pc, #136]	; (8008a6c <LIS2DW12_0_Probe+0x144>)
 80089e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80089e6:	4b1d      	ldr	r3, [pc, #116]	; (8008a5c <LIS2DW12_0_Probe+0x134>)
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a1a      	ldr	r2, [pc, #104]	; (8008a58 <LIS2DW12_0_Probe+0x130>)
 80089ee:	6852      	ldr	r2, [r2, #4]
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80089fa:	f06f 0304 	mvn.w	r3, #4
 80089fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008a00:	e001      	b.n	8008a06 <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a02:	2300      	movs	r3, #0
 8008a04:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d107      	bne.n	8008a1c <LIS2DW12_0_Probe+0xf4>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a16:	f06f 0304 	mvn.w	r3, #4
 8008a1a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d107      	bne.n	8008a32 <LIS2DW12_0_Probe+0x10a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a2c:	f06f 0304 	mvn.w	r3, #4
 8008a30:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3748      	adds	r7, #72	; 0x48
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	080102a1 	.word	0x080102a1
 8008a40:	0801031d 	.word	0x0801031d
 8008a44:	080103d1 	.word	0x080103d1
 8008a48:	0801036d 	.word	0x0801036d
 8008a4c:	08010435 	.word	0x08010435
 8008a50:	20001c20 	.word	0x20001c20
 8008a54:	20001be4 	.word	0x20001be4
 8008a58:	20001ba8 	.word	0x20001ba8
 8008a5c:	20001bd8 	.word	0x20001bd8
 8008a60:	200011f8 	.word	0x200011f8
 8008a64:	20001328 	.word	0x20001328
 8008a68:	20001bb4 	.word	0x20001bb4
 8008a6c:	20001208 	.word	0x20001208

08008a70 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b092      	sub	sp, #72	; 0x48
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008a80:	233d      	movs	r3, #61	; 0x3d
 8008a82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008a86:	4b3f      	ldr	r3, [pc, #252]	; (8008b84 <LIS2MDL_0_Probe+0x114>)
 8008a88:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008a8a:	4b3f      	ldr	r3, [pc, #252]	; (8008b88 <LIS2MDL_0_Probe+0x118>)
 8008a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008a8e:	4b3f      	ldr	r3, [pc, #252]	; (8008b8c <LIS2MDL_0_Probe+0x11c>)
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008a92:	4b3f      	ldr	r3, [pc, #252]	; (8008b90 <LIS2MDL_0_Probe+0x120>)
 8008a94:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008a96:	4b3f      	ldr	r3, [pc, #252]	; (8008b94 <LIS2MDL_0_Probe+0x124>)
 8008a98:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8008a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	483d      	ldr	r0, [pc, #244]	; (8008b98 <LIS2MDL_0_Probe+0x128>)
 8008aa2:	f7fa fd37 	bl	8003514 <LIS2MDL_RegisterBusIO>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008aac:	f06f 0306 	mvn.w	r3, #6
 8008ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ab2:	e062      	b.n	8008b7a <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008ab4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4837      	ldr	r0, [pc, #220]	; (8008b98 <LIS2MDL_0_Probe+0x128>)
 8008abc:	f7fa fe42 	bl	8003744 <LIS2MDL_ReadID>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ac6:	f06f 0306 	mvn.w	r3, #6
 8008aca:	647b      	str	r3, [r7, #68]	; 0x44
 8008acc:	e055      	b.n	8008b7a <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 8008ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ad2:	2b40      	cmp	r3, #64	; 0x40
 8008ad4:	d003      	beq.n	8008ade <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ad6:	f06f 0306 	mvn.w	r3, #6
 8008ada:	647b      	str	r3, [r7, #68]	; 0x44
 8008adc:	e04d      	b.n	8008b7a <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	482c      	ldr	r0, [pc, #176]	; (8008b98 <LIS2MDL_0_Probe+0x128>)
 8008ae6:	f7fa fe53 	bl	8003790 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008aea:	7a7b      	ldrb	r3, [r7, #9]
 8008aec:	461a      	mov	r2, r3
 8008aee:	7a3b      	ldrb	r3, [r7, #8]
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	431a      	orrs	r2, r3
 8008af4:	7abb      	ldrb	r3, [r7, #10]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4313      	orrs	r3, r2
 8008afa:	4a28      	ldr	r2, [pc, #160]	; (8008b9c <LIS2MDL_0_Probe+0x12c>)
 8008afc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8008afe:	4b28      	ldr	r3, [pc, #160]	; (8008ba0 <LIS2MDL_0_Probe+0x130>)
 8008b00:	4a25      	ldr	r2, [pc, #148]	; (8008b98 <LIS2MDL_0_Probe+0x128>)
 8008b02:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8008b04:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <LIS2MDL_0_Probe+0x134>)
 8008b06:	4a28      	ldr	r2, [pc, #160]	; (8008ba8 <LIS2MDL_0_Probe+0x138>)
 8008b08:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8008b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11e      	bne.n	8008b4e <LIS2MDL_0_Probe+0xde>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d019      	beq.n	8008b4e <LIS2MDL_0_Probe+0xde>
 8008b1a:	7abb      	ldrb	r3, [r7, #10]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d116      	bne.n	8008b4e <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008b20:	4b22      	ldr	r3, [pc, #136]	; (8008bac <LIS2MDL_0_Probe+0x13c>)
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	4a22      	ldr	r2, [pc, #136]	; (8008bb0 <LIS2MDL_0_Probe+0x140>)
 8008b26:	3306      	adds	r3, #6
 8008b28:	4922      	ldr	r1, [pc, #136]	; (8008bb4 <LIS2MDL_0_Probe+0x144>)
 8008b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8008b2e:	4b1d      	ldr	r3, [pc, #116]	; (8008ba4 <LIS2MDL_0_Probe+0x134>)
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1a      	ldr	r2, [pc, #104]	; (8008ba0 <LIS2MDL_0_Probe+0x130>)
 8008b36:	6892      	ldr	r2, [r2, #8]
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b42:	f06f 0304 	mvn.w	r3, #4
 8008b46:	647b      	str	r3, [r7, #68]	; 0x44
 8008b48:	e001      	b.n	8008b4e <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d107      	bne.n	8008b64 <LIS2MDL_0_Probe+0xf4>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b5e:	f06f 0304 	mvn.w	r3, #4
 8008b62:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d107      	bne.n	8008b7a <LIS2MDL_0_Probe+0x10a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b74:	f06f 0304 	mvn.w	r3, #4
 8008b78:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3748      	adds	r7, #72	; 0x48
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	080102a1 	.word	0x080102a1
 8008b88:	0801031d 	.word	0x0801031d
 8008b8c:	080103d1 	.word	0x080103d1
 8008b90:	0801036d 	.word	0x0801036d
 8008b94:	08010435 	.word	0x08010435
 8008b98:	20001c54 	.word	0x20001c54
 8008b9c:	20001be4 	.word	0x20001be4
 8008ba0:	20001ba8 	.word	0x20001ba8
 8008ba4:	20001bd8 	.word	0x20001bd8
 8008ba8:	2000122c 	.word	0x2000122c
 8008bac:	20001328 	.word	0x20001328
 8008bb0:	20001bb4 	.word	0x20001bb4
 8008bb4:	2000123c 	.word	0x2000123c

08008bb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	; (8008bf4 <HAL_Init+0x3c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a0b      	ldr	r2, [pc, #44]	; (8008bf4 <HAL_Init+0x3c>)
 8008bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008bce:	2003      	movs	r0, #3
 8008bd0:	f000 f962 	bl	8008e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	f000 f80f 	bl	8008bf8 <HAL_InitTick>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	71fb      	strb	r3, [r7, #7]
 8008be4:	e001      	b.n	8008bea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008be6:	f007 f91f 	bl	800fe28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008bea:	79fb      	ldrb	r3, [r7, #7]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	40022000 	.word	0x40022000

08008bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008c04:	4b17      	ldr	r3, [pc, #92]	; (8008c64 <HAL_InitTick+0x6c>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d023      	beq.n	8008c54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008c0c:	4b16      	ldr	r3, [pc, #88]	; (8008c68 <HAL_InitTick+0x70>)
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4b14      	ldr	r3, [pc, #80]	; (8008c64 <HAL_InitTick+0x6c>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	4619      	mov	r1, r3
 8008c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f96d 	bl	8008f02 <HAL_SYSTICK_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10f      	bne.n	8008c4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b0f      	cmp	r3, #15
 8008c32:	d809      	bhi.n	8008c48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c34:	2200      	movs	r2, #0
 8008c36:	6879      	ldr	r1, [r7, #4]
 8008c38:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3c:	f000 f937 	bl	8008eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008c40:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <HAL_InitTick+0x74>)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	e007      	b.n	8008c58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	73fb      	strb	r3, [r7, #15]
 8008c4c:	e004      	b.n	8008c58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	73fb      	strb	r3, [r7, #15]
 8008c52:	e001      	b.n	8008c58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20001340 	.word	0x20001340
 8008c68:	2000135c 	.word	0x2000135c
 8008c6c:	2000133c 	.word	0x2000133c

08008c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008c74:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <HAL_IncTick+0x20>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <HAL_IncTick+0x24>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4413      	add	r3, r2
 8008c80:	4a04      	ldr	r2, [pc, #16]	; (8008c94 <HAL_IncTick+0x24>)
 8008c82:	6013      	str	r3, [r2, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	20001340 	.word	0x20001340
 8008c94:	20001c80 	.word	0x20001c80

08008c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8008c9c:	4b03      	ldr	r3, [pc, #12]	; (8008cac <HAL_GetTick+0x14>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20001c80 	.word	0x20001c80

08008cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008cb8:	f7ff ffee 	bl	8008c98 <HAL_GetTick>
 8008cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d005      	beq.n	8008cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008cca:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <HAL_Delay+0x44>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008cd6:	bf00      	nop
 8008cd8:	f7ff ffde 	bl	8008c98 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d8f7      	bhi.n	8008cd8 <HAL_Delay+0x28>
  {
  }
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20001340 	.word	0x20001340

08008cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f003 0307 	and.w	r3, r3, #7
 8008d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d08:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <__NVIC_SetPriorityGrouping+0x44>)
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008d14:	4013      	ands	r3, r2
 8008d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d2a:	4a04      	ldr	r2, [pc, #16]	; (8008d3c <__NVIC_SetPriorityGrouping+0x44>)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	60d3      	str	r3, [r2, #12]
}
 8008d30:	bf00      	nop
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	e000ed00 	.word	0xe000ed00

08008d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008d40:	b480      	push	{r7}
 8008d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d44:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <__NVIC_GetPriorityGrouping+0x18>)
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	0a1b      	lsrs	r3, r3, #8
 8008d4a:	f003 0307 	and.w	r3, r3, #7
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	e000ed00 	.word	0xe000ed00

08008d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	db0b      	blt.n	8008d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	f003 021f 	and.w	r2, r3, #31
 8008d74:	4907      	ldr	r1, [pc, #28]	; (8008d94 <__NVIC_EnableIRQ+0x38>)
 8008d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7a:	095b      	lsrs	r3, r3, #5
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8008d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	e000e100 	.word	0xe000e100

08008d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	6039      	str	r1, [r7, #0]
 8008da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	db0a      	blt.n	8008dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	490c      	ldr	r1, [pc, #48]	; (8008de4 <__NVIC_SetPriority+0x4c>)
 8008db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008db6:	0112      	lsls	r2, r2, #4
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	440b      	add	r3, r1
 8008dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008dc0:	e00a      	b.n	8008dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	4908      	ldr	r1, [pc, #32]	; (8008de8 <__NVIC_SetPriority+0x50>)
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	f003 030f 	and.w	r3, r3, #15
 8008dce:	3b04      	subs	r3, #4
 8008dd0:	0112      	lsls	r2, r2, #4
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	440b      	add	r3, r1
 8008dd6:	761a      	strb	r2, [r3, #24]
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	e000e100 	.word	0xe000e100
 8008de8:	e000ed00 	.word	0xe000ed00

08008dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b089      	sub	sp, #36	; 0x24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f1c3 0307 	rsb	r3, r3, #7
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	bf28      	it	cs
 8008e0a:	2304      	movcs	r3, #4
 8008e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	3304      	adds	r3, #4
 8008e12:	2b06      	cmp	r3, #6
 8008e14:	d902      	bls.n	8008e1c <NVIC_EncodePriority+0x30>
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	3b03      	subs	r3, #3
 8008e1a:	e000      	b.n	8008e1e <NVIC_EncodePriority+0x32>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	43da      	mvns	r2, r3
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	401a      	ands	r2, r3
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e34:	f04f 31ff 	mov.w	r1, #4294967295
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3e:	43d9      	mvns	r1, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e44:	4313      	orrs	r3, r2
         );
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3724      	adds	r7, #36	; 0x24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
	...

08008e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e64:	d301      	bcc.n	8008e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e66:	2301      	movs	r3, #1
 8008e68:	e00f      	b.n	8008e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e6a:	4a0a      	ldr	r2, [pc, #40]	; (8008e94 <SysTick_Config+0x40>)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e72:	210f      	movs	r1, #15
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	f7ff ff8e 	bl	8008d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e7c:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <SysTick_Config+0x40>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e82:	4b04      	ldr	r3, [pc, #16]	; (8008e94 <SysTick_Config+0x40>)
 8008e84:	2207      	movs	r2, #7
 8008e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	e000e010 	.word	0xe000e010

08008e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff ff29 	bl	8008cf8 <__NVIC_SetPriorityGrouping>
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	607a      	str	r2, [r7, #4]
 8008eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008ec0:	f7ff ff3e 	bl	8008d40 <__NVIC_GetPriorityGrouping>
 8008ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	6978      	ldr	r0, [r7, #20]
 8008ecc:	f7ff ff8e 	bl	8008dec <NVIC_EncodePriority>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff ff5d 	bl	8008d98 <__NVIC_SetPriority>
}
 8008ede:	bf00      	nop
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	4603      	mov	r3, r0
 8008eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff ff31 	bl	8008d5c <__NVIC_EnableIRQ>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff ffa2 	bl	8008e54 <SysTick_Config>
 8008f10:	4603      	mov	r3, r0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e054      	b.n	8008fd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	7f5b      	ldrb	r3, [r3, #29]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f006 ff96 	bl	800fe70 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	791b      	ldrb	r3, [r3, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10c      	bne.n	8008f6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a22      	ldr	r2, [pc, #136]	; (8008fe0 <HAL_CRC_Init+0xc4>)
 8008f58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0218 	bic.w	r2, r2, #24
 8008f68:	609a      	str	r2, [r3, #8]
 8008f6a:	e00c      	b.n	8008f86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6899      	ldr	r1, [r3, #8]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	461a      	mov	r2, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f834 	bl	8008fe4 <HAL_CRCEx_Polynomial_Set>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e028      	b.n	8008fd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	795b      	ldrb	r3, [r3, #5]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d105      	bne.n	8008f9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f04f 32ff 	mov.w	r2, #4294967295
 8008f96:	611a      	str	r2, [r3, #16]
 8008f98:	e004      	b.n	8008fa4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	6912      	ldr	r2, [r2, #16]
 8008fa2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	695a      	ldr	r2, [r3, #20]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699a      	ldr	r2, [r3, #24]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	04c11db7 	.word	0x04c11db7

08008fe4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008ff4:	231f      	movs	r3, #31
 8008ff6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008ff8:	bf00      	nop
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	1e5a      	subs	r2, r3, #1
 8008ffe:	613a      	str	r2, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d009      	beq.n	8009018 <HAL_CRCEx_Polynomial_Set+0x34>
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f003 031f 	and.w	r3, r3, #31
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	fa22 f303 	lsr.w	r3, r2, r3
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0f0      	beq.n	8008ffa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b18      	cmp	r3, #24
 800901c:	d846      	bhi.n	80090ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <HAL_CRCEx_Polynomial_Set+0x40>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	080090b3 	.word	0x080090b3
 8009028:	080090ad 	.word	0x080090ad
 800902c:	080090ad 	.word	0x080090ad
 8009030:	080090ad 	.word	0x080090ad
 8009034:	080090ad 	.word	0x080090ad
 8009038:	080090ad 	.word	0x080090ad
 800903c:	080090ad 	.word	0x080090ad
 8009040:	080090ad 	.word	0x080090ad
 8009044:	080090a1 	.word	0x080090a1
 8009048:	080090ad 	.word	0x080090ad
 800904c:	080090ad 	.word	0x080090ad
 8009050:	080090ad 	.word	0x080090ad
 8009054:	080090ad 	.word	0x080090ad
 8009058:	080090ad 	.word	0x080090ad
 800905c:	080090ad 	.word	0x080090ad
 8009060:	080090ad 	.word	0x080090ad
 8009064:	08009095 	.word	0x08009095
 8009068:	080090ad 	.word	0x080090ad
 800906c:	080090ad 	.word	0x080090ad
 8009070:	080090ad 	.word	0x080090ad
 8009074:	080090ad 	.word	0x080090ad
 8009078:	080090ad 	.word	0x080090ad
 800907c:	080090ad 	.word	0x080090ad
 8009080:	080090ad 	.word	0x080090ad
 8009084:	08009089 	.word	0x08009089
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2b06      	cmp	r3, #6
 800908c:	d913      	bls.n	80090b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009092:	e010      	b.n	80090b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b07      	cmp	r3, #7
 8009098:	d90f      	bls.n	80090ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800909e:	e00c      	b.n	80090ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	2b0f      	cmp	r3, #15
 80090a4:	d90b      	bls.n	80090be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80090aa:	e008      	b.n	80090be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	75fb      	strb	r3, [r7, #23]
      break;
 80090b0:	e006      	b.n	80090c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80090b2:	bf00      	nop
 80090b4:	e004      	b.n	80090c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80090b6:	bf00      	nop
 80090b8:	e002      	b.n	80090c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80090ba:	bf00      	nop
 80090bc:	e000      	b.n	80090c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80090be:	bf00      	nop
  }
  if (status == HAL_OK)
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10d      	bne.n	80090e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f023 0118 	bic.w	r1, r3, #24
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	430a      	orrs	r2, r1
 80090e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e098      	b.n	8009234 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	4b4d      	ldr	r3, [pc, #308]	; (8009240 <HAL_DMA_Init+0x150>)
 800910a:	429a      	cmp	r2, r3
 800910c:	d80f      	bhi.n	800912e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	4b4b      	ldr	r3, [pc, #300]	; (8009244 <HAL_DMA_Init+0x154>)
 8009116:	4413      	add	r3, r2
 8009118:	4a4b      	ldr	r2, [pc, #300]	; (8009248 <HAL_DMA_Init+0x158>)
 800911a:	fba2 2303 	umull	r2, r3, r2, r3
 800911e:	091b      	lsrs	r3, r3, #4
 8009120:	009a      	lsls	r2, r3, #2
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a48      	ldr	r2, [pc, #288]	; (800924c <HAL_DMA_Init+0x15c>)
 800912a:	641a      	str	r2, [r3, #64]	; 0x40
 800912c:	e00e      	b.n	800914c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	4b46      	ldr	r3, [pc, #280]	; (8009250 <HAL_DMA_Init+0x160>)
 8009136:	4413      	add	r3, r2
 8009138:	4a43      	ldr	r2, [pc, #268]	; (8009248 <HAL_DMA_Init+0x158>)
 800913a:	fba2 2303 	umull	r2, r3, r2, r3
 800913e:	091b      	lsrs	r3, r3, #4
 8009140:	009a      	lsls	r2, r3, #2
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a42      	ldr	r2, [pc, #264]	; (8009254 <HAL_DMA_Init+0x164>)
 800914a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2202      	movs	r2, #2
 8009150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009166:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800917c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091a6:	d039      	beq.n	800921c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ac:	4a27      	ldr	r2, [pc, #156]	; (800924c <HAL_DMA_Init+0x15c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d11a      	bne.n	80091e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80091b2:	4b29      	ldr	r3, [pc, #164]	; (8009258 <HAL_DMA_Init+0x168>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ba:	f003 031c 	and.w	r3, r3, #28
 80091be:	210f      	movs	r1, #15
 80091c0:	fa01 f303 	lsl.w	r3, r1, r3
 80091c4:	43db      	mvns	r3, r3
 80091c6:	4924      	ldr	r1, [pc, #144]	; (8009258 <HAL_DMA_Init+0x168>)
 80091c8:	4013      	ands	r3, r2
 80091ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80091cc:	4b22      	ldr	r3, [pc, #136]	; (8009258 <HAL_DMA_Init+0x168>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6859      	ldr	r1, [r3, #4]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d8:	f003 031c 	and.w	r3, r3, #28
 80091dc:	fa01 f303 	lsl.w	r3, r1, r3
 80091e0:	491d      	ldr	r1, [pc, #116]	; (8009258 <HAL_DMA_Init+0x168>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	600b      	str	r3, [r1, #0]
 80091e6:	e019      	b.n	800921c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80091e8:	4b1c      	ldr	r3, [pc, #112]	; (800925c <HAL_DMA_Init+0x16c>)
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f0:	f003 031c 	and.w	r3, r3, #28
 80091f4:	210f      	movs	r1, #15
 80091f6:	fa01 f303 	lsl.w	r3, r1, r3
 80091fa:	43db      	mvns	r3, r3
 80091fc:	4917      	ldr	r1, [pc, #92]	; (800925c <HAL_DMA_Init+0x16c>)
 80091fe:	4013      	ands	r3, r2
 8009200:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009202:	4b16      	ldr	r3, [pc, #88]	; (800925c <HAL_DMA_Init+0x16c>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6859      	ldr	r1, [r3, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920e:	f003 031c 	and.w	r3, r3, #28
 8009212:	fa01 f303 	lsl.w	r3, r1, r3
 8009216:	4911      	ldr	r1, [pc, #68]	; (800925c <HAL_DMA_Init+0x16c>)
 8009218:	4313      	orrs	r3, r2
 800921a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	40020407 	.word	0x40020407
 8009244:	bffdfff8 	.word	0xbffdfff8
 8009248:	cccccccd 	.word	0xcccccccd
 800924c:	40020000 	.word	0x40020000
 8009250:	bffdfbf8 	.word	0xbffdfbf8
 8009254:	40020400 	.word	0x40020400
 8009258:	400200a8 	.word	0x400200a8
 800925c:	400204a8 	.word	0x400204a8

08009260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_DMA_Start_IT+0x20>
 800927c:	2302      	movs	r3, #2
 800927e:	e04b      	b.n	8009318 <HAL_DMA_Start_IT+0xb8>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b01      	cmp	r3, #1
 8009292:	d13a      	bne.n	800930a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 0201 	bic.w	r2, r2, #1
 80092b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f8e0 	bl	800947e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d008      	beq.n	80092d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 020e 	orr.w	r2, r2, #14
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	e00f      	b.n	80092f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0204 	bic.w	r2, r2, #4
 80092e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 020a 	orr.w	r2, r2, #10
 80092f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f042 0201 	orr.w	r2, r2, #1
 8009306:	601a      	str	r2, [r3, #0]
 8009308:	e005      	b.n	8009316 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009312:	2302      	movs	r3, #2
 8009314:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009316:	7dfb      	ldrb	r3, [r7, #23]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933c:	f003 031c 	and.w	r3, r3, #28
 8009340:	2204      	movs	r2, #4
 8009342:	409a      	lsls	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	4013      	ands	r3, r2
 8009348:	2b00      	cmp	r3, #0
 800934a:	d026      	beq.n	800939a <HAL_DMA_IRQHandler+0x7a>
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	d021      	beq.n	800939a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b00      	cmp	r3, #0
 8009362:	d107      	bne.n	8009374 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0204 	bic.w	r2, r2, #4
 8009372:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009378:	f003 021c 	and.w	r2, r3, #28
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009380:	2104      	movs	r1, #4
 8009382:	fa01 f202 	lsl.w	r2, r1, r2
 8009386:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938c:	2b00      	cmp	r3, #0
 800938e:	d071      	beq.n	8009474 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009398:	e06c      	b.n	8009474 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939e:	f003 031c 	and.w	r3, r3, #28
 80093a2:	2202      	movs	r2, #2
 80093a4:	409a      	lsls	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	4013      	ands	r3, r2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d02e      	beq.n	800940c <HAL_DMA_IRQHandler+0xec>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d029      	beq.n	800940c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10b      	bne.n	80093de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 020a 	bic.w	r2, r2, #10
 80093d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e2:	f003 021c 	and.w	r2, r3, #28
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	2102      	movs	r1, #2
 80093ec:	fa01 f202 	lsl.w	r2, r1, r2
 80093f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d038      	beq.n	8009474 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800940a:	e033      	b.n	8009474 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009410:	f003 031c 	and.w	r3, r3, #28
 8009414:	2208      	movs	r2, #8
 8009416:	409a      	lsls	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4013      	ands	r3, r2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d02a      	beq.n	8009476 <HAL_DMA_IRQHandler+0x156>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f003 0308 	and.w	r3, r3, #8
 8009426:	2b00      	cmp	r3, #0
 8009428:	d025      	beq.n	8009476 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 020e 	bic.w	r2, r2, #14
 8009438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943e:	f003 021c 	and.w	r2, r3, #28
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009446:	2101      	movs	r1, #1
 8009448:	fa01 f202 	lsl.w	r2, r1, r2
 800944c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009474:	bf00      	nop
 8009476:	bf00      	nop
}
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800947e:	b480      	push	{r7}
 8009480:	b085      	sub	sp, #20
 8009482:	af00      	add	r7, sp, #0
 8009484:	60f8      	str	r0, [r7, #12]
 8009486:	60b9      	str	r1, [r7, #8]
 8009488:	607a      	str	r2, [r7, #4]
 800948a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009490:	f003 021c 	and.w	r2, r3, #28
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009498:	2101      	movs	r1, #1
 800949a:	fa01 f202 	lsl.w	r2, r1, r2
 800949e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b10      	cmp	r3, #16
 80094ae:	d108      	bne.n	80094c2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80094c0:	e007      	b.n	80094d2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	60da      	str	r2, [r3, #12]
}
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
	...

080094e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80094ea:	2300      	movs	r3, #0
 80094ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80094ee:	e17f      	b.n	80097f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	2101      	movs	r1, #1
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	fa01 f303 	lsl.w	r3, r1, r3
 80094fc:	4013      	ands	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 8171 	beq.w	80097ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	2b01      	cmp	r3, #1
 8009512:	d005      	beq.n	8009520 <HAL_GPIO_Init+0x40>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f003 0303 	and.w	r3, r3, #3
 800951c:	2b02      	cmp	r3, #2
 800951e:	d130      	bne.n	8009582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	2203      	movs	r2, #3
 800952c:	fa02 f303 	lsl.w	r3, r2, r3
 8009530:	43db      	mvns	r3, r3
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	4013      	ands	r3, r2
 8009536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	4313      	orrs	r3, r2
 8009548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009556:	2201      	movs	r2, #1
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	fa02 f303 	lsl.w	r3, r2, r3
 800955e:	43db      	mvns	r3, r3
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4013      	ands	r3, r2
 8009564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	091b      	lsrs	r3, r3, #4
 800956c:	f003 0201 	and.w	r2, r3, #1
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	fa02 f303 	lsl.w	r3, r2, r3
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	4313      	orrs	r3, r2
 800957a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	2b03      	cmp	r3, #3
 800958c:	d118      	bne.n	80095c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8009594:	2201      	movs	r2, #1
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	43db      	mvns	r3, r3
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	4013      	ands	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	08db      	lsrs	r3, r3, #3
 80095aa:	f003 0201 	and.w	r2, r3, #1
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	fa02 f303 	lsl.w	r3, r2, r3
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f003 0303 	and.w	r3, r3, #3
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d017      	beq.n	80095fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	2203      	movs	r2, #3
 80095d8:	fa02 f303 	lsl.w	r3, r2, r3
 80095dc:	43db      	mvns	r3, r3
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	4013      	ands	r3, r2
 80095e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	689a      	ldr	r2, [r3, #8]
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	fa02 f303 	lsl.w	r3, r2, r3
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	2b02      	cmp	r3, #2
 8009606:	d123      	bne.n	8009650 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	08da      	lsrs	r2, r3, #3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3208      	adds	r2, #8
 8009610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009614:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	220f      	movs	r2, #15
 8009620:	fa02 f303 	lsl.w	r3, r2, r3
 8009624:	43db      	mvns	r3, r3
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	4013      	ands	r3, r2
 800962a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	691a      	ldr	r2, [r3, #16]
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f003 0307 	and.w	r3, r3, #7
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	fa02 f303 	lsl.w	r3, r2, r3
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	4313      	orrs	r3, r2
 8009640:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	08da      	lsrs	r2, r3, #3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3208      	adds	r2, #8
 800964a:	6939      	ldr	r1, [r7, #16]
 800964c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	2203      	movs	r2, #3
 800965c:	fa02 f303 	lsl.w	r3, r2, r3
 8009660:	43db      	mvns	r3, r3
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4013      	ands	r3, r2
 8009666:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f003 0203 	and.w	r2, r3, #3
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	005b      	lsls	r3, r3, #1
 8009674:	fa02 f303 	lsl.w	r3, r2, r3
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	4313      	orrs	r3, r2
 800967c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 80ac 	beq.w	80097ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009692:	4b5f      	ldr	r3, [pc, #380]	; (8009810 <HAL_GPIO_Init+0x330>)
 8009694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009696:	4a5e      	ldr	r2, [pc, #376]	; (8009810 <HAL_GPIO_Init+0x330>)
 8009698:	f043 0301 	orr.w	r3, r3, #1
 800969c:	6613      	str	r3, [r2, #96]	; 0x60
 800969e:	4b5c      	ldr	r3, [pc, #368]	; (8009810 <HAL_GPIO_Init+0x330>)
 80096a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	60bb      	str	r3, [r7, #8]
 80096a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80096aa:	4a5a      	ldr	r2, [pc, #360]	; (8009814 <HAL_GPIO_Init+0x334>)
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	089b      	lsrs	r3, r3, #2
 80096b0:	3302      	adds	r3, #2
 80096b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f003 0303 	and.w	r3, r3, #3
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	220f      	movs	r2, #15
 80096c2:	fa02 f303 	lsl.w	r3, r2, r3
 80096c6:	43db      	mvns	r3, r3
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	4013      	ands	r3, r2
 80096cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80096d4:	d025      	beq.n	8009722 <HAL_GPIO_Init+0x242>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a4f      	ldr	r2, [pc, #316]	; (8009818 <HAL_GPIO_Init+0x338>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d01f      	beq.n	800971e <HAL_GPIO_Init+0x23e>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a4e      	ldr	r2, [pc, #312]	; (800981c <HAL_GPIO_Init+0x33c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d019      	beq.n	800971a <HAL_GPIO_Init+0x23a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a4d      	ldr	r2, [pc, #308]	; (8009820 <HAL_GPIO_Init+0x340>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d013      	beq.n	8009716 <HAL_GPIO_Init+0x236>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a4c      	ldr	r2, [pc, #304]	; (8009824 <HAL_GPIO_Init+0x344>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00d      	beq.n	8009712 <HAL_GPIO_Init+0x232>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a4b      	ldr	r2, [pc, #300]	; (8009828 <HAL_GPIO_Init+0x348>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d007      	beq.n	800970e <HAL_GPIO_Init+0x22e>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a4a      	ldr	r2, [pc, #296]	; (800982c <HAL_GPIO_Init+0x34c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d101      	bne.n	800970a <HAL_GPIO_Init+0x22a>
 8009706:	2306      	movs	r3, #6
 8009708:	e00c      	b.n	8009724 <HAL_GPIO_Init+0x244>
 800970a:	2307      	movs	r3, #7
 800970c:	e00a      	b.n	8009724 <HAL_GPIO_Init+0x244>
 800970e:	2305      	movs	r3, #5
 8009710:	e008      	b.n	8009724 <HAL_GPIO_Init+0x244>
 8009712:	2304      	movs	r3, #4
 8009714:	e006      	b.n	8009724 <HAL_GPIO_Init+0x244>
 8009716:	2303      	movs	r3, #3
 8009718:	e004      	b.n	8009724 <HAL_GPIO_Init+0x244>
 800971a:	2302      	movs	r3, #2
 800971c:	e002      	b.n	8009724 <HAL_GPIO_Init+0x244>
 800971e:	2301      	movs	r3, #1
 8009720:	e000      	b.n	8009724 <HAL_GPIO_Init+0x244>
 8009722:	2300      	movs	r3, #0
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	f002 0203 	and.w	r2, r2, #3
 800972a:	0092      	lsls	r2, r2, #2
 800972c:	4093      	lsls	r3, r2
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	4313      	orrs	r3, r2
 8009732:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009734:	4937      	ldr	r1, [pc, #220]	; (8009814 <HAL_GPIO_Init+0x334>)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	089b      	lsrs	r3, r3, #2
 800973a:	3302      	adds	r3, #2
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009742:	4b3b      	ldr	r3, [pc, #236]	; (8009830 <HAL_GPIO_Init+0x350>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	43db      	mvns	r3, r3
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4013      	ands	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009766:	4a32      	ldr	r2, [pc, #200]	; (8009830 <HAL_GPIO_Init+0x350>)
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800976c:	4b30      	ldr	r3, [pc, #192]	; (8009830 <HAL_GPIO_Init+0x350>)
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	43db      	mvns	r3, r3
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4013      	ands	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009790:	4a27      	ldr	r2, [pc, #156]	; (8009830 <HAL_GPIO_Init+0x350>)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009796:	4b26      	ldr	r3, [pc, #152]	; (8009830 <HAL_GPIO_Init+0x350>)
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	43db      	mvns	r3, r3
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	4013      	ands	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80097ba:	4a1d      	ldr	r2, [pc, #116]	; (8009830 <HAL_GPIO_Init+0x350>)
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80097c0:	4b1b      	ldr	r3, [pc, #108]	; (8009830 <HAL_GPIO_Init+0x350>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	43db      	mvns	r3, r3
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	4013      	ands	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80097e4:	4a12      	ldr	r2, [pc, #72]	; (8009830 <HAL_GPIO_Init+0x350>)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	3301      	adds	r3, #1
 80097ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	fa22 f303 	lsr.w	r3, r2, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f47f ae78 	bne.w	80094f0 <HAL_GPIO_Init+0x10>
  }
}
 8009800:	bf00      	nop
 8009802:	bf00      	nop
 8009804:	371c      	adds	r7, #28
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	40021000 	.word	0x40021000
 8009814:	40010000 	.word	0x40010000
 8009818:	48000400 	.word	0x48000400
 800981c:	48000800 	.word	0x48000800
 8009820:	48000c00 	.word	0x48000c00
 8009824:	48001000 	.word	0x48001000
 8009828:	48001400 	.word	0x48001400
 800982c:	48001800 	.word	0x48001800
 8009830:	40010400 	.word	0x40010400

08009834 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800983e:	2300      	movs	r3, #0
 8009840:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009842:	e0cd      	b.n	80099e0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009844:	2201      	movs	r2, #1
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	fa02 f303 	lsl.w	r3, r2, r3
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	4013      	ands	r3, r2
 8009850:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 80c0 	beq.w	80099da <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800985a:	4a68      	ldr	r2, [pc, #416]	; (80099fc <HAL_GPIO_DeInit+0x1c8>)
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	089b      	lsrs	r3, r3, #2
 8009860:	3302      	adds	r3, #2
 8009862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009866:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	220f      	movs	r2, #15
 8009872:	fa02 f303 	lsl.w	r3, r2, r3
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4013      	ands	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009882:	d025      	beq.n	80098d0 <HAL_GPIO_DeInit+0x9c>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a5e      	ldr	r2, [pc, #376]	; (8009a00 <HAL_GPIO_DeInit+0x1cc>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d01f      	beq.n	80098cc <HAL_GPIO_DeInit+0x98>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a5d      	ldr	r2, [pc, #372]	; (8009a04 <HAL_GPIO_DeInit+0x1d0>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d019      	beq.n	80098c8 <HAL_GPIO_DeInit+0x94>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a5c      	ldr	r2, [pc, #368]	; (8009a08 <HAL_GPIO_DeInit+0x1d4>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d013      	beq.n	80098c4 <HAL_GPIO_DeInit+0x90>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a5b      	ldr	r2, [pc, #364]	; (8009a0c <HAL_GPIO_DeInit+0x1d8>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00d      	beq.n	80098c0 <HAL_GPIO_DeInit+0x8c>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a5a      	ldr	r2, [pc, #360]	; (8009a10 <HAL_GPIO_DeInit+0x1dc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d007      	beq.n	80098bc <HAL_GPIO_DeInit+0x88>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a59      	ldr	r2, [pc, #356]	; (8009a14 <HAL_GPIO_DeInit+0x1e0>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d101      	bne.n	80098b8 <HAL_GPIO_DeInit+0x84>
 80098b4:	2306      	movs	r3, #6
 80098b6:	e00c      	b.n	80098d2 <HAL_GPIO_DeInit+0x9e>
 80098b8:	2307      	movs	r3, #7
 80098ba:	e00a      	b.n	80098d2 <HAL_GPIO_DeInit+0x9e>
 80098bc:	2305      	movs	r3, #5
 80098be:	e008      	b.n	80098d2 <HAL_GPIO_DeInit+0x9e>
 80098c0:	2304      	movs	r3, #4
 80098c2:	e006      	b.n	80098d2 <HAL_GPIO_DeInit+0x9e>
 80098c4:	2303      	movs	r3, #3
 80098c6:	e004      	b.n	80098d2 <HAL_GPIO_DeInit+0x9e>
 80098c8:	2302      	movs	r3, #2
 80098ca:	e002      	b.n	80098d2 <HAL_GPIO_DeInit+0x9e>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <HAL_GPIO_DeInit+0x9e>
 80098d0:	2300      	movs	r3, #0
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	f002 0203 	and.w	r2, r2, #3
 80098d8:	0092      	lsls	r2, r2, #2
 80098da:	4093      	lsls	r3, r2
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d132      	bne.n	8009948 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80098e2:	4b4d      	ldr	r3, [pc, #308]	; (8009a18 <HAL_GPIO_DeInit+0x1e4>)
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	43db      	mvns	r3, r3
 80098ea:	494b      	ldr	r1, [pc, #300]	; (8009a18 <HAL_GPIO_DeInit+0x1e4>)
 80098ec:	4013      	ands	r3, r2
 80098ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80098f0:	4b49      	ldr	r3, [pc, #292]	; (8009a18 <HAL_GPIO_DeInit+0x1e4>)
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	43db      	mvns	r3, r3
 80098f8:	4947      	ldr	r1, [pc, #284]	; (8009a18 <HAL_GPIO_DeInit+0x1e4>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80098fe:	4b46      	ldr	r3, [pc, #280]	; (8009a18 <HAL_GPIO_DeInit+0x1e4>)
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	43db      	mvns	r3, r3
 8009906:	4944      	ldr	r1, [pc, #272]	; (8009a18 <HAL_GPIO_DeInit+0x1e4>)
 8009908:	4013      	ands	r3, r2
 800990a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800990c:	4b42      	ldr	r3, [pc, #264]	; (8009a18 <HAL_GPIO_DeInit+0x1e4>)
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	43db      	mvns	r3, r3
 8009914:	4940      	ldr	r1, [pc, #256]	; (8009a18 <HAL_GPIO_DeInit+0x1e4>)
 8009916:	4013      	ands	r3, r2
 8009918:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f003 0303 	and.w	r3, r3, #3
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	220f      	movs	r2, #15
 8009924:	fa02 f303 	lsl.w	r3, r2, r3
 8009928:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800992a:	4a34      	ldr	r2, [pc, #208]	; (80099fc <HAL_GPIO_DeInit+0x1c8>)
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	089b      	lsrs	r3, r3, #2
 8009930:	3302      	adds	r3, #2
 8009932:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	43da      	mvns	r2, r3
 800993a:	4830      	ldr	r0, [pc, #192]	; (80099fc <HAL_GPIO_DeInit+0x1c8>)
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	089b      	lsrs	r3, r3, #2
 8009940:	400a      	ands	r2, r1
 8009942:	3302      	adds	r3, #2
 8009944:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	2103      	movs	r1, #3
 8009952:	fa01 f303 	lsl.w	r3, r1, r3
 8009956:	431a      	orrs	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	08da      	lsrs	r2, r3, #3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3208      	adds	r2, #8
 8009964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	220f      	movs	r2, #15
 8009972:	fa02 f303 	lsl.w	r3, r2, r3
 8009976:	43db      	mvns	r3, r3
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	08d2      	lsrs	r2, r2, #3
 800997c:	4019      	ands	r1, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3208      	adds	r2, #8
 8009982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	2103      	movs	r1, #3
 8009990:	fa01 f303 	lsl.w	r3, r1, r3
 8009994:	43db      	mvns	r3, r3
 8009996:	401a      	ands	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	2101      	movs	r1, #1
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	fa01 f303 	lsl.w	r3, r1, r3
 80099a8:	43db      	mvns	r3, r3
 80099aa:	401a      	ands	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	2103      	movs	r1, #3
 80099ba:	fa01 f303 	lsl.w	r3, r1, r3
 80099be:	43db      	mvns	r3, r3
 80099c0:	401a      	ands	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ca:	2101      	movs	r1, #1
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	fa01 f303 	lsl.w	r3, r1, r3
 80099d2:	43db      	mvns	r3, r3
 80099d4:	401a      	ands	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	3301      	adds	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	fa22 f303 	lsr.w	r3, r2, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f47f af2b 	bne.w	8009844 <HAL_GPIO_DeInit+0x10>
  }
}
 80099ee:	bf00      	nop
 80099f0:	bf00      	nop
 80099f2:	371c      	adds	r7, #28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	40010000 	.word	0x40010000
 8009a00:	48000400 	.word	0x48000400
 8009a04:	48000800 	.word	0x48000800
 8009a08:	48000c00 	.word	0x48000c00
 8009a0c:	48001000 	.word	0x48001000
 8009a10:	48001400 	.word	0x48001400
 8009a14:	48001800 	.word	0x48001800
 8009a18:	40010400 	.word	0x40010400

08009a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	807b      	strh	r3, [r7, #2]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009a2c:	787b      	ldrb	r3, [r7, #1]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009a32:	887a      	ldrh	r2, [r7, #2]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009a38:	e002      	b.n	8009a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009a3a:	887a      	ldrh	r2, [r7, #2]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	4603      	mov	r3, r0
 8009a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009a56:	4b08      	ldr	r3, [pc, #32]	; (8009a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a58:	695a      	ldr	r2, [r3, #20]
 8009a5a:	88fb      	ldrh	r3, [r7, #6]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d006      	beq.n	8009a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009a62:	4a05      	ldr	r2, [pc, #20]	; (8009a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a64:	88fb      	ldrh	r3, [r7, #6]
 8009a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009a68:	88fb      	ldrh	r3, [r7, #6]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f806 	bl	8009a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	40010400 	.word	0x40010400

08009a7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e081      	b.n	8009ba8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d106      	bne.n	8009abe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f8a8 	bl	8009c0e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2224      	movs	r2, #36	; 0x24
 8009ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f022 0201 	bic.w	r2, r2, #1
 8009ad4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009ae2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009af2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d107      	bne.n	8009b0c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689a      	ldr	r2, [r3, #8]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b08:	609a      	str	r2, [r3, #8]
 8009b0a:	e006      	b.n	8009b1a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009b18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d104      	bne.n	8009b2c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	6812      	ldr	r2, [r2, #0]
 8009b36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b3e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691a      	ldr	r2, [r3, #16]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	69d9      	ldr	r1, [r3, #28]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1a      	ldr	r2, [r3, #32]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f042 0201 	orr.w	r2, r2, #1
 8009b88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2220      	movs	r2, #32
 8009b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e021      	b.n	8009c06 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2224      	movs	r2, #36	; 0x24
 8009bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f022 0201 	bic.w	r2, r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f821 	bl	8009c22 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b083      	sub	sp, #12
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	4608      	mov	r0, r1
 8009c42:	4611      	mov	r1, r2
 8009c44:	461a      	mov	r2, r3
 8009c46:	4603      	mov	r3, r0
 8009c48:	817b      	strh	r3, [r7, #10]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	813b      	strh	r3, [r7, #8]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b20      	cmp	r3, #32
 8009c5c:	f040 80f9 	bne.w	8009e52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <HAL_I2C_Mem_Write+0x34>
 8009c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d105      	bne.n	8009c78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e0ed      	b.n	8009e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d101      	bne.n	8009c86 <HAL_I2C_Mem_Write+0x4e>
 8009c82:	2302      	movs	r3, #2
 8009c84:	e0e6      	b.n	8009e54 <HAL_I2C_Mem_Write+0x21c>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c8e:	f7ff f803 	bl	8008c98 <HAL_GetTick>
 8009c92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	2319      	movs	r3, #25
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 fadd 	bl	800a260 <I2C_WaitOnFlagUntilTimeout>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e0d1      	b.n	8009e54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2221      	movs	r2, #33	; 0x21
 8009cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2240      	movs	r2, #64	; 0x40
 8009cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6a3a      	ldr	r2, [r7, #32]
 8009cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009cd8:	88f8      	ldrh	r0, [r7, #6]
 8009cda:	893a      	ldrh	r2, [r7, #8]
 8009cdc:	8979      	ldrh	r1, [r7, #10]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 f9ed 	bl	800a0c8 <I2C_RequestMemoryWrite>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d005      	beq.n	8009d00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e0a9      	b.n	8009e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	2bff      	cmp	r3, #255	; 0xff
 8009d08:	d90e      	bls.n	8009d28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	22ff      	movs	r2, #255	; 0xff
 8009d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	8979      	ldrh	r1, [r7, #10]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fc45 	bl	800a5b0 <I2C_TransferConfig>
 8009d26:	e00f      	b.n	8009d48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	8979      	ldrh	r1, [r7, #10]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fc34 	bl	800a5b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fac7 	bl	800a2e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e07b      	b.n	8009e54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	781a      	ldrb	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d034      	beq.n	8009e00 <HAL_I2C_Mem_Write+0x1c8>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d130      	bne.n	8009e00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	2200      	movs	r2, #0
 8009da6:	2180      	movs	r1, #128	; 0x80
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 fa59 	bl	800a260 <I2C_WaitOnFlagUntilTimeout>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e04d      	b.n	8009e54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	2bff      	cmp	r3, #255	; 0xff
 8009dc0:	d90e      	bls.n	8009de0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	22ff      	movs	r2, #255	; 0xff
 8009dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	8979      	ldrh	r1, [r7, #10]
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f000 fbe9 	bl	800a5b0 <I2C_TransferConfig>
 8009dde:	e00f      	b.n	8009e00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	8979      	ldrh	r1, [r7, #10]
 8009df2:	2300      	movs	r3, #0
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 fbd8 	bl	800a5b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d19e      	bne.n	8009d48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f000 faa6 	bl	800a360 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e01a      	b.n	8009e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2220      	movs	r2, #32
 8009e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6859      	ldr	r1, [r3, #4]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <HAL_I2C_Mem_Write+0x224>)
 8009e32:	400b      	ands	r3, r1
 8009e34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e000      	b.n	8009e54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009e52:	2302      	movs	r3, #2
  }
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	fe00e800 	.word	0xfe00e800

08009e60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	817b      	strh	r3, [r7, #10]
 8009e72:	460b      	mov	r3, r1
 8009e74:	813b      	strh	r3, [r7, #8]
 8009e76:	4613      	mov	r3, r2
 8009e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b20      	cmp	r3, #32
 8009e84:	f040 80fd 	bne.w	800a082 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <HAL_I2C_Mem_Read+0x34>
 8009e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e0f1      	b.n	800a084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d101      	bne.n	8009eae <HAL_I2C_Mem_Read+0x4e>
 8009eaa:	2302      	movs	r3, #2
 8009eac:	e0ea      	b.n	800a084 <HAL_I2C_Mem_Read+0x224>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009eb6:	f7fe feef 	bl	8008c98 <HAL_GetTick>
 8009eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	2319      	movs	r3, #25
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 f9c9 	bl	800a260 <I2C_WaitOnFlagUntilTimeout>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e0d5      	b.n	800a084 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2222      	movs	r2, #34	; 0x22
 8009edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2240      	movs	r2, #64	; 0x40
 8009ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a3a      	ldr	r2, [r7, #32]
 8009ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f00:	88f8      	ldrh	r0, [r7, #6]
 8009f02:	893a      	ldrh	r2, [r7, #8]
 8009f04:	8979      	ldrh	r1, [r7, #10]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	9301      	str	r3, [sp, #4]
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	4603      	mov	r3, r0
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 f92d 	bl	800a170 <I2C_RequestMemoryRead>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d005      	beq.n	8009f28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e0ad      	b.n	800a084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	2bff      	cmp	r3, #255	; 0xff
 8009f30:	d90e      	bls.n	8009f50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	22ff      	movs	r2, #255	; 0xff
 8009f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	8979      	ldrh	r1, [r7, #10]
 8009f40:	4b52      	ldr	r3, [pc, #328]	; (800a08c <HAL_I2C_Mem_Read+0x22c>)
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 fb31 	bl	800a5b0 <I2C_TransferConfig>
 8009f4e:	e00f      	b.n	8009f70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	8979      	ldrh	r1, [r7, #10]
 8009f62:	4b4a      	ldr	r3, [pc, #296]	; (800a08c <HAL_I2C_Mem_Read+0x22c>)
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 fb20 	bl	800a5b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	2200      	movs	r2, #0
 8009f78:	2104      	movs	r1, #4
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 f970 	bl	800a260 <I2C_WaitOnFlagUntilTimeout>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e07c      	b.n	800a084 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	b2d2      	uxtb	r2, r2
 8009f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d034      	beq.n	800a030 <HAL_I2C_Mem_Read+0x1d0>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d130      	bne.n	800a030 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2180      	movs	r1, #128	; 0x80
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 f941 	bl	800a260 <I2C_WaitOnFlagUntilTimeout>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e04d      	b.n	800a084 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2bff      	cmp	r3, #255	; 0xff
 8009ff0:	d90e      	bls.n	800a010 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	8979      	ldrh	r1, [r7, #10]
 800a000:	2300      	movs	r3, #0
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fad1 	bl	800a5b0 <I2C_TransferConfig>
 800a00e:	e00f      	b.n	800a030 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a014:	b29a      	uxth	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	8979      	ldrh	r1, [r7, #10]
 800a022:	2300      	movs	r3, #0
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fac0 	bl	800a5b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a034:	b29b      	uxth	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d19a      	bne.n	8009f70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 f98e 	bl	800a360 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e01a      	b.n	800a084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2220      	movs	r2, #32
 800a054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6859      	ldr	r1, [r3, #4]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <HAL_I2C_Mem_Read+0x230>)
 800a062:	400b      	ands	r3, r1
 800a064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2220      	movs	r2, #32
 800a06a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	e000      	b.n	800a084 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a082:	2302      	movs	r3, #2
  }
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	80002400 	.word	0x80002400
 800a090:	fe00e800 	.word	0xfe00e800

0800a094 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0a2:	b2db      	uxtb	r3, r3
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af02      	add	r7, sp, #8
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	817b      	strh	r3, [r7, #10]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	813b      	strh	r3, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a0e2:	88fb      	ldrh	r3, [r7, #6]
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	8979      	ldrh	r1, [r7, #10]
 800a0e8:	4b20      	ldr	r3, [pc, #128]	; (800a16c <I2C_RequestMemoryWrite+0xa4>)
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 fa5d 	bl	800a5b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0f6:	69fa      	ldr	r2, [r7, #28]
 800a0f8:	69b9      	ldr	r1, [r7, #24]
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 f8f0 	bl	800a2e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e02c      	b.n	800a164 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a10a:	88fb      	ldrh	r3, [r7, #6]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d105      	bne.n	800a11c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a110:	893b      	ldrh	r3, [r7, #8]
 800a112:	b2da      	uxtb	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	629a      	str	r2, [r3, #40]	; 0x28
 800a11a:	e015      	b.n	800a148 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a11c:	893b      	ldrh	r3, [r7, #8]
 800a11e:	0a1b      	lsrs	r3, r3, #8
 800a120:	b29b      	uxth	r3, r3
 800a122:	b2da      	uxtb	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	69b9      	ldr	r1, [r7, #24]
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 f8d6 	bl	800a2e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e012      	b.n	800a164 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a13e:	893b      	ldrh	r3, [r7, #8]
 800a140:	b2da      	uxtb	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	2200      	movs	r2, #0
 800a150:	2180      	movs	r1, #128	; 0x80
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 f884 	bl	800a260 <I2C_WaitOnFlagUntilTimeout>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e000      	b.n	800a164 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	80002000 	.word	0x80002000

0800a170 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	461a      	mov	r2, r3
 800a17e:	4603      	mov	r3, r0
 800a180:	817b      	strh	r3, [r7, #10]
 800a182:	460b      	mov	r3, r1
 800a184:	813b      	strh	r3, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a18a:	88fb      	ldrh	r3, [r7, #6]
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	8979      	ldrh	r1, [r7, #10]
 800a190:	4b20      	ldr	r3, [pc, #128]	; (800a214 <I2C_RequestMemoryRead+0xa4>)
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	2300      	movs	r3, #0
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 fa0a 	bl	800a5b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	69b9      	ldr	r1, [r7, #24]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f89d 	bl	800a2e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e02c      	b.n	800a20a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d105      	bne.n	800a1c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a1b6:	893b      	ldrh	r3, [r7, #8]
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	629a      	str	r2, [r3, #40]	; 0x28
 800a1c0:	e015      	b.n	800a1ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a1c2:	893b      	ldrh	r3, [r7, #8]
 800a1c4:	0a1b      	lsrs	r3, r3, #8
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1d0:	69fa      	ldr	r2, [r7, #28]
 800a1d2:	69b9      	ldr	r1, [r7, #24]
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 f883 	bl	800a2e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e012      	b.n	800a20a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a1e4:	893b      	ldrh	r3, [r7, #8]
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2140      	movs	r1, #64	; 0x40
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f831 	bl	800a260 <I2C_WaitOnFlagUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e000      	b.n	800a20a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	80002000 	.word	0x80002000

0800a218 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	f003 0302 	and.w	r3, r3, #2
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d103      	bne.n	800a236 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2200      	movs	r2, #0
 800a234:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b01      	cmp	r3, #1
 800a242:	d007      	beq.n	800a254 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699a      	ldr	r2, [r3, #24]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f042 0201 	orr.w	r2, r2, #1
 800a252:	619a      	str	r2, [r3, #24]
  }
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	603b      	str	r3, [r7, #0]
 800a26c:	4613      	mov	r3, r2
 800a26e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a270:	e022      	b.n	800a2b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a278:	d01e      	beq.n	800a2b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a27a:	f7fe fd0d 	bl	8008c98 <HAL_GetTick>
 800a27e:	4602      	mov	r2, r0
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d302      	bcc.n	800a290 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d113      	bne.n	800a2b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a294:	f043 0220 	orr.w	r2, r3, #32
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2220      	movs	r2, #32
 800a2a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e00f      	b.n	800a2d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699a      	ldr	r2, [r3, #24]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	bf0c      	ite	eq
 800a2c8:	2301      	moveq	r3, #1
 800a2ca:	2300      	movne	r3, #0
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	79fb      	ldrb	r3, [r7, #7]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d0cd      	beq.n	800a272 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a2ec:	e02c      	b.n	800a348 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	68b9      	ldr	r1, [r7, #8]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f870 	bl	800a3d8 <I2C_IsErrorOccurred>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e02a      	b.n	800a358 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a308:	d01e      	beq.n	800a348 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a30a:	f7fe fcc5 	bl	8008c98 <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	429a      	cmp	r2, r3
 800a318:	d302      	bcc.n	800a320 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d113      	bne.n	800a348 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a324:	f043 0220 	orr.w	r2, r3, #32
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2220      	movs	r2, #32
 800a330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e007      	b.n	800a358 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	f003 0302 	and.w	r3, r3, #2
 800a352:	2b02      	cmp	r3, #2
 800a354:	d1cb      	bne.n	800a2ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a36c:	e028      	b.n	800a3c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	68b9      	ldr	r1, [r7, #8]
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 f830 	bl	800a3d8 <I2C_IsErrorOccurred>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e026      	b.n	800a3d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a382:	f7fe fc89 	bl	8008c98 <HAL_GetTick>
 800a386:	4602      	mov	r2, r0
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d302      	bcc.n	800a398 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d113      	bne.n	800a3c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39c:	f043 0220 	orr.w	r2, r3, #32
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e007      	b.n	800a3d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	f003 0320 	and.w	r3, r3, #32
 800a3ca:	2b20      	cmp	r3, #32
 800a3cc:	d1cf      	bne.n	800a36e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08a      	sub	sp, #40	; 0x28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b00      	cmp	r3, #0
 800a402:	d075      	beq.n	800a4f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2210      	movs	r2, #16
 800a40a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a40c:	e056      	b.n	800a4bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a414:	d052      	beq.n	800a4bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a416:	f7fe fc3f 	bl	8008c98 <HAL_GetTick>
 800a41a:	4602      	mov	r2, r0
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	429a      	cmp	r2, r3
 800a424:	d302      	bcc.n	800a42c <I2C_IsErrorOccurred+0x54>
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d147      	bne.n	800a4bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a436:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a43e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a44a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a44e:	d12e      	bne.n	800a4ae <I2C_IsErrorOccurred+0xd6>
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a456:	d02a      	beq.n	800a4ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a458:	7cfb      	ldrb	r3, [r7, #19]
 800a45a:	2b20      	cmp	r3, #32
 800a45c:	d027      	beq.n	800a4ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a46c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a46e:	f7fe fc13 	bl	8008c98 <HAL_GetTick>
 800a472:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a474:	e01b      	b.n	800a4ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a476:	f7fe fc0f 	bl	8008c98 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	2b19      	cmp	r3, #25
 800a482:	d914      	bls.n	800a4ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a488:	f043 0220 	orr.w	r2, r3, #32
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2220      	movs	r2, #32
 800a494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	f003 0320 	and.w	r3, r3, #32
 800a4b8:	2b20      	cmp	r3, #32
 800a4ba:	d1dc      	bne.n	800a476 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	f003 0320 	and.w	r3, r3, #32
 800a4c6:	2b20      	cmp	r3, #32
 800a4c8:	d003      	beq.n	800a4d2 <I2C_IsErrorOccurred+0xfa>
 800a4ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d09d      	beq.n	800a40e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d103      	bne.n	800a4e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	f043 0304 	orr.w	r3, r3, #4
 800a4e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00b      	beq.n	800a51a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	f043 0301 	orr.w	r3, r3, #1
 800a508:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a512:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00b      	beq.n	800a53c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	f043 0308 	orr.w	r3, r3, #8
 800a52a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a534:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00b      	beq.n	800a55e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	f043 0302 	orr.w	r3, r3, #2
 800a54c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a556:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a55e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01c      	beq.n	800a5a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f7ff fe56 	bl	800a218 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6859      	ldr	r1, [r3, #4]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	4b0d      	ldr	r3, [pc, #52]	; (800a5ac <I2C_IsErrorOccurred+0x1d4>)
 800a578:	400b      	ands	r3, r1
 800a57a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	431a      	orrs	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3728      	adds	r7, #40	; 0x28
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	fe00e800 	.word	0xfe00e800

0800a5b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	607b      	str	r3, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	817b      	strh	r3, [r7, #10]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a5c2:	897b      	ldrh	r3, [r7, #10]
 800a5c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a5c8:	7a7b      	ldrb	r3, [r7, #9]
 800a5ca:	041b      	lsls	r3, r3, #16
 800a5cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a5d0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5de:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	685a      	ldr	r2, [r3, #4]
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	0d5b      	lsrs	r3, r3, #21
 800a5ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a5ee:	4b08      	ldr	r3, [pc, #32]	; (800a610 <I2C_TransferConfig+0x60>)
 800a5f0:	430b      	orrs	r3, r1
 800a5f2:	43db      	mvns	r3, r3
 800a5f4:	ea02 0103 	and.w	r1, r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a602:	bf00      	nop
 800a604:	371c      	adds	r7, #28
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	03ff63ff 	.word	0x03ff63ff

0800a614 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b20      	cmp	r3, #32
 800a628:	d138      	bne.n	800a69c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a634:	2302      	movs	r3, #2
 800a636:	e032      	b.n	800a69e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2224      	movs	r2, #36	; 0x24
 800a644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f022 0201 	bic.w	r2, r2, #1
 800a656:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a666:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6819      	ldr	r1, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	430a      	orrs	r2, r1
 800a676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0201 	orr.w	r2, r2, #1
 800a686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	e000      	b.n	800a69e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a69c:	2302      	movs	r3, #2
  }
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b20      	cmp	r3, #32
 800a6be:	d139      	bne.n	800a734 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d101      	bne.n	800a6ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	e033      	b.n	800a736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2224      	movs	r2, #36	; 0x24
 800a6da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a6fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	021b      	lsls	r3, r3, #8
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f042 0201 	orr.w	r2, r2, #1
 800a71e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	e000      	b.n	800a736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a734:	2302      	movs	r3, #2
  }
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
	...

0800a744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a744:	b480      	push	{r7}
 800a746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a748:	4b04      	ldr	r3, [pc, #16]	; (800a75c <HAL_PWREx_GetVoltageRange+0x18>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a750:	4618      	mov	r0, r3
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	40007000 	.word	0x40007000

0800a760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a76e:	d130      	bne.n	800a7d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a770:	4b23      	ldr	r3, [pc, #140]	; (800a800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a77c:	d038      	beq.n	800a7f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a77e:	4b20      	ldr	r3, [pc, #128]	; (800a800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a786:	4a1e      	ldr	r2, [pc, #120]	; (800a800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a78c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a78e:	4b1d      	ldr	r3, [pc, #116]	; (800a804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2232      	movs	r2, #50	; 0x32
 800a794:	fb02 f303 	mul.w	r3, r2, r3
 800a798:	4a1b      	ldr	r2, [pc, #108]	; (800a808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a79a:	fba2 2303 	umull	r2, r3, r2, r3
 800a79e:	0c9b      	lsrs	r3, r3, #18
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a7a4:	e002      	b.n	800a7ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a7ac:	4b14      	ldr	r3, [pc, #80]	; (800a800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b8:	d102      	bne.n	800a7c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1f2      	bne.n	800a7a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a7c0:	4b0f      	ldr	r3, [pc, #60]	; (800a800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7cc:	d110      	bne.n	800a7f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e00f      	b.n	800a7f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a7d2:	4b0b      	ldr	r3, [pc, #44]	; (800a800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7de:	d007      	beq.n	800a7f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a7e8:	4a05      	ldr	r2, [pc, #20]	; (800a800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	40007000 	.word	0x40007000
 800a804:	2000135c 	.word	0x2000135c
 800a808:	431bde83 	.word	0x431bde83

0800a80c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e3d8      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a81e:	4b97      	ldr	r3, [pc, #604]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f003 030c 	and.w	r3, r3, #12
 800a826:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a828:	4b94      	ldr	r3, [pc, #592]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f003 0303 	and.w	r3, r3, #3
 800a830:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0310 	and.w	r3, r3, #16
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 80e4 	beq.w	800aa08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d007      	beq.n	800a856 <HAL_RCC_OscConfig+0x4a>
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	2b0c      	cmp	r3, #12
 800a84a:	f040 808b 	bne.w	800a964 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b01      	cmp	r3, #1
 800a852:	f040 8087 	bne.w	800a964 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a856:	4b89      	ldr	r3, [pc, #548]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <HAL_RCC_OscConfig+0x62>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e3b0      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1a      	ldr	r2, [r3, #32]
 800a872:	4b82      	ldr	r3, [pc, #520]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0308 	and.w	r3, r3, #8
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d004      	beq.n	800a888 <HAL_RCC_OscConfig+0x7c>
 800a87e:	4b7f      	ldr	r3, [pc, #508]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a886:	e005      	b.n	800a894 <HAL_RCC_OscConfig+0x88>
 800a888:	4b7c      	ldr	r3, [pc, #496]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a88a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a88e:	091b      	lsrs	r3, r3, #4
 800a890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a894:	4293      	cmp	r3, r2
 800a896:	d223      	bcs.n	800a8e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a1b      	ldr	r3, [r3, #32]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f000 fd43 	bl	800b328 <RCC_SetFlashLatencyFromMSIRange>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e391      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8ac:	4b73      	ldr	r3, [pc, #460]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a72      	ldr	r2, [pc, #456]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8b2:	f043 0308 	orr.w	r3, r3, #8
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	4b70      	ldr	r3, [pc, #448]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	496d      	ldr	r1, [pc, #436]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8ca:	4b6c      	ldr	r3, [pc, #432]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	021b      	lsls	r3, r3, #8
 800a8d8:	4968      	ldr	r1, [pc, #416]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	604b      	str	r3, [r1, #4]
 800a8de:	e025      	b.n	800a92c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8e0:	4b66      	ldr	r3, [pc, #408]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a65      	ldr	r2, [pc, #404]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8e6:	f043 0308 	orr.w	r3, r3, #8
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	4b63      	ldr	r3, [pc, #396]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	4960      	ldr	r1, [pc, #384]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8fe:	4b5f      	ldr	r3, [pc, #380]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	021b      	lsls	r3, r3, #8
 800a90c:	495b      	ldr	r1, [pc, #364]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d109      	bne.n	800a92c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a1b      	ldr	r3, [r3, #32]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 fd03 	bl	800b328 <RCC_SetFlashLatencyFromMSIRange>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e351      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a92c:	f000 fc38 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800a930:	4602      	mov	r2, r0
 800a932:	4b52      	ldr	r3, [pc, #328]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	091b      	lsrs	r3, r3, #4
 800a938:	f003 030f 	and.w	r3, r3, #15
 800a93c:	4950      	ldr	r1, [pc, #320]	; (800aa80 <HAL_RCC_OscConfig+0x274>)
 800a93e:	5ccb      	ldrb	r3, [r1, r3]
 800a940:	f003 031f 	and.w	r3, r3, #31
 800a944:	fa22 f303 	lsr.w	r3, r2, r3
 800a948:	4a4e      	ldr	r2, [pc, #312]	; (800aa84 <HAL_RCC_OscConfig+0x278>)
 800a94a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a94c:	4b4e      	ldr	r3, [pc, #312]	; (800aa88 <HAL_RCC_OscConfig+0x27c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4618      	mov	r0, r3
 800a952:	f7fe f951 	bl	8008bf8 <HAL_InitTick>
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d052      	beq.n	800aa06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800a960:	7bfb      	ldrb	r3, [r7, #15]
 800a962:	e335      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d032      	beq.n	800a9d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a96c:	4b43      	ldr	r3, [pc, #268]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a42      	ldr	r2, [pc, #264]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a972:	f043 0301 	orr.w	r3, r3, #1
 800a976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a978:	f7fe f98e 	bl	8008c98 <HAL_GetTick>
 800a97c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a97e:	e008      	b.n	800a992 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a980:	f7fe f98a 	bl	8008c98 <HAL_GetTick>
 800a984:	4602      	mov	r2, r0
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d901      	bls.n	800a992 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e31e      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a992:	4b3a      	ldr	r3, [pc, #232]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d0f0      	beq.n	800a980 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a99e:	4b37      	ldr	r3, [pc, #220]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a36      	ldr	r2, [pc, #216]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a9a4:	f043 0308 	orr.w	r3, r3, #8
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	4b34      	ldr	r3, [pc, #208]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
 800a9b6:	4931      	ldr	r1, [pc, #196]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a9bc:	4b2f      	ldr	r3, [pc, #188]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	021b      	lsls	r3, r3, #8
 800a9ca:	492c      	ldr	r1, [pc, #176]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	604b      	str	r3, [r1, #4]
 800a9d0:	e01a      	b.n	800aa08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a9d2:	4b2a      	ldr	r3, [pc, #168]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a29      	ldr	r2, [pc, #164]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a9d8:	f023 0301 	bic.w	r3, r3, #1
 800a9dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a9de:	f7fe f95b 	bl	8008c98 <HAL_GetTick>
 800a9e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a9e4:	e008      	b.n	800a9f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a9e6:	f7fe f957 	bl	8008c98 <HAL_GetTick>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	d901      	bls.n	800a9f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e2eb      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a9f8:	4b20      	ldr	r3, [pc, #128]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1f0      	bne.n	800a9e6 <HAL_RCC_OscConfig+0x1da>
 800aa04:	e000      	b.n	800aa08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800aa06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d074      	beq.n	800aafe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	2b08      	cmp	r3, #8
 800aa18:	d005      	beq.n	800aa26 <HAL_RCC_OscConfig+0x21a>
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b0c      	cmp	r3, #12
 800aa1e:	d10e      	bne.n	800aa3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d10b      	bne.n	800aa3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa26:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d064      	beq.n	800aafc <HAL_RCC_OscConfig+0x2f0>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d160      	bne.n	800aafc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e2c8      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa46:	d106      	bne.n	800aa56 <HAL_RCC_OscConfig+0x24a>
 800aa48:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a0b      	ldr	r2, [pc, #44]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800aa4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	e026      	b.n	800aaa4 <HAL_RCC_OscConfig+0x298>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa5e:	d115      	bne.n	800aa8c <HAL_RCC_OscConfig+0x280>
 800aa60:	4b06      	ldr	r3, [pc, #24]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a05      	ldr	r2, [pc, #20]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800aa66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	4b03      	ldr	r3, [pc, #12]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a02      	ldr	r2, [pc, #8]	; (800aa7c <HAL_RCC_OscConfig+0x270>)
 800aa72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	e014      	b.n	800aaa4 <HAL_RCC_OscConfig+0x298>
 800aa7a:	bf00      	nop
 800aa7c:	40021000 	.word	0x40021000
 800aa80:	0801deb8 	.word	0x0801deb8
 800aa84:	2000135c 	.word	0x2000135c
 800aa88:	2000133c 	.word	0x2000133c
 800aa8c:	4ba0      	ldr	r3, [pc, #640]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a9f      	ldr	r2, [pc, #636]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800aa92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa96:	6013      	str	r3, [r2, #0]
 800aa98:	4b9d      	ldr	r3, [pc, #628]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a9c      	ldr	r2, [pc, #624]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800aa9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d013      	beq.n	800aad4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaac:	f7fe f8f4 	bl	8008c98 <HAL_GetTick>
 800aab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aab2:	e008      	b.n	800aac6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aab4:	f7fe f8f0 	bl	8008c98 <HAL_GetTick>
 800aab8:	4602      	mov	r2, r0
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	2b64      	cmp	r3, #100	; 0x64
 800aac0:	d901      	bls.n	800aac6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e284      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aac6:	4b92      	ldr	r3, [pc, #584]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d0f0      	beq.n	800aab4 <HAL_RCC_OscConfig+0x2a8>
 800aad2:	e014      	b.n	800aafe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aad4:	f7fe f8e0 	bl	8008c98 <HAL_GetTick>
 800aad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aada:	e008      	b.n	800aaee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aadc:	f7fe f8dc 	bl	8008c98 <HAL_GetTick>
 800aae0:	4602      	mov	r2, r0
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	2b64      	cmp	r3, #100	; 0x64
 800aae8:	d901      	bls.n	800aaee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e270      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aaee:	4b88      	ldr	r3, [pc, #544]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1f0      	bne.n	800aadc <HAL_RCC_OscConfig+0x2d0>
 800aafa:	e000      	b.n	800aafe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aafc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d060      	beq.n	800abcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	d005      	beq.n	800ab1c <HAL_RCC_OscConfig+0x310>
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	2b0c      	cmp	r3, #12
 800ab14:	d119      	bne.n	800ab4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d116      	bne.n	800ab4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab1c:	4b7c      	ldr	r3, [pc, #496]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d005      	beq.n	800ab34 <HAL_RCC_OscConfig+0x328>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e24d      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab34:	4b76      	ldr	r3, [pc, #472]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	061b      	lsls	r3, r3, #24
 800ab42:	4973      	ldr	r1, [pc, #460]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab48:	e040      	b.n	800abcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d023      	beq.n	800ab9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab52:	4b6f      	ldr	r3, [pc, #444]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a6e      	ldr	r2, [pc, #440]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ab58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab5e:	f7fe f89b 	bl	8008c98 <HAL_GetTick>
 800ab62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab64:	e008      	b.n	800ab78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab66:	f7fe f897 	bl	8008c98 <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d901      	bls.n	800ab78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e22b      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab78:	4b65      	ldr	r3, [pc, #404]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0f0      	beq.n	800ab66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab84:	4b62      	ldr	r3, [pc, #392]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	061b      	lsls	r3, r3, #24
 800ab92:	495f      	ldr	r1, [pc, #380]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ab94:	4313      	orrs	r3, r2
 800ab96:	604b      	str	r3, [r1, #4]
 800ab98:	e018      	b.n	800abcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab9a:	4b5d      	ldr	r3, [pc, #372]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a5c      	ldr	r2, [pc, #368]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800aba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba6:	f7fe f877 	bl	8008c98 <HAL_GetTick>
 800abaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800abac:	e008      	b.n	800abc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abae:	f7fe f873 	bl	8008c98 <HAL_GetTick>
 800abb2:	4602      	mov	r2, r0
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d901      	bls.n	800abc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e207      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800abc0:	4b53      	ldr	r3, [pc, #332]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1f0      	bne.n	800abae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0308 	and.w	r3, r3, #8
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d03c      	beq.n	800ac52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01c      	beq.n	800ac1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abe0:	4b4b      	ldr	r3, [pc, #300]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800abe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abe6:	4a4a      	ldr	r2, [pc, #296]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800abe8:	f043 0301 	orr.w	r3, r3, #1
 800abec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abf0:	f7fe f852 	bl	8008c98 <HAL_GetTick>
 800abf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800abf6:	e008      	b.n	800ac0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abf8:	f7fe f84e 	bl	8008c98 <HAL_GetTick>
 800abfc:	4602      	mov	r2, r0
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d901      	bls.n	800ac0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e1e2      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ac0a:	4b41      	ldr	r3, [pc, #260]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ac0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d0ef      	beq.n	800abf8 <HAL_RCC_OscConfig+0x3ec>
 800ac18:	e01b      	b.n	800ac52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac1a:	4b3d      	ldr	r3, [pc, #244]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ac1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac20:	4a3b      	ldr	r2, [pc, #236]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ac22:	f023 0301 	bic.w	r3, r3, #1
 800ac26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac2a:	f7fe f835 	bl	8008c98 <HAL_GetTick>
 800ac2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ac30:	e008      	b.n	800ac44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac32:	f7fe f831 	bl	8008c98 <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d901      	bls.n	800ac44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e1c5      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ac44:	4b32      	ldr	r3, [pc, #200]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ac46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac4a:	f003 0302 	and.w	r3, r3, #2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1ef      	bne.n	800ac32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0304 	and.w	r3, r3, #4
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 80a6 	beq.w	800adac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac60:	2300      	movs	r3, #0
 800ac62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ac64:	4b2a      	ldr	r3, [pc, #168]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ac66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10d      	bne.n	800ac8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac70:	4b27      	ldr	r3, [pc, #156]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ac72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac74:	4a26      	ldr	r2, [pc, #152]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ac76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac7a:	6593      	str	r3, [r2, #88]	; 0x58
 800ac7c:	4b24      	ldr	r3, [pc, #144]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ac7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac84:	60bb      	str	r3, [r7, #8]
 800ac86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac8c:	4b21      	ldr	r3, [pc, #132]	; (800ad14 <HAL_RCC_OscConfig+0x508>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d118      	bne.n	800acca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac98:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <HAL_RCC_OscConfig+0x508>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <HAL_RCC_OscConfig+0x508>)
 800ac9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aca4:	f7fd fff8 	bl	8008c98 <HAL_GetTick>
 800aca8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800acaa:	e008      	b.n	800acbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acac:	f7fd fff4 	bl	8008c98 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e188      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800acbe:	4b15      	ldr	r3, [pc, #84]	; (800ad14 <HAL_RCC_OscConfig+0x508>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0f0      	beq.n	800acac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d108      	bne.n	800ace4 <HAL_RCC_OscConfig+0x4d8>
 800acd2:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800acd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acd8:	4a0d      	ldr	r2, [pc, #52]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800acda:	f043 0301 	orr.w	r3, r3, #1
 800acde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ace2:	e029      	b.n	800ad38 <HAL_RCC_OscConfig+0x52c>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	2b05      	cmp	r3, #5
 800acea:	d115      	bne.n	800ad18 <HAL_RCC_OscConfig+0x50c>
 800acec:	4b08      	ldr	r3, [pc, #32]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800acee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acf2:	4a07      	ldr	r2, [pc, #28]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800acf4:	f043 0304 	orr.w	r3, r3, #4
 800acf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800acfc:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800acfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad02:	4a03      	ldr	r2, [pc, #12]	; (800ad10 <HAL_RCC_OscConfig+0x504>)
 800ad04:	f043 0301 	orr.w	r3, r3, #1
 800ad08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ad0c:	e014      	b.n	800ad38 <HAL_RCC_OscConfig+0x52c>
 800ad0e:	bf00      	nop
 800ad10:	40021000 	.word	0x40021000
 800ad14:	40007000 	.word	0x40007000
 800ad18:	4b91      	ldr	r3, [pc, #580]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ad1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad1e:	4a90      	ldr	r2, [pc, #576]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ad20:	f023 0301 	bic.w	r3, r3, #1
 800ad24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ad28:	4b8d      	ldr	r3, [pc, #564]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ad2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad2e:	4a8c      	ldr	r2, [pc, #560]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ad30:	f023 0304 	bic.w	r3, r3, #4
 800ad34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d016      	beq.n	800ad6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad40:	f7fd ffaa 	bl	8008c98 <HAL_GetTick>
 800ad44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad46:	e00a      	b.n	800ad5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad48:	f7fd ffa6 	bl	8008c98 <HAL_GetTick>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d901      	bls.n	800ad5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e138      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad5e:	4b80      	ldr	r3, [pc, #512]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ad60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d0ed      	beq.n	800ad48 <HAL_RCC_OscConfig+0x53c>
 800ad6c:	e015      	b.n	800ad9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad6e:	f7fd ff93 	bl	8008c98 <HAL_GetTick>
 800ad72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ad74:	e00a      	b.n	800ad8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad76:	f7fd ff8f 	bl	8008c98 <HAL_GetTick>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d901      	bls.n	800ad8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e121      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ad8c:	4b74      	ldr	r3, [pc, #464]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ad8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1ed      	bne.n	800ad76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad9a:	7ffb      	ldrb	r3, [r7, #31]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d105      	bne.n	800adac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ada0:	4b6f      	ldr	r3, [pc, #444]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ada2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada4:	4a6e      	ldr	r2, [pc, #440]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ada6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adaa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 810c 	beq.w	800afce <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adba:	2b02      	cmp	r3, #2
 800adbc:	f040 80d4 	bne.w	800af68 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800adc0:	4b67      	ldr	r3, [pc, #412]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f003 0203 	and.w	r2, r3, #3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add0:	429a      	cmp	r2, r3
 800add2:	d130      	bne.n	800ae36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adde:	3b01      	subs	r3, #1
 800ade0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d127      	bne.n	800ae36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d11f      	bne.n	800ae36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae00:	2a07      	cmp	r2, #7
 800ae02:	bf14      	ite	ne
 800ae04:	2201      	movne	r2, #1
 800ae06:	2200      	moveq	r2, #0
 800ae08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d113      	bne.n	800ae36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae18:	085b      	lsrs	r3, r3, #1
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d109      	bne.n	800ae36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2c:	085b      	lsrs	r3, r3, #1
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d06e      	beq.n	800af14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	2b0c      	cmp	r3, #12
 800ae3a:	d069      	beq.n	800af10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ae3c:	4b48      	ldr	r3, [pc, #288]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d105      	bne.n	800ae54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ae48:	4b45      	ldr	r3, [pc, #276]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e0bb      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ae58:	4b41      	ldr	r3, [pc, #260]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a40      	ldr	r2, [pc, #256]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ae5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ae64:	f7fd ff18 	bl	8008c98 <HAL_GetTick>
 800ae68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae6a:	e008      	b.n	800ae7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae6c:	f7fd ff14 	bl	8008c98 <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d901      	bls.n	800ae7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e0a8      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae7e:	4b38      	ldr	r3, [pc, #224]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1f0      	bne.n	800ae6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae8a:	4b35      	ldr	r3, [pc, #212]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	4b35      	ldr	r3, [pc, #212]	; (800af64 <HAL_RCC_OscConfig+0x758>)
 800ae90:	4013      	ands	r3, r2
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae9a:	3a01      	subs	r2, #1
 800ae9c:	0112      	lsls	r2, r2, #4
 800ae9e:	4311      	orrs	r1, r2
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aea4:	0212      	lsls	r2, r2, #8
 800aea6:	4311      	orrs	r1, r2
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aeac:	0852      	lsrs	r2, r2, #1
 800aeae:	3a01      	subs	r2, #1
 800aeb0:	0552      	lsls	r2, r2, #21
 800aeb2:	4311      	orrs	r1, r2
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aeb8:	0852      	lsrs	r2, r2, #1
 800aeba:	3a01      	subs	r2, #1
 800aebc:	0652      	lsls	r2, r2, #25
 800aebe:	4311      	orrs	r1, r2
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aec4:	0912      	lsrs	r2, r2, #4
 800aec6:	0452      	lsls	r2, r2, #17
 800aec8:	430a      	orrs	r2, r1
 800aeca:	4925      	ldr	r1, [pc, #148]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800aecc:	4313      	orrs	r3, r2
 800aece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800aed0:	4b23      	ldr	r3, [pc, #140]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a22      	ldr	r2, [pc, #136]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800aed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aeda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aedc:	4b20      	ldr	r3, [pc, #128]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	4a1f      	ldr	r2, [pc, #124]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800aee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aee8:	f7fd fed6 	bl	8008c98 <HAL_GetTick>
 800aeec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aeee:	e008      	b.n	800af02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aef0:	f7fd fed2 	bl	8008c98 <HAL_GetTick>
 800aef4:	4602      	mov	r2, r0
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d901      	bls.n	800af02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800aefe:	2303      	movs	r3, #3
 800af00:	e066      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af02:	4b17      	ldr	r3, [pc, #92]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d0f0      	beq.n	800aef0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800af0e:	e05e      	b.n	800afce <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e05d      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af14:	4b12      	ldr	r3, [pc, #72]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d156      	bne.n	800afce <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800af20:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a0e      	ldr	r2, [pc, #56]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800af26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800af2c:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	4a0b      	ldr	r2, [pc, #44]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800af32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af38:	f7fd feae 	bl	8008c98 <HAL_GetTick>
 800af3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af3e:	e008      	b.n	800af52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af40:	f7fd feaa 	bl	8008c98 <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d901      	bls.n	800af52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e03e      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af52:	4b03      	ldr	r3, [pc, #12]	; (800af60 <HAL_RCC_OscConfig+0x754>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0f0      	beq.n	800af40 <HAL_RCC_OscConfig+0x734>
 800af5e:	e036      	b.n	800afce <HAL_RCC_OscConfig+0x7c2>
 800af60:	40021000 	.word	0x40021000
 800af64:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2b0c      	cmp	r3, #12
 800af6c:	d02d      	beq.n	800afca <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af6e:	4b1a      	ldr	r3, [pc, #104]	; (800afd8 <HAL_RCC_OscConfig+0x7cc>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a19      	ldr	r2, [pc, #100]	; (800afd8 <HAL_RCC_OscConfig+0x7cc>)
 800af74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af78:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800af7a:	4b17      	ldr	r3, [pc, #92]	; (800afd8 <HAL_RCC_OscConfig+0x7cc>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d105      	bne.n	800af92 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800af86:	4b14      	ldr	r3, [pc, #80]	; (800afd8 <HAL_RCC_OscConfig+0x7cc>)
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	4a13      	ldr	r2, [pc, #76]	; (800afd8 <HAL_RCC_OscConfig+0x7cc>)
 800af8c:	f023 0303 	bic.w	r3, r3, #3
 800af90:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800af92:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <HAL_RCC_OscConfig+0x7cc>)
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	4a10      	ldr	r2, [pc, #64]	; (800afd8 <HAL_RCC_OscConfig+0x7cc>)
 800af98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800af9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afa0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afa2:	f7fd fe79 	bl	8008c98 <HAL_GetTick>
 800afa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800afa8:	e008      	b.n	800afbc <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afaa:	f7fd fe75 	bl	8008c98 <HAL_GetTick>
 800afae:	4602      	mov	r2, r0
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d901      	bls.n	800afbc <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 800afb8:	2303      	movs	r3, #3
 800afba:	e009      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800afbc:	4b06      	ldr	r3, [pc, #24]	; (800afd8 <HAL_RCC_OscConfig+0x7cc>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1f0      	bne.n	800afaa <HAL_RCC_OscConfig+0x79e>
 800afc8:	e001      	b.n	800afce <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	e000      	b.n	800afd0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3720      	adds	r7, #32
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	40021000 	.word	0x40021000

0800afdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e0c8      	b.n	800b182 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aff0:	4b66      	ldr	r3, [pc, #408]	; (800b18c <HAL_RCC_ClockConfig+0x1b0>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0307 	and.w	r3, r3, #7
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d910      	bls.n	800b020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800affe:	4b63      	ldr	r3, [pc, #396]	; (800b18c <HAL_RCC_ClockConfig+0x1b0>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f023 0207 	bic.w	r2, r3, #7
 800b006:	4961      	ldr	r1, [pc, #388]	; (800b18c <HAL_RCC_ClockConfig+0x1b0>)
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b00e:	4b5f      	ldr	r3, [pc, #380]	; (800b18c <HAL_RCC_ClockConfig+0x1b0>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 0307 	and.w	r3, r3, #7
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d001      	beq.n	800b020 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e0b0      	b.n	800b182 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d04c      	beq.n	800b0c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	2b03      	cmp	r3, #3
 800b032:	d107      	bne.n	800b044 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b034:	4b56      	ldr	r3, [pc, #344]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d121      	bne.n	800b084 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e09e      	b.n	800b182 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d107      	bne.n	800b05c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b04c:	4b50      	ldr	r3, [pc, #320]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b054:	2b00      	cmp	r3, #0
 800b056:	d115      	bne.n	800b084 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e092      	b.n	800b182 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d107      	bne.n	800b074 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b064:	4b4a      	ldr	r3, [pc, #296]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0302 	and.w	r3, r3, #2
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d109      	bne.n	800b084 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e086      	b.n	800b182 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b074:	4b46      	ldr	r3, [pc, #280]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e07e      	b.n	800b182 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b084:	4b42      	ldr	r3, [pc, #264]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f023 0203 	bic.w	r2, r3, #3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	493f      	ldr	r1, [pc, #252]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b092:	4313      	orrs	r3, r2
 800b094:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b096:	f7fd fdff 	bl	8008c98 <HAL_GetTick>
 800b09a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b09c:	e00a      	b.n	800b0b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b09e:	f7fd fdfb 	bl	8008c98 <HAL_GetTick>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d901      	bls.n	800b0b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e066      	b.n	800b182 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0b4:	4b36      	ldr	r3, [pc, #216]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	f003 020c 	and.w	r2, r3, #12
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d1eb      	bne.n	800b09e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0302 	and.w	r3, r3, #2
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d008      	beq.n	800b0e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0d2:	4b2f      	ldr	r3, [pc, #188]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	492c      	ldr	r1, [pc, #176]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b0e4:	4b29      	ldr	r3, [pc, #164]	; (800b18c <HAL_RCC_ClockConfig+0x1b0>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d210      	bcs.n	800b114 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0f2:	4b26      	ldr	r3, [pc, #152]	; (800b18c <HAL_RCC_ClockConfig+0x1b0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f023 0207 	bic.w	r2, r3, #7
 800b0fa:	4924      	ldr	r1, [pc, #144]	; (800b18c <HAL_RCC_ClockConfig+0x1b0>)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b102:	4b22      	ldr	r3, [pc, #136]	; (800b18c <HAL_RCC_ClockConfig+0x1b0>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 0307 	and.w	r3, r3, #7
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d001      	beq.n	800b114 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e036      	b.n	800b182 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d008      	beq.n	800b132 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b120:	4b1b      	ldr	r3, [pc, #108]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	4918      	ldr	r1, [pc, #96]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b12e:	4313      	orrs	r3, r2
 800b130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 0308 	and.w	r3, r3, #8
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d009      	beq.n	800b152 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b13e:	4b14      	ldr	r3, [pc, #80]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	00db      	lsls	r3, r3, #3
 800b14c:	4910      	ldr	r1, [pc, #64]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b152:	f000 f825 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800b156:	4602      	mov	r2, r0
 800b158:	4b0d      	ldr	r3, [pc, #52]	; (800b190 <HAL_RCC_ClockConfig+0x1b4>)
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	091b      	lsrs	r3, r3, #4
 800b15e:	f003 030f 	and.w	r3, r3, #15
 800b162:	490c      	ldr	r1, [pc, #48]	; (800b194 <HAL_RCC_ClockConfig+0x1b8>)
 800b164:	5ccb      	ldrb	r3, [r1, r3]
 800b166:	f003 031f 	and.w	r3, r3, #31
 800b16a:	fa22 f303 	lsr.w	r3, r2, r3
 800b16e:	4a0a      	ldr	r2, [pc, #40]	; (800b198 <HAL_RCC_ClockConfig+0x1bc>)
 800b170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b172:	4b0a      	ldr	r3, [pc, #40]	; (800b19c <HAL_RCC_ClockConfig+0x1c0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4618      	mov	r0, r3
 800b178:	f7fd fd3e 	bl	8008bf8 <HAL_InitTick>
 800b17c:	4603      	mov	r3, r0
 800b17e:	72fb      	strb	r3, [r7, #11]

  return status;
 800b180:	7afb      	ldrb	r3, [r7, #11]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	40022000 	.word	0x40022000
 800b190:	40021000 	.word	0x40021000
 800b194:	0801deb8 	.word	0x0801deb8
 800b198:	2000135c 	.word	0x2000135c
 800b19c:	2000133c 	.word	0x2000133c

0800b1a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b089      	sub	sp, #36	; 0x24
 800b1a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	61fb      	str	r3, [r7, #28]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1ae:	4b3e      	ldr	r3, [pc, #248]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f003 030c 	and.w	r3, r3, #12
 800b1b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1b8:	4b3b      	ldr	r3, [pc, #236]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	f003 0303 	and.w	r3, r3, #3
 800b1c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <HAL_RCC_GetSysClockFreq+0x34>
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	2b0c      	cmp	r3, #12
 800b1cc:	d121      	bne.n	800b212 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d11e      	bne.n	800b212 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b1d4:	4b34      	ldr	r3, [pc, #208]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0308 	and.w	r3, r3, #8
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d107      	bne.n	800b1f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b1e0:	4b31      	ldr	r3, [pc, #196]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b1e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1e6:	0a1b      	lsrs	r3, r3, #8
 800b1e8:	f003 030f 	and.w	r3, r3, #15
 800b1ec:	61fb      	str	r3, [r7, #28]
 800b1ee:	e005      	b.n	800b1fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b1f0:	4b2d      	ldr	r3, [pc, #180]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	091b      	lsrs	r3, r3, #4
 800b1f6:	f003 030f 	and.w	r3, r3, #15
 800b1fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b1fc:	4a2b      	ldr	r2, [pc, #172]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b204:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10d      	bne.n	800b228 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b210:	e00a      	b.n	800b228 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	2b04      	cmp	r3, #4
 800b216:	d102      	bne.n	800b21e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b218:	4b25      	ldr	r3, [pc, #148]	; (800b2b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800b21a:	61bb      	str	r3, [r7, #24]
 800b21c:	e004      	b.n	800b228 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2b08      	cmp	r3, #8
 800b222:	d101      	bne.n	800b228 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b224:	4b23      	ldr	r3, [pc, #140]	; (800b2b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800b226:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b0c      	cmp	r3, #12
 800b22c:	d134      	bne.n	800b298 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b22e:	4b1e      	ldr	r3, [pc, #120]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	f003 0303 	and.w	r3, r3, #3
 800b236:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d003      	beq.n	800b246 <HAL_RCC_GetSysClockFreq+0xa6>
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2b03      	cmp	r3, #3
 800b242:	d003      	beq.n	800b24c <HAL_RCC_GetSysClockFreq+0xac>
 800b244:	e005      	b.n	800b252 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b246:	4b1a      	ldr	r3, [pc, #104]	; (800b2b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800b248:	617b      	str	r3, [r7, #20]
      break;
 800b24a:	e005      	b.n	800b258 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b24c:	4b19      	ldr	r3, [pc, #100]	; (800b2b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800b24e:	617b      	str	r3, [r7, #20]
      break;
 800b250:	e002      	b.n	800b258 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	617b      	str	r3, [r7, #20]
      break;
 800b256:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b258:	4b13      	ldr	r3, [pc, #76]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	091b      	lsrs	r3, r3, #4
 800b25e:	f003 0307 	and.w	r3, r3, #7
 800b262:	3301      	adds	r3, #1
 800b264:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b266:	4b10      	ldr	r3, [pc, #64]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	0a1b      	lsrs	r3, r3, #8
 800b26c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b270:	697a      	ldr	r2, [r7, #20]
 800b272:	fb03 f202 	mul.w	r2, r3, r2
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b27e:	4b0a      	ldr	r3, [pc, #40]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	0e5b      	lsrs	r3, r3, #25
 800b284:	f003 0303 	and.w	r3, r3, #3
 800b288:	3301      	adds	r3, #1
 800b28a:	005b      	lsls	r3, r3, #1
 800b28c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	fbb2 f3f3 	udiv	r3, r2, r3
 800b296:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b298:	69bb      	ldr	r3, [r7, #24]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3724      	adds	r7, #36	; 0x24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	40021000 	.word	0x40021000
 800b2ac:	0801ded0 	.word	0x0801ded0
 800b2b0:	00f42400 	.word	0x00f42400
 800b2b4:	007a1200 	.word	0x007a1200

0800b2b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2bc:	4b03      	ldr	r3, [pc, #12]	; (800b2cc <HAL_RCC_GetHCLKFreq+0x14>)
 800b2be:	681b      	ldr	r3, [r3, #0]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	2000135c 	.word	0x2000135c

0800b2d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b2d4:	f7ff fff0 	bl	800b2b8 <HAL_RCC_GetHCLKFreq>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	4b06      	ldr	r3, [pc, #24]	; (800b2f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	0a1b      	lsrs	r3, r3, #8
 800b2e0:	f003 0307 	and.w	r3, r3, #7
 800b2e4:	4904      	ldr	r1, [pc, #16]	; (800b2f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b2e6:	5ccb      	ldrb	r3, [r1, r3]
 800b2e8:	f003 031f 	and.w	r3, r3, #31
 800b2ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	40021000 	.word	0x40021000
 800b2f8:	0801dec8 	.word	0x0801dec8

0800b2fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b300:	f7ff ffda 	bl	800b2b8 <HAL_RCC_GetHCLKFreq>
 800b304:	4602      	mov	r2, r0
 800b306:	4b06      	ldr	r3, [pc, #24]	; (800b320 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	0adb      	lsrs	r3, r3, #11
 800b30c:	f003 0307 	and.w	r3, r3, #7
 800b310:	4904      	ldr	r1, [pc, #16]	; (800b324 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b312:	5ccb      	ldrb	r3, [r1, r3]
 800b314:	f003 031f 	and.w	r3, r3, #31
 800b318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	40021000 	.word	0x40021000
 800b324:	0801dec8 	.word	0x0801dec8

0800b328 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b330:	2300      	movs	r3, #0
 800b332:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b334:	4b2a      	ldr	r3, [pc, #168]	; (800b3e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b340:	f7ff fa00 	bl	800a744 <HAL_PWREx_GetVoltageRange>
 800b344:	6178      	str	r0, [r7, #20]
 800b346:	e014      	b.n	800b372 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b348:	4b25      	ldr	r3, [pc, #148]	; (800b3e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b34a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b34c:	4a24      	ldr	r2, [pc, #144]	; (800b3e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b34e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b352:	6593      	str	r3, [r2, #88]	; 0x58
 800b354:	4b22      	ldr	r3, [pc, #136]	; (800b3e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b360:	f7ff f9f0 	bl	800a744 <HAL_PWREx_GetVoltageRange>
 800b364:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b366:	4b1e      	ldr	r3, [pc, #120]	; (800b3e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36a:	4a1d      	ldr	r2, [pc, #116]	; (800b3e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b36c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b370:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b378:	d10b      	bne.n	800b392 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b80      	cmp	r3, #128	; 0x80
 800b37e:	d919      	bls.n	800b3b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2ba0      	cmp	r3, #160	; 0xa0
 800b384:	d902      	bls.n	800b38c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b386:	2302      	movs	r3, #2
 800b388:	613b      	str	r3, [r7, #16]
 800b38a:	e013      	b.n	800b3b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b38c:	2301      	movs	r3, #1
 800b38e:	613b      	str	r3, [r7, #16]
 800b390:	e010      	b.n	800b3b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b80      	cmp	r3, #128	; 0x80
 800b396:	d902      	bls.n	800b39e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b398:	2303      	movs	r3, #3
 800b39a:	613b      	str	r3, [r7, #16]
 800b39c:	e00a      	b.n	800b3b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b80      	cmp	r3, #128	; 0x80
 800b3a2:	d102      	bne.n	800b3aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	613b      	str	r3, [r7, #16]
 800b3a8:	e004      	b.n	800b3b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b70      	cmp	r3, #112	; 0x70
 800b3ae:	d101      	bne.n	800b3b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b3b4:	4b0b      	ldr	r3, [pc, #44]	; (800b3e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f023 0207 	bic.w	r2, r3, #7
 800b3bc:	4909      	ldr	r1, [pc, #36]	; (800b3e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b3c4:	4b07      	ldr	r3, [pc, #28]	; (800b3e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0307 	and.w	r3, r3, #7
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d001      	beq.n	800b3d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e000      	b.n	800b3d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	40021000 	.word	0x40021000
 800b3e4:	40022000 	.word	0x40022000

0800b3e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b400:	2b00      	cmp	r3, #0
 800b402:	d041      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b408:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b40c:	d02a      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b40e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b412:	d824      	bhi.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b414:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b418:	d008      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b41a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b41e:	d81e      	bhi.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00a      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b428:	d010      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b42a:	e018      	b.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b42c:	4b86      	ldr	r3, [pc, #536]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	4a85      	ldr	r2, [pc, #532]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b436:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b438:	e015      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3304      	adds	r3, #4
 800b43e:	2100      	movs	r1, #0
 800b440:	4618      	mov	r0, r3
 800b442:	f000 fabb 	bl	800b9bc <RCCEx_PLLSAI1_Config>
 800b446:	4603      	mov	r3, r0
 800b448:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b44a:	e00c      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3320      	adds	r3, #32
 800b450:	2100      	movs	r1, #0
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fba6 	bl	800bba4 <RCCEx_PLLSAI2_Config>
 800b458:	4603      	mov	r3, r0
 800b45a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b45c:	e003      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	74fb      	strb	r3, [r7, #19]
      break;
 800b462:	e000      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b464:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b466:	7cfb      	ldrb	r3, [r7, #19]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10b      	bne.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b46c:	4b76      	ldr	r3, [pc, #472]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b472:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b47a:	4973      	ldr	r1, [pc, #460]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b47c:	4313      	orrs	r3, r2
 800b47e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b482:	e001      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b484:	7cfb      	ldrb	r3, [r7, #19]
 800b486:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d041      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b498:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b49c:	d02a      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b49e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b4a2:	d824      	bhi.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b4a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4a8:	d008      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b4aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ae:	d81e      	bhi.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00a      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b4b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b4b8:	d010      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b4ba:	e018      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b4bc:	4b62      	ldr	r3, [pc, #392]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	4a61      	ldr	r2, [pc, #388]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b4c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b4c8:	e015      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f000 fa73 	bl	800b9bc <RCCEx_PLLSAI1_Config>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b4da:	e00c      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3320      	adds	r3, #32
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 fb5e 	bl	800bba4 <RCCEx_PLLSAI2_Config>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b4ec:	e003      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	74fb      	strb	r3, [r7, #19]
      break;
 800b4f2:	e000      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b4f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4f6:	7cfb      	ldrb	r3, [r7, #19]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10b      	bne.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b4fc:	4b52      	ldr	r3, [pc, #328]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b502:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b50a:	494f      	ldr	r1, [pc, #316]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b50c:	4313      	orrs	r3, r2
 800b50e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b512:	e001      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b514:	7cfb      	ldrb	r3, [r7, #19]
 800b516:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 80a0 	beq.w	800b666 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b526:	2300      	movs	r3, #0
 800b528:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b52a:	4b47      	ldr	r3, [pc, #284]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b536:	2301      	movs	r3, #1
 800b538:	e000      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b53a:	2300      	movs	r3, #0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00d      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b540:	4b41      	ldr	r3, [pc, #260]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b544:	4a40      	ldr	r2, [pc, #256]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b54a:	6593      	str	r3, [r2, #88]	; 0x58
 800b54c:	4b3e      	ldr	r3, [pc, #248]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b554:	60bb      	str	r3, [r7, #8]
 800b556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b558:	2301      	movs	r3, #1
 800b55a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b55c:	4b3b      	ldr	r3, [pc, #236]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a3a      	ldr	r2, [pc, #232]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b568:	f7fd fb96 	bl	8008c98 <HAL_GetTick>
 800b56c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b56e:	e009      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b570:	f7fd fb92 	bl	8008c98 <HAL_GetTick>
 800b574:	4602      	mov	r2, r0
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d902      	bls.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b57e:	2303      	movs	r3, #3
 800b580:	74fb      	strb	r3, [r7, #19]
        break;
 800b582:	e005      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b584:	4b31      	ldr	r3, [pc, #196]	; (800b64c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d0ef      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b590:	7cfb      	ldrb	r3, [r7, #19]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d15c      	bne.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b596:	4b2c      	ldr	r3, [pc, #176]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d01f      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d019      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b5b4:	4b24      	ldr	r3, [pc, #144]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b5c0:	4b21      	ldr	r3, [pc, #132]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c6:	4a20      	ldr	r2, [pc, #128]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b5d0:	4b1d      	ldr	r3, [pc, #116]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5d6:	4a1c      	ldr	r2, [pc, #112]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b5e0:	4a19      	ldr	r2, [pc, #100]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d016      	beq.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5f2:	f7fd fb51 	bl	8008c98 <HAL_GetTick>
 800b5f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5f8:	e00b      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5fa:	f7fd fb4d 	bl	8008c98 <HAL_GetTick>
 800b5fe:	4602      	mov	r2, r0
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	f241 3288 	movw	r2, #5000	; 0x1388
 800b608:	4293      	cmp	r3, r2
 800b60a:	d902      	bls.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b60c:	2303      	movs	r3, #3
 800b60e:	74fb      	strb	r3, [r7, #19]
            break;
 800b610:	e006      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b612:	4b0d      	ldr	r3, [pc, #52]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b618:	f003 0302 	and.w	r3, r3, #2
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d0ec      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b620:	7cfb      	ldrb	r3, [r7, #19]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10c      	bne.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b626:	4b08      	ldr	r3, [pc, #32]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b62c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b636:	4904      	ldr	r1, [pc, #16]	; (800b648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b638:	4313      	orrs	r3, r2
 800b63a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b63e:	e009      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b640:	7cfb      	ldrb	r3, [r7, #19]
 800b642:	74bb      	strb	r3, [r7, #18]
 800b644:	e006      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b646:	bf00      	nop
 800b648:	40021000 	.word	0x40021000
 800b64c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b650:	7cfb      	ldrb	r3, [r7, #19]
 800b652:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b654:	7c7b      	ldrb	r3, [r7, #17]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d105      	bne.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b65a:	4b9e      	ldr	r3, [pc, #632]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b65c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b65e:	4a9d      	ldr	r2, [pc, #628]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b664:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00a      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b672:	4b98      	ldr	r3, [pc, #608]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b678:	f023 0203 	bic.w	r2, r3, #3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b680:	4994      	ldr	r1, [pc, #592]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b682:	4313      	orrs	r3, r2
 800b684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 0302 	and.w	r3, r3, #2
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00a      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b694:	4b8f      	ldr	r3, [pc, #572]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b69a:	f023 020c 	bic.w	r2, r3, #12
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a2:	498c      	ldr	r1, [pc, #560]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 0304 	and.w	r3, r3, #4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b6b6:	4b87      	ldr	r3, [pc, #540]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c4:	4983      	ldr	r1, [pc, #524]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0308 	and.w	r3, r3, #8
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00a      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b6d8:	4b7e      	ldr	r3, [pc, #504]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e6:	497b      	ldr	r1, [pc, #492]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 0310 	and.w	r3, r3, #16
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b6fa:	4b76      	ldr	r3, [pc, #472]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b708:	4972      	ldr	r1, [pc, #456]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b70a:	4313      	orrs	r3, r2
 800b70c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 0320 	and.w	r3, r3, #32
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00a      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b71c:	4b6d      	ldr	r3, [pc, #436]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b722:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b72a:	496a      	ldr	r1, [pc, #424]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b72c:	4313      	orrs	r3, r2
 800b72e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00a      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b73e:	4b65      	ldr	r3, [pc, #404]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b744:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74c:	4961      	ldr	r1, [pc, #388]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b74e:	4313      	orrs	r3, r2
 800b750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00a      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b760:	4b5c      	ldr	r3, [pc, #368]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b766:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b76e:	4959      	ldr	r1, [pc, #356]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b770:	4313      	orrs	r3, r2
 800b772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00a      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b782:	4b54      	ldr	r3, [pc, #336]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b788:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b790:	4950      	ldr	r1, [pc, #320]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b792:	4313      	orrs	r3, r2
 800b794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00a      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b7a4:	4b4b      	ldr	r3, [pc, #300]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7b2:	4948      	ldr	r1, [pc, #288]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00a      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b7c6:	4b43      	ldr	r3, [pc, #268]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7d4:	493f      	ldr	r1, [pc, #252]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d028      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b7e8:	4b3a      	ldr	r3, [pc, #232]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7f6:	4937      	ldr	r1, [pc, #220]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b806:	d106      	bne.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b808:	4b32      	ldr	r3, [pc, #200]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	4a31      	ldr	r2, [pc, #196]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b80e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b812:	60d3      	str	r3, [r2, #12]
 800b814:	e011      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b81a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b81e:	d10c      	bne.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3304      	adds	r3, #4
 800b824:	2101      	movs	r1, #1
 800b826:	4618      	mov	r0, r3
 800b828:	f000 f8c8 	bl	800b9bc <RCCEx_PLLSAI1_Config>
 800b82c:	4603      	mov	r3, r0
 800b82e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b830:	7cfb      	ldrb	r3, [r7, #19]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800b836:	7cfb      	ldrb	r3, [r7, #19]
 800b838:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b842:	2b00      	cmp	r3, #0
 800b844:	d028      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b846:	4b23      	ldr	r3, [pc, #140]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b84c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b854:	491f      	ldr	r1, [pc, #124]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b856:	4313      	orrs	r3, r2
 800b858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b864:	d106      	bne.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b866:	4b1b      	ldr	r3, [pc, #108]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	4a1a      	ldr	r2, [pc, #104]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b86c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b870:	60d3      	str	r3, [r2, #12]
 800b872:	e011      	b.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b87c:	d10c      	bne.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	3304      	adds	r3, #4
 800b882:	2101      	movs	r1, #1
 800b884:	4618      	mov	r0, r3
 800b886:	f000 f899 	bl	800b9bc <RCCEx_PLLSAI1_Config>
 800b88a:	4603      	mov	r3, r0
 800b88c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b88e:	7cfb      	ldrb	r3, [r7, #19]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800b894:	7cfb      	ldrb	r3, [r7, #19]
 800b896:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d02b      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8a4:	4b0b      	ldr	r3, [pc, #44]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b2:	4908      	ldr	r1, [pc, #32]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8c2:	d109      	bne.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8c4:	4b03      	ldr	r3, [pc, #12]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	4a02      	ldr	r2, [pc, #8]	; (800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8ce:	60d3      	str	r3, [r2, #12]
 800b8d0:	e014      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800b8d2:	bf00      	nop
 800b8d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8e0:	d10c      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f000 f867 	bl	800b9bc <RCCEx_PLLSAI1_Config>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b8f2:	7cfb      	ldrb	r3, [r7, #19]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d001      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800b8f8:	7cfb      	ldrb	r3, [r7, #19]
 800b8fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d02f      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b908:	4b2b      	ldr	r3, [pc, #172]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b90e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b916:	4928      	ldr	r1, [pc, #160]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b926:	d10d      	bne.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	3304      	adds	r3, #4
 800b92c:	2102      	movs	r1, #2
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 f844 	bl	800b9bc <RCCEx_PLLSAI1_Config>
 800b934:	4603      	mov	r3, r0
 800b936:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b938:	7cfb      	ldrb	r3, [r7, #19]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d014      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b93e:	7cfb      	ldrb	r3, [r7, #19]
 800b940:	74bb      	strb	r3, [r7, #18]
 800b942:	e011      	b.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b94c:	d10c      	bne.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3320      	adds	r3, #32
 800b952:	2102      	movs	r1, #2
 800b954:	4618      	mov	r0, r3
 800b956:	f000 f925 	bl	800bba4 <RCCEx_PLLSAI2_Config>
 800b95a:	4603      	mov	r3, r0
 800b95c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b95e:	7cfb      	ldrb	r3, [r7, #19]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b964:	7cfb      	ldrb	r3, [r7, #19]
 800b966:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b974:	4b10      	ldr	r3, [pc, #64]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b97a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b982:	490d      	ldr	r1, [pc, #52]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b984:	4313      	orrs	r3, r2
 800b986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00b      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b996:	4b08      	ldr	r3, [pc, #32]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b99c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9a6:	4904      	ldr	r1, [pc, #16]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b9ae:	7cbb      	ldrb	r3, [r7, #18]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3718      	adds	r7, #24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	40021000 	.word	0x40021000

0800b9bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b9ca:	4b75      	ldr	r3, [pc, #468]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	f003 0303 	and.w	r3, r3, #3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d018      	beq.n	800ba08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b9d6:	4b72      	ldr	r3, [pc, #456]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	f003 0203 	and.w	r2, r3, #3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d10d      	bne.n	800ba02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
       ||
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d009      	beq.n	800ba02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b9ee:	4b6c      	ldr	r3, [pc, #432]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	091b      	lsrs	r3, r3, #4
 800b9f4:	f003 0307 	and.w	r3, r3, #7
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685b      	ldr	r3, [r3, #4]
       ||
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d047      	beq.n	800ba92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	73fb      	strb	r3, [r7, #15]
 800ba06:	e044      	b.n	800ba92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d018      	beq.n	800ba42 <RCCEx_PLLSAI1_Config+0x86>
 800ba10:	2b03      	cmp	r3, #3
 800ba12:	d825      	bhi.n	800ba60 <RCCEx_PLLSAI1_Config+0xa4>
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d002      	beq.n	800ba1e <RCCEx_PLLSAI1_Config+0x62>
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d009      	beq.n	800ba30 <RCCEx_PLLSAI1_Config+0x74>
 800ba1c:	e020      	b.n	800ba60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ba1e:	4b60      	ldr	r3, [pc, #384]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d11d      	bne.n	800ba66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba2e:	e01a      	b.n	800ba66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ba30:	4b5b      	ldr	r3, [pc, #364]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d116      	bne.n	800ba6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba40:	e013      	b.n	800ba6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ba42:	4b57      	ldr	r3, [pc, #348]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10f      	bne.n	800ba6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ba4e:	4b54      	ldr	r3, [pc, #336]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d109      	bne.n	800ba6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba5e:	e006      	b.n	800ba6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	73fb      	strb	r3, [r7, #15]
      break;
 800ba64:	e004      	b.n	800ba70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ba66:	bf00      	nop
 800ba68:	e002      	b.n	800ba70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ba6a:	bf00      	nop
 800ba6c:	e000      	b.n	800ba70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ba6e:	bf00      	nop
    }

    if(status == HAL_OK)
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10d      	bne.n	800ba92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ba76:	4b4a      	ldr	r3, [pc, #296]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6819      	ldr	r1, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	011b      	lsls	r3, r3, #4
 800ba8a:	430b      	orrs	r3, r1
 800ba8c:	4944      	ldr	r1, [pc, #272]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d17d      	bne.n	800bb94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ba98:	4b41      	ldr	r3, [pc, #260]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a40      	ldr	r2, [pc, #256]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ba9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800baa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baa4:	f7fd f8f8 	bl	8008c98 <HAL_GetTick>
 800baa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800baaa:	e009      	b.n	800bac0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800baac:	f7fd f8f4 	bl	8008c98 <HAL_GetTick>
 800bab0:	4602      	mov	r2, r0
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d902      	bls.n	800bac0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	73fb      	strb	r3, [r7, #15]
        break;
 800babe:	e005      	b.n	800bacc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bac0:	4b37      	ldr	r3, [pc, #220]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1ef      	bne.n	800baac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d160      	bne.n	800bb94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d111      	bne.n	800bafc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bad8:	4b31      	ldr	r3, [pc, #196]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800bae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	6892      	ldr	r2, [r2, #8]
 800bae8:	0211      	lsls	r1, r2, #8
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	68d2      	ldr	r2, [r2, #12]
 800baee:	0912      	lsrs	r2, r2, #4
 800baf0:	0452      	lsls	r2, r2, #17
 800baf2:	430a      	orrs	r2, r1
 800baf4:	492a      	ldr	r1, [pc, #168]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800baf6:	4313      	orrs	r3, r2
 800baf8:	610b      	str	r3, [r1, #16]
 800bafa:	e027      	b.n	800bb4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d112      	bne.n	800bb28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb02:	4b27      	ldr	r3, [pc, #156]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bb0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	6892      	ldr	r2, [r2, #8]
 800bb12:	0211      	lsls	r1, r2, #8
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	6912      	ldr	r2, [r2, #16]
 800bb18:	0852      	lsrs	r2, r2, #1
 800bb1a:	3a01      	subs	r2, #1
 800bb1c:	0552      	lsls	r2, r2, #21
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	491f      	ldr	r1, [pc, #124]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bb22:	4313      	orrs	r3, r2
 800bb24:	610b      	str	r3, [r1, #16]
 800bb26:	e011      	b.n	800bb4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb28:	4b1d      	ldr	r3, [pc, #116]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bb30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	6892      	ldr	r2, [r2, #8]
 800bb38:	0211      	lsls	r1, r2, #8
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	6952      	ldr	r2, [r2, #20]
 800bb3e:	0852      	lsrs	r2, r2, #1
 800bb40:	3a01      	subs	r2, #1
 800bb42:	0652      	lsls	r2, r2, #25
 800bb44:	430a      	orrs	r2, r1
 800bb46:	4916      	ldr	r1, [pc, #88]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800bb4c:	4b14      	ldr	r3, [pc, #80]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a13      	ldr	r2, [pc, #76]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bb52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb58:	f7fd f89e 	bl	8008c98 <HAL_GetTick>
 800bb5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bb5e:	e009      	b.n	800bb74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb60:	f7fd f89a 	bl	8008c98 <HAL_GetTick>
 800bb64:	4602      	mov	r2, r0
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d902      	bls.n	800bb74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	73fb      	strb	r3, [r7, #15]
          break;
 800bb72:	e005      	b.n	800bb80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bb74:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0ef      	beq.n	800bb60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d106      	bne.n	800bb94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bb86:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bb88:	691a      	ldr	r2, [r3, #16]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	4904      	ldr	r1, [pc, #16]	; (800bba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	40021000 	.word	0x40021000

0800bba4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bbb2:	4b6a      	ldr	r3, [pc, #424]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	f003 0303 	and.w	r3, r3, #3
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d018      	beq.n	800bbf0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800bbbe:	4b67      	ldr	r3, [pc, #412]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	f003 0203 	and.w	r2, r3, #3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d10d      	bne.n	800bbea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
       ||
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d009      	beq.n	800bbea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800bbd6:	4b61      	ldr	r3, [pc, #388]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	091b      	lsrs	r3, r3, #4
 800bbdc:	f003 0307 	and.w	r3, r3, #7
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	685b      	ldr	r3, [r3, #4]
       ||
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d047      	beq.n	800bc7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	73fb      	strb	r3, [r7, #15]
 800bbee:	e044      	b.n	800bc7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	d018      	beq.n	800bc2a <RCCEx_PLLSAI2_Config+0x86>
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d825      	bhi.n	800bc48 <RCCEx_PLLSAI2_Config+0xa4>
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d002      	beq.n	800bc06 <RCCEx_PLLSAI2_Config+0x62>
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d009      	beq.n	800bc18 <RCCEx_PLLSAI2_Config+0x74>
 800bc04:	e020      	b.n	800bc48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800bc06:	4b55      	ldr	r3, [pc, #340]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f003 0302 	and.w	r3, r3, #2
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d11d      	bne.n	800bc4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc16:	e01a      	b.n	800bc4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800bc18:	4b50      	ldr	r3, [pc, #320]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d116      	bne.n	800bc52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc28:	e013      	b.n	800bc52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bc2a:	4b4c      	ldr	r3, [pc, #304]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d10f      	bne.n	800bc56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bc36:	4b49      	ldr	r3, [pc, #292]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d109      	bne.n	800bc56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bc46:	e006      	b.n	800bc56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc4c:	e004      	b.n	800bc58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800bc4e:	bf00      	nop
 800bc50:	e002      	b.n	800bc58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800bc52:	bf00      	nop
 800bc54:	e000      	b.n	800bc58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800bc56:	bf00      	nop
    }

    if(status == HAL_OK)
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10d      	bne.n	800bc7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800bc5e:	4b3f      	ldr	r3, [pc, #252]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6819      	ldr	r1, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	011b      	lsls	r3, r3, #4
 800bc72:	430b      	orrs	r3, r1
 800bc74:	4939      	ldr	r1, [pc, #228]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bc76:	4313      	orrs	r3, r2
 800bc78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d167      	bne.n	800bd50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800bc80:	4b36      	ldr	r3, [pc, #216]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a35      	ldr	r2, [pc, #212]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bc86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc8c:	f7fd f804 	bl	8008c98 <HAL_GetTick>
 800bc90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bc92:	e009      	b.n	800bca8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bc94:	f7fd f800 	bl	8008c98 <HAL_GetTick>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d902      	bls.n	800bca8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	73fb      	strb	r3, [r7, #15]
        break;
 800bca6:	e005      	b.n	800bcb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bca8:	4b2c      	ldr	r3, [pc, #176]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1ef      	bne.n	800bc94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d14a      	bne.n	800bd50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d111      	bne.n	800bce4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bcc0:	4b26      	ldr	r3, [pc, #152]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800bcc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	6892      	ldr	r2, [r2, #8]
 800bcd0:	0211      	lsls	r1, r2, #8
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	68d2      	ldr	r2, [r2, #12]
 800bcd6:	0912      	lsrs	r2, r2, #4
 800bcd8:	0452      	lsls	r2, r2, #17
 800bcda:	430a      	orrs	r2, r1
 800bcdc:	491f      	ldr	r1, [pc, #124]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bcde:	4313      	orrs	r3, r2
 800bce0:	614b      	str	r3, [r1, #20]
 800bce2:	e011      	b.n	800bd08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bce4:	4b1d      	ldr	r3, [pc, #116]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bcec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	6892      	ldr	r2, [r2, #8]
 800bcf4:	0211      	lsls	r1, r2, #8
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	6912      	ldr	r2, [r2, #16]
 800bcfa:	0852      	lsrs	r2, r2, #1
 800bcfc:	3a01      	subs	r2, #1
 800bcfe:	0652      	lsls	r2, r2, #25
 800bd00:	430a      	orrs	r2, r1
 800bd02:	4916      	ldr	r1, [pc, #88]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bd04:	4313      	orrs	r3, r2
 800bd06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800bd08:	4b14      	ldr	r3, [pc, #80]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a13      	ldr	r2, [pc, #76]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bd0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd14:	f7fc ffc0 	bl	8008c98 <HAL_GetTick>
 800bd18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bd1a:	e009      	b.n	800bd30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bd1c:	f7fc ffbc 	bl	8008c98 <HAL_GetTick>
 800bd20:	4602      	mov	r2, r0
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d902      	bls.n	800bd30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	73fb      	strb	r3, [r7, #15]
          break;
 800bd2e:	e005      	b.n	800bd3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bd30:	4b0a      	ldr	r3, [pc, #40]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d0ef      	beq.n	800bd1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d106      	bne.n	800bd50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800bd42:	4b06      	ldr	r3, [pc, #24]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bd44:	695a      	ldr	r2, [r3, #20]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	4904      	ldr	r1, [pc, #16]	; (800bd5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	40021000 	.word	0x40021000

0800bd60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d06c      	beq.n	800be4c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d106      	bne.n	800bd8c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f004 f892 	bl	800feb0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2202      	movs	r2, #2
 800bd90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	22ca      	movs	r2, #202	; 0xca
 800bd9a:	625a      	str	r2, [r3, #36]	; 0x24
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2253      	movs	r2, #83	; 0x53
 800bda2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fa49 	bl	800c23c <RTC_EnterInitMode>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d14b      	bne.n	800be4c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	6812      	ldr	r2, [r2, #0]
 800bdbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bdc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdc6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6899      	ldr	r1, [r3, #8]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685a      	ldr	r2, [r3, #4]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	431a      	orrs	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	699b      	ldr	r3, [r3, #24]
 800bddc:	431a      	orrs	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	68d2      	ldr	r2, [r2, #12]
 800bdee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6919      	ldr	r1, [r3, #16]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	041a      	lsls	r2, r3, #16
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fa4d 	bl	800c2a4 <RTC_ExitInitMode>
 800be0a:	4603      	mov	r3, r0
 800be0c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d11b      	bne.n	800be4c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f022 0203 	bic.w	r2, r2, #3
 800be22:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	69da      	ldr	r2, [r3, #28]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	431a      	orrs	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	430a      	orrs	r2, r1
 800be3a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	22ff      	movs	r2, #255	; 0xff
 800be42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2201      	movs	r2, #1
 800be48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be56:	b590      	push	{r4, r7, lr}
 800be58:	b087      	sub	sp, #28
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	60b9      	str	r1, [r7, #8]
 800be60:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d101      	bne.n	800be70 <HAL_RTC_SetTime+0x1a>
 800be6c:	2302      	movs	r3, #2
 800be6e:	e08b      	b.n	800bf88 <HAL_RTC_SetTime+0x132>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2202      	movs	r2, #2
 800be7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	22ca      	movs	r2, #202	; 0xca
 800be86:	625a      	str	r2, [r3, #36]	; 0x24
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2253      	movs	r2, #83	; 0x53
 800be8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 f9d3 	bl	800c23c <RTC_EnterInitMode>
 800be96:	4603      	mov	r3, r0
 800be98:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800be9a:	7cfb      	ldrb	r3, [r7, #19]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d163      	bne.n	800bf68 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d126      	bne.n	800bef4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d102      	bne.n	800beba <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2200      	movs	r2, #0
 800beb8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 fa2e 	bl	800c320 <RTC_ByteToBcd2>
 800bec4:	4603      	mov	r3, r0
 800bec6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	785b      	ldrb	r3, [r3, #1]
 800becc:	4618      	mov	r0, r3
 800bece:	f000 fa27 	bl	800c320 <RTC_ByteToBcd2>
 800bed2:	4603      	mov	r3, r0
 800bed4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bed6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	789b      	ldrb	r3, [r3, #2]
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 fa1f 	bl	800c320 <RTC_ByteToBcd2>
 800bee2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bee4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	78db      	ldrb	r3, [r3, #3]
 800beec:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800beee:	4313      	orrs	r3, r2
 800bef0:	617b      	str	r3, [r7, #20]
 800bef2:	e018      	b.n	800bf26 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d102      	bne.n	800bf08 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2200      	movs	r2, #0
 800bf06:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	785b      	ldrb	r3, [r3, #1]
 800bf12:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf14:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bf1a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	78db      	ldrb	r3, [r3, #3]
 800bf20:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf22:	4313      	orrs	r3, r2
 800bf24:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bf30:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bf34:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bf44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6899      	ldr	r1, [r3, #8]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	68da      	ldr	r2, [r3, #12]
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	431a      	orrs	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f000 f9a0 	bl	800c2a4 <RTC_ExitInitMode>
 800bf64:	4603      	mov	r3, r0
 800bf66:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	22ff      	movs	r2, #255	; 0xff
 800bf6e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800bf70:	7cfb      	ldrb	r3, [r7, #19]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d103      	bne.n	800bf7e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800bf86:	7cfb      	ldrb	r3, [r7, #19]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	371c      	adds	r7, #28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd90      	pop	{r4, r7, pc}

0800bf90 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bfbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bfc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	0c1b      	lsrs	r3, r3, #16
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	0a1b      	lsrs	r3, r3, #8
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	0d9b      	lsrs	r3, r3, #22
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d11a      	bne.n	800c03e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 f9a7 	bl	800c360 <RTC_Bcd2ToByte>
 800c012:	4603      	mov	r3, r0
 800c014:	461a      	mov	r2, r3
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	785b      	ldrb	r3, [r3, #1]
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 f99e 	bl	800c360 <RTC_Bcd2ToByte>
 800c024:	4603      	mov	r3, r0
 800c026:	461a      	mov	r2, r3
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	789b      	ldrb	r3, [r3, #2]
 800c030:	4618      	mov	r0, r3
 800c032:	f000 f995 	bl	800c360 <RTC_Bcd2ToByte>
 800c036:	4603      	mov	r3, r0
 800c038:	461a      	mov	r2, r3
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c048:	b590      	push	{r4, r7, lr}
 800c04a:	b087      	sub	sp, #28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d101      	bne.n	800c062 <HAL_RTC_SetDate+0x1a>
 800c05e:	2302      	movs	r3, #2
 800c060:	e075      	b.n	800c14e <HAL_RTC_SetDate+0x106>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2202      	movs	r2, #2
 800c06e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10e      	bne.n	800c096 <HAL_RTC_SetDate+0x4e>
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	785b      	ldrb	r3, [r3, #1]
 800c07c:	f003 0310 	and.w	r3, r3, #16
 800c080:	2b00      	cmp	r3, #0
 800c082:	d008      	beq.n	800c096 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	785b      	ldrb	r3, [r3, #1]
 800c088:	f023 0310 	bic.w	r3, r3, #16
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	330a      	adds	r3, #10
 800c090:	b2da      	uxtb	r2, r3
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d11c      	bne.n	800c0d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	78db      	ldrb	r3, [r3, #3]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f000 f93d 	bl	800c320 <RTC_ByteToBcd2>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	785b      	ldrb	r3, [r3, #1]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 f936 	bl	800c320 <RTC_ByteToBcd2>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c0b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	789b      	ldrb	r3, [r3, #2]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f000 f92e 	bl	800c320 <RTC_ByteToBcd2>
 800c0c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c0c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	e00e      	b.n	800c0f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	78db      	ldrb	r3, [r3, #3]
 800c0da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	785b      	ldrb	r3, [r3, #1]
 800c0e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c0e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	22ca      	movs	r2, #202	; 0xca
 800c0fa:	625a      	str	r2, [r3, #36]	; 0x24
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2253      	movs	r2, #83	; 0x53
 800c102:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 f899 	bl	800c23c <RTC_EnterInitMode>
 800c10a:	4603      	mov	r3, r0
 800c10c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c10e:	7cfb      	ldrb	r3, [r7, #19]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10c      	bne.n	800c12e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c11e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c122:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 f8bd 	bl	800c2a4 <RTC_ExitInitMode>
 800c12a:	4603      	mov	r3, r0
 800c12c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	22ff      	movs	r2, #255	; 0xff
 800c134:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c136:	7cfb      	ldrb	r3, [r7, #19]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d103      	bne.n	800c144 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c14c:	7cfb      	ldrb	r3, [r7, #19]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	371c      	adds	r7, #28
 800c152:	46bd      	mov	sp, r7
 800c154:	bd90      	pop	{r4, r7, pc}

0800c156 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b086      	sub	sp, #24
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c16c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c170:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	0c1b      	lsrs	r3, r3, #16
 800c176:	b2da      	uxtb	r2, r3
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	0a1b      	lsrs	r3, r3, #8
 800c180:	b2db      	uxtb	r3, r3
 800c182:	f003 031f 	and.w	r3, r3, #31
 800c186:	b2da      	uxtb	r2, r3
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c194:	b2da      	uxtb	r2, r3
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	0b5b      	lsrs	r3, r3, #13
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	f003 0307 	and.w	r3, r3, #7
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d11a      	bne.n	800c1e6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	78db      	ldrb	r3, [r3, #3]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 f8d3 	bl	800c360 <RTC_Bcd2ToByte>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	461a      	mov	r2, r3
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	785b      	ldrb	r3, [r3, #1]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 f8ca 	bl	800c360 <RTC_Bcd2ToByte>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	789b      	ldrb	r3, [r3, #2]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 f8c1 	bl	800c360 <RTC_Bcd2ToByte>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3718      	adds	r7, #24
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68da      	ldr	r2, [r3, #12]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c206:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800c208:	f7fc fd46 	bl	8008c98 <HAL_GetTick>
 800c20c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c20e:	e009      	b.n	800c224 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c210:	f7fc fd42 	bl	8008c98 <HAL_GetTick>
 800c214:	4602      	mov	r2, r0
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c21e:	d901      	bls.n	800c224 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e007      	b.n	800c234 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f003 0320 	and.w	r3, r3, #32
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d0ee      	beq.n	800c210 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c252:	2b00      	cmp	r3, #0
 800c254:	d120      	bne.n	800c298 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f04f 32ff 	mov.w	r2, #4294967295
 800c25e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c260:	f7fc fd1a 	bl	8008c98 <HAL_GetTick>
 800c264:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c266:	e00d      	b.n	800c284 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c268:	f7fc fd16 	bl	8008c98 <HAL_GetTick>
 800c26c:	4602      	mov	r2, r0
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c276:	d905      	bls.n	800c284 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c278:	2303      	movs	r3, #3
 800c27a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2203      	movs	r2, #3
 800c280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d102      	bne.n	800c298 <RTC_EnterInitMode+0x5c>
 800c292:	7bfb      	ldrb	r3, [r7, #15]
 800c294:	2b03      	cmp	r3, #3
 800c296:	d1e7      	bne.n	800c268 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800c298:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
	...

0800c2a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c2b0:	4b1a      	ldr	r3, [pc, #104]	; (800c31c <RTC_ExitInitMode+0x78>)
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	4a19      	ldr	r2, [pc, #100]	; (800c31c <RTC_ExitInitMode+0x78>)
 800c2b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2ba:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c2bc:	4b17      	ldr	r3, [pc, #92]	; (800c31c <RTC_ExitInitMode+0x78>)
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f003 0320 	and.w	r3, r3, #32
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10c      	bne.n	800c2e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f7ff ff91 	bl	800c1f0 <HAL_RTC_WaitForSynchro>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d01e      	beq.n	800c312 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2203      	movs	r2, #3
 800c2d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	73fb      	strb	r3, [r7, #15]
 800c2e0:	e017      	b.n	800c312 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c2e2:	4b0e      	ldr	r3, [pc, #56]	; (800c31c <RTC_ExitInitMode+0x78>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	4a0d      	ldr	r2, [pc, #52]	; (800c31c <RTC_ExitInitMode+0x78>)
 800c2e8:	f023 0320 	bic.w	r3, r3, #32
 800c2ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff ff7e 	bl	800c1f0 <HAL_RTC_WaitForSynchro>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d005      	beq.n	800c306 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2203      	movs	r2, #3
 800c2fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c306:	4b05      	ldr	r3, [pc, #20]	; (800c31c <RTC_ExitInitMode+0x78>)
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	4a04      	ldr	r2, [pc, #16]	; (800c31c <RTC_ExitInitMode+0x78>)
 800c30c:	f043 0320 	orr.w	r3, r3, #32
 800c310:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c312:	7bfb      	ldrb	r3, [r7, #15]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	40002800 	.word	0x40002800

0800c320 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	4603      	mov	r3, r0
 800c328:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800c32e:	79fb      	ldrb	r3, [r7, #7]
 800c330:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800c332:	e005      	b.n	800c340 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	3301      	adds	r3, #1
 800c338:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800c33a:	7afb      	ldrb	r3, [r7, #11]
 800c33c:	3b0a      	subs	r3, #10
 800c33e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800c340:	7afb      	ldrb	r3, [r7, #11]
 800c342:	2b09      	cmp	r3, #9
 800c344:	d8f6      	bhi.n	800c334 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	011b      	lsls	r3, r3, #4
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	7afb      	ldrb	r3, [r7, #11]
 800c350:	4313      	orrs	r3, r2
 800c352:	b2db      	uxtb	r3, r3
}
 800c354:	4618      	mov	r0, r3
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	4603      	mov	r3, r0
 800c368:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c36a:	79fb      	ldrb	r3, [r7, #7]
 800c36c:	091b      	lsrs	r3, r3, #4
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	461a      	mov	r2, r3
 800c372:	0092      	lsls	r2, r2, #2
 800c374:	4413      	add	r3, r2
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c37a:	79fb      	ldrb	r3, [r7, #7]
 800c37c:	f003 030f 	and.w	r3, r3, #15
 800c380:	b2da      	uxtb	r2, r3
 800c382:	7bfb      	ldrb	r3, [r7, #15]
 800c384:	4413      	add	r3, r2
 800c386:	b2db      	uxtb	r3, r3
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e049      	b.n	800c43a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f003 fdaa 	bl	800ff14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	4610      	mov	r0, r2
 800c3d4:	f000 fae6 	bl	800c9a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
	...

0800c444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b01      	cmp	r3, #1
 800c456:	d001      	beq.n	800c45c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e04f      	b.n	800c4fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2202      	movs	r2, #2
 800c460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68da      	ldr	r2, [r3, #12]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f042 0201 	orr.w	r2, r2, #1
 800c472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a23      	ldr	r2, [pc, #140]	; (800c508 <HAL_TIM_Base_Start_IT+0xc4>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d01d      	beq.n	800c4ba <HAL_TIM_Base_Start_IT+0x76>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c486:	d018      	beq.n	800c4ba <HAL_TIM_Base_Start_IT+0x76>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a1f      	ldr	r2, [pc, #124]	; (800c50c <HAL_TIM_Base_Start_IT+0xc8>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d013      	beq.n	800c4ba <HAL_TIM_Base_Start_IT+0x76>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a1e      	ldr	r2, [pc, #120]	; (800c510 <HAL_TIM_Base_Start_IT+0xcc>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d00e      	beq.n	800c4ba <HAL_TIM_Base_Start_IT+0x76>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a1c      	ldr	r2, [pc, #112]	; (800c514 <HAL_TIM_Base_Start_IT+0xd0>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d009      	beq.n	800c4ba <HAL_TIM_Base_Start_IT+0x76>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a1b      	ldr	r2, [pc, #108]	; (800c518 <HAL_TIM_Base_Start_IT+0xd4>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d004      	beq.n	800c4ba <HAL_TIM_Base_Start_IT+0x76>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a19      	ldr	r2, [pc, #100]	; (800c51c <HAL_TIM_Base_Start_IT+0xd8>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d115      	bne.n	800c4e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	4b17      	ldr	r3, [pc, #92]	; (800c520 <HAL_TIM_Base_Start_IT+0xdc>)
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b06      	cmp	r3, #6
 800c4ca:	d015      	beq.n	800c4f8 <HAL_TIM_Base_Start_IT+0xb4>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4d2:	d011      	beq.n	800c4f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f042 0201 	orr.w	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e4:	e008      	b.n	800c4f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0201 	orr.w	r2, r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e000      	b.n	800c4fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3714      	adds	r7, #20
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr
 800c508:	40012c00 	.word	0x40012c00
 800c50c:	40000400 	.word	0x40000400
 800c510:	40000800 	.word	0x40000800
 800c514:	40000c00 	.word	0x40000c00
 800c518:	40013400 	.word	0x40013400
 800c51c:	40014000 	.word	0x40014000
 800c520:	00010007 	.word	0x00010007

0800c524 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68da      	ldr	r2, [r3, #12]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f022 0201 	bic.w	r2, r2, #1
 800c53a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6a1a      	ldr	r2, [r3, #32]
 800c542:	f241 1311 	movw	r3, #4369	; 0x1111
 800c546:	4013      	ands	r3, r2
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10f      	bne.n	800c56c <HAL_TIM_Base_Stop_IT+0x48>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6a1a      	ldr	r2, [r3, #32]
 800c552:	f240 4344 	movw	r3, #1092	; 0x444
 800c556:	4013      	ands	r3, r2
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d107      	bne.n	800c56c <HAL_TIM_Base_Stop_IT+0x48>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f022 0201 	bic.w	r2, r2, #1
 800c56a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b082      	sub	sp, #8
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	f003 0302 	and.w	r3, r3, #2
 800c594:	2b02      	cmp	r3, #2
 800c596:	d122      	bne.n	800c5de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	f003 0302 	and.w	r3, r3, #2
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d11b      	bne.n	800c5de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f06f 0202 	mvn.w	r2, #2
 800c5ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	f003 0303 	and.w	r3, r3, #3
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d003      	beq.n	800c5cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 f9ce 	bl	800c966 <HAL_TIM_IC_CaptureCallback>
 800c5ca:	e005      	b.n	800c5d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f9c0 	bl	800c952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f9d1 	bl	800c97a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	691b      	ldr	r3, [r3, #16]
 800c5e4:	f003 0304 	and.w	r3, r3, #4
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	d122      	bne.n	800c632 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	f003 0304 	and.w	r3, r3, #4
 800c5f6:	2b04      	cmp	r3, #4
 800c5f8:	d11b      	bne.n	800c632 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f06f 0204 	mvn.w	r2, #4
 800c602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2202      	movs	r2, #2
 800c608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c614:	2b00      	cmp	r3, #0
 800c616:	d003      	beq.n	800c620 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 f9a4 	bl	800c966 <HAL_TIM_IC_CaptureCallback>
 800c61e:	e005      	b.n	800c62c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f996 	bl	800c952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f9a7 	bl	800c97a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	f003 0308 	and.w	r3, r3, #8
 800c63c:	2b08      	cmp	r3, #8
 800c63e:	d122      	bne.n	800c686 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	f003 0308 	and.w	r3, r3, #8
 800c64a:	2b08      	cmp	r3, #8
 800c64c:	d11b      	bne.n	800c686 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f06f 0208 	mvn.w	r2, #8
 800c656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2204      	movs	r2, #4
 800c65c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	69db      	ldr	r3, [r3, #28]
 800c664:	f003 0303 	and.w	r3, r3, #3
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d003      	beq.n	800c674 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f97a 	bl	800c966 <HAL_TIM_IC_CaptureCallback>
 800c672:	e005      	b.n	800c680 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f96c 	bl	800c952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f97d 	bl	800c97a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	f003 0310 	and.w	r3, r3, #16
 800c690:	2b10      	cmp	r3, #16
 800c692:	d122      	bne.n	800c6da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	f003 0310 	and.w	r3, r3, #16
 800c69e:	2b10      	cmp	r3, #16
 800c6a0:	d11b      	bne.n	800c6da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f06f 0210 	mvn.w	r2, #16
 800c6aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2208      	movs	r2, #8
 800c6b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	69db      	ldr	r3, [r3, #28]
 800c6b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d003      	beq.n	800c6c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f950 	bl	800c966 <HAL_TIM_IC_CaptureCallback>
 800c6c6:	e005      	b.n	800c6d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f942 	bl	800c952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f953 	bl	800c97a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	691b      	ldr	r3, [r3, #16]
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d10e      	bne.n	800c706 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	f003 0301 	and.w	r3, r3, #1
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d107      	bne.n	800c706 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f06f 0201 	mvn.w	r2, #1
 800c6fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f001 fb25 	bl	800dd50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c710:	2b80      	cmp	r3, #128	; 0x80
 800c712:	d10e      	bne.n	800c732 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c71e:	2b80      	cmp	r3, #128	; 0x80
 800c720:	d107      	bne.n	800c732 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c72a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 faff 	bl	800cd30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c73c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c740:	d10e      	bne.n	800c760 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c74c:	2b80      	cmp	r3, #128	; 0x80
 800c74e:	d107      	bne.n	800c760 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 faf2 	bl	800cd44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76a:	2b40      	cmp	r3, #64	; 0x40
 800c76c:	d10e      	bne.n	800c78c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c778:	2b40      	cmp	r3, #64	; 0x40
 800c77a:	d107      	bne.n	800c78c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f901 	bl	800c98e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	f003 0320 	and.w	r3, r3, #32
 800c796:	2b20      	cmp	r3, #32
 800c798:	d10e      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	f003 0320 	and.w	r3, r3, #32
 800c7a4:	2b20      	cmp	r3, #32
 800c7a6:	d107      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f06f 0220 	mvn.w	r2, #32
 800c7b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fab2 	bl	800cd1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d101      	bne.n	800c7dc <HAL_TIM_ConfigClockSource+0x1c>
 800c7d8:	2302      	movs	r3, #2
 800c7da:	e0b6      	b.n	800c94a <HAL_TIM_ConfigClockSource+0x18a>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2202      	movs	r2, #2
 800c7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c7fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c818:	d03e      	beq.n	800c898 <HAL_TIM_ConfigClockSource+0xd8>
 800c81a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c81e:	f200 8087 	bhi.w	800c930 <HAL_TIM_ConfigClockSource+0x170>
 800c822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c826:	f000 8086 	beq.w	800c936 <HAL_TIM_ConfigClockSource+0x176>
 800c82a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c82e:	d87f      	bhi.n	800c930 <HAL_TIM_ConfigClockSource+0x170>
 800c830:	2b70      	cmp	r3, #112	; 0x70
 800c832:	d01a      	beq.n	800c86a <HAL_TIM_ConfigClockSource+0xaa>
 800c834:	2b70      	cmp	r3, #112	; 0x70
 800c836:	d87b      	bhi.n	800c930 <HAL_TIM_ConfigClockSource+0x170>
 800c838:	2b60      	cmp	r3, #96	; 0x60
 800c83a:	d050      	beq.n	800c8de <HAL_TIM_ConfigClockSource+0x11e>
 800c83c:	2b60      	cmp	r3, #96	; 0x60
 800c83e:	d877      	bhi.n	800c930 <HAL_TIM_ConfigClockSource+0x170>
 800c840:	2b50      	cmp	r3, #80	; 0x50
 800c842:	d03c      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0xfe>
 800c844:	2b50      	cmp	r3, #80	; 0x50
 800c846:	d873      	bhi.n	800c930 <HAL_TIM_ConfigClockSource+0x170>
 800c848:	2b40      	cmp	r3, #64	; 0x40
 800c84a:	d058      	beq.n	800c8fe <HAL_TIM_ConfigClockSource+0x13e>
 800c84c:	2b40      	cmp	r3, #64	; 0x40
 800c84e:	d86f      	bhi.n	800c930 <HAL_TIM_ConfigClockSource+0x170>
 800c850:	2b30      	cmp	r3, #48	; 0x30
 800c852:	d064      	beq.n	800c91e <HAL_TIM_ConfigClockSource+0x15e>
 800c854:	2b30      	cmp	r3, #48	; 0x30
 800c856:	d86b      	bhi.n	800c930 <HAL_TIM_ConfigClockSource+0x170>
 800c858:	2b20      	cmp	r3, #32
 800c85a:	d060      	beq.n	800c91e <HAL_TIM_ConfigClockSource+0x15e>
 800c85c:	2b20      	cmp	r3, #32
 800c85e:	d867      	bhi.n	800c930 <HAL_TIM_ConfigClockSource+0x170>
 800c860:	2b00      	cmp	r3, #0
 800c862:	d05c      	beq.n	800c91e <HAL_TIM_ConfigClockSource+0x15e>
 800c864:	2b10      	cmp	r3, #16
 800c866:	d05a      	beq.n	800c91e <HAL_TIM_ConfigClockSource+0x15e>
 800c868:	e062      	b.n	800c930 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6818      	ldr	r0, [r3, #0]
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	6899      	ldr	r1, [r3, #8]
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	f000 f9a7 	bl	800cbcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c88c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	609a      	str	r2, [r3, #8]
      break;
 800c896:	e04f      	b.n	800c938 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6818      	ldr	r0, [r3, #0]
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	6899      	ldr	r1, [r3, #8]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	685a      	ldr	r2, [r3, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	f000 f990 	bl	800cbcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	689a      	ldr	r2, [r3, #8]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8ba:	609a      	str	r2, [r3, #8]
      break;
 800c8bc:	e03c      	b.n	800c938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6818      	ldr	r0, [r3, #0]
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	6859      	ldr	r1, [r3, #4]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	f000 f904 	bl	800cad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2150      	movs	r1, #80	; 0x50
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f000 f95d 	bl	800cb96 <TIM_ITRx_SetConfig>
      break;
 800c8dc:	e02c      	b.n	800c938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6818      	ldr	r0, [r3, #0]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	6859      	ldr	r1, [r3, #4]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f000 f923 	bl	800cb36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2160      	movs	r1, #96	; 0x60
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 f94d 	bl	800cb96 <TIM_ITRx_SetConfig>
      break;
 800c8fc:	e01c      	b.n	800c938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6818      	ldr	r0, [r3, #0]
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	6859      	ldr	r1, [r3, #4]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	461a      	mov	r2, r3
 800c90c:	f000 f8e4 	bl	800cad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2140      	movs	r1, #64	; 0x40
 800c916:	4618      	mov	r0, r3
 800c918:	f000 f93d 	bl	800cb96 <TIM_ITRx_SetConfig>
      break;
 800c91c:	e00c      	b.n	800c938 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4619      	mov	r1, r3
 800c928:	4610      	mov	r0, r2
 800c92a:	f000 f934 	bl	800cb96 <TIM_ITRx_SetConfig>
      break;
 800c92e:	e003      	b.n	800c938 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	73fb      	strb	r3, [r7, #15]
      break;
 800c934:	e000      	b.n	800c938 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c948:	7bfb      	ldrb	r3, [r7, #15]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3710      	adds	r7, #16
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c95a:	bf00      	nop
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c966:	b480      	push	{r7}
 800c968:	b083      	sub	sp, #12
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c96e:	bf00      	nop
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b083      	sub	sp, #12
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c98e:	b480      	push	{r7}
 800c990:	b083      	sub	sp, #12
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c996:	bf00      	nop
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
	...

0800c9a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a40      	ldr	r2, [pc, #256]	; (800cab8 <TIM_Base_SetConfig+0x114>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d013      	beq.n	800c9e4 <TIM_Base_SetConfig+0x40>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9c2:	d00f      	beq.n	800c9e4 <TIM_Base_SetConfig+0x40>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a3d      	ldr	r2, [pc, #244]	; (800cabc <TIM_Base_SetConfig+0x118>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d00b      	beq.n	800c9e4 <TIM_Base_SetConfig+0x40>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a3c      	ldr	r2, [pc, #240]	; (800cac0 <TIM_Base_SetConfig+0x11c>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d007      	beq.n	800c9e4 <TIM_Base_SetConfig+0x40>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a3b      	ldr	r2, [pc, #236]	; (800cac4 <TIM_Base_SetConfig+0x120>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d003      	beq.n	800c9e4 <TIM_Base_SetConfig+0x40>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a3a      	ldr	r2, [pc, #232]	; (800cac8 <TIM_Base_SetConfig+0x124>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d108      	bne.n	800c9f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a2f      	ldr	r2, [pc, #188]	; (800cab8 <TIM_Base_SetConfig+0x114>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d01f      	beq.n	800ca3e <TIM_Base_SetConfig+0x9a>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca04:	d01b      	beq.n	800ca3e <TIM_Base_SetConfig+0x9a>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a2c      	ldr	r2, [pc, #176]	; (800cabc <TIM_Base_SetConfig+0x118>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d017      	beq.n	800ca3e <TIM_Base_SetConfig+0x9a>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a2b      	ldr	r2, [pc, #172]	; (800cac0 <TIM_Base_SetConfig+0x11c>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d013      	beq.n	800ca3e <TIM_Base_SetConfig+0x9a>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a2a      	ldr	r2, [pc, #168]	; (800cac4 <TIM_Base_SetConfig+0x120>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d00f      	beq.n	800ca3e <TIM_Base_SetConfig+0x9a>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a29      	ldr	r2, [pc, #164]	; (800cac8 <TIM_Base_SetConfig+0x124>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d00b      	beq.n	800ca3e <TIM_Base_SetConfig+0x9a>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a28      	ldr	r2, [pc, #160]	; (800cacc <TIM_Base_SetConfig+0x128>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d007      	beq.n	800ca3e <TIM_Base_SetConfig+0x9a>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a27      	ldr	r2, [pc, #156]	; (800cad0 <TIM_Base_SetConfig+0x12c>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d003      	beq.n	800ca3e <TIM_Base_SetConfig+0x9a>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a26      	ldr	r2, [pc, #152]	; (800cad4 <TIM_Base_SetConfig+0x130>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d108      	bne.n	800ca50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	689a      	ldr	r2, [r3, #8]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a10      	ldr	r2, [pc, #64]	; (800cab8 <TIM_Base_SetConfig+0x114>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d00f      	beq.n	800ca9c <TIM_Base_SetConfig+0xf8>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a12      	ldr	r2, [pc, #72]	; (800cac8 <TIM_Base_SetConfig+0x124>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d00b      	beq.n	800ca9c <TIM_Base_SetConfig+0xf8>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a11      	ldr	r2, [pc, #68]	; (800cacc <TIM_Base_SetConfig+0x128>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d007      	beq.n	800ca9c <TIM_Base_SetConfig+0xf8>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a10      	ldr	r2, [pc, #64]	; (800cad0 <TIM_Base_SetConfig+0x12c>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d003      	beq.n	800ca9c <TIM_Base_SetConfig+0xf8>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a0f      	ldr	r2, [pc, #60]	; (800cad4 <TIM_Base_SetConfig+0x130>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d103      	bne.n	800caa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	691a      	ldr	r2, [r3, #16]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	615a      	str	r2, [r3, #20]
}
 800caaa:	bf00      	nop
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	40012c00 	.word	0x40012c00
 800cabc:	40000400 	.word	0x40000400
 800cac0:	40000800 	.word	0x40000800
 800cac4:	40000c00 	.word	0x40000c00
 800cac8:	40013400 	.word	0x40013400
 800cacc:	40014000 	.word	0x40014000
 800cad0:	40014400 	.word	0x40014400
 800cad4:	40014800 	.word	0x40014800

0800cad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cad8:	b480      	push	{r7}
 800cada:	b087      	sub	sp, #28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6a1b      	ldr	r3, [r3, #32]
 800cae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	f023 0201 	bic.w	r2, r3, #1
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	011b      	lsls	r3, r3, #4
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f023 030a 	bic.w	r3, r3, #10
 800cb14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb16:	697a      	ldr	r2, [r7, #20]
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	693a      	ldr	r2, [r7, #16]
 800cb22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	621a      	str	r2, [r3, #32]
}
 800cb2a:	bf00      	nop
 800cb2c:	371c      	adds	r7, #28
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb36:	b480      	push	{r7}
 800cb38:	b087      	sub	sp, #28
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	f023 0210 	bic.w	r2, r3, #16
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6a1b      	ldr	r3, [r3, #32]
 800cb58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	031b      	lsls	r3, r3, #12
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	011b      	lsls	r3, r3, #4
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	697a      	ldr	r2, [r7, #20]
 800cb82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	621a      	str	r2, [r3, #32]
}
 800cb8a:	bf00      	nop
 800cb8c:	371c      	adds	r7, #28
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr

0800cb96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb96:	b480      	push	{r7}
 800cb98:	b085      	sub	sp, #20
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	f043 0307 	orr.w	r3, r3, #7
 800cbb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	609a      	str	r2, [r3, #8]
}
 800cbc0:	bf00      	nop
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b087      	sub	sp, #28
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	021a      	lsls	r2, r3, #8
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	431a      	orrs	r2, r3
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	697a      	ldr	r2, [r7, #20]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	609a      	str	r2, [r3, #8]
}
 800cc00:	bf00      	nop
 800cc02:	371c      	adds	r7, #28
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d101      	bne.n	800cc24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc20:	2302      	movs	r3, #2
 800cc22:	e068      	b.n	800ccf6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2202      	movs	r2, #2
 800cc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a2e      	ldr	r2, [pc, #184]	; (800cd04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d004      	beq.n	800cc58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a2d      	ldr	r2, [pc, #180]	; (800cd08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d108      	bne.n	800cc6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a1e      	ldr	r2, [pc, #120]	; (800cd04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d01d      	beq.n	800ccca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc96:	d018      	beq.n	800ccca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a1b      	ldr	r2, [pc, #108]	; (800cd0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d013      	beq.n	800ccca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a1a      	ldr	r2, [pc, #104]	; (800cd10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d00e      	beq.n	800ccca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a18      	ldr	r2, [pc, #96]	; (800cd14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d009      	beq.n	800ccca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a13      	ldr	r2, [pc, #76]	; (800cd08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d004      	beq.n	800ccca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a14      	ldr	r2, [pc, #80]	; (800cd18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d10c      	bne.n	800cce4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68ba      	ldr	r2, [r7, #8]
 800cce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	40012c00 	.word	0x40012c00
 800cd08:	40013400 	.word	0x40013400
 800cd0c:	40000400 	.word	0x40000400
 800cd10:	40000800 	.word	0x40000800
 800cd14:	40000c00 	.word	0x40000c00
 800cd18:	40014000 	.word	0x40014000

0800cd1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd38:	bf00      	nop
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd4c:	bf00      	nop
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e040      	b.n	800cdec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d106      	bne.n	800cd80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 f83a 	bl	800cdf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2224      	movs	r2, #36	; 0x24
 800cd84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f022 0201 	bic.w	r2, r2, #1
 800cd94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f94a 	bl	800d030 <UART_SetConfig>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d101      	bne.n	800cda6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e022      	b.n	800cdec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fbf6 	bl	800d5a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	685a      	ldr	r2, [r3, #4]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cdc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689a      	ldr	r2, [r3, #8]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cdd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f042 0201 	orr.w	r2, r2, #1
 800cde2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 fc7d 	bl	800d6e4 <UART_CheckIdleState>
 800cdea:	4603      	mov	r3, r0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08a      	sub	sp, #40	; 0x28
 800ce0c:	af02      	add	r7, sp, #8
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	603b      	str	r3, [r7, #0]
 800ce14:	4613      	mov	r3, r2
 800ce16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce1c:	2b20      	cmp	r3, #32
 800ce1e:	f040 8082 	bne.w	800cf26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <HAL_UART_Transmit+0x26>
 800ce28:	88fb      	ldrh	r3, [r7, #6]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e07a      	b.n	800cf28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d101      	bne.n	800ce40 <HAL_UART_Transmit+0x38>
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	e073      	b.n	800cf28 <HAL_UART_Transmit+0x120>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2221      	movs	r2, #33	; 0x21
 800ce54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce56:	f7fb ff1f 	bl	8008c98 <HAL_GetTick>
 800ce5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	88fa      	ldrh	r2, [r7, #6]
 800ce60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	88fa      	ldrh	r2, [r7, #6]
 800ce68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce74:	d108      	bne.n	800ce88 <HAL_UART_Transmit+0x80>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d104      	bne.n	800ce88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	61bb      	str	r3, [r7, #24]
 800ce86:	e003      	b.n	800ce90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800ce98:	e02d      	b.n	800cef6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	2200      	movs	r2, #0
 800cea2:	2180      	movs	r1, #128	; 0x80
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f000 fc66 	bl	800d776 <UART_WaitOnFlagUntilTimeout>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d001      	beq.n	800ceb4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e039      	b.n	800cf28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10b      	bne.n	800ced2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	881a      	ldrh	r2, [r3, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cec6:	b292      	uxth	r2, r2
 800cec8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	3302      	adds	r3, #2
 800cece:	61bb      	str	r3, [r7, #24]
 800ced0:	e008      	b.n	800cee4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	781a      	ldrb	r2, [r3, #0]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	b292      	uxth	r2, r2
 800cedc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	3301      	adds	r3, #1
 800cee2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	3b01      	subs	r3, #1
 800ceee:	b29a      	uxth	r2, r3
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1cb      	bne.n	800ce9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	2140      	movs	r1, #64	; 0x40
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f000 fc32 	bl	800d776 <UART_WaitOnFlagUntilTimeout>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d001      	beq.n	800cf1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e005      	b.n	800cf28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2220      	movs	r2, #32
 800cf20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	e000      	b.n	800cf28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800cf26:	2302      	movs	r3, #2
  }
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3720      	adds	r7, #32
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08a      	sub	sp, #40	; 0x28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf42:	2b20      	cmp	r3, #32
 800cf44:	d142      	bne.n	800cfcc <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <HAL_UART_Receive_DMA+0x22>
 800cf4c:	88fb      	ldrh	r3, [r7, #6]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d101      	bne.n	800cf56 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	e03b      	b.n	800cfce <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d101      	bne.n	800cf64 <HAL_UART_Receive_DMA+0x34>
 800cf60:	2302      	movs	r3, #2
 800cf62:	e034      	b.n	800cfce <HAL_UART_Receive_DMA+0x9e>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a18      	ldr	r2, [pc, #96]	; (800cfd8 <HAL_UART_Receive_DMA+0xa8>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d01f      	beq.n	800cfbc <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d018      	beq.n	800cfbc <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	e853 3f00 	ldrex	r3, [r3]
 800cf96:	613b      	str	r3, [r7, #16]
   return(result);
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf9e:	627b      	str	r3, [r7, #36]	; 0x24
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa8:	623b      	str	r3, [r7, #32]
 800cfaa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfac:	69f9      	ldr	r1, [r7, #28]
 800cfae:	6a3a      	ldr	r2, [r7, #32]
 800cfb0:	e841 2300 	strex	r3, r2, [r1]
 800cfb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1e6      	bne.n	800cf8a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cfbc:	88fb      	ldrh	r3, [r7, #6]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	68b9      	ldr	r1, [r7, #8]
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f000 fc9c 	bl	800d900 <UART_Start_Receive_DMA>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	e000      	b.n	800cfce <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800cfcc:	2302      	movs	r3, #2
  }
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3728      	adds	r7, #40	; 0x28
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	40008000 	.word	0x40008000

0800cfdc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d024:	bf00      	nop
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d034:	b08a      	sub	sp, #40	; 0x28
 800d036:	af00      	add	r7, sp, #0
 800d038:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d03a:	2300      	movs	r3, #0
 800d03c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	689a      	ldr	r2, [r3, #8]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	431a      	orrs	r2, r3
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	431a      	orrs	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	69db      	ldr	r3, [r3, #28]
 800d054:	4313      	orrs	r3, r2
 800d056:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	4ba4      	ldr	r3, [pc, #656]	; (800d2f0 <UART_SetConfig+0x2c0>)
 800d060:	4013      	ands	r3, r2
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	6812      	ldr	r2, [r2, #0]
 800d066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d068:	430b      	orrs	r3, r1
 800d06a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	68da      	ldr	r2, [r3, #12]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	430a      	orrs	r2, r1
 800d080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	699b      	ldr	r3, [r3, #24]
 800d086:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a99      	ldr	r2, [pc, #612]	; (800d2f4 <UART_SetConfig+0x2c4>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d004      	beq.n	800d09c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d098:	4313      	orrs	r3, r2
 800d09a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a90      	ldr	r2, [pc, #576]	; (800d2f8 <UART_SetConfig+0x2c8>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d126      	bne.n	800d108 <UART_SetConfig+0xd8>
 800d0ba:	4b90      	ldr	r3, [pc, #576]	; (800d2fc <UART_SetConfig+0x2cc>)
 800d0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0c0:	f003 0303 	and.w	r3, r3, #3
 800d0c4:	2b03      	cmp	r3, #3
 800d0c6:	d81b      	bhi.n	800d100 <UART_SetConfig+0xd0>
 800d0c8:	a201      	add	r2, pc, #4	; (adr r2, 800d0d0 <UART_SetConfig+0xa0>)
 800d0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ce:	bf00      	nop
 800d0d0:	0800d0e1 	.word	0x0800d0e1
 800d0d4:	0800d0f1 	.word	0x0800d0f1
 800d0d8:	0800d0e9 	.word	0x0800d0e9
 800d0dc:	0800d0f9 	.word	0x0800d0f9
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d0e6:	e116      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d0ee:	e112      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d0f0:	2304      	movs	r3, #4
 800d0f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d0f6:	e10e      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d0f8:	2308      	movs	r3, #8
 800d0fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d0fe:	e10a      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d100:	2310      	movs	r3, #16
 800d102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d106:	e106      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a7c      	ldr	r2, [pc, #496]	; (800d300 <UART_SetConfig+0x2d0>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d138      	bne.n	800d184 <UART_SetConfig+0x154>
 800d112:	4b7a      	ldr	r3, [pc, #488]	; (800d2fc <UART_SetConfig+0x2cc>)
 800d114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d118:	f003 030c 	and.w	r3, r3, #12
 800d11c:	2b0c      	cmp	r3, #12
 800d11e:	d82d      	bhi.n	800d17c <UART_SetConfig+0x14c>
 800d120:	a201      	add	r2, pc, #4	; (adr r2, 800d128 <UART_SetConfig+0xf8>)
 800d122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d126:	bf00      	nop
 800d128:	0800d15d 	.word	0x0800d15d
 800d12c:	0800d17d 	.word	0x0800d17d
 800d130:	0800d17d 	.word	0x0800d17d
 800d134:	0800d17d 	.word	0x0800d17d
 800d138:	0800d16d 	.word	0x0800d16d
 800d13c:	0800d17d 	.word	0x0800d17d
 800d140:	0800d17d 	.word	0x0800d17d
 800d144:	0800d17d 	.word	0x0800d17d
 800d148:	0800d165 	.word	0x0800d165
 800d14c:	0800d17d 	.word	0x0800d17d
 800d150:	0800d17d 	.word	0x0800d17d
 800d154:	0800d17d 	.word	0x0800d17d
 800d158:	0800d175 	.word	0x0800d175
 800d15c:	2300      	movs	r3, #0
 800d15e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d162:	e0d8      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d164:	2302      	movs	r3, #2
 800d166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d16a:	e0d4      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d16c:	2304      	movs	r3, #4
 800d16e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d172:	e0d0      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d174:	2308      	movs	r3, #8
 800d176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d17a:	e0cc      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d17c:	2310      	movs	r3, #16
 800d17e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d182:	e0c8      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a5e      	ldr	r2, [pc, #376]	; (800d304 <UART_SetConfig+0x2d4>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d125      	bne.n	800d1da <UART_SetConfig+0x1aa>
 800d18e:	4b5b      	ldr	r3, [pc, #364]	; (800d2fc <UART_SetConfig+0x2cc>)
 800d190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d194:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d198:	2b30      	cmp	r3, #48	; 0x30
 800d19a:	d016      	beq.n	800d1ca <UART_SetConfig+0x19a>
 800d19c:	2b30      	cmp	r3, #48	; 0x30
 800d19e:	d818      	bhi.n	800d1d2 <UART_SetConfig+0x1a2>
 800d1a0:	2b20      	cmp	r3, #32
 800d1a2:	d00a      	beq.n	800d1ba <UART_SetConfig+0x18a>
 800d1a4:	2b20      	cmp	r3, #32
 800d1a6:	d814      	bhi.n	800d1d2 <UART_SetConfig+0x1a2>
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d002      	beq.n	800d1b2 <UART_SetConfig+0x182>
 800d1ac:	2b10      	cmp	r3, #16
 800d1ae:	d008      	beq.n	800d1c2 <UART_SetConfig+0x192>
 800d1b0:	e00f      	b.n	800d1d2 <UART_SetConfig+0x1a2>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1b8:	e0ad      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1c0:	e0a9      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d1c2:	2304      	movs	r3, #4
 800d1c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1c8:	e0a5      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d1ca:	2308      	movs	r3, #8
 800d1cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1d0:	e0a1      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d1d2:	2310      	movs	r3, #16
 800d1d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1d8:	e09d      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a4a      	ldr	r2, [pc, #296]	; (800d308 <UART_SetConfig+0x2d8>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d125      	bne.n	800d230 <UART_SetConfig+0x200>
 800d1e4:	4b45      	ldr	r3, [pc, #276]	; (800d2fc <UART_SetConfig+0x2cc>)
 800d1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d1ee:	2bc0      	cmp	r3, #192	; 0xc0
 800d1f0:	d016      	beq.n	800d220 <UART_SetConfig+0x1f0>
 800d1f2:	2bc0      	cmp	r3, #192	; 0xc0
 800d1f4:	d818      	bhi.n	800d228 <UART_SetConfig+0x1f8>
 800d1f6:	2b80      	cmp	r3, #128	; 0x80
 800d1f8:	d00a      	beq.n	800d210 <UART_SetConfig+0x1e0>
 800d1fa:	2b80      	cmp	r3, #128	; 0x80
 800d1fc:	d814      	bhi.n	800d228 <UART_SetConfig+0x1f8>
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d002      	beq.n	800d208 <UART_SetConfig+0x1d8>
 800d202:	2b40      	cmp	r3, #64	; 0x40
 800d204:	d008      	beq.n	800d218 <UART_SetConfig+0x1e8>
 800d206:	e00f      	b.n	800d228 <UART_SetConfig+0x1f8>
 800d208:	2300      	movs	r3, #0
 800d20a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d20e:	e082      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d210:	2302      	movs	r3, #2
 800d212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d216:	e07e      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d218:	2304      	movs	r3, #4
 800d21a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d21e:	e07a      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d220:	2308      	movs	r3, #8
 800d222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d226:	e076      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d228:	2310      	movs	r3, #16
 800d22a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d22e:	e072      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a35      	ldr	r2, [pc, #212]	; (800d30c <UART_SetConfig+0x2dc>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d12a      	bne.n	800d290 <UART_SetConfig+0x260>
 800d23a:	4b30      	ldr	r3, [pc, #192]	; (800d2fc <UART_SetConfig+0x2cc>)
 800d23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d248:	d01a      	beq.n	800d280 <UART_SetConfig+0x250>
 800d24a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d24e:	d81b      	bhi.n	800d288 <UART_SetConfig+0x258>
 800d250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d254:	d00c      	beq.n	800d270 <UART_SetConfig+0x240>
 800d256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d25a:	d815      	bhi.n	800d288 <UART_SetConfig+0x258>
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d003      	beq.n	800d268 <UART_SetConfig+0x238>
 800d260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d264:	d008      	beq.n	800d278 <UART_SetConfig+0x248>
 800d266:	e00f      	b.n	800d288 <UART_SetConfig+0x258>
 800d268:	2300      	movs	r3, #0
 800d26a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d26e:	e052      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d270:	2302      	movs	r3, #2
 800d272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d276:	e04e      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d278:	2304      	movs	r3, #4
 800d27a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d27e:	e04a      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d280:	2308      	movs	r3, #8
 800d282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d286:	e046      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d288:	2310      	movs	r3, #16
 800d28a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d28e:	e042      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a17      	ldr	r2, [pc, #92]	; (800d2f4 <UART_SetConfig+0x2c4>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d13a      	bne.n	800d310 <UART_SetConfig+0x2e0>
 800d29a:	4b18      	ldr	r3, [pc, #96]	; (800d2fc <UART_SetConfig+0x2cc>)
 800d29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d2a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d2a8:	d01a      	beq.n	800d2e0 <UART_SetConfig+0x2b0>
 800d2aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d2ae:	d81b      	bhi.n	800d2e8 <UART_SetConfig+0x2b8>
 800d2b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2b4:	d00c      	beq.n	800d2d0 <UART_SetConfig+0x2a0>
 800d2b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2ba:	d815      	bhi.n	800d2e8 <UART_SetConfig+0x2b8>
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d003      	beq.n	800d2c8 <UART_SetConfig+0x298>
 800d2c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2c4:	d008      	beq.n	800d2d8 <UART_SetConfig+0x2a8>
 800d2c6:	e00f      	b.n	800d2e8 <UART_SetConfig+0x2b8>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2ce:	e022      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d2d0:	2302      	movs	r3, #2
 800d2d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2d6:	e01e      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d2d8:	2304      	movs	r3, #4
 800d2da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2de:	e01a      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d2e0:	2308      	movs	r3, #8
 800d2e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2e6:	e016      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d2e8:	2310      	movs	r3, #16
 800d2ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2ee:	e012      	b.n	800d316 <UART_SetConfig+0x2e6>
 800d2f0:	efff69f3 	.word	0xefff69f3
 800d2f4:	40008000 	.word	0x40008000
 800d2f8:	40013800 	.word	0x40013800
 800d2fc:	40021000 	.word	0x40021000
 800d300:	40004400 	.word	0x40004400
 800d304:	40004800 	.word	0x40004800
 800d308:	40004c00 	.word	0x40004c00
 800d30c:	40005000 	.word	0x40005000
 800d310:	2310      	movs	r3, #16
 800d312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a9f      	ldr	r2, [pc, #636]	; (800d598 <UART_SetConfig+0x568>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d17a      	bne.n	800d416 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d324:	2b08      	cmp	r3, #8
 800d326:	d824      	bhi.n	800d372 <UART_SetConfig+0x342>
 800d328:	a201      	add	r2, pc, #4	; (adr r2, 800d330 <UART_SetConfig+0x300>)
 800d32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32e:	bf00      	nop
 800d330:	0800d355 	.word	0x0800d355
 800d334:	0800d373 	.word	0x0800d373
 800d338:	0800d35d 	.word	0x0800d35d
 800d33c:	0800d373 	.word	0x0800d373
 800d340:	0800d363 	.word	0x0800d363
 800d344:	0800d373 	.word	0x0800d373
 800d348:	0800d373 	.word	0x0800d373
 800d34c:	0800d373 	.word	0x0800d373
 800d350:	0800d36b 	.word	0x0800d36b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d354:	f7fd ffbc 	bl	800b2d0 <HAL_RCC_GetPCLK1Freq>
 800d358:	61f8      	str	r0, [r7, #28]
        break;
 800d35a:	e010      	b.n	800d37e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d35c:	4b8f      	ldr	r3, [pc, #572]	; (800d59c <UART_SetConfig+0x56c>)
 800d35e:	61fb      	str	r3, [r7, #28]
        break;
 800d360:	e00d      	b.n	800d37e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d362:	f7fd ff1d 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800d366:	61f8      	str	r0, [r7, #28]
        break;
 800d368:	e009      	b.n	800d37e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d36a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d36e:	61fb      	str	r3, [r7, #28]
        break;
 800d370:	e005      	b.n	800d37e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800d372:	2300      	movs	r3, #0
 800d374:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d37c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	2b00      	cmp	r3, #0
 800d382:	f000 80fb 	beq.w	800d57c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	685a      	ldr	r2, [r3, #4]
 800d38a:	4613      	mov	r3, r2
 800d38c:	005b      	lsls	r3, r3, #1
 800d38e:	4413      	add	r3, r2
 800d390:	69fa      	ldr	r2, [r7, #28]
 800d392:	429a      	cmp	r2, r3
 800d394:	d305      	bcc.n	800d3a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d39c:	69fa      	ldr	r2, [r7, #28]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d903      	bls.n	800d3aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d3a8:	e0e8      	b.n	800d57c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	461c      	mov	r4, r3
 800d3b0:	4615      	mov	r5, r2
 800d3b2:	f04f 0200 	mov.w	r2, #0
 800d3b6:	f04f 0300 	mov.w	r3, #0
 800d3ba:	022b      	lsls	r3, r5, #8
 800d3bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d3c0:	0222      	lsls	r2, r4, #8
 800d3c2:	68f9      	ldr	r1, [r7, #12]
 800d3c4:	6849      	ldr	r1, [r1, #4]
 800d3c6:	0849      	lsrs	r1, r1, #1
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	4688      	mov	r8, r1
 800d3cc:	4681      	mov	r9, r0
 800d3ce:	eb12 0a08 	adds.w	sl, r2, r8
 800d3d2:	eb43 0b09 	adc.w	fp, r3, r9
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	603b      	str	r3, [r7, #0]
 800d3de:	607a      	str	r2, [r7, #4]
 800d3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3e4:	4650      	mov	r0, sl
 800d3e6:	4659      	mov	r1, fp
 800d3e8:	f7f3 fda4 	bl	8000f34 <__aeabi_uldivmod>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3fa:	d308      	bcc.n	800d40e <UART_SetConfig+0x3de>
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d402:	d204      	bcs.n	800d40e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	60da      	str	r2, [r3, #12]
 800d40c:	e0b6      	b.n	800d57c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d414:	e0b2      	b.n	800d57c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	69db      	ldr	r3, [r3, #28]
 800d41a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d41e:	d15e      	bne.n	800d4de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800d420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d424:	2b08      	cmp	r3, #8
 800d426:	d828      	bhi.n	800d47a <UART_SetConfig+0x44a>
 800d428:	a201      	add	r2, pc, #4	; (adr r2, 800d430 <UART_SetConfig+0x400>)
 800d42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d42e:	bf00      	nop
 800d430:	0800d455 	.word	0x0800d455
 800d434:	0800d45d 	.word	0x0800d45d
 800d438:	0800d465 	.word	0x0800d465
 800d43c:	0800d47b 	.word	0x0800d47b
 800d440:	0800d46b 	.word	0x0800d46b
 800d444:	0800d47b 	.word	0x0800d47b
 800d448:	0800d47b 	.word	0x0800d47b
 800d44c:	0800d47b 	.word	0x0800d47b
 800d450:	0800d473 	.word	0x0800d473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d454:	f7fd ff3c 	bl	800b2d0 <HAL_RCC_GetPCLK1Freq>
 800d458:	61f8      	str	r0, [r7, #28]
        break;
 800d45a:	e014      	b.n	800d486 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d45c:	f7fd ff4e 	bl	800b2fc <HAL_RCC_GetPCLK2Freq>
 800d460:	61f8      	str	r0, [r7, #28]
        break;
 800d462:	e010      	b.n	800d486 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d464:	4b4d      	ldr	r3, [pc, #308]	; (800d59c <UART_SetConfig+0x56c>)
 800d466:	61fb      	str	r3, [r7, #28]
        break;
 800d468:	e00d      	b.n	800d486 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d46a:	f7fd fe99 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800d46e:	61f8      	str	r0, [r7, #28]
        break;
 800d470:	e009      	b.n	800d486 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d476:	61fb      	str	r3, [r7, #28]
        break;
 800d478:	e005      	b.n	800d486 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800d47a:	2300      	movs	r3, #0
 800d47c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d47e:	2301      	movs	r3, #1
 800d480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d077      	beq.n	800d57c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	005a      	lsls	r2, r3, #1
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	085b      	lsrs	r3, r3, #1
 800d496:	441a      	add	r2, r3
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	2b0f      	cmp	r3, #15
 800d4a6:	d916      	bls.n	800d4d6 <UART_SetConfig+0x4a6>
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4ae:	d212      	bcs.n	800d4d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	f023 030f 	bic.w	r3, r3, #15
 800d4b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	085b      	lsrs	r3, r3, #1
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	f003 0307 	and.w	r3, r3, #7
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	8afb      	ldrh	r3, [r7, #22]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	8afa      	ldrh	r2, [r7, #22]
 800d4d2:	60da      	str	r2, [r3, #12]
 800d4d4:	e052      	b.n	800d57c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d4dc:	e04e      	b.n	800d57c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d4de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d4e2:	2b08      	cmp	r3, #8
 800d4e4:	d827      	bhi.n	800d536 <UART_SetConfig+0x506>
 800d4e6:	a201      	add	r2, pc, #4	; (adr r2, 800d4ec <UART_SetConfig+0x4bc>)
 800d4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ec:	0800d511 	.word	0x0800d511
 800d4f0:	0800d519 	.word	0x0800d519
 800d4f4:	0800d521 	.word	0x0800d521
 800d4f8:	0800d537 	.word	0x0800d537
 800d4fc:	0800d527 	.word	0x0800d527
 800d500:	0800d537 	.word	0x0800d537
 800d504:	0800d537 	.word	0x0800d537
 800d508:	0800d537 	.word	0x0800d537
 800d50c:	0800d52f 	.word	0x0800d52f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d510:	f7fd fede 	bl	800b2d0 <HAL_RCC_GetPCLK1Freq>
 800d514:	61f8      	str	r0, [r7, #28]
        break;
 800d516:	e014      	b.n	800d542 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d518:	f7fd fef0 	bl	800b2fc <HAL_RCC_GetPCLK2Freq>
 800d51c:	61f8      	str	r0, [r7, #28]
        break;
 800d51e:	e010      	b.n	800d542 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d520:	4b1e      	ldr	r3, [pc, #120]	; (800d59c <UART_SetConfig+0x56c>)
 800d522:	61fb      	str	r3, [r7, #28]
        break;
 800d524:	e00d      	b.n	800d542 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d526:	f7fd fe3b 	bl	800b1a0 <HAL_RCC_GetSysClockFreq>
 800d52a:	61f8      	str	r0, [r7, #28]
        break;
 800d52c:	e009      	b.n	800d542 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d52e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d532:	61fb      	str	r3, [r7, #28]
        break;
 800d534:	e005      	b.n	800d542 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d536:	2300      	movs	r3, #0
 800d538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d540:	bf00      	nop
    }

    if (pclk != 0U)
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d019      	beq.n	800d57c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	085a      	lsrs	r2, r3, #1
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	441a      	add	r2, r3
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	fbb2 f3f3 	udiv	r3, r2, r3
 800d55a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	2b0f      	cmp	r3, #15
 800d560:	d909      	bls.n	800d576 <UART_SetConfig+0x546>
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d568:	d205      	bcs.n	800d576 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	60da      	str	r2, [r3, #12]
 800d574:	e002      	b.n	800d57c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d576:	2301      	movs	r3, #1
 800d578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2200      	movs	r2, #0
 800d580:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d588:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3728      	adds	r7, #40	; 0x28
 800d590:	46bd      	mov	sp, r7
 800d592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d596:	bf00      	nop
 800d598:	40008000 	.word	0x40008000
 800d59c:	00f42400 	.word	0x00f42400

0800d5a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00a      	beq.n	800d5ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	430a      	orrs	r2, r1
 800d5c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	f003 0302 	and.w	r3, r3, #2
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00a      	beq.n	800d5ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	430a      	orrs	r2, r1
 800d5ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f0:	f003 0304 	and.w	r3, r3, #4
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00a      	beq.n	800d60e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	430a      	orrs	r2, r1
 800d60c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d612:	f003 0308 	and.w	r3, r3, #8
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00a      	beq.n	800d630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	430a      	orrs	r2, r1
 800d62e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d634:	f003 0310 	and.w	r3, r3, #16
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00a      	beq.n	800d652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	430a      	orrs	r2, r1
 800d650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d656:	f003 0320 	and.w	r3, r3, #32
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00a      	beq.n	800d674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	430a      	orrs	r2, r1
 800d672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d01a      	beq.n	800d6b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	430a      	orrs	r2, r1
 800d694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d69e:	d10a      	bne.n	800d6b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	430a      	orrs	r2, r1
 800d6b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00a      	beq.n	800d6d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	430a      	orrs	r2, r1
 800d6d6:	605a      	str	r2, [r3, #4]
  }
}
 800d6d8:	bf00      	nop
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af02      	add	r7, sp, #8
 800d6ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d6f4:	f7fb fad0 	bl	8008c98 <HAL_GetTick>
 800d6f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f003 0308 	and.w	r3, r3, #8
 800d704:	2b08      	cmp	r3, #8
 800d706:	d10e      	bne.n	800d726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f82d 	bl	800d776 <UART_WaitOnFlagUntilTimeout>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d722:	2303      	movs	r3, #3
 800d724:	e023      	b.n	800d76e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f003 0304 	and.w	r3, r3, #4
 800d730:	2b04      	cmp	r3, #4
 800d732:	d10e      	bne.n	800d752 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 f817 	bl	800d776 <UART_WaitOnFlagUntilTimeout>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d74e:	2303      	movs	r3, #3
 800d750:	e00d      	b.n	800d76e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2220      	movs	r2, #32
 800d756:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2220      	movs	r2, #32
 800d75c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b09c      	sub	sp, #112	; 0x70
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	60f8      	str	r0, [r7, #12]
 800d77e:	60b9      	str	r1, [r7, #8]
 800d780:	603b      	str	r3, [r7, #0]
 800d782:	4613      	mov	r3, r2
 800d784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d786:	e0a5      	b.n	800d8d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78e:	f000 80a1 	beq.w	800d8d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d792:	f7fb fa81 	bl	8008c98 <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d302      	bcc.n	800d7a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800d7a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d13e      	bne.n	800d826 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7b0:	e853 3f00 	ldrex	r3, [r3]
 800d7b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d7b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d7bc:	667b      	str	r3, [r7, #100]	; 0x64
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d7cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d7ce:	e841 2300 	strex	r3, r2, [r1]
 800d7d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d7d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1e6      	bne.n	800d7a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	3308      	adds	r3, #8
 800d7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e4:	e853 3f00 	ldrex	r3, [r3]
 800d7e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ec:	f023 0301 	bic.w	r3, r3, #1
 800d7f0:	663b      	str	r3, [r7, #96]	; 0x60
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d7fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800d7fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d802:	e841 2300 	strex	r3, r2, [r1]
 800d806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1e5      	bne.n	800d7da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2220      	movs	r2, #32
 800d812:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2220      	movs	r2, #32
 800d818:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d822:	2303      	movs	r3, #3
 800d824:	e067      	b.n	800d8f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f003 0304 	and.w	r3, r3, #4
 800d830:	2b00      	cmp	r3, #0
 800d832:	d04f      	beq.n	800d8d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	69db      	ldr	r3, [r3, #28]
 800d83a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d83e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d842:	d147      	bne.n	800d8d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d84c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d856:	e853 3f00 	ldrex	r3, [r3]
 800d85a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d862:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	461a      	mov	r2, r3
 800d86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d86c:	637b      	str	r3, [r7, #52]	; 0x34
 800d86e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d874:	e841 2300 	strex	r3, r2, [r1]
 800d878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d1e6      	bne.n	800d84e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	3308      	adds	r3, #8
 800d886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	e853 3f00 	ldrex	r3, [r3]
 800d88e:	613b      	str	r3, [r7, #16]
   return(result);
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	f023 0301 	bic.w	r3, r3, #1
 800d896:	66bb      	str	r3, [r7, #104]	; 0x68
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	3308      	adds	r3, #8
 800d89e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d8a0:	623a      	str	r2, [r7, #32]
 800d8a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a4:	69f9      	ldr	r1, [r7, #28]
 800d8a6:	6a3a      	ldr	r2, [r7, #32]
 800d8a8:	e841 2300 	strex	r3, r2, [r1]
 800d8ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1e5      	bne.n	800d880 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2220      	movs	r2, #32
 800d8b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2220      	movs	r2, #32
 800d8be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2220      	movs	r2, #32
 800d8c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d8d0:	2303      	movs	r3, #3
 800d8d2:	e010      	b.n	800d8f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	69da      	ldr	r2, [r3, #28]
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	4013      	ands	r3, r2
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	bf0c      	ite	eq
 800d8e4:	2301      	moveq	r3, #1
 800d8e6:	2300      	movne	r3, #0
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	79fb      	ldrb	r3, [r7, #7]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	f43f af4a 	beq.w	800d788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3770      	adds	r7, #112	; 0x70
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b096      	sub	sp, #88	; 0x58
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	4613      	mov	r3, r2
 800d90c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	88fa      	ldrh	r2, [r7, #6]
 800d918:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2222      	movs	r2, #34	; 0x22
 800d928:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d02b      	beq.n	800d98a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d936:	4a42      	ldr	r2, [pc, #264]	; (800da40 <UART_Start_Receive_DMA+0x140>)
 800d938:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93e:	4a41      	ldr	r2, [pc, #260]	; (800da44 <UART_Start_Receive_DMA+0x144>)
 800d940:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d946:	4a40      	ldr	r2, [pc, #256]	; (800da48 <UART_Start_Receive_DMA+0x148>)
 800d948:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d94e:	2200      	movs	r2, #0
 800d950:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3324      	adds	r3, #36	; 0x24
 800d95c:	4619      	mov	r1, r3
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d962:	461a      	mov	r2, r3
 800d964:	88fb      	ldrh	r3, [r7, #6]
 800d966:	f7fb fc7b 	bl	8009260 <HAL_DMA_Start_IT>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00c      	beq.n	800d98a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2210      	movs	r2, #16
 800d974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2220      	movs	r2, #32
 800d984:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	e055      	b.n	800da36 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2200      	movs	r2, #0
 800d98e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d018      	beq.n	800d9cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9a2:	e853 3f00 	ldrex	r3, [r3]
 800d9a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9ae:	657b      	str	r3, [r7, #84]	; 0x54
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9ba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9c0:	e841 2300 	strex	r3, r2, [r1]
 800d9c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1e6      	bne.n	800d99a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	3308      	adds	r3, #8
 800d9d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d6:	e853 3f00 	ldrex	r3, [r3]
 800d9da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9de:	f043 0301 	orr.w	r3, r3, #1
 800d9e2:	653b      	str	r3, [r7, #80]	; 0x50
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	3308      	adds	r3, #8
 800d9ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9ec:	637a      	str	r2, [r7, #52]	; 0x34
 800d9ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9f4:	e841 2300 	strex	r3, r2, [r1]
 800d9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1e5      	bne.n	800d9cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	3308      	adds	r3, #8
 800da06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	e853 3f00 	ldrex	r3, [r3]
 800da0e:	613b      	str	r3, [r7, #16]
   return(result);
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	3308      	adds	r3, #8
 800da1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da20:	623a      	str	r2, [r7, #32]
 800da22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da24:	69f9      	ldr	r1, [r7, #28]
 800da26:	6a3a      	ldr	r2, [r7, #32]
 800da28:	e841 2300 	strex	r3, r2, [r1]
 800da2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1e5      	bne.n	800da00 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3758      	adds	r7, #88	; 0x58
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	0800db5f 	.word	0x0800db5f
 800da44:	0800dc83 	.word	0x0800dc83
 800da48:	0800dcbb 	.word	0x0800dcbb

0800da4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b089      	sub	sp, #36	; 0x24
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	e853 3f00 	ldrex	r3, [r3]
 800da60:	60bb      	str	r3, [r7, #8]
   return(result);
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da68:	61fb      	str	r3, [r7, #28]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	461a      	mov	r2, r3
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	61bb      	str	r3, [r7, #24]
 800da74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da76:	6979      	ldr	r1, [r7, #20]
 800da78:	69ba      	ldr	r2, [r7, #24]
 800da7a:	e841 2300 	strex	r3, r2, [r1]
 800da7e:	613b      	str	r3, [r7, #16]
   return(result);
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1e6      	bne.n	800da54 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2220      	movs	r2, #32
 800da8a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800da8c:	bf00      	nop
 800da8e:	3724      	adds	r7, #36	; 0x24
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da98:	b480      	push	{r7}
 800da9a:	b095      	sub	sp, #84	; 0x54
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa8:	e853 3f00 	ldrex	r3, [r3]
 800daac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	461a      	mov	r2, r3
 800dabc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dabe:	643b      	str	r3, [r7, #64]	; 0x40
 800dac0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dac6:	e841 2300 	strex	r3, r2, [r1]
 800daca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1e6      	bne.n	800daa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3308      	adds	r3, #8
 800dad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dada:	6a3b      	ldr	r3, [r7, #32]
 800dadc:	e853 3f00 	ldrex	r3, [r3]
 800dae0:	61fb      	str	r3, [r7, #28]
   return(result);
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	f023 0301 	bic.w	r3, r3, #1
 800dae8:	64bb      	str	r3, [r7, #72]	; 0x48
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	3308      	adds	r3, #8
 800daf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800daf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800daf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800daf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dafa:	e841 2300 	strex	r3, r2, [r1]
 800dafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1e5      	bne.n	800dad2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d118      	bne.n	800db40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	e853 3f00 	ldrex	r3, [r3]
 800db1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	f023 0310 	bic.w	r3, r3, #16
 800db22:	647b      	str	r3, [r7, #68]	; 0x44
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	461a      	mov	r2, r3
 800db2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db2c:	61bb      	str	r3, [r7, #24]
 800db2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db30:	6979      	ldr	r1, [r7, #20]
 800db32:	69ba      	ldr	r2, [r7, #24]
 800db34:	e841 2300 	strex	r3, r2, [r1]
 800db38:	613b      	str	r3, [r7, #16]
   return(result);
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1e6      	bne.n	800db0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2220      	movs	r2, #32
 800db44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	665a      	str	r2, [r3, #100]	; 0x64
}
 800db52:	bf00      	nop
 800db54:	3754      	adds	r7, #84	; 0x54
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr

0800db5e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b09c      	sub	sp, #112	; 0x70
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 0320 	and.w	r3, r3, #32
 800db76:	2b00      	cmp	r3, #0
 800db78:	d170      	bne.n	800dc5c <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800db7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db7c:	2200      	movs	r2, #0
 800db7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db8a:	e853 3f00 	ldrex	r3, [r3]
 800db8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db96:	66bb      	str	r3, [r7, #104]	; 0x68
 800db98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	461a      	mov	r2, r3
 800db9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dba0:	65bb      	str	r3, [r7, #88]	; 0x58
 800dba2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dba6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dba8:	e841 2300 	strex	r3, r2, [r1]
 800dbac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dbae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1e6      	bne.n	800db82 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3308      	adds	r3, #8
 800dbba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbe:	e853 3f00 	ldrex	r3, [r3]
 800dbc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc6:	f023 0301 	bic.w	r3, r3, #1
 800dbca:	667b      	str	r3, [r7, #100]	; 0x64
 800dbcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dbd4:	647a      	str	r2, [r7, #68]	; 0x44
 800dbd6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dbda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbdc:	e841 2300 	strex	r3, r2, [r1]
 800dbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1e5      	bne.n	800dbb4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3308      	adds	r3, #8
 800dbee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	e853 3f00 	ldrex	r3, [r3]
 800dbf6:	623b      	str	r3, [r7, #32]
   return(result);
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
 800dbfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbfe:	663b      	str	r3, [r7, #96]	; 0x60
 800dc00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3308      	adds	r3, #8
 800dc06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc08:	633a      	str	r2, [r7, #48]	; 0x30
 800dc0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc10:	e841 2300 	strex	r3, r2, [r1]
 800dc14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1e5      	bne.n	800dbe8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dc1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc1e:	2220      	movs	r2, #32
 800dc20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d118      	bne.n	800dc5c <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	e853 3f00 	ldrex	r3, [r3]
 800dc36:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f023 0310 	bic.w	r3, r3, #16
 800dc3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	461a      	mov	r2, r3
 800dc46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc48:	61fb      	str	r3, [r7, #28]
 800dc4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4c:	69b9      	ldr	r1, [r7, #24]
 800dc4e:	69fa      	ldr	r2, [r7, #28]
 800dc50:	e841 2300 	strex	r3, r2, [r1]
 800dc54:	617b      	str	r3, [r7, #20]
   return(result);
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1e6      	bne.n	800dc2a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d107      	bne.n	800dc74 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dc6e:	f7ff f9d3 	bl	800d018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc72:	e002      	b.n	800dc7a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800dc74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dc76:	f7ff f9b1 	bl	800cfdc <HAL_UART_RxCpltCallback>
}
 800dc7a:	bf00      	nop
 800dc7c:	3770      	adds	r7, #112	; 0x70
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b084      	sub	sp, #16
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc8e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d109      	bne.n	800dcac <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dc9e:	085b      	lsrs	r3, r3, #1
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	4619      	mov	r1, r3
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f7ff f9b7 	bl	800d018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dcaa:	e002      	b.n	800dcb2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f7ff f99f 	bl	800cff0 <HAL_UART_RxHalfCpltCallback>
}
 800dcb2:	bf00      	nop
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b086      	sub	sp, #24
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dccc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcd2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcde:	2b80      	cmp	r3, #128	; 0x80
 800dce0:	d109      	bne.n	800dcf6 <UART_DMAError+0x3c>
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	2b21      	cmp	r3, #33	; 0x21
 800dce6:	d106      	bne.n	800dcf6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	2200      	movs	r2, #0
 800dcec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800dcf0:	6978      	ldr	r0, [r7, #20]
 800dcf2:	f7ff feab 	bl	800da4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd00:	2b40      	cmp	r3, #64	; 0x40
 800dd02:	d109      	bne.n	800dd18 <UART_DMAError+0x5e>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2b22      	cmp	r3, #34	; 0x22
 800dd08:	d106      	bne.n	800dd18 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800dd12:	6978      	ldr	r0, [r7, #20]
 800dd14:	f7ff fec0 	bl	800da98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd1e:	f043 0210 	orr.w	r2, r3, #16
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd28:	6978      	ldr	r0, [r7, #20]
 800dd2a:	f7ff f96b 	bl	800d004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd2e:	bf00      	nop
 800dd30:	3718      	adds	r7, #24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DynamicInclinometer_Init();
 800dd3a:	f000 f821 	bl	800dd80 <MX_DynamicInclinometer_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800dd3e:	bf00      	nop
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DynamicInclinometer_Process();
 800dd46:	f000 f849 	bl	800dddc <MX_DynamicInclinometer_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800dd4a:	bf00      	nop
 800dd4c:	bd80      	pop	{r7, pc}
	...

0800dd50 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	4b06      	ldr	r3, [pc, #24]	; (800dd78 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d102      	bne.n	800dd6a <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 800dd64:	4b05      	ldr	r3, [pc, #20]	; (800dd7c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800dd66:	2201      	movs	r2, #1
 800dd68:	701a      	strb	r2, [r3, #0]
  }
}
 800dd6a:	bf00      	nop
 800dd6c:	370c      	adds	r7, #12
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop
 800dd78:	200024fc 	.word	0x200024fc
 800dd7c:	20001cb4 	.word	0x20001cb4

0800dd80 <MX_DynamicInclinometer_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DynamicInclinometer_Init(void)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 800dd84:	2000      	movs	r0, #0
 800dd86:	f002 f931 	bl	800ffec <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800dd8a:	2000      	movs	r0, #0
 800dd8c:	f002 f9aa 	bl	80100e4 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 800dd90:	f001 fd2e 	bl	800f7f0 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 800dd94:	2064      	movs	r0, #100	; 0x64
 800dd96:	f000 fc29 	bl	800e5ec <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 800dd9a:	f000 f893 	bl	800dec4 <Init_Sensors>

  /* DynamicInclinometer API initialization function */
  MotionDI_manager_init((int)ALGO_FREQ);
 800dd9e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ddd0 <MX_DynamicInclinometer_Init+0x50>
 800dda2:	f001 fdf1 	bl	800f988 <MotionDI_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionDI_manager_get_version(LibVersion, &LibVersionLen);
 800dda6:	490b      	ldr	r1, [pc, #44]	; (800ddd4 <MX_DynamicInclinometer_Init+0x54>)
 800dda8:	480b      	ldr	r0, [pc, #44]	; (800ddd8 <MX_DynamicInclinometer_Init+0x58>)
 800ddaa:	f001 fef1 	bl	800fb90 <MotionDI_manager_get_version>

  DWT_Init();
 800ddae:	f000 fc51 	bl	800e654 <DWT_Init>

  BSP_LED_On(LED2);
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	f002 f92c 	bl	8010010 <BSP_LED_On>
  HAL_Delay(500);
 800ddb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ddbc:	f7fa ff78 	bl	8008cb0 <HAL_Delay>
  BSP_LED_Off(LED2);
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	f002 f93b 	bl	801003c <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 800ddc6:	f000 fd69 	bl	800e89c <UART_StartReceiveMsg>
}
 800ddca:	bf00      	nop
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	42c80000 	.word	0x42c80000
 800ddd4:	20001cb0 	.word	0x20001cb0
 800ddd8:	20001c8c 	.word	0x20001c8c

0800dddc <MX_DynamicInclinometer_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_DynamicInclinometer_Process(void)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 800dde2:	4832      	ldr	r0, [pc, #200]	; (800deac <MX_DynamicInclinometer_Process+0xd0>)
 800dde4:	f000 fc88 	bl	800e6f8 <UART_ReceivedMSG>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d106      	bne.n	800ddfc <MX_DynamicInclinometer_Process+0x20>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 800ddee:	4b2f      	ldr	r3, [pc, #188]	; (800deac <MX_DynamicInclinometer_Process+0xd0>)
 800ddf0:	791b      	ldrb	r3, [r3, #4]
 800ddf2:	2b32      	cmp	r3, #50	; 0x32
 800ddf4:	d102      	bne.n	800ddfc <MX_DynamicInclinometer_Process+0x20>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 800ddf6:	482d      	ldr	r0, [pc, #180]	; (800deac <MX_DynamicInclinometer_Process+0xd0>)
 800ddf8:	f000 fe9a 	bl	800eb30 <HandleMSG>





  if (SensorReadRequest == 1U)
 800ddfc:	4b2c      	ldr	r3, [pc, #176]	; (800deb0 <MX_DynamicInclinometer_Process+0xd4>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	b2db      	uxtb	r3, r3
 800de02:	2b01      	cmp	r3, #1
 800de04:	d14e      	bne.n	800dea4 <MX_DynamicInclinometer_Process+0xc8>
  {
    SensorReadRequest = 0;
 800de06:	4b2a      	ldr	r3, [pc, #168]	; (800deb0 <MX_DynamicInclinometer_Process+0xd4>)
 800de08:	2200      	movs	r2, #0
 800de0a:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800de0c:	4829      	ldr	r0, [pc, #164]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de0e:	f000 f873 	bl	800def8 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 800de12:	4828      	ldr	r0, [pc, #160]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de14:	f000 fa4c 	bl	800e2b0 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 800de18:	4826      	ldr	r0, [pc, #152]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de1a:	f000 faa3 	bl	800e364 <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 800de1e:	4825      	ldr	r0, [pc, #148]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de20:	f000 fafa 	bl	800e418 <Magneto_Sensor_Handler>
    Humidity_Sensor_Handler(&msg_dat);
 800de24:	4823      	ldr	r0, [pc, #140]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de26:	f000 fbb1 	bl	800e58c <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat);
 800de2a:	4822      	ldr	r0, [pc, #136]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de2c:	f000 fb7e 	bl	800e52c <Temperature_Sensor_Handler>
    Pressure_Sensor_Handler(&msg_dat);
 800de30:	4820      	ldr	r0, [pc, #128]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de32:	f000 fb4b 	bl	800e4cc <Pressure_Sensor_Handler>

    /* DynamicInclinometer specific part */
    DI_Data_Handler(&msg_dat, &msg_cmd);
 800de36:	491d      	ldr	r1, [pc, #116]	; (800deac <MX_DynamicInclinometer_Process+0xd0>)
 800de38:	481e      	ldr	r0, [pc, #120]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de3a:	f000 f8d1 	bl	800dfe0 <DI_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 800de3e:	481d      	ldr	r0, [pc, #116]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de40:	f000 fe5c 	bl	800eafc <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 800de44:	4b1b      	ldr	r3, [pc, #108]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de46:	2295      	movs	r2, #149	; 0x95
 800de48:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 800de4a:	4b1b      	ldr	r3, [pc, #108]	; (800deb8 <MX_DynamicInclinometer_Process+0xdc>)
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d11e      	bne.n	800de90 <MX_DynamicInclinometer_Process+0xb4>
    {
      OfflineDataCount--;
 800de52:	4b1a      	ldr	r3, [pc, #104]	; (800debc <MX_DynamicInclinometer_Process+0xe0>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	3b01      	subs	r3, #1
 800de58:	4a18      	ldr	r2, [pc, #96]	; (800debc <MX_DynamicInclinometer_Process+0xe0>)
 800de5a:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 800de5c:	4b17      	ldr	r3, [pc, #92]	; (800debc <MX_DynamicInclinometer_Process+0xe0>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	da02      	bge.n	800de6a <MX_DynamicInclinometer_Process+0x8e>
      {
        OfflineDataCount = 0;
 800de64:	4b15      	ldr	r3, [pc, #84]	; (800debc <MX_DynamicInclinometer_Process+0xe0>)
 800de66:	2200      	movs	r2, #0
 800de68:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 800de6a:	4b15      	ldr	r3, [pc, #84]	; (800dec0 <MX_DynamicInclinometer_Process+0xe4>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	3301      	adds	r3, #1
 800de70:	4a13      	ldr	r2, [pc, #76]	; (800dec0 <MX_DynamicInclinometer_Process+0xe4>)
 800de72:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 800de74:	4b12      	ldr	r3, [pc, #72]	; (800dec0 <MX_DynamicInclinometer_Process+0xe4>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b07      	cmp	r3, #7
 800de7a:	dd02      	ble.n	800de82 <MX_DynamicInclinometer_Process+0xa6>
      {
        OfflineDataReadIndex = 0;
 800de7c:	4b10      	ldr	r3, [pc, #64]	; (800dec0 <MX_DynamicInclinometer_Process+0xe4>)
 800de7e:	2200      	movs	r2, #0
 800de80:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 800de82:	4b0e      	ldr	r3, [pc, #56]	; (800debc <MX_DynamicInclinometer_Process+0xe0>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	dd02      	ble.n	800de90 <MX_DynamicInclinometer_Process+0xb4>
      {
        SensorReadRequest = 1;
 800de8a:	4b09      	ldr	r3, [pc, #36]	; (800deb0 <MX_DynamicInclinometer_Process+0xd4>)
 800de8c:	2201      	movs	r2, #1
 800de8e:	701a      	strb	r2, [r3, #0]
      }
    }

    //ADD FOR DEBUG--------------------------------------------------
    uint8_t buf_TX_inclinaison[12];
	memcpy(buf_TX_inclinaison, &msg_dat.Data[71], 12);
 800de90:	4a08      	ldr	r2, [pc, #32]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800de92:	1d3b      	adds	r3, r7, #4
 800de94:	324b      	adds	r2, #75	; 0x4b
 800de96:	6810      	ldr	r0, [r2, #0]
 800de98:	6851      	ldr	r1, [r2, #4]
 800de9a:	6892      	ldr	r2, [r2, #8]
 800de9c:	c307      	stmia	r3!, {r0, r1, r2}
	//HAL_UART_Transmit(&huart2, (uint8_t *)buf_TX_inclinaison, 12, 5000);
	//ADD FOR DEBUG--------------------------------------------------



    UART_SendMsg(&msg_dat);
 800de9e:	4805      	ldr	r0, [pc, #20]	; (800deb4 <MX_DynamicInclinometer_Process+0xd8>)
 800dea0:	f000 fce0 	bl	800e864 <UART_SendMsg>
  }
}
 800dea4:	bf00      	nop
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	20001ea0 	.word	0x20001ea0
 800deb0:	20001cb4 	.word	0x20001cb4
 800deb4:	20001fa4 	.word	0x20001fa4
 800deb8:	20001cb5 	.word	0x20001cb5
 800debc:	20001e60 	.word	0x20001e60
 800dec0:	20001e58 	.word	0x20001e58

0800dec4 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800dec8:	f001 fa8a 	bl	800f3e0 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800decc:	f001 fa90 	bl	800f3f0 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800ded0:	f001 fa96 	bl	800f400 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800ded4:	f001 fa9c 	bl	800f410 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800ded8:	f001 faa2 	bl	800f420 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800dedc:	f001 faa8 	bl	800f430 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 800dee0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800def4 <Init_Sensors+0x30>
 800dee4:	f001 fb5a 	bl	800f59c <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 800dee8:	2002      	movs	r0, #2
 800deea:	f001 fb66 	bl	800f5ba <BSP_SENSOR_ACC_SetFullScale>
}
 800deee:	bf00      	nop
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	42c80000 	.word	0x42c80000

0800def8 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b08c      	sub	sp, #48	; 0x30
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800df06:	4b32      	ldr	r3, [pc, #200]	; (800dfd0 <RTC_Handler+0xd8>)
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 800df0c:	4b31      	ldr	r3, [pc, #196]	; (800dfd4 <RTC_Handler+0xdc>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d12b      	bne.n	800df6c <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 800df14:	4b30      	ldr	r3, [pc, #192]	; (800dfd8 <RTC_Handler+0xe0>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a30      	ldr	r2, [pc, #192]	; (800dfdc <RTC_Handler+0xe4>)
 800df1a:	2134      	movs	r1, #52	; 0x34
 800df1c:	fb01 f303 	mul.w	r3, r1, r3
 800df20:	4413      	add	r3, r2
 800df22:	781a      	ldrb	r2, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 800df28:	4b2b      	ldr	r3, [pc, #172]	; (800dfd8 <RTC_Handler+0xe0>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a2b      	ldr	r2, [pc, #172]	; (800dfdc <RTC_Handler+0xe4>)
 800df2e:	2134      	movs	r1, #52	; 0x34
 800df30:	fb01 f303 	mul.w	r3, r1, r3
 800df34:	4413      	add	r3, r2
 800df36:	3301      	adds	r3, #1
 800df38:	781a      	ldrb	r2, [r3, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 800df3e:	4b26      	ldr	r3, [pc, #152]	; (800dfd8 <RTC_Handler+0xe0>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a26      	ldr	r2, [pc, #152]	; (800dfdc <RTC_Handler+0xe4>)
 800df44:	2134      	movs	r1, #52	; 0x34
 800df46:	fb01 f303 	mul.w	r3, r1, r3
 800df4a:	4413      	add	r3, r2
 800df4c:	3302      	adds	r3, #2
 800df4e:	781a      	ldrb	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 800df54:	4b20      	ldr	r3, [pc, #128]	; (800dfd8 <RTC_Handler+0xe0>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a20      	ldr	r2, [pc, #128]	; (800dfdc <RTC_Handler+0xe4>)
 800df5a:	2134      	movs	r1, #52	; 0x34
 800df5c:	fb01 f303 	mul.w	r3, r1, r3
 800df60:	4413      	add	r3, r2
 800df62:	3303      	adds	r3, #3
 800df64:	781a      	ldrb	r2, [r3, #0]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 800df6a:	e02d      	b.n	800dfc8 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 800df6c:	f107 0308 	add.w	r3, r7, #8
 800df70:	2200      	movs	r2, #0
 800df72:	4619      	mov	r1, r3
 800df74:	4816      	ldr	r0, [pc, #88]	; (800dfd0 <RTC_Handler+0xd8>)
 800df76:	f7fe f80b 	bl	800bf90 <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 800df7a:	f107 031c 	add.w	r3, r7, #28
 800df7e:	2200      	movs	r2, #0
 800df80:	4619      	mov	r1, r3
 800df82:	4813      	ldr	r0, [pc, #76]	; (800dfd0 <RTC_Handler+0xd8>)
 800df84:	f7fe f8e7 	bl	800c156 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	2264      	movs	r2, #100	; 0x64
 800df90:	fb02 f303 	mul.w	r3, r2, r3
 800df94:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 800df96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	3301      	adds	r3, #1
 800df9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa0:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 800dfa8:	6a3b      	ldr	r3, [r7, #32]
 800dfaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800dfae:	7a3a      	ldrb	r2, [r7, #8]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800dfb4:	7a7a      	ldrb	r2, [r7, #9]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800dfba:	7aba      	ldrb	r2, [r7, #10]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dfc6:	729a      	strb	r2, [r3, #10]
}
 800dfc8:	bf00      	nop
 800dfca:	3730      	adds	r7, #48	; 0x30
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	200024d8 	.word	0x200024d8
 800dfd4:	20001cb5 	.word	0x20001cb5
 800dfd8:	20001e58 	.word	0x20001e58
 800dfdc:	20001cb8 	.word	0x20001cb8

0800dfe0 <DI_Data_Handler>:
 * @param  Msg the Dynamic Inclinometer data part of the stream
 * @param  Cmd the Dynamic Inclinometer command to GUI
 * @retval None
 */
static void DI_Data_Handler(TMsg *Msg, TMsg *Cmd)
{
 800dfe0:	b5b0      	push	{r4, r5, r7, lr}
 800dfe2:	b0b4      	sub	sp, #208	; 0xd0
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  uint32_t         elapsed_time_us = 0U;
 800dfea:	2300      	movs	r3, #0
 800dfec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  MDI_cal_type_t   acc_cal_mode;
  MDI_cal_type_t   gyro_cal_mode;
  MDI_cal_output_t acc_cal;
  MDI_cal_output_t gyro_cal;

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800dff0:	4ba7      	ldr	r3, [pc, #668]	; (800e290 <DI_Data_Handler+0x2b0>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f003 0310 	and.w	r3, r3, #16
 800dff8:	2b10      	cmp	r3, #16
 800dffa:	f040 8145 	bne.w	800e288 <DI_Data_Handler+0x2a8>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800dffe:	4ba4      	ldr	r3, [pc, #656]	; (800e290 <DI_Data_Handler+0x2b0>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f003 0320 	and.w	r3, r3, #32
 800e006:	2b20      	cmp	r3, #32
 800e008:	f040 813e 	bne.w	800e288 <DI_Data_Handler+0x2a8>
    {
      /* Convert acceleration from [mg] to [g] */
      data_in.Acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800e00c:	4ba1      	ldr	r3, [pc, #644]	; (800e294 <DI_Data_Handler+0x2b4>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	ee07 3a90 	vmov	s15, r3
 800e014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e018:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800e298 <DI_Data_Handler+0x2b8>
 800e01c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e020:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
      data_in.Acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800e024:	4b9b      	ldr	r3, [pc, #620]	; (800e294 <DI_Data_Handler+0x2b4>)
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	ee07 3a90 	vmov	s15, r3
 800e02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e030:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800e298 <DI_Data_Handler+0x2b8>
 800e034:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e038:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
      data_in.Acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800e03c:	4b95      	ldr	r3, [pc, #596]	; (800e294 <DI_Data_Handler+0x2b4>)
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	ee07 3a90 	vmov	s15, r3
 800e044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e048:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e298 <DI_Data_Handler+0x2b8>
 800e04c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e050:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

      /* Convert angular velocity from [mdps] to [dps] */
      data_in.Gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800e054:	4b91      	ldr	r3, [pc, #580]	; (800e29c <DI_Data_Handler+0x2bc>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	ee07 3a90 	vmov	s15, r3
 800e05c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e060:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800e298 <DI_Data_Handler+0x2b8>
 800e064:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e068:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
      data_in.Gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800e06c:	4b8b      	ldr	r3, [pc, #556]	; (800e29c <DI_Data_Handler+0x2bc>)
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	ee07 3a90 	vmov	s15, r3
 800e074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e078:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800e298 <DI_Data_Handler+0x2b8>
 800e07c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e080:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
      data_in.Gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800e084:	4b85      	ldr	r3, [pc, #532]	; (800e29c <DI_Data_Handler+0x2bc>)
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	ee07 3a90 	vmov	s15, r3
 800e08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e090:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800e298 <DI_Data_Handler+0x2b8>
 800e094:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e098:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

      data_in.Timestamp = Timestamp;
 800e09c:	4b80      	ldr	r3, [pc, #512]	; (800e2a0 <DI_Data_Handler+0x2c0>)
 800e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a2:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
      Timestamp += ALGO_PERIOD;
 800e0a6:	4b7e      	ldr	r3, [pc, #504]	; (800e2a0 <DI_Data_Handler+0x2c0>)
 800e0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ac:	f242 7110 	movw	r1, #10000	; 0x2710
 800e0b0:	1854      	adds	r4, r2, r1
 800e0b2:	f143 0500 	adc.w	r5, r3, #0
 800e0b6:	4b7a      	ldr	r3, [pc, #488]	; (800e2a0 <DI_Data_Handler+0x2c0>)
 800e0b8:	e9c3 4500 	strd	r4, r5, [r3]

      /* Run Dynamic Inclinometer algorithm */
      BSP_LED_On(LED2);
 800e0bc:	2000      	movs	r0, #0
 800e0be:	f001 ffa7 	bl	8010010 <BSP_LED_On>
      DWT_Start();
 800e0c2:	f000 fadf 	bl	800e684 <DWT_Start>
      MotionDI_manager_run(&data_in, &data_out);
 800e0c6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800e0ca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f001 fd1f 	bl	800fb14 <MotionDI_manager_run>
      elapsed_time_us = DWT_Stop();
 800e0d6:	f000 fae7 	bl	800e6a8 <DWT_Stop>
 800e0da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
      BSP_LED_Off(LED2);
 800e0de:	2000      	movs	r0, #0
 800e0e0:	f001 ffac 	bl	801003c <BSP_LED_Off>

      /* Check calibration mode */
      MotionDI_get_acc_calibration_mode(&acc_cal_mode);
 800e0e4:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f001 fc93 	bl	800fa14 <MotionDI_get_acc_calibration_mode>
      MotionDI_get_gyro_calibration_mode(&gyro_cal_mode);
 800e0ee:	f107 0372 	add.w	r3, r7, #114	; 0x72
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f001 fcce 	bl	800fa94 <MotionDI_get_gyro_calibration_mode>

      if (acc_cal_mode != AccCalMode)
 800e0f8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800e0fc:	4b69      	ldr	r3, [pc, #420]	; (800e2a4 <DI_Data_Handler+0x2c4>)
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	429a      	cmp	r2, r3
 800e102:	d016      	beq.n	800e132 <DI_Data_Handler+0x152>
      {
        AccCalMode = acc_cal_mode;
 800e104:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800e108:	4b66      	ldr	r3, [pc, #408]	; (800e2a4 <DI_Data_Handler+0x2c4>)
 800e10a:	701a      	strb	r2, [r3, #0]

        INIT_STREAMING_HEADER(Cmd);
 800e10c:	6838      	ldr	r0, [r7, #0]
 800e10e:	f000 fcf5 	bl	800eafc <INIT_STREAMING_HEADER>
        Cmd->Data[2] = CMD_Calibration_Mode + CMD_Reply_Add;
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	22d3      	movs	r2, #211	; 0xd3
 800e116:	719a      	strb	r2, [r3, #6]
        Cmd->Data[3] = (uint8_t)ACCELEROMETER_SENSOR;
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2210      	movs	r2, #16
 800e11c:	71da      	strb	r2, [r3, #7]
        Cmd->Data[4] = (uint8_t)AccCalMode;
 800e11e:	4b61      	ldr	r3, [pc, #388]	; (800e2a4 <DI_Data_Handler+0x2c4>)
 800e120:	781a      	ldrb	r2, [r3, #0]
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	721a      	strb	r2, [r3, #8]
        Cmd->Len = 5;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	2205      	movs	r2, #5
 800e12a:	601a      	str	r2, [r3, #0]
        UART_SendMsg(Cmd);
 800e12c:	6838      	ldr	r0, [r7, #0]
 800e12e:	f000 fb99 	bl	800e864 <UART_SendMsg>
      }

      if (gyro_cal_mode != GyrCalMode)
 800e132:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800e136:	4b5c      	ldr	r3, [pc, #368]	; (800e2a8 <DI_Data_Handler+0x2c8>)
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d016      	beq.n	800e16c <DI_Data_Handler+0x18c>
      {
        GyrCalMode = gyro_cal_mode;
 800e13e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800e142:	4b59      	ldr	r3, [pc, #356]	; (800e2a8 <DI_Data_Handler+0x2c8>)
 800e144:	701a      	strb	r2, [r3, #0]

        INIT_STREAMING_HEADER(Cmd);
 800e146:	6838      	ldr	r0, [r7, #0]
 800e148:	f000 fcd8 	bl	800eafc <INIT_STREAMING_HEADER>
        Cmd->Data[2] = CMD_Calibration_Mode + CMD_Reply_Add;
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	22d3      	movs	r2, #211	; 0xd3
 800e150:	719a      	strb	r2, [r3, #6]
        Cmd->Data[3] = (uint8_t)GYROSCOPE_SENSOR;
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	2220      	movs	r2, #32
 800e156:	71da      	strb	r2, [r3, #7]
        Cmd->Data[4] = (uint8_t)GyrCalMode;
 800e158:	4b53      	ldr	r3, [pc, #332]	; (800e2a8 <DI_Data_Handler+0x2c8>)
 800e15a:	781a      	ldrb	r2, [r3, #0]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	721a      	strb	r2, [r3, #8]
        Cmd->Len = 5;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2205      	movs	r2, #5
 800e164:	601a      	str	r2, [r3, #0]
        UART_SendMsg(Cmd);
 800e166:	6838      	ldr	r0, [r7, #0]
 800e168:	f000 fb7c 	bl	800e864 <UART_SendMsg>
      }

      /* Get calibration parameters */
      MotionDI_get_acc_calibration(&acc_cal);
 800e16c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e170:	4618      	mov	r0, r3
 800e172:	f001 fc7d 	bl	800fa70 <MotionDI_get_acc_calibration>
      MotionDI_get_gyro_calibration(&gyro_cal);
 800e176:	f107 0308 	add.w	r3, r7, #8
 800e17a:	4618      	mov	r0, r3
 800e17c:	f001 fcb8 	bl	800faf0 <MotionDI_get_gyro_calibration>

      /* Convert accelerometer calibration parameters from [g] to [mg] */
      acc_cal.Bias[0] *= FROM_G_TO_MG;
 800e180:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e184:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e2ac <DI_Data_Handler+0x2cc>
 800e188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e18c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
      acc_cal.Bias[1] *= FROM_G_TO_MG;
 800e190:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800e194:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800e2ac <DI_Data_Handler+0x2cc>
 800e198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e19c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      acc_cal.Bias[2] *= FROM_G_TO_MG;
 800e1a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e1a4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e2ac <DI_Data_Handler+0x2cc>
 800e1a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

      /* Convert gyroscope calibration parameters from [dps] to [mdps] */
      gyro_cal.Bias[0] *= FROM_DPS_TO_MDPS;
 800e1b0:	edd7 7a02 	vldr	s15, [r7, #8]
 800e1b4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800e2ac <DI_Data_Handler+0x2cc>
 800e1b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1bc:	edc7 7a02 	vstr	s15, [r7, #8]
      gyro_cal.Bias[1] *= FROM_DPS_TO_MDPS;
 800e1c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800e1c4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800e2ac <DI_Data_Handler+0x2cc>
 800e1c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1cc:	edc7 7a03 	vstr	s15, [r7, #12]
      gyro_cal.Bias[2] *= FROM_DPS_TO_MDPS;
 800e1d0:	edd7 7a04 	vldr	s15, [r7, #16]
 800e1d4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800e2ac <DI_Data_Handler+0x2cc>
 800e1d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e1dc:	edc7 7a04 	vstr	s15, [r7, #16]

      (void)memcpy(&Msg->Data[55], (void *)data_out.quaternion, 4U * sizeof(float));
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800e1e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e1ea:	330c      	adds	r3, #12
 800e1ec:	2210      	movs	r2, #16
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	f00d f8a6 	bl	801b340 <memcpy>
      (void)memcpy(&Msg->Data[71], (void *)data_out.rotation, 3U * sizeof(float));
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	334b      	adds	r3, #75	; 0x4b
 800e1f8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800e1fc:	220c      	movs	r2, #12
 800e1fe:	4618      	mov	r0, r3
 800e200:	f00d f89e 	bl	801b340 <memcpy>
      (void)memcpy(&Msg->Data[83], (void *)data_out.gravity, 3U * sizeof(float));
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f103 0057 	add.w	r0, r3, #87	; 0x57
 800e20a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e20e:	331c      	adds	r3, #28
 800e210:	220c      	movs	r2, #12
 800e212:	4619      	mov	r1, r3
 800e214:	f00d f894 	bl	801b340 <memcpy>
      (void)memcpy(&Msg->Data[95], (void *)data_out.linear_acceleration, 3U * sizeof(float));
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f103 0063 	add.w	r0, r3, #99	; 0x63
 800e21e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e222:	3328      	adds	r3, #40	; 0x28
 800e224:	220c      	movs	r2, #12
 800e226:	4619      	mov	r1, r3
 800e228:	f00d f88a 	bl	801b340 <memcpy>

      (void)memcpy(&Msg->Data[107], (void *)acc_cal.Bias, 3U * sizeof(float));
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	336f      	adds	r3, #111	; 0x6f
 800e230:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800e234:	220c      	movs	r2, #12
 800e236:	4618      	mov	r0, r3
 800e238:	f00d f882 	bl	801b340 <memcpy>
      (void)memcpy(&Msg->Data[119], (void *) & (acc_cal.SF_Matrix[0][0]), sizeof(float));
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	337b      	adds	r3, #123	; 0x7b
 800e240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e242:	601a      	str	r2, [r3, #0]
      (void)memcpy(&Msg->Data[123], (void *) & (acc_cal.SF_Matrix[1][1]), sizeof(float));
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	337f      	adds	r3, #127	; 0x7f
 800e248:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e24a:	601a      	str	r2, [r3, #0]
      (void)memcpy(&Msg->Data[127], (void *) & (acc_cal.SF_Matrix[2][2]), sizeof(float));
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	3383      	adds	r3, #131	; 0x83
 800e250:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e252:	601a      	str	r2, [r3, #0]
      Msg->Data[131] = (uint8_t)acc_cal.CalQuality;
 800e254:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

      (void)memcpy(&Msg->Data[132], (void *)gyro_cal.Bias, 3U * sizeof(float));
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	3388      	adds	r3, #136	; 0x88
 800e262:	f107 0108 	add.w	r1, r7, #8
 800e266:	220c      	movs	r2, #12
 800e268:	4618      	mov	r0, r3
 800e26a:	f00d f869 	bl	801b340 <memcpy>
      Msg->Data[144] = (uint8_t)gyro_cal.CalQuality;
 800e26e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

      Serialize_s32(&Msg->Data[145], (int32_t)elapsed_time_us, 4);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	3395      	adds	r3, #149	; 0x95
 800e27c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800e280:	2204      	movs	r2, #4
 800e282:	4618      	mov	r0, r3
 800e284:	f001 fdac 	bl	800fde0 <Serialize_s32>
    }
  }
}
 800e288:	bf00      	nop
 800e28a:	37d0      	adds	r7, #208	; 0xd0
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bdb0      	pop	{r4, r5, r7, pc}
 800e290:	20001c88 	.word	0x20001c88
 800e294:	20001e68 	.word	0x20001e68
 800e298:	3a83126f 	.word	0x3a83126f
 800e29c:	20001e74 	.word	0x20001e74
 800e2a0:	20001e98 	.word	0x20001e98
 800e2a4:	20001e64 	.word	0x20001e64
 800e2a8:	20001e65 	.word	0x20001e65
 800e2ac:	447a0000 	.word	0x447a0000

0800e2b0 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800e2b8:	4b25      	ldr	r3, [pc, #148]	; (800e350 <Accelero_Sensor_Handler+0xa0>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f003 0310 	and.w	r3, r3, #16
 800e2c0:	2b10      	cmp	r3, #16
 800e2c2:	d140      	bne.n	800e346 <Accelero_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 800e2c4:	4b23      	ldr	r3, [pc, #140]	; (800e354 <Accelero_Sensor_Handler+0xa4>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d121      	bne.n	800e310 <Accelero_Sensor_Handler+0x60>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800e2cc:	4b22      	ldr	r3, [pc, #136]	; (800e358 <Accelero_Sensor_Handler+0xa8>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a22      	ldr	r2, [pc, #136]	; (800e35c <Accelero_Sensor_Handler+0xac>)
 800e2d2:	2134      	movs	r1, #52	; 0x34
 800e2d4:	fb01 f303 	mul.w	r3, r1, r3
 800e2d8:	4413      	add	r3, r2
 800e2da:	3310      	adds	r3, #16
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a20      	ldr	r2, [pc, #128]	; (800e360 <Accelero_Sensor_Handler+0xb0>)
 800e2e0:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 800e2e2:	4b1d      	ldr	r3, [pc, #116]	; (800e358 <Accelero_Sensor_Handler+0xa8>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a1d      	ldr	r2, [pc, #116]	; (800e35c <Accelero_Sensor_Handler+0xac>)
 800e2e8:	2134      	movs	r1, #52	; 0x34
 800e2ea:	fb01 f303 	mul.w	r3, r1, r3
 800e2ee:	4413      	add	r3, r2
 800e2f0:	3314      	adds	r3, #20
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a1a      	ldr	r2, [pc, #104]	; (800e360 <Accelero_Sensor_Handler+0xb0>)
 800e2f6:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 800e2f8:	4b17      	ldr	r3, [pc, #92]	; (800e358 <Accelero_Sensor_Handler+0xa8>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a17      	ldr	r2, [pc, #92]	; (800e35c <Accelero_Sensor_Handler+0xac>)
 800e2fe:	2134      	movs	r1, #52	; 0x34
 800e300:	fb01 f303 	mul.w	r3, r1, r3
 800e304:	4413      	add	r3, r2
 800e306:	3318      	adds	r3, #24
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a15      	ldr	r2, [pc, #84]	; (800e360 <Accelero_Sensor_Handler+0xb0>)
 800e30c:	6093      	str	r3, [r2, #8]
 800e30e:	e002      	b.n	800e316 <Accelero_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 800e310:	4813      	ldr	r0, [pc, #76]	; (800e360 <Accelero_Sensor_Handler+0xb0>)
 800e312:	f001 f8f5 	bl	800f500 <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	3317      	adds	r3, #23
 800e31a:	4a11      	ldr	r2, [pc, #68]	; (800e360 <Accelero_Sensor_Handler+0xb0>)
 800e31c:	6811      	ldr	r1, [r2, #0]
 800e31e:	2204      	movs	r2, #4
 800e320:	4618      	mov	r0, r3
 800e322:	f001 fd5d 	bl	800fde0 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	331b      	adds	r3, #27
 800e32a:	4a0d      	ldr	r2, [pc, #52]	; (800e360 <Accelero_Sensor_Handler+0xb0>)
 800e32c:	6851      	ldr	r1, [r2, #4]
 800e32e:	2204      	movs	r2, #4
 800e330:	4618      	mov	r0, r3
 800e332:	f001 fd55 	bl	800fde0 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	331f      	adds	r3, #31
 800e33a:	4a09      	ldr	r2, [pc, #36]	; (800e360 <Accelero_Sensor_Handler+0xb0>)
 800e33c:	6891      	ldr	r1, [r2, #8]
 800e33e:	2204      	movs	r2, #4
 800e340:	4618      	mov	r0, r3
 800e342:	f001 fd4d 	bl	800fde0 <Serialize_s32>
  }
}
 800e346:	bf00      	nop
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	20001c88 	.word	0x20001c88
 800e354:	20001cb5 	.word	0x20001cb5
 800e358:	20001e58 	.word	0x20001e58
 800e35c:	20001cb8 	.word	0x20001cb8
 800e360:	20001e68 	.word	0x20001e68

0800e364 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800e36c:	4b25      	ldr	r3, [pc, #148]	; (800e404 <Gyro_Sensor_Handler+0xa0>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f003 0320 	and.w	r3, r3, #32
 800e374:	2b20      	cmp	r3, #32
 800e376:	d140      	bne.n	800e3fa <Gyro_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 800e378:	4b23      	ldr	r3, [pc, #140]	; (800e408 <Gyro_Sensor_Handler+0xa4>)
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d121      	bne.n	800e3c4 <Gyro_Sensor_Handler+0x60>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 800e380:	4b22      	ldr	r3, [pc, #136]	; (800e40c <Gyro_Sensor_Handler+0xa8>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a22      	ldr	r2, [pc, #136]	; (800e410 <Gyro_Sensor_Handler+0xac>)
 800e386:	2134      	movs	r1, #52	; 0x34
 800e388:	fb01 f303 	mul.w	r3, r1, r3
 800e38c:	4413      	add	r3, r2
 800e38e:	331c      	adds	r3, #28
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4a20      	ldr	r2, [pc, #128]	; (800e414 <Gyro_Sensor_Handler+0xb0>)
 800e394:	6013      	str	r3, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 800e396:	4b1d      	ldr	r3, [pc, #116]	; (800e40c <Gyro_Sensor_Handler+0xa8>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a1d      	ldr	r2, [pc, #116]	; (800e410 <Gyro_Sensor_Handler+0xac>)
 800e39c:	2134      	movs	r1, #52	; 0x34
 800e39e:	fb01 f303 	mul.w	r3, r1, r3
 800e3a2:	4413      	add	r3, r2
 800e3a4:	3320      	adds	r3, #32
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a1a      	ldr	r2, [pc, #104]	; (800e414 <Gyro_Sensor_Handler+0xb0>)
 800e3aa:	6053      	str	r3, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800e3ac:	4b17      	ldr	r3, [pc, #92]	; (800e40c <Gyro_Sensor_Handler+0xa8>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a17      	ldr	r2, [pc, #92]	; (800e410 <Gyro_Sensor_Handler+0xac>)
 800e3b2:	2134      	movs	r1, #52	; 0x34
 800e3b4:	fb01 f303 	mul.w	r3, r1, r3
 800e3b8:	4413      	add	r3, r2
 800e3ba:	3324      	adds	r3, #36	; 0x24
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a15      	ldr	r2, [pc, #84]	; (800e414 <Gyro_Sensor_Handler+0xb0>)
 800e3c0:	6093      	str	r3, [r2, #8]
 800e3c2:	e002      	b.n	800e3ca <Gyro_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800e3c4:	4813      	ldr	r0, [pc, #76]	; (800e414 <Gyro_Sensor_Handler+0xb0>)
 800e3c6:	f001 f8a8 	bl	800f51a <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3323      	adds	r3, #35	; 0x23
 800e3ce:	4a11      	ldr	r2, [pc, #68]	; (800e414 <Gyro_Sensor_Handler+0xb0>)
 800e3d0:	6811      	ldr	r1, [r2, #0]
 800e3d2:	2204      	movs	r2, #4
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f001 fd03 	bl	800fde0 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	3327      	adds	r3, #39	; 0x27
 800e3de:	4a0d      	ldr	r2, [pc, #52]	; (800e414 <Gyro_Sensor_Handler+0xb0>)
 800e3e0:	6851      	ldr	r1, [r2, #4]
 800e3e2:	2204      	movs	r2, #4
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f001 fcfb 	bl	800fde0 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	332b      	adds	r3, #43	; 0x2b
 800e3ee:	4a09      	ldr	r2, [pc, #36]	; (800e414 <Gyro_Sensor_Handler+0xb0>)
 800e3f0:	6891      	ldr	r1, [r2, #8]
 800e3f2:	2204      	movs	r2, #4
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f001 fcf3 	bl	800fde0 <Serialize_s32>
  }
}
 800e3fa:	bf00      	nop
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20001c88 	.word	0x20001c88
 800e408:	20001cb5 	.word	0x20001cb5
 800e40c:	20001e58 	.word	0x20001e58
 800e410:	20001cb8 	.word	0x20001cb8
 800e414:	20001e74 	.word	0x20001e74

0800e418 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800e420:	4b25      	ldr	r3, [pc, #148]	; (800e4b8 <Magneto_Sensor_Handler+0xa0>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e428:	2b40      	cmp	r3, #64	; 0x40
 800e42a:	d140      	bne.n	800e4ae <Magneto_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 800e42c:	4b23      	ldr	r3, [pc, #140]	; (800e4bc <Magneto_Sensor_Handler+0xa4>)
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d121      	bne.n	800e478 <Magneto_Sensor_Handler+0x60>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 800e434:	4b22      	ldr	r3, [pc, #136]	; (800e4c0 <Magneto_Sensor_Handler+0xa8>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4a22      	ldr	r2, [pc, #136]	; (800e4c4 <Magneto_Sensor_Handler+0xac>)
 800e43a:	2134      	movs	r1, #52	; 0x34
 800e43c:	fb01 f303 	mul.w	r3, r1, r3
 800e440:	4413      	add	r3, r2
 800e442:	3328      	adds	r3, #40	; 0x28
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a20      	ldr	r2, [pc, #128]	; (800e4c8 <Magneto_Sensor_Handler+0xb0>)
 800e448:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 800e44a:	4b1d      	ldr	r3, [pc, #116]	; (800e4c0 <Magneto_Sensor_Handler+0xa8>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4a1d      	ldr	r2, [pc, #116]	; (800e4c4 <Magneto_Sensor_Handler+0xac>)
 800e450:	2134      	movs	r1, #52	; 0x34
 800e452:	fb01 f303 	mul.w	r3, r1, r3
 800e456:	4413      	add	r3, r2
 800e458:	332c      	adds	r3, #44	; 0x2c
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4a1a      	ldr	r2, [pc, #104]	; (800e4c8 <Magneto_Sensor_Handler+0xb0>)
 800e45e:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 800e460:	4b17      	ldr	r3, [pc, #92]	; (800e4c0 <Magneto_Sensor_Handler+0xa8>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a17      	ldr	r2, [pc, #92]	; (800e4c4 <Magneto_Sensor_Handler+0xac>)
 800e466:	2134      	movs	r1, #52	; 0x34
 800e468:	fb01 f303 	mul.w	r3, r1, r3
 800e46c:	4413      	add	r3, r2
 800e46e:	3330      	adds	r3, #48	; 0x30
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a15      	ldr	r2, [pc, #84]	; (800e4c8 <Magneto_Sensor_Handler+0xb0>)
 800e474:	6093      	str	r3, [r2, #8]
 800e476:	e002      	b.n	800e47e <Magneto_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 800e478:	4813      	ldr	r0, [pc, #76]	; (800e4c8 <Magneto_Sensor_Handler+0xb0>)
 800e47a:	f001 f85b 	bl	800f534 <BSP_SENSOR_MAG_GetAxes>
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	332f      	adds	r3, #47	; 0x2f
 800e482:	4a11      	ldr	r2, [pc, #68]	; (800e4c8 <Magneto_Sensor_Handler+0xb0>)
 800e484:	6811      	ldr	r1, [r2, #0]
 800e486:	2204      	movs	r2, #4
 800e488:	4618      	mov	r0, r3
 800e48a:	f001 fca9 	bl	800fde0 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	3333      	adds	r3, #51	; 0x33
 800e492:	4a0d      	ldr	r2, [pc, #52]	; (800e4c8 <Magneto_Sensor_Handler+0xb0>)
 800e494:	6851      	ldr	r1, [r2, #4]
 800e496:	2204      	movs	r2, #4
 800e498:	4618      	mov	r0, r3
 800e49a:	f001 fca1 	bl	800fde0 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	3337      	adds	r3, #55	; 0x37
 800e4a2:	4a09      	ldr	r2, [pc, #36]	; (800e4c8 <Magneto_Sensor_Handler+0xb0>)
 800e4a4:	6891      	ldr	r1, [r2, #8]
 800e4a6:	2204      	movs	r2, #4
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f001 fc99 	bl	800fde0 <Serialize_s32>
  }
}
 800e4ae:	bf00      	nop
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	20001c88 	.word	0x20001c88
 800e4bc:	20001cb5 	.word	0x20001cb5
 800e4c0:	20001e58 	.word	0x20001e58
 800e4c4:	20001cb8 	.word	0x20001cb8
 800e4c8:	20001e80 	.word	0x20001e80

0800e4cc <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800e4d4:	4b10      	ldr	r3, [pc, #64]	; (800e518 <Pressure_Sensor_Handler+0x4c>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f003 0301 	and.w	r3, r3, #1
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d117      	bne.n	800e510 <Pressure_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 800e4e0:	4b0e      	ldr	r3, [pc, #56]	; (800e51c <Pressure_Sensor_Handler+0x50>)
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d10b      	bne.n	800e500 <Pressure_Sensor_Handler+0x34>
    {
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 800e4e8:	4b0d      	ldr	r3, [pc, #52]	; (800e520 <Pressure_Sensor_Handler+0x54>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a0d      	ldr	r2, [pc, #52]	; (800e524 <Pressure_Sensor_Handler+0x58>)
 800e4ee:	2134      	movs	r1, #52	; 0x34
 800e4f0:	fb01 f303 	mul.w	r3, r1, r3
 800e4f4:	4413      	add	r3, r2
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4a0b      	ldr	r2, [pc, #44]	; (800e528 <Pressure_Sensor_Handler+0x5c>)
 800e4fc:	6013      	str	r3, [r2, #0]
 800e4fe:	e002      	b.n	800e506 <Pressure_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 800e500:	4809      	ldr	r0, [pc, #36]	; (800e528 <Pressure_Sensor_Handler+0x5c>)
 800e502:	f001 f824 	bl	800f54e <BSP_SENSOR_PRESS_GetValue>
    }

    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	330b      	adds	r3, #11
 800e50a:	4a07      	ldr	r2, [pc, #28]	; (800e528 <Pressure_Sensor_Handler+0x5c>)
 800e50c:	6812      	ldr	r2, [r2, #0]
 800e50e:	601a      	str	r2, [r3, #0]
  }
}
 800e510:	bf00      	nop
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	20001c88 	.word	0x20001c88
 800e51c:	20001cb5 	.word	0x20001cb5
 800e520:	20001e58 	.word	0x20001e58
 800e524:	20001cb8 	.word	0x20001cb8
 800e528:	20001e8c 	.word	0x20001e8c

0800e52c <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800e534:	4b10      	ldr	r3, [pc, #64]	; (800e578 <Temperature_Sensor_Handler+0x4c>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f003 0302 	and.w	r3, r3, #2
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d117      	bne.n	800e570 <Temperature_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 800e540:	4b0e      	ldr	r3, [pc, #56]	; (800e57c <Temperature_Sensor_Handler+0x50>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	2b01      	cmp	r3, #1
 800e546:	d10b      	bne.n	800e560 <Temperature_Sensor_Handler+0x34>
    {
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 800e548:	4b0d      	ldr	r3, [pc, #52]	; (800e580 <Temperature_Sensor_Handler+0x54>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a0d      	ldr	r2, [pc, #52]	; (800e584 <Temperature_Sensor_Handler+0x58>)
 800e54e:	2134      	movs	r1, #52	; 0x34
 800e550:	fb01 f303 	mul.w	r3, r1, r3
 800e554:	4413      	add	r3, r2
 800e556:	330c      	adds	r3, #12
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a0b      	ldr	r2, [pc, #44]	; (800e588 <Temperature_Sensor_Handler+0x5c>)
 800e55c:	6013      	str	r3, [r2, #0]
 800e55e:	e002      	b.n	800e566 <Temperature_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 800e560:	4809      	ldr	r0, [pc, #36]	; (800e588 <Temperature_Sensor_Handler+0x5c>)
 800e562:	f001 f801 	bl	800f568 <BSP_SENSOR_TEMP_GetValue>
    }

    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	330f      	adds	r3, #15
 800e56a:	4a07      	ldr	r2, [pc, #28]	; (800e588 <Temperature_Sensor_Handler+0x5c>)
 800e56c:	6812      	ldr	r2, [r2, #0]
 800e56e:	601a      	str	r2, [r3, #0]
  }
}
 800e570:	bf00      	nop
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20001c88 	.word	0x20001c88
 800e57c:	20001cb5 	.word	0x20001cb5
 800e580:	20001e58 	.word	0x20001e58
 800e584:	20001cb8 	.word	0x20001cb8
 800e588:	20001e90 	.word	0x20001e90

0800e58c <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800e594:	4b10      	ldr	r3, [pc, #64]	; (800e5d8 <Humidity_Sensor_Handler+0x4c>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f003 0304 	and.w	r3, r3, #4
 800e59c:	2b04      	cmp	r3, #4
 800e59e:	d117      	bne.n	800e5d0 <Humidity_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 800e5a0:	4b0e      	ldr	r3, [pc, #56]	; (800e5dc <Humidity_Sensor_Handler+0x50>)
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d10b      	bne.n	800e5c0 <Humidity_Sensor_Handler+0x34>
    {
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 800e5a8:	4b0d      	ldr	r3, [pc, #52]	; (800e5e0 <Humidity_Sensor_Handler+0x54>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a0d      	ldr	r2, [pc, #52]	; (800e5e4 <Humidity_Sensor_Handler+0x58>)
 800e5ae:	2134      	movs	r1, #52	; 0x34
 800e5b0:	fb01 f303 	mul.w	r3, r1, r3
 800e5b4:	4413      	add	r3, r2
 800e5b6:	3308      	adds	r3, #8
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a0b      	ldr	r2, [pc, #44]	; (800e5e8 <Humidity_Sensor_Handler+0x5c>)
 800e5bc:	6013      	str	r3, [r2, #0]
 800e5be:	e002      	b.n	800e5c6 <Humidity_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_HUM_GetValue(&HumValue);
 800e5c0:	4809      	ldr	r0, [pc, #36]	; (800e5e8 <Humidity_Sensor_Handler+0x5c>)
 800e5c2:	f000 ffde 	bl	800f582 <BSP_SENSOR_HUM_GetValue>
    }

    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	3313      	adds	r3, #19
 800e5ca:	4a07      	ldr	r2, [pc, #28]	; (800e5e8 <Humidity_Sensor_Handler+0x5c>)
 800e5cc:	6812      	ldr	r2, [r2, #0]
 800e5ce:	601a      	str	r2, [r3, #0]
  }
}
 800e5d0:	bf00      	nop
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	20001c88 	.word	0x20001c88
 800e5dc:	20001cb5 	.word	0x20001cb5
 800e5e0:	20001e58 	.word	0x20001e58
 800e5e4:	20001cb8 	.word	0x20001cb8
 800e5e8:	20001e94 	.word	0x20001e94

0800e5ec <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b086      	sub	sp, #24
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800e5f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e5f8:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800e5fa:	4b14      	ldr	r3, [pc, #80]	; (800e64c <TIM_Config+0x60>)
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	fbb2 f3f3 	udiv	r3, r2, r3
 800e604:	3b01      	subs	r3, #1
 800e606:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800e608:	697a      	ldr	r2, [r7, #20]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e610:	3b01      	subs	r3, #1
 800e612:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 800e614:	4a0e      	ldr	r2, [pc, #56]	; (800e650 <TIM_Config+0x64>)
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e61a:	4b0d      	ldr	r3, [pc, #52]	; (800e650 <TIM_Config+0x64>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 800e620:	4a0b      	ldr	r2, [pc, #44]	; (800e650 <TIM_Config+0x64>)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e626:	4b0a      	ldr	r3, [pc, #40]	; (800e650 <TIM_Config+0x64>)
 800e628:	2200      	movs	r2, #0
 800e62a:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e62c:	4b08      	ldr	r3, [pc, #32]	; (800e650 <TIM_Config+0x64>)
 800e62e:	2200      	movs	r2, #0
 800e630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800e632:	4807      	ldr	r0, [pc, #28]	; (800e650 <TIM_Config+0x64>)
 800e634:	f7fd feae 	bl	800c394 <HAL_TIM_Base_Init>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d001      	beq.n	800e642 <TIM_Config+0x56>
  {
    Error_Handler();
 800e63e:	f001 f99d 	bl	800f97c <Error_Handler>
  }
}
 800e642:	bf00      	nop
 800e644:	3718      	adds	r7, #24
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	2000135c 	.word	0x2000135c
 800e650:	200024fc 	.word	0x200024fc

0800e654 <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 800e654:	b480      	push	{r7}
 800e656:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800e658:	4b08      	ldr	r3, [pc, #32]	; (800e67c <DWT_Init+0x28>)
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	4a07      	ldr	r2, [pc, #28]	; (800e67c <DWT_Init+0x28>)
 800e65e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e662:	60d3      	str	r3, [r2, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800e664:	4b06      	ldr	r3, [pc, #24]	; (800e680 <DWT_Init+0x2c>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a05      	ldr	r2, [pc, #20]	; (800e680 <DWT_Init+0x2c>)
 800e66a:	f023 0301 	bic.w	r3, r3, #1
 800e66e:	6013      	str	r3, [r2, #0]
}
 800e670:	bf00      	nop
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	e000edf0 	.word	0xe000edf0
 800e680:	e0001000 	.word	0xe0001000

0800e684 <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 800e684:	b480      	push	{r7}
 800e686:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 800e688:	4b06      	ldr	r3, [pc, #24]	; (800e6a4 <DWT_Start+0x20>)
 800e68a:	2200      	movs	r2, #0
 800e68c:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800e68e:	4b05      	ldr	r3, [pc, #20]	; (800e6a4 <DWT_Start+0x20>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a04      	ldr	r2, [pc, #16]	; (800e6a4 <DWT_Start+0x20>)
 800e694:	f043 0301 	orr.w	r3, r3, #1
 800e698:	6013      	str	r3, [r2, #0]
}
 800e69a:	bf00      	nop
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr
 800e6a4:	e0001000 	.word	0xe0001000

0800e6a8 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800e6b6:	4b0d      	ldr	r3, [pc, #52]	; (800e6ec <DWT_Stop+0x44>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a0c      	ldr	r2, [pc, #48]	; (800e6ec <DWT_Stop+0x44>)
 800e6bc:	f023 0301 	bic.w	r3, r3, #1
 800e6c0:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800e6c2:	4b0a      	ldr	r3, [pc, #40]	; (800e6ec <DWT_Stop+0x44>)
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 800e6c8:	4b09      	ldr	r3, [pc, #36]	; (800e6f0 <DWT_Stop+0x48>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a09      	ldr	r2, [pc, #36]	; (800e6f4 <DWT_Stop+0x4c>)
 800e6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e6d2:	0c9b      	lsrs	r3, r3, #18
 800e6d4:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	e0001000 	.word	0xe0001000
 800e6f0:	2000135c 	.word	0x2000135c
 800e6f4:	431bde83 	.word	0x431bde83

0800e6f8 <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b08a      	sub	sp, #40	; 0x28
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 800e700:	2300      	movs	r3, #0
 800e702:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 800e704:	4b54      	ldr	r3, [pc, #336]	; (800e858 <UART_ReceivedMSG+0x160>)
 800e706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e708:	4618      	mov	r0, r3
 800e70a:	f000 f8e1 	bl	800e8d0 <Get_DMA_Flag_Status>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	f040 809c 	bne.w	800e84e <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 800e716:	4b50      	ldr	r3, [pc, #320]	; (800e858 <UART_ReceivedMSG+0x160>)
 800e718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e71a:	4618      	mov	r0, r3
 800e71c:	f000 f9ca 	bl	800eab4 <Get_DMA_Counter>
 800e720:	4603      	mov	r3, r0
 800e722:	b29b      	uxth	r3, r3
 800e724:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e728:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 800e72a:	4b4c      	ldr	r3, [pc, #304]	; (800e85c <UART_ReceivedMSG+0x164>)
 800e72c:	889b      	ldrh	r3, [r3, #4]
 800e72e:	8bba      	ldrh	r2, [r7, #28]
 800e730:	429a      	cmp	r2, r3
 800e732:	d305      	bcc.n	800e740 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 800e734:	4b49      	ldr	r3, [pc, #292]	; (800e85c <UART_ReceivedMSG+0x164>)
 800e736:	889b      	ldrh	r3, [r3, #4]
 800e738:	8bba      	ldrh	r2, [r7, #28]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	843b      	strh	r3, [r7, #32]
 800e73e:	e007      	b.n	800e750 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 800e740:	4b46      	ldr	r3, [pc, #280]	; (800e85c <UART_ReceivedMSG+0x164>)
 800e742:	889b      	ldrh	r3, [r3, #4]
 800e744:	8bba      	ldrh	r2, [r7, #28]
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	b29b      	uxth	r3, r3
 800e74a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e74e:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 800e750:	4b42      	ldr	r3, [pc, #264]	; (800e85c <UART_ReceivedMSG+0x164>)
 800e752:	889b      	ldrh	r3, [r3, #4]
 800e754:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 800e756:	2300      	movs	r3, #0
 800e758:	847b      	strh	r3, [r7, #34]	; 0x22
 800e75a:	e06d      	b.n	800e838 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 800e75c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e75e:	4a40      	ldr	r2, [pc, #256]	; (800e860 <UART_ReceivedMSG+0x168>)
 800e760:	5cd3      	ldrb	r3, [r2, r3]
 800e762:	76fb      	strb	r3, [r7, #27]
      j++;
 800e764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e766:	3301      	adds	r3, #1
 800e768:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 800e76a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e770:	d301      	bcc.n	800e776 <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 800e776:	7efb      	ldrb	r3, [r7, #27]
 800e778:	2bf0      	cmp	r3, #240	; 0xf0
 800e77a:	d15a      	bne.n	800e832 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 800e77c:	4b37      	ldr	r3, [pc, #220]	; (800e85c <UART_ReceivedMSG+0x164>)
 800e77e:	889b      	ldrh	r3, [r3, #4]
 800e780:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 800e782:	2300      	movs	r3, #0
 800e784:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e786:	e03a      	b.n	800e7fe <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 800e788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e78a:	3301      	adds	r3, #1
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e792:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 800e794:	8bfb      	ldrh	r3, [r7, #30]
 800e796:	2bff      	cmp	r3, #255	; 0xff
 800e798:	d904      	bls.n	800e7a4 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 800e79a:	4a30      	ldr	r2, [pc, #192]	; (800e85c <UART_ReceivedMSG+0x164>)
 800e79c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e79e:	8093      	strh	r3, [r2, #4]
            return 0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	e055      	b.n	800e850 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 800e7a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7a6:	4a2e      	ldr	r2, [pc, #184]	; (800e860 <UART_ReceivedMSG+0x168>)
 800e7a8:	5cd3      	ldrb	r3, [r2, r3]
 800e7aa:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 800e7ac:	8b3b      	ldrh	r3, [r7, #24]
 800e7ae:	4a2c      	ldr	r2, [pc, #176]	; (800e860 <UART_ReceivedMSG+0x168>)
 800e7b0:	5cd3      	ldrb	r3, [r2, r3]
 800e7b2:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 800e7b4:	8bfb      	ldrh	r3, [r7, #30]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	3304      	adds	r3, #4
 800e7bc:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800e7be:	7db9      	ldrb	r1, [r7, #22]
 800e7c0:	7dfb      	ldrb	r3, [r7, #23]
 800e7c2:	693a      	ldr	r2, [r7, #16]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f001 fa6a 	bl	800fc9e <ReverseByteStuffCopyByte2>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 800e7ce:	7bfb      	ldrb	r3, [r7, #15]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d104      	bne.n	800e7de <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 800e7d4:	4a21      	ldr	r2, [pc, #132]	; (800e85c <UART_ReceivedMSG+0x164>)
 800e7d6:	8b3b      	ldrh	r3, [r7, #24]
 800e7d8:	8093      	strh	r3, [r2, #4]
            return 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	e038      	b.n	800e850 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 800e7de:	7bfb      	ldrb	r3, [r7, #15]
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7e4:	4413      	add	r3, r2
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ec:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 800e7ee:	8bfb      	ldrh	r3, [r7, #30]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7fa:	4413      	add	r3, r2
 800e7fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e7fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e800:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e802:	429a      	cmp	r2, r3
 800e804:	d3c0      	bcc.n	800e788 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 800e806:	8bfa      	ldrh	r2, [r7, #30]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800e80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e80e:	3301      	adds	r3, #1
 800e810:	b29b      	uxth	r3, r3
 800e812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e816:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 800e818:	4a10      	ldr	r2, [pc, #64]	; (800e85c <UART_ReceivedMSG+0x164>)
 800e81a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e81c:	8093      	strh	r3, [r2, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f001 fa8e 	bl	800fd40 <CHK_CheckAndRemove>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	bf14      	ite	ne
 800e82a:	2301      	movne	r3, #1
 800e82c:	2300      	moveq	r3, #0
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	e00e      	b.n	800e850 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 800e832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e834:	3301      	adds	r3, #1
 800e836:	847b      	strh	r3, [r7, #34]	; 0x22
 800e838:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e83a:	8c3b      	ldrh	r3, [r7, #32]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d38d      	bcc.n	800e75c <UART_ReceivedMSG+0x64>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 800e840:	8c3b      	ldrh	r3, [r7, #32]
 800e842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e846:	d902      	bls.n	800e84e <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 800e848:	4a04      	ldr	r2, [pc, #16]	; (800e85c <UART_ReceivedMSG+0x164>)
 800e84a:	8bbb      	ldrh	r3, [r7, #28]
 800e84c:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3728      	adds	r7, #40	; 0x28
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	20002580 	.word	0x20002580
 800e85c:	200022a8 	.word	0x200022a8
 800e860:	200020a8 	.word	0x200020a8

0800e864 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f001 fa3d 	bl	800fcec <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 800e872:	6879      	ldr	r1, [r7, #4]
 800e874:	4807      	ldr	r0, [pc, #28]	; (800e894 <UART_SendMsg+0x30>)
 800e876:	f001 f9e4 	bl	800fc42 <ByteStuffCopy>
 800e87a:	4603      	mov	r3, r0
 800e87c:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 800e87e:	89fa      	ldrh	r2, [r7, #14]
 800e880:	f241 3388 	movw	r3, #5000	; 0x1388
 800e884:	4903      	ldr	r1, [pc, #12]	; (800e894 <UART_SendMsg+0x30>)
 800e886:	4804      	ldr	r0, [pc, #16]	; (800e898 <UART_SendMsg+0x34>)
 800e888:	f7fe fabe 	bl	800ce08 <HAL_UART_Transmit>
  //ADD FOR DEBUG--------------------------------------------------
  /*uint8_t buf_TX_inclinaison[12];
  memcpy(buf_TX_inclinaison, &Msg[71], 12);
  HAL_UART_Transmit(&huart2, (uint8_t *)buf_TX_inclinaison, 12, 5000);*/
  //ADD FOR DEBUG--------------------------------------------------
}
 800e88c:	bf00      	nop
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	200022b0 	.word	0x200022b0
 800e898:	20002580 	.word	0x20002580

0800e89c <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 800e8a0:	4b09      	ldr	r3, [pc, #36]	; (800e8c8 <UART_StartReceiveMsg+0x2c>)
 800e8a2:	4a0a      	ldr	r2, [pc, #40]	; (800e8cc <UART_StartReceiveMsg+0x30>)
 800e8a4:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 800e8a6:	4b08      	ldr	r3, [pc, #32]	; (800e8c8 <UART_StartReceiveMsg+0x2c>)
 800e8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800e8b0:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <UART_StartReceiveMsg+0x2c>)
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 800e8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8bc:	4903      	ldr	r1, [pc, #12]	; (800e8cc <UART_StartReceiveMsg+0x30>)
 800e8be:	4802      	ldr	r0, [pc, #8]	; (800e8c8 <UART_StartReceiveMsg+0x2c>)
 800e8c0:	f7fe fb36 	bl	800cf30 <HAL_UART_Receive_DMA>
}
 800e8c4:	bf00      	nop
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	20002580 	.word	0x20002580
 800e8cc:	200020a8 	.word	0x200020a8

0800e8d0 <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	4b66      	ldr	r3, [pc, #408]	; (800ea78 <Get_DMA_Flag_Status+0x1a8>)
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d961      	bls.n	800e9a8 <Get_DMA_Flag_Status+0xd8>
 800e8e4:	4b65      	ldr	r3, [pc, #404]	; (800ea7c <Get_DMA_Flag_Status+0x1ac>)
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4964      	ldr	r1, [pc, #400]	; (800ea80 <Get_DMA_Flag_Status+0x1b0>)
 800e8ee:	428b      	cmp	r3, r1
 800e8f0:	d057      	beq.n	800e9a2 <Get_DMA_Flag_Status+0xd2>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	4963      	ldr	r1, [pc, #396]	; (800ea84 <Get_DMA_Flag_Status+0x1b4>)
 800e8f8:	428b      	cmp	r3, r1
 800e8fa:	d050      	beq.n	800e99e <Get_DMA_Flag_Status+0xce>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4961      	ldr	r1, [pc, #388]	; (800ea88 <Get_DMA_Flag_Status+0x1b8>)
 800e902:	428b      	cmp	r3, r1
 800e904:	d049      	beq.n	800e99a <Get_DMA_Flag_Status+0xca>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4960      	ldr	r1, [pc, #384]	; (800ea8c <Get_DMA_Flag_Status+0x1bc>)
 800e90c:	428b      	cmp	r3, r1
 800e90e:	d042      	beq.n	800e996 <Get_DMA_Flag_Status+0xc6>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	495e      	ldr	r1, [pc, #376]	; (800ea90 <Get_DMA_Flag_Status+0x1c0>)
 800e916:	428b      	cmp	r3, r1
 800e918:	d03a      	beq.n	800e990 <Get_DMA_Flag_Status+0xc0>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	495d      	ldr	r1, [pc, #372]	; (800ea94 <Get_DMA_Flag_Status+0x1c4>)
 800e920:	428b      	cmp	r3, r1
 800e922:	d032      	beq.n	800e98a <Get_DMA_Flag_Status+0xba>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	495b      	ldr	r1, [pc, #364]	; (800ea98 <Get_DMA_Flag_Status+0x1c8>)
 800e92a:	428b      	cmp	r3, r1
 800e92c:	d02a      	beq.n	800e984 <Get_DMA_Flag_Status+0xb4>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	495a      	ldr	r1, [pc, #360]	; (800ea9c <Get_DMA_Flag_Status+0x1cc>)
 800e934:	428b      	cmp	r3, r1
 800e936:	d022      	beq.n	800e97e <Get_DMA_Flag_Status+0xae>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4958      	ldr	r1, [pc, #352]	; (800eaa0 <Get_DMA_Flag_Status+0x1d0>)
 800e93e:	428b      	cmp	r3, r1
 800e940:	d01a      	beq.n	800e978 <Get_DMA_Flag_Status+0xa8>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4957      	ldr	r1, [pc, #348]	; (800eaa4 <Get_DMA_Flag_Status+0x1d4>)
 800e948:	428b      	cmp	r3, r1
 800e94a:	d012      	beq.n	800e972 <Get_DMA_Flag_Status+0xa2>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4955      	ldr	r1, [pc, #340]	; (800eaa8 <Get_DMA_Flag_Status+0x1d8>)
 800e952:	428b      	cmp	r3, r1
 800e954:	d00a      	beq.n	800e96c <Get_DMA_Flag_Status+0x9c>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4954      	ldr	r1, [pc, #336]	; (800eaac <Get_DMA_Flag_Status+0x1dc>)
 800e95c:	428b      	cmp	r3, r1
 800e95e:	d102      	bne.n	800e966 <Get_DMA_Flag_Status+0x96>
 800e960:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e964:	e01e      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e966:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e96a:	e01b      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e96c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e970:	e018      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e972:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e976:	e015      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e978:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e97c:	e012      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e97e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e982:	e00f      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e988:	e00c      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e98a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e98e:	e009      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e994:	e006      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e996:	2380      	movs	r3, #128	; 0x80
 800e998:	e004      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e99a:	2380      	movs	r3, #128	; 0x80
 800e99c:	e002      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e99e:	2308      	movs	r3, #8
 800e9a0:	e000      	b.n	800e9a4 <Get_DMA_Flag_Status+0xd4>
 800e9a2:	2308      	movs	r3, #8
 800e9a4:	4013      	ands	r3, r2
 800e9a6:	e060      	b.n	800ea6a <Get_DMA_Flag_Status+0x19a>
 800e9a8:	4b41      	ldr	r3, [pc, #260]	; (800eab0 <Get_DMA_Flag_Status+0x1e0>)
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4933      	ldr	r1, [pc, #204]	; (800ea80 <Get_DMA_Flag_Status+0x1b0>)
 800e9b2:	428b      	cmp	r3, r1
 800e9b4:	d057      	beq.n	800ea66 <Get_DMA_Flag_Status+0x196>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4932      	ldr	r1, [pc, #200]	; (800ea84 <Get_DMA_Flag_Status+0x1b4>)
 800e9bc:	428b      	cmp	r3, r1
 800e9be:	d050      	beq.n	800ea62 <Get_DMA_Flag_Status+0x192>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4930      	ldr	r1, [pc, #192]	; (800ea88 <Get_DMA_Flag_Status+0x1b8>)
 800e9c6:	428b      	cmp	r3, r1
 800e9c8:	d049      	beq.n	800ea5e <Get_DMA_Flag_Status+0x18e>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	492f      	ldr	r1, [pc, #188]	; (800ea8c <Get_DMA_Flag_Status+0x1bc>)
 800e9d0:	428b      	cmp	r3, r1
 800e9d2:	d042      	beq.n	800ea5a <Get_DMA_Flag_Status+0x18a>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	492d      	ldr	r1, [pc, #180]	; (800ea90 <Get_DMA_Flag_Status+0x1c0>)
 800e9da:	428b      	cmp	r3, r1
 800e9dc:	d03a      	beq.n	800ea54 <Get_DMA_Flag_Status+0x184>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	492c      	ldr	r1, [pc, #176]	; (800ea94 <Get_DMA_Flag_Status+0x1c4>)
 800e9e4:	428b      	cmp	r3, r1
 800e9e6:	d032      	beq.n	800ea4e <Get_DMA_Flag_Status+0x17e>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	492a      	ldr	r1, [pc, #168]	; (800ea98 <Get_DMA_Flag_Status+0x1c8>)
 800e9ee:	428b      	cmp	r3, r1
 800e9f0:	d02a      	beq.n	800ea48 <Get_DMA_Flag_Status+0x178>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4929      	ldr	r1, [pc, #164]	; (800ea9c <Get_DMA_Flag_Status+0x1cc>)
 800e9f8:	428b      	cmp	r3, r1
 800e9fa:	d022      	beq.n	800ea42 <Get_DMA_Flag_Status+0x172>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4927      	ldr	r1, [pc, #156]	; (800eaa0 <Get_DMA_Flag_Status+0x1d0>)
 800ea02:	428b      	cmp	r3, r1
 800ea04:	d01a      	beq.n	800ea3c <Get_DMA_Flag_Status+0x16c>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4926      	ldr	r1, [pc, #152]	; (800eaa4 <Get_DMA_Flag_Status+0x1d4>)
 800ea0c:	428b      	cmp	r3, r1
 800ea0e:	d012      	beq.n	800ea36 <Get_DMA_Flag_Status+0x166>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4924      	ldr	r1, [pc, #144]	; (800eaa8 <Get_DMA_Flag_Status+0x1d8>)
 800ea16:	428b      	cmp	r3, r1
 800ea18:	d00a      	beq.n	800ea30 <Get_DMA_Flag_Status+0x160>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4923      	ldr	r1, [pc, #140]	; (800eaac <Get_DMA_Flag_Status+0x1dc>)
 800ea20:	428b      	cmp	r3, r1
 800ea22:	d102      	bne.n	800ea2a <Get_DMA_Flag_Status+0x15a>
 800ea24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ea28:	e01e      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea2e:	e01b      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ea34:	e018      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ea3a:	e015      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ea40:	e012      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea46:	e00f      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea4c:	e00c      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea52:	e009      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea58:	e006      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea5a:	2380      	movs	r3, #128	; 0x80
 800ea5c:	e004      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea5e:	2380      	movs	r3, #128	; 0x80
 800ea60:	e002      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea62:	2308      	movs	r3, #8
 800ea64:	e000      	b.n	800ea68 <Get_DMA_Flag_Status+0x198>
 800ea66:	2308      	movs	r3, #8
 800ea68:	4013      	ands	r3, r2
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	40020080 	.word	0x40020080
 800ea7c:	40020400 	.word	0x40020400
 800ea80:	40020008 	.word	0x40020008
 800ea84:	40020408 	.word	0x40020408
 800ea88:	4002001c 	.word	0x4002001c
 800ea8c:	4002041c 	.word	0x4002041c
 800ea90:	40020030 	.word	0x40020030
 800ea94:	40020430 	.word	0x40020430
 800ea98:	40020044 	.word	0x40020044
 800ea9c:	40020444 	.word	0x40020444
 800eaa0:	40020058 	.word	0x40020058
 800eaa4:	40020458 	.word	0x40020458
 800eaa8:	4002006c 	.word	0x4002006c
 800eaac:	4002046c 	.word	0x4002046c
 800eab0:	40020000 	.word	0x40020000

0800eab4 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	685b      	ldr	r3, [r3, #4]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	370c      	adds	r7, #12
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr

0800eace <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 800eace:	b480      	push	{r7}
 800ead0:	b083      	sub	sp, #12
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	795a      	ldrb	r2, [r3, #5]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2232      	movs	r2, #50	; 0x32
 800eae2:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	799b      	ldrb	r3, [r3, #6]
 800eae8:	3b80      	subs	r3, #128	; 0x80
 800eaea:	b2da      	uxtb	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	719a      	strb	r2, [r3, #6]
}
 800eaf0:	bf00      	nop
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 800eb04:	4b09      	ldr	r3, [pc, #36]	; (800eb2c <INIT_STREAMING_HEADER+0x30>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	b2da      	uxtb	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2232      	movs	r2, #50	; 0x32
 800eb12:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2208      	movs	r2, #8
 800eb18:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2203      	movs	r2, #3
 800eb1e:	601a      	str	r2, [r3, #0]
}
 800eb20:	bf00      	nop
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr
 800eb2c:	20001348 	.word	0x20001348

0800eb30 <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b098      	sub	sp, #96	; 0x60
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  int ret = 1;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d801      	bhi.n	800eb4c <HandleMSG+0x1c>
  {
    return 0;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	e3af      	b.n	800f2ac <HandleMSG+0x77c>
  }

  if (Msg->Data[0] != DEV_ADDR)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	791b      	ldrb	r3, [r3, #4]
 800eb50:	2b32      	cmp	r3, #50	; 0x32
 800eb52:	d001      	beq.n	800eb58 <HandleMSG+0x28>
  {
    return 0;
 800eb54:	2300      	movs	r3, #0
 800eb56:	e3a9      	b.n	800f2ac <HandleMSG+0x77c>
  }

  switch (Msg->Data[2])   /* CMD */
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	799b      	ldrb	r3, [r3, #6]
 800eb5c:	2b12      	cmp	r3, #18
 800eb5e:	f300 8087 	bgt.w	800ec70 <HandleMSG+0x140>
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	dc58      	bgt.n	800ec18 <HandleMSG+0xe8>
 800eb66:	e39d      	b.n	800f2a4 <HandleMSG+0x774>
 800eb68:	3b53      	subs	r3, #83	; 0x53
 800eb6a:	2b27      	cmp	r3, #39	; 0x27
 800eb6c:	f200 839a 	bhi.w	800f2a4 <HandleMSG+0x774>
 800eb70:	a201      	add	r2, pc, #4	; (adr r2, 800eb78 <HandleMSG+0x48>)
 800eb72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb76:	bf00      	nop
 800eb78:	0800f225 	.word	0x0800f225
 800eb7c:	0800f26b 	.word	0x0800f26b
 800eb80:	0800f2a5 	.word	0x0800f2a5
 800eb84:	0800f2a5 	.word	0x0800f2a5
 800eb88:	0800f2a5 	.word	0x0800f2a5
 800eb8c:	0800f2a5 	.word	0x0800f2a5
 800eb90:	0800f2a5 	.word	0x0800f2a5
 800eb94:	0800f2a5 	.word	0x0800f2a5
 800eb98:	0800f2a5 	.word	0x0800f2a5
 800eb9c:	0800f2a5 	.word	0x0800f2a5
 800eba0:	0800f2a5 	.word	0x0800f2a5
 800eba4:	0800f2a5 	.word	0x0800f2a5
 800eba8:	0800f2a5 	.word	0x0800f2a5
 800ebac:	0800ed15 	.word	0x0800ed15
 800ebb0:	0800f2a5 	.word	0x0800f2a5
 800ebb4:	0800ed43 	.word	0x0800ed43
 800ebb8:	0800f2a5 	.word	0x0800f2a5
 800ebbc:	0800f2a5 	.word	0x0800f2a5
 800ebc0:	0800f2a5 	.word	0x0800f2a5
 800ebc4:	0800f2a5 	.word	0x0800f2a5
 800ebc8:	0800f2a5 	.word	0x0800f2a5
 800ebcc:	0800f2a5 	.word	0x0800f2a5
 800ebd0:	0800f2a5 	.word	0x0800f2a5
 800ebd4:	0800f2a5 	.word	0x0800f2a5
 800ebd8:	0800f2a5 	.word	0x0800f2a5
 800ebdc:	0800f2a5 	.word	0x0800f2a5
 800ebe0:	0800f2a5 	.word	0x0800f2a5
 800ebe4:	0800f2a5 	.word	0x0800f2a5
 800ebe8:	0800f2a5 	.word	0x0800f2a5
 800ebec:	0800f2a5 	.word	0x0800f2a5
 800ebf0:	0800f2a5 	.word	0x0800f2a5
 800ebf4:	0800f2a5 	.word	0x0800f2a5
 800ebf8:	0800f2a5 	.word	0x0800f2a5
 800ebfc:	0800f2a5 	.word	0x0800f2a5
 800ec00:	0800f2a5 	.word	0x0800f2a5
 800ec04:	0800ed71 	.word	0x0800ed71
 800ec08:	0800f2a5 	.word	0x0800f2a5
 800ec0c:	0800f2a5 	.word	0x0800f2a5
 800ec10:	0800f2a5 	.word	0x0800f2a5
 800ec14:	0800ed9f 	.word	0x0800ed9f
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	2b11      	cmp	r3, #17
 800ec1c:	f200 8342 	bhi.w	800f2a4 <HandleMSG+0x774>
 800ec20:	a201      	add	r2, pc, #4	; (adr r2, 800ec28 <HandleMSG+0xf8>)
 800ec22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec26:	bf00      	nop
 800ec28:	0800ec7f 	.word	0x0800ec7f
 800ec2c:	0800ecb9 	.word	0x0800ecb9
 800ec30:	0800f2a5 	.word	0x0800f2a5
 800ec34:	0800f2a5 	.word	0x0800f2a5
 800ec38:	0800f2a5 	.word	0x0800f2a5
 800ec3c:	0800f2a5 	.word	0x0800f2a5
 800ec40:	0800f2a5 	.word	0x0800f2a5
 800ec44:	0800edcd 	.word	0x0800edcd
 800ec48:	0800ee73 	.word	0x0800ee73
 800ec4c:	0800f2a5 	.word	0x0800f2a5
 800ec50:	0800f2a5 	.word	0x0800f2a5
 800ec54:	0800eebd 	.word	0x0800eebd
 800ec58:	0800f2a5 	.word	0x0800f2a5
 800ec5c:	0800ec9f 	.word	0x0800ec9f
 800ec60:	0800f2a5 	.word	0x0800f2a5
 800ec64:	0800ef03 	.word	0x0800ef03
 800ec68:	0800f175 	.word	0x0800f175
 800ec6c:	0800f1c3 	.word	0x0800f1c3
 800ec70:	2b7a      	cmp	r3, #122	; 0x7a
 800ec72:	f300 8317 	bgt.w	800f2a4 <HandleMSG+0x774>
 800ec76:	2b53      	cmp	r3, #83	; 0x53
 800ec78:	f6bf af76 	bge.w	800eb68 <HandleMSG+0x38>
 800ec7c:	e312      	b.n	800f2a4 <HandleMSG+0x774>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b03      	cmp	r3, #3
 800ec84:	d001      	beq.n	800ec8a <HandleMSG+0x15a>
      {
        return 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	e310      	b.n	800f2ac <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7ff ff1f 	bl	800eace <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2203      	movs	r2, #3
 800ec94:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff fde4 	bl	800e864 <UART_SendMsg>
      break;
 800ec9c:	e305      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b03      	cmp	r3, #3
 800eca4:	d001      	beq.n	800ecaa <HandleMSG+0x17a>
      {
        return 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	e300      	b.n	800f2ac <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f7ff ff0f 	bl	800eace <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2203      	movs	r2, #3
 800ecb4:	601a      	str	r2, [r3, #0]
      break;
 800ecb6:	e2f8      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b03      	cmp	r3, #3
 800ecbe:	d001      	beq.n	800ecc4 <HandleMSG+0x194>
      {
        return 0;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	e2f3      	b.n	800f2ac <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7ff ff02 	bl	800eace <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 800ecca:	f107 020c 	add.w	r2, r7, #12
 800ecce:	f107 0310 	add.w	r3, r7, #16
 800ecd2:	4611      	mov	r1, r2
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f000 fb43 	bl	800f360 <Get_PresentationString>

      i = 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800ecde:	e00d      	b.n	800ecfc <HandleMSG+0x1cc>
      {
        Msg->Data[3U + i] = ps[i];
 800ece0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ece2:	3303      	adds	r3, #3
 800ece4:	f107 0110 	add.w	r1, r7, #16
 800ece8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecea:	440a      	add	r2, r1
 800ecec:	7811      	ldrb	r1, [r2, #0]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	460a      	mov	r2, r1
 800ecf4:	711a      	strb	r2, [r3, #4]
        i++;
 800ecf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d3ed      	bcc.n	800ece0 <HandleMSG+0x1b0>
      }

      Msg->Len = 3U + i;
 800ed04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed06:	1cda      	adds	r2, r3, #3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f7ff fda9 	bl	800e864 <UART_SendMsg>
      break;
 800ed12:	e2ca      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	d801      	bhi.n	800ed20 <HandleMSG+0x1f0>
      {
        return 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	e2c5      	b.n	800f2ac <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7ff fed4 	bl	800eace <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	3307      	adds	r3, #7
 800ed2a:	2204      	movs	r2, #4
 800ed2c:	2104      	movs	r1, #4
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f001 f856 	bl	800fde0 <Serialize_s32>
      Msg->Len = 3 + 4;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2207      	movs	r2, #7
 800ed38:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7ff fd92 	bl	800e864 <UART_SendMsg>
      break;
 800ed40:	e2b3      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	d801      	bhi.n	800ed4e <HandleMSG+0x21e>
      {
        return 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e2ae      	b.n	800f2ac <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7ff febd 	bl	800eace <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	3307      	adds	r3, #7
 800ed58:	2204      	movs	r2, #4
 800ed5a:	2101      	movs	r1, #1
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f001 f83f 	bl	800fde0 <Serialize_s32>
      Msg->Len = 3 + 4;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2207      	movs	r2, #7
 800ed66:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7ff fd7b 	bl	800e864 <UART_SendMsg>
      break;
 800ed6e:	e29c      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b02      	cmp	r3, #2
 800ed76:	d801      	bhi.n	800ed7c <HandleMSG+0x24c>
      {
        return 0;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	e297      	b.n	800f2ac <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7ff fea6 	bl	800eace <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3307      	adds	r3, #7
 800ed86:	2204      	movs	r2, #4
 800ed88:	2107      	movs	r1, #7
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f001 f828 	bl	800fde0 <Serialize_s32>
      Msg->Len = 3 + 4;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2207      	movs	r2, #7
 800ed94:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f7ff fd64 	bl	800e864 <UART_SendMsg>
      break;
 800ed9c:	e285      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b02      	cmp	r3, #2
 800eda4:	d801      	bhi.n	800edaa <HandleMSG+0x27a>
      {
        return 0;
 800eda6:	2300      	movs	r3, #0
 800eda8:	e280      	b.n	800f2ac <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f7ff fe8f 	bl	800eace <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	3307      	adds	r3, #7
 800edb4:	2204      	movs	r2, #4
 800edb6:	2103      	movs	r1, #3
 800edb8:	4618      	mov	r0, r3
 800edba:	f001 f811 	bl	800fde0 <Serialize_s32>
      Msg->Len = 3 + 4;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2207      	movs	r2, #7
 800edc2:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f7ff fd4d 	bl	800e864 <UART_SendMsg>
      break;
 800edca:	e26e      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	d801      	bhi.n	800edd8 <HandleMSG+0x2a8>
      {
        return 0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	e269      	b.n	800f2ac <HandleMSG+0x77c>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	3307      	adds	r3, #7
 800eddc:	2104      	movs	r1, #4
 800edde:	4618      	mov	r0, r3
 800ede0:	f000 ffd8 	bl	800fd94 <Deserialize>
 800ede4:	4603      	mov	r3, r0
 800ede6:	4a4e      	ldr	r2, [pc, #312]	; (800ef20 <HandleMSG+0x3f0>)
 800ede8:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800edea:	4b4d      	ldr	r3, [pc, #308]	; (800ef20 <HandleMSG+0x3f0>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f003 0301 	and.w	r3, r3, #1
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d101      	bne.n	800edfa <HandleMSG+0x2ca>
      {
        BSP_SENSOR_PRESS_Enable();
 800edf6:	f000 fb3b 	bl	800f470 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800edfa:	4b49      	ldr	r3, [pc, #292]	; (800ef20 <HandleMSG+0x3f0>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f003 0302 	and.w	r3, r3, #2
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d101      	bne.n	800ee0a <HandleMSG+0x2da>
      {
        BSP_SENSOR_TEMP_Enable();
 800ee06:	f000 fb3b 	bl	800f480 <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800ee0a:	4b45      	ldr	r3, [pc, #276]	; (800ef20 <HandleMSG+0x3f0>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f003 0304 	and.w	r3, r3, #4
 800ee12:	2b04      	cmp	r3, #4
 800ee14:	d101      	bne.n	800ee1a <HandleMSG+0x2ea>
      {
        BSP_SENSOR_HUM_Enable();
 800ee16:	f000 fb3b 	bl	800f490 <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800ee1a:	4b41      	ldr	r3, [pc, #260]	; (800ef20 <HandleMSG+0x3f0>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f003 0310 	and.w	r3, r3, #16
 800ee22:	2b10      	cmp	r3, #16
 800ee24:	d101      	bne.n	800ee2a <HandleMSG+0x2fa>
      {
        BSP_SENSOR_ACC_Enable();
 800ee26:	f000 fb0b 	bl	800f440 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800ee2a:	4b3d      	ldr	r3, [pc, #244]	; (800ef20 <HandleMSG+0x3f0>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f003 0320 	and.w	r3, r3, #32
 800ee32:	2b20      	cmp	r3, #32
 800ee34:	d101      	bne.n	800ee3a <HandleMSG+0x30a>
      {
        BSP_SENSOR_GYR_Enable();
 800ee36:	f000 fb0b 	bl	800f450 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800ee3a:	4b39      	ldr	r3, [pc, #228]	; (800ef20 <HandleMSG+0x3f0>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee42:	2b40      	cmp	r3, #64	; 0x40
 800ee44:	d101      	bne.n	800ee4a <HandleMSG+0x31a>
      {
        BSP_SENSOR_MAG_Enable();
 800ee46:	f000 fb0b 	bl	800f460 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 800ee4a:	4836      	ldr	r0, [pc, #216]	; (800ef24 <HandleMSG+0x3f4>)
 800ee4c:	f7fd fafa 	bl	800c444 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 800ee50:	4b35      	ldr	r3, [pc, #212]	; (800ef28 <HandleMSG+0x3f8>)
 800ee52:	2201      	movs	r2, #1
 800ee54:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	795a      	ldrb	r2, [r3, #5]
 800ee5a:	4b34      	ldr	r3, [pc, #208]	; (800ef2c <HandleMSG+0x3fc>)
 800ee5c:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff fe35 	bl	800eace <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2203      	movs	r2, #3
 800ee68:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f7ff fcfa 	bl	800e864 <UART_SendMsg>
      break;
 800ee70:	e21b      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b02      	cmp	r3, #2
 800ee78:	d801      	bhi.n	800ee7e <HandleMSG+0x34e>
      {
        return 0;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	e216      	b.n	800f2ac <HandleMSG+0x77c>
      }

      DataLoggerActive = 0;
 800ee7e:	4b2a      	ldr	r3, [pc, #168]	; (800ef28 <HandleMSG+0x3f8>)
 800ee80:	2200      	movs	r2, #0
 800ee82:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800ee84:	4827      	ldr	r0, [pc, #156]	; (800ef24 <HandleMSG+0x3f4>)
 800ee86:	f7fd fb4d 	bl	800c524 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 800ee8a:	f000 fb09 	bl	800f4a0 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 800ee8e:	f000 fb0f 	bl	800f4b0 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 800ee92:	f000 fb15 	bl	800f4c0 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 800ee96:	f000 fb1b 	bl	800f4d0 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 800ee9a:	f000 fb21 	bl	800f4e0 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 800ee9e:	f000 fb27 	bl	800f4f0 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 800eea2:	4b1f      	ldr	r3, [pc, #124]	; (800ef20 <HandleMSG+0x3f0>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 800eea8:	4b21      	ldr	r3, [pc, #132]	; (800ef30 <HandleMSG+0x400>)
 800eeaa:	2200      	movs	r2, #0
 800eeac:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7ff fe0d 	bl	800eace <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7ff fcd5 	bl	800e864 <UART_SendMsg>
      break;
 800eeba:	e1f6      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	d801      	bhi.n	800eec8 <HandleMSG+0x398>
      {
        return 0;
 800eec4:	2300      	movs	r3, #0
 800eec6:	e1f1      	b.n	800f2ac <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7ff fe00 	bl	800eace <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2203      	movs	r2, #3
 800eed2:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	79d8      	ldrb	r0, [r3, #7]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	7a19      	ldrb	r1, [r3, #8]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	7a5b      	ldrb	r3, [r3, #9]
 800eee0:	461a      	mov	r2, r3
 800eee2:	f000 fa13 	bl	800f30c <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	7a98      	ldrb	r0, [r3, #10]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	7ad9      	ldrb	r1, [r3, #11]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	7b1a      	ldrb	r2, [r3, #12]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7b5b      	ldrb	r3, [r3, #13]
 800eef6:	f000 f9df 	bl	800f2b8 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7ff fcb2 	bl	800e864 <UART_SendMsg>
      break;
 800ef00:	e1d3      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b36      	cmp	r3, #54	; 0x36
 800ef08:	d801      	bhi.n	800ef0e <HandleMSG+0x3de>
      {
        return 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	e1ce      	b.n	800f2ac <HandleMSG+0x77c>
      }

      msg_offset = 4;
 800ef0e:	2304      	movs	r3, #4
 800ef10:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	79db      	ldrb	r3, [r3, #7]
 800ef16:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 800ef18:	2300      	movs	r3, #0
 800ef1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef1c:	e11b      	b.n	800f156 <HandleMSG+0x626>
 800ef1e:	bf00      	nop
 800ef20:	20001c88 	.word	0x20001c88
 800ef24:	200024fc 	.word	0x200024fc
 800ef28:	20001c84 	.word	0x20001c84
 800ef2c:	20001348 	.word	0x20001348
 800ef30:	20001cb5 	.word	0x20001cb5
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 800ef34:	4ba6      	ldr	r3, [pc, #664]	; (800f1d0 <HandleMSG+0x6a0>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2234      	movs	r2, #52	; 0x34
 800ef3a:	fb02 f303 	mul.w	r3, r2, r3
 800ef3e:	4aa5      	ldr	r2, [pc, #660]	; (800f1d4 <HandleMSG+0x6a4>)
 800ef40:	4413      	add	r3, r2
 800ef42:	6879      	ldr	r1, [r7, #4]
 800ef44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef46:	440a      	add	r2, r1
 800ef48:	3204      	adds	r2, #4
 800ef4a:	7812      	ldrb	r2, [r2, #0]
 800ef4c:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800ef4e:	4ba0      	ldr	r3, [pc, #640]	; (800f1d0 <HandleMSG+0x6a0>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2234      	movs	r2, #52	; 0x34
 800ef54:	fb02 f303 	mul.w	r3, r2, r3
 800ef58:	4a9e      	ldr	r2, [pc, #632]	; (800f1d4 <HandleMSG+0x6a4>)
 800ef5a:	4413      	add	r3, r2
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef60:	3201      	adds	r2, #1
 800ef62:	6879      	ldr	r1, [r7, #4]
 800ef64:	440a      	add	r2, r1
 800ef66:	3204      	adds	r2, #4
 800ef68:	7812      	ldrb	r2, [r2, #0]
 800ef6a:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 800ef6c:	4b98      	ldr	r3, [pc, #608]	; (800f1d0 <HandleMSG+0x6a0>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2234      	movs	r2, #52	; 0x34
 800ef72:	fb02 f303 	mul.w	r3, r2, r3
 800ef76:	4a97      	ldr	r2, [pc, #604]	; (800f1d4 <HandleMSG+0x6a4>)
 800ef78:	4413      	add	r3, r2
 800ef7a:	3302      	adds	r3, #2
 800ef7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef7e:	3202      	adds	r2, #2
 800ef80:	6879      	ldr	r1, [r7, #4]
 800ef82:	440a      	add	r2, r1
 800ef84:	3204      	adds	r2, #4
 800ef86:	7812      	ldrb	r2, [r2, #0]
 800ef88:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 800ef8a:	4b91      	ldr	r3, [pc, #580]	; (800f1d0 <HandleMSG+0x6a0>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2234      	movs	r2, #52	; 0x34
 800ef90:	fb02 f303 	mul.w	r3, r2, r3
 800ef94:	4a8f      	ldr	r2, [pc, #572]	; (800f1d4 <HandleMSG+0x6a4>)
 800ef96:	4413      	add	r3, r2
 800ef98:	3303      	adds	r3, #3
 800ef9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef9c:	3203      	adds	r2, #3
 800ef9e:	6879      	ldr	r1, [r7, #4]
 800efa0:	440a      	add	r2, r1
 800efa2:	3204      	adds	r2, #4
 800efa4:	7812      	ldrb	r2, [r2, #0]
 800efa6:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 800efa8:	4b89      	ldr	r3, [pc, #548]	; (800f1d0 <HandleMSG+0x6a0>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2234      	movs	r2, #52	; 0x34
 800efae:	fb02 f303 	mul.w	r3, r2, r3
 800efb2:	4a88      	ldr	r2, [pc, #544]	; (800f1d4 <HandleMSG+0x6a4>)
 800efb4:	4413      	add	r3, r2
 800efb6:	3304      	adds	r3, #4
 800efb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efba:	3204      	adds	r2, #4
 800efbc:	6879      	ldr	r1, [r7, #4]
 800efbe:	440a      	add	r2, r1
 800efc0:	3204      	adds	r2, #4
 800efc2:	6812      	ldr	r2, [r2, #0]
 800efc4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 800efc6:	4b82      	ldr	r3, [pc, #520]	; (800f1d0 <HandleMSG+0x6a0>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2234      	movs	r2, #52	; 0x34
 800efcc:	fb02 f303 	mul.w	r3, r2, r3
 800efd0:	3308      	adds	r3, #8
 800efd2:	4a80      	ldr	r2, [pc, #512]	; (800f1d4 <HandleMSG+0x6a4>)
 800efd4:	4413      	add	r3, r2
 800efd6:	3304      	adds	r3, #4
 800efd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efda:	3208      	adds	r2, #8
 800efdc:	6879      	ldr	r1, [r7, #4]
 800efde:	440a      	add	r2, r1
 800efe0:	3204      	adds	r2, #4
 800efe2:	6812      	ldr	r2, [r2, #0]
 800efe4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 800efe6:	4b7a      	ldr	r3, [pc, #488]	; (800f1d0 <HandleMSG+0x6a0>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2234      	movs	r2, #52	; 0x34
 800efec:	fb02 f303 	mul.w	r3, r2, r3
 800eff0:	3308      	adds	r3, #8
 800eff2:	4a78      	ldr	r2, [pc, #480]	; (800f1d4 <HandleMSG+0x6a4>)
 800eff4:	4413      	add	r3, r2
 800eff6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eff8:	320c      	adds	r2, #12
 800effa:	6879      	ldr	r1, [r7, #4]
 800effc:	440a      	add	r2, r1
 800effe:	3204      	adds	r2, #4
 800f000:	6812      	ldr	r2, [r2, #0]
 800f002:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 800f004:	4b72      	ldr	r3, [pc, #456]	; (800f1d0 <HandleMSG+0x6a0>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2234      	movs	r2, #52	; 0x34
 800f00a:	fb02 f303 	mul.w	r3, r2, r3
 800f00e:	3310      	adds	r3, #16
 800f010:	4a70      	ldr	r2, [pc, #448]	; (800f1d4 <HandleMSG+0x6a4>)
 800f012:	4413      	add	r3, r2
 800f014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f016:	3210      	adds	r2, #16
 800f018:	6879      	ldr	r1, [r7, #4]
 800f01a:	440a      	add	r2, r1
 800f01c:	3204      	adds	r2, #4
 800f01e:	6812      	ldr	r2, [r2, #0]
 800f020:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 800f022:	4b6b      	ldr	r3, [pc, #428]	; (800f1d0 <HandleMSG+0x6a0>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2234      	movs	r2, #52	; 0x34
 800f028:	fb02 f303 	mul.w	r3, r2, r3
 800f02c:	3310      	adds	r3, #16
 800f02e:	4a69      	ldr	r2, [pc, #420]	; (800f1d4 <HandleMSG+0x6a4>)
 800f030:	4413      	add	r3, r2
 800f032:	3304      	adds	r3, #4
 800f034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f036:	3214      	adds	r2, #20
 800f038:	6879      	ldr	r1, [r7, #4]
 800f03a:	440a      	add	r2, r1
 800f03c:	3204      	adds	r2, #4
 800f03e:	6812      	ldr	r2, [r2, #0]
 800f040:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800f042:	4b63      	ldr	r3, [pc, #396]	; (800f1d0 <HandleMSG+0x6a0>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2234      	movs	r2, #52	; 0x34
 800f048:	fb02 f303 	mul.w	r3, r2, r3
 800f04c:	3318      	adds	r3, #24
 800f04e:	4a61      	ldr	r2, [pc, #388]	; (800f1d4 <HandleMSG+0x6a4>)
 800f050:	4413      	add	r3, r2
 800f052:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f054:	3218      	adds	r2, #24
 800f056:	6879      	ldr	r1, [r7, #4]
 800f058:	440a      	add	r2, r1
 800f05a:	3204      	adds	r2, #4
 800f05c:	6812      	ldr	r2, [r2, #0]
 800f05e:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 800f060:	4b5b      	ldr	r3, [pc, #364]	; (800f1d0 <HandleMSG+0x6a0>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2234      	movs	r2, #52	; 0x34
 800f066:	fb02 f303 	mul.w	r3, r2, r3
 800f06a:	3318      	adds	r3, #24
 800f06c:	4a59      	ldr	r2, [pc, #356]	; (800f1d4 <HandleMSG+0x6a4>)
 800f06e:	4413      	add	r3, r2
 800f070:	3304      	adds	r3, #4
 800f072:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f074:	321c      	adds	r2, #28
 800f076:	6879      	ldr	r1, [r7, #4]
 800f078:	440a      	add	r2, r1
 800f07a:	3204      	adds	r2, #4
 800f07c:	6812      	ldr	r2, [r2, #0]
 800f07e:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 800f080:	4b53      	ldr	r3, [pc, #332]	; (800f1d0 <HandleMSG+0x6a0>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2234      	movs	r2, #52	; 0x34
 800f086:	fb02 f303 	mul.w	r3, r2, r3
 800f08a:	3320      	adds	r3, #32
 800f08c:	4a51      	ldr	r2, [pc, #324]	; (800f1d4 <HandleMSG+0x6a4>)
 800f08e:	4413      	add	r3, r2
 800f090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f092:	3220      	adds	r2, #32
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	440a      	add	r2, r1
 800f098:	3204      	adds	r2, #4
 800f09a:	6812      	ldr	r2, [r2, #0]
 800f09c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 800f09e:	4b4c      	ldr	r3, [pc, #304]	; (800f1d0 <HandleMSG+0x6a0>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2234      	movs	r2, #52	; 0x34
 800f0a4:	fb02 f303 	mul.w	r3, r2, r3
 800f0a8:	3320      	adds	r3, #32
 800f0aa:	4a4a      	ldr	r2, [pc, #296]	; (800f1d4 <HandleMSG+0x6a4>)
 800f0ac:	4413      	add	r3, r2
 800f0ae:	3304      	adds	r3, #4
 800f0b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f0b2:	3224      	adds	r2, #36	; 0x24
 800f0b4:	6879      	ldr	r1, [r7, #4]
 800f0b6:	440a      	add	r2, r1
 800f0b8:	3204      	adds	r2, #4
 800f0ba:	6812      	ldr	r2, [r2, #0]
 800f0bc:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 800f0be:	4b44      	ldr	r3, [pc, #272]	; (800f1d0 <HandleMSG+0x6a0>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2234      	movs	r2, #52	; 0x34
 800f0c4:	fb02 f303 	mul.w	r3, r2, r3
 800f0c8:	3328      	adds	r3, #40	; 0x28
 800f0ca:	4a42      	ldr	r2, [pc, #264]	; (800f1d4 <HandleMSG+0x6a4>)
 800f0cc:	4413      	add	r3, r2
 800f0ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f0d0:	3228      	adds	r2, #40	; 0x28
 800f0d2:	6879      	ldr	r1, [r7, #4]
 800f0d4:	440a      	add	r2, r1
 800f0d6:	3204      	adds	r2, #4
 800f0d8:	6812      	ldr	r2, [r2, #0]
 800f0da:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 800f0dc:	4b3c      	ldr	r3, [pc, #240]	; (800f1d0 <HandleMSG+0x6a0>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2234      	movs	r2, #52	; 0x34
 800f0e2:	fb02 f303 	mul.w	r3, r2, r3
 800f0e6:	3328      	adds	r3, #40	; 0x28
 800f0e8:	4a3a      	ldr	r2, [pc, #232]	; (800f1d4 <HandleMSG+0x6a4>)
 800f0ea:	4413      	add	r3, r2
 800f0ec:	3304      	adds	r3, #4
 800f0ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f0f0:	322c      	adds	r2, #44	; 0x2c
 800f0f2:	6879      	ldr	r1, [r7, #4]
 800f0f4:	440a      	add	r2, r1
 800f0f6:	3204      	adds	r2, #4
 800f0f8:	6812      	ldr	r2, [r2, #0]
 800f0fa:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 800f0fc:	4b34      	ldr	r3, [pc, #208]	; (800f1d0 <HandleMSG+0x6a0>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2234      	movs	r2, #52	; 0x34
 800f102:	fb02 f303 	mul.w	r3, r2, r3
 800f106:	3330      	adds	r3, #48	; 0x30
 800f108:	4a32      	ldr	r2, [pc, #200]	; (800f1d4 <HandleMSG+0x6a4>)
 800f10a:	4413      	add	r3, r2
 800f10c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f10e:	3230      	adds	r2, #48	; 0x30
 800f110:	6879      	ldr	r1, [r7, #4]
 800f112:	440a      	add	r2, r1
 800f114:	3204      	adds	r2, #4
 800f116:	6812      	ldr	r2, [r2, #0]
 800f118:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 800f11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f11c:	3334      	adds	r3, #52	; 0x34
 800f11e:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 800f120:	4b2d      	ldr	r3, [pc, #180]	; (800f1d8 <HandleMSG+0x6a8>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	3301      	adds	r3, #1
 800f126:	4a2c      	ldr	r2, [pc, #176]	; (800f1d8 <HandleMSG+0x6a8>)
 800f128:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 800f12a:	4b2b      	ldr	r3, [pc, #172]	; (800f1d8 <HandleMSG+0x6a8>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b08      	cmp	r3, #8
 800f130:	dd02      	ble.n	800f138 <HandleMSG+0x608>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800f132:	4b29      	ldr	r3, [pc, #164]	; (800f1d8 <HandleMSG+0x6a8>)
 800f134:	2208      	movs	r2, #8
 800f136:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 800f138:	4b25      	ldr	r3, [pc, #148]	; (800f1d0 <HandleMSG+0x6a0>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	3301      	adds	r3, #1
 800f13e:	4a24      	ldr	r2, [pc, #144]	; (800f1d0 <HandleMSG+0x6a0>)
 800f140:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800f142:	4b23      	ldr	r3, [pc, #140]	; (800f1d0 <HandleMSG+0x6a0>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b07      	cmp	r3, #7
 800f148:	dd02      	ble.n	800f150 <HandleMSG+0x620>
        {
          OfflineDataWriteIndex = 0;
 800f14a:	4b21      	ldr	r3, [pc, #132]	; (800f1d0 <HandleMSG+0x6a0>)
 800f14c:	2200      	movs	r2, #0
 800f14e:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 800f150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f152:	3301      	adds	r3, #1
 800f154:	65bb      	str	r3, [r7, #88]	; 0x58
 800f156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f15a:	429a      	cmp	r2, r3
 800f15c:	f4ff aeea 	bcc.w	800ef34 <HandleMSG+0x404>
        }
      }

      SensorReadRequest = 1;
 800f160:	4b1e      	ldr	r3, [pc, #120]	; (800f1dc <HandleMSG+0x6ac>)
 800f162:	2201      	movs	r2, #1
 800f164:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f7ff fcb1 	bl	800eace <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2203      	movs	r2, #3
 800f170:	601a      	str	r2, [r3, #0]
      break;
 800f172:	e09a      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b03      	cmp	r3, #3
 800f17a:	d801      	bhi.n	800f180 <HandleMSG+0x650>
      {
        return 0;
 800f17c:	2300      	movs	r3, #0
 800f17e:	e095      	b.n	800f2ac <HandleMSG+0x77c>
      }

      if (Msg->Data[3] == 1U)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	79db      	ldrb	r3, [r3, #7]
 800f184:	2b01      	cmp	r3, #1
 800f186:	d10e      	bne.n	800f1a6 <HandleMSG+0x676>
      {
        UseOfflineData = 1U;
 800f188:	4b15      	ldr	r3, [pc, #84]	; (800f1e0 <HandleMSG+0x6b0>)
 800f18a:	2201      	movs	r2, #1
 800f18c:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800f18e:	4b15      	ldr	r3, [pc, #84]	; (800f1e4 <HandleMSG+0x6b4>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4a15      	ldr	r2, [pc, #84]	; (800f1e8 <HandleMSG+0x6b8>)
 800f194:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 800f196:	4b13      	ldr	r3, [pc, #76]	; (800f1e4 <HandleMSG+0x6b4>)
 800f198:	f04f 32ff 	mov.w	r2, #4294967295
 800f19c:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800f19e:	4813      	ldr	r0, [pc, #76]	; (800f1ec <HandleMSG+0x6bc>)
 800f1a0:	f7fd f9c0 	bl	800c524 <HAL_TIM_Base_Stop_IT>
 800f1a4:	e006      	b.n	800f1b4 <HandleMSG+0x684>
      }
      else
      {
        UseOfflineData = 0U;
 800f1a6:	4b0e      	ldr	r3, [pc, #56]	; (800f1e0 <HandleMSG+0x6b0>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 800f1ac:	4b0e      	ldr	r3, [pc, #56]	; (800f1e8 <HandleMSG+0x6b8>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a0c      	ldr	r2, [pc, #48]	; (800f1e4 <HandleMSG+0x6b4>)
 800f1b2:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7ff fc8a 	bl	800eace <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff fb52 	bl	800e864 <UART_SendMsg>
      break;
 800f1c0:	e073      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2b02      	cmp	r3, #2
 800f1c8:	d812      	bhi.n	800f1f0 <HandleMSG+0x6c0>
      {
        return 0;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	e06e      	b.n	800f2ac <HandleMSG+0x77c>
 800f1ce:	bf00      	nop
 800f1d0:	20001e5c 	.word	0x20001e5c
 800f1d4:	20001cb8 	.word	0x20001cb8
 800f1d8:	20001e60 	.word	0x20001e60
 800f1dc:	20001cb4 	.word	0x20001cb4
 800f1e0:	20001cb5 	.word	0x20001cb5
 800f1e4:	20001c88 	.word	0x20001c88
 800f1e8:	200024b0 	.word	0x200024b0
 800f1ec:	200024fc 	.word	0x200024fc
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	3307      	adds	r3, #7
 800f1f4:	4a2f      	ldr	r2, [pc, #188]	; (800f2b4 <HandleMSG+0x784>)
 800f1f6:	6812      	ldr	r2, [r2, #0]
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	2204      	movs	r2, #4
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f000 fdef 	bl	800fde0 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	330b      	adds	r3, #11
 800f206:	2201      	movs	r2, #1
 800f208:	2130      	movs	r1, #48	; 0x30
 800f20a:	4618      	mov	r0, r3
 800f20c:	f000 fde8 	bl	800fde0 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f7ff fc5c 	bl	800eace <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2208      	movs	r2, #8
 800f21a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7ff fb21 	bl	800e864 <UART_SendMsg>
      break;
 800f222:	e042      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Calibration_Mode:
      if (Msg->Len < 5U)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2b04      	cmp	r3, #4
 800f22a:	d801      	bhi.n	800f230 <HandleMSG+0x700>
      {
        return 0;
 800f22c:	2300      	movs	r3, #0
 800f22e:	e03d      	b.n	800f2ac <HandleMSG+0x77c>
      }

      switch ((uint32_t)Msg->Data[3])
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	79db      	ldrb	r3, [r3, #7]
 800f234:	2b10      	cmp	r3, #16
 800f236:	d002      	beq.n	800f23e <HandleMSG+0x70e>
 800f238:	2b20      	cmp	r3, #32
 800f23a:	d006      	beq.n	800f24a <HandleMSG+0x71a>
        case GYROSCOPE_SENSOR:
          MotionDI_set_gyro_calibration_mode((MDI_cal_type_t)Msg->Data[4]);
          break;

        default:
          break;
 800f23c:	e00b      	b.n	800f256 <HandleMSG+0x726>
          MotionDI_set_acc_calibration_mode((MDI_cal_type_t)Msg->Data[4]);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	7a1b      	ldrb	r3, [r3, #8]
 800f242:	4618      	mov	r0, r3
 800f244:	f000 fbfa 	bl	800fa3c <MotionDI_set_acc_calibration_mode>
          break;
 800f248:	e005      	b.n	800f256 <HandleMSG+0x726>
          MotionDI_set_gyro_calibration_mode((MDI_cal_type_t)Msg->Data[4]);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	7a1b      	ldrb	r3, [r3, #8]
 800f24e:	4618      	mov	r0, r3
 800f250:	f000 fc34 	bl	800fabc <MotionDI_set_gyro_calibration_mode>
          break;
 800f254:	bf00      	nop
      }

      BUILD_REPLY_HEADER(Msg);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7ff fc39 	bl	800eace <BUILD_REPLY_HEADER>
      Msg->Len = 5;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2205      	movs	r2, #5
 800f260:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f7ff fafe 	bl	800e864 <UART_SendMsg>
      break;
 800f268:	e01f      	b.n	800f2aa <HandleMSG+0x77a>

    case CMD_Calibration_Reset:
      if (Msg->Len < 4U)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b03      	cmp	r3, #3
 800f270:	d801      	bhi.n	800f276 <HandleMSG+0x746>
      {
        return 0;
 800f272:	2300      	movs	r3, #0
 800f274:	e01a      	b.n	800f2ac <HandleMSG+0x77c>
      }

      switch ((uint32_t)Msg->Data[3])
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	79db      	ldrb	r3, [r3, #7]
 800f27a:	2b10      	cmp	r3, #16
 800f27c:	d002      	beq.n	800f284 <HandleMSG+0x754>
 800f27e:	2b20      	cmp	r3, #32
 800f280:	d003      	beq.n	800f28a <HandleMSG+0x75a>
        case GYROSCOPE_SENSOR:
          MotionDI_reset_gyro_calibration();
          break;

        default:
          break;
 800f282:	e005      	b.n	800f290 <HandleMSG+0x760>
          MotionDI_reset_acc_calibration();
 800f284:	f000 fbff 	bl	800fa86 <MotionDI_reset_acc_calibration>
          break;
 800f288:	e002      	b.n	800f290 <HandleMSG+0x760>
          MotionDI_reset_gyro_calibration();
 800f28a:	f000 fc3c 	bl	800fb06 <MotionDI_reset_gyro_calibration>
          break;
 800f28e:	bf00      	nop
      }

      BUILD_REPLY_HEADER(Msg);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7ff fc1c 	bl	800eace <BUILD_REPLY_HEADER>
      Msg->Len = 4;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2204      	movs	r2, #4
 800f29a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f7ff fae1 	bl	800e864 <UART_SendMsg>
      break;
 800f2a2:	e002      	b.n	800f2aa <HandleMSG+0x77a>

    default:
      ret = 0;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800f2a8:	bf00      	nop
  }

  return ret;
 800f2aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3760      	adds	r7, #96	; 0x60
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	20001344 	.word	0x20001344

0800f2b8 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 800f2b8:	b590      	push	{r4, r7, lr}
 800f2ba:	b085      	sub	sp, #20
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	4604      	mov	r4, r0
 800f2c0:	4608      	mov	r0, r1
 800f2c2:	4611      	mov	r1, r2
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	4623      	mov	r3, r4
 800f2c8:	71fb      	strb	r3, [r7, #7]
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	71bb      	strb	r3, [r7, #6]
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	717b      	strb	r3, [r7, #5]
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 800f2d6:	79fb      	ldrb	r3, [r7, #7]
 800f2d8:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 800f2da:	79bb      	ldrb	r3, [r7, #6]
 800f2dc:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 800f2de:	797b      	ldrb	r3, [r7, #5]
 800f2e0:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 800f2e2:	793b      	ldrb	r3, [r7, #4]
 800f2e4:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 800f2e6:	f107 030c 	add.w	r3, r7, #12
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	4806      	ldr	r0, [pc, #24]	; (800f308 <RTC_DateRegulate+0x50>)
 800f2f0:	f7fc feaa 	bl	800c048 <HAL_RTC_SetDate>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d001      	beq.n	800f2fe <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800f2fa:	f000 fb3f 	bl	800f97c <Error_Handler>
  }
}
 800f2fe:	bf00      	nop
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	bd90      	pop	{r4, r7, pc}
 800f306:	bf00      	nop
 800f308:	200024d8 	.word	0x200024d8

0800f30c <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b088      	sub	sp, #32
 800f310:	af00      	add	r7, sp, #0
 800f312:	4603      	mov	r3, r0
 800f314:	71fb      	strb	r3, [r7, #7]
 800f316:	460b      	mov	r3, r1
 800f318:	71bb      	strb	r3, [r7, #6]
 800f31a:	4613      	mov	r3, r2
 800f31c:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800f31e:	79fb      	ldrb	r3, [r7, #7]
 800f320:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 800f322:	79bb      	ldrb	r3, [r7, #6]
 800f324:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 800f326:	797b      	ldrb	r3, [r7, #5]
 800f328:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 800f32a:	2300      	movs	r3, #0
 800f32c:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800f32e:	2300      	movs	r3, #0
 800f330:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f332:	2300      	movs	r3, #0
 800f334:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800f336:	2300      	movs	r3, #0
 800f338:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 800f33a:	f107 030c 	add.w	r3, r7, #12
 800f33e:	2200      	movs	r2, #0
 800f340:	4619      	mov	r1, r3
 800f342:	4806      	ldr	r0, [pc, #24]	; (800f35c <RTC_TimeRegulate+0x50>)
 800f344:	f7fc fd87 	bl	800be56 <HAL_RTC_SetTime>
 800f348:	4603      	mov	r3, r0
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d001      	beq.n	800f352 <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800f34e:	f000 fb15 	bl	800f97c <Error_Handler>
  }
}
 800f352:	bf00      	nop
 800f354:	3720      	adds	r7, #32
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	200024d8 	.word	0x200024d8

0800f360 <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 800f360:	b5b0      	push	{r4, r5, r7, lr}
 800f362:	b0a0      	sub	sp, #128	; 0x80
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 800f36a:	230d      	movs	r3, #13
 800f36c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 800f370:	2300      	movs	r3, #0
 800f372:	637b      	str	r3, [r7, #52]	; 0x34
  const char ps[] = {"MEMS shield demo,26,"FW_VERSION",%s,"BOARD_NAME};
 800f374:	4b19      	ldr	r3, [pc, #100]	; (800f3dc <Get_PresentationString+0x7c>)
 800f376:	f107 040c 	add.w	r4, r7, #12
 800f37a:	461d      	mov	r5, r3
 800f37c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f37e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f384:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f388:	6020      	str	r0, [r4, #0]
 800f38a:	3404      	adds	r4, #4
 800f38c:	7021      	strb	r1, [r4, #0]

  MotionDI_manager_get_version(lib_version_string, &lib_version_len);
 800f38e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f392:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f396:	4611      	mov	r1, r2
 800f398:	4618      	mov	r0, r3
 800f39a:	f000 fbf9 	bl	800fb90 <MotionDI_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 800f39e:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 800f3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	da06      	bge.n	800f3b6 <Get_PresentationString+0x56>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 800f3a8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800f3ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f3b0:	4413      	add	r3, r2
 800f3b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f3b4:	e002      	b.n	800f3bc <Get_PresentationString+0x5c>
  }
  else
  {
    lib_version_num = lib_version_string;
 800f3b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f3ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 800f3bc:	f107 020c 	add.w	r2, r7, #12
 800f3c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f3c2:	2140      	movs	r1, #64	; 0x40
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f00b ffd1 	bl	801b36c <sniprintf>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	601a      	str	r2, [r3, #0]
}
 800f3d2:	bf00      	nop
 800f3d4:	3780      	adds	r7, #128	; 0x80
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bdb0      	pop	{r4, r5, r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	0801dcc8 	.word	0x0801dcc8

0800f3e0 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800f3e4:	2102      	movs	r1, #2
 800f3e6:	2000      	movs	r0, #0
 800f3e8:	f7f8 ff94 	bl	8008314 <IKS01A3_MOTION_SENSOR_Init>
}
 800f3ec:	bf00      	nop
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800f3f4:	2101      	movs	r1, #1
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	f7f8 ff8c 	bl	8008314 <IKS01A3_MOTION_SENSOR_Init>
}
 800f3fc:	bf00      	nop
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800f404:	2104      	movs	r1, #4
 800f406:	2002      	movs	r0, #2
 800f408:	f7f8 ff84 	bl	8008314 <IKS01A3_MOTION_SENSOR_Init>
}
 800f40c:	bf00      	nop
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800f414:	2102      	movs	r1, #2
 800f416:	2001      	movs	r0, #1
 800f418:	f7f8 fb9e 	bl	8007b58 <IKS01A3_ENV_SENSOR_Init>
}
 800f41c:	bf00      	nop
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800f424:	2101      	movs	r1, #1
 800f426:	2000      	movs	r0, #0
 800f428:	f7f8 fb96 	bl	8007b58 <IKS01A3_ENV_SENSOR_Init>
}
 800f42c:	bf00      	nop
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800f434:	2104      	movs	r1, #4
 800f436:	2000      	movs	r0, #0
 800f438:	f7f8 fb8e 	bl	8007b58 <IKS01A3_ENV_SENSOR_Init>
}
 800f43c:	bf00      	nop
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800f444:	2102      	movs	r1, #2
 800f446:	2000      	movs	r0, #0
 800f448:	f7f9 f860 	bl	800850c <IKS01A3_MOTION_SENSOR_Enable>
}
 800f44c:	bf00      	nop
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800f454:	2101      	movs	r1, #1
 800f456:	2000      	movs	r0, #0
 800f458:	f7f9 f858 	bl	800850c <IKS01A3_MOTION_SENSOR_Enable>
}
 800f45c:	bf00      	nop
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800f464:	2104      	movs	r1, #4
 800f466:	2002      	movs	r0, #2
 800f468:	f7f9 f850 	bl	800850c <IKS01A3_MOTION_SENSOR_Enable>
}
 800f46c:	bf00      	nop
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Enable(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800f474:	2102      	movs	r1, #2
 800f476:	2001      	movs	r0, #1
 800f478:	f7f8 fc6a 	bl	8007d50 <IKS01A3_ENV_SENSOR_Enable>
}
 800f47c:	bf00      	nop
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800f484:	2101      	movs	r1, #1
 800f486:	2000      	movs	r0, #0
 800f488:	f7f8 fc62 	bl	8007d50 <IKS01A3_ENV_SENSOR_Enable>
}
 800f48c:	bf00      	nop
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800f494:	2104      	movs	r1, #4
 800f496:	2000      	movs	r0, #0
 800f498:	f7f8 fc5a 	bl	8007d50 <IKS01A3_ENV_SENSOR_Enable>
}
 800f49c:	bf00      	nop
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800f4a4:	2102      	movs	r1, #2
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	f7f9 f872 	bl	8008590 <IKS01A3_MOTION_SENSOR_Disable>
}
 800f4ac:	bf00      	nop
 800f4ae:	bd80      	pop	{r7, pc}

0800f4b0 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800f4b4:	2101      	movs	r1, #1
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	f7f9 f86a 	bl	8008590 <IKS01A3_MOTION_SENSOR_Disable>
}
 800f4bc:	bf00      	nop
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800f4c4:	2104      	movs	r1, #4
 800f4c6:	2002      	movs	r0, #2
 800f4c8:	f7f9 f862 	bl	8008590 <IKS01A3_MOTION_SENSOR_Disable>
}
 800f4cc:	bf00      	nop
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Disable(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800f4d4:	2102      	movs	r1, #2
 800f4d6:	2001      	movs	r0, #1
 800f4d8:	f7f8 fc7c 	bl	8007dd4 <IKS01A3_ENV_SENSOR_Disable>
}
 800f4dc:	bf00      	nop
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Disable(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800f4e4:	2101      	movs	r1, #1
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	f7f8 fc74 	bl	8007dd4 <IKS01A3_ENV_SENSOR_Disable>
}
 800f4ec:	bf00      	nop
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Disable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800f4f4:	2104      	movs	r1, #4
 800f4f6:	2000      	movs	r0, #0
 800f4f8:	f7f8 fc6c 	bl	8007dd4 <IKS01A3_ENV_SENSOR_Disable>
}
 800f4fc:	bf00      	nop
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	2102      	movs	r1, #2
 800f50c:	2000      	movs	r0, #0
 800f50e:	f7f9 f881 	bl	8008614 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b082      	sub	sp, #8
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	2101      	movs	r1, #1
 800f526:	2000      	movs	r0, #0
 800f528:	f7f9 f874 	bl	8008614 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800f52c:	bf00      	nop
 800f52e:	3708      	adds	r7, #8
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, Axes);
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	2104      	movs	r1, #4
 800f540:	2002      	movs	r0, #2
 800f542:	f7f9 f867 	bl	8008614 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800f546:	bf00      	nop
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b082      	sub	sp, #8
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, Value);
 800f556:	687a      	ldr	r2, [r7, #4]
 800f558:	2102      	movs	r1, #2
 800f55a:	2001      	movs	r0, #1
 800f55c:	f7f8 fc7c 	bl	8007e58 <IKS01A3_ENV_SENSOR_GetValue>
}
 800f560:	bf00      	nop
 800f562:	3708      	adds	r7, #8
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, Value);
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	2101      	movs	r1, #1
 800f574:	2000      	movs	r0, #0
 800f576:	f7f8 fc6f 	bl	8007e58 <IKS01A3_ENV_SENSOR_GetValue>
}
 800f57a:	bf00      	nop
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b082      	sub	sp, #8
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, Value);
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	2104      	movs	r1, #4
 800f58e:	2000      	movs	r0, #0
 800f590:	f7f8 fc62 	bl	8007e58 <IKS01A3_ENV_SENSOR_GetValue>
}
 800f594:	bf00      	nop
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 800f5a6:	ed97 0a01 	vldr	s0, [r7, #4]
 800f5aa:	2102      	movs	r1, #2
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	f7f9 f875 	bl	800869c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 800f5b2:	bf00      	nop
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b082      	sub	sp, #8
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	2102      	movs	r1, #2
 800f5c6:	2000      	movs	r0, #0
 800f5c8:	f7f9 f8ae 	bl	8008728 <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 800f5cc:	bf00      	nop
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2273      	movs	r2, #115	; 0x73
 800f5e0:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	2265      	movs	r2, #101	; 0x65
 800f5e8:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	3302      	adds	r3, #2
 800f5ee:	2275      	movs	r2, #117	; 0x75
 800f5f0:	701a      	strb	r2, [r3, #0]
}
 800f5f2:	bf00      	nop
 800f5f4:	370c      	adds	r7, #12
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr

0800f5fe <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800f5fe:	b480      	push	{r7}
 800f600:	b083      	sub	sp, #12
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2273      	movs	r2, #115	; 0x73
 800f60a:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	3301      	adds	r3, #1
 800f610:	2265      	movs	r2, #101	; 0x65
 800f612:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	3302      	adds	r3, #2
 800f618:	2275      	movs	r2, #117	; 0x75
 800f61a:	701a      	strb	r2, [r3, #0]
}
 800f61c:	bf00      	nop
 800f61e:	370c      	adds	r7, #12
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr

0800f628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f62c:	f7f9 fac4 	bl	8008bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f630:	f000 f80d 	bl	800f64e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f634:	f000 f948 	bl	800f8c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800f638:	f000 f928 	bl	800f88c <MX_DMA_Init>
  MX_CRC_Init();
 800f63c:	f000 f85a 	bl	800f6f4 <MX_CRC_Init>
  MX_RTC_Init();
 800f640:	f000 f87a 	bl	800f738 <MX_RTC_Init>
  MX_MEMS_Init();
 800f644:	f7fe fb77 	bl	800dd36 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 800f648:	f7fe fb7b 	bl	800dd42 <MX_MEMS_Process>
 800f64c:	e7fc      	b.n	800f648 <main+0x20>

0800f64e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b096      	sub	sp, #88	; 0x58
 800f652:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f654:	f107 0314 	add.w	r3, r7, #20
 800f658:	2244      	movs	r2, #68	; 0x44
 800f65a:	2100      	movs	r1, #0
 800f65c:	4618      	mov	r0, r3
 800f65e:	f00b fe7d 	bl	801b35c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f662:	463b      	mov	r3, r7
 800f664:	2200      	movs	r2, #0
 800f666:	601a      	str	r2, [r3, #0]
 800f668:	605a      	str	r2, [r3, #4]
 800f66a:	609a      	str	r2, [r3, #8]
 800f66c:	60da      	str	r2, [r3, #12]
 800f66e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800f670:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f674:	f7fb f874 	bl	800a760 <HAL_PWREx_ControlVoltageScaling>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d001      	beq.n	800f682 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800f67e:	f000 f97d 	bl	800f97c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800f682:	230a      	movs	r3, #10
 800f684:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800f686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f68a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800f68c:	2310      	movs	r3, #16
 800f68e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800f690:	2301      	movs	r3, #1
 800f692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f694:	2302      	movs	r3, #2
 800f696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800f698:	2302      	movs	r3, #2
 800f69a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800f69c:	2301      	movs	r3, #1
 800f69e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800f6a0:	230a      	movs	r3, #10
 800f6a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800f6a4:	2307      	movs	r3, #7
 800f6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800f6a8:	2302      	movs	r3, #2
 800f6aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800f6ac:	2302      	movs	r3, #2
 800f6ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f6b0:	f107 0314 	add.w	r3, r7, #20
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fb f8a9 	bl	800a80c <HAL_RCC_OscConfig>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d001      	beq.n	800f6c4 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800f6c0:	f000 f95c 	bl	800f97c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f6c4:	230f      	movs	r3, #15
 800f6c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f6c8:	2303      	movs	r3, #3
 800f6ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800f6d8:	463b      	mov	r3, r7
 800f6da:	2104      	movs	r1, #4
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fb fc7d 	bl	800afdc <HAL_RCC_ClockConfig>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d001      	beq.n	800f6ec <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800f6e8:	f000 f948 	bl	800f97c <Error_Handler>
  }
}
 800f6ec:	bf00      	nop
 800f6ee:	3758      	adds	r7, #88	; 0x58
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800f6f8:	4b0d      	ldr	r3, [pc, #52]	; (800f730 <MX_CRC_Init+0x3c>)
 800f6fa:	4a0e      	ldr	r2, [pc, #56]	; (800f734 <MX_CRC_Init+0x40>)
 800f6fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800f6fe:	4b0c      	ldr	r3, [pc, #48]	; (800f730 <MX_CRC_Init+0x3c>)
 800f700:	2200      	movs	r2, #0
 800f702:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800f704:	4b0a      	ldr	r3, [pc, #40]	; (800f730 <MX_CRC_Init+0x3c>)
 800f706:	2200      	movs	r2, #0
 800f708:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800f70a:	4b09      	ldr	r3, [pc, #36]	; (800f730 <MX_CRC_Init+0x3c>)
 800f70c:	2200      	movs	r2, #0
 800f70e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800f710:	4b07      	ldr	r3, [pc, #28]	; (800f730 <MX_CRC_Init+0x3c>)
 800f712:	2200      	movs	r2, #0
 800f714:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800f716:	4b06      	ldr	r3, [pc, #24]	; (800f730 <MX_CRC_Init+0x3c>)
 800f718:	2201      	movs	r2, #1
 800f71a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800f71c:	4804      	ldr	r0, [pc, #16]	; (800f730 <MX_CRC_Init+0x3c>)
 800f71e:	f7f9 fbfd 	bl	8008f1c <HAL_CRC_Init>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d001      	beq.n	800f72c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800f728:	f000 f928 	bl	800f97c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800f72c:	bf00      	nop
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	200024b4 	.word	0x200024b4
 800f734:	40023000 	.word	0x40023000

0800f738 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800f73e:	1d3b      	adds	r3, r7, #4
 800f740:	2200      	movs	r2, #0
 800f742:	601a      	str	r2, [r3, #0]
 800f744:	605a      	str	r2, [r3, #4]
 800f746:	609a      	str	r2, [r3, #8]
 800f748:	60da      	str	r2, [r3, #12]
 800f74a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800f74c:	2300      	movs	r3, #0
 800f74e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800f750:	4b25      	ldr	r3, [pc, #148]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f752:	4a26      	ldr	r2, [pc, #152]	; (800f7ec <MX_RTC_Init+0xb4>)
 800f754:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800f756:	4b24      	ldr	r3, [pc, #144]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f758:	2200      	movs	r2, #0
 800f75a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800f75c:	4b22      	ldr	r3, [pc, #136]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f75e:	227f      	movs	r2, #127	; 0x7f
 800f760:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800f762:	4b21      	ldr	r3, [pc, #132]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f764:	22ff      	movs	r2, #255	; 0xff
 800f766:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f768:	4b1f      	ldr	r3, [pc, #124]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f76a:	2200      	movs	r2, #0
 800f76c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800f76e:	4b1e      	ldr	r3, [pc, #120]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f770:	2200      	movs	r2, #0
 800f772:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f774:	4b1c      	ldr	r3, [pc, #112]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f776:	2200      	movs	r2, #0
 800f778:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f77a:	4b1b      	ldr	r3, [pc, #108]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f77c:	2200      	movs	r2, #0
 800f77e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800f780:	4819      	ldr	r0, [pc, #100]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f782:	f7fc faed 	bl	800bd60 <HAL_RTC_Init>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d001      	beq.n	800f790 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800f78c:	f000 f8f6 	bl	800f97c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800f790:	2300      	movs	r3, #0
 800f792:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800f794:	2300      	movs	r3, #0
 800f796:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800f798:	2300      	movs	r3, #0
 800f79a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f79c:	2300      	movs	r3, #0
 800f79e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800f7a4:	1d3b      	adds	r3, r7, #4
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	480f      	ldr	r0, [pc, #60]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f7ac:	f7fc fb53 	bl	800be56 <HAL_RTC_SetTime>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d001      	beq.n	800f7ba <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800f7b6:	f000 f8e1 	bl	800f97c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800f7be:	2301      	movs	r3, #1
 800f7c0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800f7ca:	463b      	mov	r3, r7
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	4805      	ldr	r0, [pc, #20]	; (800f7e8 <MX_RTC_Init+0xb0>)
 800f7d2:	f7fc fc39 	bl	800c048 <HAL_RTC_SetDate>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800f7dc:	f000 f8ce 	bl	800f97c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800f7e0:	bf00      	nop
 800f7e2:	3718      	adds	r7, #24
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	200024d8 	.word	0x200024d8
 800f7ec:	40002800 	.word	0x40002800

0800f7f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b088      	sub	sp, #32
 800f7f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f7f6:	f107 0310 	add.w	r3, r7, #16
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	605a      	str	r2, [r3, #4]
 800f800:	609a      	str	r2, [r3, #8]
 800f802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f804:	1d3b      	adds	r3, r7, #4
 800f806:	2200      	movs	r2, #0
 800f808:	601a      	str	r2, [r3, #0]
 800f80a:	605a      	str	r2, [r3, #4]
 800f80c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800f80e:	4b1d      	ldr	r3, [pc, #116]	; (800f884 <MX_TIM3_Init+0x94>)
 800f810:	4a1d      	ldr	r2, [pc, #116]	; (800f888 <MX_TIM3_Init+0x98>)
 800f812:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800f814:	4b1b      	ldr	r3, [pc, #108]	; (800f884 <MX_TIM3_Init+0x94>)
 800f816:	2200      	movs	r2, #0
 800f818:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f81a:	4b1a      	ldr	r3, [pc, #104]	; (800f884 <MX_TIM3_Init+0x94>)
 800f81c:	2200      	movs	r2, #0
 800f81e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800f820:	4b18      	ldr	r3, [pc, #96]	; (800f884 <MX_TIM3_Init+0x94>)
 800f822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f828:	4b16      	ldr	r3, [pc, #88]	; (800f884 <MX_TIM3_Init+0x94>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f82e:	4b15      	ldr	r3, [pc, #84]	; (800f884 <MX_TIM3_Init+0x94>)
 800f830:	2200      	movs	r2, #0
 800f832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800f834:	4813      	ldr	r0, [pc, #76]	; (800f884 <MX_TIM3_Init+0x94>)
 800f836:	f7fc fdad 	bl	800c394 <HAL_TIM_Base_Init>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d001      	beq.n	800f844 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800f840:	f000 f89c 	bl	800f97c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f848:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800f84a:	f107 0310 	add.w	r3, r7, #16
 800f84e:	4619      	mov	r1, r3
 800f850:	480c      	ldr	r0, [pc, #48]	; (800f884 <MX_TIM3_Init+0x94>)
 800f852:	f7fc ffb5 	bl	800c7c0 <HAL_TIM_ConfigClockSource>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d001      	beq.n	800f860 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800f85c:	f000 f88e 	bl	800f97c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f860:	2300      	movs	r3, #0
 800f862:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f864:	2300      	movs	r3, #0
 800f866:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f868:	1d3b      	adds	r3, r7, #4
 800f86a:	4619      	mov	r1, r3
 800f86c:	4805      	ldr	r0, [pc, #20]	; (800f884 <MX_TIM3_Init+0x94>)
 800f86e:	f7fd f9cd 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800f878:	f000 f880 	bl	800f97c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800f87c:	bf00      	nop
 800f87e:	3720      	adds	r7, #32
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	200024fc 	.word	0x200024fc
 800f888:	40000400 	.word	0x40000400

0800f88c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800f892:	4b0c      	ldr	r3, [pc, #48]	; (800f8c4 <MX_DMA_Init+0x38>)
 800f894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f896:	4a0b      	ldr	r2, [pc, #44]	; (800f8c4 <MX_DMA_Init+0x38>)
 800f898:	f043 0301 	orr.w	r3, r3, #1
 800f89c:	6493      	str	r3, [r2, #72]	; 0x48
 800f89e:	4b09      	ldr	r3, [pc, #36]	; (800f8c4 <MX_DMA_Init+0x38>)
 800f8a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	607b      	str	r3, [r7, #4]
 800f8a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	2010      	movs	r0, #16
 800f8b0:	f7f9 fafd 	bl	8008eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800f8b4:	2010      	movs	r0, #16
 800f8b6:	f7f9 fb16 	bl	8008ee6 <HAL_NVIC_EnableIRQ>

}
 800f8ba:	bf00      	nop
 800f8bc:	3708      	adds	r7, #8
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	40021000 	.word	0x40021000

0800f8c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b08a      	sub	sp, #40	; 0x28
 800f8cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8ce:	f107 0314 	add.w	r3, r7, #20
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	601a      	str	r2, [r3, #0]
 800f8d6:	605a      	str	r2, [r3, #4]
 800f8d8:	609a      	str	r2, [r3, #8]
 800f8da:	60da      	str	r2, [r3, #12]
 800f8dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f8de:	4b25      	ldr	r3, [pc, #148]	; (800f974 <MX_GPIO_Init+0xac>)
 800f8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8e2:	4a24      	ldr	r2, [pc, #144]	; (800f974 <MX_GPIO_Init+0xac>)
 800f8e4:	f043 0304 	orr.w	r3, r3, #4
 800f8e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f8ea:	4b22      	ldr	r3, [pc, #136]	; (800f974 <MX_GPIO_Init+0xac>)
 800f8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8ee:	f003 0304 	and.w	r3, r3, #4
 800f8f2:	613b      	str	r3, [r7, #16]
 800f8f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f8f6:	4b1f      	ldr	r3, [pc, #124]	; (800f974 <MX_GPIO_Init+0xac>)
 800f8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8fa:	4a1e      	ldr	r2, [pc, #120]	; (800f974 <MX_GPIO_Init+0xac>)
 800f8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f900:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f902:	4b1c      	ldr	r3, [pc, #112]	; (800f974 <MX_GPIO_Init+0xac>)
 800f904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f90e:	4b19      	ldr	r3, [pc, #100]	; (800f974 <MX_GPIO_Init+0xac>)
 800f910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f912:	4a18      	ldr	r2, [pc, #96]	; (800f974 <MX_GPIO_Init+0xac>)
 800f914:	f043 0301 	orr.w	r3, r3, #1
 800f918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f91a:	4b16      	ldr	r3, [pc, #88]	; (800f974 <MX_GPIO_Init+0xac>)
 800f91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f91e:	f003 0301 	and.w	r3, r3, #1
 800f922:	60bb      	str	r3, [r7, #8]
 800f924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f926:	4b13      	ldr	r3, [pc, #76]	; (800f974 <MX_GPIO_Init+0xac>)
 800f928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f92a:	4a12      	ldr	r2, [pc, #72]	; (800f974 <MX_GPIO_Init+0xac>)
 800f92c:	f043 0302 	orr.w	r3, r3, #2
 800f930:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f932:	4b10      	ldr	r3, [pc, #64]	; (800f974 <MX_GPIO_Init+0xac>)
 800f934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f936:	f003 0302 	and.w	r3, r3, #2
 800f93a:	607b      	str	r3, [r7, #4]
 800f93c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800f93e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f944:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800f948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f94a:	2300      	movs	r3, #0
 800f94c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800f94e:	f107 0314 	add.w	r3, r7, #20
 800f952:	4619      	mov	r1, r3
 800f954:	4808      	ldr	r0, [pc, #32]	; (800f978 <MX_GPIO_Init+0xb0>)
 800f956:	f7f9 fdc3 	bl	80094e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800f95a:	2200      	movs	r2, #0
 800f95c:	2100      	movs	r1, #0
 800f95e:	2028      	movs	r0, #40	; 0x28
 800f960:	f7f9 faa5 	bl	8008eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800f964:	2028      	movs	r0, #40	; 0x28
 800f966:	f7f9 fabe 	bl	8008ee6 <HAL_NVIC_EnableIRQ>

}
 800f96a:	bf00      	nop
 800f96c:	3728      	adds	r7, #40	; 0x28
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	40021000 	.word	0x40021000
 800f978:	48000800 	.word	0x48000800

0800f97c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f97c:	b480      	push	{r7}
 800f97e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800f980:	b672      	cpsid	i
}
 800f982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f984:	e7fe      	b.n	800f984 <Error_Handler+0x8>
	...

0800f988 <MotionDI_manager_init>:
 * @brief  Initialize the MotionDI engine
 * @param  freq frequency of input data
 * @retval None
 */
void MotionDI_manager_init(float freq)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	ed87 0a01 	vstr	s0, [r7, #4]
  MotionDI_Initialize(&freq);
 800f992:	1d3b      	adds	r3, r7, #4
 800f994:	4618      	mov	r0, r3
 800f996:	f007 fc0f 	bl	80171b8 <MotionDI_Initialize>

  MotionDI_getKnobs(ipKnobs);
 800f99a:	4b1b      	ldr	r3, [pc, #108]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f007 ff5a 	bl	8017858 <MotionDI_getKnobs>

  ipKnobs->AccKnob.CalType = MDI_CAL_CONTINUOUS;
 800f9a4:	4b18      	ldr	r3, [pc, #96]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2202      	movs	r2, #2
 800f9aa:	711a      	strb	r2, [r3, #4]
  ipKnobs->GyrKnob.CalType = MDI_CAL_CONTINUOUS;
 800f9ac:	4b16      	ldr	r3, [pc, #88]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2202      	movs	r2, #2
 800f9b2:	771a      	strb	r2, [r3, #28]

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->AccOrientation);
 800f9b4:	4b14      	ldr	r3, [pc, #80]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	332c      	adds	r3, #44	; 0x2c
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7ff fe0a 	bl	800f5d4 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->GyroOrientation);
 800f9c0:	4b11      	ldr	r3, [pc, #68]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	3330      	adds	r3, #48	; 0x30
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7ff fe19 	bl	800f5fe <BSP_SENSOR_GYR_GetOrientation>

  ipKnobs->SFKnob.output_type = MDI_ENGINE_OUTPUT_ENU;
 800f9cc:	4b0e      	ldr	r3, [pc, #56]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->SFKnob.modx = DECIMATION;
 800f9d6:	4b0c      	ldr	r3, [pc, #48]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  MotionDI_setKnobs(ipKnobs);
 800f9e0:	4b09      	ldr	r3, [pc, #36]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f007 ff2d 	bl	8017844 <MotionDI_setKnobs>

  AccCalMode = ipKnobs->AccKnob.CalType;
 800f9ea:	4b07      	ldr	r3, [pc, #28]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	791a      	ldrb	r2, [r3, #4]
 800f9f0:	4b06      	ldr	r3, [pc, #24]	; (800fa0c <MotionDI_manager_init+0x84>)
 800f9f2:	701a      	strb	r2, [r3, #0]
  GyrCalMode = ipKnobs->GyrKnob.CalType;
 800f9f4:	4b04      	ldr	r3, [pc, #16]	; (800fa08 <MotionDI_manager_init+0x80>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	7f1a      	ldrb	r2, [r3, #28]
 800f9fa:	4b05      	ldr	r3, [pc, #20]	; (800fa10 <MotionDI_manager_init+0x88>)
 800f9fc:	701a      	strb	r2, [r3, #0]
}
 800f9fe:	bf00      	nop
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	2000134c 	.word	0x2000134c
 800fa0c:	20001e64 	.word	0x20001e64
 800fa10:	20001e65 	.word	0x20001e65

0800fa14 <MotionDI_get_acc_calibration_mode>:
 * @brief  Get calibration mode for accelerometer
 * @param  mode Calibration mode
 * @retval None
 */
void MotionDI_get_acc_calibration_mode(MDI_cal_type_t *mode)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  MotionDI_getKnobs(ipKnobs);
 800fa1c:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <MotionDI_get_acc_calibration_mode+0x24>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f007 ff19 	bl	8017858 <MotionDI_getKnobs>
  *mode = ipKnobs->AccKnob.CalType;
 800fa26:	4b04      	ldr	r3, [pc, #16]	; (800fa38 <MotionDI_get_acc_calibration_mode+0x24>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	791a      	ldrb	r2, [r3, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	701a      	strb	r2, [r3, #0]
}
 800fa30:	bf00      	nop
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	2000134c 	.word	0x2000134c

0800fa3c <MotionDI_set_acc_calibration_mode>:
 * @brief  Set calibration mode for accelerometer
 * @param  mode Calibration mode
 * @retval None
 */
void MotionDI_set_acc_calibration_mode(MDI_cal_type_t mode)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	4603      	mov	r3, r0
 800fa44:	71fb      	strb	r3, [r7, #7]
  MotionDI_getKnobs(ipKnobs);
 800fa46:	4b09      	ldr	r3, [pc, #36]	; (800fa6c <MotionDI_set_acc_calibration_mode+0x30>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f007 ff04 	bl	8017858 <MotionDI_getKnobs>
  ipKnobs->AccKnob.CalType = mode;
 800fa50:	4b06      	ldr	r3, [pc, #24]	; (800fa6c <MotionDI_set_acc_calibration_mode+0x30>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	79fa      	ldrb	r2, [r7, #7]
 800fa56:	711a      	strb	r2, [r3, #4]
  MotionDI_setKnobs(ipKnobs);
 800fa58:	4b04      	ldr	r3, [pc, #16]	; (800fa6c <MotionDI_set_acc_calibration_mode+0x30>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f007 fef1 	bl	8017844 <MotionDI_setKnobs>
}
 800fa62:	bf00      	nop
 800fa64:	3708      	adds	r7, #8
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	2000134c 	.word	0x2000134c

0800fa70 <MotionDI_get_acc_calibration>:
 * @brief  Get calibration parameters for accelerometer
 * @param  acc_cal Structure containing calibration data for accelerometer
 * @retval None
 */
void MotionDI_get_acc_calibration(MDI_cal_output_t *acc_cal)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  MotionDI_AccCal_getParams(acc_cal);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f007 ff39 	bl	80178f0 <MotionDI_AccCal_getParams>
}
 800fa7e:	bf00      	nop
 800fa80:	3708      	adds	r7, #8
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <MotionDI_reset_acc_calibration>:
/**
 * @brief  Reset calibration parameters for accelerometer
 * @retval None
 */
void MotionDI_reset_acc_calibration(void)
{
 800fa86:	b580      	push	{r7, lr}
 800fa88:	af00      	add	r7, sp, #0
  MotionDI_AccCal_reset();
 800fa8a:	f007 ff4f 	bl	801792c <MotionDI_AccCal_reset>
}
 800fa8e:	bf00      	nop
 800fa90:	bd80      	pop	{r7, pc}
	...

0800fa94 <MotionDI_get_gyro_calibration_mode>:
 * @brief  Get calibration mode for gyroscope
 * @param  mode Calibration mode
 * @retval None
 */
void MotionDI_get_gyro_calibration_mode(MDI_cal_type_t *mode)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  MotionDI_getKnobs(ipKnobs);
 800fa9c:	4b06      	ldr	r3, [pc, #24]	; (800fab8 <MotionDI_get_gyro_calibration_mode+0x24>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f007 fed9 	bl	8017858 <MotionDI_getKnobs>
  *mode = ipKnobs->GyrKnob.CalType;
 800faa6:	4b04      	ldr	r3, [pc, #16]	; (800fab8 <MotionDI_get_gyro_calibration_mode+0x24>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	7f1a      	ldrb	r2, [r3, #28]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	701a      	strb	r2, [r3, #0]
}
 800fab0:	bf00      	nop
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	2000134c 	.word	0x2000134c

0800fabc <MotionDI_set_gyro_calibration_mode>:
 * @brief  Set calibration mode for gyroscope
 * @param  mode Calibration mode
 * @retval None
 */
void MotionDI_set_gyro_calibration_mode(MDI_cal_type_t mode)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	4603      	mov	r3, r0
 800fac4:	71fb      	strb	r3, [r7, #7]
  MotionDI_getKnobs(ipKnobs);
 800fac6:	4b09      	ldr	r3, [pc, #36]	; (800faec <MotionDI_set_gyro_calibration_mode+0x30>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4618      	mov	r0, r3
 800facc:	f007 fec4 	bl	8017858 <MotionDI_getKnobs>
  ipKnobs->GyrKnob.CalType = mode;
 800fad0:	4b06      	ldr	r3, [pc, #24]	; (800faec <MotionDI_set_gyro_calibration_mode+0x30>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	79fa      	ldrb	r2, [r7, #7]
 800fad6:	771a      	strb	r2, [r3, #28]
  MotionDI_setKnobs(ipKnobs);
 800fad8:	4b04      	ldr	r3, [pc, #16]	; (800faec <MotionDI_set_gyro_calibration_mode+0x30>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4618      	mov	r0, r3
 800fade:	f007 feb1 	bl	8017844 <MotionDI_setKnobs>
}
 800fae2:	bf00      	nop
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	2000134c 	.word	0x2000134c

0800faf0 <MotionDI_get_gyro_calibration>:
 * @brief  Get calibration parameters for gyroscope
 * @param  gyro_cal Structure containing calibration data for gyroscope
 * @retval None
 */
void MotionDI_get_gyro_calibration(MDI_cal_output_t *gyro_cal)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  MotionDI_GyrCal_getParams(gyro_cal);
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f007 ff8b 	bl	8017a14 <MotionDI_GyrCal_getParams>
}
 800fafe:	bf00      	nop
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <MotionDI_reset_gyro_calibration>:
/**
 * @brief  Reset calibration parameters for gyroscope
 * @retval None
 */
void MotionDI_reset_gyro_calibration(void)
{
 800fb06:	b580      	push	{r7, lr}
 800fb08:	af00      	add	r7, sp, #0
  MotionDI_GyrCal_reset();
 800fb0a:	f007 ffa7 	bl	8017a5c <MotionDI_GyrCal_reset>
}
 800fb0e:	bf00      	nop
 800fb10:	bd80      	pop	{r7, pc}
	...

0800fb14 <MotionDI_manager_run>:
 * @param  data_in  Structure containing input data
 * @param  data_out Structure containing output data
 * @retval None
 */
void MotionDI_manager_run(MDI_input_t *data_in, MDI_output_t *data_out)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  if (discardedCount == sampleToDiscard)
 800fb1e:	4b19      	ldr	r3, [pc, #100]	; (800fb84 <MotionDI_manager_run+0x70>)
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	4b19      	ldr	r3, [pc, #100]	; (800fb88 <MotionDI_manager_run+0x74>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d104      	bne.n	800fb34 <MotionDI_manager_run+0x20>
  {
    MotionDI_update(data_out, data_in);
 800fb2a:	6879      	ldr	r1, [r7, #4]
 800fb2c:	6838      	ldr	r0, [r7, #0]
 800fb2e:	f007 ffcb 	bl	8017ac8 <MotionDI_update>
    float_array_set(data_out->quaternion, 0, MDI_QNUM_AXES);
    float_array_set(data_out->rotation, 0, MDI_NUM_AXES);
    float_array_set(data_out->gravity, 0, MDI_NUM_AXES);
    float_array_set(data_out->linear_acceleration, 0, MDI_NUM_AXES);
  }
}
 800fb32:	e023      	b.n	800fb7c <MotionDI_manager_run+0x68>
    discardedCount++;
 800fb34:	4b13      	ldr	r3, [pc, #76]	; (800fb84 <MotionDI_manager_run+0x70>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	3301      	adds	r3, #1
 800fb3a:	4a12      	ldr	r2, [pc, #72]	; (800fb84 <MotionDI_manager_run+0x70>)
 800fb3c:	6013      	str	r3, [r2, #0]
    float_array_set(data_out->quaternion, 0, MDI_QNUM_AXES);
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	330c      	adds	r3, #12
 800fb42:	2104      	movs	r1, #4
 800fb44:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800fb8c <MotionDI_manager_run+0x78>
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f000 f831 	bl	800fbb0 <float_array_set>
    float_array_set(data_out->rotation, 0, MDI_NUM_AXES);
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	2103      	movs	r1, #3
 800fb52:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800fb8c <MotionDI_manager_run+0x78>
 800fb56:	4618      	mov	r0, r3
 800fb58:	f000 f82a 	bl	800fbb0 <float_array_set>
    float_array_set(data_out->gravity, 0, MDI_NUM_AXES);
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	331c      	adds	r3, #28
 800fb60:	2103      	movs	r1, #3
 800fb62:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800fb8c <MotionDI_manager_run+0x78>
 800fb66:	4618      	mov	r0, r3
 800fb68:	f000 f822 	bl	800fbb0 <float_array_set>
    float_array_set(data_out->linear_acceleration, 0, MDI_NUM_AXES);
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	3328      	adds	r3, #40	; 0x28
 800fb70:	2103      	movs	r1, #3
 800fb72:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800fb8c <MotionDI_manager_run+0x78>
 800fb76:	4618      	mov	r0, r3
 800fb78:	f000 f81a 	bl	800fbb0 <float_array_set>
}
 800fb7c:	bf00      	nop
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	2000257c 	.word	0x2000257c
 800fb88:	20001350 	.word	0x20001350
 800fb8c:	00000000 	.word	0x00000000

0800fb90 <MotionDI_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionDI_manager_get_version(char *version, int *length)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  *length = (int)MotionDI_GetLibVersion(version);
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f00b fb80 	bl	801b2a0 <MotionDI_GetLibVersion>
 800fba0:	4603      	mov	r3, r0
 800fba2:	461a      	mov	r2, r3
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	601a      	str	r2, [r3, #0]
}
 800fba8:	bf00      	nop
 800fbaa:	3708      	adds	r7, #8
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <float_array_set>:
 * @param  value Set to this value
 * @param  count Number of items to be set
 * @retval None
 */
static void float_array_set(float array[], float value, uint32_t count)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b087      	sub	sp, #28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	ed87 0a02 	vstr	s0, [r7, #8]
 800fbbc:	6079      	str	r1, [r7, #4]
  for (uint32_t i = 0; i < count; i++)
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	617b      	str	r3, [r7, #20]
 800fbc2:	e008      	b.n	800fbd6 <float_array_set+0x26>
  {
    array[i] = value;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	68fa      	ldr	r2, [r7, #12]
 800fbca:	4413      	add	r3, r2
 800fbcc:	68ba      	ldr	r2, [r7, #8]
 800fbce:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < count; i++)
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	617b      	str	r3, [r7, #20]
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d3f2      	bcc.n	800fbc4 <float_array_set+0x14>
  }
}
 800fbde:	bf00      	nop
 800fbe0:	bf00      	nop
 800fbe2:	371c      	adds	r7, #28
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	60fb      	str	r3, [r7, #12]

  switch (Source)
 800fbfc:	78fb      	ldrb	r3, [r7, #3]
 800fbfe:	2bf0      	cmp	r3, #240	; 0xf0
 800fc00:	d002      	beq.n	800fc08 <ByteStuffCopyByte+0x1c>
 800fc02:	2bf1      	cmp	r3, #241	; 0xf1
 800fc04:	d008      	beq.n	800fc18 <ByteStuffCopyByte+0x2c>
 800fc06:	e00f      	b.n	800fc28 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	22f1      	movs	r2, #241	; 0xf1
 800fc0c:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	3301      	adds	r3, #1
 800fc12:	22f2      	movs	r2, #242	; 0xf2
 800fc14:	701a      	strb	r2, [r3, #0]
      break;
 800fc16:	e00d      	b.n	800fc34 <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	22f1      	movs	r2, #241	; 0xf1
 800fc1c:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	3301      	adds	r3, #1
 800fc22:	22f1      	movs	r2, #241	; 0xf1
 800fc24:	701a      	strb	r2, [r3, #0]
      break;
 800fc26:	e005      	b.n	800fc34 <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	78fa      	ldrb	r2, [r7, #3]
 800fc2c:	701a      	strb	r2, [r3, #0]
      ret = 1;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	60fb      	str	r3, [r7, #12]
      break;
 800fc32:	bf00      	nop
  }

  return ret;
 800fc34:	68fb      	ldr	r3, [r7, #12]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3714      	adds	r7, #20
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr

0800fc42 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b084      	sub	sp, #16
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
 800fc4a:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 800fc50:	2300      	movs	r3, #0
 800fc52:	60fb      	str	r3, [r7, #12]
 800fc54:	e011      	b.n	800fc7a <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	18d0      	adds	r0, r2, r3
 800fc5c:	683a      	ldr	r2, [r7, #0]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	4413      	add	r3, r2
 800fc62:	3304      	adds	r3, #4
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	4619      	mov	r1, r3
 800fc68:	f7ff ffc0 	bl	800fbec <ByteStuffCopyByte>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	4413      	add	r3, r2
 800fc72:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3301      	adds	r3, #1
 800fc78:	60fb      	str	r3, [r7, #12]
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d3e8      	bcc.n	800fc56 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	4413      	add	r3, r2
 800fc8a:	22f0      	movs	r2, #240	; 0xf0
 800fc8c:	701a      	strb	r2, [r3, #0]
  count++;
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	3301      	adds	r3, #1
 800fc92:	60bb      	str	r3, [r7, #8]
  return count;
 800fc94:	68bb      	ldr	r3, [r7, #8]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3710      	adds	r7, #16
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 800fc9e:	b480      	push	{r7}
 800fca0:	b083      	sub	sp, #12
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	4603      	mov	r3, r0
 800fca6:	603a      	str	r2, [r7, #0]
 800fca8:	71fb      	strb	r3, [r7, #7]
 800fcaa:	460b      	mov	r3, r1
 800fcac:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 800fcae:	79fb      	ldrb	r3, [r7, #7]
 800fcb0:	2bf1      	cmp	r3, #241	; 0xf1
 800fcb2:	d111      	bne.n	800fcd8 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 800fcb4:	79bb      	ldrb	r3, [r7, #6]
 800fcb6:	2bf1      	cmp	r3, #241	; 0xf1
 800fcb8:	d104      	bne.n	800fcc4 <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	22f1      	movs	r2, #241	; 0xf1
 800fcbe:	701a      	strb	r2, [r3, #0]
      return 2;
 800fcc0:	2302      	movs	r3, #2
 800fcc2:	e00d      	b.n	800fce0 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 800fcc4:	79bb      	ldrb	r3, [r7, #6]
 800fcc6:	2bf2      	cmp	r3, #242	; 0xf2
 800fcc8:	d104      	bne.n	800fcd4 <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	22f0      	movs	r2, #240	; 0xf0
 800fcce:	701a      	strb	r2, [r3, #0]
      return 2;
 800fcd0:	2302      	movs	r3, #2
 800fcd2:	e005      	b.n	800fce0 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	e003      	b.n	800fce0 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	79fa      	ldrb	r2, [r7, #7]
 800fcdc:	701a      	strb	r2, [r3, #0]
    return 1;
 800fcde:	2301      	movs	r3, #1
  }
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	370c      	adds	r7, #12
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr

0800fcec <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	60bb      	str	r3, [r7, #8]
 800fcfc:	e00a      	b.n	800fd14 <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	4413      	add	r3, r2
 800fd04:	3304      	adds	r3, #4
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	7bfa      	ldrb	r2, [r7, #15]
 800fd0a:	1ad3      	subs	r3, r2, r3
 800fd0c:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	3301      	adds	r3, #1
 800fd12:	60bb      	str	r3, [r7, #8]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d3ef      	bcc.n	800fcfe <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	4413      	add	r3, r2
 800fd24:	3304      	adds	r3, #4
 800fd26:	7bfa      	ldrb	r2, [r7, #15]
 800fd28:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	1c5a      	adds	r2, r3, #1
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	601a      	str	r2, [r3, #0]
}
 800fd34:	bf00      	nop
 800fd36:	3714      	adds	r7, #20
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	60bb      	str	r3, [r7, #8]
 800fd50:	e00a      	b.n	800fd68 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	4413      	add	r3, r2
 800fd58:	3304      	adds	r3, #4
 800fd5a:	781a      	ldrb	r2, [r3, #0]
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
 800fd5e:	4413      	add	r3, r2
 800fd60:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	3301      	adds	r3, #1
 800fd66:	60bb      	str	r3, [r7, #8]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d3ef      	bcc.n	800fd52 <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	1e5a      	subs	r2, r3, #1
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 800fd7c:	7bfb      	ldrb	r3, [r7, #15]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	bf0c      	ite	eq
 800fd82:	2301      	moveq	r3, #1
 800fd84:	2300      	movne	r3, #0
 800fd86:	b2db      	uxtb	r3, r3
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3714      	adds	r7, #20
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b085      	sub	sp, #20
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	3b01      	subs	r3, #1
 800fda2:	603b      	str	r3, [r7, #0]
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	4413      	add	r3, r2
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800fdae:	e00d      	b.n	800fdcc <Deserialize+0x38>
  {
    app <<= 8;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	021b      	lsls	r3, r3, #8
 800fdb4:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	603b      	str	r3, [r7, #0]
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	4413      	add	r3, r2
 800fdca:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1ee      	bne.n	800fdb0 <Deserialize+0x1c>
  }

  return app;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b087      	sub	sp, #28
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 800fdec:	2300      	movs	r3, #0
 800fdee:	617b      	str	r3, [r7, #20]
 800fdf0:	e00f      	b.n	800fe12 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	4413      	add	r3, r2
 800fdfc:	693a      	ldr	r2, [r7, #16]
 800fdfe:	b2d2      	uxtb	r2, r2
 800fe00:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	0a1b      	lsrs	r3, r3, #8
 800fe06:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	617b      	str	r3, [r7, #20]
 800fe12:	697a      	ldr	r2, [r7, #20]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d3eb      	bcc.n	800fdf2 <Serialize_s32+0x12>
  }
}
 800fe1a:	bf00      	nop
 800fe1c:	bf00      	nop
 800fe1e:	371c      	adds	r7, #28
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr

0800fe28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fe2e:	4b0f      	ldr	r3, [pc, #60]	; (800fe6c <HAL_MspInit+0x44>)
 800fe30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe32:	4a0e      	ldr	r2, [pc, #56]	; (800fe6c <HAL_MspInit+0x44>)
 800fe34:	f043 0301 	orr.w	r3, r3, #1
 800fe38:	6613      	str	r3, [r2, #96]	; 0x60
 800fe3a:	4b0c      	ldr	r3, [pc, #48]	; (800fe6c <HAL_MspInit+0x44>)
 800fe3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe3e:	f003 0301 	and.w	r3, r3, #1
 800fe42:	607b      	str	r3, [r7, #4]
 800fe44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fe46:	4b09      	ldr	r3, [pc, #36]	; (800fe6c <HAL_MspInit+0x44>)
 800fe48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe4a:	4a08      	ldr	r2, [pc, #32]	; (800fe6c <HAL_MspInit+0x44>)
 800fe4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe50:	6593      	str	r3, [r2, #88]	; 0x58
 800fe52:	4b06      	ldr	r3, [pc, #24]	; (800fe6c <HAL_MspInit+0x44>)
 800fe54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe5a:	603b      	str	r3, [r7, #0]
 800fe5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fe5e:	bf00      	nop
 800fe60:	370c      	adds	r7, #12
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	40021000 	.word	0x40021000

0800fe70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b085      	sub	sp, #20
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a0a      	ldr	r2, [pc, #40]	; (800fea8 <HAL_CRC_MspInit+0x38>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d10b      	bne.n	800fe9a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800fe82:	4b0a      	ldr	r3, [pc, #40]	; (800feac <HAL_CRC_MspInit+0x3c>)
 800fe84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe86:	4a09      	ldr	r2, [pc, #36]	; (800feac <HAL_CRC_MspInit+0x3c>)
 800fe88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fe8c:	6493      	str	r3, [r2, #72]	; 0x48
 800fe8e:	4b07      	ldr	r3, [pc, #28]	; (800feac <HAL_CRC_MspInit+0x3c>)
 800fe90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fe96:	60fb      	str	r3, [r7, #12]
 800fe98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800fe9a:	bf00      	nop
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	40023000 	.word	0x40023000
 800feac:	40021000 	.word	0x40021000

0800feb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b0a4      	sub	sp, #144	; 0x90
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800feb8:	f107 0308 	add.w	r3, r7, #8
 800febc:	2288      	movs	r2, #136	; 0x88
 800febe:	2100      	movs	r1, #0
 800fec0:	4618      	mov	r0, r3
 800fec2:	f00b fa4b 	bl	801b35c <memset>
  if(hrtc->Instance==RTC)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a10      	ldr	r2, [pc, #64]	; (800ff0c <HAL_RTC_MspInit+0x5c>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d118      	bne.n	800ff02 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800fed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fed4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800fed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800feda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fede:	f107 0308 	add.w	r3, r7, #8
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fb fa80 	bl	800b3e8 <HAL_RCCEx_PeriphCLKConfig>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d001      	beq.n	800fef2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800feee:	f7ff fd45 	bl	800f97c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800fef2:	4b07      	ldr	r3, [pc, #28]	; (800ff10 <HAL_RTC_MspInit+0x60>)
 800fef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fef8:	4a05      	ldr	r2, [pc, #20]	; (800ff10 <HAL_RTC_MspInit+0x60>)
 800fefa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fefe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ff02:	bf00      	nop
 800ff04:	3790      	adds	r7, #144	; 0x90
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	40002800 	.word	0x40002800
 800ff10:	40021000 	.word	0x40021000

0800ff14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	4a0d      	ldr	r2, [pc, #52]	; (800ff58 <HAL_TIM_Base_MspInit+0x44>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d113      	bne.n	800ff4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ff26:	4b0d      	ldr	r3, [pc, #52]	; (800ff5c <HAL_TIM_Base_MspInit+0x48>)
 800ff28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff2a:	4a0c      	ldr	r2, [pc, #48]	; (800ff5c <HAL_TIM_Base_MspInit+0x48>)
 800ff2c:	f043 0302 	orr.w	r3, r3, #2
 800ff30:	6593      	str	r3, [r2, #88]	; 0x58
 800ff32:	4b0a      	ldr	r3, [pc, #40]	; (800ff5c <HAL_TIM_Base_MspInit+0x48>)
 800ff34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff36:	f003 0302 	and.w	r3, r3, #2
 800ff3a:	60fb      	str	r3, [r7, #12]
 800ff3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ff3e:	2200      	movs	r2, #0
 800ff40:	2100      	movs	r1, #0
 800ff42:	201d      	movs	r0, #29
 800ff44:	f7f8 ffb3 	bl	8008eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ff48:	201d      	movs	r0, #29
 800ff4a:	f7f8 ffcc 	bl	8008ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800ff4e:	bf00      	nop
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	40000400 	.word	0x40000400
 800ff5c:	40021000 	.word	0x40021000

0800ff60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ff60:	b480      	push	{r7}
 800ff62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ff64:	e7fe      	b.n	800ff64 <NMI_Handler+0x4>

0800ff66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ff66:	b480      	push	{r7}
 800ff68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ff6a:	e7fe      	b.n	800ff6a <HardFault_Handler+0x4>

0800ff6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ff70:	e7fe      	b.n	800ff70 <MemManage_Handler+0x4>

0800ff72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ff72:	b480      	push	{r7}
 800ff74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ff76:	e7fe      	b.n	800ff76 <BusFault_Handler+0x4>

0800ff78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ff7c:	e7fe      	b.n	800ff7c <UsageFault_Handler+0x4>

0800ff7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ff7e:	b480      	push	{r7}
 800ff80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ff82:	bf00      	nop
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ff90:	bf00      	nop
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr

0800ff9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ff9a:	b480      	push	{r7}
 800ff9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ff9e:	bf00      	nop
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr

0800ffa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ffac:	f7f8 fe60 	bl	8008c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ffb0:	bf00      	nop
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800ffb8:	4802      	ldr	r0, [pc, #8]	; (800ffc4 <DMA1_Channel6_IRQHandler+0x10>)
 800ffba:	f7f9 f9b1 	bl	8009320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800ffbe:	bf00      	nop
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	20002604 	.word	0x20002604

0800ffc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800ffcc:	4802      	ldr	r0, [pc, #8]	; (800ffd8 <TIM3_IRQHandler+0x10>)
 800ffce:	f7fc fad8 	bl	800c582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800ffd2:	bf00      	nop
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	200024fc 	.word	0x200024fc

0800ffdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800ffe0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ffe4:	f7f9 fd32 	bl	8009a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ffe8:	bf00      	nop
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	4603      	mov	r3, r0
 800fff4:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800fff6:	79fb      	ldrb	r3, [r7, #7]
 800fff8:	4a04      	ldr	r2, [pc, #16]	; (801000c <BSP_LED_Init+0x20>)
 800fffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fffe:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3708      	adds	r7, #8
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	0801deb4 	.word	0x0801deb4

08010010 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	4603      	mov	r3, r0
 8010018:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 801001a:	79fb      	ldrb	r3, [r7, #7]
 801001c:	4a06      	ldr	r2, [pc, #24]	; (8010038 <BSP_LED_On+0x28>)
 801001e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010022:	2120      	movs	r1, #32
 8010024:	2201      	movs	r2, #1
 8010026:	4618      	mov	r0, r3
 8010028:	f7f9 fcf8 	bl	8009a1c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 801002c:	2300      	movs	r3, #0
}
 801002e:	4618      	mov	r0, r3
 8010030:	3708      	adds	r7, #8
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	20001354 	.word	0x20001354

0801003c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	4603      	mov	r3, r0
 8010044:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8010046:	79fb      	ldrb	r3, [r7, #7]
 8010048:	4a06      	ldr	r2, [pc, #24]	; (8010064 <BSP_LED_Off+0x28>)
 801004a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801004e:	2120      	movs	r1, #32
 8010050:	2200      	movs	r2, #0
 8010052:	4618      	mov	r0, r3
 8010054:	f7f9 fce2 	bl	8009a1c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8010058:	2300      	movs	r3, #0
}
 801005a:	4618      	mov	r0, r3
 801005c:	3708      	adds	r7, #8
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
 8010062:	bf00      	nop
 8010064:	20001354 	.word	0x20001354

08010068 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8010068:	b580      	push	{r7, lr}
 801006a:	b088      	sub	sp, #32
 801006c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801006e:	4b1c      	ldr	r3, [pc, #112]	; (80100e0 <LED_USER_GPIO_Init+0x78>)
 8010070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010072:	4a1b      	ldr	r2, [pc, #108]	; (80100e0 <LED_USER_GPIO_Init+0x78>)
 8010074:	f043 0301 	orr.w	r3, r3, #1
 8010078:	64d3      	str	r3, [r2, #76]	; 0x4c
 801007a:	4b19      	ldr	r3, [pc, #100]	; (80100e0 <LED_USER_GPIO_Init+0x78>)
 801007c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801007e:	f003 0301 	and.w	r3, r3, #1
 8010082:	60bb      	str	r3, [r7, #8]
 8010084:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010086:	f107 030c 	add.w	r3, r7, #12
 801008a:	2200      	movs	r2, #0
 801008c:	601a      	str	r2, [r3, #0]
 801008e:	605a      	str	r2, [r3, #4]
 8010090:	609a      	str	r2, [r3, #8]
 8010092:	60da      	str	r2, [r3, #12]
 8010094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010096:	4b12      	ldr	r3, [pc, #72]	; (80100e0 <LED_USER_GPIO_Init+0x78>)
 8010098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801009a:	4a11      	ldr	r2, [pc, #68]	; (80100e0 <LED_USER_GPIO_Init+0x78>)
 801009c:	f043 0301 	orr.w	r3, r3, #1
 80100a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80100a2:	4b0f      	ldr	r3, [pc, #60]	; (80100e0 <LED_USER_GPIO_Init+0x78>)
 80100a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100a6:	f003 0301 	and.w	r3, r3, #1
 80100aa:	607b      	str	r3, [r7, #4]
 80100ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80100ae:	2200      	movs	r2, #0
 80100b0:	2120      	movs	r1, #32
 80100b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80100b6:	f7f9 fcb1 	bl	8009a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80100ba:	2320      	movs	r3, #32
 80100bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80100be:	2301      	movs	r3, #1
 80100c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100c2:	2300      	movs	r3, #0
 80100c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80100c6:	2300      	movs	r3, #0
 80100c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80100ca:	f107 030c 	add.w	r3, r7, #12
 80100ce:	4619      	mov	r1, r3
 80100d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80100d4:	f7f9 fa04 	bl	80094e0 <HAL_GPIO_Init>

}
 80100d8:	bf00      	nop
 80100da:	3720      	adds	r7, #32
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	40021000 	.word	0x40021000

080100e4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	4603      	mov	r3, r0
 80100ec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80100ee:	2300      	movs	r3, #0
 80100f0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80100f2:	79fb      	ldrb	r3, [r7, #7]
 80100f4:	2b01      	cmp	r3, #1
 80100f6:	d903      	bls.n	8010100 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80100f8:	f06f 0301 	mvn.w	r3, #1
 80100fc:	60fb      	str	r3, [r7, #12]
 80100fe:	e025      	b.n	801014c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8010100:	79fb      	ldrb	r3, [r7, #7]
 8010102:	79fa      	ldrb	r2, [r7, #7]
 8010104:	4914      	ldr	r1, [pc, #80]	; (8010158 <BSP_COM_Init+0x74>)
 8010106:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801010a:	4814      	ldr	r0, [pc, #80]	; (801015c <BSP_COM_Init+0x78>)
 801010c:	4613      	mov	r3, r2
 801010e:	015b      	lsls	r3, r3, #5
 8010110:	4413      	add	r3, r2
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	4403      	add	r3, r0
 8010116:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8010118:	79fa      	ldrb	r2, [r7, #7]
 801011a:	4613      	mov	r3, r2
 801011c:	015b      	lsls	r3, r3, #5
 801011e:	4413      	add	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	4a0e      	ldr	r2, [pc, #56]	; (801015c <BSP_COM_Init+0x78>)
 8010124:	4413      	add	r3, r2
 8010126:	4618      	mov	r0, r3
 8010128:	f000 f84e 	bl	80101c8 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 801012c:	79fa      	ldrb	r2, [r7, #7]
 801012e:	4613      	mov	r3, r2
 8010130:	015b      	lsls	r3, r3, #5
 8010132:	4413      	add	r3, r2
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	4a09      	ldr	r2, [pc, #36]	; (801015c <BSP_COM_Init+0x78>)
 8010138:	4413      	add	r3, r2
 801013a:	4618      	mov	r0, r3
 801013c:	f000 f810 	bl	8010160 <MX_USART2_UART_Init>
 8010140:	4603      	mov	r3, r0
 8010142:	2b00      	cmp	r3, #0
 8010144:	d002      	beq.n	801014c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010146:	f06f 0303 	mvn.w	r3, #3
 801014a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801014c:	68fb      	ldr	r3, [r7, #12]
}
 801014e:	4618      	mov	r0, r3
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	20001358 	.word	0x20001358
 801015c:	20002580 	.word	0x20002580

08010160 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8010168:	2300      	movs	r3, #0
 801016a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4a15      	ldr	r2, [pc, #84]	; (80101c4 <MX_USART2_UART_Init+0x64>)
 8010170:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8010178:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2200      	movs	r2, #0
 8010184:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2200      	movs	r2, #0
 801018a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	220c      	movs	r2, #12
 8010190:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2200      	movs	r2, #0
 8010196:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2200      	movs	r2, #0
 80101a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7fc fdd4 	bl	800cd58 <HAL_UART_Init>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d001      	beq.n	80101ba <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80101b6:	2301      	movs	r3, #1
 80101b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80101ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3710      	adds	r7, #16
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	40004400 	.word	0x40004400

080101c8 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08a      	sub	sp, #40	; 0x28
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80101d0:	4b30      	ldr	r3, [pc, #192]	; (8010294 <USART2_MspInit+0xcc>)
 80101d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101d4:	4a2f      	ldr	r2, [pc, #188]	; (8010294 <USART2_MspInit+0xcc>)
 80101d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80101da:	6593      	str	r3, [r2, #88]	; 0x58
 80101dc:	4b2d      	ldr	r3, [pc, #180]	; (8010294 <USART2_MspInit+0xcc>)
 80101de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101e4:	613b      	str	r3, [r7, #16]
 80101e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80101e8:	4b2a      	ldr	r3, [pc, #168]	; (8010294 <USART2_MspInit+0xcc>)
 80101ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101ec:	4a29      	ldr	r2, [pc, #164]	; (8010294 <USART2_MspInit+0xcc>)
 80101ee:	f043 0301 	orr.w	r3, r3, #1
 80101f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80101f4:	4b27      	ldr	r3, [pc, #156]	; (8010294 <USART2_MspInit+0xcc>)
 80101f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101f8:	f003 0301 	and.w	r3, r3, #1
 80101fc:	60fb      	str	r3, [r7, #12]
 80101fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8010200:	2304      	movs	r3, #4
 8010202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010204:	2302      	movs	r3, #2
 8010206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010208:	2300      	movs	r3, #0
 801020a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801020c:	2303      	movs	r3, #3
 801020e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8010210:	2307      	movs	r3, #7
 8010212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8010214:	f107 0314 	add.w	r3, r7, #20
 8010218:	4619      	mov	r1, r3
 801021a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801021e:	f7f9 f95f 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8010222:	2308      	movs	r3, #8
 8010224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010226:	2302      	movs	r3, #2
 8010228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801022a:	2300      	movs	r3, #0
 801022c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801022e:	2303      	movs	r3, #3
 8010230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8010232:	2307      	movs	r3, #7
 8010234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8010236:	f107 0314 	add.w	r3, r7, #20
 801023a:	4619      	mov	r1, r3
 801023c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010240:	f7f9 f94e 	bl	80094e0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8010244:	4b14      	ldr	r3, [pc, #80]	; (8010298 <USART2_MspInit+0xd0>)
 8010246:	4a15      	ldr	r2, [pc, #84]	; (801029c <USART2_MspInit+0xd4>)
 8010248:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 801024a:	4b13      	ldr	r3, [pc, #76]	; (8010298 <USART2_MspInit+0xd0>)
 801024c:	2202      	movs	r2, #2
 801024e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010250:	4b11      	ldr	r3, [pc, #68]	; (8010298 <USART2_MspInit+0xd0>)
 8010252:	2200      	movs	r2, #0
 8010254:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010256:	4b10      	ldr	r3, [pc, #64]	; (8010298 <USART2_MspInit+0xd0>)
 8010258:	2200      	movs	r2, #0
 801025a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 801025c:	4b0e      	ldr	r3, [pc, #56]	; (8010298 <USART2_MspInit+0xd0>)
 801025e:	2280      	movs	r2, #128	; 0x80
 8010260:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010262:	4b0d      	ldr	r3, [pc, #52]	; (8010298 <USART2_MspInit+0xd0>)
 8010264:	2200      	movs	r2, #0
 8010266:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010268:	4b0b      	ldr	r3, [pc, #44]	; (8010298 <USART2_MspInit+0xd0>)
 801026a:	2200      	movs	r2, #0
 801026c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 801026e:	4b0a      	ldr	r3, [pc, #40]	; (8010298 <USART2_MspInit+0xd0>)
 8010270:	2220      	movs	r2, #32
 8010272:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010274:	4b08      	ldr	r3, [pc, #32]	; (8010298 <USART2_MspInit+0xd0>)
 8010276:	2200      	movs	r2, #0
 8010278:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 801027a:	4807      	ldr	r0, [pc, #28]	; (8010298 <USART2_MspInit+0xd0>)
 801027c:	f7f8 ff38 	bl	80090f0 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4a05      	ldr	r2, [pc, #20]	; (8010298 <USART2_MspInit+0xd0>)
 8010284:	671a      	str	r2, [r3, #112]	; 0x70
 8010286:	4a04      	ldr	r2, [pc, #16]	; (8010298 <USART2_MspInit+0xd0>)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 801028c:	bf00      	nop
 801028e:	3728      	adds	r7, #40	; 0x28
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	40021000 	.word	0x40021000
 8010298:	20002604 	.word	0x20002604
 801029c:	4002006c 	.word	0x4002006c

080102a0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80102a6:	2300      	movs	r3, #0
 80102a8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80102aa:	4b19      	ldr	r3, [pc, #100]	; (8010310 <BSP_I2C1_Init+0x70>)
 80102ac:	4a19      	ldr	r2, [pc, #100]	; (8010314 <BSP_I2C1_Init+0x74>)
 80102ae:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80102b0:	4b19      	ldr	r3, [pc, #100]	; (8010318 <BSP_I2C1_Init+0x78>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	1c5a      	adds	r2, r3, #1
 80102b6:	4918      	ldr	r1, [pc, #96]	; (8010318 <BSP_I2C1_Init+0x78>)
 80102b8:	600a      	str	r2, [r1, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d122      	bne.n	8010304 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80102be:	4814      	ldr	r0, [pc, #80]	; (8010310 <BSP_I2C1_Init+0x70>)
 80102c0:	f7f9 fee8 	bl	800a094 <HAL_I2C_GetState>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d11c      	bne.n	8010304 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80102ca:	4811      	ldr	r0, [pc, #68]	; (8010310 <BSP_I2C1_Init+0x70>)
 80102cc:	f000 f8fe 	bl	80104cc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d116      	bne.n	8010304 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80102d6:	480e      	ldr	r0, [pc, #56]	; (8010310 <BSP_I2C1_Init+0x70>)
 80102d8:	f000 f8b4 	bl	8010444 <MX_I2C1_Init>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d003      	beq.n	80102ea <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80102e2:	f06f 0307 	mvn.w	r3, #7
 80102e6:	607b      	str	r3, [r7, #4]
 80102e8:	e00c      	b.n	8010304 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80102ea:	2100      	movs	r1, #0
 80102ec:	4808      	ldr	r0, [pc, #32]	; (8010310 <BSP_I2C1_Init+0x70>)
 80102ee:	f7fa f991 	bl	800a614 <HAL_I2CEx_ConfigAnalogFilter>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d003      	beq.n	8010300 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80102f8:	f06f 0307 	mvn.w	r3, #7
 80102fc:	607b      	str	r3, [r7, #4]
 80102fe:	e001      	b.n	8010304 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8010300:	2300      	movs	r3, #0
 8010302:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8010304:	687b      	ldr	r3, [r7, #4]
}
 8010306:	4618      	mov	r0, r3
 8010308:	3708      	adds	r7, #8
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	2000264c 	.word	0x2000264c
 8010314:	40005400 	.word	0x40005400
 8010318:	20002698 	.word	0x20002698

0801031c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8010322:	2300      	movs	r3, #0
 8010324:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8010326:	4b0f      	ldr	r3, [pc, #60]	; (8010364 <BSP_I2C1_DeInit+0x48>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d014      	beq.n	8010358 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 801032e:	4b0d      	ldr	r3, [pc, #52]	; (8010364 <BSP_I2C1_DeInit+0x48>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	3b01      	subs	r3, #1
 8010334:	4a0b      	ldr	r2, [pc, #44]	; (8010364 <BSP_I2C1_DeInit+0x48>)
 8010336:	6013      	str	r3, [r2, #0]
 8010338:	4b0a      	ldr	r3, [pc, #40]	; (8010364 <BSP_I2C1_DeInit+0x48>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d10b      	bne.n	8010358 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8010340:	4809      	ldr	r0, [pc, #36]	; (8010368 <BSP_I2C1_DeInit+0x4c>)
 8010342:	f000 f909 	bl	8010558 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8010346:	4808      	ldr	r0, [pc, #32]	; (8010368 <BSP_I2C1_DeInit+0x4c>)
 8010348:	f7f9 fc32 	bl	8009bb0 <HAL_I2C_DeInit>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d002      	beq.n	8010358 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8010352:	f06f 0307 	mvn.w	r3, #7
 8010356:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8010358:	687b      	ldr	r3, [r7, #4]
}
 801035a:	4618      	mov	r0, r3
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	20002698 	.word	0x20002698
 8010368:	2000264c 	.word	0x2000264c

0801036c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b08a      	sub	sp, #40	; 0x28
 8010370:	af04      	add	r7, sp, #16
 8010372:	60ba      	str	r2, [r7, #8]
 8010374:	461a      	mov	r2, r3
 8010376:	4603      	mov	r3, r0
 8010378:	81fb      	strh	r3, [r7, #14]
 801037a:	460b      	mov	r3, r1
 801037c:	81bb      	strh	r3, [r7, #12]
 801037e:	4613      	mov	r3, r2
 8010380:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8010382:	2300      	movs	r3, #0
 8010384:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8010386:	89ba      	ldrh	r2, [r7, #12]
 8010388:	89f9      	ldrh	r1, [r7, #14]
 801038a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801038e:	9302      	str	r3, [sp, #8]
 8010390:	88fb      	ldrh	r3, [r7, #6]
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	2301      	movs	r3, #1
 801039a:	480c      	ldr	r0, [pc, #48]	; (80103cc <BSP_I2C1_WriteReg+0x60>)
 801039c:	f7f9 fc4c 	bl	8009c38 <HAL_I2C_Mem_Write>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00c      	beq.n	80103c0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80103a6:	4809      	ldr	r0, [pc, #36]	; (80103cc <BSP_I2C1_WriteReg+0x60>)
 80103a8:	f7f9 fe82 	bl	800a0b0 <HAL_I2C_GetError>
 80103ac:	4603      	mov	r3, r0
 80103ae:	2b04      	cmp	r3, #4
 80103b0:	d103      	bne.n	80103ba <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80103b2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80103b6:	617b      	str	r3, [r7, #20]
 80103b8:	e002      	b.n	80103c0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80103ba:	f06f 0303 	mvn.w	r3, #3
 80103be:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80103c0:	697b      	ldr	r3, [r7, #20]
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3718      	adds	r7, #24
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	2000264c 	.word	0x2000264c

080103d0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b08a      	sub	sp, #40	; 0x28
 80103d4:	af04      	add	r7, sp, #16
 80103d6:	60ba      	str	r2, [r7, #8]
 80103d8:	461a      	mov	r2, r3
 80103da:	4603      	mov	r3, r0
 80103dc:	81fb      	strh	r3, [r7, #14]
 80103de:	460b      	mov	r3, r1
 80103e0:	81bb      	strh	r3, [r7, #12]
 80103e2:	4613      	mov	r3, r2
 80103e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80103e6:	2300      	movs	r3, #0
 80103e8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80103ea:	89ba      	ldrh	r2, [r7, #12]
 80103ec:	89f9      	ldrh	r1, [r7, #14]
 80103ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103f2:	9302      	str	r3, [sp, #8]
 80103f4:	88fb      	ldrh	r3, [r7, #6]
 80103f6:	9301      	str	r3, [sp, #4]
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	2301      	movs	r3, #1
 80103fe:	480c      	ldr	r0, [pc, #48]	; (8010430 <BSP_I2C1_ReadReg+0x60>)
 8010400:	f7f9 fd2e 	bl	8009e60 <HAL_I2C_Mem_Read>
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00c      	beq.n	8010424 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 801040a:	4809      	ldr	r0, [pc, #36]	; (8010430 <BSP_I2C1_ReadReg+0x60>)
 801040c:	f7f9 fe50 	bl	800a0b0 <HAL_I2C_GetError>
 8010410:	4603      	mov	r3, r0
 8010412:	2b04      	cmp	r3, #4
 8010414:	d103      	bne.n	801041e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8010416:	f06f 0365 	mvn.w	r3, #101	; 0x65
 801041a:	617b      	str	r3, [r7, #20]
 801041c:	e002      	b.n	8010424 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 801041e:	f06f 0303 	mvn.w	r3, #3
 8010422:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8010424:	697b      	ldr	r3, [r7, #20]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3718      	adds	r7, #24
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	2000264c 	.word	0x2000264c

08010434 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8010434:	b580      	push	{r7, lr}
 8010436:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8010438:	f7f8 fc2e 	bl	8008c98 <HAL_GetTick>
 801043c:	4603      	mov	r3, r0
}
 801043e:	4618      	mov	r0, r3
 8010440:	bd80      	pop	{r7, pc}
	...

08010444 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 801044c:	2300      	movs	r3, #0
 801044e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	4a1c      	ldr	r2, [pc, #112]	; (80104c4 <MX_I2C1_Init+0x80>)
 8010454:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4a1b      	ldr	r2, [pc, #108]	; (80104c8 <MX_I2C1_Init+0x84>)
 801045a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2201      	movs	r2, #1
 8010466:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2200      	movs	r2, #0
 801046c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2200      	movs	r2, #0
 8010472:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2200      	movs	r2, #0
 8010478:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2200      	movs	r2, #0
 801047e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2200      	movs	r2, #0
 8010484:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f7f9 fb03 	bl	8009a92 <HAL_I2C_Init>
 801048c:	4603      	mov	r3, r0
 801048e:	2b00      	cmp	r3, #0
 8010490:	d001      	beq.n	8010496 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8010492:	2301      	movs	r3, #1
 8010494:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010496:	2100      	movs	r1, #0
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7fa f8bb 	bl	800a614 <HAL_I2CEx_ConfigAnalogFilter>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d001      	beq.n	80104a8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80104a4:	2301      	movs	r3, #1
 80104a6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80104a8:	2100      	movs	r1, #0
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f7fa f8fd 	bl	800a6aa <HAL_I2CEx_ConfigDigitalFilter>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80104b6:	2301      	movs	r3, #1
 80104b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80104ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	40005400 	.word	0x40005400
 80104c8:	10909cec 	.word	0x10909cec

080104cc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b08a      	sub	sp, #40	; 0x28
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80104d4:	4b1e      	ldr	r3, [pc, #120]	; (8010550 <I2C1_MspInit+0x84>)
 80104d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104d8:	4a1d      	ldr	r2, [pc, #116]	; (8010550 <I2C1_MspInit+0x84>)
 80104da:	f043 0302 	orr.w	r3, r3, #2
 80104de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80104e0:	4b1b      	ldr	r3, [pc, #108]	; (8010550 <I2C1_MspInit+0x84>)
 80104e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104e4:	f003 0302 	and.w	r3, r3, #2
 80104e8:	613b      	str	r3, [r7, #16]
 80104ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80104ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80104f2:	2312      	movs	r3, #18
 80104f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104f6:	2300      	movs	r3, #0
 80104f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104fa:	2303      	movs	r3, #3
 80104fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80104fe:	2304      	movs	r3, #4
 8010500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8010502:	f107 0314 	add.w	r3, r7, #20
 8010506:	4619      	mov	r1, r3
 8010508:	4812      	ldr	r0, [pc, #72]	; (8010554 <I2C1_MspInit+0x88>)
 801050a:	f7f8 ffe9 	bl	80094e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 801050e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010514:	2312      	movs	r3, #18
 8010516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010518:	2300      	movs	r3, #0
 801051a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801051c:	2303      	movs	r3, #3
 801051e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8010520:	2304      	movs	r3, #4
 8010522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8010524:	f107 0314 	add.w	r3, r7, #20
 8010528:	4619      	mov	r1, r3
 801052a:	480a      	ldr	r0, [pc, #40]	; (8010554 <I2C1_MspInit+0x88>)
 801052c:	f7f8 ffd8 	bl	80094e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010530:	4b07      	ldr	r3, [pc, #28]	; (8010550 <I2C1_MspInit+0x84>)
 8010532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010534:	4a06      	ldr	r2, [pc, #24]	; (8010550 <I2C1_MspInit+0x84>)
 8010536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801053a:	6593      	str	r3, [r2, #88]	; 0x58
 801053c:	4b04      	ldr	r3, [pc, #16]	; (8010550 <I2C1_MspInit+0x84>)
 801053e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010544:	60fb      	str	r3, [r7, #12]
 8010546:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8010548:	bf00      	nop
 801054a:	3728      	adds	r7, #40	; 0x28
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	40021000 	.word	0x40021000
 8010554:	48000400 	.word	0x48000400

08010558 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8010560:	4b09      	ldr	r3, [pc, #36]	; (8010588 <I2C1_MspDeInit+0x30>)
 8010562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010564:	4a08      	ldr	r2, [pc, #32]	; (8010588 <I2C1_MspDeInit+0x30>)
 8010566:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801056a:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 801056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010570:	4806      	ldr	r0, [pc, #24]	; (801058c <I2C1_MspDeInit+0x34>)
 8010572:	f7f9 f95f 	bl	8009834 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8010576:	f44f 7100 	mov.w	r1, #512	; 0x200
 801057a:	4804      	ldr	r0, [pc, #16]	; (801058c <I2C1_MspDeInit+0x34>)
 801057c:	f7f9 f95a 	bl	8009834 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	40021000 	.word	0x40021000
 801058c:	48000400 	.word	0x48000400

08010590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b086      	sub	sp, #24
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010598:	4a14      	ldr	r2, [pc, #80]	; (80105ec <_sbrk+0x5c>)
 801059a:	4b15      	ldr	r3, [pc, #84]	; (80105f0 <_sbrk+0x60>)
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80105a4:	4b13      	ldr	r3, [pc, #76]	; (80105f4 <_sbrk+0x64>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d102      	bne.n	80105b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80105ac:	4b11      	ldr	r3, [pc, #68]	; (80105f4 <_sbrk+0x64>)
 80105ae:	4a12      	ldr	r2, [pc, #72]	; (80105f8 <_sbrk+0x68>)
 80105b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80105b2:	4b10      	ldr	r3, [pc, #64]	; (80105f4 <_sbrk+0x64>)
 80105b4:	681a      	ldr	r2, [r3, #0]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	4413      	add	r3, r2
 80105ba:	693a      	ldr	r2, [r7, #16]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d207      	bcs.n	80105d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80105c0:	f00a fe94 	bl	801b2ec <__errno>
 80105c4:	4603      	mov	r3, r0
 80105c6:	220c      	movs	r2, #12
 80105c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80105ca:	f04f 33ff 	mov.w	r3, #4294967295
 80105ce:	e009      	b.n	80105e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80105d0:	4b08      	ldr	r3, [pc, #32]	; (80105f4 <_sbrk+0x64>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80105d6:	4b07      	ldr	r3, [pc, #28]	; (80105f4 <_sbrk+0x64>)
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	4413      	add	r3, r2
 80105de:	4a05      	ldr	r2, [pc, #20]	; (80105f4 <_sbrk+0x64>)
 80105e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80105e2:	68fb      	ldr	r3, [r7, #12]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3718      	adds	r7, #24
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	20018000 	.word	0x20018000
 80105f0:	00008000 	.word	0x00008000
 80105f4:	2000269c 	.word	0x2000269c
 80105f8:	20002b20 	.word	0x20002b20

080105fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80105fc:	b480      	push	{r7}
 80105fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8010600:	4b15      	ldr	r3, [pc, #84]	; (8010658 <SystemInit+0x5c>)
 8010602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010606:	4a14      	ldr	r2, [pc, #80]	; (8010658 <SystemInit+0x5c>)
 8010608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801060c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8010610:	4b12      	ldr	r3, [pc, #72]	; (801065c <SystemInit+0x60>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4a11      	ldr	r2, [pc, #68]	; (801065c <SystemInit+0x60>)
 8010616:	f043 0301 	orr.w	r3, r3, #1
 801061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801061c:	4b0f      	ldr	r3, [pc, #60]	; (801065c <SystemInit+0x60>)
 801061e:	2200      	movs	r2, #0
 8010620:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8010622:	4b0e      	ldr	r3, [pc, #56]	; (801065c <SystemInit+0x60>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	4a0d      	ldr	r2, [pc, #52]	; (801065c <SystemInit+0x60>)
 8010628:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 801062c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8010630:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8010632:	4b0a      	ldr	r3, [pc, #40]	; (801065c <SystemInit+0x60>)
 8010634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010638:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801063a:	4b08      	ldr	r3, [pc, #32]	; (801065c <SystemInit+0x60>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	4a07      	ldr	r2, [pc, #28]	; (801065c <SystemInit+0x60>)
 8010640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010644:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8010646:	4b05      	ldr	r3, [pc, #20]	; (801065c <SystemInit+0x60>)
 8010648:	2200      	movs	r2, #0
 801064a:	619a      	str	r2, [r3, #24]
}
 801064c:	bf00      	nop
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	e000ed00 	.word	0xe000ed00
 801065c:	40021000 	.word	0x40021000

08010660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8010660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010698 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8010664:	f7ff ffca 	bl	80105fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010668:	480c      	ldr	r0, [pc, #48]	; (801069c <LoopForever+0x6>)
  ldr r1, =_edata
 801066a:	490d      	ldr	r1, [pc, #52]	; (80106a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 801066c:	4a0d      	ldr	r2, [pc, #52]	; (80106a4 <LoopForever+0xe>)
  movs r3, #0
 801066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010670:	e002      	b.n	8010678 <LoopCopyDataInit>

08010672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010676:	3304      	adds	r3, #4

08010678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801067c:	d3f9      	bcc.n	8010672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801067e:	4a0a      	ldr	r2, [pc, #40]	; (80106a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8010680:	4c0a      	ldr	r4, [pc, #40]	; (80106ac <LoopForever+0x16>)
  movs r3, #0
 8010682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010684:	e001      	b.n	801068a <LoopFillZerobss>

08010686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010688:	3204      	adds	r2, #4

0801068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801068c:	d3fb      	bcc.n	8010686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801068e:	f00a fe33 	bl	801b2f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8010692:	f7fe ffc9 	bl	800f628 <main>

08010696 <LoopForever>:

LoopForever:
    b LoopForever
 8010696:	e7fe      	b.n	8010696 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8010698:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 801069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80106a0:	200013c4 	.word	0x200013c4
  ldr r2, =_sidata
 80106a4:	0801e3c0 	.word	0x0801e3c0
  ldr r2, =_sbss
 80106a8:	200013c8 	.word	0x200013c8
  ldr r4, =_ebss
 80106ac:	20002b20 	.word	0x20002b20

080106b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80106b0:	e7fe      	b.n	80106b0 <ADC1_2_IRQHandler>
	...

080106b4 <iNemoEngine_gbias_init>:
 80106b4:	b430      	push	{r4, r5}
 80106b6:	4b1f      	ldr	r3, [pc, #124]	; (8010734 <iNemoEngine_gbias_init+0x80>)
 80106b8:	4a1f      	ldr	r2, [pc, #124]	; (8010738 <iNemoEngine_gbias_init+0x84>)
 80106ba:	4920      	ldr	r1, [pc, #128]	; (801073c <iNemoEngine_gbias_init+0x88>)
 80106bc:	4d20      	ldr	r5, [pc, #128]	; (8010740 <iNemoEngine_gbias_init+0x8c>)
 80106be:	4c21      	ldr	r4, [pc, #132]	; (8010744 <iNemoEngine_gbias_init+0x90>)
 80106c0:	601a      	str	r2, [r3, #0]
 80106c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80106c6:	2200      	movs	r2, #0
 80106c8:	6059      	str	r1, [r3, #4]
 80106ca:	481f      	ldr	r0, [pc, #124]	; (8010748 <iNemoEngine_gbias_init+0x94>)
 80106cc:	609d      	str	r5, [r3, #8]
 80106ce:	2100      	movs	r1, #0
 80106d0:	60dc      	str	r4, [r3, #12]
 80106d2:	ed83 0a04 	vstr	s0, [r3, #16]
 80106d6:	6158      	str	r0, [r3, #20]
 80106d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80106dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80106e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80106e4:	655a      	str	r2, [r3, #84]	; 0x54
 80106e6:	661a      	str	r2, [r3, #96]	; 0x60
 80106e8:	659a      	str	r2, [r3, #88]	; 0x58
 80106ea:	665a      	str	r2, [r3, #100]	; 0x64
 80106ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80106ee:	669a      	str	r2, [r3, #104]	; 0x68
 80106f0:	671a      	str	r2, [r3, #112]	; 0x70
 80106f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80106f4:	675a      	str	r2, [r3, #116]	; 0x74
 80106f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80106fa:	679a      	str	r2, [r3, #120]	; 0x78
 80106fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8010700:	61da      	str	r2, [r3, #28]
 8010702:	629a      	str	r2, [r3, #40]	; 0x28
 8010704:	621a      	str	r2, [r3, #32]
 8010706:	62da      	str	r2, [r3, #44]	; 0x2c
 8010708:	625a      	str	r2, [r3, #36]	; 0x24
 801070a:	631a      	str	r2, [r3, #48]	; 0x30
 801070c:	f8a3 1088 	strh.w	r1, [r3, #136]	; 0x88
 8010710:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 8010714:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
 8010718:	8319      	strh	r1, [r3, #24]
 801071a:	8699      	strh	r1, [r3, #52]	; 0x34
 801071c:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
 8010720:	bc30      	pop	{r4, r5}
 8010722:	639a      	str	r2, [r3, #56]	; 0x38
 8010724:	645a      	str	r2, [r3, #68]	; 0x44
 8010726:	63da      	str	r2, [r3, #60]	; 0x3c
 8010728:	649a      	str	r2, [r3, #72]	; 0x48
 801072a:	641a      	str	r2, [r3, #64]	; 0x40
 801072c:	64da      	str	r2, [r3, #76]	; 0x4c
 801072e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8010732:	4770      	bx	lr
 8010734:	200013e8 	.word	0x200013e8
 8010738:	3ab20043 	.word	0x3ab20043
 801073c:	3e8a3d71 	.word	0x3e8a3d71
 8010740:	3ea8f5c3 	.word	0x3ea8f5c3
 8010744:	3d09c927 	.word	0x3d09c927
 8010748:	41700000 	.word	0x41700000

0801074c <rotVect>:
 801074c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8010750:	ed92 5a01 	vldr	s10, [r2, #4]
 8010754:	edd2 5a00 	vldr	s11, [r2]
 8010758:	ed92 6a02 	vldr	s12, [r2, #8]
 801075c:	ee07 3a90 	vmov	s15, r3
 8010760:	f991 3000 	ldrsb.w	r3, [r1]
 8010764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010768:	ee06 3a90 	vmov	s13, r3
 801076c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010770:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8010774:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010778:	ee07 3a10 	vmov	s14, r3
 801077c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8010780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010784:	eee7 7a06 	vfma.f32	s15, s14, s12
 8010788:	edc0 7a00 	vstr	s15, [r0]
 801078c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8010790:	ed92 5a01 	vldr	s10, [r2, #4]
 8010794:	edd2 5a00 	vldr	s11, [r2]
 8010798:	ed92 6a02 	vldr	s12, [r2, #8]
 801079c:	ee07 3a90 	vmov	s15, r3
 80107a0:	f991 3003 	ldrsb.w	r3, [r1, #3]
 80107a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107a8:	ee06 3a90 	vmov	s13, r3
 80107ac:	ee67 7a85 	vmul.f32	s15, s15, s10
 80107b0:	f991 3005 	ldrsb.w	r3, [r1, #5]
 80107b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80107b8:	ee07 3a10 	vmov	s14, r3
 80107bc:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80107c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80107c4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80107c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80107cc:	f991 3007 	ldrsb.w	r3, [r1, #7]
 80107d0:	ed92 5a01 	vldr	s10, [r2, #4]
 80107d4:	edd2 5a00 	vldr	s11, [r2]
 80107d8:	ed92 6a02 	vldr	s12, [r2, #8]
 80107dc:	ee07 3a90 	vmov	s15, r3
 80107e0:	f991 3006 	ldrsb.w	r3, [r1, #6]
 80107e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107e8:	ee06 3a90 	vmov	s13, r3
 80107ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 80107f0:	f991 3008 	ldrsb.w	r3, [r1, #8]
 80107f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80107f8:	ee07 3a10 	vmov	s14, r3
 80107fc:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8010800:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010804:	eee7 7a06 	vfma.f32	s15, s14, s12
 8010808:	edc0 7a02 	vstr	s15, [r0, #8]
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop

08010810 <m_mldivide>:
 8010810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010814:	b097      	sub	sp, #92	; 0x5c
 8010816:	4607      	mov	r7, r0
 8010818:	460d      	mov	r5, r1
 801081a:	4614      	mov	r4, r2
 801081c:	4606      	mov	r6, r0
 801081e:	f100 0820 	add.w	r8, r0, #32
 8010822:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8010826:	6830      	ldr	r0, [r6, #0]
 8010828:	6871      	ldr	r1, [r6, #4]
 801082a:	68b2      	ldr	r2, [r6, #8]
 801082c:	68f3      	ldr	r3, [r6, #12]
 801082e:	46f4      	mov	ip, lr
 8010830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010834:	3610      	adds	r6, #16
 8010836:	4546      	cmp	r6, r8
 8010838:	46e6      	mov	lr, ip
 801083a:	d1f4      	bne.n	8010826 <m_mldivide+0x16>
 801083c:	edd7 7a00 	vldr	s15, [r7]
 8010840:	ed97 7a01 	vldr	s14, [r7, #4]
 8010844:	6830      	ldr	r0, [r6, #0]
 8010846:	f8cc 0000 	str.w	r0, [ip]
 801084a:	eef0 7ae7 	vabs.f32	s15, s15
 801084e:	eeb0 7ac7 	vabs.f32	s14, s14
 8010852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085a:	f140 8170 	bpl.w	8010b3e <m_mldivide+0x32e>
 801085e:	2206      	movs	r2, #6
 8010860:	f04f 0804 	mov.w	r8, #4
 8010864:	2300      	movs	r3, #0
 8010866:	9203      	str	r2, [sp, #12]
 8010868:	2201      	movs	r2, #1
 801086a:	eef0 7a47 	vmov.f32	s15, s14
 801086e:	4646      	mov	r6, r8
 8010870:	4618      	mov	r0, r3
 8010872:	f04f 0e07 	mov.w	lr, #7
 8010876:	f04f 0903 	mov.w	r9, #3
 801087a:	9201      	str	r2, [sp, #4]
 801087c:	ed97 7a02 	vldr	s14, [r7, #8]
 8010880:	eeb0 7ac7 	vabs.f32	s14, s14
 8010884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088c:	f340 8150 	ble.w	8010b30 <m_mldivide+0x320>
 8010890:	2307      	movs	r3, #7
 8010892:	f04f 0e08 	mov.w	lr, #8
 8010896:	f04f 0904 	mov.w	r9, #4
 801089a:	9303      	str	r3, [sp, #12]
 801089c:	2202      	movs	r2, #2
 801089e:	2300      	movs	r3, #0
 80108a0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80108a4:	4676      	mov	r6, lr
 80108a6:	4648      	mov	r0, r9
 80108a8:	f04f 0b06 	mov.w	fp, #6
 80108ac:	f04f 0c03 	mov.w	ip, #3
 80108b0:	f04f 0805 	mov.w	r8, #5
 80108b4:	2301      	movs	r3, #1
 80108b6:	4438      	add	r0, r7
 80108b8:	4437      	add	r7, r6
 80108ba:	edd0 6a00 	vldr	s13, [r0]
 80108be:	ed97 7a00 	vldr	s14, [r7]
 80108c2:	9902      	ldr	r1, [sp, #8]
 80108c4:	9f03      	ldr	r7, [sp, #12]
 80108c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80108ca:	aa16      	add	r2, sp, #88	; 0x58
 80108cc:	eb02 0a81 	add.w	sl, r2, r1, lsl #2
 80108d0:	eb02 0088 	add.w	r0, r2, r8, lsl #2
 80108d4:	eb02 0689 	add.w	r6, r2, r9, lsl #2
 80108d8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80108dc:	920a      	str	r2, [sp, #40]	; 0x28
 80108de:	aa16      	add	r2, sp, #88	; 0x58
 80108e0:	eb02 088c 	add.w	r8, r2, ip, lsl #2
 80108e4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80108e8:	eb02 0c8e 	add.w	ip, r2, lr, lsl #2
 80108ec:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80108f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80108f2:	aa16      	add	r2, sp, #88	; 0x58
 80108f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80108f8:	ed42 7a09 	vstr	s15, [r2, #-36]	; 0xffffffdc
 80108fc:	9208      	str	r2, [sp, #32]
 80108fe:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
 8010902:	9a01      	ldr	r2, [sp, #4]
 8010904:	ed1a 7a09 	vldr	s14, [sl, #-36]	; 0xffffffdc
 8010908:	eb0e 0e87 	add.w	lr, lr, r7, lsl #2
 801090c:	af16      	add	r7, sp, #88	; 0x58
 801090e:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8010912:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 8010916:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801091a:	009a      	lsls	r2, r3, #2
 801091c:	9205      	str	r2, [sp, #20]
 801091e:	af16      	add	r7, sp, #88	; 0x58
 8010920:	9a02      	ldr	r2, [sp, #8]
 8010922:	eb07 078b 	add.w	r7, r7, fp, lsl #2
 8010926:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801092a:	f8cd b010 	str.w	fp, [sp, #16]
 801092e:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8010932:	9a01      	ldr	r2, [sp, #4]
 8010934:	0092      	lsls	r2, r2, #2
 8010936:	9209      	str	r2, [sp, #36]	; 0x24
 8010938:	ea4f 0289 	mov.w	r2, r9, lsl #2
 801093c:	9206      	str	r2, [sp, #24]
 801093e:	9a03      	ldr	r2, [sp, #12]
 8010940:	ed4a 6a09 	vstr	s13, [sl, #-36]	; 0xffffffdc
 8010944:	0092      	lsls	r2, r2, #2
 8010946:	9207      	str	r2, [sp, #28]
 8010948:	9a08      	ldr	r2, [sp, #32]
 801094a:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 801094e:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 8010952:	ed56 7a09 	vldr	s15, [r6, #-36]	; 0xffffffdc
 8010956:	eee6 7a47 	vfms.f32	s15, s12, s14
 801095a:	ed46 7a09 	vstr	s15, [r6, #-36]	; 0xffffffdc
 801095e:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 8010962:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 8010966:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801096a:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 801096e:	ed5c 5a09 	vldr	s11, [ip, #-36]	; 0xffffffdc
 8010972:	ed1e 7a09 	vldr	s14, [lr, #-36]	; 0xffffffdc
 8010976:	eea6 7a65 	vfms.f32	s14, s12, s11
 801097a:	eef0 7ae7 	vabs.f32	s15, s15
 801097e:	ed0e 7a09 	vstr	s14, [lr, #-36]	; 0xffffffdc
 8010982:	ed1c 6a09 	vldr	s12, [ip, #-36]	; 0xffffffdc
 8010986:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 801098a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801098e:	ed07 7a09 	vstr	s14, [r7, #-36]	; 0xffffffdc
 8010992:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 8010996:	eeb0 7ac7 	vabs.f32	s14, s14
 801099a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801099e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a2:	dd0e      	ble.n	80109c2 <m_mldivide+0x1b2>
 80109a4:	9a03      	ldr	r2, [sp, #12]
 80109a6:	9106      	str	r1, [sp, #24]
 80109a8:	4618      	mov	r0, r3
 80109aa:	9b02      	ldr	r3, [sp, #8]
 80109ac:	9904      	ldr	r1, [sp, #16]
 80109ae:	9107      	str	r1, [sp, #28]
 80109b0:	0092      	lsls	r2, r2, #2
 80109b2:	9204      	str	r2, [sp, #16]
 80109b4:	009a      	lsls	r2, r3, #2
 80109b6:	9002      	str	r0, [sp, #8]
 80109b8:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80109bc:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 80109c0:	9205      	str	r2, [sp, #20]
 80109c2:	460a      	mov	r2, r1
 80109c4:	a916      	add	r1, sp, #88	; 0x58
 80109c6:	440a      	add	r2, r1
 80109c8:	4616      	mov	r6, r2
 80109ca:	9a06      	ldr	r2, [sp, #24]
 80109cc:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 80109d0:	440a      	add	r2, r1
 80109d2:	ed52 7a09 	vldr	s15, [r2, #-36]	; 0xffffffdc
 80109d6:	eec7 2a27 	vdiv.f32	s5, s14, s15
 80109da:	4694      	mov	ip, r2
 80109dc:	9a07      	ldr	r2, [sp, #28]
 80109de:	440a      	add	r2, r1
 80109e0:	4617      	mov	r7, r2
 80109e2:	9a04      	ldr	r2, [sp, #16]
 80109e4:	440a      	add	r2, r1
 80109e6:	4610      	mov	r0, r2
 80109e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109ea:	a916      	add	r1, sp, #88	; 0x58
 80109ec:	eb05 0a02 	add.w	sl, r5, r2
 80109f0:	eb01 0e02 	add.w	lr, r1, r2
 80109f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109f6:	ed46 2a09 	vstr	s5, [r6, #-36]	; 0xffffffdc
 80109fa:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 80109fe:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 8010a02:	edda 6a00 	vldr	s13, [sl]
 8010a06:	440a      	add	r2, r1
 8010a08:	4691      	mov	r9, r2
 8010a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a0c:	edc4 6a00 	vstr	s13, [r4]
 8010a10:	eee2 7ac7 	vfms.f32	s15, s5, s14
 8010a14:	440a      	add	r2, r1
 8010a16:	4690      	mov	r8, r2
 8010a18:	9a05      	ldr	r2, [sp, #20]
 8010a1a:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 8010a1e:	188e      	adds	r6, r1, r2
 8010a20:	eb05 0a02 	add.w	sl, r5, r2
 8010a24:	ed9a 6a00 	vldr	s12, [sl]
 8010a28:	ed16 1a09 	vldr	s2, [r6, #-36]	; 0xffffffdc
 8010a2c:	ed1c 5a09 	vldr	s10, [ip, #-36]	; 0xffffffdc
 8010a30:	ed5e 5a09 	vldr	s11, [lr, #-36]	; 0xffffffdc
 8010a34:	ed17 3a09 	vldr	s6, [r7, #-36]	; 0xffffffdc
 8010a38:	ed59 3a09 	vldr	s7, [r9, #-36]	; 0xffffffdc
 8010a3c:	ed58 4a09 	vldr	s9, [r8, #-36]	; 0xffffffdc
 8010a40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a44:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8010a48:	eb05 0c0b 	add.w	ip, r5, fp
 8010a4c:	448b      	add	fp, r1
 8010a4e:	9901      	ldr	r1, [sp, #4]
 8010a50:	eb05 0781 	add.w	r7, r5, r1, lsl #2
 8010a54:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8010a58:	9902      	ldr	r1, [sp, #8]
 8010a5a:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8010a5e:	eea1 6a66 	vfms.f32	s12, s2, s13
 8010a62:	ed5b 1a09 	vldr	s3, [fp, #-36]	; 0xffffffdc
 8010a66:	ed84 6a01 	vstr	s12, [r4, #4]
 8010a6a:	eddc 7a00 	vldr	s15, [ip]
 8010a6e:	ee87 4a05 	vdiv.f32	s8, s14, s10
 8010a72:	eee1 7ae6 	vfms.f32	s15, s3, s13
 8010a76:	ee87 5a25 	vdiv.f32	s10, s14, s11
 8010a7a:	eee2 7ac6 	vfms.f32	s15, s5, s12
 8010a7e:	ee62 7a27 	vmul.f32	s15, s4, s15
 8010a82:	eea3 6a67 	vfms.f32	s12, s6, s15
 8010a86:	eee3 6ae7 	vfms.f32	s13, s7, s15
 8010a8a:	ee24 6a06 	vmul.f32	s12, s8, s12
 8010a8e:	edc4 7a02 	vstr	s15, [r4, #8]
 8010a92:	eee4 6ac6 	vfms.f32	s13, s9, s12
 8010a96:	ed84 6a01 	vstr	s12, [r4, #4]
 8010a9a:	ee65 6a26 	vmul.f32	s13, s10, s13
 8010a9e:	edc4 6a00 	vstr	s13, [r4]
 8010aa2:	edd7 6a03 	vldr	s13, [r7, #12]
 8010aa6:	edc4 6a03 	vstr	s13, [r4, #12]
 8010aaa:	ed96 6a03 	vldr	s12, [r6, #12]
 8010aae:	eea1 6a66 	vfms.f32	s12, s2, s13
 8010ab2:	ed84 6a04 	vstr	s12, [r4, #16]
 8010ab6:	edd0 5a03 	vldr	s11, [r0, #12]
 8010aba:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8010abe:	eee2 5ac6 	vfms.f32	s11, s5, s12
 8010ac2:	ee62 5a25 	vmul.f32	s11, s4, s11
 8010ac6:	eea3 6a65 	vfms.f32	s12, s6, s11
 8010aca:	eee3 6ae5 	vfms.f32	s13, s7, s11
 8010ace:	ee24 6a06 	vmul.f32	s12, s8, s12
 8010ad2:	edc4 5a05 	vstr	s11, [r4, #20]
 8010ad6:	eee4 6ac6 	vfms.f32	s13, s9, s12
 8010ada:	ed84 6a04 	vstr	s12, [r4, #16]
 8010ade:	ee65 6a26 	vmul.f32	s13, s10, s13
 8010ae2:	edc4 6a03 	vstr	s13, [r4, #12]
 8010ae6:	edd7 7a06 	vldr	s15, [r7, #24]
 8010aea:	edc4 7a06 	vstr	s15, [r4, #24]
 8010aee:	ed96 7a06 	vldr	s14, [r6, #24]
 8010af2:	eea7 7ac1 	vfms.f32	s14, s15, s2
 8010af6:	ed84 7a07 	vstr	s14, [r4, #28]
 8010afa:	edd0 6a06 	vldr	s13, [r0, #24]
 8010afe:	eee7 6ae1 	vfms.f32	s13, s15, s3
 8010b02:	eee2 6ac7 	vfms.f32	s13, s5, s14
 8010b06:	ee66 6a82 	vmul.f32	s13, s13, s4
 8010b0a:	eea6 7ac3 	vfms.f32	s14, s13, s6
 8010b0e:	eee6 7ae3 	vfms.f32	s15, s13, s7
 8010b12:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010b16:	edc4 6a08 	vstr	s13, [r4, #32]
 8010b1a:	eee7 7a64 	vfms.f32	s15, s14, s9
 8010b1e:	ed84 7a07 	vstr	s14, [r4, #28]
 8010b22:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010b26:	edc4 7a06 	vstr	s15, [r4, #24]
 8010b2a:	b017      	add	sp, #92	; 0x5c
 8010b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b30:	2202      	movs	r2, #2
 8010b32:	f04f 0b08 	mov.w	fp, #8
 8010b36:	f04f 0c05 	mov.w	ip, #5
 8010b3a:	9202      	str	r2, [sp, #8]
 8010b3c:	e6bb      	b.n	80108b6 <m_mldivide+0xa6>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	f04f 0904 	mov.w	r9, #4
 8010b44:	9301      	str	r3, [sp, #4]
 8010b46:	461e      	mov	r6, r3
 8010b48:	2307      	movs	r3, #7
 8010b4a:	9303      	str	r3, [sp, #12]
 8010b4c:	4648      	mov	r0, r9
 8010b4e:	f04f 0e06 	mov.w	lr, #6
 8010b52:	f04f 0803 	mov.w	r8, #3
 8010b56:	2301      	movs	r3, #1
 8010b58:	e690      	b.n	801087c <m_mldivide+0x6c>
 8010b5a:	bf00      	nop

08010b5c <m_qmult_eml>:
 8010b5c:	ed90 2a01 	vldr	s4, [r0, #4]
 8010b60:	edd1 4a02 	vldr	s9, [r1, #8]
 8010b64:	edd1 5a03 	vldr	s11, [r1, #12]
 8010b68:	edd0 2a02 	vldr	s5, [r0, #8]
 8010b6c:	edd1 3a00 	vldr	s7, [r1]
 8010b70:	ed90 3a00 	vldr	s6, [r0]
 8010b74:	ed91 4a01 	vldr	s8, [r1, #4]
 8010b78:	ed90 5a03 	vldr	s10, [r0, #12]
 8010b7c:	ee22 6a24 	vmul.f32	s12, s4, s9
 8010b80:	ee62 6aa3 	vmul.f32	s13, s5, s7
 8010b84:	ee22 7aa5 	vmul.f32	s14, s5, s11
 8010b88:	ee64 7ae2 	vnmul.f32	s15, s9, s5
 8010b8c:	eea3 6a25 	vfma.f32	s12, s6, s11
 8010b90:	eee2 6a25 	vfma.f32	s13, s4, s11
 8010b94:	eea3 7ac2 	vfms.f32	s14, s7, s4
 8010b98:	eee4 7a42 	vfms.f32	s15, s8, s4
 8010b9c:	eea4 6a62 	vfms.f32	s12, s8, s5
 8010ba0:	eee4 6ac3 	vfms.f32	s13, s9, s6
 8010ba4:	eea3 7a04 	vfma.f32	s14, s6, s8
 8010ba8:	eee3 7ac3 	vfms.f32	s15, s7, s6
 8010bac:	eea5 6a23 	vfma.f32	s12, s10, s7
 8010bb0:	eee5 6a04 	vfma.f32	s13, s10, s8
 8010bb4:	eea5 7a24 	vfma.f32	s14, s10, s9
 8010bb8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010bbc:	ed82 6a00 	vstr	s12, [r2]
 8010bc0:	edc2 6a01 	vstr	s13, [r2, #4]
 8010bc4:	ed82 7a02 	vstr	s14, [r2, #8]
 8010bc8:	edc2 7a03 	vstr	s15, [r2, #12]
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop

08010bd0 <m_q2dcm_eml>:
 8010bd0:	b510      	push	{r4, lr}
 8010bd2:	ed2d 8b06 	vpush	{d8-d10}
 8010bd6:	ed90 aa03 	vldr	s20, [r0, #12]
 8010bda:	ed90 9a02 	vldr	s18, [r0, #8]
 8010bde:	ed90 8a00 	vldr	s16, [r0]
 8010be2:	edd0 8a01 	vldr	s17, [r0, #4]
 8010be6:	ee6a 9a0a 	vmul.f32	s19, s20, s20
 8010bea:	460c      	mov	r4, r1
 8010bec:	1d08      	adds	r0, r1, #4
 8010bee:	2220      	movs	r2, #32
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	f00a fbb3 	bl	801b35c <memset>
 8010bf6:	eef0 5a69 	vmov.f32	s11, s19
 8010bfa:	eeb0 6a69 	vmov.f32	s12, s19
 8010bfe:	eee9 9a09 	vfma.f32	s19, s18, s18
 8010c02:	eee8 5a08 	vfma.f32	s11, s16, s16
 8010c06:	eea8 6aa8 	vfma.f32	s12, s17, s17
 8010c0a:	eee8 9a48 	vfms.f32	s19, s16, s16
 8010c0e:	ee69 6a0a 	vmul.f32	s13, s18, s20
 8010c12:	ee28 7a8a 	vmul.f32	s14, s17, s20
 8010c16:	ee68 7a89 	vmul.f32	s15, s17, s18
 8010c1a:	eee8 5ae8 	vfms.f32	s11, s17, s17
 8010c1e:	eea8 6a48 	vfms.f32	s12, s16, s16
 8010c22:	eee8 9ae8 	vfms.f32	s19, s17, s17
 8010c26:	eeb0 4a66 	vmov.f32	s8, s13
 8010c2a:	eef0 4a47 	vmov.f32	s9, s14
 8010c2e:	eeb0 5a67 	vmov.f32	s10, s15
 8010c32:	eea8 4a28 	vfma.f32	s8, s16, s17
 8010c36:	eed8 6a28 	vfnms.f32	s13, s16, s17
 8010c3a:	eed8 4a09 	vfnms.f32	s9, s16, s18
 8010c3e:	eea8 7a09 	vfma.f32	s14, s16, s18
 8010c42:	eea8 5a0a 	vfma.f32	s10, s16, s20
 8010c46:	eee8 7a4a 	vfms.f32	s15, s16, s20
 8010c4a:	eee9 5a49 	vfms.f32	s11, s18, s18
 8010c4e:	eea9 6a49 	vfms.f32	s12, s18, s18
 8010c52:	edc4 9a08 	vstr	s19, [r4, #32]
 8010c56:	ecbd 8b06 	vpop	{d8-d10}
 8010c5a:	ee34 4a04 	vadd.f32	s8, s8, s8
 8010c5e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010c62:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8010c66:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010c6a:	ee35 5a05 	vadd.f32	s10, s10, s10
 8010c6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010c72:	edc4 5a00 	vstr	s11, [r4]
 8010c76:	ed84 4a03 	vstr	s8, [r4, #12]
 8010c7a:	edc4 6a01 	vstr	s13, [r4, #4]
 8010c7e:	edc4 4a06 	vstr	s9, [r4, #24]
 8010c82:	ed84 7a02 	vstr	s14, [r4, #8]
 8010c86:	ed84 6a04 	vstr	s12, [r4, #16]
 8010c8a:	ed84 5a07 	vstr	s10, [r4, #28]
 8010c8e:	edc4 7a05 	vstr	s15, [r4, #20]
 8010c92:	bd10      	pop	{r4, pc}

08010c94 <st_accCal_MEMS_EIG3>:
 8010c94:	ed90 5a02 	vldr	s10, [r0, #8]
 8010c98:	edd0 4a01 	vldr	s9, [r0, #4]
 8010c9c:	ed90 7a05 	vldr	s14, [r0, #20]
 8010ca0:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010e60 <st_accCal_MEMS_EIG3+0x1cc>
 8010ca4:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010ca8:	b510      	push	{r4, lr}
 8010caa:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8010cae:	460c      	mov	r4, r1
 8010cb0:	ed2d 8b04 	vpush	{d8-d9}
 8010cb4:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010cb8:	b08a      	sub	sp, #40	; 0x28
 8010cba:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc2:	d509      	bpl.n	8010cd8 <st_accCal_MEMS_EIG3+0x44>
 8010cc4:	6803      	ldr	r3, [r0, #0]
 8010cc6:	600b      	str	r3, [r1, #0]
 8010cc8:	6903      	ldr	r3, [r0, #16]
 8010cca:	604b      	str	r3, [r1, #4]
 8010ccc:	6a03      	ldr	r3, [r0, #32]
 8010cce:	608b      	str	r3, [r1, #8]
 8010cd0:	b00a      	add	sp, #40	; 0x28
 8010cd2:	ecbd 8b04 	vpop	{d8-d9}
 8010cd6:	bd10      	pop	{r4, pc}
 8010cd8:	edd0 3a00 	vldr	s7, [r0]
 8010cdc:	edd0 5a04 	vldr	s11, [r0, #16]
 8010ce0:	ed90 3a08 	vldr	s6, [r0, #32]
 8010ce4:	edd0 1a06 	vldr	s3, [r0, #24]
 8010ce8:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8010e64 <st_accCal_MEMS_EIG3+0x1d0>
 8010cec:	ed90 1a03 	vldr	s2, [r0, #12]
 8010cf0:	ed90 6a07 	vldr	s12, [r0, #28]
 8010cf4:	ed9f 4a5c 	vldr	s8, [pc, #368]	; 8010e68 <st_accCal_MEMS_EIG3+0x1d4>
 8010cf8:	ee33 8aa5 	vadd.f32	s16, s7, s11
 8010cfc:	ee65 6a21 	vmul.f32	s13, s10, s3
 8010d00:	ee38 8a03 	vadd.f32	s16, s16, s6
 8010d04:	eee4 6a81 	vfma.f32	s13, s9, s2
 8010d08:	ee28 8a29 	vmul.f32	s16, s16, s19
 8010d0c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8010d10:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8010d14:	ee73 3ac8 	vsub.f32	s7, s7, s16
 8010d18:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8010d1c:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 8010d20:	eee3 7aa3 	vfma.f32	s15, s7, s7
 8010d24:	ee33 3a48 	vsub.f32	s6, s6, s16
 8010d28:	eee6 7aa2 	vfma.f32	s15, s13, s5
 8010d2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010d30:	eee3 7a03 	vfma.f32	s15, s6, s6
 8010d34:	eeb8 2a00 	vmov.f32	s4, #128	; 0xc0000000 -2.0
 8010d38:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010d3c:	eef1 8ae7 	vsqrt.f32	s17, s15
 8010d40:	eec0 6a28 	vdiv.f32	s13, s0, s17
 8010d44:	ee83 4a28 	vdiv.f32	s8, s6, s17
 8010d48:	eec3 0aa8 	vdiv.f32	s1, s7, s17
 8010d4c:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8010d50:	ee61 3aa6 	vmul.f32	s7, s3, s13
 8010d54:	ee21 3a26 	vmul.f32	s6, s2, s13
 8010d58:	ee26 6a26 	vmul.f32	s12, s12, s13
 8010d5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010d60:	ee63 7ae5 	vnmul.f32	s15, s7, s11
 8010d64:	ee26 5a85 	vmul.f32	s10, s13, s10
 8010d68:	eee6 7a03 	vfma.f32	s15, s12, s6
 8010d6c:	ee26 6a47 	vnmul.f32	s12, s12, s14
 8010d70:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010d74:	eea5 6a84 	vfma.f32	s12, s11, s8
 8010d78:	ee24 4a43 	vnmul.f32	s8, s8, s6
 8010d7c:	eee6 7a20 	vfma.f32	s15, s12, s1
 8010d80:	eea7 4a23 	vfma.f32	s8, s14, s7
 8010d84:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010d88:	eee4 7a26 	vfma.f32	s15, s8, s13
 8010d8c:	eef4 7ac2 	vcmpe.f32	s15, s4
 8010d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d94:	d909      	bls.n	8010daa <st_accCal_MEMS_EIG3+0x116>
 8010d96:	eef4 7ae2 	vcmpe.f32	s15, s5
 8010d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9e:	db49      	blt.n	8010e34 <st_accCal_MEMS_EIG3+0x1a0>
 8010da0:	eeb0 9a40 	vmov.f32	s18, s0
 8010da4:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8010e6c <st_accCal_MEMS_EIG3+0x1d8>
 8010da8:	e003      	b.n	8010db2 <st_accCal_MEMS_EIG3+0x11e>
 8010daa:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8010e70 <st_accCal_MEMS_EIG3+0x1dc>
 8010dae:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010db2:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8010db6:	eeb0 7a48 	vmov.f32	s14, s16
 8010dba:	eef0 6a48 	vmov.f32	s13, s16
 8010dbe:	eea8 7a89 	vfma.f32	s14, s17, s18
 8010dc2:	eee8 6a80 	vfma.f32	s13, s17, s0
 8010dc6:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8010dca:	ee77 7a26 	vadd.f32	s15, s14, s13
 8010dce:	ed84 7a00 	vstr	s14, [r4]
 8010dd2:	eed8 7a06 	vfnms.f32	s15, s16, s12
 8010dd6:	edc4 6a02 	vstr	s13, [r4, #8]
 8010dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de2:	edc4 7a01 	vstr	s15, [r4, #4]
 8010de6:	dd09      	ble.n	8010dfc <st_accCal_MEMS_EIG3+0x168>
 8010de8:	eeb0 6a47 	vmov.f32	s12, s14
 8010dec:	ed84 7a01 	vstr	s14, [r4, #4]
 8010df0:	edc4 7a00 	vstr	s15, [r4]
 8010df4:	eeb0 7a67 	vmov.f32	s14, s15
 8010df8:	eef0 7a46 	vmov.f32	s15, s12
 8010dfc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e04:	d509      	bpl.n	8010e1a <st_accCal_MEMS_EIG3+0x186>
 8010e06:	edc4 7a02 	vstr	s15, [r4, #8]
 8010e0a:	ed84 7a01 	vstr	s14, [r4, #4]
 8010e0e:	edc4 6a00 	vstr	s13, [r4]
 8010e12:	b00a      	add	sp, #40	; 0x28
 8010e14:	ecbd 8b04 	vpop	{d8-d9}
 8010e18:	bd10      	pop	{r4, pc}
 8010e1a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e22:	bf44      	itt	mi
 8010e24:	edc4 7a02 	vstrmi	s15, [r4, #8]
 8010e28:	edc4 6a01 	vstrmi	s13, [r4, #4]
 8010e2c:	b00a      	add	sp, #40	; 0x28
 8010e2e:	ecbd 8b04 	vpop	{d8-d9}
 8010e32:	bd10      	pop	{r4, pc}
 8010e34:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8010e38:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010e3c:	f00b f910 	bl	801c060 <acosf>
 8010e40:	ee60 9a29 	vmul.f32	s19, s0, s19
 8010e44:	eeb0 0a69 	vmov.f32	s0, s19
 8010e48:	f00a ff86 	bl	801bd58 <cosf>
 8010e4c:	eeb0 9a40 	vmov.f32	s18, s0
 8010e50:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010e74 <st_accCal_MEMS_EIG3+0x1e0>
 8010e54:	ee39 0a80 	vadd.f32	s0, s19, s0
 8010e58:	f00a ff7e 	bl	801bd58 <cosf>
 8010e5c:	e7a9      	b.n	8010db2 <st_accCal_MEMS_EIG3+0x11e>
 8010e5e:	bf00      	nop
 8010e60:	358637bd 	.word	0x358637bd
 8010e64:	3eaaaaab 	.word	0x3eaaaaab
 8010e68:	3e2aaaab 	.word	0x3e2aaaab
 8010e6c:	bf000001 	.word	0xbf000001
 8010e70:	3effffff 	.word	0x3effffff
 8010e74:	40060a92 	.word	0x40060a92

08010e78 <st_accCal_MEMS_ellipsoidFit7>:
 8010e78:	b570      	push	{r4, r5, r6, lr}
 8010e7a:	ed2d 8b10 	vpush	{d8-d15}
 8010e7e:	4604      	mov	r4, r0
 8010e80:	b0c6      	sub	sp, #280	; 0x118
 8010e82:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 8010e86:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8010e88:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8010e8a:	9011      	str	r0, [sp, #68]	; 0x44
 8010e8c:	2600      	movs	r6, #0
 8010e8e:	eeb0 8a67 	vmov.f32	s16, s15
 8010e92:	223c      	movs	r2, #60	; 0x3c
 8010e94:	9015      	str	r0, [sp, #84]	; 0x54
 8010e96:	460d      	mov	r5, r1
 8010e98:	a837      	add	r0, sp, #220	; 0xdc
 8010e9a:	4631      	mov	r1, r6
 8010e9c:	9314      	str	r3, [sp, #80]	; 0x50
 8010e9e:	9316      	str	r3, [sp, #88]	; 0x58
 8010ea0:	edd4 9a12 	vldr	s19, [r4, #72]	; 0x48
 8010ea4:	edd4 8a16 	vldr	s17, [r4, #88]	; 0x58
 8010ea8:	ed94 9a19 	vldr	s18, [r4, #100]	; 0x64
 8010eac:	960c      	str	r6, [sp, #48]	; 0x30
 8010eae:	960e      	str	r6, [sp, #56]	; 0x38
 8010eb0:	f00a fa54 	bl	801b35c <memset>
 8010eb4:	ee38 7a48 	vsub.f32	s14, s16, s16
 8010eb8:	eddf 6a41 	vldr	s13, [pc, #260]	; 8010fc0 <st_accCal_MEMS_ellipsoidFit7+0x148>
 8010ebc:	eddd 1a11 	vldr	s3, [sp, #68]	; 0x44
 8010ec0:	ed9d 4a15 	vldr	s8, [sp, #84]	; 0x54
 8010ec4:	eeb0 7ac7 	vabs.f32	s14, s14
 8010ec8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010ecc:	a936      	add	r1, sp, #216	; 0xd8
 8010ece:	aa3a      	add	r2, sp, #232	; 0xe8
 8010ed0:	ab3e      	add	r3, sp, #248	; 0xf8
 8010ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed6:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8010eda:	eef0 7a48 	vmov.f32	s15, s16
 8010ede:	eef0 5a48 	vmov.f32	s11, s16
 8010ee2:	9305      	str	r3, [sp, #20]
 8010ee4:	f100 825b 	bmi.w	801139e <st_accCal_MEMS_ellipsoidFit7+0x526>
 8010ee8:	ed9d 2a14 	vldr	s4, [sp, #80]	; 0x50
 8010eec:	eddd 2a16 	vldr	s5, [sp, #88]	; 0x58
 8010ef0:	ee29 5a65 	vnmul.f32	s10, s18, s11
 8010ef4:	ee62 6ac2 	vnmul.f32	s13, s5, s4
 8010ef8:	eea4 5a02 	vfma.f32	s10, s8, s4
 8010efc:	eee9 6a28 	vfma.f32	s13, s18, s17
 8010f00:	ee27 6a85 	vmul.f32	s12, s15, s10
 8010f04:	ee28 7ac4 	vnmul.f32	s14, s17, s8
 8010f08:	eea6 6aa9 	vfma.f32	s12, s13, s19
 8010f0c:	eea5 7aa2 	vfma.f32	s14, s11, s5
 8010f10:	eeb0 3a45 	vmov.f32	s6, s10
 8010f14:	eea7 6a21 	vfma.f32	s12, s14, s3
 8010f18:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 8010f1c:	ed9f 5a28 	vldr	s10, [pc, #160]	; 8010fc0 <st_accCal_MEMS_ellipsoidFit7+0x148>
 8010f20:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 8010f24:	eef0 4ac6 	vabs.f32	s9, s12
 8010f28:	eef4 4ac5 	vcmpe.f32	s9, s10
 8010f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f30:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8010f34:	dd46      	ble.n	8010fc4 <st_accCal_MEMS_ellipsoidFit7+0x14c>
 8010f36:	ee69 3ae2 	vnmul.f32	s7, s19, s5
 8010f3a:	ee65 4ae7 	vnmul.f32	s9, s11, s15
 8010f3e:	eee7 3a84 	vfma.f32	s7, s15, s8
 8010f42:	eee9 4aa8 	vfma.f32	s9, s19, s17
 8010f46:	ee24 1a61 	vnmul.f32	s2, s8, s3
 8010f4a:	eeb0 4a63 	vmov.f32	s8, s7
 8010f4e:	eea9 1a29 	vfma.f32	s2, s18, s19
 8010f52:	eef0 3a64 	vmov.f32	s7, s9
 8010f56:	2e00      	cmp	r6, #0
 8010f58:	f000 823b 	beq.w	80113d2 <st_accCal_MEMS_ellipsoidFit7+0x55a>
 8010f5c:	eef0 7a47 	vmov.f32	s15, s14
 8010f60:	eeb0 5a43 	vmov.f32	s10, s6
 8010f64:	ed8d 4a3c 	vstr	s8, [sp, #240]	; 0xf0
 8010f68:	eef0 2a44 	vmov.f32	s5, s8
 8010f6c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8010f70:	eec4 5a86 	vdiv.f32	s11, s9, s12
 8010f74:	ee25 6a85 	vmul.f32	s12, s11, s10
 8010f78:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8010f7c:	ee25 5a83 	vmul.f32	s10, s11, s6
 8010f80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8010f84:	ee25 3a81 	vmul.f32	s6, s11, s2
 8010f88:	ee25 7a87 	vmul.f32	s14, s11, s14
 8010f8c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8010f90:	ee65 4aa3 	vmul.f32	s9, s11, s7
 8010f94:	ee65 5aa2 	vmul.f32	s11, s11, s5
 8010f98:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 8010f9c:	ed8d 6a37 	vstr	s12, [sp, #220]	; 0xdc
 8010fa0:	edcd 7a38 	vstr	s15, [sp, #224]	; 0xe0
 8010fa4:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 8010fa8:	ed8d 3a3b 	vstr	s6, [sp, #236]	; 0xec
 8010fac:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8010fb0:	ed8d 4a3f 	vstr	s8, [sp, #252]	; 0xfc
 8010fb4:	edcd 4a40 	vstr	s9, [sp, #256]	; 0x100
 8010fb8:	edcd 5a3c 	vstr	s11, [sp, #240]	; 0xf0
 8010fbc:	e002      	b.n	8010fc4 <st_accCal_MEMS_ellipsoidFit7+0x14c>
 8010fbe:	bf00      	nop
 8010fc0:	3a83126f 	.word	0x3a83126f
 8010fc4:	ed94 4a04 	vldr	s8, [r4, #16]
 8010fc8:	ed94 3a0a 	vldr	s6, [r4, #40]	; 0x28
 8010fcc:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8010fd0:	ed9d 8a3b 	vldr	s16, [sp, #236]	; 0xec
 8010fd4:	ed94 1a03 	vldr	s2, [r4, #12]
 8010fd8:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
 8010fdc:	ed94 da0e 	vldr	s26, [r4, #56]	; 0x38
 8010fe0:	eddd 3a3a 	vldr	s7, [sp, #232]	; 0xe8
 8010fe4:	edd4 8a1b 	vldr	s17, [r4, #108]	; 0x6c
 8010fe8:	ed9d 9a37 	vldr	s18, [sp, #220]	; 0xdc
 8010fec:	eddd 5a3f 	vldr	s11, [sp, #252]	; 0xfc
 8010ff0:	edd4 1a05 	vldr	s3, [r4, #20]
 8010ff4:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8010ff8:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
 8010ffc:	ed9d 5a3c 	vldr	s10, [sp, #240]	; 0xf0
 8011000:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 8011004:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 8011008:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 801100c:	ed94 2a06 	vldr	s4, [r4, #24]
 8011010:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
 8011014:	eddd 6a3d 	vldr	s13, [sp, #244]	; 0xf4
 8011018:	eddd 4a38 	vldr	s9, [sp, #224]	; 0xe0
 801101c:	eddd fa40 	vldr	s31, [sp, #256]	; 0x100
 8011020:	ed9d 6a39 	vldr	s12, [sp, #228]	; 0xe4
 8011024:	eddd ea41 	vldr	s29, [sp, #260]	; 0x104
 8011028:	ee68 aa04 	vmul.f32	s21, s16, s8
 801102c:	ee68 9a03 	vmul.f32	s19, s16, s6
 8011030:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011034:	eee3 aa81 	vfma.f32	s21, s7, s2
 8011038:	a906      	add	r1, sp, #24
 801103a:	a821      	add	r0, sp, #132	; 0x84
 801103c:	eee3 9aab 	vfma.f32	s19, s7, s23
 8011040:	eea3 8a8d 	vfma.f32	s16, s7, s26
 8011044:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 8011048:	eece da28 	vdiv.f32	s27, s28, s17
 801104c:	ee29 ba04 	vmul.f32	s22, s18, s8
 8011050:	ee69 8a03 	vmul.f32	s17, s18, s6
 8011054:	ee25 aa84 	vmul.f32	s20, s11, s8
 8011058:	ee29 9a27 	vmul.f32	s18, s18, s15
 801105c:	eee5 aa21 	vfma.f32	s21, s10, s3
 8011060:	eee5 9a00 	vfma.f32	s19, s10, s0
 8011064:	eea5 8a2c 	vfma.f32	s16, s10, s25
 8011068:	eea2 ba81 	vfma.f32	s22, s5, s2
 801106c:	eee2 8aab 	vfma.f32	s17, s5, s23
 8011070:	eea2 9a8d 	vfma.f32	s18, s5, s26
 8011074:	eea7 aa01 	vfma.f32	s20, s14, s2
 8011078:	eee6 9aa0 	vfma.f32	s19, s13, s1
 801107c:	eea6 8a8c 	vfma.f32	s16, s13, s24
 8011080:	eee6 aa82 	vfma.f32	s21, s13, s4
 8011084:	ee65 6aa7 	vmul.f32	s13, s11, s15
 8011088:	eea4 baa1 	vfma.f32	s22, s9, s3
 801108c:	eee4 8a80 	vfma.f32	s17, s9, s0
 8011090:	eea4 9aac 	vfma.f32	s18, s9, s25
 8011094:	eeaf aaa1 	vfma.f32	s20, s31, s3
 8011098:	eee7 6a0d 	vfma.f32	s13, s14, s26
 801109c:	eee6 8a20 	vfma.f32	s17, s12, s1
 80110a0:	eea6 9a0c 	vfma.f32	s18, s12, s24
 80110a4:	eea6 ba02 	vfma.f32	s22, s12, s4
 80110a8:	eeae aa82 	vfma.f32	s20, s29, s4
 80110ac:	eeef 6aac 	vfma.f32	s13, s31, s25
 80110b0:	ee65 5a83 	vmul.f32	s11, s11, s6
 80110b4:	edcd 8a2b 	vstr	s17, [sp, #172]	; 0xac
 80110b8:	edcd da45 	vstr	s27, [sp, #276]	; 0x114
 80110bc:	ed8d ba2a 	vstr	s22, [sp, #168]	; 0xa8
 80110c0:	ed8d 9a2c 	vstr	s18, [sp, #176]	; 0xb0
 80110c4:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 80110c8:	edcd 9a2e 	vstr	s19, [sp, #184]	; 0xb8
 80110cc:	ed8d 8a2f 	vstr	s16, [sp, #188]	; 0xbc
 80110d0:	ed8d aa30 	vstr	s20, [sp, #192]	; 0xc0
 80110d4:	ed9d 6a43 	vldr	s12, [sp, #268]	; 0x10c
 80110d8:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80110dc:	ed9d fa44 	vldr	s30, [sp, #272]	; 0x110
 80110e0:	eeee 6a8c 	vfma.f32	s13, s29, s24
 80110e4:	eee7 5a2b 	vfma.f32	s11, s14, s23
 80110e8:	ee26 7a27 	vmul.f32	s14, s12, s15
 80110ec:	ee6a 3a84 	vmul.f32	s7, s21, s8
 80110f0:	eea5 7a0d 	vfma.f32	s14, s10, s26
 80110f4:	ee66 2a04 	vmul.f32	s5, s12, s8
 80110f8:	ee26 6a03 	vmul.f32	s12, s12, s6
 80110fc:	eeef 5a80 	vfma.f32	s11, s31, s0
 8011100:	eee1 3a0b 	vfma.f32	s7, s2, s22
 8011104:	eef0 fa66 	vmov.f32	s31, s13
 8011108:	ee64 4a08 	vmul.f32	s9, s8, s16
 801110c:	edd4 6a02 	vldr	s13, [r4, #8]
 8011110:	edcd fa32 	vstr	s31, [sp, #200]	; 0xc8
 8011114:	eee5 2a01 	vfma.f32	s5, s10, s2
 8011118:	eea5 6a2b 	vfma.f32	s12, s10, s23
 801111c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011120:	ee28 5a03 	vmul.f32	s10, s16, s6
 8011124:	edcd 6a01 	vstr	s13, [sp, #4]
 8011128:	eee1 4a09 	vfma.f32	s9, s2, s18
 801112c:	edd4 6a00 	vldr	s13, [r4]
 8011130:	eeaf 7a2c 	vfma.f32	s14, s30, s25
 8011134:	eee9 7a0d 	vfma.f32	s15, s18, s26
 8011138:	eea9 5a2b 	vfma.f32	s10, s18, s23
 801113c:	ee24 4a29 	vmul.f32	s8, s8, s19
 8011140:	ee76 3ae3 	vsub.f32	s7, s13, s7
 8011144:	eddd 6a01 	vldr	s13, [sp, #4]
 8011148:	ed9d da0c 	vldr	s26, [sp, #48]	; 0x30
 801114c:	eeef 2a21 	vfma.f32	s5, s30, s3
 8011150:	eea1 4a28 	vfma.f32	s8, s2, s17
 8011154:	eeaf 6a00 	vfma.f32	s12, s30, s0
 8011158:	ed94 1a0d 	vldr	s2, [r4, #52]	; 0x34
 801115c:	ed94 fa08 	vldr	s30, [r4, #32]
 8011160:	ee76 4ae4 	vsub.f32	s9, s13, s9
 8011164:	eeee 5aa0 	vfma.f32	s11, s29, s1
 8011168:	eead 7a8c 	vfma.f32	s14, s27, s24
 801116c:	edd4 6a01 	vldr	s13, [r4, #4]
 8011170:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8011174:	ee71 7a67 	vsub.f32	s15, s2, s15
 8011178:	ee3f 5a45 	vsub.f32	s10, s30, s10
 801117c:	ee29 3a83 	vmul.f32	s6, s19, s6
 8011180:	eee1 4aef 	vfms.f32	s9, s3, s31
 8011184:	eea8 3aab 	vfma.f32	s6, s17, s23
 8011188:	eeec 7aef 	vfms.f32	s15, s25, s31
 801118c:	eeaf 5ac0 	vfms.f32	s10, s31, s0
 8011190:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8011194:	eead 6aa0 	vfma.f32	s12, s27, s1
 8011198:	eeb0 fa47 	vmov.f32	s30, s14
 801119c:	eea1 4ae5 	vfms.f32	s8, s3, s11
 80111a0:	ed94 7a07 	vldr	s14, [r4, #28]
 80111a4:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 80111a8:	eee2 4a4f 	vfms.f32	s9, s4, s30
 80111ac:	eeed 2a82 	vfma.f32	s5, s27, s4
 80111b0:	eeaf 5a60 	vfms.f32	s10, s30, s1
 80111b4:	eeec 7a4f 	vfms.f32	s15, s24, s30
 80111b8:	eeea 3a61 	vfms.f32	s7, s20, s3
 80111bc:	ee37 3a43 	vsub.f32	s6, s14, s6
 80111c0:	eea2 4a46 	vfms.f32	s8, s4, s12
 80111c4:	eea5 3ac0 	vfms.f32	s6, s11, s0
 80111c8:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 80111cc:	ed8d 6a34 	vstr	s12, [sp, #208]	; 0xd0
 80111d0:	eef0 ea65 	vmov.f32	s29, s11
 80111d4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80111d8:	eef0 ba46 	vmov.f32	s23, s12
 80111dc:	ee24 6aa5 	vmul.f32	s12, s9, s11
 80111e0:	eee2 3a62 	vfms.f32	s7, s4, s5
 80111e4:	ee27 2a27 	vmul.f32	s4, s14, s15
 80111e8:	ee27 7a05 	vmul.f32	s14, s14, s10
 80111ec:	eef0 ca46 	vmov.f32	s25, s12
 80111f0:	eea4 7a25 	vfma.f32	s14, s8, s11
 80111f4:	eeed ca04 	vfma.f32	s25, s26, s8
 80111f8:	eef0 1a47 	vmov.f32	s3, s14
 80111fc:	eeb0 7a6c 	vmov.f32	s14, s25
 8011200:	eea3 7aa5 	vfma.f32	s14, s7, s11
 8011204:	ee23 1aa5 	vmul.f32	s2, s7, s11
 8011208:	ee27 0aa5 	vmul.f32	s0, s15, s11
 801120c:	eea4 1a25 	vfma.f32	s2, s8, s11
 8011210:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 8011214:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 8011218:	edcd 2a33 	vstr	s5, [sp, #204]	; 0xcc
 801121c:	ee65 7a25 	vmul.f32	s15, s10, s11
 8011220:	eea7 1a24 	vfma.f32	s2, s14, s9
 8011224:	eeb0 ca40 	vmov.f32	s24, s0
 8011228:	eeb0 7a40 	vmov.f32	s14, s0
 801122c:	eea4 caa5 	vfma.f32	s24, s9, s11
 8011230:	eea4 6a25 	vfma.f32	s12, s8, s11
 8011234:	eea5 7a25 	vfma.f32	s14, s10, s11
 8011238:	eef0 6a67 	vmov.f32	s13, s15
 801123c:	eeab 3ae0 	vfms.f32	s6, s23, s1
 8011240:	eea4 2aa5 	vfma.f32	s4, s9, s11
 8011244:	eee4 6a25 	vfma.f32	s13, s8, s11
 8011248:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 801124c:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8011250:	eeb0 6a4c 	vmov.f32	s12, s24
 8011254:	eeb0 7a61 	vmov.f32	s14, s3
 8011258:	eea5 2a25 	vfma.f32	s4, s10, s11
 801125c:	eea3 7a25 	vfma.f32	s14, s6, s11
 8011260:	eee3 7a25 	vfma.f32	s15, s6, s11
 8011264:	eead 6a05 	vfma.f32	s12, s26, s10
 8011268:	eeed 6a03 	vfma.f32	s13, s26, s6
 801126c:	edcd 2a01 	vstr	s5, [sp, #4]
 8011270:	ed8d 1a27 	vstr	s2, [sp, #156]	; 0x9c
 8011274:	ed8d 6a26 	vstr	s12, [sp, #152]	; 0x98
 8011278:	ed8d 2a29 	vstr	s4, [sp, #164]	; 0xa4
 801127c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8011280:	ed8d 7a28 	vstr	s14, [sp, #160]	; 0xa0
 8011284:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
 8011288:	f7ff fd04 	bl	8010c94 <st_accCal_MEMS_EIG3>
 801128c:	ed9d 6a21 	vldr	s12, [sp, #132]	; 0x84
 8011290:	ed9d 4a07 	vldr	s8, [sp, #28]
 8011294:	ed9d 3a06 	vldr	s6, [sp, #24]
 8011298:	eddd 3a27 	vldr	s7, [sp, #156]	; 0x9c
 801129c:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
 80112a0:	ed9d 5a25 	vldr	s10, [sp, #148]	; 0x94
 80112a4:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
 80112a8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80112ac:	eddd 1a22 	vldr	s3, [sp, #136]	; 0x88
 80112b0:	ed9d 2a29 	vldr	s4, [sp, #164]	; 0xa4
 80112b4:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 80112b8:	ee36 4a44 	vsub.f32	s8, s12, s8
 80112bc:	ee23 7a87 	vmul.f32	s14, s7, s14
 80112c0:	ee74 5a43 	vsub.f32	s11, s8, s6
 80112c4:	ee63 7aa7 	vmul.f32	s15, s7, s15
 80112c8:	ee35 5a85 	vadd.f32	s10, s11, s10
 80112cc:	eea1 7aa4 	vfma.f32	s14, s3, s9
 80112d0:	ee75 5a82 	vadd.f32	s11, s11, s4
 80112d4:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80112d8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80112dc:	eee3 6aa5 	vfma.f32	s13, s7, s11
 80112e0:	ee36 6a43 	vsub.f32	s12, s12, s6
 80112e4:	eef0 7ae7 	vabs.f32	s15, s15
 80112e8:	eea6 7a04 	vfma.f32	s14, s12, s8
 80112ec:	eec6 caa7 	vdiv.f32	s25, s13, s15
 80112f0:	ee87 ca27 	vdiv.f32	s24, s14, s15
 80112f4:	ee6c 7aac 	vmul.f32	s15, s25, s25
 80112f8:	eeec 7a0c 	vfma.f32	s15, s24, s24
 80112fc:	ee77 7a8e 	vadd.f32	s15, s15, s28
 8011300:	ee17 0a90 	vmov	r0, s15
 8011304:	f7ef f918 	bl	8000538 <__aeabi_f2d>
 8011308:	ec41 0b10 	vmov	d0, r0, r1
 801130c:	f00a fe7c 	bl	801c008 <sqrt>
 8011310:	ec51 0b10 	vmov	r0, r1, d0
 8011314:	f7ef fc60 	bl	8000bd8 <__aeabi_d2f>
 8011318:	ee07 0a90 	vmov	s15, r0
 801131c:	eece 4a27 	vdiv.f32	s9, s28, s15
 8011320:	eddd 2a01 	vldr	s5, [sp, #4]
 8011324:	edc5 4a01 	vstr	s9, [r5, #4]
 8011328:	ee6c 5aa4 	vmul.f32	s11, s25, s9
 801132c:	ee2c 5a24 	vmul.f32	s10, s24, s9
 8011330:	ee68 8aa4 	vmul.f32	s17, s17, s9
 8011334:	ee68 6a25 	vmul.f32	s13, s16, s11
 8011338:	ee2f 7aa5 	vmul.f32	s14, s31, s11
 801133c:	ee6f 7a25 	vmul.f32	s15, s30, s11
 8011340:	eee5 8a0b 	vfma.f32	s17, s10, s22
 8011344:	eee9 6aa4 	vfma.f32	s13, s19, s9
 8011348:	eea4 7aae 	vfma.f32	s14, s9, s29
 801134c:	eee4 7aab 	vfma.f32	s15, s9, s23
 8011350:	eeb0 6a68 	vmov.f32	s12, s17
 8011354:	eeea 6a85 	vfma.f32	s13, s21, s10
 8011358:	eeaa 7a05 	vfma.f32	s14, s20, s10
 801135c:	eee5 7a22 	vfma.f32	s15, s10, s5
 8011360:	eea5 6a89 	vfma.f32	s12, s11, s18
 8011364:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8011368:	eef1 6a66 	vneg.f32	s13, s13
 801136c:	eeb1 7a47 	vneg.f32	s14, s14
 8011370:	eef1 7a67 	vneg.f32	s15, s15
 8011374:	eeb1 6a46 	vneg.f32	s12, s12
 8011378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801137c:	edc5 6a04 	vstr	s13, [r5, #16]
 8011380:	ed85 7a05 	vstr	s14, [r5, #20]
 8011384:	edc5 7a06 	vstr	s15, [r5, #24]
 8011388:	ed85 6a03 	vstr	s12, [r5, #12]
 801138c:	ed85 5a00 	vstr	s10, [r5]
 8011390:	edc5 5a02 	vstr	s11, [r5, #8]
 8011394:	d430      	bmi.n	80113f8 <st_accCal_MEMS_ellipsoidFit7+0x580>
 8011396:	b046      	add	sp, #280	; 0x118
 8011398:	ecbd 8b10 	vpop	{d8-d15}
 801139c:	bd70      	pop	{r4, r5, r6, pc}
 801139e:	ee31 7ac4 	vsub.f32	s14, s3, s8
 80113a2:	ed9d 2a14 	vldr	s4, [sp, #80]	; 0x50
 80113a6:	eddd 2a16 	vldr	s5, [sp, #88]	; 0x58
 80113aa:	eeb0 7ac7 	vabs.f32	s14, s14
 80113ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80113b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b6:	f57f ad9b 	bpl.w	8010ef0 <st_accCal_MEMS_ellipsoidFit7+0x78>
 80113ba:	ee32 7a62 	vsub.f32	s14, s4, s5
 80113be:	eeb0 7ac7 	vabs.f32	s14, s14
 80113c2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80113c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ca:	bf4c      	ite	mi
 80113cc:	2601      	movmi	r6, #1
 80113ce:	2600      	movpl	r6, #0
 80113d0:	e58e      	b.n	8010ef0 <st_accCal_MEMS_ellipsoidFit7+0x78>
 80113d2:	ee69 4ac2 	vnmul.f32	s9, s19, s4
 80113d6:	ee29 5a67 	vnmul.f32	s10, s18, s15
 80113da:	eee5 4aa1 	vfma.f32	s9, s11, s3
 80113de:	ee68 5ae1 	vnmul.f32	s11, s17, s3
 80113e2:	eea1 5aa2 	vfma.f32	s10, s3, s5
 80113e6:	eee7 5a82 	vfma.f32	s11, s15, s4
 80113ea:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 80113ee:	eef0 7a65 	vmov.f32	s15, s11
 80113f2:	eef0 2a64 	vmov.f32	s5, s9
 80113f6:	e5b9      	b.n	8010f6c <st_accCal_MEMS_ellipsoidFit7+0xf4>
 80113f8:	eeb1 5a45 	vneg.f32	s10, s10
 80113fc:	eef1 4a64 	vneg.f32	s9, s9
 8011400:	eef1 5a65 	vneg.f32	s11, s11
 8011404:	eeb1 6a46 	vneg.f32	s12, s12
 8011408:	eef1 6a66 	vneg.f32	s13, s13
 801140c:	eeb1 7a47 	vneg.f32	s14, s14
 8011410:	eef1 7a67 	vneg.f32	s15, s15
 8011414:	ed85 5a00 	vstr	s10, [r5]
 8011418:	edc5 4a01 	vstr	s9, [r5, #4]
 801141c:	edc5 5a02 	vstr	s11, [r5, #8]
 8011420:	ed85 6a03 	vstr	s12, [r5, #12]
 8011424:	edc5 6a04 	vstr	s13, [r5, #16]
 8011428:	ed85 7a05 	vstr	s14, [r5, #20]
 801142c:	edc5 7a06 	vstr	s15, [r5, #24]
 8011430:	b046      	add	sp, #280	; 0x118
 8011432:	ecbd 8b10 	vpop	{d8-d15}
 8011436:	bd70      	pop	{r4, r5, r6, pc}

08011438 <m_dcm2q_eml>:
 8011438:	ed90 7a04 	vldr	s14, [r0, #16]
 801143c:	edd0 6a08 	vldr	s13, [r0, #32]
 8011440:	edd0 7a00 	vldr	s15, [r0]
 8011444:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011448:	b538      	push	{r3, r4, r5, lr}
 801144a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801144e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801145a:	ed2d 8b02 	vpush	{d8}
 801145e:	4604      	mov	r4, r0
 8011460:	460d      	mov	r5, r1
 8011462:	f340 80c1 	ble.w	80115e8 <m_dcm2q_eml+0x1b0>
 8011466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801146a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801146e:	ee17 0a90 	vmov	r0, s15
 8011472:	f7ef f861 	bl	8000538 <__aeabi_f2d>
 8011476:	ec41 0b10 	vmov	d0, r0, r1
 801147a:	f00a fdc5 	bl	801c008 <sqrt>
 801147e:	ec51 0b10 	vmov	r0, r1, d0
 8011482:	f7ef fba9 	bl	8000bd8 <__aeabi_d2f>
 8011486:	ee07 0a90 	vmov	s15, r0
 801148a:	edd4 6a05 	vldr	s13, [r4, #20]
 801148e:	ed94 7a07 	vldr	s14, [r4, #28]
 8011492:	edd4 5a06 	vldr	s11, [r4, #24]
 8011496:	ed94 5a02 	vldr	s10, [r4, #8]
 801149a:	ed94 6a03 	vldr	s12, [r4, #12]
 801149e:	ed94 4a01 	vldr	s8, [r4, #4]
 80114a2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80114a6:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80114aa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80114ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80114b6:	bf54      	ite	pl
 80114b8:	eef0 4a47 	vmovpl.f32	s9, s14
 80114bc:	eef0 4a66 	vmovmi.f32	s9, s13
 80114c0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80114c4:	ee35 5a65 	vsub.f32	s10, s10, s11
 80114c8:	edc5 7a00 	vstr	s15, [r5]
 80114cc:	edd4 5a00 	vldr	s11, [r4]
 80114d0:	edd4 4a08 	vldr	s9, [r4, #32]
 80114d4:	edd4 7a04 	vldr	s15, [r4, #16]
 80114d8:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80114dc:	ee36 6a44 	vsub.f32	s12, s12, s8
 80114e0:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80114e4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80114e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ec:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80114f0:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 80114f4:	bf54      	ite	pl
 80114f6:	eef0 8a47 	vmovpl.f32	s17, s14
 80114fa:	eef0 8a66 	vmovmi.f32	s17, s13
 80114fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011502:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011506:	bf54      	ite	pl
 8011508:	eeb0 8a47 	vmovpl.f32	s16, s14
 801150c:	eeb0 8a66 	vmovmi.f32	s16, s13
 8011510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011514:	dd75      	ble.n	8011602 <m_dcm2q_eml+0x1ca>
 8011516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801151a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801151e:	ee17 0a90 	vmov	r0, s15
 8011522:	f7ef f809 	bl	8000538 <__aeabi_f2d>
 8011526:	ec41 0b10 	vmov	d0, r0, r1
 801152a:	f00a fd6d 	bl	801c008 <sqrt>
 801152e:	ec51 0b10 	vmov	r0, r1, d0
 8011532:	f7ef fb51 	bl	8000bd8 <__aeabi_d2f>
 8011536:	ee07 0a90 	vmov	s15, r0
 801153a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801153e:	edc5 7a01 	vstr	s15, [r5, #4]
 8011542:	edd4 6a04 	vldr	s13, [r4, #16]
 8011546:	ed94 7a00 	vldr	s14, [r4]
 801154a:	edd4 7a08 	vldr	s15, [r4, #32]
 801154e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011552:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8011556:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801155a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011562:	dd4b      	ble.n	80115fc <m_dcm2q_eml+0x1c4>
 8011564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011568:	ee77 7a87 	vadd.f32	s15, s15, s14
 801156c:	ee17 0a90 	vmov	r0, s15
 8011570:	f7ee ffe2 	bl	8000538 <__aeabi_f2d>
 8011574:	ec41 0b10 	vmov	d0, r0, r1
 8011578:	f00a fd46 	bl	801c008 <sqrt>
 801157c:	ec51 0b10 	vmov	r0, r1, d0
 8011580:	f7ef fb2a 	bl	8000bd8 <__aeabi_d2f>
 8011584:	ee07 0a90 	vmov	s15, r0
 8011588:	ee27 7a88 	vmul.f32	s14, s15, s16
 801158c:	ed85 7a02 	vstr	s14, [r5, #8]
 8011590:	ed94 7a04 	vldr	s14, [r4, #16]
 8011594:	edd4 7a00 	vldr	s15, [r4]
 8011598:	edd4 6a08 	vldr	s13, [r4, #32]
 801159c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80115a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b0:	dd1d      	ble.n	80115ee <m_dcm2q_eml+0x1b6>
 80115b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115ba:	ee17 0a90 	vmov	r0, s15
 80115be:	f7ee ffbb 	bl	8000538 <__aeabi_f2d>
 80115c2:	ec41 0b10 	vmov	d0, r0, r1
 80115c6:	f00a fd1f 	bl	801c008 <sqrt>
 80115ca:	ec51 0b10 	vmov	r0, r1, d0
 80115ce:	f7ef fb03 	bl	8000bd8 <__aeabi_d2f>
 80115d2:	ecbd 8b02 	vpop	{d8}
 80115d6:	ee07 0a10 	vmov	s14, r0
 80115da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80115de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115e2:	edc5 7a03 	vstr	s15, [r5, #12]
 80115e6:	bd38      	pop	{r3, r4, r5, pc}
 80115e8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011608 <m_dcm2q_eml+0x1d0>
 80115ec:	e74d      	b.n	801148a <m_dcm2q_eml+0x52>
 80115ee:	ecbd 8b02 	vpop	{d8}
 80115f2:	eddf 7a05 	vldr	s15, [pc, #20]	; 8011608 <m_dcm2q_eml+0x1d0>
 80115f6:	edc5 7a03 	vstr	s15, [r5, #12]
 80115fa:	bd38      	pop	{r3, r4, r5, pc}
 80115fc:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8011608 <m_dcm2q_eml+0x1d0>
 8011600:	e7c4      	b.n	801158c <m_dcm2q_eml+0x154>
 8011602:	eddf 7a01 	vldr	s15, [pc, #4]	; 8011608 <m_dcm2q_eml+0x1d0>
 8011606:	e79a      	b.n	801153e <m_dcm2q_eml+0x106>
 8011608:	00000000 	.word	0x00000000

0801160c <SpacePointGyroProp>:
 801160c:	b570      	push	{r4, r5, r6, lr}
 801160e:	eddf 6a46 	vldr	s13, [pc, #280]	; 8011728 <SpacePointGyroProp+0x11c>
 8011612:	ed92 6a01 	vldr	s12, [r2, #4]
 8011616:	ed92 7a00 	vldr	s14, [r2]
 801161a:	edd1 7a02 	vldr	s15, [r1, #8]
 801161e:	ed2d 8b04 	vpush	{d8-d9}
 8011622:	edd1 8a01 	vldr	s17, [r1, #4]
 8011626:	ed91 9a00 	vldr	s18, [r1]
 801162a:	ed92 8a02 	vldr	s16, [r2, #8]
 801162e:	9d08      	ldr	r5, [sp, #32]
 8011630:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011634:	ee78 8ac6 	vsub.f32	s17, s17, s12
 8011638:	ee39 9a47 	vsub.f32	s18, s18, s14
 801163c:	ee68 8a80 	vmul.f32	s17, s17, s0
 8011640:	ee29 9a00 	vmul.f32	s18, s18, s0
 8011644:	ee28 7aa8 	vmul.f32	s14, s17, s17
 8011648:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801164c:	eea9 7a09 	vfma.f32	s14, s18, s18
 8011650:	4606      	mov	r6, r0
 8011652:	461c      	mov	r4, r3
 8011654:	ee27 8a80 	vmul.f32	s16, s15, s0
 8011658:	eef0 7a47 	vmov.f32	s15, s14
 801165c:	eee8 7a08 	vfma.f32	s15, s16, s16
 8011660:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8011664:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801166c:	d55a      	bpl.n	8011724 <SpacePointGyroProp+0x118>
 801166e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8011672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011676:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801167a:	ee17 0a10 	vmov	r0, s14
 801167e:	f7ee ff5b 	bl	8000538 <__aeabi_f2d>
 8011682:	ec41 0b10 	vmov	d0, r0, r1
 8011686:	f00a fcbf 	bl	801c008 <sqrt>
 801168a:	ec51 0b10 	vmov	r0, r1, d0
 801168e:	f7ef faa3 	bl	8000bd8 <__aeabi_d2f>
 8011692:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011696:	ee29 9a27 	vmul.f32	s18, s18, s15
 801169a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801169e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80116a2:	4622      	mov	r2, r4
 80116a4:	60e8      	str	r0, [r5, #12]
 80116a6:	4631      	mov	r1, r6
 80116a8:	ed85 9a00 	vstr	s18, [r5]
 80116ac:	edc5 8a01 	vstr	s17, [r5, #4]
 80116b0:	ed85 8a02 	vstr	s16, [r5, #8]
 80116b4:	4628      	mov	r0, r5
 80116b6:	f7ff fa51 	bl	8010b5c <m_qmult_eml>
 80116ba:	edd4 8a02 	vldr	s17, [r4, #8]
 80116be:	ed94 9a01 	vldr	s18, [r4, #4]
 80116c2:	ed94 8a03 	vldr	s16, [r4, #12]
 80116c6:	edd4 9a00 	vldr	s19, [r4]
 80116ca:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80116ce:	eee9 7a09 	vfma.f32	s15, s18, s18
 80116d2:	eee8 7a08 	vfma.f32	s15, s16, s16
 80116d6:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80116da:	ee17 0a90 	vmov	r0, s15
 80116de:	f7ee ff2b 	bl	8000538 <__aeabi_f2d>
 80116e2:	ec41 0b10 	vmov	d0, r0, r1
 80116e6:	f00a fc8f 	bl	801c008 <sqrt>
 80116ea:	ec51 0b10 	vmov	r0, r1, d0
 80116ee:	f7ef fa73 	bl	8000bd8 <__aeabi_d2f>
 80116f2:	ee07 0a90 	vmov	s15, r0
 80116f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116fa:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80116fe:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8011702:	ee29 9a27 	vmul.f32	s18, s18, s15
 8011706:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801170a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801170e:	edc4 9a00 	vstr	s19, [r4]
 8011712:	ed84 9a01 	vstr	s18, [r4, #4]
 8011716:	edc4 8a02 	vstr	s17, [r4, #8]
 801171a:	ed84 8a03 	vstr	s16, [r4, #12]
 801171e:	ecbd 8b04 	vpop	{d8-d9}
 8011722:	bd70      	pop	{r4, r5, r6, pc}
 8011724:	2000      	movs	r0, #0
 8011726:	e7b4      	b.n	8011692 <SpacePointGyroProp+0x86>
 8011728:	3c8efa35 	.word	0x3c8efa35

0801172c <SpacePointGyroPropRedist>:
 801172c:	b570      	push	{r4, r5, r6, lr}
 801172e:	460d      	mov	r5, r1
 8011730:	ed2d 8b04 	vpush	{d8-d9}
 8011734:	4619      	mov	r1, r3
 8011736:	4606      	mov	r6, r0
 8011738:	4610      	mov	r0, r2
 801173a:	461a      	mov	r2, r3
 801173c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801173e:	f7ff fa0d 	bl	8010b5c <m_qmult_eml>
 8011742:	462a      	mov	r2, r5
 8011744:	4629      	mov	r1, r5
 8011746:	4630      	mov	r0, r6
 8011748:	f7ff fa08 	bl	8010b5c <m_qmult_eml>
 801174c:	4622      	mov	r2, r4
 801174e:	4618      	mov	r0, r3
 8011750:	9908      	ldr	r1, [sp, #32]
 8011752:	f7ff fa03 	bl	8010b5c <m_qmult_eml>
 8011756:	4621      	mov	r1, r4
 8011758:	4628      	mov	r0, r5
 801175a:	f7ff f9ff 	bl	8010b5c <m_qmult_eml>
 801175e:	ed94 9a01 	vldr	s18, [r4, #4]
 8011762:	edd4 9a00 	vldr	s19, [r4]
 8011766:	edd4 8a02 	vldr	s17, [r4, #8]
 801176a:	ed94 8a03 	vldr	s16, [r4, #12]
 801176e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8011772:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011776:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801177a:	eee8 7a08 	vfma.f32	s15, s16, s16
 801177e:	ee17 0a90 	vmov	r0, s15
 8011782:	f7ee fed9 	bl	8000538 <__aeabi_f2d>
 8011786:	ec41 0b10 	vmov	d0, r0, r1
 801178a:	f00a fc3d 	bl	801c008 <sqrt>
 801178e:	ec51 0b10 	vmov	r0, r1, d0
 8011792:	f7ef fa21 	bl	8000bd8 <__aeabi_d2f>
 8011796:	ee07 0a90 	vmov	s15, r0
 801179a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801179e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80117a2:	ee67 9aa9 	vmul.f32	s19, s15, s19
 80117a6:	ee29 9a27 	vmul.f32	s18, s18, s15
 80117aa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80117ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80117b2:	edc4 9a00 	vstr	s19, [r4]
 80117b6:	ed84 9a01 	vstr	s18, [r4, #4]
 80117ba:	edc4 8a02 	vstr	s17, [r4, #8]
 80117be:	ed84 8a03 	vstr	s16, [r4, #12]
 80117c2:	ecbd 8b04 	vpop	{d8-d9}
 80117c6:	bd70      	pop	{r4, r5, r6, pc}

080117c8 <quatErr2EulerErr>:
 80117c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117cc:	2300      	movs	r3, #0
 80117ce:	ed2d 8b04 	vpush	{d8-d9}
 80117d2:	6013      	str	r3, [r2, #0]
 80117d4:	6053      	str	r3, [r2, #4]
 80117d6:	6093      	str	r3, [r2, #8]
 80117d8:	ed90 0a01 	vldr	s0, [r0, #4]
 80117dc:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 8011990 <quatErr2EulerErr+0x1c8>
 80117e0:	4606      	mov	r6, r0
 80117e2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80117e6:	460c      	mov	r4, r1
 80117e8:	4615      	mov	r5, r2
 80117ea:	f00a fab5 	bl	801bd58 <cosf>
 80117ee:	ed96 9a02 	vldr	s18, [r6, #8]
 80117f2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80117f6:	eef0 8a40 	vmov.f32	s17, s0
 80117fa:	eeb0 0a49 	vmov.f32	s0, s18
 80117fe:	f00a fb13 	bl	801be28 <sinf>
 8011802:	eeb0 8a40 	vmov.f32	s16, s0
 8011806:	eeb0 0a49 	vmov.f32	s0, s18
 801180a:	f00a faa5 	bl	801bd58 <cosf>
 801180e:	edd4 7a01 	vldr	s15, [r4, #4]
 8011812:	edd4 6a02 	vldr	s13, [r4, #8]
 8011816:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8011994 <quatErr2EulerErr+0x1cc>
 801181a:	ee20 9a00 	vmul.f32	s18, s0, s0
 801181e:	ee28 8a08 	vmul.f32	s16, s16, s16
 8011822:	ee69 7a27 	vmul.f32	s15, s18, s15
 8011826:	eee8 7a26 	vfma.f32	s15, s16, s13
 801182a:	eef1 6ae7 	vsqrt.f32	s13, s15
 801182e:	ee66 7a87 	vmul.f32	s15, s13, s14
 8011832:	ee17 0a90 	vmov	r0, s15
 8011836:	f7ee fe7f 	bl	8000538 <__aeabi_f2d>
 801183a:	4b57      	ldr	r3, [pc, #348]	; (8011998 <quatErr2EulerErr+0x1d0>)
 801183c:	2200      	movs	r2, #0
 801183e:	4680      	mov	r8, r0
 8011840:	4689      	mov	r9, r1
 8011842:	f7ef f94d 	bl	8000ae0 <__aeabi_dcmple>
 8011846:	b918      	cbnz	r0, 8011850 <quatErr2EulerErr+0x88>
 8011848:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8011998 <quatErr2EulerErr+0x1d0>
 801184c:	f04f 0800 	mov.w	r8, #0
 8011850:	4649      	mov	r1, r9
 8011852:	4640      	mov	r0, r8
 8011854:	f7ef f9c0 	bl	8000bd8 <__aeabi_d2f>
 8011858:	f7ee fe6e 	bl	8000538 <__aeabi_f2d>
 801185c:	4b4f      	ldr	r3, [pc, #316]	; (801199c <quatErr2EulerErr+0x1d4>)
 801185e:	2200      	movs	r2, #0
 8011860:	4680      	mov	r8, r0
 8011862:	4689      	mov	r9, r1
 8011864:	f7ef f946 	bl	8000af4 <__aeabi_dcmpge>
 8011868:	b918      	cbnz	r0, 8011872 <quatErr2EulerErr+0xaa>
 801186a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 801199c <quatErr2EulerErr+0x1d4>
 801186e:	f04f 0800 	mov.w	r8, #0
 8011872:	4649      	mov	r1, r9
 8011874:	4640      	mov	r0, r8
 8011876:	f7ef f9af 	bl	8000bd8 <__aeabi_d2f>
 801187a:	6068      	str	r0, [r5, #4]
 801187c:	edd4 7a02 	vldr	s15, [r4, #8]
 8011880:	ed94 6a01 	vldr	s12, [r4, #4]
 8011884:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80119a0 <quatErr2EulerErr+0x1d8>
 8011888:	eddf 6a42 	vldr	s13, [pc, #264]	; 8011994 <quatErr2EulerErr+0x1cc>
 801188c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8011890:	eea8 7aa8 	vfma.f32	s14, s17, s17
 8011894:	eee8 7a06 	vfma.f32	s15, s16, s12
 8011898:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801189c:	eef1 7ac6 	vsqrt.f32	s15, s12
 80118a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118a4:	ee17 0a90 	vmov	r0, s15
 80118a8:	f7ee fe46 	bl	8000538 <__aeabi_f2d>
 80118ac:	4b3d      	ldr	r3, [pc, #244]	; (80119a4 <quatErr2EulerErr+0x1dc>)
 80118ae:	2200      	movs	r2, #0
 80118b0:	4680      	mov	r8, r0
 80118b2:	4689      	mov	r9, r1
 80118b4:	f7ef f914 	bl	8000ae0 <__aeabi_dcmple>
 80118b8:	b918      	cbnz	r0, 80118c2 <quatErr2EulerErr+0xfa>
 80118ba:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80119a4 <quatErr2EulerErr+0x1dc>
 80118be:	f04f 0800 	mov.w	r8, #0
 80118c2:	4649      	mov	r1, r9
 80118c4:	4640      	mov	r0, r8
 80118c6:	f7ef f987 	bl	8000bd8 <__aeabi_d2f>
 80118ca:	f7ee fe35 	bl	8000538 <__aeabi_f2d>
 80118ce:	4b33      	ldr	r3, [pc, #204]	; (801199c <quatErr2EulerErr+0x1d4>)
 80118d0:	2200      	movs	r2, #0
 80118d2:	4680      	mov	r8, r0
 80118d4:	4689      	mov	r9, r1
 80118d6:	f7ef f90d 	bl	8000af4 <__aeabi_dcmpge>
 80118da:	b918      	cbnz	r0, 80118e4 <quatErr2EulerErr+0x11c>
 80118dc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 801199c <quatErr2EulerErr+0x1d4>
 80118e0:	f04f 0800 	mov.w	r8, #0
 80118e4:	4640      	mov	r0, r8
 80118e6:	4649      	mov	r1, r9
 80118e8:	f7ef f976 	bl	8000bd8 <__aeabi_d2f>
 80118ec:	6028      	str	r0, [r5, #0]
 80118ee:	ed96 0a01 	vldr	s0, [r6, #4]
 80118f2:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8011990 <quatErr2EulerErr+0x1c8>
 80118f6:	ed94 7a02 	vldr	s14, [r4, #8]
 80118fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80119a8 <quatErr2EulerErr+0x1e0>
 80118fe:	edd4 6a01 	vldr	s13, [r4, #4]
 8011902:	ee20 0a06 	vmul.f32	s0, s0, s12
 8011906:	ee28 8a07 	vmul.f32	s16, s16, s14
 801190a:	eeb0 7ac0 	vabs.f32	s14, s0
 801190e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011916:	eea9 8a26 	vfma.f32	s16, s18, s13
 801191a:	d532      	bpl.n	8011982 <quatErr2EulerErr+0x1ba>
 801191c:	f00a faca 	bl	801beb4 <tanf>
 8011920:	edd4 7a00 	vldr	s15, [r4]
 8011924:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011928:	eee0 7a08 	vfma.f32	s15, s0, s16
 801192c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8011930:	eddf 7a18 	vldr	s15, [pc, #96]	; 8011994 <quatErr2EulerErr+0x1cc>
 8011934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011938:	ee17 0a90 	vmov	r0, s15
 801193c:	f7ee fdfc 	bl	8000538 <__aeabi_f2d>
 8011940:	4b18      	ldr	r3, [pc, #96]	; (80119a4 <quatErr2EulerErr+0x1dc>)
 8011942:	2200      	movs	r2, #0
 8011944:	4606      	mov	r6, r0
 8011946:	460f      	mov	r7, r1
 8011948:	f7ef f8ca 	bl	8000ae0 <__aeabi_dcmple>
 801194c:	b908      	cbnz	r0, 8011952 <quatErr2EulerErr+0x18a>
 801194e:	4f15      	ldr	r7, [pc, #84]	; (80119a4 <quatErr2EulerErr+0x1dc>)
 8011950:	2600      	movs	r6, #0
 8011952:	4639      	mov	r1, r7
 8011954:	4630      	mov	r0, r6
 8011956:	f7ef f93f 	bl	8000bd8 <__aeabi_d2f>
 801195a:	f7ee fded 	bl	8000538 <__aeabi_f2d>
 801195e:	4b0f      	ldr	r3, [pc, #60]	; (801199c <quatErr2EulerErr+0x1d4>)
 8011960:	2200      	movs	r2, #0
 8011962:	4606      	mov	r6, r0
 8011964:	460f      	mov	r7, r1
 8011966:	f7ef f8c5 	bl	8000af4 <__aeabi_dcmpge>
 801196a:	b908      	cbnz	r0, 8011970 <quatErr2EulerErr+0x1a8>
 801196c:	4f0b      	ldr	r7, [pc, #44]	; (801199c <quatErr2EulerErr+0x1d4>)
 801196e:	2600      	movs	r6, #0
 8011970:	4630      	mov	r0, r6
 8011972:	4639      	mov	r1, r7
 8011974:	f7ef f930 	bl	8000bd8 <__aeabi_d2f>
 8011978:	ecbd 8b04 	vpop	{d8-d9}
 801197c:	60a8      	str	r0, [r5, #8]
 801197e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011982:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80119ac <quatErr2EulerErr+0x1e4>
 8011986:	edd4 7a00 	vldr	s15, [r4]
 801198a:	eee8 7a07 	vfma.f32	s15, s16, s14
 801198e:	e7cd      	b.n	801192c <quatErr2EulerErr+0x164>
 8011990:	3c8efa35 	.word	0x3c8efa35
 8011994:	42e52ee1 	.word	0x42e52ee1
 8011998:	40568000 	.word	0x40568000
 801199c:	3ff00000 	.word	0x3ff00000
 80119a0:	3a83126f 	.word	0x3a83126f
 80119a4:	40668000 	.word	0x40668000
 80119a8:	3fbc430e 	.word	0x3fbc430e
 80119ac:	42c6ab07 	.word	0x42c6ab07

080119b0 <m_b_interp1q_constrain>:
 80119b0:	ed90 7a00 	vldr	s14, [r0]
 80119b4:	eeb4 7ac0 	vcmpe.f32	s14, s0
 80119b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119bc:	d53d      	bpl.n	8011a3a <m_b_interp1q_constrain+0x8a>
 80119be:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 80119c2:	eef4 7ac0 	vcmpe.f32	s15, s0
 80119c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ca:	dd33      	ble.n	8011a34 <m_b_interp1q_constrain+0x84>
 80119cc:	b4f0      	push	{r4, r5, r6, r7}
 80119ce:	240a      	movs	r4, #10
 80119d0:	2602      	movs	r6, #2
 80119d2:	2501      	movs	r5, #1
 80119d4:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 80119d8:	e008      	b.n	80119ec <m_b_interp1q_constrain+0x3c>
 80119da:	edd2 7a00 	vldr	s15, [r2]
 80119de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80119e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e6:	bfb8      	it	lt
 80119e8:	461c      	movlt	r4, r3
 80119ea:	da29      	bge.n	8011a40 <m_b_interp1q_constrain+0x90>
 80119ec:	1963      	adds	r3, r4, r5
 80119ee:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 80119f2:	42b4      	cmp	r4, r6
 80119f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80119f8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80119fc:	d8ed      	bhi.n	80119da <m_b_interp1q_constrain+0x2a>
 80119fe:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8011a02:	3d01      	subs	r5, #1
 8011a04:	00ab      	lsls	r3, r5, #2
 8011a06:	3304      	adds	r3, #4
 8011a08:	4418      	add	r0, r3
 8011a0a:	edd0 7a00 	vldr	s15, [r0]
 8011a0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011a12:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011a16:	440b      	add	r3, r1
 8011a18:	eec0 6a07 	vdiv.f32	s13, s0, s14
 8011a1c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8011a20:	bcf0      	pop	{r4, r5, r6, r7}
 8011a22:	ed91 0a00 	vldr	s0, [r1]
 8011a26:	edd3 7a00 	vldr	s15, [r3]
 8011a2a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011a2e:	eea6 0aa7 	vfma.f32	s0, s13, s15
 8011a32:	4770      	bx	lr
 8011a34:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
 8011a38:	4770      	bx	lr
 8011a3a:	ed91 0a00 	vldr	s0, [r1]
 8011a3e:	4770      	bx	lr
 8011a40:	eeb0 7a67 	vmov.f32	s14, s15
 8011a44:	1c5e      	adds	r6, r3, #1
 8011a46:	461d      	mov	r5, r3
 8011a48:	e7d0      	b.n	80119ec <m_b_interp1q_constrain+0x3c>
 8011a4a:	bf00      	nop

08011a4c <m_interp1q_constrain>:
 8011a4c:	ed90 7a00 	vldr	s14, [r0]
 8011a50:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8011a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a58:	d53d      	bpl.n	8011ad6 <m_interp1q_constrain+0x8a>
 8011a5a:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8011a5e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8011a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a66:	dd33      	ble.n	8011ad0 <m_interp1q_constrain+0x84>
 8011a68:	b4f0      	push	{r4, r5, r6, r7}
 8011a6a:	240d      	movs	r4, #13
 8011a6c:	2602      	movs	r6, #2
 8011a6e:	2501      	movs	r5, #1
 8011a70:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 8011a74:	e008      	b.n	8011a88 <m_interp1q_constrain+0x3c>
 8011a76:	edd2 7a00 	vldr	s15, [r2]
 8011a7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a82:	bfb8      	it	lt
 8011a84:	461c      	movlt	r4, r3
 8011a86:	da29      	bge.n	8011adc <m_interp1q_constrain+0x90>
 8011a88:	1963      	adds	r3, r4, r5
 8011a8a:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 8011a8e:	42b4      	cmp	r4, r6
 8011a90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011a94:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8011a98:	d8ed      	bhi.n	8011a76 <m_interp1q_constrain+0x2a>
 8011a9a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8011a9e:	3d01      	subs	r5, #1
 8011aa0:	00ab      	lsls	r3, r5, #2
 8011aa2:	3304      	adds	r3, #4
 8011aa4:	4418      	add	r0, r3
 8011aa6:	edd0 7a00 	vldr	s15, [r0]
 8011aaa:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011aae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011ab2:	440b      	add	r3, r1
 8011ab4:	eec0 6a07 	vdiv.f32	s13, s0, s14
 8011ab8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8011abc:	bcf0      	pop	{r4, r5, r6, r7}
 8011abe:	ed91 0a00 	vldr	s0, [r1]
 8011ac2:	edd3 7a00 	vldr	s15, [r3]
 8011ac6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011aca:	eea6 0aa7 	vfma.f32	s0, s13, s15
 8011ace:	4770      	bx	lr
 8011ad0:	ed91 0a0c 	vldr	s0, [r1, #48]	; 0x30
 8011ad4:	4770      	bx	lr
 8011ad6:	ed91 0a00 	vldr	s0, [r1]
 8011ada:	4770      	bx	lr
 8011adc:	eeb0 7a67 	vmov.f32	s14, s15
 8011ae0:	1c5e      	adds	r6, r3, #1
 8011ae2:	461d      	mov	r5, r3
 8011ae4:	e7d0      	b.n	8011a88 <m_interp1q_constrain+0x3c>
 8011ae6:	bf00      	nop

08011ae8 <m_rt_atan2f_snf>:
 8011ae8:	b508      	push	{r3, lr}
 8011aea:	4b39      	ldr	r3, [pc, #228]	; (8011bd0 <m_rt_atan2f_snf+0xe8>)
 8011aec:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8011af0:	eeb4 0a67 	vcmp.f32	s0, s15
 8011af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af8:	ed2d 8b02 	vpush	{d8}
 8011afc:	eeb0 8a40 	vmov.f32	s16, s0
 8011b00:	d014      	beq.n	8011b2c <m_rt_atan2f_snf+0x44>
 8011b02:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8011b06:	eeb4 0a47 	vcmp.f32	s0, s14
 8011b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b0e:	d00d      	beq.n	8011b2c <m_rt_atan2f_snf+0x44>
 8011b10:	eef5 0a40 	vcmp.f32	s1, #0.0
 8011b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b18:	d135      	bne.n	8011b86 <m_rt_atan2f_snf+0x9e>
 8011b1a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b22:	dc4d      	bgt.n	8011bc0 <m_rt_atan2f_snf+0xd8>
 8011b24:	d451      	bmi.n	8011bca <m_rt_atan2f_snf+0xe2>
 8011b26:	eeb0 0a60 	vmov.f32	s0, s1
 8011b2a:	e01d      	b.n	8011b68 <m_rt_atan2f_snf+0x80>
 8011b2c:	eef4 0a67 	vcmp.f32	s1, s15
 8011b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b34:	d11b      	bne.n	8011b6e <m_rt_atan2f_snf+0x86>
 8011b36:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011b3a:	eddf 7a26 	vldr	s15, [pc, #152]	; 8011bd4 <m_rt_atan2f_snf+0xec>
 8011b3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8011bd8 <m_rt_atan2f_snf+0xf0>
 8011b42:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8011bdc <m_rt_atan2f_snf+0xf4>
 8011b46:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8011be0 <m_rt_atan2f_snf+0xf8>
 8011b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b4e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8011b52:	bfd8      	it	le
 8011b54:	eef0 7a66 	vmovle.f32	s15, s13
 8011b58:	bfc8      	it	gt
 8011b5a:	eeb0 0a47 	vmovgt.f32	s0, s14
 8011b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b62:	bfd8      	it	le
 8011b64:	eeb0 0a67 	vmovle.f32	s0, s15
 8011b68:	ecbd 8b02 	vpop	{d8}
 8011b6c:	bd08      	pop	{r3, pc}
 8011b6e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8011b72:	eef4 0a67 	vcmp.f32	s1, s15
 8011b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b7a:	d0dc      	beq.n	8011b36 <m_rt_atan2f_snf+0x4e>
 8011b7c:	eef5 0a40 	vcmp.f32	s1, #0.0
 8011b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b84:	d0c9      	beq.n	8011b1a <m_rt_atan2f_snf+0x32>
 8011b86:	ee10 0a90 	vmov	r0, s1
 8011b8a:	f7ee fcd5 	bl	8000538 <__aeabi_f2d>
 8011b8e:	4602      	mov	r2, r0
 8011b90:	460b      	mov	r3, r1
 8011b92:	ee18 0a10 	vmov	r0, s16
 8011b96:	ec43 2b18 	vmov	d8, r2, r3
 8011b9a:	f7ee fccd 	bl	8000538 <__aeabi_f2d>
 8011b9e:	eeb0 1a48 	vmov.f32	s2, s16
 8011ba2:	eef0 1a68 	vmov.f32	s3, s17
 8011ba6:	ec41 0b10 	vmov	d0, r0, r1
 8011baa:	f00a f9e3 	bl	801bf74 <atan2>
 8011bae:	ec51 0b10 	vmov	r0, r1, d0
 8011bb2:	f7ef f811 	bl	8000bd8 <__aeabi_d2f>
 8011bb6:	ecbd 8b02 	vpop	{d8}
 8011bba:	ee00 0a10 	vmov	s0, r0
 8011bbe:	bd08      	pop	{r3, pc}
 8011bc0:	ecbd 8b02 	vpop	{d8}
 8011bc4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8011be4 <m_rt_atan2f_snf+0xfc>
 8011bc8:	bd08      	pop	{r3, pc}
 8011bca:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8011be8 <m_rt_atan2f_snf+0x100>
 8011bce:	e7cb      	b.n	8011b68 <m_rt_atan2f_snf+0x80>
 8011bd0:	200013e8 	.word	0x200013e8
 8011bd4:	4016cbe4 	.word	0x4016cbe4
 8011bd8:	c016cbe4 	.word	0xc016cbe4
 8011bdc:	3f490fdb 	.word	0x3f490fdb
 8011be0:	bf490fdb 	.word	0xbf490fdb
 8011be4:	3fc90fdb 	.word	0x3fc90fdb
 8011be8:	bfc90fdb 	.word	0xbfc90fdb

08011bec <output_update>:
 8011bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bf0:	ed2d 8b0a 	vpush	{d8-d12}
 8011bf4:	edd0 6a00 	vldr	s13, [r0]
 8011bf8:	ed90 7a01 	vldr	s14, [r0, #4]
 8011bfc:	edd0 7a02 	vldr	s15, [r0, #8]
 8011c00:	b08b      	sub	sp, #44	; 0x2c
 8011c02:	eef1 6a66 	vneg.f32	s13, s13
 8011c06:	f89d 9074 	ldrb.w	r9, [sp, #116]	; 0x74
 8011c0a:	edc0 6a00 	vstr	s13, [r0]
 8011c0e:	eeb1 7a47 	vneg.f32	s14, s14
 8011c12:	eef1 7a67 	vneg.f32	s15, s15
 8011c16:	460f      	mov	r7, r1
 8011c18:	ed80 7a01 	vstr	s14, [r0, #4]
 8011c1c:	edc0 7a02 	vstr	s15, [r0, #8]
 8011c20:	a901      	add	r1, sp, #4
 8011c22:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8011c26:	4604      	mov	r4, r0
 8011c28:	4615      	mov	r5, r2
 8011c2a:	461e      	mov	r6, r3
 8011c2c:	f7fe ffd0 	bl	8010bd0 <m_q2dcm_eml>
 8011c30:	f1b9 0f00 	cmp.w	r9, #0
 8011c34:	f040 8088 	bne.w	8011d48 <output_update+0x15c>
 8011c38:	9a08      	ldr	r2, [sp, #32]
 8011c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c3c:	9907      	ldr	r1, [sp, #28]
 8011c3e:	6072      	str	r2, [r6, #4]
 8011c40:	60b3      	str	r3, [r6, #8]
 8011c42:	6031      	str	r1, [r6, #0]
 8011c44:	ed94 0a03 	vldr	s0, [r4, #12]
 8011c48:	ed94 aa00 	vldr	s20, [r4]
 8011c4c:	edd4 aa02 	vldr	s21, [r4, #8]
 8011c50:	edd4 9a01 	vldr	s19, [r4, #4]
 8011c54:	ee20 9a00 	vmul.f32	s18, s0, s0
 8011c58:	ee2a 0a80 	vmul.f32	s0, s21, s0
 8011c5c:	eef0 0a49 	vmov.f32	s1, s18
 8011c60:	eeea 0a0a 	vfma.f32	s1, s20, s20
 8011c64:	eeaa 0a29 	vfma.f32	s0, s20, s19
 8011c68:	eee9 0ae9 	vfms.f32	s1, s19, s19
 8011c6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011c70:	eeea 0aea 	vfms.f32	s1, s21, s21
 8011c74:	f7ff ff38 	bl	8011ae8 <m_rt_atan2f_snf>
 8011c78:	ed85 0a00 	vstr	s0, [r5]
 8011c7c:	ed94 7a01 	vldr	s14, [r4, #4]
 8011c80:	edd4 7a03 	vldr	s15, [r4, #12]
 8011c84:	ed94 6a00 	vldr	s12, [r4]
 8011c88:	edd4 6a02 	vldr	s13, [r4, #8]
 8011c8c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8011c90:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8011c94:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011c98:	eef0 8a40 	vmov.f32	s17, s0
 8011c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ca0:	eeb1 ba69 	vneg.f32	s22, s19
 8011ca4:	ee17 0a90 	vmov	r0, s15
 8011ca8:	f7ee fc46 	bl	8000538 <__aeabi_f2d>
 8011cac:	ec41 0b10 	vmov	d0, r0, r1
 8011cb0:	f00a f92c 	bl	801bf0c <asin>
 8011cb4:	ec51 0b10 	vmov	r0, r1, d0
 8011cb8:	f7ee ff8e 	bl	8000bd8 <__aeabi_d2f>
 8011cbc:	eef0 0a49 	vmov.f32	s1, s18
 8011cc0:	6068      	str	r0, [r5, #4]
 8011cc2:	edd4 6a03 	vldr	s13, [r4, #12]
 8011cc6:	ed94 0a00 	vldr	s0, [r4]
 8011cca:	ed94 7a01 	vldr	s14, [r4, #4]
 8011cce:	edd4 7a02 	vldr	s15, [r4, #8]
 8011cd2:	eeea 0aaa 	vfma.f32	s1, s21, s21
 8011cd6:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011cda:	eeea 0a4a 	vfms.f32	s1, s20, s20
 8011cde:	eea7 0a27 	vfma.f32	s0, s14, s15
 8011ce2:	eeeb 0a29 	vfma.f32	s1, s22, s19
 8011ce6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011cea:	ee08 0a10 	vmov	s16, r0
 8011cee:	f7ff fefb 	bl	8011ae8 <m_rt_atan2f_snf>
 8011cf2:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8011ee8 <output_update+0x2fc>
 8011cf6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011cfa:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011cfe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011d02:	edc5 8a00 	vstr	s17, [r5]
 8011d06:	ed85 8a01 	vstr	s16, [r5, #4]
 8011d0a:	ed85 0a02 	vstr	s0, [r5, #8]
 8011d0e:	ed97 7a00 	vldr	s14, [r7]
 8011d12:	edd6 7a00 	vldr	s15, [r6]
 8011d16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d1a:	edc8 7a00 	vstr	s15, [r8]
 8011d1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8011d22:	edd6 7a01 	vldr	s15, [r6, #4]
 8011d26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d2a:	edc8 7a01 	vstr	s15, [r8, #4]
 8011d2e:	edd6 7a02 	vldr	s15, [r6, #8]
 8011d32:	ed97 7a02 	vldr	s14, [r7, #8]
 8011d36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d3a:	edc8 7a02 	vstr	s15, [r8, #8]
 8011d3e:	b00b      	add	sp, #44	; 0x2c
 8011d40:	ecbd 8b0a 	vpop	{d8-d12}
 8011d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d48:	f1b9 0f01 	cmp.w	r9, #1
 8011d4c:	d018      	beq.n	8011d80 <output_update+0x194>
 8011d4e:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8011ee8 <output_update+0x2fc>
 8011d52:	edd5 6a00 	vldr	s13, [r5]
 8011d56:	ed95 7a01 	vldr	s14, [r5, #4]
 8011d5a:	edd5 7a02 	vldr	s15, [r5, #8]
 8011d5e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011d62:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011d66:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011d6a:	edc5 6a00 	vstr	s13, [r5]
 8011d6e:	ed85 7a01 	vstr	s14, [r5, #4]
 8011d72:	edc5 7a02 	vstr	s15, [r5, #8]
 8011d76:	b00b      	add	sp, #44	; 0x2c
 8011d78:	ecbd 8b0a 	vpop	{d8-d12}
 8011d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d80:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8011d84:	9a08      	ldr	r2, [sp, #32]
 8011d86:	9b07      	ldr	r3, [sp, #28]
 8011d88:	6032      	str	r2, [r6, #0]
 8011d8a:	eef1 7a67 	vneg.f32	s15, s15
 8011d8e:	6073      	str	r3, [r6, #4]
 8011d90:	edc6 7a02 	vstr	s15, [r6, #8]
 8011d94:	edd4 7a02 	vldr	s15, [r4, #8]
 8011d98:	edd4 8a00 	vldr	s17, [r4]
 8011d9c:	ed94 9a01 	vldr	s18, [r4, #4]
 8011da0:	ed94 8a03 	vldr	s16, [r4, #12]
 8011da4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011da8:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011dac:	eea8 7aa8 	vfma.f32	s14, s17, s17
 8011db0:	eef0 ca00 	vmov.f32	s25, #0	; 0x40000000  2.0
 8011db4:	eef0 6a4c 	vmov.f32	s13, s24
 8011db8:	eee7 6a6c 	vfms.f32	s13, s14, s25
 8011dbc:	ee68 9a89 	vmul.f32	s19, s17, s18
 8011dc0:	ee16 0a90 	vmov	r0, s13
 8011dc4:	eee7 9ac8 	vfms.f32	s19, s15, s16
 8011dc8:	eef1 aa67 	vneg.f32	s21, s15
 8011dcc:	f7ee fbb4 	bl	8000538 <__aeabi_f2d>
 8011dd0:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	460b      	mov	r3, r1
 8011dd8:	ee17 0a90 	vmov	r0, s15
 8011ddc:	ec43 2b1b 	vmov	d11, r2, r3
 8011de0:	f7ee fbaa 	bl	8000538 <__aeabi_f2d>
 8011de4:	eeb0 1a4b 	vmov.f32	s2, s22
 8011de8:	eef0 1a6b 	vmov.f32	s3, s23
 8011dec:	ee69 9a09 	vmul.f32	s19, s18, s18
 8011df0:	ec41 0b10 	vmov	d0, r0, r1
 8011df4:	eee8 9aa8 	vfma.f32	s19, s17, s17
 8011df8:	f00a f8bc 	bl	801bf74 <atan2>
 8011dfc:	eea9 caec 	vfms.f32	s24, s19, s25
 8011e00:	ec51 0b10 	vmov	r0, r1, d0
 8011e04:	ee29 aa08 	vmul.f32	s20, s18, s16
 8011e08:	f7ee fee6 	bl	8000bd8 <__aeabi_d2f>
 8011e0c:	eea8 aaaa 	vfma.f32	s20, s17, s21
 8011e10:	4603      	mov	r3, r0
 8011e12:	ee1c 0a10 	vmov	r0, s24
 8011e16:	ee09 3a90 	vmov	s19, r3
 8011e1a:	f7ee fb8d 	bl	8000538 <__aeabi_f2d>
 8011e1e:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 8011e22:	4602      	mov	r2, r0
 8011e24:	460b      	mov	r3, r1
 8011e26:	ee17 0a90 	vmov	r0, s15
 8011e2a:	ec43 2b1b 	vmov	d11, r2, r3
 8011e2e:	f7ee fb83 	bl	8000538 <__aeabi_f2d>
 8011e32:	eeb0 1a4b 	vmov.f32	s2, s22
 8011e36:	eef0 1a6b 	vmov.f32	s3, s23
 8011e3a:	ec41 0b10 	vmov	d0, r0, r1
 8011e3e:	f00a f899 	bl	801bf74 <atan2>
 8011e42:	ee28 8a68 	vnmul.f32	s16, s16, s17
 8011e46:	ec51 0b10 	vmov	r0, r1, d0
 8011e4a:	f7ee fec5 	bl	8000bd8 <__aeabi_d2f>
 8011e4e:	eeaa 8a89 	vfma.f32	s16, s21, s18
 8011e52:	ee07 0a90 	vmov	s15, r0
 8011e56:	eef1 8a67 	vneg.f32	s17, s15
 8011e5a:	ee78 7a08 	vadd.f32	s15, s16, s16
 8011e5e:	eeb1 9a69 	vneg.f32	s18, s19
 8011e62:	ee17 0a90 	vmov	r0, s15
 8011e66:	f7ee fb67 	bl	8000538 <__aeabi_f2d>
 8011e6a:	ec41 0b10 	vmov	d0, r0, r1
 8011e6e:	f00a f84d 	bl	801bf0c <asin>
 8011e72:	ec51 0b10 	vmov	r0, r1, d0
 8011e76:	f7ee feaf 	bl	8000bd8 <__aeabi_d2f>
 8011e7a:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8011e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e82:	bfc8      	it	gt
 8011e84:	ed9f 9a19 	vldrgt	s18, [pc, #100]	; 8011eec <output_update+0x300>
 8011e88:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8011ee8 <output_update+0x2fc>
 8011e8c:	ee07 0a90 	vmov	s15, r0
 8011e90:	bfc8      	it	gt
 8011e92:	ee39 9a69 	vsubgt.f32	s18, s18, s19
 8011e96:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011e9a:	ee29 9a07 	vmul.f32	s18, s18, s14
 8011e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ea2:	ed85 9a00 	vstr	s18, [r5]
 8011ea6:	edc5 8a01 	vstr	s17, [r5, #4]
 8011eaa:	edc5 7a02 	vstr	s15, [r5, #8]
 8011eae:	ed97 7a01 	vldr	s14, [r7, #4]
 8011eb2:	edd6 7a00 	vldr	s15, [r6]
 8011eb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011eba:	edc8 7a00 	vstr	s15, [r8]
 8011ebe:	ed97 7a00 	vldr	s14, [r7]
 8011ec2:	edd6 7a01 	vldr	s15, [r6, #4]
 8011ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011eca:	edc8 7a01 	vstr	s15, [r8, #4]
 8011ece:	edd6 7a02 	vldr	s15, [r6, #8]
 8011ed2:	ed97 7a02 	vldr	s14, [r7, #8]
 8011ed6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011eda:	edc8 7a02 	vstr	s15, [r8, #8]
 8011ede:	b00b      	add	sp, #44	; 0x2c
 8011ee0:	ecbd 8b0a 	vpop	{d8-d12}
 8011ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ee8:	42652ee1 	.word	0x42652ee1
 8011eec:	40c90e56 	.word	0x40c90e56

08011ef0 <iNemo_setOrientation.constprop.0>:
 8011ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef4:	4a70      	ldr	r2, [pc, #448]	; (80120b8 <iNemo_setOrientation.constprop.0+0x1c8>)
 8011ef6:	4b71      	ldr	r3, [pc, #452]	; (80120bc <iNemo_setOrientation.constprop.0+0x1cc>)
 8011ef8:	f892 e000 	ldrb.w	lr, [r2]
 8011efc:	7915      	ldrb	r5, [r2, #4]
 8011efe:	7857      	ldrb	r7, [r2, #1]
 8011f00:	7954      	ldrb	r4, [r2, #5]
 8011f02:	f892 c009 	ldrb.w	ip, [r2, #9]
 8011f06:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	2e17      	cmp	r6, #23
 8011f0e:	bf98      	it	ls
 8011f10:	f10e 0e20 	addls.w	lr, lr, #32
 8011f14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 8011f18:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
 8011f1c:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8011f20:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 8011f24:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8011f28:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8011f2c:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
 8011f30:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 8011f34:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
 8011f38:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 8011f3c:	bf98      	it	ls
 8011f3e:	fa5f fe8e 	uxtbls.w	lr, lr
 8011f42:	2917      	cmp	r1, #23
 8011f44:	7a11      	ldrb	r1, [r2, #8]
 8011f46:	7896      	ldrb	r6, [r2, #2]
 8011f48:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 8011f4c:	bf9c      	itt	ls
 8011f4e:	3520      	addls	r5, #32
 8011f50:	b2ed      	uxtbls	r5, r5
 8011f52:	2817      	cmp	r0, #23
 8011f54:	bf98      	it	ls
 8011f56:	3120      	addls	r1, #32
 8011f58:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8011f5c:	bf98      	it	ls
 8011f5e:	b2c9      	uxtbls	r1, r1
 8011f60:	2817      	cmp	r0, #23
 8011f62:	bf98      	it	ls
 8011f64:	3720      	addls	r7, #32
 8011f66:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 8011f6a:	bf98      	it	ls
 8011f6c:	b2ff      	uxtbls	r7, r7
 8011f6e:	2817      	cmp	r0, #23
 8011f70:	bf98      	it	ls
 8011f72:	3420      	addls	r4, #32
 8011f74:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 8011f78:	bf98      	it	ls
 8011f7a:	b2e4      	uxtbls	r4, r4
 8011f7c:	2817      	cmp	r0, #23
 8011f7e:	bf98      	it	ls
 8011f80:	f10c 0c20 	addls.w	ip, ip, #32
 8011f84:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 8011f88:	bf98      	it	ls
 8011f8a:	fa5f fc8c 	uxtbls.w	ip, ip
 8011f8e:	2817      	cmp	r0, #23
 8011f90:	7990      	ldrb	r0, [r2, #6]
 8011f92:	7a92      	ldrb	r2, [r2, #10]
 8011f94:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 8011f98:	bf9c      	itt	ls
 8011f9a:	3620      	addls	r6, #32
 8011f9c:	b2f6      	uxtbls	r6, r6
 8011f9e:	f1b8 0f17 	cmp.w	r8, #23
 8011fa2:	bf98      	it	ls
 8011fa4:	3020      	addls	r0, #32
 8011fa6:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 8011faa:	bf98      	it	ls
 8011fac:	b2c0      	uxtbls	r0, r0
 8011fae:	f1b8 0f17 	cmp.w	r8, #23
 8011fb2:	bf98      	it	ls
 8011fb4:	3220      	addls	r2, #32
 8011fb6:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 8011fba:	bf98      	it	ls
 8011fbc:	b2d2      	uxtbls	r2, r2
 8011fbe:	f1be 0f13 	cmp.w	lr, #19
 8011fc2:	d80f      	bhi.n	8011fe4 <iNemo_setOrientation.constprop.0+0xf4>
 8011fc4:	e8df f00e 	tbb	[pc, lr]
 8011fc8:	0e0eac0a 	.word	0x0e0eac0a
 8011fcc:	0e0e0e0e 	.word	0x0e0e0e0e
 8011fd0:	0eb10e0e 	.word	0x0eb10e0e
 8011fd4:	b60e0e0e 	.word	0xb60e0e0e
 8011fd8:	c00ebb0e 	.word	0xc00ebb0e
 8011fdc:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8011fe0:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8011fe4:	3f64      	subs	r7, #100	; 0x64
 8011fe6:	2f13      	cmp	r7, #19
 8011fe8:	d80e      	bhi.n	8012008 <iNemo_setOrientation.constprop.0+0x118>
 8011fea:	e8df f007 	tbb	[pc, r7]
 8011fee:	b20a      	.short	0xb20a
 8011ff0:	0d0d0d0d 	.word	0x0d0d0d0d
 8011ff4:	0d0d0d0d 	.word	0x0d0d0d0d
 8011ff8:	0d0d0db6 	.word	0x0d0d0db6
 8011ffc:	be0dba0d 	.word	0xbe0dba0d
 8012000:	c20d      	.short	0xc20d
 8012002:	27ff      	movs	r7, #255	; 0xff
 8012004:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8012008:	3e64      	subs	r6, #100	; 0x64
 801200a:	2e13      	cmp	r6, #19
 801200c:	d80e      	bhi.n	801202c <iNemo_setOrientation.constprop.0+0x13c>
 801200e:	e8df f006 	tbb	[pc, r6]
 8012012:	b40a      	.short	0xb40a
 8012014:	0d0d0d0d 	.word	0x0d0d0d0d
 8012018:	0d0d0d0d 	.word	0x0d0d0d0d
 801201c:	0d0d0db8 	.word	0x0d0d0db8
 8012020:	c00dbc0d 	.word	0xc00dbc0d
 8012024:	c40d      	.short	0xc40d
 8012026:	26ff      	movs	r6, #255	; 0xff
 8012028:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 801202c:	3d64      	subs	r5, #100	; 0x64
 801202e:	2d13      	cmp	r5, #19
 8012030:	d80e      	bhi.n	8012050 <iNemo_setOrientation.constprop.0+0x160>
 8012032:	e8df f005 	tbb	[pc, r5]
 8012036:	b60a      	.short	0xb60a
 8012038:	0d0d0d0d 	.word	0x0d0d0d0d
 801203c:	0d0d0d0d 	.word	0x0d0d0d0d
 8012040:	0d0d0dba 	.word	0x0d0d0dba
 8012044:	c20dbe0d 	.word	0xc20dbe0d
 8012048:	c60d      	.short	0xc60d
 801204a:	25ff      	movs	r5, #255	; 0xff
 801204c:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8012050:	3c64      	subs	r4, #100	; 0x64
 8012052:	2c13      	cmp	r4, #19
 8012054:	d80e      	bhi.n	8012074 <iNemo_setOrientation.constprop.0+0x184>
 8012056:	e8df f004 	tbb	[pc, r4]
 801205a:	b80a      	.short	0xb80a
 801205c:	0d0d0d0d 	.word	0x0d0d0d0d
 8012060:	0d0d0d0d 	.word	0x0d0d0d0d
 8012064:	0d0d0dbc 	.word	0x0d0d0dbc
 8012068:	c40dc00d 	.word	0xc40dc00d
 801206c:	c80d      	.short	0xc80d
 801206e:	24ff      	movs	r4, #255	; 0xff
 8012070:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8012074:	3864      	subs	r0, #100	; 0x64
 8012076:	2813      	cmp	r0, #19
 8012078:	d80e      	bhi.n	8012098 <iNemo_setOrientation.constprop.0+0x1a8>
 801207a:	e8df f000 	tbb	[pc, r0]
 801207e:	ba0a      	.short	0xba0a
 8012080:	0d0d0d0d 	.word	0x0d0d0d0d
 8012084:	0d0d0d0d 	.word	0x0d0d0d0d
 8012088:	0d0d0dbe 	.word	0x0d0d0dbe
 801208c:	c60dc20d 	.word	0xc60dc20d
 8012090:	ca0d      	.short	0xca0d
 8012092:	20ff      	movs	r0, #255	; 0xff
 8012094:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8012098:	3964      	subs	r1, #100	; 0x64
 801209a:	2913      	cmp	r1, #19
 801209c:	d813      	bhi.n	80120c6 <iNemo_setOrientation.constprop.0+0x1d6>
 801209e:	e8df f001 	tbb	[pc, r1]
 80120a2:	bc0f      	.short	0xbc0f
 80120a4:	12121212 	.word	0x12121212
 80120a8:	12121212 	.word	0x12121212
 80120ac:	121212c0 	.word	0x121212c0
 80120b0:	c812c412 	.word	0xc812c412
 80120b4:	cc12      	.short	0xcc12
 80120b6:	bf00      	nop
 80120b8:	20000000 	.word	0x20000000
 80120bc:	200013e8 	.word	0x200013e8
 80120c0:	21ff      	movs	r1, #255	; 0xff
 80120c2:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 80120c6:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 80120ca:	f1bc 0f13 	cmp.w	ip, #19
 80120ce:	d80e      	bhi.n	80120ee <iNemo_setOrientation.constprop.0+0x1fe>
 80120d0:	e8df f00c 	tbb	[pc, ip]
 80120d4:	0d0db70a 	.word	0x0d0db70a
 80120d8:	0d0d0d0d 	.word	0x0d0d0d0d
 80120dc:	0dbb0d0d 	.word	0x0dbb0d0d
 80120e0:	bf0d0d0d 	.word	0xbf0d0d0d
 80120e4:	c70dc30d 	.word	0xc70dc30d
 80120e8:	21ff      	movs	r1, #255	; 0xff
 80120ea:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 80120ee:	3a64      	subs	r2, #100	; 0x64
 80120f0:	2a13      	cmp	r2, #19
 80120f2:	d80e      	bhi.n	8012112 <iNemo_setOrientation.constprop.0+0x222>
 80120f4:	e8df f002 	tbb	[pc, r2]
 80120f8:	0d0db90a 	.word	0x0d0db90a
 80120fc:	0d0d0d0d 	.word	0x0d0d0d0d
 8012100:	0dbe0d0d 	.word	0x0dbe0d0d
 8012104:	c30d0d0d 	.word	0xc30d0d0d
 8012108:	0f0dc80d 	.word	0x0f0dc80d
 801210c:	22ff      	movs	r2, #255	; 0xff
 801210e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8012112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012116:	22ff      	movs	r2, #255	; 0xff
 8012118:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 801211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012120:	f04f 0e01 	mov.w	lr, #1
 8012124:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8012128:	e75c      	b.n	8011fe4 <iNemo_setOrientation.constprop.0+0xf4>
 801212a:	f04f 0e01 	mov.w	lr, #1
 801212e:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 8012132:	e757      	b.n	8011fe4 <iNemo_setOrientation.constprop.0+0xf4>
 8012134:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8012138:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 801213c:	e752      	b.n	8011fe4 <iNemo_setOrientation.constprop.0+0xf4>
 801213e:	f04f 0e01 	mov.w	lr, #1
 8012142:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8012146:	e74d      	b.n	8011fe4 <iNemo_setOrientation.constprop.0+0xf4>
 8012148:	f04f 0eff 	mov.w	lr, #255	; 0xff
 801214c:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8012150:	e748      	b.n	8011fe4 <iNemo_setOrientation.constprop.0+0xf4>
 8012152:	2701      	movs	r7, #1
 8012154:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8012158:	e756      	b.n	8012008 <iNemo_setOrientation.constprop.0+0x118>
 801215a:	2701      	movs	r7, #1
 801215c:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8012160:	e752      	b.n	8012008 <iNemo_setOrientation.constprop.0+0x118>
 8012162:	27ff      	movs	r7, #255	; 0xff
 8012164:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8012168:	e74e      	b.n	8012008 <iNemo_setOrientation.constprop.0+0x118>
 801216a:	2701      	movs	r7, #1
 801216c:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8012170:	e74a      	b.n	8012008 <iNemo_setOrientation.constprop.0+0x118>
 8012172:	27ff      	movs	r7, #255	; 0xff
 8012174:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8012178:	e746      	b.n	8012008 <iNemo_setOrientation.constprop.0+0x118>
 801217a:	2601      	movs	r6, #1
 801217c:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8012180:	e754      	b.n	801202c <iNemo_setOrientation.constprop.0+0x13c>
 8012182:	2601      	movs	r6, #1
 8012184:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8012188:	e750      	b.n	801202c <iNemo_setOrientation.constprop.0+0x13c>
 801218a:	26ff      	movs	r6, #255	; 0xff
 801218c:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8012190:	e74c      	b.n	801202c <iNemo_setOrientation.constprop.0+0x13c>
 8012192:	2601      	movs	r6, #1
 8012194:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8012198:	e748      	b.n	801202c <iNemo_setOrientation.constprop.0+0x13c>
 801219a:	26ff      	movs	r6, #255	; 0xff
 801219c:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 80121a0:	e744      	b.n	801202c <iNemo_setOrientation.constprop.0+0x13c>
 80121a2:	2501      	movs	r5, #1
 80121a4:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 80121a8:	e752      	b.n	8012050 <iNemo_setOrientation.constprop.0+0x160>
 80121aa:	2501      	movs	r5, #1
 80121ac:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 80121b0:	e74e      	b.n	8012050 <iNemo_setOrientation.constprop.0+0x160>
 80121b2:	25ff      	movs	r5, #255	; 0xff
 80121b4:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 80121b8:	e74a      	b.n	8012050 <iNemo_setOrientation.constprop.0+0x160>
 80121ba:	2501      	movs	r5, #1
 80121bc:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 80121c0:	e746      	b.n	8012050 <iNemo_setOrientation.constprop.0+0x160>
 80121c2:	25ff      	movs	r5, #255	; 0xff
 80121c4:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 80121c8:	e742      	b.n	8012050 <iNemo_setOrientation.constprop.0+0x160>
 80121ca:	2401      	movs	r4, #1
 80121cc:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 80121d0:	e750      	b.n	8012074 <iNemo_setOrientation.constprop.0+0x184>
 80121d2:	2401      	movs	r4, #1
 80121d4:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 80121d8:	e74c      	b.n	8012074 <iNemo_setOrientation.constprop.0+0x184>
 80121da:	24ff      	movs	r4, #255	; 0xff
 80121dc:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 80121e0:	e748      	b.n	8012074 <iNemo_setOrientation.constprop.0+0x184>
 80121e2:	2401      	movs	r4, #1
 80121e4:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 80121e8:	e744      	b.n	8012074 <iNemo_setOrientation.constprop.0+0x184>
 80121ea:	24ff      	movs	r4, #255	; 0xff
 80121ec:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 80121f0:	e740      	b.n	8012074 <iNemo_setOrientation.constprop.0+0x184>
 80121f2:	2001      	movs	r0, #1
 80121f4:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 80121f8:	e74e      	b.n	8012098 <iNemo_setOrientation.constprop.0+0x1a8>
 80121fa:	2001      	movs	r0, #1
 80121fc:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8012200:	e74a      	b.n	8012098 <iNemo_setOrientation.constprop.0+0x1a8>
 8012202:	20ff      	movs	r0, #255	; 0xff
 8012204:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8012208:	e746      	b.n	8012098 <iNemo_setOrientation.constprop.0+0x1a8>
 801220a:	2001      	movs	r0, #1
 801220c:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8012210:	e742      	b.n	8012098 <iNemo_setOrientation.constprop.0+0x1a8>
 8012212:	20ff      	movs	r0, #255	; 0xff
 8012214:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8012218:	e73e      	b.n	8012098 <iNemo_setOrientation.constprop.0+0x1a8>
 801221a:	2101      	movs	r1, #1
 801221c:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8012220:	e751      	b.n	80120c6 <iNemo_setOrientation.constprop.0+0x1d6>
 8012222:	2101      	movs	r1, #1
 8012224:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8012228:	e74d      	b.n	80120c6 <iNemo_setOrientation.constprop.0+0x1d6>
 801222a:	21ff      	movs	r1, #255	; 0xff
 801222c:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8012230:	e749      	b.n	80120c6 <iNemo_setOrientation.constprop.0+0x1d6>
 8012232:	2101      	movs	r1, #1
 8012234:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8012238:	e745      	b.n	80120c6 <iNemo_setOrientation.constprop.0+0x1d6>
 801223a:	21ff      	movs	r1, #255	; 0xff
 801223c:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8012240:	e741      	b.n	80120c6 <iNemo_setOrientation.constprop.0+0x1d6>
 8012242:	2101      	movs	r1, #1
 8012244:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8012248:	e751      	b.n	80120ee <iNemo_setOrientation.constprop.0+0x1fe>
 801224a:	2101      	movs	r1, #1
 801224c:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8012250:	e74d      	b.n	80120ee <iNemo_setOrientation.constprop.0+0x1fe>
 8012252:	21ff      	movs	r1, #255	; 0xff
 8012254:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8012258:	e749      	b.n	80120ee <iNemo_setOrientation.constprop.0+0x1fe>
 801225a:	2101      	movs	r1, #1
 801225c:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 8012260:	e745      	b.n	80120ee <iNemo_setOrientation.constprop.0+0x1fe>
 8012262:	21ff      	movs	r1, #255	; 0xff
 8012264:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8012268:	e741      	b.n	80120ee <iNemo_setOrientation.constprop.0+0x1fe>
 801226a:	2201      	movs	r2, #1
 801226c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8012270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012274:	2201      	movs	r2, #1
 8012276:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 801227a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801227e:	22ff      	movs	r2, #255	; 0xff
 8012280:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8012284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012288:	2201      	movs	r2, #1
 801228a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 801228e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012292:	bf00      	nop

08012294 <iNemo_setOrientation_6X.constprop.0>:
 8012294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012298:	4a70      	ldr	r2, [pc, #448]	; (801245c <iNemo_setOrientation_6X.constprop.0+0x1c8>)
 801229a:	4b71      	ldr	r3, [pc, #452]	; (8012460 <iNemo_setOrientation_6X.constprop.0+0x1cc>)
 801229c:	f892 e000 	ldrb.w	lr, [r2]
 80122a0:	7915      	ldrb	r5, [r2, #4]
 80122a2:	7857      	ldrb	r7, [r2, #1]
 80122a4:	7954      	ldrb	r4, [r2, #5]
 80122a6:	f892 c009 	ldrb.w	ip, [r2, #9]
 80122aa:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 80122ae:	2100      	movs	r1, #0
 80122b0:	2e17      	cmp	r6, #23
 80122b2:	bf98      	it	ls
 80122b4:	f10e 0e20 	addls.w	lr, lr, #32
 80122b8:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 80122bc:	f883 10d0 	strb.w	r1, [r3, #208]	; 0xd0
 80122c0:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 80122c4:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 80122c8:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 80122cc:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 80122d0:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
 80122d4:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 80122d8:	f883 10e8 	strb.w	r1, [r3, #232]	; 0xe8
 80122dc:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 80122e0:	bf98      	it	ls
 80122e2:	fa5f fe8e 	uxtbls.w	lr, lr
 80122e6:	2917      	cmp	r1, #23
 80122e8:	7a11      	ldrb	r1, [r2, #8]
 80122ea:	7896      	ldrb	r6, [r2, #2]
 80122ec:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 80122f0:	bf9c      	itt	ls
 80122f2:	3520      	addls	r5, #32
 80122f4:	b2ed      	uxtbls	r5, r5
 80122f6:	2817      	cmp	r0, #23
 80122f8:	bf98      	it	ls
 80122fa:	3120      	addls	r1, #32
 80122fc:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8012300:	bf98      	it	ls
 8012302:	b2c9      	uxtbls	r1, r1
 8012304:	2817      	cmp	r0, #23
 8012306:	bf98      	it	ls
 8012308:	3720      	addls	r7, #32
 801230a:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 801230e:	bf98      	it	ls
 8012310:	b2ff      	uxtbls	r7, r7
 8012312:	2817      	cmp	r0, #23
 8012314:	bf98      	it	ls
 8012316:	3420      	addls	r4, #32
 8012318:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 801231c:	bf98      	it	ls
 801231e:	b2e4      	uxtbls	r4, r4
 8012320:	2817      	cmp	r0, #23
 8012322:	bf98      	it	ls
 8012324:	f10c 0c20 	addls.w	ip, ip, #32
 8012328:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 801232c:	bf98      	it	ls
 801232e:	fa5f fc8c 	uxtbls.w	ip, ip
 8012332:	2817      	cmp	r0, #23
 8012334:	7990      	ldrb	r0, [r2, #6]
 8012336:	7a92      	ldrb	r2, [r2, #10]
 8012338:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 801233c:	bf9c      	itt	ls
 801233e:	3620      	addls	r6, #32
 8012340:	b2f6      	uxtbls	r6, r6
 8012342:	f1b8 0f17 	cmp.w	r8, #23
 8012346:	bf98      	it	ls
 8012348:	3020      	addls	r0, #32
 801234a:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 801234e:	bf98      	it	ls
 8012350:	b2c0      	uxtbls	r0, r0
 8012352:	f1b8 0f17 	cmp.w	r8, #23
 8012356:	bf98      	it	ls
 8012358:	3220      	addls	r2, #32
 801235a:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 801235e:	bf98      	it	ls
 8012360:	b2d2      	uxtbls	r2, r2
 8012362:	f1be 0f13 	cmp.w	lr, #19
 8012366:	d80f      	bhi.n	8012388 <iNemo_setOrientation_6X.constprop.0+0xf4>
 8012368:	e8df f00e 	tbb	[pc, lr]
 801236c:	0e0eac0a 	.word	0x0e0eac0a
 8012370:	0e0e0e0e 	.word	0x0e0e0e0e
 8012374:	0eb10e0e 	.word	0x0eb10e0e
 8012378:	b60e0e0e 	.word	0xb60e0e0e
 801237c:	c00ebb0e 	.word	0xc00ebb0e
 8012380:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8012384:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 8012388:	3f64      	subs	r7, #100	; 0x64
 801238a:	2f13      	cmp	r7, #19
 801238c:	d80e      	bhi.n	80123ac <iNemo_setOrientation_6X.constprop.0+0x118>
 801238e:	e8df f007 	tbb	[pc, r7]
 8012392:	b20a      	.short	0xb20a
 8012394:	0d0d0d0d 	.word	0x0d0d0d0d
 8012398:	0d0d0d0d 	.word	0x0d0d0d0d
 801239c:	0d0d0db6 	.word	0x0d0d0db6
 80123a0:	be0dba0d 	.word	0xbe0dba0d
 80123a4:	c20d      	.short	0xc20d
 80123a6:	27ff      	movs	r7, #255	; 0xff
 80123a8:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 80123ac:	3e64      	subs	r6, #100	; 0x64
 80123ae:	2e13      	cmp	r6, #19
 80123b0:	d80e      	bhi.n	80123d0 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80123b2:	e8df f006 	tbb	[pc, r6]
 80123b6:	b40a      	.short	0xb40a
 80123b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80123bc:	0d0d0d0d 	.word	0x0d0d0d0d
 80123c0:	0d0d0db8 	.word	0x0d0d0db8
 80123c4:	c00dbc0d 	.word	0xc00dbc0d
 80123c8:	c40d      	.short	0xc40d
 80123ca:	26ff      	movs	r6, #255	; 0xff
 80123cc:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 80123d0:	3d64      	subs	r5, #100	; 0x64
 80123d2:	2d13      	cmp	r5, #19
 80123d4:	d80e      	bhi.n	80123f4 <iNemo_setOrientation_6X.constprop.0+0x160>
 80123d6:	e8df f005 	tbb	[pc, r5]
 80123da:	b60a      	.short	0xb60a
 80123dc:	0d0d0d0d 	.word	0x0d0d0d0d
 80123e0:	0d0d0d0d 	.word	0x0d0d0d0d
 80123e4:	0d0d0dba 	.word	0x0d0d0dba
 80123e8:	c20dbe0d 	.word	0xc20dbe0d
 80123ec:	c60d      	.short	0xc60d
 80123ee:	25ff      	movs	r5, #255	; 0xff
 80123f0:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 80123f4:	3c64      	subs	r4, #100	; 0x64
 80123f6:	2c13      	cmp	r4, #19
 80123f8:	d80e      	bhi.n	8012418 <iNemo_setOrientation_6X.constprop.0+0x184>
 80123fa:	e8df f004 	tbb	[pc, r4]
 80123fe:	b80a      	.short	0xb80a
 8012400:	0d0d0d0d 	.word	0x0d0d0d0d
 8012404:	0d0d0d0d 	.word	0x0d0d0d0d
 8012408:	0d0d0dbc 	.word	0x0d0d0dbc
 801240c:	c40dc00d 	.word	0xc40dc00d
 8012410:	c80d      	.short	0xc80d
 8012412:	24ff      	movs	r4, #255	; 0xff
 8012414:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 8012418:	3864      	subs	r0, #100	; 0x64
 801241a:	2813      	cmp	r0, #19
 801241c:	d80e      	bhi.n	801243c <iNemo_setOrientation_6X.constprop.0+0x1a8>
 801241e:	e8df f000 	tbb	[pc, r0]
 8012422:	ba0a      	.short	0xba0a
 8012424:	0d0d0d0d 	.word	0x0d0d0d0d
 8012428:	0d0d0d0d 	.word	0x0d0d0d0d
 801242c:	0d0d0dbe 	.word	0x0d0d0dbe
 8012430:	c60dc20d 	.word	0xc60dc20d
 8012434:	ca0d      	.short	0xca0d
 8012436:	20ff      	movs	r0, #255	; 0xff
 8012438:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 801243c:	3964      	subs	r1, #100	; 0x64
 801243e:	2913      	cmp	r1, #19
 8012440:	d813      	bhi.n	801246a <iNemo_setOrientation_6X.constprop.0+0x1d6>
 8012442:	e8df f001 	tbb	[pc, r1]
 8012446:	bc0f      	.short	0xbc0f
 8012448:	12121212 	.word	0x12121212
 801244c:	12121212 	.word	0x12121212
 8012450:	121212c0 	.word	0x121212c0
 8012454:	c812c412 	.word	0xc812c412
 8012458:	cc12      	.short	0xcc12
 801245a:	bf00      	nop
 801245c:	20000000 	.word	0x20000000
 8012460:	200013e8 	.word	0x200013e8
 8012464:	21ff      	movs	r1, #255	; 0xff
 8012466:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 801246a:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 801246e:	f1bc 0f13 	cmp.w	ip, #19
 8012472:	d80e      	bhi.n	8012492 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8012474:	e8df f00c 	tbb	[pc, ip]
 8012478:	0d0db70a 	.word	0x0d0db70a
 801247c:	0d0d0d0d 	.word	0x0d0d0d0d
 8012480:	0dbb0d0d 	.word	0x0dbb0d0d
 8012484:	bf0d0d0d 	.word	0xbf0d0d0d
 8012488:	c70dc30d 	.word	0xc70dc30d
 801248c:	21ff      	movs	r1, #255	; 0xff
 801248e:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 8012492:	3a64      	subs	r2, #100	; 0x64
 8012494:	2a13      	cmp	r2, #19
 8012496:	d80e      	bhi.n	80124b6 <iNemo_setOrientation_6X.constprop.0+0x222>
 8012498:	e8df f002 	tbb	[pc, r2]
 801249c:	0d0db90a 	.word	0x0d0db90a
 80124a0:	0d0d0d0d 	.word	0x0d0d0d0d
 80124a4:	0dbe0d0d 	.word	0x0dbe0d0d
 80124a8:	c30d0d0d 	.word	0xc30d0d0d
 80124ac:	0f0dc80d 	.word	0x0f0dc80d
 80124b0:	22ff      	movs	r2, #255	; 0xff
 80124b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80124b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ba:	22ff      	movs	r2, #255	; 0xff
 80124bc:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80124c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c4:	f04f 0e01 	mov.w	lr, #1
 80124c8:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 80124cc:	e75c      	b.n	8012388 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80124ce:	f04f 0e01 	mov.w	lr, #1
 80124d2:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 80124d6:	e757      	b.n	8012388 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80124d8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80124dc:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 80124e0:	e752      	b.n	8012388 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80124e2:	f04f 0e01 	mov.w	lr, #1
 80124e6:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 80124ea:	e74d      	b.n	8012388 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80124ec:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80124f0:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 80124f4:	e748      	b.n	8012388 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80124f6:	2701      	movs	r7, #1
 80124f8:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 80124fc:	e756      	b.n	80123ac <iNemo_setOrientation_6X.constprop.0+0x118>
 80124fe:	2701      	movs	r7, #1
 8012500:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 8012504:	e752      	b.n	80123ac <iNemo_setOrientation_6X.constprop.0+0x118>
 8012506:	27ff      	movs	r7, #255	; 0xff
 8012508:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 801250c:	e74e      	b.n	80123ac <iNemo_setOrientation_6X.constprop.0+0x118>
 801250e:	2701      	movs	r7, #1
 8012510:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 8012514:	e74a      	b.n	80123ac <iNemo_setOrientation_6X.constprop.0+0x118>
 8012516:	27ff      	movs	r7, #255	; 0xff
 8012518:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 801251c:	e746      	b.n	80123ac <iNemo_setOrientation_6X.constprop.0+0x118>
 801251e:	2601      	movs	r6, #1
 8012520:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 8012524:	e754      	b.n	80123d0 <iNemo_setOrientation_6X.constprop.0+0x13c>
 8012526:	2601      	movs	r6, #1
 8012528:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 801252c:	e750      	b.n	80123d0 <iNemo_setOrientation_6X.constprop.0+0x13c>
 801252e:	26ff      	movs	r6, #255	; 0xff
 8012530:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 8012534:	e74c      	b.n	80123d0 <iNemo_setOrientation_6X.constprop.0+0x13c>
 8012536:	2601      	movs	r6, #1
 8012538:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 801253c:	e748      	b.n	80123d0 <iNemo_setOrientation_6X.constprop.0+0x13c>
 801253e:	26ff      	movs	r6, #255	; 0xff
 8012540:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 8012544:	e744      	b.n	80123d0 <iNemo_setOrientation_6X.constprop.0+0x13c>
 8012546:	2501      	movs	r5, #1
 8012548:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 801254c:	e752      	b.n	80123f4 <iNemo_setOrientation_6X.constprop.0+0x160>
 801254e:	2501      	movs	r5, #1
 8012550:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 8012554:	e74e      	b.n	80123f4 <iNemo_setOrientation_6X.constprop.0+0x160>
 8012556:	25ff      	movs	r5, #255	; 0xff
 8012558:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 801255c:	e74a      	b.n	80123f4 <iNemo_setOrientation_6X.constprop.0+0x160>
 801255e:	2501      	movs	r5, #1
 8012560:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 8012564:	e746      	b.n	80123f4 <iNemo_setOrientation_6X.constprop.0+0x160>
 8012566:	25ff      	movs	r5, #255	; 0xff
 8012568:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 801256c:	e742      	b.n	80123f4 <iNemo_setOrientation_6X.constprop.0+0x160>
 801256e:	2401      	movs	r4, #1
 8012570:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 8012574:	e750      	b.n	8012418 <iNemo_setOrientation_6X.constprop.0+0x184>
 8012576:	2401      	movs	r4, #1
 8012578:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 801257c:	e74c      	b.n	8012418 <iNemo_setOrientation_6X.constprop.0+0x184>
 801257e:	24ff      	movs	r4, #255	; 0xff
 8012580:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 8012584:	e748      	b.n	8012418 <iNemo_setOrientation_6X.constprop.0+0x184>
 8012586:	2401      	movs	r4, #1
 8012588:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 801258c:	e744      	b.n	8012418 <iNemo_setOrientation_6X.constprop.0+0x184>
 801258e:	24ff      	movs	r4, #255	; 0xff
 8012590:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 8012594:	e740      	b.n	8012418 <iNemo_setOrientation_6X.constprop.0+0x184>
 8012596:	2001      	movs	r0, #1
 8012598:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 801259c:	e74e      	b.n	801243c <iNemo_setOrientation_6X.constprop.0+0x1a8>
 801259e:	2001      	movs	r0, #1
 80125a0:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 80125a4:	e74a      	b.n	801243c <iNemo_setOrientation_6X.constprop.0+0x1a8>
 80125a6:	20ff      	movs	r0, #255	; 0xff
 80125a8:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 80125ac:	e746      	b.n	801243c <iNemo_setOrientation_6X.constprop.0+0x1a8>
 80125ae:	2001      	movs	r0, #1
 80125b0:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 80125b4:	e742      	b.n	801243c <iNemo_setOrientation_6X.constprop.0+0x1a8>
 80125b6:	20ff      	movs	r0, #255	; 0xff
 80125b8:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 80125bc:	e73e      	b.n	801243c <iNemo_setOrientation_6X.constprop.0+0x1a8>
 80125be:	2101      	movs	r1, #1
 80125c0:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 80125c4:	e751      	b.n	801246a <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80125c6:	2101      	movs	r1, #1
 80125c8:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 80125cc:	e74d      	b.n	801246a <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80125ce:	21ff      	movs	r1, #255	; 0xff
 80125d0:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 80125d4:	e749      	b.n	801246a <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80125d6:	2101      	movs	r1, #1
 80125d8:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 80125dc:	e745      	b.n	801246a <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80125de:	21ff      	movs	r1, #255	; 0xff
 80125e0:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 80125e4:	e741      	b.n	801246a <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80125e6:	2101      	movs	r1, #1
 80125e8:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 80125ec:	e751      	b.n	8012492 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 80125ee:	2101      	movs	r1, #1
 80125f0:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 80125f4:	e74d      	b.n	8012492 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 80125f6:	21ff      	movs	r1, #255	; 0xff
 80125f8:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 80125fc:	e749      	b.n	8012492 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 80125fe:	2101      	movs	r1, #1
 8012600:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 8012604:	e745      	b.n	8012492 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8012606:	21ff      	movs	r1, #255	; 0xff
 8012608:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 801260c:	e741      	b.n	8012492 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 801260e:	2201      	movs	r2, #1
 8012610:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8012614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012618:	2201      	movs	r2, #1
 801261a:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 801261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012622:	22ff      	movs	r2, #255	; 0xff
 8012624:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8012628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801262c:	2201      	movs	r2, #1
 801262e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8012632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012636:	bf00      	nop

08012638 <MotionDI_setKnobs.part.0>:
 8012638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801263a:	e9d0 160b 	ldrd	r1, r6, [r0, #44]	; 0x2c
 801263e:	b091      	sub	sp, #68	; 0x44
 8012640:	4b3c      	ldr	r3, [pc, #240]	; (8012734 <MotionDI_setKnobs.part.0+0xfc>)
 8012642:	f8cd 6031 	str.w	r6, [sp, #49]	; 0x31
 8012646:	461a      	mov	r2, r3
 8012648:	4604      	mov	r4, r0
 801264a:	f8cd 102d 	str.w	r1, [sp, #45]	; 0x2d
 801264e:	f8bd 7031 	ldrh.w	r7, [sp, #49]	; 0x31
 8012652:	4d39      	ldr	r5, [pc, #228]	; (8012738 <MotionDI_setKnobs.part.0+0x100>)
 8012654:	f832 0f08 	ldrh.w	r0, [r2, #8]!
 8012658:	809f      	strh	r7, [r3, #4]
 801265a:	f8bd 702d 	ldrh.w	r7, [sp, #45]	; 0x2d
 801265e:	6a26      	ldr	r6, [r4, #32]
 8012660:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012662:	801f      	strh	r7, [r3, #0]
 8012664:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
 8012668:	709f      	strb	r7, [r3, #2]
 801266a:	f8d5 e0f0 	ldr.w	lr, [r5, #240]	; 0xf0
 801266e:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8012672:	f8ad 0035 	strh.w	r0, [sp, #53]	; 0x35
 8012676:	f8c5 6128 	str.w	r6, [r5, #296]	; 0x128
 801267a:	7890      	ldrb	r0, [r2, #2]
 801267c:	f8c5 60ec 	str.w	r6, [r5, #236]	; 0xec
 8012680:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
 8012684:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
 8012688:	f8c5 10f8 	str.w	r1, [r5, #248]	; 0xf8
 801268c:	2100      	movs	r1, #0
 801268e:	f89d c033 	ldrb.w	ip, [sp, #51]	; 0x33
 8012692:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8012696:	f8c5 e12c 	str.w	lr, [r5, #300]	; 0x12c
 801269a:	f885 113d 	strb.w	r1, [r5, #317]	; 0x13d
 801269e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 80126a2:	f885 7161 	strb.w	r7, [r5, #353]	; 0x161
 80126a6:	f885 6162 	strb.w	r6, [r5, #354]	; 0x162
 80126aa:	f885 7125 	strb.w	r7, [r5, #293]	; 0x125
 80126ae:	f885 6126 	strb.w	r6, [r5, #294]	; 0x126
 80126b2:	f885 1101 	strb.w	r1, [r5, #257]	; 0x101
 80126b6:	f8bd 1035 	ldrh.w	r1, [sp, #53]	; 0x35
 80126ba:	8119      	strh	r1, [r3, #8]
 80126bc:	f883 c006 	strb.w	ip, [r3, #6]
 80126c0:	7090      	strb	r0, [r2, #2]
 80126c2:	f7ff fc15 	bl	8011ef0 <iNemo_setOrientation.constprop.0>
 80126c6:	f7ff fde5 	bl	8012294 <iNemo_setOrientation_6X.constprop.0>
 80126ca:	4a1c      	ldr	r2, [pc, #112]	; (801273c <MotionDI_setKnobs.part.0+0x104>)
 80126cc:	f8d2 3464 	ldr.w	r3, [r2, #1124]	; 0x464
 80126d0:	1e59      	subs	r1, r3, #1
 80126d2:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80126d6:	d211      	bcs.n	80126fc <MotionDI_setKnobs.part.0+0xc4>
 80126d8:	3b0a      	subs	r3, #10
 80126da:	b29b      	uxth	r3, r3
 80126dc:	2b5a      	cmp	r3, #90	; 0x5a
 80126de:	bf8c      	ite	hi
 80126e0:	2300      	movhi	r3, #0
 80126e2:	2301      	movls	r3, #1
 80126e4:	6821      	ldr	r1, [r4, #0]
 80126e6:	7013      	strb	r3, [r2, #0]
 80126e8:	f502 638d 	add.w	r3, r2, #1128	; 0x468
 80126ec:	4814      	ldr	r0, [pc, #80]	; (8012740 <MotionDI_setKnobs.part.0+0x108>)
 80126ee:	6019      	str	r1, [r3, #0]
 80126f0:	f502 618c 	add.w	r1, r2, #1120	; 0x460
 80126f4:	2301      	movs	r3, #1
 80126f6:	6008      	str	r0, [r1, #0]
 80126f8:	f882 346c 	strb.w	r3, [r2, #1132]	; 0x46c
 80126fc:	68e3      	ldr	r3, [r4, #12]
 80126fe:	6920      	ldr	r0, [r4, #16]
 8012700:	6961      	ldr	r1, [r4, #20]
 8012702:	69a2      	ldr	r2, [r4, #24]
 8012704:	606b      	str	r3, [r5, #4]
 8012706:	4e0f      	ldr	r6, [pc, #60]	; (8012744 <MotionDI_setKnobs.part.0+0x10c>)
 8012708:	68a3      	ldr	r3, [r4, #8]
 801270a:	6168      	str	r0, [r5, #20]
 801270c:	60a9      	str	r1, [r5, #8]
 801270e:	60ea      	str	r2, [r5, #12]
 8012710:	602b      	str	r3, [r5, #0]
 8012712:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8012716:	6820      	ldr	r0, [r4, #0]
 8012718:	6861      	ldr	r1, [r4, #4]
 801271a:	68a2      	ldr	r2, [r4, #8]
 801271c:	68e3      	ldr	r3, [r4, #12]
 801271e:	4635      	mov	r5, r6
 8012720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012722:	3410      	adds	r4, #16
 8012724:	42bc      	cmp	r4, r7
 8012726:	462e      	mov	r6, r5
 8012728:	d1f5      	bne.n	8012716 <MotionDI_setKnobs.part.0+0xde>
 801272a:	6820      	ldr	r0, [r4, #0]
 801272c:	6028      	str	r0, [r5, #0]
 801272e:	b011      	add	sp, #68	; 0x44
 8012730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012732:	bf00      	nop
 8012734:	20000000 	.word	0x20000000
 8012738:	200013e8 	.word	0x200013e8
 801273c:	200026b0 	.word	0x200026b0
 8012740:	3a83126f 	.word	0x3a83126f
 8012744:	2000154c 	.word	0x2000154c

08012748 <getAccStats.constprop.0>:
 8012748:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801274c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8012750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012754:	2400      	movs	r4, #0
 8012756:	6014      	str	r4, [r2, #0]
 8012758:	601c      	str	r4, [r3, #0]
 801275a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801275c:	4f68      	ldr	r7, [pc, #416]	; (8012900 <getAccStats.constprop.0+0x1b8>)
 801275e:	2500      	movs	r5, #0
 8012760:	7025      	strb	r5, [r4, #0]
 8012762:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 8012766:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
 801276a:	ed9f 4a66 	vldr	s8, [pc, #408]	; 8012904 <getAccStats.constprop.0+0x1bc>
 801276e:	f9b7 5058 	ldrsh.w	r5, [r7, #88]	; 0x58
 8012772:	45a4      	cmp	ip, r4
 8012774:	ee23 4a84 	vmul.f32	s8, s7, s8
 8012778:	f105 0501 	add.w	r5, r5, #1
 801277c:	f000 80b2 	beq.w	80128e4 <getAccStats.constprop.0+0x19c>
 8012780:	eba5 050c 	sub.w	r5, r5, ip
 8012784:	fb95 faf4 	sdiv	sl, r5, r4
 8012788:	fb04 551a 	mls	r5, r4, sl, r5
 801278c:	fa0f fa85 	sxth.w	sl, r5
 8012790:	f1ba 0f00 	cmp.w	sl, #0
 8012794:	bfbc      	itt	lt
 8012796:	192d      	addlt	r5, r5, r4
 8012798:	fa0f fa85 	sxthlt.w	sl, r5
 801279c:	f1bc 0f00 	cmp.w	ip, #0
 80127a0:	f000 80aa 	beq.w	80128f8 <getAccStats.constprop.0+0x1b0>
 80127a4:	f9b0 9000 	ldrsh.w	r9, [r0]
 80127a8:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80127ac:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80127b0:	2600      	movs	r6, #0
 80127b2:	e018      	b.n	80127e6 <getAccStats.constprop.0+0x9e>
 80127b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80127b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80127b8:	7824      	ldrb	r4, [r4, #0]
 80127ba:	3401      	adds	r4, #1
 80127bc:	702c      	strb	r4, [r5, #0]
 80127be:	edd3 7a00 	vldr	s15, [r3]
 80127c2:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 80127c6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80127ca:	3601      	adds	r6, #1
 80127cc:	b2b4      	uxth	r4, r6
 80127ce:	45a4      	cmp	ip, r4
 80127d0:	edc3 7a00 	vstr	s15, [r3]
 80127d4:	d967      	bls.n	80128a6 <getAccStats.constprop.0+0x15e>
 80127d6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80127da:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80127de:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80127e2:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
 80127e6:	edd1 4a04 	vldr	s9, [r1, #16]
 80127ea:	ed91 5a00 	vldr	s10, [r1]
 80127ee:	edd1 5a08 	vldr	s11, [r1, #32]
 80127f2:	ed92 6a00 	vldr	s12, [r2]
 80127f6:	fa1a fb86 	uxtah	fp, sl, r6
 80127fa:	fb9b f5f4 	sdiv	r5, fp, r4
 80127fe:	fb04 b415 	mls	r4, r4, r5, fp
 8012802:	b224      	sxth	r4, r4
 8012804:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012808:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801280c:	f9b4 b062 	ldrsh.w	fp, [r4, #98]	; 0x62
 8012810:	f9b4 5060 	ldrsh.w	r5, [r4, #96]	; 0x60
 8012814:	f9b4 4064 	ldrsh.w	r4, [r4, #100]	; 0x64
 8012818:	ebab 0b08 	sub.w	fp, fp, r8
 801281c:	ee06 ba90 	vmov	s13, fp
 8012820:	eba5 0509 	sub.w	r5, r5, r9
 8012824:	ee07 5a10 	vmov	s14, r5
 8012828:	eba4 040e 	sub.w	r4, r4, lr
 801282c:	ee07 4a90 	vmov	s15, r4
 8012830:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012834:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012838:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801283c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012840:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012844:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8012848:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801284c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012850:	ee16 5a90 	vmov	r5, s13
 8012854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012858:	ee17 ba10 	vmov	fp, s14
 801285c:	ee17 4a90 	vmov	r4, s15
 8012860:	fb05 f505 	mul.w	r5, r5, r5
 8012864:	fb0b 5b0b 	mla	fp, fp, fp, r5
 8012868:	fb04 b404 	mla	r4, r4, r4, fp
 801286c:	ee07 4a90 	vmov	s15, r4
 8012870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012874:	eef1 6ae7 	vsqrt.f32	s13, s15
 8012878:	ee36 7ae3 	vsub.f32	s14, s13, s7
 801287c:	ee76 7a26 	vadd.f32	s15, s12, s13
 8012880:	eef0 6ac7 	vabs.f32	s13, s14
 8012884:	eeb4 4ae6 	vcmpe.f32	s8, s13
 8012888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801288c:	edc2 7a00 	vstr	s15, [r2]
 8012890:	d490      	bmi.n	80127b4 <getAccStats.constprop.0+0x6c>
 8012892:	edd3 7a00 	vldr	s15, [r3]
 8012896:	eee7 7a07 	vfma.f32	s15, s14, s14
 801289a:	3601      	adds	r6, #1
 801289c:	b2b4      	uxth	r4, r6
 801289e:	45a4      	cmp	ip, r4
 80128a0:	edc3 7a00 	vstr	s15, [r3]
 80128a4:	d89d      	bhi.n	80127e2 <getAccStats.constprop.0+0x9a>
 80128a6:	ee07 ca10 	vmov	s14, ip
 80128aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128ae:	eddf 6a16 	vldr	s13, [pc, #88]	; 8012908 <getAccStats.constprop.0+0x1c0>
 80128b2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80128b6:	eef1 7ac6 	vsqrt.f32	s15, s12
 80128ba:	ee60 7a27 	vmul.f32	s15, s0, s15
 80128be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80128c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c6:	bfb8      	it	lt
 80128c8:	eef0 7a66 	vmovlt.f32	s15, s13
 80128cc:	edc3 7a00 	vstr	s15, [r3]
 80128d0:	edd2 7a00 	vldr	s15, [r2]
 80128d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80128d8:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80128dc:	edc2 7a00 	vstr	s15, [r2]
 80128e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e4:	fb95 fafc 	sdiv	sl, r5, ip
 80128e8:	fb0c 551a 	mls	r5, ip, sl, r5
 80128ec:	fa0f fa85 	sxth.w	sl, r5
 80128f0:	f1bc 0f00 	cmp.w	ip, #0
 80128f4:	f47f af56 	bne.w	80127a4 <getAccStats.constprop.0+0x5c>
 80128f8:	edd3 7a00 	vldr	s15, [r3]
 80128fc:	e7d3      	b.n	80128a6 <getAccStats.constprop.0+0x15e>
 80128fe:	bf00      	nop
 8012900:	200026b0 	.word	0x200026b0
 8012904:	3e4ccccd 	.word	0x3e4ccccd
 8012908:	3ca3d70a 	.word	0x3ca3d70a
 801290c:	00000000 	.word	0x00000000

08012910 <iNemo_quat2heading>:
 8012910:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012914:	460e      	mov	r6, r1
 8012916:	ed2d 8b08 	vpush	{d8-d11}
 801291a:	2b00      	cmp	r3, #0
 801291c:	d15b      	bne.n	80129d6 <iNemo_quat2heading+0xc6>
 801291e:	edd2 6a00 	vldr	s13, [r2]
 8012922:	edd2 7a01 	vldr	s15, [r2, #4]
 8012926:	4dba      	ldr	r5, [pc, #744]	; (8012c10 <iNemo_quat2heading+0x300>)
 8012928:	ed92 7a02 	vldr	s14, [r2, #8]
 801292c:	edd0 9a00 	vldr	s19, [r0]
 8012930:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 8012934:	ed90 aa01 	vldr	s20, [r0, #4]
 8012938:	edd0 8a02 	vldr	s17, [r0, #8]
 801293c:	ed90 8a03 	vldr	s16, [r0, #12]
 8012940:	eef0 aae6 	vabs.f32	s21, s13
 8012944:	eeb0 9ae7 	vabs.f32	s18, s15
 8012948:	eef4 aac9 	vcmpe.f32	s21, s18
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012950:	eeb0 bac7 	vabs.f32	s22, s14
 8012954:	f340 80b4 	ble.w	8012ac0 <iNemo_quat2heading+0x1b0>
 8012958:	eef4 aacb 	vcmpe.f32	s21, s22
 801295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012960:	f340 80ae 	ble.w	8012ac0 <iNemo_quat2heading+0x1b0>
 8012964:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801296c:	ee1a 0a90 	vmov	r0, s21
 8012970:	f340 81b3 	ble.w	8012cda <iNemo_quat2heading+0x3ca>
 8012974:	f7ed fde0 	bl	8000538 <__aeabi_f2d>
 8012978:	4680      	mov	r8, r0
 801297a:	ee19 0a10 	vmov	r0, s18
 801297e:	4689      	mov	r9, r1
 8012980:	f7ed fdda 	bl	8000538 <__aeabi_f2d>
 8012984:	a39e      	add	r3, pc, #632	; (adr r3, 8012c00 <iNemo_quat2heading+0x2f0>)
 8012986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298a:	f7ed fe2d 	bl	80005e8 <__aeabi_dmul>
 801298e:	4602      	mov	r2, r0
 8012990:	460b      	mov	r3, r1
 8012992:	4640      	mov	r0, r8
 8012994:	4649      	mov	r1, r9
 8012996:	f7ee f8b7 	bl	8000b08 <__aeabi_dcmpgt>
 801299a:	b188      	cbz	r0, 80129c0 <iNemo_quat2heading+0xb0>
 801299c:	ee1b 0a10 	vmov	r0, s22
 80129a0:	f7ed fdca 	bl	8000538 <__aeabi_f2d>
 80129a4:	a396      	add	r3, pc, #600	; (adr r3, 8012c00 <iNemo_quat2heading+0x2f0>)
 80129a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129aa:	f7ed fe1d 	bl	80005e8 <__aeabi_dmul>
 80129ae:	4602      	mov	r2, r0
 80129b0:	460b      	mov	r3, r1
 80129b2:	4640      	mov	r0, r8
 80129b4:	4649      	mov	r1, r9
 80129b6:	f7ee f8a7 	bl	8000b08 <__aeabi_dcmpgt>
 80129ba:	2800      	cmp	r0, #0
 80129bc:	f040 81b9 	bne.w	8012d32 <iNemo_quat2heading+0x422>
 80129c0:	2c05      	cmp	r4, #5
 80129c2:	f200 81ba 	bhi.w	8012d3a <iNemo_quat2heading+0x42a>
 80129c6:	e8df f014 	tbh	[pc, r4, lsl #1]
 80129ca:	00b2      	.short	0x00b2
 80129cc:	005f00e7 	.word	0x005f00e7
 80129d0:	005f0156 	.word	0x005f0156
 80129d4:	00b2      	.short	0x00b2
 80129d6:	edd2 6a01 	vldr	s13, [r2, #4]
 80129da:	edd2 7a00 	vldr	s15, [r2]
 80129de:	edd0 8a02 	vldr	s17, [r0, #8]
 80129e2:	4d8b      	ldr	r5, [pc, #556]	; (8012c10 <iNemo_quat2heading+0x300>)
 80129e4:	ed92 7a02 	vldr	s14, [r2, #8]
 80129e8:	edd0 9a01 	vldr	s19, [r0, #4]
 80129ec:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 80129f0:	ed90 aa00 	vldr	s20, [r0]
 80129f4:	ed90 8a03 	vldr	s16, [r0, #12]
 80129f8:	eef0 aae6 	vabs.f32	s21, s13
 80129fc:	eeb0 9ae7 	vabs.f32	s18, s15
 8012a00:	eef4 aac9 	vcmpe.f32	s21, s18
 8012a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a08:	eef1 8a68 	vneg.f32	s17, s17
 8012a0c:	eeb0 bac7 	vabs.f32	s22, s14
 8012a10:	dd04      	ble.n	8012a1c <iNemo_quat2heading+0x10c>
 8012a12:	eef4 aacb 	vcmpe.f32	s21, s22
 8012a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1a:	dca3      	bgt.n	8012964 <iNemo_quat2heading+0x54>
 8012a1c:	eeb4 9acb 	vcmpe.f32	s18, s22
 8012a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a24:	f300 8086 	bgt.w	8012b34 <iNemo_quat2heading+0x224>
 8012a28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a30:	ee1b 0a10 	vmov	r0, s22
 8012a34:	d450      	bmi.n	8012ad8 <iNemo_quat2heading+0x1c8>
 8012a36:	f7ed fd7f 	bl	8000538 <__aeabi_f2d>
 8012a3a:	4680      	mov	r8, r0
 8012a3c:	ee19 0a10 	vmov	r0, s18
 8012a40:	4689      	mov	r9, r1
 8012a42:	f7ed fd79 	bl	8000538 <__aeabi_f2d>
 8012a46:	a36e      	add	r3, pc, #440	; (adr r3, 8012c00 <iNemo_quat2heading+0x2f0>)
 8012a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4c:	f7ed fdcc 	bl	80005e8 <__aeabi_dmul>
 8012a50:	4602      	mov	r2, r0
 8012a52:	460b      	mov	r3, r1
 8012a54:	4640      	mov	r0, r8
 8012a56:	4649      	mov	r1, r9
 8012a58:	f7ee f856 	bl	8000b08 <__aeabi_dcmpgt>
 8012a5c:	2800      	cmp	r0, #0
 8012a5e:	d0af      	beq.n	80129c0 <iNemo_quat2heading+0xb0>
 8012a60:	ee1a 0a90 	vmov	r0, s21
 8012a64:	f7ed fd68 	bl	8000538 <__aeabi_f2d>
 8012a68:	a365      	add	r3, pc, #404	; (adr r3, 8012c00 <iNemo_quat2heading+0x2f0>)
 8012a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6e:	f7ed fdbb 	bl	80005e8 <__aeabi_dmul>
 8012a72:	4602      	mov	r2, r0
 8012a74:	460b      	mov	r3, r1
 8012a76:	4640      	mov	r0, r8
 8012a78:	4649      	mov	r1, r9
 8012a7a:	f7ee f845 	bl	8000b08 <__aeabi_dcmpgt>
 8012a7e:	2800      	cmp	r0, #0
 8012a80:	d09e      	beq.n	80129c0 <iNemo_quat2heading+0xb0>
 8012a82:	2302      	movs	r3, #2
 8012a84:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8012a88:	ed96 0a00 	vldr	s0, [r6]
 8012a8c:	eddf 7a61 	vldr	s15, [pc, #388]	; 8012c14 <iNemo_quat2heading+0x304>
 8012a90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012a94:	eddf 7a60 	vldr	s15, [pc, #384]	; 8012c18 <iNemo_quat2heading+0x308>
 8012a98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa0:	bfa8      	it	ge
 8012aa2:	ee30 0a67 	vsubge.f32	s0, s0, s15
 8012aa6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aae:	d503      	bpl.n	8012ab8 <iNemo_quat2heading+0x1a8>
 8012ab0:	eddf 7a59 	vldr	s15, [pc, #356]	; 8012c18 <iNemo_quat2heading+0x308>
 8012ab4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012ab8:	ecbd 8b08 	vpop	{d8-d11}
 8012abc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8012ac0:	eeb4 9acb 	vcmpe.f32	s18, s22
 8012ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac8:	dc34      	bgt.n	8012b34 <iNemo_quat2heading+0x224>
 8012aca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad2:	ee1b 0a10 	vmov	r0, s22
 8012ad6:	ddae      	ble.n	8012a36 <iNemo_quat2heading+0x126>
 8012ad8:	f7ed fd2e 	bl	8000538 <__aeabi_f2d>
 8012adc:	4680      	mov	r8, r0
 8012ade:	ee19 0a10 	vmov	r0, s18
 8012ae2:	4689      	mov	r9, r1
 8012ae4:	f7ed fd28 	bl	8000538 <__aeabi_f2d>
 8012ae8:	a345      	add	r3, pc, #276	; (adr r3, 8012c00 <iNemo_quat2heading+0x2f0>)
 8012aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aee:	f7ed fd7b 	bl	80005e8 <__aeabi_dmul>
 8012af2:	4602      	mov	r2, r0
 8012af4:	460b      	mov	r3, r1
 8012af6:	4640      	mov	r0, r8
 8012af8:	4649      	mov	r1, r9
 8012afa:	f7ee f805 	bl	8000b08 <__aeabi_dcmpgt>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	f43f af5e 	beq.w	80129c0 <iNemo_quat2heading+0xb0>
 8012b04:	ee1a 0a90 	vmov	r0, s21
 8012b08:	f7ed fd16 	bl	8000538 <__aeabi_f2d>
 8012b0c:	a33c      	add	r3, pc, #240	; (adr r3, 8012c00 <iNemo_quat2heading+0x2f0>)
 8012b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b12:	f7ed fd69 	bl	80005e8 <__aeabi_dmul>
 8012b16:	4602      	mov	r2, r0
 8012b18:	460b      	mov	r3, r1
 8012b1a:	4640      	mov	r0, r8
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	f7ed fff3 	bl	8000b08 <__aeabi_dcmpgt>
 8012b22:	2800      	cmp	r0, #0
 8012b24:	f43f af4c 	beq.w	80129c0 <iNemo_quat2heading+0xb0>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8012b2e:	ed96 0a00 	vldr	s0, [r6]
 8012b32:	e7af      	b.n	8012a94 <iNemo_quat2heading+0x184>
 8012b34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3c:	ee19 0a10 	vmov	r0, s18
 8012b40:	dd6e      	ble.n	8012c20 <iNemo_quat2heading+0x310>
 8012b42:	f7ed fcf9 	bl	8000538 <__aeabi_f2d>
 8012b46:	4680      	mov	r8, r0
 8012b48:	ee1a 0a90 	vmov	r0, s21
 8012b4c:	4689      	mov	r9, r1
 8012b4e:	f7ed fcf3 	bl	8000538 <__aeabi_f2d>
 8012b52:	a32b      	add	r3, pc, #172	; (adr r3, 8012c00 <iNemo_quat2heading+0x2f0>)
 8012b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b58:	f7ed fd46 	bl	80005e8 <__aeabi_dmul>
 8012b5c:	4602      	mov	r2, r0
 8012b5e:	460b      	mov	r3, r1
 8012b60:	4640      	mov	r0, r8
 8012b62:	4649      	mov	r1, r9
 8012b64:	f7ed ffd0 	bl	8000b08 <__aeabi_dcmpgt>
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	f43f af29 	beq.w	80129c0 <iNemo_quat2heading+0xb0>
 8012b6e:	ee1b 0a10 	vmov	r0, s22
 8012b72:	f7ed fce1 	bl	8000538 <__aeabi_f2d>
 8012b76:	a322      	add	r3, pc, #136	; (adr r3, 8012c00 <iNemo_quat2heading+0x2f0>)
 8012b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7c:	f7ed fd34 	bl	80005e8 <__aeabi_dmul>
 8012b80:	4602      	mov	r2, r0
 8012b82:	460b      	mov	r3, r1
 8012b84:	4640      	mov	r0, r8
 8012b86:	4649      	mov	r1, r9
 8012b88:	f7ed ffbe 	bl	8000b08 <__aeabi_dcmpgt>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	f43f af17 	beq.w	80129c0 <iNemo_quat2heading+0xb0>
 8012b92:	2301      	movs	r3, #1
 8012b94:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8012b98:	ee68 7a08 	vmul.f32	s15, s16, s16
 8012b9c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8012ba0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012ba4:	eeaa 8a29 	vfma.f32	s16, s20, s19
 8012ba8:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012bac:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8012bb0:	ee17 0a90 	vmov	r0, s15
 8012bb4:	f7ed fcc0 	bl	8000538 <__aeabi_f2d>
 8012bb8:	ee78 7a08 	vadd.f32	s15, s16, s16
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	460b      	mov	r3, r1
 8012bc0:	ee17 0a90 	vmov	r0, s15
 8012bc4:	ec43 2b18 	vmov	d8, r2, r3
 8012bc8:	f7ed fcb6 	bl	8000538 <__aeabi_f2d>
 8012bcc:	eeb0 1a48 	vmov.f32	s2, s16
 8012bd0:	eef0 1a68 	vmov.f32	s3, s17
 8012bd4:	ec41 0b10 	vmov	d0, r0, r1
 8012bd8:	f009 f9cc 	bl	801bf74 <atan2>
 8012bdc:	a30a      	add	r3, pc, #40	; (adr r3, 8012c08 <iNemo_quat2heading+0x2f8>)
 8012bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be2:	ec51 0b10 	vmov	r0, r1, d0
 8012be6:	f7ed fcff 	bl	80005e8 <__aeabi_dmul>
 8012bea:	4b0c      	ldr	r3, [pc, #48]	; (8012c1c <iNemo_quat2heading+0x30c>)
 8012bec:	2200      	movs	r2, #0
 8012bee:	f7ed fb43 	bl	8000278 <__aeabi_dsub>
 8012bf2:	f7ed fff1 	bl	8000bd8 <__aeabi_d2f>
 8012bf6:	ee00 0a10 	vmov	s0, r0
 8012bfa:	e74b      	b.n	8012a94 <iNemo_quat2heading+0x184>
 8012bfc:	f3af 8000 	nop.w
 8012c00:	e0000000 	.word	0xe0000000
 8012c04:	3ff6b851 	.word	0x3ff6b851
 8012c08:	20000000 	.word	0x20000000
 8012c0c:	404ca5dc 	.word	0x404ca5dc
 8012c10:	200013e8 	.word	0x200013e8
 8012c14:	43340000 	.word	0x43340000
 8012c18:	43b40000 	.word	0x43b40000
 8012c1c:	40568000 	.word	0x40568000
 8012c20:	f7ed fc8a 	bl	8000538 <__aeabi_f2d>
 8012c24:	4680      	mov	r8, r0
 8012c26:	ee1a 0a90 	vmov	r0, s21
 8012c2a:	4689      	mov	r9, r1
 8012c2c:	f7ed fc84 	bl	8000538 <__aeabi_f2d>
 8012c30:	a343      	add	r3, pc, #268	; (adr r3, 8012d40 <iNemo_quat2heading+0x430>)
 8012c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c36:	f7ed fcd7 	bl	80005e8 <__aeabi_dmul>
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	460b      	mov	r3, r1
 8012c3e:	4640      	mov	r0, r8
 8012c40:	4649      	mov	r1, r9
 8012c42:	f7ed ff61 	bl	8000b08 <__aeabi_dcmpgt>
 8012c46:	2800      	cmp	r0, #0
 8012c48:	f43f aeba 	beq.w	80129c0 <iNemo_quat2heading+0xb0>
 8012c4c:	ee1b 0a10 	vmov	r0, s22
 8012c50:	f7ed fc72 	bl	8000538 <__aeabi_f2d>
 8012c54:	a33a      	add	r3, pc, #232	; (adr r3, 8012d40 <iNemo_quat2heading+0x430>)
 8012c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5a:	f7ed fcc5 	bl	80005e8 <__aeabi_dmul>
 8012c5e:	4602      	mov	r2, r0
 8012c60:	460b      	mov	r3, r1
 8012c62:	4640      	mov	r0, r8
 8012c64:	4649      	mov	r1, r9
 8012c66:	f7ed ff4f 	bl	8000b08 <__aeabi_dcmpgt>
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	f43f aea8 	beq.w	80129c0 <iNemo_quat2heading+0xb0>
 8012c70:	2303      	movs	r3, #3
 8012c72:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8012c76:	ee68 7a08 	vmul.f32	s15, s16, s16
 8012c7a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8012c7e:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012c82:	eeaa 8a29 	vfma.f32	s16, s20, s19
 8012c86:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012c8a:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8012c8e:	ee17 0a90 	vmov	r0, s15
 8012c92:	f7ed fc51 	bl	8000538 <__aeabi_f2d>
 8012c96:	ee78 7a08 	vadd.f32	s15, s16, s16
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	460b      	mov	r3, r1
 8012c9e:	ee17 0a90 	vmov	r0, s15
 8012ca2:	ec43 2b18 	vmov	d8, r2, r3
 8012ca6:	f7ed fc47 	bl	8000538 <__aeabi_f2d>
 8012caa:	eeb0 1a48 	vmov.f32	s2, s16
 8012cae:	eef0 1a68 	vmov.f32	s3, s17
 8012cb2:	ec41 0b10 	vmov	d0, r0, r1
 8012cb6:	f009 f95d 	bl	801bf74 <atan2>
 8012cba:	a325      	add	r3, pc, #148	; (adr r3, 8012d50 <iNemo_quat2heading+0x440>)
 8012cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc0:	ec51 0b10 	vmov	r0, r1, d0
 8012cc4:	f7ed fc90 	bl	80005e8 <__aeabi_dmul>
 8012cc8:	4b1f      	ldr	r3, [pc, #124]	; (8012d48 <iNemo_quat2heading+0x438>)
 8012cca:	2200      	movs	r2, #0
 8012ccc:	f7ed fad6 	bl	800027c <__adddf3>
 8012cd0:	f7ed ff82 	bl	8000bd8 <__aeabi_d2f>
 8012cd4:	ee00 0a10 	vmov	s0, r0
 8012cd8:	e6dc      	b.n	8012a94 <iNemo_quat2heading+0x184>
 8012cda:	f7ed fc2d 	bl	8000538 <__aeabi_f2d>
 8012cde:	4680      	mov	r8, r0
 8012ce0:	ee19 0a10 	vmov	r0, s18
 8012ce4:	4689      	mov	r9, r1
 8012ce6:	f7ed fc27 	bl	8000538 <__aeabi_f2d>
 8012cea:	a315      	add	r3, pc, #84	; (adr r3, 8012d40 <iNemo_quat2heading+0x430>)
 8012cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf0:	f7ed fc7a 	bl	80005e8 <__aeabi_dmul>
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	460b      	mov	r3, r1
 8012cf8:	4640      	mov	r0, r8
 8012cfa:	4649      	mov	r1, r9
 8012cfc:	f7ed ff04 	bl	8000b08 <__aeabi_dcmpgt>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	f43f ae5d 	beq.w	80129c0 <iNemo_quat2heading+0xb0>
 8012d06:	ee1b 0a10 	vmov	r0, s22
 8012d0a:	f7ed fc15 	bl	8000538 <__aeabi_f2d>
 8012d0e:	a30c      	add	r3, pc, #48	; (adr r3, 8012d40 <iNemo_quat2heading+0x430>)
 8012d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d14:	f7ed fc68 	bl	80005e8 <__aeabi_dmul>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	460b      	mov	r3, r1
 8012d1c:	4640      	mov	r0, r8
 8012d1e:	4649      	mov	r1, r9
 8012d20:	f7ed fef2 	bl	8000b08 <__aeabi_dcmpgt>
 8012d24:	2800      	cmp	r0, #0
 8012d26:	f43f ae4b 	beq.w	80129c0 <iNemo_quat2heading+0xb0>
 8012d2a:	2305      	movs	r3, #5
 8012d2c:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8012d30:	e6fd      	b.n	8012b2e <iNemo_quat2heading+0x21e>
 8012d32:	2304      	movs	r3, #4
 8012d34:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 8012d38:	e6a6      	b.n	8012a88 <iNemo_quat2heading+0x178>
 8012d3a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8012d4c <iNemo_quat2heading+0x43c>
 8012d3e:	e6bb      	b.n	8012ab8 <iNemo_quat2heading+0x1a8>
 8012d40:	e0000000 	.word	0xe0000000
 8012d44:	3ff6b851 	.word	0x3ff6b851
 8012d48:	40568000 	.word	0x40568000
 8012d4c:	00000000 	.word	0x00000000
 8012d50:	20000000 	.word	0x20000000
 8012d54:	404ca5dc 	.word	0x404ca5dc

08012d58 <m_kalman_3gyro.isra.0.constprop.0>:
 8012d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d5c:	4cd4      	ldr	r4, [pc, #848]	; (80130b0 <m_kalman_3gyro.isra.0.constprop.0+0x358>)
 8012d5e:	ed2d 8b10 	vpush	{d8-d15}
 8012d62:	468e      	mov	lr, r1
 8012d64:	4691      	mov	r9, r2
 8012d66:	4680      	mov	r8, r0
 8012d68:	469a      	mov	sl, r3
 8012d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d6c:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 8012d70:	aeb2      	add	r6, sp, #712	; 0x2c8
 8012d72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d7a:	f89d 5690 	ldrb.w	r5, [sp, #1680]	; 0x690
 8012d7e:	9518      	str	r5, [sp, #96]	; 0x60
 8012d80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012d82:	f89d 5694 	ldrb.w	r5, [sp, #1684]	; 0x694
 8012d86:	9509      	str	r5, [sp, #36]	; 0x24
 8012d88:	4625      	mov	r5, r4
 8012d8a:	afbf      	add	r7, sp, #764	; 0x2fc
 8012d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d90:	6033      	str	r3, [r6, #0]
 8012d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d94:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d98:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d9c:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 8012da0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012da2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012da6:	aecc      	add	r6, sp, #816	; 0x330
 8012da8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012daa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012dae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012db0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012db4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012db6:	682a      	ldr	r2, [r5, #0]
 8012db8:	f8dc 3000 	ldr.w	r3, [ip]
 8012dbc:	603a      	str	r2, [r7, #0]
 8012dbe:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8012dc2:	6033      	str	r3, [r6, #0]
 8012dc4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012dc6:	add9      	add	r5, sp, #868	; 0x364
 8012dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012dd0:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8012dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012dd8:	683f      	ldr	r7, [r7, #0]
 8012dda:	602f      	str	r7, [r5, #0]
 8012ddc:	ad94      	add	r5, sp, #592	; 0x250
 8012dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012de0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012de4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012de8:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 8012dec:	e885 0003 	stmia.w	r5, {r0, r1}
 8012df0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012df2:	ad9e      	add	r5, sp, #632	; 0x278
 8012df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012df6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dfa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012dfe:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 8012e02:	e885 0003 	stmia.w	r5, {r0, r1}
 8012e06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012e08:	ada8      	add	r5, sp, #672	; 0x2a0
 8012e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e10:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012e14:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8012e18:	e885 0003 	stmia.w	r5, {r0, r1}
 8012e1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012e1e:	ad59      	add	r5, sp, #356	; 0x164
 8012e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e22:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012e26:	f8dd 66c4 	ldr.w	r6, [sp, #1732]	; 0x6c4
 8012e2a:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 8012e2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012e32:	2500      	movs	r5, #0
 8012e34:	7035      	strb	r5, [r6, #0]
 8012e36:	f8dd 66c8 	ldr.w	r6, [sp, #1736]	; 0x6c8
 8012e3a:	7035      	strb	r5, [r6, #0]
 8012e3c:	f8dd 66cc 	ldr.w	r6, [sp, #1740]	; 0x6cc
 8012e40:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8012e44:	7035      	strb	r5, [r6, #0]
 8012e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e48:	ed9e 8a01 	vldr	s16, [lr, #4]
 8012e4c:	edde ba00 	vldr	s23, [lr]
 8012e50:	ed9e ca02 	vldr	s24, [lr, #8]
 8012e54:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
 8012e58:	ee68 7a08 	vmul.f32	s15, s16, s16
 8012e5c:	ad60      	add	r5, sp, #384	; 0x180
 8012e5e:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8012e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e64:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8012e68:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8012e6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012e70:	ee17 0a90 	vmov	r0, s15
 8012e74:	eeb0 aa61 	vmov.f32	s20, s3
 8012e78:	ed8d 2a39 	vstr	s4, [sp, #228]	; 0xe4
 8012e7c:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 8012e80:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8012e84:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 8012e88:	edcd ba2c 	vstr	s23, [sp, #176]	; 0xb0
 8012e8c:	ed8d ca2e 	vstr	s24, [sp, #184]	; 0xb8
 8012e90:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8012e94:	f8cd a020 	str.w	sl, [sp, #32]
 8012e98:	f7ed fb4e 	bl	8000538 <__aeabi_f2d>
 8012e9c:	ec41 0b10 	vmov	d0, r0, r1
 8012ea0:	f009 f8b2 	bl	801c008 <sqrt>
 8012ea4:	ec51 0b10 	vmov	r0, r1, d0
 8012ea8:	f7ed fe96 	bl	8000bd8 <__aeabi_d2f>
 8012eac:	ed99 9a01 	vldr	s18, [r9, #4]
 8012eb0:	edd9 9a00 	vldr	s19, [r9]
 8012eb4:	edd9 8a02 	vldr	s17, [r9, #8]
 8012eb8:	4b7e      	ldr	r3, [pc, #504]	; (80130b4 <m_kalman_3gyro.isra.0.constprop.0+0x35c>)
 8012eba:	ee69 7a09 	vmul.f32	s15, s18, s18
 8012ebe:	f8c3 019c 	str.w	r0, [r3, #412]	; 0x19c
 8012ec2:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012ec6:	4644      	mov	r4, r8
 8012ec8:	ee0c 0a90 	vmov	s25, r0
 8012ecc:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8012ed0:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8012ed4:	ee17 0a90 	vmov	r0, s15
 8012ed8:	f7ed fb2e 	bl	8000538 <__aeabi_f2d>
 8012edc:	ec41 0b10 	vmov	d0, r0, r1
 8012ee0:	f009 f892 	bl	801c008 <sqrt>
 8012ee4:	ec51 0b10 	vmov	r0, r1, d0
 8012ee8:	f7ed fe76 	bl	8000bd8 <__aeabi_d2f>
 8012eec:	ee0a 0a90 	vmov	s21, r0
 8012ef0:	eecb da2c 	vdiv.f32	s27, s22, s25
 8012ef4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8012ef8:	ab56      	add	r3, sp, #344	; 0x158
 8012efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012efe:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012f02:	f893 58cd 	ldrb.w	r5, [r3, #2253]	; 0x8cd
 8012f06:	eecb 7a2a 	vdiv.f32	s15, s22, s21
 8012f0a:	ee2d ea88 	vmul.f32	s28, s27, s16
 8012f0e:	ee27 9a89 	vmul.f32	s18, s15, s18
 8012f12:	eeb0 7a48 	vmov.f32	s14, s16
 8012f16:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8012f1a:	ee2b 8aad 	vmul.f32	s16, s23, s27
 8012f1e:	ee2e da09 	vmul.f32	s26, s28, s18
 8012f22:	ee6d da8c 	vmul.f32	s27, s27, s24
 8012f26:	eea8 da29 	vfma.f32	s26, s16, s19
 8012f2a:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8012f2e:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 8012f32:	eea8 daad 	vfma.f32	s26, s17, s27
 8012f36:	ed8d ea3e 	vstr	s28, [sp, #248]	; 0xf8
 8012f3a:	edcd da3f 	vstr	s27, [sp, #252]	; 0xfc
 8012f3e:	edcd ba53 	vstr	s23, [sp, #332]	; 0x14c
 8012f42:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 8012f46:	ed8d ca55 	vstr	s24, [sp, #340]	; 0x154
 8012f4a:	2d00      	cmp	r5, #0
 8012f4c:	f001 8116 	beq.w	801417c <m_kalman_3gyro.isra.0.constprop.0+0x1424>
 8012f50:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 8012f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012f58:	f7ed fe3e 	bl	8000bd8 <__aeabi_d2f>
 8012f5c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012f60:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80130b8 <m_kalman_3gyro.isra.0.constprop.0+0x360>
 8012f64:	f503 7817 	add.w	r8, r3, #604	; 0x25c
 8012f68:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8012f6c:	9310      	str	r3, [sp, #64]	; 0x40
 8012f6e:	ab43      	add	r3, sp, #268	; 0x10c
 8012f70:	9307      	str	r3, [sp, #28]
 8012f72:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012f76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012f7a:	9321      	str	r3, [sp, #132]	; 0x84
 8012f7c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012f80:	f503 6a81 	add.w	sl, r3, #1032	; 0x408
 8012f84:	f203 4b0c 	addw	fp, r3, #1036	; 0x40c
 8012f88:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012f8c:	933a      	str	r3, [sp, #232]	; 0xe8
 8012f8e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012f92:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012f96:	9334      	str	r3, [sp, #208]	; 0xd0
 8012f98:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012f9c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8012fa0:	932b      	str	r3, [sp, #172]	; 0xac
 8012fa2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012fa6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8012faa:	9335      	str	r3, [sp, #212]	; 0xd4
 8012fac:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012fb0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8012fb4:	9336      	str	r3, [sp, #216]	; 0xd8
 8012fb6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012fba:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8012fbe:	9337      	str	r3, [sp, #220]	; 0xdc
 8012fc0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012fc4:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8012fc8:	9338      	str	r3, [sp, #224]	; 0xe0
 8012fca:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012fce:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8012fd2:	931e      	str	r3, [sp, #120]	; 0x78
 8012fd4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012fd8:	f203 4334 	addw	r3, r3, #1076	; 0x434
 8012fdc:	931f      	str	r3, [sp, #124]	; 0x7c
 8012fde:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012fe2:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8012fe6:	9330      	str	r3, [sp, #192]	; 0xc0
 8012fe8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012fec:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8012ff0:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ff2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8012ff6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012ffa:	9312      	str	r3, [sp, #72]	; 0x48
 8012ffc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013000:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8013004:	9320      	str	r3, [sp, #128]	; 0x80
 8013006:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801300a:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 801300e:	ee0b 0a10 	vmov	s22, r0
 8013012:	9319      	str	r3, [sp, #100]	; 0x64
 8013014:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013018:	ee2b 7a07 	vmul.f32	s14, s22, s14
 801301c:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8013020:	931a      	str	r3, [sp, #104]	; 0x68
 8013022:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013026:	eddf 4a25 	vldr	s9, [pc, #148]	; 80130bc <m_kalman_3gyro.isra.0.constprop.0+0x364>
 801302a:	ed9f 5a25 	vldr	s10, [pc, #148]	; 80130c0 <m_kalman_3gyro.isra.0.constprop.0+0x368>
 801302e:	eddf 5a25 	vldr	s11, [pc, #148]	; 80130c4 <m_kalman_3gyro.isra.0.constprop.0+0x36c>
 8013032:	ed9f 6a25 	vldr	s12, [pc, #148]	; 80130c8 <m_kalman_3gyro.isra.0.constprop.0+0x370>
 8013036:	f203 4384 	addw	r3, r3, #1156	; 0x484
 801303a:	edd3 6a00 	vldr	s13, [r3]
 801303e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013040:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013044:	edd3 7a00 	vldr	s15, [r3]
 8013048:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801304c:	eee7 6a85 	vfma.f32	s13, s15, s10
 8013050:	f203 46cc 	addw	r6, r3, #1228	; 0x4cc
 8013054:	f503 659e 	add.w	r5, r3, #1264	; 0x4f0
 8013058:	ed96 4a00 	vldr	s8, [r6]
 801305c:	edd5 7a00 	vldr	s15, [r5]
 8013060:	eee4 6a25 	vfma.f32	s13, s8, s11
 8013064:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 8013068:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801306c:	ed95 3b00 	vldr	d3, [r5]
 8013070:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8013074:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013078:	f204 4764 	addw	r7, r4, #1124	; 0x464
 801307c:	f504 6691 	add.w	r6, r4, #1160	; 0x488
 8013080:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
 8013084:	f504 659a 	add.w	r5, r4, #1232	; 0x4d0
 8013088:	f204 4cf4 	addw	ip, r4, #1268	; 0x4f4
 801308c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801308e:	9731      	str	r7, [sp, #196]	; 0xc4
 8013090:	ed84 7a00 	vstr	s14, [r4]
 8013094:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8013098:	edc4 6af8 	vstr	s13, [r4, #992]	; 0x3e0
 801309c:	edd6 7a00 	vldr	s15, [r6]
 80130a0:	edd7 3a00 	vldr	s7, [r7]
 80130a4:	ed95 4a00 	vldr	s8, [r5]
 80130a8:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 80130ac:	e00e      	b.n	80130cc <m_kalman_3gyro.isra.0.constprop.0+0x374>
 80130ae:	bf00      	nop
 80130b0:	0801dcf0 	.word	0x0801dcf0
 80130b4:	200013e8 	.word	0x200013e8
 80130b8:	3ca3d70a 	.word	0x3ca3d70a
 80130bc:	bdcccccd 	.word	0xbdcccccd
 80130c0:	be4ccccd 	.word	0xbe4ccccd
 80130c4:	3dcccccd 	.word	0x3dcccccd
 80130c8:	3e4ccccd 	.word	0x3e4ccccd
 80130cc:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 80130d0:	ed9c 7a00 	vldr	s14, [ip]
 80130d4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80130d8:	f204 478c 	addw	r7, r4, #1164	; 0x48c
 80130dc:	eee3 7a85 	vfma.f32	s15, s7, s10
 80130e0:	f504 648d 	add.w	r4, r4, #1128	; 0x468
 80130e4:	941b      	str	r4, [sp, #108]	; 0x6c
 80130e6:	f505 649f 	add.w	r4, r5, #1272	; 0x4f8
 80130ea:	eee4 7a25 	vfma.f32	s15, s8, s11
 80130ee:	f205 46d4 	addw	r6, r5, #1236	; 0x4d4
 80130f2:	9400      	str	r4, [sp, #0]
 80130f4:	f505 6492 	add.w	r4, r5, #1168	; 0x490
 80130f8:	f205 456c 	addw	r5, r5, #1132	; 0x46c
 80130fc:	951c      	str	r5, [sp, #112]	; 0x70
 80130fe:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 8013102:	eee7 7a06 	vfma.f32	s15, s14, s12
 8013106:	f205 4efc 	addw	lr, r5, #1276	; 0x4fc
 801310a:	f505 6c9b 	add.w	ip, r5, #1240	; 0x4d8
 801310e:	f205 4994 	addw	r9, r5, #1172	; 0x494
 8013112:	f505 658e 	add.w	r5, r5, #1136	; 0x470
 8013116:	951d      	str	r5, [sp, #116]	; 0x74
 8013118:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 801311c:	edc5 7af9 	vstr	s15, [r5, #996]	; 0x3e4
 8013120:	ed97 7a00 	vldr	s14, [r7]
 8013124:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8013126:	ed96 4a00 	vldr	s8, [r6]
 801312a:	edd7 3a00 	vldr	s7, [r7]
 801312e:	9f07      	ldr	r7, [sp, #28]
 8013130:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013134:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013138:	eea3 7a85 	vfma.f32	s14, s7, s10
 801313c:	f505 6293 	add.w	r2, r5, #1176	; 0x498
 8013140:	f205 46dc 	addw	r6, r5, #1244	; 0x4dc
 8013144:	f505 63a0 	add.w	r3, r5, #1280	; 0x500
 8013148:	eea4 7a25 	vfma.f32	s14, s8, s11
 801314c:	9d00      	ldr	r5, [sp, #0]
 801314e:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8013152:	ed95 4a00 	vldr	s8, [r5]
 8013156:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 801315a:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801315e:	eea4 7a06 	vfma.f32	s14, s8, s12
 8013162:	f201 4774 	addw	r7, r1, #1140	; 0x474
 8013166:	9732      	str	r7, [sp, #200]	; 0xc8
 8013168:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 801316c:	ed85 7afa 	vstr	s14, [r5, #1000]	; 0x3e8
 8013170:	ed94 4a00 	vldr	s8, [r4]
 8013174:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8013178:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801317a:	f204 449c 	addw	r4, r4, #1180	; 0x49c
 801317e:	9423      	str	r4, [sp, #140]	; 0x8c
 8013180:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8013184:	edd5 3a00 	vldr	s7, [r5]
 8013188:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 801318c:	ee24 4a24 	vmul.f32	s8, s8, s9
 8013190:	f504 648f 	add.w	r4, r4, #1144	; 0x478
 8013194:	9413      	str	r4, [sp, #76]	; 0x4c
 8013196:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 801319a:	eea3 4a85 	vfma.f32	s8, s7, s10
 801319e:	f204 44e4 	addw	r4, r4, #1252	; 0x4e4
 80131a2:	9426      	str	r4, [sp, #152]	; 0x98
 80131a4:	eddc 3a00 	vldr	s7, [ip]
 80131a8:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 80131ac:	f505 6ca1 	add.w	ip, r5, #1288	; 0x508
 80131b0:	eea3 4aa5 	vfma.f32	s8, s7, s11
 80131b4:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 80131b8:	f504 6c94 	add.w	ip, r4, #1184	; 0x4a0
 80131bc:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 80131c0:	edde 3a00 	vldr	s7, [lr]
 80131c4:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 80131c8:	f204 4c7c 	addw	ip, r4, #1148	; 0x47c
 80131cc:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 80131d0:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 80131d4:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 80131d8:	eea3 4a86 	vfma.f32	s8, s7, s12
 80131dc:	f505 6c9d 	add.w	ip, r5, #1256	; 0x4e8
 80131e0:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
 80131e4:	f204 5c0c 	addw	ip, r4, #1292	; 0x50c
 80131e8:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 80131ec:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80131ee:	ed84 4afb 	vstr	s8, [r4, #1004]	; 0x3ec
 80131f2:	ed99 4a00 	vldr	s8, [r9]
 80131f6:	edd5 3a00 	vldr	s7, [r5]
 80131fa:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
 80131fe:	ee24 4a24 	vmul.f32	s8, s8, s9
 8013202:	f200 5004 	addw	r0, r0, #1284	; 0x504
 8013206:	eea3 4a85 	vfma.f32	s8, s7, s10
 801320a:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 801320e:	edd6 3a00 	vldr	s7, [r6]
 8013212:	f8dd 66d0 	ldr.w	r6, [sp, #1744]	; 0x6d0
 8013216:	eea3 4aa5 	vfma.f32	s8, s7, s11
 801321a:	f204 4ca4 	addw	ip, r4, #1188	; 0x4a4
 801321e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
 8013222:	edd3 3a00 	vldr	s7, [r3]
 8013226:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801322a:	eea3 4a86 	vfma.f32	s8, s7, s12
 801322e:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 8013232:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 8013236:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 801323a:	ed83 4afc 	vstr	s8, [r3, #1008]	; 0x3f0
 801323e:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8013242:	edd2 7a00 	vldr	s15, [r2]
 8013246:	ed97 4a00 	vldr	s8, [r7]
 801324a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801324e:	eee6 3aa6 	vfma.f32	s7, s13, s13
 8013252:	f205 4cec 	addw	ip, r5, #1260	; 0x4ec
 8013256:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
 801325a:	eee4 7a05 	vfma.f32	s15, s8, s10
 801325e:	46a4      	mov	ip, r4
 8013260:	f50c 7c0e 	add.w	ip, ip, #568	; 0x238
 8013264:	eef0 6a63 	vmov.f32	s13, s7
 8013268:	edd1 3a00 	vldr	s7, [r1]
 801326c:	ed90 4a00 	vldr	s8, [r0]
 8013270:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8013274:	eee3 7aa5 	vfma.f32	s15, s7, s11
 8013278:	469c      	mov	ip, r3
 801327a:	f503 7705 	add.w	r7, r3, #532	; 0x214
 801327e:	eee7 6a07 	vfma.f32	s13, s14, s14
 8013282:	f506 66a2 	add.w	r6, r6, #1296	; 0x510
 8013286:	963b      	str	r6, [sp, #236]	; 0xec
 8013288:	eee4 7a06 	vfma.f32	s15, s8, s12
 801328c:	9733      	str	r7, [sp, #204]	; 0xcc
 801328e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8013292:	ee16 0a90 	vmov	r0, s13
 8013296:	edc3 7afd 	vstr	s15, [r3, #1012]	; 0x3f4
 801329a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801329c:	edd3 7a00 	vldr	s15, [r3]
 80132a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80132a2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80132a6:	ed93 4a00 	vldr	s8, [r3]
 80132aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80132ac:	eee4 7a05 	vfma.f32	s15, s8, s10
 80132b0:	edd3 6a00 	vldr	s13, [r3]
 80132b4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80132b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80132b8:	ed95 7a00 	vldr	s14, [r5]
 80132bc:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80132be:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80132c2:	ee2e ca68 	vnmul.f32	s24, s28, s17
 80132c6:	eee7 7a06 	vfma.f32	s15, s14, s12
 80132ca:	eea9 ca2d 	vfma.f32	s24, s18, s27
 80132ce:	edcc 7afe 	vstr	s15, [ip, #1016]	; 0x3f8
 80132d2:	edd3 7a00 	vldr	s15, [r3]
 80132d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80132d8:	edd5 6a00 	vldr	s13, [r5]
 80132dc:	ed93 4a00 	vldr	s8, [r3]
 80132e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80132e2:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80132e4:	ed93 7a00 	vldr	s14, [r3]
 80132e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132ea:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80132ee:	eee4 7a05 	vfma.f32	s15, s8, s10
 80132f2:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80132f6:	eee7 7a06 	vfma.f32	s15, s14, s12
 80132fa:	edcc 7aff 	vstr	s15, [ip, #1020]	; 0x3fc
 80132fe:	edd5 ba00 	vldr	s23, [r5]
 8013302:	edd3 6a00 	vldr	s13, [r3]
 8013306:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8013308:	edd6 7a00 	vldr	s15, [r6]
 801330c:	ed95 7a00 	vldr	s14, [r5]
 8013310:	ee6b baa4 	vmul.f32	s23, s23, s9
 8013314:	eee6 ba85 	vfma.f32	s23, s13, s10
 8013318:	eee7 ba25 	vfma.f32	s23, s14, s11
 801331c:	eee7 ba86 	vfma.f32	s23, s15, s12
 8013320:	edc4 ba00 	vstr	s23, [r4]
 8013324:	f7ed f908 	bl	8000538 <__aeabi_f2d>
 8013328:	ec41 0b10 	vmov	d0, r0, r1
 801332c:	f008 fe6c 	bl	801c008 <sqrt>
 8013330:	ec51 0b10 	vmov	r0, r1, d0
 8013334:	f7ed fc50 	bl	8000bd8 <__aeabi_d2f>
 8013338:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801333c:	4cb4      	ldr	r4, [pc, #720]	; (8013610 <m_kalman_3gyro.isra.0.constprop.0+0x8b8>)
 801333e:	edd2 7afc 	vldr	s15, [r2, #1008]	; 0x3f0
 8013342:	edd2 6afb 	vldr	s13, [r2, #1004]	; 0x3ec
 8013346:	ed92 7afd 	vldr	s14, [r2, #1012]	; 0x3f4
 801334a:	900c      	str	r0, [sp, #48]	; 0x30
 801334c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013350:	ee0e 0a90 	vmov	s29, r0
 8013354:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013358:	f8c4 01a0 	str.w	r0, [r4, #416]	; 0x1a0
 801335c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013360:	ee17 0a90 	vmov	r0, s15
 8013364:	f7ed f8e8 	bl	8000538 <__aeabi_f2d>
 8013368:	ec41 0b10 	vmov	d0, r0, r1
 801336c:	f008 fe4c 	bl	801c008 <sqrt>
 8013370:	ec51 0b10 	vmov	r0, r1, d0
 8013374:	f7ed fc30 	bl	8000bd8 <__aeabi_d2f>
 8013378:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801337c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
 8013380:	edd2 7aff 	vldr	s15, [r2, #1020]	; 0x3fc
 8013384:	ed92 7afe 	vldr	s14, [r2, #1016]	; 0x3f8
 8013388:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801338c:	ee0f 0a90 	vmov	s31, r0
 8013390:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013394:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8013398:	ee6d bae9 	vnmul.f32	s23, s27, s19
 801339c:	ee17 0a90 	vmov	r0, s15
 80133a0:	f7ed f8ca 	bl	8000538 <__aeabi_f2d>
 80133a4:	ec41 0b10 	vmov	d0, r0, r1
 80133a8:	f008 fe2e 	bl	801c008 <sqrt>
 80133ac:	eee8 ba88 	vfma.f32	s23, s17, s16
 80133b0:	ec51 0b10 	vmov	r0, r1, d0
 80133b4:	f7ed fc10 	bl	8000bd8 <__aeabi_d2f>
 80133b8:	ee29 8a48 	vnmul.f32	s16, s18, s16
 80133bc:	ee6b 7aab 	vmul.f32	s15, s23, s23
 80133c0:	eeae 8a29 	vfma.f32	s16, s28, s19
 80133c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80133c6:	9017      	str	r0, [sp, #92]	; 0x5c
 80133c8:	eeec 7a0c 	vfma.f32	s15, s24, s24
 80133cc:	ee07 0a10 	vmov	s14, r0
 80133d0:	eee8 7a08 	vfma.f32	s15, s16, s16
 80133d4:	edc2 ea00 	vstr	s29, [r2]
 80133d8:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80133dc:	edca fa00 	vstr	s31, [sl]
 80133e0:	ee17 0a90 	vmov	r0, s15
 80133e4:	ed8b 7a00 	vstr	s14, [fp]
 80133e8:	ed84 7a6a 	vstr	s14, [r4, #424]	; 0x1a8
 80133ec:	edc2 9a90 	vstr	s19, [r2, #576]	; 0x240
 80133f0:	ed82 9a93 	vstr	s18, [r2, #588]	; 0x24c
 80133f4:	edc2 8a96 	vstr	s17, [r2, #600]	; 0x258
 80133f8:	f7ed f89e 	bl	8000538 <__aeabi_f2d>
 80133fc:	ec41 0b10 	vmov	d0, r0, r1
 8013400:	f008 fe02 	bl	801c008 <sqrt>
 8013404:	ec51 0b10 	vmov	r0, r1, d0
 8013408:	f7ed fbe6 	bl	8000bd8 <__aeabi_d2f>
 801340c:	ee07 0a90 	vmov	s15, r0
 8013410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013414:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8013418:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801341c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801341e:	aa79      	add	r2, sp, #484	; 0x1e4
 8013420:	4638      	mov	r0, r7
 8013422:	ee2c ca27 	vmul.f32	s24, s24, s15
 8013426:	ee6b baa7 	vmul.f32	s23, s23, s15
 801342a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801342e:	ee6c ea68 	vnmul.f32	s29, s24, s17
 8013432:	ee28 fa49 	vnmul.f32	s30, s16, s18
 8013436:	ee2b eae9 	vnmul.f32	s28, s23, s19
 801343a:	eea8 faab 	vfma.f32	s30, s17, s23
 801343e:	eee9 ea88 	vfma.f32	s29, s19, s16
 8013442:	eea9 ea0c 	vfma.f32	s28, s18, s24
 8013446:	ed83 ca8f 	vstr	s24, [r3, #572]	; 0x23c
 801344a:	edc3 ba92 	vstr	s23, [r3, #584]	; 0x248
 801344e:	ed83 8a95 	vstr	s16, [r3, #596]	; 0x254
 8013452:	ed83 fa8e 	vstr	s30, [r3, #568]	; 0x238
 8013456:	edc3 ea91 	vstr	s29, [r3, #580]	; 0x244
 801345a:	ed83 ea94 	vstr	s28, [r3, #592]	; 0x250
 801345e:	f7fd f9d7 	bl	8010810 <m_mldivide>
 8013462:	a879      	add	r0, sp, #484	; 0x1e4
 8013464:	a947      	add	r1, sp, #284	; 0x11c
 8013466:	f7fd ffe7 	bl	8011438 <m_dcm2q_eml>
 801346a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801346e:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 8013472:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 8013476:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 801347a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 801347e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8013482:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 8013486:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 801348a:	3b0c      	subs	r3, #12
 801348c:	4298      	cmp	r0, r3
 801348e:	d1f0      	bne.n	8013472 <m_kalman_3gyro.isra.0.constprop.0+0x71a>
 8013490:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013494:	ee87 6a8a 	vdiv.f32	s12, s15, s20
 8013498:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801349c:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
 80134a0:	ac40      	add	r4, sp, #256	; 0x100
 80134a2:	f508 72ae 	add.w	r2, r8, #348	; 0x15c
 80134a6:	4641      	mov	r1, r8
 80134a8:	2000      	movs	r0, #0
 80134aa:	eddd 6a47 	vldr	s13, [sp, #284]	; 0x11c
 80134ae:	ed9d 7a48 	vldr	s14, [sp, #288]	; 0x120
 80134b2:	eddd 7a49 	vldr	s15, [sp, #292]	; 0x124
 80134b6:	eddf 5a57 	vldr	s11, [pc, #348]	; 8013614 <m_kalman_3gyro.isra.0.constprop.0+0x8bc>
 80134ba:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80134be:	ee37 7a07 	vadd.f32	s14, s14, s14
 80134c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80134c6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80134ca:	ee27 7a06 	vmul.f32	s14, s14, s12
 80134ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 80134d2:	ed9f 6a51 	vldr	s12, [pc, #324]	; 8013618 <m_kalman_3gyro.isra.0.constprop.0+0x8c0>
 80134d6:	edc3 6a97 	vstr	s13, [r3, #604]	; 0x25c
 80134da:	ed83 7a98 	vstr	s14, [r3, #608]	; 0x260
 80134de:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
 80134e2:	edd1 6a00 	vldr	s13, [r1]
 80134e6:	3001      	adds	r0, #1
 80134e8:	eef0 7a66 	vmov.f32	s15, s13
 80134ec:	460b      	mov	r3, r1
 80134ee:	330c      	adds	r3, #12
 80134f0:	ed93 7a00 	vldr	s14, [r3]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80134fa:	d1f8      	bne.n	80134ee <m_kalman_3gyro.isra.0.constprop.0+0x796>
 80134fc:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8013500:	460b      	mov	r3, r1
 8013502:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013506:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801350a:	edd3 7a03 	vldr	s15, [r3, #12]
 801350e:	330c      	adds	r3, #12
 8013510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013514:	4293      	cmp	r3, r2
 8013516:	eee7 6aa7 	vfma.f32	s13, s15, s15
 801351a:	d1f6      	bne.n	801350a <m_kalman_3gyro.isra.0.constprop.0+0x7b2>
 801351c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013520:	2803      	cmp	r0, #3
 8013522:	f101 0104 	add.w	r1, r1, #4
 8013526:	ece4 6a01 	vstmia	r4!, {s13}
 801352a:	f103 0204 	add.w	r2, r3, #4
 801352e:	d1d8      	bne.n	80134e2 <m_kalman_3gyro.isra.0.constprop.0+0x78a>
 8013530:	9840      	ldr	r0, [sp, #256]	; 0x100
 8013532:	f7ed f801 	bl	8000538 <__aeabi_f2d>
 8013536:	ec41 0b10 	vmov	d0, r0, r1
 801353a:	f008 fd65 	bl	801c008 <sqrt>
 801353e:	ec51 0b10 	vmov	r0, r1, d0
 8013542:	f7ed fb49 	bl	8000bd8 <__aeabi_d2f>
 8013546:	ee0d 0a90 	vmov	s27, r0
 801354a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801354c:	edcd da40 	vstr	s27, [sp, #256]	; 0x100
 8013550:	f7ec fff2 	bl	8000538 <__aeabi_f2d>
 8013554:	ec41 0b10 	vmov	d0, r0, r1
 8013558:	f008 fd56 	bl	801c008 <sqrt>
 801355c:	ec51 0b10 	vmov	r0, r1, d0
 8013560:	f7ed fb3a 	bl	8000bd8 <__aeabi_d2f>
 8013564:	ee0a 0a10 	vmov	s20, r0
 8013568:	9842      	ldr	r0, [sp, #264]	; 0x108
 801356a:	ed8d aa41 	vstr	s20, [sp, #260]	; 0x104
 801356e:	f7ec ffe3 	bl	8000538 <__aeabi_f2d>
 8013572:	ec41 0b10 	vmov	d0, r0, r1
 8013576:	f008 fd47 	bl	801c008 <sqrt>
 801357a:	ee2a aa0a 	vmul.f32	s20, s20, s20
 801357e:	ec51 0b10 	vmov	r0, r1, d0
 8013582:	f7ed fb29 	bl	8000bd8 <__aeabi_d2f>
 8013586:	eead aaad 	vfma.f32	s20, s27, s27
 801358a:	9042      	str	r0, [sp, #264]	; 0x108
 801358c:	f8cd 8010 	str.w	r8, [sp, #16]
 8013590:	ee07 0a90 	vmov	s15, r0
 8013594:	eea7 aaa7 	vfma.f32	s20, s15, s15
 8013598:	f20d 4adc 	addw	sl, sp, #1244	; 0x4dc
 801359c:	f50d 7b66 	add.w	fp, sp, #920	; 0x398
 80135a0:	ee1a 0a10 	vmov	r0, s20
 80135a4:	f7ec ffc8 	bl	8000538 <__aeabi_f2d>
 80135a8:	ec41 0b10 	vmov	d0, r0, r1
 80135ac:	f008 fd2c 	bl	801c008 <sqrt>
 80135b0:	ec51 0b10 	vmov	r0, r1, d0
 80135b4:	f7ed fb10 	bl	8000bd8 <__aeabi_d2f>
 80135b8:	4b15      	ldr	r3, [pc, #84]	; (8013610 <m_kalman_3gyro.isra.0.constprop.0+0x8b8>)
 80135ba:	ed93 aa27 	vldr	s20, [r3, #156]	; 0x9c
 80135be:	edd3 da28 	vldr	s27, [r3, #160]	; 0xa0
 80135c2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80135c6:	f8c3 03c4 	str.w	r0, [r3, #964]	; 0x3c4
 80135ca:	f20d 3397 	addw	r3, sp, #919	; 0x397
 80135ce:	f1c3 0301 	rsb	r3, r3, #1
 80135d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80135d4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80135d8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80135dc:	9306      	str	r3, [sp, #24]
 80135de:	2300      	movs	r3, #0
 80135e0:	9305      	str	r3, [sp, #20]
 80135e2:	9b05      	ldr	r3, [sp, #20]
 80135e4:	9a04      	ldr	r2, [sp, #16]
 80135e6:	3301      	adds	r3, #1
 80135e8:	9305      	str	r3, [sp, #20]
 80135ea:	4653      	mov	r3, sl
 80135ec:	f852 1b0c 	ldr.w	r1, [r2], #12
 80135f0:	f843 1b04 	str.w	r1, [r3], #4
 80135f4:	f20d 5154 	addw	r1, sp, #1364	; 0x554
 80135f8:	428b      	cmp	r3, r1
 80135fa:	d1f7      	bne.n	80135ec <m_kalman_3gyro.isra.0.constprop.0+0x894>
 80135fc:	2101      	movs	r1, #1
 80135fe:	221e      	movs	r2, #30
 8013600:	a88b      	add	r0, sp, #556	; 0x22c
 8013602:	f007 feab 	bl	801b35c <memset>
 8013606:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013608:	f20d 3397 	addw	r3, sp, #919	; 0x397
 801360c:	e00a      	b.n	8013624 <m_kalman_3gyro.isra.0.constprop.0+0x8cc>
 801360e:	bf00      	nop
 8013610:	200013e8 	.word	0x200013e8
 8013614:	3d088889 	.word	0x3d088889
 8013618:	3d0d3dcb 	.word	0x3d0d3dcb
 801361c:	3f333333 	.word	0x3f333333
 8013620:	3f4ccccd 	.word	0x3f4ccccd
 8013624:	18ca      	adds	r2, r1, r3
 8013626:	f803 2f01 	strb.w	r2, [r3, #1]!
 801362a:	f20d 32b5 	addw	r2, sp, #949	; 0x3b5
 801362e:	4293      	cmp	r3, r2
 8013630:	d1f8      	bne.n	8013624 <m_kalman_3gyro.isra.0.constprop.0+0x8cc>
 8013632:	ed9a 7a00 	vldr	s14, [sl]
 8013636:	edda 7a01 	vldr	s15, [sl, #4]
 801363a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801363e:	ed9a 7a02 	vldr	s14, [sl, #8]
 8013642:	edda 7a03 	vldr	s15, [sl, #12]
 8013646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801364a:	bf88      	it	hi
 801364c:	f44f 7381 	movhi.w	r3, #258	; 0x102
 8013650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013654:	ed9a 7a04 	vldr	s14, [sl, #16]
 8013658:	edda 7a05 	vldr	s15, [sl, #20]
 801365c:	bf88      	it	hi
 801365e:	f8ab 3000 	strhhi.w	r3, [fp]
 8013662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013666:	bf88      	it	hi
 8013668:	f44f 7341 	movhi.w	r3, #772	; 0x304
 801366c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013670:	ed9a 7a06 	vldr	s14, [sl, #24]
 8013674:	edda 7a07 	vldr	s15, [sl, #28]
 8013678:	bf88      	it	hi
 801367a:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 801367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013682:	bf88      	it	hi
 8013684:	f240 5306 	movwhi	r3, #1286	; 0x506
 8013688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801368c:	ed9a 7a08 	vldr	s14, [sl, #32]
 8013690:	edda 7a09 	vldr	s15, [sl, #36]	; 0x24
 8013694:	bf88      	it	hi
 8013696:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 801369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369e:	bf88      	it	hi
 80136a0:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 80136a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136a8:	ed9a 7a0a 	vldr	s14, [sl, #40]	; 0x28
 80136ac:	edda 7a0b 	vldr	s15, [sl, #44]	; 0x2c
 80136b0:	bf88      	it	hi
 80136b2:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 80136b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ba:	bf88      	it	hi
 80136bc:	f640 130a 	movwhi	r3, #2314	; 0x90a
 80136c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136c4:	ed9a 7a0c 	vldr	s14, [sl, #48]	; 0x30
 80136c8:	edda 7a0d 	vldr	s15, [sl, #52]	; 0x34
 80136cc:	bf88      	it	hi
 80136ce:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 80136d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d6:	bf88      	it	hi
 80136d8:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 80136dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136e0:	ed9a 7a0e 	vldr	s14, [sl, #56]	; 0x38
 80136e4:	edda 7a0f 	vldr	s15, [sl, #60]	; 0x3c
 80136e8:	bf88      	it	hi
 80136ea:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 80136ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f2:	bf88      	it	hi
 80136f4:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 80136f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136fc:	ed9a 7a10 	vldr	s14, [sl, #64]	; 0x40
 8013700:	edda 7a11 	vldr	s15, [sl, #68]	; 0x44
 8013704:	bf88      	it	hi
 8013706:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 801370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801370e:	bf88      	it	hi
 8013710:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8013714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013718:	ed9a 7a12 	vldr	s14, [sl, #72]	; 0x48
 801371c:	edda 7a13 	vldr	s15, [sl, #76]	; 0x4c
 8013720:	bf88      	it	hi
 8013722:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 8013726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801372a:	bf88      	it	hi
 801372c:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8013730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013734:	ed9a 7a14 	vldr	s14, [sl, #80]	; 0x50
 8013738:	edda 7a15 	vldr	s15, [sl, #84]	; 0x54
 801373c:	bf88      	it	hi
 801373e:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8013742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013746:	bf88      	it	hi
 8013748:	f241 3314 	movwhi	r3, #4884	; 0x1314
 801374c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013750:	bf88      	it	hi
 8013752:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 8013756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801375a:	bf84      	itt	hi
 801375c:	f241 5316 	movwhi	r3, #5398	; 0x1516
 8013760:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 8013764:	ed9a 7a16 	vldr	s14, [sl, #88]	; 0x58
 8013768:	edda 7a17 	vldr	s15, [sl, #92]	; 0x5c
 801376c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013770:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 8013774:	edda 7a19 	vldr	s15, [sl, #100]	; 0x64
 8013778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801377c:	bf88      	it	hi
 801377e:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8013782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013786:	ed9a 7a1a 	vldr	s14, [sl, #104]	; 0x68
 801378a:	edda 7a1b 	vldr	s15, [sl, #108]	; 0x6c
 801378e:	bf88      	it	hi
 8013790:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 8013794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013798:	bf88      	it	hi
 801379a:	f641 131a 	movwhi	r3, #6426	; 0x191a
 801379e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137a2:	ed9a 7a1c 	vldr	s14, [sl, #112]	; 0x70
 80137a6:	edda 7a1d 	vldr	s15, [sl, #116]	; 0x74
 80137aa:	bf88      	it	hi
 80137ac:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 80137b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b4:	bf88      	it	hi
 80137b6:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 80137ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137be:	bf88      	it	hi
 80137c0:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 80137c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137c8:	bf84      	itt	hi
 80137ca:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 80137ce:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 80137d2:	2304      	movs	r3, #4
 80137d4:	9303      	str	r3, [sp, #12]
 80137d6:	2302      	movs	r3, #2
 80137d8:	9301      	str	r3, [sp, #4]
 80137da:	9a01      	ldr	r2, [sp, #4]
 80137dc:	9202      	str	r2, [sp, #8]
 80137de:	4613      	mov	r3, r2
 80137e0:	f102 0901 	add.w	r9, r2, #1
 80137e4:	2b1e      	cmp	r3, #30
 80137e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80137ea:	9201      	str	r2, [sp, #4]
 80137ec:	bf18      	it	ne
 80137ee:	2701      	movne	r7, #1
 80137f0:	d050      	beq.n	8013894 <m_kalman_3gyro.isra.0.constprop.0+0xb3c>
 80137f2:	9b01      	ldr	r3, [sp, #4]
 80137f4:	9700      	str	r7, [sp, #0]
 80137f6:	443b      	add	r3, r7
 80137f8:	2b1f      	cmp	r3, #31
 80137fa:	bfa8      	it	ge
 80137fc:	231f      	movge	r3, #31
 80137fe:	463a      	mov	r2, r7
 8013800:	eba3 0802 	sub.w	r8, r3, r2
 8013804:	f1b8 0f00 	cmp.w	r8, #0
 8013808:	461f      	mov	r7, r3
 801380a:	dd3d      	ble.n	8013888 <m_kalman_3gyro.isra.0.constprop.0+0xb30>
 801380c:	4616      	mov	r6, r2
 801380e:	464d      	mov	r5, r9
 8013810:	2401      	movs	r4, #1
 8013812:	e008      	b.n	8013826 <m_kalman_3gyro.isra.0.constprop.0+0xace>
 8013814:	3501      	adds	r5, #1
 8013816:	42af      	cmp	r7, r5
 8013818:	f80c 2c01 	strb.w	r2, [ip, #-1]
 801381c:	f000 8402 	beq.w	8014024 <m_kalman_3gyro.isra.0.constprop.0+0x12cc>
 8013820:	3401      	adds	r4, #1
 8013822:	45a0      	cmp	r8, r4
 8013824:	db29      	blt.n	801387a <m_kalman_3gyro.isra.0.constprop.0+0xb22>
 8013826:	f106 3eff 	add.w	lr, r6, #4294967295
 801382a:	1e69      	subs	r1, r5, #1
 801382c:	f91b 300e 	ldrsb.w	r3, [fp, lr]
 8013830:	f91b 2001 	ldrsb.w	r2, [fp, r1]
 8013834:	eb0a 0c83 	add.w	ip, sl, r3, lsl #2
 8013838:	eb0a 0082 	add.w	r0, sl, r2, lsl #2
 801383c:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8013840:	ed50 7a01 	vldr	s15, [r0, #-4]
 8013844:	a88b      	add	r0, sp, #556	; 0x22c
 8013846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801384a:	eb00 0c04 	add.w	ip, r0, r4
 801384e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013852:	4660      	mov	r0, ip
 8013854:	d8de      	bhi.n	8013814 <m_kalman_3gyro.isra.0.constprop.0+0xabc>
 8013856:	3601      	adds	r6, #1
 8013858:	454e      	cmp	r6, r9
 801385a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801385e:	d1df      	bne.n	8013820 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 8013860:	42bd      	cmp	r5, r7
 8013862:	eba7 0205 	sub.w	r2, r7, r5
 8013866:	4459      	add	r1, fp
 8013868:	dada      	bge.n	8013820 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 801386a:	443c      	add	r4, r7
 801386c:	1b64      	subs	r4, r4, r5
 801386e:	3401      	adds	r4, #1
 8013870:	f007 fd66 	bl	801b340 <memcpy>
 8013874:	45a0      	cmp	r8, r4
 8013876:	463d      	mov	r5, r7
 8013878:	dad5      	bge.n	8013826 <m_kalman_3gyro.isra.0.constprop.0+0xace>
 801387a:	9b00      	ldr	r3, [sp, #0]
 801387c:	1e58      	subs	r0, r3, #1
 801387e:	4458      	add	r0, fp
 8013880:	4642      	mov	r2, r8
 8013882:	a98b      	add	r1, sp, #556	; 0x22c
 8013884:	f007 fd5c 	bl	801b340 <memcpy>
 8013888:	9b02      	ldr	r3, [sp, #8]
 801388a:	eb07 0903 	add.w	r9, r7, r3
 801388e:	f1b9 0f1e 	cmp.w	r9, #30
 8013892:	ddae      	ble.n	80137f2 <m_kalman_3gyro.isra.0.constprop.0+0xa9a>
 8013894:	9b03      	ldr	r3, [sp, #12]
 8013896:	3b01      	subs	r3, #1
 8013898:	9303      	str	r3, [sp, #12]
 801389a:	d19e      	bne.n	80137da <m_kalman_3gyro.isra.0.constprop.0+0xa82>
 801389c:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 80138a0:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 80138a4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80138a8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80138ac:	ed52 7a01 	vldr	s15, [r2, #-4]
 80138b0:	ed13 7a01 	vldr	s14, [r3, #-4]
 80138b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80138b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138bc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80138c0:	bf4c      	ite	mi
 80138c2:	2201      	movmi	r2, #1
 80138c4:	2200      	movpl	r2, #0
 80138c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ca:	bf4c      	ite	mi
 80138cc:	2301      	movmi	r3, #1
 80138ce:	2300      	movpl	r3, #0
 80138d0:	429a      	cmp	r2, r3
 80138d2:	f000 83b5 	beq.w	8014040 <m_kalman_3gyro.isra.0.constprop.0+0x12e8>
 80138d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80138da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80138de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80138e2:	9b06      	ldr	r3, [sp, #24]
 80138e4:	ece3 7a01 	vstmia	r3!, {s15}
 80138e8:	9306      	str	r3, [sp, #24]
 80138ea:	9b04      	ldr	r3, [sp, #16]
 80138ec:	3304      	adds	r3, #4
 80138ee:	9304      	str	r3, [sp, #16]
 80138f0:	9b05      	ldr	r3, [sp, #20]
 80138f2:	2b03      	cmp	r3, #3
 80138f4:	f47f ae75 	bne.w	80135e2 <m_kalman_3gyro.isra.0.constprop.0+0x88a>
 80138f8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80138fc:	ed1f aab9 	vldr	s20, [pc, #-740]	; 801361c <m_kalman_3gyro.isra.0.constprop.0+0x8c4>
 8013900:	edd3 7af3 	vldr	s15, [r3, #972]	; 0x3cc
 8013904:	edd3 6af2 	vldr	s13, [r3, #968]	; 0x3c8
 8013908:	ed93 7af4 	vldr	s14, [r3, #976]	; 0x3d0
 801390c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013910:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013914:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013918:	ee17 0a90 	vmov	r0, s15
 801391c:	f7ec fe0c 	bl	8000538 <__aeabi_f2d>
 8013920:	ec41 0b10 	vmov	d0, r0, r1
 8013924:	f008 fb70 	bl	801c008 <sqrt>
 8013928:	ec51 0b10 	vmov	r0, r1, d0
 801392c:	f7ed f954 	bl	8000bd8 <__aeabi_d2f>
 8013930:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8013934:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8013938:	eddd 4a17 	vldr	s9, [sp, #92]	; 0x5c
 801393c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801393e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013942:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8013946:	ee6f 7aa6 	vmul.f32	s15, s31, s13
 801394a:	ee86 7a07 	vdiv.f32	s14, s12, s14
 801394e:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 8013952:	ed83 7a00 	vstr	s14, [r3]
 8013956:	eec7 5a86 	vdiv.f32	s11, s15, s12
 801395a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801395c:	ee24 5aa6 	vmul.f32	s10, s9, s13
 8013960:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8013964:	edc3 5a00 	vstr	s11, [r3]
 8013968:	ee85 6a06 	vdiv.f32	s12, s10, s12
 801396c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801396e:	ee77 7a25 	vadd.f32	s15, s14, s11
 8013972:	ee0d 0a90 	vmov	s27, r0
 8013976:	ee24 aa8a 	vmul.f32	s20, s9, s20
 801397a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801397e:	eeaf aa87 	vfma.f32	s20, s31, s14
 8013982:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013986:	ee2d 7a87 	vmul.f32	s14, s27, s14
 801398a:	ed83 6a00 	vstr	s12, [r3]
 801398e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013992:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013994:	ed5f 5ade 	vldr	s11, [pc, #-888]	; 8013620 <m_kalman_3gyro.isra.0.constprop.0+0x8c8>
 8013998:	ed83 7a00 	vstr	s14, [r3]
 801399c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80139a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80139a2:	ee2a aa25 	vmul.f32	s20, s20, s11
 80139a6:	edc3 7a00 	vstr	s15, [r3]
 80139aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80139ac:	ed83 aa00 	vstr	s20, [r3]
 80139b0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80139b4:	f893 38ce 	ldrb.w	r3, [r3, #2254]	; 0x8ce
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f000 8360 	beq.w	801407e <m_kalman_3gyro.isra.0.constprop.0+0x1326>
 80139be:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80139c2:	f603 06c4 	addw	r6, r3, #2244	; 0x8c4
 80139c6:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 80139ca:	9300      	str	r3, [sp, #0]
 80139cc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80139d0:	f503 690c 	add.w	r9, r3, #2240	; 0x8c0
 80139d4:	f603 08bc 	addw	r8, r3, #2236	; 0x8bc
 80139d8:	f603 07b8 	addw	r7, r3, #2232	; 0x8b8
 80139dc:	ed96 7a00 	vldr	s14, [r6]
 80139e0:	9b00      	ldr	r3, [sp, #0]
 80139e2:	ed8d 7a05 	vstr	s14, [sp, #20]
 80139e6:	ed83 7a00 	vstr	s14, [r3]
 80139ea:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80139ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80139f2:	f7ed f8f1 	bl	8000bd8 <__aeabi_d2f>
 80139f6:	ed99 6a00 	vldr	s12, [r9]
 80139fa:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80139fe:	ed86 6a00 	vstr	s12, [r6]
 8013a02:	4603      	mov	r3, r0
 8013a04:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
 8013a08:	ed8d 6a04 	vstr	s12, [sp, #16]
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	f7ed f8e3 	bl	8000bd8 <__aeabi_d2f>
 8013a12:	edd8 7a00 	vldr	s15, [r8]
 8013a16:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8013a1a:	edc9 7a00 	vstr	s15, [r9]
 8013a1e:	4603      	mov	r3, r0
 8013a20:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 8013a24:	edcd 7a02 	vstr	s15, [sp, #8]
 8013a28:	9300      	str	r3, [sp, #0]
 8013a2a:	f7ed f8d5 	bl	8000bd8 <__aeabi_d2f>
 8013a2e:	eddd 7a02 	vldr	s15, [sp, #8]
 8013a32:	ed9d 6a04 	vldr	s12, [sp, #16]
 8013a36:	edd7 6a00 	vldr	s13, [r7]
 8013a3a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013a3e:	edc8 6a00 	vstr	s13, [r8]
 8013a42:	ee07 0a10 	vmov	s14, r0
 8013a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a4a:	ed9d 7a00 	vldr	s14, [sp]
 8013a4e:	edcd 6a00 	vstr	s13, [sp]
 8013a52:	eee7 7a06 	vfma.f32	s15, s14, s12
 8013a56:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8013a5a:	edcd 7a02 	vstr	s15, [sp, #8]
 8013a5e:	f7ed f8bb 	bl	8000bd8 <__aeabi_d2f>
 8013a62:	eddd 6a00 	vldr	s13, [sp]
 8013a66:	eddd 7a02 	vldr	s15, [sp, #8]
 8013a6a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013a6e:	ee07 0a10 	vmov	s14, r0
 8013a72:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013a76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8013a7a:	ed9d 7a05 	vldr	s14, [sp, #20]
 8013a7e:	eddd 6a01 	vldr	s13, [sp, #4]
 8013a82:	ed87 aa00 	vstr	s20, [r7]
 8013a86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013a8a:	edcd 7a00 	vstr	s15, [sp]
 8013a8e:	f7ed f8a3 	bl	8000bd8 <__aeabi_d2f>
 8013a92:	eddd 7a00 	vldr	s15, [sp]
 8013a96:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8013a98:	ee07 0a10 	vmov	s14, r0
 8013a9c:	eeea 7a07 	vfma.f32	s15, s20, s14
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	edc1 7a00 	vstr	s15, [r1]
 8013aa8:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 8013aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ab0:	eeb0 aa67 	vmov.f32	s20, s15
 8013ab4:	f7ed f814 	bl	8000ae0 <__aeabi_dcmple>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	f040 84e8 	bne.w	801448e <m_kalman_3gyro.isra.0.constprop.0+0x1736>
 8013abe:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 8013ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ac6:	4bb4      	ldr	r3, [pc, #720]	; (8013d98 <m_kalman_3gyro.isra.0.constprop.0+0x1040>)
 8013ac8:	2200      	movs	r2, #0
 8013aca:	f7ec fff5 	bl	8000ab8 <__aeabi_dcmpeq>
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	f042 8524 	bne.w	801651c <m_kalman_3gyro.isra.0.constprop.0+0x37c4>
 8013ad4:	eddd 6acc 	vldr	s13, [sp, #816]	; 0x330
 8013ad8:	ed9d 7ab3 	vldr	s14, [sp, #716]	; 0x2cc
 8013adc:	eddd 7acd 	vldr	s15, [sp, #820]	; 0x334
 8013ae0:	ed9d 6ab4 	vldr	s12, [sp, #720]	; 0x2d0
 8013ae4:	eddd 5ab2 	vldr	s11, [sp, #712]	; 0x2c8
 8013ae8:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8013aec:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013af0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8013af4:	edcd 6acc 	vstr	s13, [sp, #816]	; 0x330
 8013af8:	ed8d 7ab3 	vstr	s14, [sp, #716]	; 0x2cc
 8013afc:	eddd 6ace 	vldr	s13, [sp, #824]	; 0x338
 8013b00:	ed9d 7ab5 	vldr	s14, [sp, #724]	; 0x2d4
 8013b04:	edcd 7acd 	vstr	s15, [sp, #820]	; 0x334
 8013b08:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8013b0c:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8013b10:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8013b14:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013b18:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8013b1c:	ed8d 6ab4 	vstr	s12, [sp, #720]	; 0x2d0
 8013b20:	edcd 6ace 	vstr	s13, [sp, #824]	; 0x338
 8013b24:	ed9d 6ab6 	vldr	s12, [sp, #728]	; 0x2d8
 8013b28:	eddd 6ad0 	vldr	s13, [sp, #832]	; 0x340
 8013b2c:	ed8d 7ab5 	vstr	s14, [sp, #724]	; 0x2d4
 8013b30:	edcd 7acf 	vstr	s15, [sp, #828]	; 0x33c
 8013b34:	ed9d 7ab7 	vldr	s14, [sp, #732]	; 0x2dc
 8013b38:	eddd 7ad1 	vldr	s15, [sp, #836]	; 0x344
 8013b3c:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8013b40:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8013b44:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013b48:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8013b4c:	ed8d 6ab6 	vstr	s12, [sp, #728]	; 0x2d8
 8013b50:	edcd 6ad0 	vstr	s13, [sp, #832]	; 0x340
 8013b54:	ed9d 6ab8 	vldr	s12, [sp, #736]	; 0x2e0
 8013b58:	eddd 6ad2 	vldr	s13, [sp, #840]	; 0x348
 8013b5c:	ed8d 7ab7 	vstr	s14, [sp, #732]	; 0x2dc
 8013b60:	edcd 7ad1 	vstr	s15, [sp, #836]	; 0x344
 8013b64:	ed9d 7ab9 	vldr	s14, [sp, #740]	; 0x2e4
 8013b68:	eddd 7ad3 	vldr	s15, [sp, #844]	; 0x34c
 8013b6c:	ee65 5a8b 	vmul.f32	s11, s11, s22
 8013b70:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8013b74:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8013b78:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013b7c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8013b80:	ed8d 6ab8 	vstr	s12, [sp, #736]	; 0x2e0
 8013b84:	edcd 6ad2 	vstr	s13, [sp, #840]	; 0x348
 8013b88:	ed8d 7ab9 	vstr	s14, [sp, #740]	; 0x2e4
 8013b8c:	edcd 7ad3 	vstr	s15, [sp, #844]	; 0x34c
 8013b90:	edcd 5ab2 	vstr	s11, [sp, #712]	; 0x2c8
 8013b94:	eddd 5aba 	vldr	s11, [sp, #744]	; 0x2e8
 8013b98:	eddd 7ad4 	vldr	s15, [sp, #848]	; 0x350
 8013b9c:	ed9d 6abb 	vldr	s12, [sp, #748]	; 0x2ec
 8013ba0:	eddd 6ad5 	vldr	s13, [sp, #852]	; 0x354
 8013ba4:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 8013ba8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8013bac:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8013bb0:	edcd 7ad4 	vstr	s15, [sp, #848]	; 0x350
 8013bb4:	eddd 7ad6 	vldr	s15, [sp, #856]	; 0x358
 8013bb8:	ed8d 6abb 	vstr	s12, [sp, #748]	; 0x2ec
 8013bbc:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8013bc0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013bc4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8013bc8:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 8013bcc:	edcd 6ad5 	vstr	s13, [sp, #852]	; 0x354
 8013bd0:	ed8d 7abc 	vstr	s14, [sp, #752]	; 0x2f0
 8013bd4:	eddd 6ad7 	vldr	s13, [sp, #860]	; 0x35c
 8013bd8:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 8013bdc:	edcd 7ad6 	vstr	s15, [sp, #856]	; 0x358
 8013be0:	eddd 7ad8 	vldr	s15, [sp, #864]	; 0x360
 8013be4:	ee65 5a8b 	vmul.f32	s11, s11, s22
 8013be8:	ee26 6a0b 	vmul.f32	s12, s12, s22
 8013bec:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8013bf0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013bf4:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8013bf8:	a9bf      	add	r1, sp, #764	; 0x2fc
 8013bfa:	edcd 5aba 	vstr	s11, [sp, #744]	; 0x2e8
 8013bfe:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 8013c02:	edcd 6ad7 	vstr	s13, [sp, #860]	; 0x35c
 8013c06:	a8b2      	add	r0, sp, #712	; 0x2c8
 8013c08:	ed8d 7abe 	vstr	s14, [sp, #760]	; 0x2f8
 8013c0c:	eeb0 0a4a 	vmov.f32	s0, s20
 8013c10:	ed8d bad8 	vstr	s22, [sp, #864]	; 0x360
 8013c14:	f7fd ff1a 	bl	8011a4c <m_interp1q_constrain>
 8013c18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013c1a:	eeb0 6a40 	vmov.f32	s12, s0
 8013c1e:	ed83 0a00 	vstr	s0, [r3]
 8013c22:	a9d9      	add	r1, sp, #868	; 0x364
 8013c24:	a8cc      	add	r0, sp, #816	; 0x330
 8013c26:	eeb0 0a4a 	vmov.f32	s0, s20
 8013c2a:	f7fd ff0f 	bl	8011a4c <m_interp1q_constrain>
 8013c2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013c30:	ed83 0a00 	vstr	s0, [r3]
 8013c34:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013c38:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8013c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c3e:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 8013c42:	ed83 6a00 	vstr	s12, [r3]
 8013c46:	eef0 7ae7 	vabs.f32	s15, s15
 8013c4a:	ee17 0a90 	vmov	r0, s15
 8013c4e:	f7ec fc73 	bl	8000538 <__aeabi_f2d>
 8013c52:	ec41 0b10 	vmov	d0, r0, r1
 8013c56:	f007 ffff 	bl	801bc58 <floor>
 8013c5a:	ec51 0b10 	vmov	r0, r1, d0
 8013c5e:	f7ec ff73 	bl	8000b48 <__aeabi_d2iz>
 8013c62:	f8dd 36c4 	ldr.w	r3, [sp, #1732]	; 0x6c4
 8013c66:	7018      	strb	r0, [r3, #0]
 8013c68:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013c6c:	ed93 ba2d 	vldr	s22, [r3, #180]	; 0xb4
 8013c70:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8013c74:	4b49      	ldr	r3, [pc, #292]	; (8013d9c <m_kalman_3gyro.isra.0.constprop.0+0x1044>)
 8013c76:	ee3c bacb 	vsub.f32	s22, s25, s22
 8013c7a:	ee7d 7a67 	vsub.f32	s15, s26, s15
 8013c7e:	eeb0 bacb 	vabs.f32	s22, s22
 8013c82:	eef0 7ae7 	vabs.f32	s15, s15
 8013c86:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8013c8a:	ed83 ba6b 	vstr	s22, [r3, #428]	; 0x1ac
 8013c8e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013c90:	edcd 7a00 	vstr	s15, [sp]
 8013c94:	edc3 7a00 	vstr	s15, [r3]
 8013c98:	ee17 0a90 	vmov	r0, s15
 8013c9c:	f7ec fc4c 	bl	8000538 <__aeabi_f2d>
 8013ca0:	a33b      	add	r3, pc, #236	; (adr r3, 8013d90 <m_kalman_3gyro.isra.0.constprop.0+0x1038>)
 8013ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca6:	f7ec ff2f 	bl	8000b08 <__aeabi_dcmpgt>
 8013caa:	2800      	cmp	r0, #0
 8013cac:	f000 83ec 	beq.w	8014488 <m_kalman_3gyro.isra.0.constprop.0+0x1730>
 8013cb0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8013da0 <m_kalman_3gyro.isra.0.constprop.0+0x1048>
 8013cb4:	eddd 7a00 	vldr	s15, [sp]
 8013cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc0:	f302 8362 	bgt.w	8016388 <m_kalman_3gyro.isra.0.constprop.0+0x3630>
 8013cc4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8013da4 <m_kalman_3gyro.isra.0.constprop.0+0x104c>
 8013cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ccc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8013cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013cd4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013cd8:	ee17 0a10 	vmov	r0, s14
 8013cdc:	f7ec fc2c 	bl	8000538 <__aeabi_f2d>
 8013ce0:	4606      	mov	r6, r0
 8013ce2:	460f      	mov	r7, r1
 8013ce4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013ce8:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 8013cec:	eef0 7ae7 	vabs.f32	s15, s15
 8013cf0:	ee17 0a90 	vmov	r0, s15
 8013cf4:	f7ec fc20 	bl	8000538 <__aeabi_f2d>
 8013cf8:	4b2b      	ldr	r3, [pc, #172]	; (8013da8 <m_kalman_3gyro.isra.0.constprop.0+0x1050>)
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	f7ec fabc 	bl	8000278 <__aeabi_dsub>
 8013d00:	4632      	mov	r2, r6
 8013d02:	463b      	mov	r3, r7
 8013d04:	4604      	mov	r4, r0
 8013d06:	460d      	mov	r5, r1
 8013d08:	f7ec fef4 	bl	8000af4 <__aeabi_dcmpge>
 8013d0c:	b908      	cbnz	r0, 8013d12 <m_kalman_3gyro.isra.0.constprop.0+0xfba>
 8013d0e:	4634      	mov	r4, r6
 8013d10:	463d      	mov	r5, r7
 8013d12:	4620      	mov	r0, r4
 8013d14:	4629      	mov	r1, r5
 8013d16:	f7ec ff5f 	bl	8000bd8 <__aeabi_d2f>
 8013d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d1c:	6018      	str	r0, [r3, #0]
 8013d1e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013d22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d26:	b19b      	cbz	r3, 8013d50 <m_kalman_3gyro.isra.0.constprop.0+0xff8>
 8013d28:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d30:	b973      	cbnz	r3, 8013d50 <m_kalman_3gyro.isra.0.constprop.0+0xff8>
 8013d32:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 8013d36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d40:	ed93 7a00 	vldr	s14, [r3]
 8013d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d4c:	f102 84b9 	bmi.w	80166c2 <m_kalman_3gyro.isra.0.constprop.0+0x396a>
 8013d50:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013d54:	3340      	adds	r3, #64	; 0x40
 8013d56:	9304      	str	r3, [sp, #16]
 8013d58:	9b07      	ldr	r3, [sp, #28]
 8013d5a:	edd3 7a00 	vldr	s15, [r3]
 8013d5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d66:	f04f 0400 	mov.w	r4, #0
 8013d6a:	d123      	bne.n	8013db4 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 8013d6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8013d70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d78:	4619      	mov	r1, r3
 8013d7a:	d11b      	bne.n	8013db4 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 8013d7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013d80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d88:	f002 8425 	beq.w	80165d6 <m_kalman_3gyro.isra.0.constprop.0+0x387e>
 8013d8c:	e012      	b.n	8013db4 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 8013d8e:	bf00      	nop
 8013d90:	9999999a 	.word	0x9999999a
 8013d94:	3fb99999 	.word	0x3fb99999
 8013d98:	3ff00000 	.word	0x3ff00000
 8013d9c:	200013e8 	.word	0x200013e8
 8013da0:	3fb77778 	.word	0x3fb77778
 8013da4:	3dcccccd 	.word	0x3dcccccd
 8013da8:	3fe00000 	.word	0x3fe00000
 8013dac:	3f99999a 	.word	0x3f99999a
 8013db0:	3f4ccccd 	.word	0x3f4ccccd
 8013db4:	f50d 61d4 	add.w	r1, sp, #1696	; 0x6a0
 8013db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	f7ec fe7a 	bl	8000ab8 <__aeabi_dcmpeq>
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	d144      	bne.n	8013e52 <m_kalman_3gyro.isra.0.constprop.0+0x10fa>
 8013dc8:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 8013dcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013dce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8013dd2:	edd3 7a00 	vldr	s15, [r3]
 8013dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dde:	d538      	bpl.n	8013e52 <m_kalman_3gyro.isra.0.constprop.0+0x10fa>
 8013de0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013de4:	9907      	ldr	r1, [sp, #28]
 8013de6:	edc3 9a12 	vstr	s19, [r3, #72]	; 0x48
 8013dea:	ed83 9a15 	vstr	s18, [r3, #84]	; 0x54
 8013dee:	edc3 8a18 	vstr	s17, [r3, #96]	; 0x60
 8013df2:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 8013df6:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 8013dfa:	ed83 8a17 	vstr	s16, [r3, #92]	; 0x5c
 8013dfe:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 8013e02:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 8013e06:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 8013e0a:	9804      	ldr	r0, [sp, #16]
 8013e0c:	f7fd fb14 	bl	8011438 <m_dcm2q_eml>
 8013e10:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
 8013e14:	2201      	movs	r2, #1
 8013e16:	700a      	strb	r2, [r1, #0]
 8013e18:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	ed82 da2b 	vstr	s26, [r2, #172]	; 0xac
 8013e22:	edc2 ca2d 	vstr	s25, [r2, #180]	; 0xb4
 8013e26:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8013e2a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 8013e2e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8013e32:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8013e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013e3a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8013e3e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8013e42:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8013e46:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8013e4a:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 8013e4e:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 8013e52:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8013e56:	9904      	ldr	r1, [sp, #16]
 8013e58:	9807      	ldr	r0, [sp, #28]
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8013e60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8013e64:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8013e68:	f7fc feb2 	bl	8010bd0 <m_q2dcm_eml>
 8013e6c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013e70:	ed93 8a2b 	vldr	s16, [r3, #172]	; 0xac
 8013e74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e78:	eee8 7a48 	vfms.f32	s15, s16, s16
 8013e7c:	ee17 0a90 	vmov	r0, s15
 8013e80:	f7ec fb5a 	bl	8000538 <__aeabi_f2d>
 8013e84:	ec41 0b10 	vmov	d0, r0, r1
 8013e88:	f008 f8be 	bl	801c008 <sqrt>
 8013e8c:	ec51 0b10 	vmov	r0, r1, d0
 8013e90:	f7ec fea2 	bl	8000bd8 <__aeabi_d2f>
 8013e94:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8013e98:	ed9d 9a57 	vldr	s18, [sp, #348]	; 0x15c
 8013e9c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8013ea0:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8013ea4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8013ea8:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
 8013eac:	ed93 4a16 	vldr	s8, [r3, #88]	; 0x58
 8013eb0:	edd3 3a13 	vldr	s7, [r3, #76]	; 0x4c
 8013eb4:	eddd 9a58 	vldr	s19, [sp, #352]	; 0x160
 8013eb8:	eddd 8a56 	vldr	s17, [sp, #344]	; 0x158
 8013ebc:	ed83 da22 	vstr	s26, [r3, #136]	; 0x88
 8013ec0:	ee07 0a10 	vmov	s14, r0
 8013ec4:	ee68 4a26 	vmul.f32	s9, s16, s13
 8013ec8:	ee28 5a25 	vmul.f32	s10, s16, s11
 8013ecc:	eee7 4a27 	vfma.f32	s9, s14, s15
 8013ed0:	ee68 7a06 	vmul.f32	s15, s16, s12
 8013ed4:	eea7 5a23 	vfma.f32	s10, s14, s7
 8013ed8:	eee7 7a04 	vfma.f32	s15, s14, s8
 8013edc:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 8013ee0:	eddd 3a53 	vldr	s7, [sp, #332]	; 0x14c
 8013ee4:	ed9d 4a54 	vldr	s8, [sp, #336]	; 0x150
 8013ee8:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
 8013eec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013ef0:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8013ef4:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 8013ef8:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8013dac <m_kalman_3gyro.isra.0.constprop.0+0x1054>
 8013efc:	edc3 aa23 	vstr	s21, [r3, #140]	; 0x8c
 8013f00:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8013f04:	ee34 4a45 	vsub.f32	s8, s8, s10
 8013f08:	ee79 5a65 	vsub.f32	s11, s18, s11
 8013f0c:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8013f10:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8013f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f1c:	edc3 ca24 	vstr	s25, [r3, #144]	; 0x90
 8013f20:	edc3 4a82 	vstr	s9, [r3, #520]	; 0x208
 8013f24:	edc3 3a19 	vstr	s7, [r3, #100]	; 0x64
 8013f28:	ed83 5a83 	vstr	s10, [r3, #524]	; 0x20c
 8013f2c:	ed83 4a1a 	vstr	s8, [r3, #104]	; 0x68
 8013f30:	edc3 5a1d 	vstr	s11, [r3, #116]	; 0x74
 8013f34:	ed83 6a1e 	vstr	s12, [r3, #120]	; 0x78
 8013f38:	edc3 6a1c 	vstr	s13, [r3, #112]	; 0x70
 8013f3c:	d506      	bpl.n	8013f4c <m_kalman_3gyro.isra.0.constprop.0+0x11f4>
 8013f3e:	ed1f 7a64 	vldr	s14, [pc, #-400]	; 8013db0 <m_kalman_3gyro.isra.0.constprop.0+0x1058>
 8013f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4a:	dc01      	bgt.n	8013f50 <m_kalman_3gyro.isra.0.constprop.0+0x11f8>
 8013f4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013f50:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8013f54:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8013f56:	eef0 7ae7 	vabs.f32	s15, s15
 8013f5a:	ee3f 6aa7 	vadd.f32	s12, s31, s15
 8013f5e:	edc3 7a00 	vstr	s15, [r3]
 8013f62:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8013f64:	a99e      	add	r1, sp, #632	; 0x278
 8013f66:	ed83 6a00 	vstr	s12, [r3]
 8013f6a:	eeb0 0a46 	vmov.f32	s0, s12
 8013f6e:	a894      	add	r0, sp, #592	; 0x250
 8013f70:	f7fd fd1e 	bl	80119b0 <m_b_interp1q_constrain>
 8013f74:	a9a8      	add	r1, sp, #672	; 0x2a0
 8013f76:	eeb0 8a40 	vmov.f32	s16, s0
 8013f7a:	a894      	add	r0, sp, #592	; 0x250
 8013f7c:	eeb0 0a46 	vmov.f32	s0, s12
 8013f80:	f7fd fd16 	bl	80119b0 <m_b_interp1q_constrain>
 8013f84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013f86:	edd3 7a00 	vldr	s15, [r3]
 8013f8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f92:	eef0 aa40 	vmov.f32	s21, s0
 8013f96:	f340 8297 	ble.w	80144c8 <m_kalman_3gyro.isra.0.constprop.0+0x1770>
 8013f9a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa6:	f142 81f3 	bpl.w	8016390 <m_kalman_3gyro.isra.0.constprop.0+0x3638>
 8013faa:	2107      	movs	r1, #7
 8013fac:	2402      	movs	r4, #2
 8013fae:	2301      	movs	r3, #1
 8013fb0:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	e008      	b.n	8013fca <m_kalman_3gyro.isra.0.constprop.0+0x1272>
 8013fb8:	ed92 7a00 	vldr	s14, [r2]
 8013fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc4:	f282 84ea 	bge.w	801699c <m_kalman_3gyro.isra.0.constprop.0+0x3c44>
 8013fc8:	4619      	mov	r1, r3
 8013fca:	180b      	adds	r3, r1, r0
 8013fcc:	eb05 0253 	add.w	r2, r5, r3, lsr #1
 8013fd0:	f50d 66c4 	add.w	r6, sp, #1568	; 0x620
 8013fd4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8013fd8:	42a1      	cmp	r1, r4
 8013fda:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 8013fde:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013fe2:	d8e9      	bhi.n	8013fb8 <m_kalman_3gyro.isra.0.constprop.0+0x1260>
 8013fe4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8013fe8:	3801      	subs	r0, #1
 8013fea:	0082      	lsls	r2, r0, #2
 8013fec:	3204      	adds	r2, #4
 8013fee:	ab59      	add	r3, sp, #356	; 0x164
 8013ff0:	1899      	adds	r1, r3, r2
 8013ff2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8013ff6:	edd3 6a00 	vldr	s13, [r3]
 8013ffa:	ed91 7a00 	vldr	s14, [r1]
 8013ffe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014002:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014006:	ab60      	add	r3, sp, #384	; 0x180
 8014008:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801400c:	441a      	add	r2, r3
 801400e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014012:	edd0 ba00 	vldr	s23, [r0]
 8014016:	edd2 7a00 	vldr	s15, [r2]
 801401a:	ee77 7aeb 	vsub.f32	s15, s15, s23
 801401e:	eee6 baa7 	vfma.f32	s23, s13, s15
 8014022:	e253      	b.n	80144cc <m_kalman_3gyro.isra.0.constprop.0+0x1774>
 8014024:	454e      	cmp	r6, r9
 8014026:	f6bf abfb 	bge.w	8013820 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 801402a:	eba9 0206 	sub.w	r2, r9, r6
 801402e:	eb0b 010e 	add.w	r1, fp, lr
 8014032:	444c      	add	r4, r9
 8014034:	1ba4      	subs	r4, r4, r6
 8014036:	f007 f983 	bl	801b340 <memcpy>
 801403a:	464e      	mov	r6, r9
 801403c:	f7ff bbf0 	b.w	8013820 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 8014040:	eef4 7a4a 	vcmp.f32	s15, s20
 8014044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014048:	f43f ac45 	beq.w	80138d6 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 801404c:	eef4 7a6d 	vcmp.f32	s15, s27
 8014050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014054:	f43f ac3f 	beq.w	80138d6 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 8014058:	eeb4 7a4a 	vcmp.f32	s14, s20
 801405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014060:	f43f ac39 	beq.w	80138d6 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 8014064:	eeb4 7a6d 	vcmp.f32	s14, s27
 8014068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406c:	f43f ac33 	beq.w	80138d6 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 8014070:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014074:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014078:	eee7 7a26 	vfma.f32	s15, s14, s13
 801407c:	e431      	b.n	80138e2 <m_kalman_3gyro.isra.0.constprop.0+0xb8a>
 801407e:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014082:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014086:	f8dd 66d0 	ldr.w	r6, [sp, #1744]	; 0x6d0
 801408a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801408e:	f602 07b8 	addw	r7, r2, #2232	; 0x8b8
 8014092:	2301      	movs	r3, #1
 8014094:	f602 08bc 	addw	r8, r2, #2236	; 0x8bc
 8014098:	f502 690c 	add.w	r9, r2, #2240	; 0x8c0
 801409c:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80140a0:	f882 38ce 	strb.w	r3, [r2, #2254]	; 0x8ce
 80140a4:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 80140a8:	ed87 aa00 	vstr	s20, [r7]
 80140ac:	ed88 aa00 	vstr	s20, [r8]
 80140b0:	ed89 aa00 	vstr	s20, [r9]
 80140b4:	f7ec f8e2 	bl	800027c <__adddf3>
 80140b8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80140bc:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80140c0:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 80140c4:	f606 06c4 	addw	r6, r6, #2244	; 0x8c4
 80140c8:	9300      	str	r3, [sp, #0]
 80140ca:	ed86 aa00 	vstr	s20, [r6]
 80140ce:	e9d2 2308 	ldrd	r2, r3, [r2, #32]
 80140d2:	f7ec f8d3 	bl	800027c <__adddf3>
 80140d6:	9b00      	ldr	r3, [sp, #0]
 80140d8:	ed83 aa00 	vstr	s20, [r3]
 80140dc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80140e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80140e4:	f7ec f8ca 	bl	800027c <__adddf3>
 80140e8:	4622      	mov	r2, r4
 80140ea:	462b      	mov	r3, r5
 80140ec:	f7ec f8c6 	bl	800027c <__adddf3>
 80140f0:	4602      	mov	r2, r0
 80140f2:	460b      	mov	r3, r1
 80140f4:	2000      	movs	r0, #0
 80140f6:	4920      	ldr	r1, [pc, #128]	; (8014178 <m_kalman_3gyro.isra.0.constprop.0+0x1420>)
 80140f8:	f7ec fba0 	bl	800083c <__aeabi_ddiv>
 80140fc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014100:	4604      	mov	r4, r0
 8014102:	460d      	mov	r5, r1
 8014104:	4622      	mov	r2, r4
 8014106:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801410a:	462b      	mov	r3, r5
 801410c:	f7ec fa6c 	bl	80005e8 <__aeabi_dmul>
 8014110:	ec41 0b17 	vmov	d7, r0, r1
 8014114:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014118:	4622      	mov	r2, r4
 801411a:	ed81 7b02 	vstr	d7, [r1, #8]
 801411e:	462b      	mov	r3, r5
 8014120:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8014124:	f7ec fa60 	bl	80005e8 <__aeabi_dmul>
 8014128:	ec41 0b17 	vmov	d7, r0, r1
 801412c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014130:	4622      	mov	r2, r4
 8014132:	ed81 7b04 	vstr	d7, [r1, #16]
 8014136:	462b      	mov	r3, r5
 8014138:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 801413c:	f7ec fa54 	bl	80005e8 <__aeabi_dmul>
 8014140:	ec41 0b17 	vmov	d7, r0, r1
 8014144:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014148:	4622      	mov	r2, r4
 801414a:	ed81 7b06 	vstr	d7, [r1, #24]
 801414e:	462b      	mov	r3, r5
 8014150:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8014154:	f7ec fa48 	bl	80005e8 <__aeabi_dmul>
 8014158:	4622      	mov	r2, r4
 801415a:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 801415e:	462b      	mov	r3, r5
 8014160:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8014164:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8014168:	f7ec fa3e 	bl	80005e8 <__aeabi_dmul>
 801416c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014170:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 8014174:	e432      	b.n	80139dc <m_kalman_3gyro.isra.0.constprop.0+0xc84>
 8014176:	bf00      	nop
 8014178:	3ff00000 	.word	0x3ff00000
 801417c:	f50d 67d5 	add.w	r7, sp, #1704	; 0x6a8
 8014180:	ed97 7b00 	vldr	d7, [r7]
 8014184:	2101      	movs	r1, #1
 8014186:	af43      	add	r7, sp, #268	; 0x10c
 8014188:	f44f 7280 	mov.w	r2, #256	; 0x100
 801418c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 8014190:	2600      	movs	r6, #0
 8014192:	e9c3 5512 	strd	r5, r5, [r3, #72]	; 0x48
 8014196:	e9c3 5515 	strd	r5, r5, [r3, #84]	; 0x54
 801419a:	645d      	str	r5, [r3, #68]	; 0x44
 801419c:	f883 18cd 	strb.w	r1, [r3, #2253]	; 0x8cd
 80141a0:	861a      	strh	r2, [r3, #48]	; 0x30
 80141a2:	65dd      	str	r5, [r3, #92]	; 0x5c
 80141a4:	ed83 ba18 	vstr	s22, [r3, #96]	; 0x60
 80141a8:	ed83 ba14 	vstr	s22, [r3, #80]	; 0x50
 80141ac:	ed83 ba10 	vstr	s22, [r3, #64]	; 0x40
 80141b0:	4629      	mov	r1, r5
 80141b2:	2230      	movs	r2, #48	; 0x30
 80141b4:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80141b8:	603e      	str	r6, [r7, #0]
 80141ba:	607e      	str	r6, [r7, #4]
 80141bc:	60fe      	str	r6, [r7, #12]
 80141be:	9707      	str	r7, [sp, #28]
 80141c0:	9645      	str	r6, [sp, #276]	; 0x114
 80141c2:	f007 f8cb 	bl	801b35c <memset>
 80141c6:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80141ca:	4bb7      	ldr	r3, [pc, #732]	; (80144a8 <m_kalman_3gyro.isra.0.constprop.0+0x1750>)
 80141cc:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80141d0:	4613      	mov	r3, r2
 80141d2:	f8c2 6094 	str.w	r6, [r2, #148]	; 0x94
 80141d6:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
 80141da:	f8c2 609c 	str.w	r6, [r2, #156]	; 0x9c
 80141de:	ed82 ba2c 	vstr	s22, [r2, #176]	; 0xb0
 80141e2:	ed82 ba2d 	vstr	s22, [r2, #180]	; 0xb4
 80141e6:	4629      	mov	r1, r5
 80141e8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80141ec:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 80141f0:	f007 f8b4 	bl	801b35c <memset>
 80141f4:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80141f8:	4bac      	ldr	r3, [pc, #688]	; (80144ac <m_kalman_3gyro.isra.0.constprop.0+0x1754>)
 80141fa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 80141fe:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8014202:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 8014206:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 801420a:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 801420e:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 8014212:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8014216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801421a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 801421e:	4613      	mov	r3, r2
 8014220:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8014224:	2500      	movs	r5, #0
 8014226:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 801422a:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
 801422e:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
 8014232:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 8014236:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 801423a:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
 801423e:	f503 7817 	add.w	r8, r3, #604	; 0x25c
 8014242:	e9c2 5501 	strd	r5, r5, [r2, #4]
 8014246:	e9c2 5504 	strd	r5, r5, [r2, #16]
 801424a:	6195      	str	r5, [r2, #24]
 801424c:	e9c3 5590 	strd	r5, r5, [r3, #576]	; 0x240
 8014250:	e9c3 5593 	strd	r5, r5, [r3, #588]	; 0x24c
 8014254:	f8c3 523c 	str.w	r5, [r3, #572]	; 0x23c
 8014258:	f8c3 9234 	str.w	r9, [r3, #564]	; 0x234
 801425c:	f8c3 9224 	str.w	r9, [r3, #548]	; 0x224
 8014260:	f8c3 9214 	str.w	r9, [r3, #532]	; 0x214
 8014264:	f8c3 5254 	str.w	r5, [r3, #596]	; 0x254
 8014268:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801426c:	4629      	mov	r1, r5
 801426e:	f8c3 9258 	str.w	r9, [r3, #600]	; 0x258
 8014272:	f8c3 9248 	str.w	r9, [r3, #584]	; 0x248
 8014276:	f8c3 9238 	str.w	r9, [r3, #568]	; 0x238
 801427a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801427e:	4640      	mov	r0, r8
 8014280:	f007 f86c 	bl	801b35c <memset>
 8014284:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014288:	2700      	movs	r7, #0
 801428a:	4629      	mov	r1, r5
 801428c:	f8c3 73c4 	str.w	r7, [r3, #964]	; 0x3c4
 8014290:	f8c3 73c8 	str.w	r7, [r3, #968]	; 0x3c8
 8014294:	f8c3 73cc 	str.w	r7, [r3, #972]	; 0x3cc
 8014298:	f8c3 73d0 	str.w	r7, [r3, #976]	; 0x3d0
 801429c:	2230      	movs	r2, #48	; 0x30
 801429e:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 80142a2:	f007 f85b 	bl	801b35c <memset>
 80142a6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80142aa:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 80142ae:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80142b2:	f203 4104 	addw	r1, r3, #1028	; 0x404
 80142b6:	f503 6582 	add.w	r5, r3, #1040	; 0x410
 80142ba:	f203 4614 	addw	r6, r3, #1044	; 0x414
 80142be:	f503 6a81 	add.w	sl, r3, #1032	; 0x408
 80142c2:	f203 4b0c 	addw	fp, r3, #1036	; 0x40c
 80142c6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80142ca:	932b      	str	r3, [sp, #172]	; 0xac
 80142cc:	f500 6384 	add.w	r3, r0, #1056	; 0x420
 80142d0:	f200 4024 	addw	r0, r0, #1060	; 0x424
 80142d4:	9036      	str	r0, [sp, #216]	; 0xd8
 80142d6:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 80142da:	600f      	str	r7, [r1, #0]
 80142dc:	f500 6085 	add.w	r0, r0, #1064	; 0x428
 80142e0:	9037      	str	r0, [sp, #220]	; 0xdc
 80142e2:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 80142e6:	f8ca 7000 	str.w	r7, [sl]
 80142ea:	f200 4c2c 	addw	ip, r0, #1068	; 0x42c
 80142ee:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 80142f2:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
 80142f6:	f500 6c86 	add.w	ip, r0, #1072	; 0x430
 80142fa:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 80142fe:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 8014302:	f200 4c34 	addw	ip, r0, #1076	; 0x434
 8014306:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801430a:	f8cb 7000 	str.w	r7, [fp]
 801430e:	953a      	str	r5, [sp, #232]	; 0xe8
 8014310:	602f      	str	r7, [r5, #0]
 8014312:	f202 421c 	addw	r2, r2, #1052	; 0x41c
 8014316:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8014318:	9235      	str	r2, [sp, #212]	; 0xd4
 801431a:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 801431e:	f500 6c87 	add.w	ip, r0, #1080	; 0x438
 8014322:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 8014326:	6037      	str	r7, [r6, #0]
 8014328:	602f      	str	r7, [r5, #0]
 801432a:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 801432c:	9121      	str	r1, [sp, #132]	; 0x84
 801432e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014332:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8014336:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 801433a:	f200 4c3c 	addw	ip, r0, #1084	; 0x43c
 801433e:	602f      	str	r7, [r5, #0]
 8014340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014344:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8014348:	601a      	str	r2, [r3, #0]
 801434a:	9634      	str	r6, [sp, #208]	; 0xd0
 801434c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801434e:	601f      	str	r7, [r3, #0]
 8014350:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8014352:	601f      	str	r7, [r3, #0]
 8014354:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8014356:	601f      	str	r7, [r3, #0]
 8014358:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801435a:	601f      	str	r7, [r3, #0]
 801435c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801435e:	601f      	str	r7, [r3, #0]
 8014360:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014362:	601f      	str	r7, [r3, #0]
 8014364:	f8cc 9000 	str.w	r9, [ip]
 8014368:	f7ec fc36 	bl	8000bd8 <__aeabi_d2f>
 801436c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014370:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80144b0 <m_kalman_3gyro.isra.0.constprop.0+0x1758>
 8014374:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014378:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801437c:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 8014380:	ee0b 0a10 	vmov	s22, r0
 8014384:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 8014388:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801438c:	9119      	str	r1, [sp, #100]	; 0x64
 801438e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8014392:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014396:	ed83 7a00 	vstr	s14, [r3]
 801439a:	f202 4244 	addw	r2, r2, #1092	; 0x444
 801439e:	9312      	str	r3, [sp, #72]	; 0x48
 80143a0:	f200 404c 	addw	r0, r0, #1100	; 0x44c
 80143a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80143a6:	901a      	str	r0, [sp, #104]	; 0x68
 80143a8:	6017      	str	r7, [r2, #0]
 80143aa:	f8c3 9000 	str.w	r9, [r3]
 80143ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80143b0:	9220      	str	r2, [sp, #128]	; 0x80
 80143b2:	601f      	str	r7, [r3, #0]
 80143b4:	f505 668a 	add.w	r6, r5, #1104	; 0x450
 80143b8:	2000      	movs	r0, #0
 80143ba:	2100      	movs	r1, #0
 80143bc:	f505 658b 	add.w	r5, r5, #1112	; 0x458
 80143c0:	2232      	movs	r2, #50	; 0x32
 80143c2:	2300      	movs	r3, #0
 80143c4:	e9c6 0100 	strd	r0, r1, [r6]
 80143c8:	e9c5 2300 	strd	r2, r3, [r5]
 80143cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80143ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80143d2:	ab70      	add	r3, sp, #448	; 0x1c0
 80143d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80143d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143da:	ca07      	ldmia	r2, {r0, r1, r2}
 80143dc:	ad73      	add	r5, sp, #460	; 0x1cc
 80143de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80143e2:	9a08      	ldr	r2, [sp, #32]
 80143e4:	edd3 7a00 	vldr	s15, [r3]
 80143e8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80143ec:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80143f0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80143f4:	691f      	ldr	r7, [r3, #16]
 80143f6:	695e      	ldr	r6, [r3, #20]
 80143f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80143fa:	ad76      	add	r5, sp, #472	; 0x1d8
 80143fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8014400:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014404:	699d      	ldr	r5, [r3, #24]
 8014406:	69d8      	ldr	r0, [r3, #28]
 8014408:	6a19      	ldr	r1, [r3, #32]
 801440a:	f502 628c 	add.w	r2, r2, #1120	; 0x460
 801440e:	9210      	str	r2, [sp, #64]	; 0x40
 8014410:	4613      	mov	r3, r2
 8014412:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014416:	f602 0298 	addw	r2, r2, #2200	; 0x898
 801441a:	edc3 7a00 	vstr	s15, [r3]
 801441e:	f8c3 9004 	str.w	r9, [r3, #4]
 8014422:	f8c3 e008 	str.w	lr, [r3, #8]
 8014426:	f8c3 c00c 	str.w	ip, [r3, #12]
 801442a:	611f      	str	r7, [r3, #16]
 801442c:	615e      	str	r6, [r3, #20]
 801442e:	619d      	str	r5, [r3, #24]
 8014430:	61d8      	str	r0, [r3, #28]
 8014432:	6219      	str	r1, [r3, #32]
 8014434:	3324      	adds	r3, #36	; 0x24
 8014436:	4293      	cmp	r3, r2
 8014438:	d1ef      	bne.n	801441a <m_kalman_3gyro.isra.0.constprop.0+0x16c2>
 801443a:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 801443e:	6812      	ldr	r2, [r2, #0]
 8014440:	601a      	str	r2, [r3, #0]
 8014442:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 8014446:	685a      	ldr	r2, [r3, #4]
 8014448:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801444c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8014450:	601a      	str	r2, [r3, #0]
 8014452:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 8014456:	6899      	ldr	r1, [r3, #8]
 8014458:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801445c:	f503 620a 	add.w	r2, r3, #2208	; 0x8a0
 8014460:	2300      	movs	r3, #0
 8014462:	6011      	str	r1, [r2, #0]
 8014464:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8014468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801446c:	f881 38a4 	strb.w	r3, [r1, #2212]	; 0x8a4
 8014470:	f8c1 38a6 	str.w	r3, [r1, #2214]	; 0x8a6
 8014474:	f881 38ad 	strb.w	r3, [r1, #2221]	; 0x8ad
 8014478:	f881 38ae 	strb.w	r3, [r1, #2222]	; 0x8ae
 801447c:	f8c1 38b0 	str.w	r3, [r1, #2224]	; 0x8b0
 8014480:	f8a1 28aa 	strh.w	r2, [r1, #2218]	; 0x8aa
 8014484:	f7fe bdcd 	b.w	8013022 <m_kalman_3gyro.isra.0.constprop.0+0x2ca>
 8014488:	4f0a      	ldr	r7, [pc, #40]	; (80144b4 <m_kalman_3gyro.isra.0.constprop.0+0x175c>)
 801448a:	2600      	movs	r6, #0
 801448c:	e42a      	b.n	8013ce4 <m_kalman_3gyro.isra.0.constprop.0+0xf8c>
 801448e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014490:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014494:	edc3 7a00 	vstr	s15, [r3]
 8014498:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801449a:	eeb0 6a67 	vmov.f32	s12, s15
 801449e:	edc3 7a00 	vstr	s15, [r3]
 80144a2:	f7ff bbc7 	b.w	8013c34 <m_kalman_3gyro.isra.0.constprop.0+0xedc>
 80144a6:	bf00      	nop
 80144a8:	3f666666 	.word	0x3f666666
 80144ac:	40a00000 	.word	0x40a00000
 80144b0:	3ca3d70a 	.word	0x3ca3d70a
 80144b4:	3ff00000 	.word	0x3ff00000
 80144b8:	00000000 	.word	0x00000000
 80144bc:	3d088889 	.word	0x3d088889
 80144c0:	42480000 	.word	0x42480000
 80144c4:	3c23d70a 	.word	0x3c23d70a
 80144c8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 80144cc:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 80144b8 <m_kalman_3gyro.isra.0.constprop.0+0x1760>
 80144d0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80144d4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80144d6:	edc3 7af5 	vstr	s15, [r3, #980]	; 0x3d4
 80144da:	edc3 7af6 	vstr	s15, [r3, #984]	; 0x3d8
 80144de:	edc3 7af7 	vstr	s15, [r3, #988]	; 0x3dc
 80144e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80144e4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80144e8:	eeb0 7a67 	vmov.f32	s14, s15
 80144ec:	eef0 6a67 	vmov.f32	s13, s15
 80144f0:	eeb0 6a67 	vmov.f32	s12, s15
 80144f4:	461c      	mov	r4, r3
 80144f6:	f503 6587 	add.w	r5, r3, #1080	; 0x438
 80144fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80144fe:	edd2 5a00 	vldr	s11, [r2]
 8014502:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014506:	3324      	adds	r3, #36	; 0x24
 8014508:	ee36 6a27 	vadd.f32	s12, s12, s15
 801450c:	320c      	adds	r2, #12
 801450e:	ed81 6af5 	vstr	s12, [r1, #980]	; 0x3d4
 8014512:	ed53 7a02 	vldr	s15, [r3, #-8]
 8014516:	ed52 5a02 	vldr	s11, [r2, #-8]
 801451a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801451e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014522:	edc1 6af6 	vstr	s13, [r1, #984]	; 0x3d8
 8014526:	ed53 7a01 	vldr	s15, [r3, #-4]
 801452a:	ed52 5a01 	vldr	s11, [r2, #-4]
 801452e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014532:	429d      	cmp	r5, r3
 8014534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014538:	ed81 7af7 	vstr	s14, [r1, #988]	; 0x3dc
 801453c:	d1dd      	bne.n	80144fa <m_kalman_3gyro.isra.0.constprop.0+0x17a2>
 801453e:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 80144bc <m_kalman_3gyro.isra.0.constprop.0+0x1764>
 8014542:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014546:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014548:	ee26 6a27 	vmul.f32	s12, s12, s15
 801454c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014554:	ed83 6af5 	vstr	s12, [r3, #980]	; 0x3d4
 8014558:	edc3 6af6 	vstr	s13, [r3, #984]	; 0x3d8
 801455c:	ed83 7af7 	vstr	s14, [r3, #988]	; 0x3dc
 8014560:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8014564:	681a      	ldr	r2, [r3, #0]
 8014566:	6859      	ldr	r1, [r3, #4]
 8014568:	625a      	str	r2, [r3, #36]	; 0x24
 801456a:	689a      	ldr	r2, [r3, #8]
 801456c:	6299      	str	r1, [r3, #40]	; 0x28
 801456e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014570:	68d9      	ldr	r1, [r3, #12]
 8014572:	691a      	ldr	r2, [r3, #16]
 8014574:	6319      	str	r1, [r3, #48]	; 0x30
 8014576:	635a      	str	r2, [r3, #52]	; 0x34
 8014578:	6959      	ldr	r1, [r3, #20]
 801457a:	699a      	ldr	r2, [r3, #24]
 801457c:	6399      	str	r1, [r3, #56]	; 0x38
 801457e:	63da      	str	r2, [r3, #60]	; 0x3c
 8014580:	69d9      	ldr	r1, [r3, #28]
 8014582:	6a1a      	ldr	r2, [r3, #32]
 8014584:	6419      	str	r1, [r3, #64]	; 0x40
 8014586:	645a      	str	r2, [r3, #68]	; 0x44
 8014588:	3b24      	subs	r3, #36	; 0x24
 801458a:	4298      	cmp	r0, r3
 801458c:	d1ea      	bne.n	8014564 <m_kalman_3gyro.isra.0.constprop.0+0x180c>
 801458e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014590:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014592:	6813      	ldr	r3, [r2, #0]
 8014594:	600b      	str	r3, [r1, #0]
 8014596:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014598:	981c      	ldr	r0, [sp, #112]	; 0x70
 801459a:	680b      	ldr	r3, [r1, #0]
 801459c:	6003      	str	r3, [r0, #0]
 801459e:	9808      	ldr	r0, [sp, #32]
 80145a0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80145a2:	6803      	ldr	r3, [r0, #0]
 80145a4:	6033      	str	r3, [r6, #0]
 80145a6:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 80145a8:	6853      	ldr	r3, [r2, #4]
 80145aa:	6033      	str	r3, [r6, #0]
 80145ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80145ae:	684b      	ldr	r3, [r1, #4]
 80145b0:	6033      	str	r3, [r6, #0]
 80145b2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80145b4:	6843      	ldr	r3, [r0, #4]
 80145b6:	6033      	str	r3, [r6, #0]
 80145b8:	6893      	ldr	r3, [r2, #8]
 80145ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80145bc:	6013      	str	r3, [r2, #0]
 80145be:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80145c0:	688b      	ldr	r3, [r1, #8]
 80145c2:	6013      	str	r3, [r2, #0]
 80145c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80145c6:	6883      	ldr	r3, [r0, #8]
 80145c8:	6013      	str	r3, [r2, #0]
 80145ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145cc:	2b02      	cmp	r3, #2
 80145ce:	f001 81a7 	beq.w	8015920 <m_kalman_3gyro.isra.0.constprop.0+0x2bc8>
 80145d2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80145d6:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 80145da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80145de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e2:	f301 8544 	bgt.w	801606e <m_kalman_3gyro.isra.0.constprop.0+0x3316>
 80145e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	f041 854c 	bne.w	8016086 <m_kalman_3gyro.isra.0.constprop.0+0x332e>
 80145ee:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80145f2:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 80145f6:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80145fa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80145fe:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
 8014602:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014606:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801460a:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 801460e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8014612:	2300      	movs	r3, #0
 8014614:	67c1      	str	r1, [r0, #124]	; 0x7c
 8014616:	f8a0 3202 	strh.w	r3, [r0, #514]	; 0x202
 801461a:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 801461e:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 8014622:	2a00      	cmp	r2, #0
 8014624:	f001 8171 	beq.w	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 8014628:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 801462c:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 8014630:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 80144c0 <m_kalman_3gyro.isra.0.constprop.0+0x1768>
 8014634:	eef4 aae7 	vcmpe.f32	s21, s15
 8014638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801463c:	f2c1 80e3 	blt.w	8015806 <m_kalman_3gyro.isra.0.constprop.0+0x2aae>
 8014640:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014644:	2300      	movs	r3, #0
 8014646:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 801464a:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 801464e:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
 8014652:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014656:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014658:	edd3 7a08 	vldr	s15, [r3, #32]
 801465c:	edd3 6a06 	vldr	s13, [r3, #24]
 8014660:	ed93 7a07 	vldr	s14, [r3, #28]
 8014664:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8014668:	ee66 6aaa 	vmul.f32	s13, s13, s21
 801466c:	ee27 7a2a 	vmul.f32	s14, s14, s21
 8014670:	ee67 aaaa 	vmul.f32	s21, s15, s21
 8014674:	edc3 6a06 	vstr	s13, [r3, #24]
 8014678:	ed83 7a07 	vstr	s14, [r3, #28]
 801467c:	edc3 aa08 	vstr	s21, [r3, #32]
 8014680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014682:	edd1 7a00 	vldr	s15, [r1]
 8014686:	ed93 6a00 	vldr	s12, [r3]
 801468a:	ed92 7a00 	vldr	s14, [r2]
 801468e:	edd2 6a01 	vldr	s13, [r2, #4]
 8014692:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014696:	edd2 7a02 	vldr	s15, [r2, #8]
 801469a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801469e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80146a2:	ed82 7a00 	vstr	s14, [r2]
 80146a6:	ed93 6a00 	vldr	s12, [r3]
 80146aa:	ed91 7a00 	vldr	s14, [r1]
 80146ae:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 80146b2:	ee26 6a07 	vmul.f32	s12, s12, s14
 80146b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80146ba:	ee66 6a86 	vmul.f32	s13, s13, s12
 80146be:	ee38 7a07 	vadd.f32	s14, s16, s14
 80146c2:	edc2 6a01 	vstr	s13, [r2, #4]
 80146c6:	ed93 6a00 	vldr	s12, [r3]
 80146ca:	edd1 6a00 	vldr	s13, [r1]
 80146ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80146d0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80146d4:	ee85 6a87 	vdiv.f32	s12, s11, s14
 80146d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80146dc:	edc2 7a02 	vstr	s15, [r2, #8]
 80146e0:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 80146e4:	edd3 7a00 	vldr	s15, [r3]
 80146e8:	edd2 6a03 	vldr	s13, [r2, #12]
 80146ec:	ed92 7a04 	vldr	s14, [r2, #16]
 80146f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80146f4:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80146f8:	edc2 6a03 	vstr	s13, [r2, #12]
 80146fc:	edd3 6a00 	vldr	s13, [r3]
 8014700:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8014704:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014708:	edd2 6a05 	vldr	s13, [r2, #20]
 801470c:	ed82 7a04 	vstr	s14, [r2, #16]
 8014710:	ed93 7a00 	vldr	s14, [r3]
 8014714:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 8014718:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801471c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014720:	ee27 7a88 	vmul.f32	s14, s15, s16
 8014724:	ed5f 7a99 	vldr	s15, [pc, #-612]	; 80144c4 <m_kalman_3gyro.isra.0.constprop.0+0x176c>
 8014728:	edc2 6a05 	vstr	s13, [r2, #20]
 801472c:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8014730:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014734:	ed93 7a06 	vldr	s14, [r3, #24]
 8014738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801473c:	bfa8      	it	ge
 801473e:	eef0 7a46 	vmovge.f32	s15, s12
 8014742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014746:	ed83 7a06 	vstr	s14, [r3, #24]
 801474a:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 801474e:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 8014752:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014756:	ee27 7a08 	vmul.f32	s14, s14, s16
 801475a:	ed82 7a0a 	vstr	s14, [r2, #40]	; 0x28
 801475e:	ed93 7a07 	vldr	s14, [r3, #28]
 8014762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014766:	ed83 7a07 	vstr	s14, [r3, #28]
 801476a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801476c:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 8014770:	edd3 6a00 	vldr	s13, [r3]
 8014774:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014776:	ee27 7a26 	vmul.f32	s14, s14, s13
 801477a:	ed82 7a0b 	vstr	s14, [r2, #44]	; 0x2c
 801477e:	b3cb      	cbz	r3, 80147f4 <m_kalman_3gyro.isra.0.constprop.0+0x1a9c>
 8014780:	ed92 7a03 	vldr	s14, [r2, #12]
 8014784:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 8014788:	ee27 7a08 	vmul.f32	s14, s14, s16
 801478c:	ed82 7a03 	vstr	s14, [r2, #12]
 8014790:	ed93 7a00 	vldr	s14, [r3]
 8014794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014798:	ed83 7a00 	vstr	s14, [r3]
 801479c:	ed92 7a04 	vldr	s14, [r2, #16]
 80147a0:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 80147a4:	ee27 7a08 	vmul.f32	s14, s14, s16
 80147a8:	ed82 7a04 	vstr	s14, [r2, #16]
 80147ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80147b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80147b4:	ed83 7a01 	vstr	s14, [r3, #4]
 80147b8:	ed92 7a05 	vldr	s14, [r2, #20]
 80147bc:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 80147c0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80147c4:	ed82 7a05 	vstr	s14, [r2, #20]
 80147c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80147cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80147d0:	ed83 7a02 	vstr	s14, [r3, #8]
 80147d4:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 80147d8:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 80147dc:	ee37 7a07 	vadd.f32	s14, s14, s14
 80147e0:	ee27 8a08 	vmul.f32	s16, s14, s16
 80147e4:	ed82 8a0a 	vstr	s16, [r2, #40]	; 0x28
 80147e8:	ed93 7a07 	vldr	s14, [r3, #28]
 80147ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147f0:	edc3 7a07 	vstr	s15, [r3, #28]
 80147f4:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 80147f8:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80147fc:	edd3 7a00 	vldr	s15, [r3]
 8014800:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014804:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 8014808:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 801480c:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 8014810:	ed89 6a01 	vstr	s12, [r9, #4]
 8014814:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8014818:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 801481c:	ed83 7a2e 	vstr	s14, [r3, #184]	; 0xb8
 8014820:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 8014824:	edc9 5a06 	vstr	s11, [r9, #24]
 8014828:	ed93 7a01 	vldr	s14, [r3, #4]
 801482c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014830:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014834:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 8014838:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 801483c:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 8014840:	edd3 6a02 	vldr	s13, [r3, #8]
 8014844:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014848:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801484c:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 8014850:	ed82 7a42 	vstr	s14, [r2, #264]	; 0x108
 8014854:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 8014858:	ed92 7a03 	vldr	s14, [r2, #12]
 801485c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014860:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014864:	2300      	movs	r3, #0
 8014866:	f8c9 3000 	str.w	r3, [r9]
 801486a:	ed92 7a56 	vldr	s14, [r2, #344]	; 0x158
 801486e:	edc2 7a4c 	vstr	s15, [r2, #304]	; 0x130
 8014872:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 8014876:	eef1 6a46 	vneg.f32	s13, s12
 801487a:	edc9 6a03 	vstr	s13, [r9, #12]
 801487e:	edd2 6a04 	vldr	s13, [r2, #16]
 8014882:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014886:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801488a:	edd2 7a60 	vldr	s15, [r2, #384]	; 0x180
 801488e:	edd2 6a6a 	vldr	s13, [r2, #424]	; 0x1a8
 8014892:	ed82 7a56 	vstr	s14, [r2, #344]	; 0x158
 8014896:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 801489a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801489e:	ed92 7a05 	vldr	s14, [r2, #20]
 80148a2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80148a6:	ed9d 5a2c 	vldr	s10, [sp, #176]	; 0xb0
 80148aa:	f8c9 3010 	str.w	r3, [r9, #16]
 80148ae:	eee7 7a07 	vfma.f32	s15, s14, s14
 80148b2:	ed92 7a74 	vldr	s14, [r2, #464]	; 0x1d0
 80148b6:	edc2 7a60 	vstr	s15, [r2, #384]	; 0x180
 80148ba:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 80148be:	ed92 6a06 	vldr	s12, [r2, #24]
 80148c2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80148c6:	eee6 6a06 	vfma.f32	s13, s12, s12
 80148ca:	edd2 7a7e 	vldr	s15, [r2, #504]	; 0x1f8
 80148ce:	edc2 6a6a 	vstr	s13, [r2, #424]	; 0x1a8
 80148d2:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 80148d6:	edd2 6a07 	vldr	s13, [r2, #28]
 80148da:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80148de:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80148e2:	eeb1 6a65 	vneg.f32	s12, s11
 80148e6:	ed82 7a74 	vstr	s14, [r2, #464]	; 0x1d0
 80148ea:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 80148ee:	ed92 7a08 	vldr	s14, [r2, #32]
 80148f2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80148f6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80148fa:	eef1 5a45 	vneg.f32	s11, s10
 80148fe:	edc2 7a7e 	vstr	s15, [r2, #504]	; 0x1f8
 8014902:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8014906:	edc9 5a07 	vstr	s11, [r9, #28]
 801490a:	7812      	ldrb	r2, [r2, #0]
 801490c:	f881 21fc 	strb.w	r2, [r1, #508]	; 0x1fc
 8014910:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8014914:	7812      	ldrb	r2, [r2, #0]
 8014916:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 801491a:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 801491e:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8014922:	7852      	ldrb	r2, [r2, #1]
 8014924:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 8014928:	f881 2200 	strb.w	r2, [r1, #512]	; 0x200
 801492c:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8014930:	f8c9 3020 	str.w	r3, [r9, #32]
 8014934:	938b      	str	r3, [sp, #556]	; 0x22c
 8014936:	938f      	str	r3, [sp, #572]	; 0x23c
 8014938:	9393      	str	r3, [sp, #588]	; 0x24c
 801493a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801493c:	7852      	ldrb	r2, [r2, #1]
 801493e:	ed89 6a02 	vstr	s12, [r9, #8]
 8014942:	eef1 6a49 	vneg.f32	s13, s18
 8014946:	eeb1 7a69 	vneg.f32	s14, s19
 801494a:	eef1 7a68 	vneg.f32	s15, s17
 801494e:	ed89 5a05 	vstr	s10, [r9, #20]
 8014952:	ed8d 9a91 	vstr	s18, [sp, #580]	; 0x244
 8014956:	edcd 6a8d 	vstr	s13, [sp, #564]	; 0x234
 801495a:	edcd 9a8c 	vstr	s19, [sp, #560]	; 0x230
 801495e:	ed8d 7a8e 	vstr	s14, [sp, #568]	; 0x238
 8014962:	edcd 8a90 	vstr	s17, [sp, #576]	; 0x240
 8014966:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 801496a:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
 801496e:	b183      	cbz	r3, 8014992 <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 8014970:	b17a      	cbz	r2, 8014992 <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 8014972:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014974:	ed93 7a00 	vldr	s14, [r3]
 8014978:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801497c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014984:	f341 86f5 	ble.w	8016772 <m_kalman_3gyro.isra.0.constprop.0+0x3a1a>
 8014988:	2300      	movs	r3, #0
 801498a:	f881 31ff 	strb.w	r3, [r1, #511]	; 0x1ff
 801498e:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 8014992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014994:	edd3 7a00 	vldr	s15, [r3]
 8014998:	eef4 7aca 	vcmpe.f32	s15, s20
 801499c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a0:	f2c0 86ae 	blt.w	8015700 <m_kalman_3gyro.isra.0.constprop.0+0x29a8>
 80149a4:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 80149a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80149ac:	2200      	movs	r2, #0
 80149ae:	2300      	movs	r3, #0
 80149b0:	f7ec f8aa 	bl	8000b08 <__aeabi_dcmpgt>
 80149b4:	2800      	cmp	r0, #0
 80149b6:	f000 86a3 	beq.w	8015700 <m_kalman_3gyro.isra.0.constprop.0+0x29a8>
 80149ba:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80149be:	2300      	movs	r3, #0
 80149c0:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 80149c4:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 80149c8:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80149cc:	edd2 7a24 	vldr	s15, [r2, #144]	; 0x90
 80149d0:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 80149d4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80149d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80149dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149e0:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 80149e4:	dc06      	bgt.n	80149f4 <m_kalman_3gyro.isra.0.constprop.0+0x1c9c>
 80149e6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8014b7c <m_kalman_3gyro.isra.0.constprop.0+0x1e24>
 80149ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80149ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f2:	d50a      	bpl.n	8014a0a <m_kalman_3gyro.isra.0.constprop.0+0x1cb2>
 80149f4:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80149f8:	2300      	movs	r3, #0
 80149fa:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 80149fe:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 8014a02:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 8014a06:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 8014a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014a0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a12:	eef0 7ae7 	vabs.f32	s15, s15
 8014a16:	ee17 0a90 	vmov	r0, s15
 8014a1a:	f7eb fd8d 	bl	8000538 <__aeabi_f2d>
 8014a1e:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014a22:	4604      	mov	r4, r0
 8014a24:	6818      	ldr	r0, [r3, #0]
 8014a26:	460d      	mov	r5, r1
 8014a28:	f7eb fd86 	bl	8000538 <__aeabi_f2d>
 8014a2c:	4606      	mov	r6, r0
 8014a2e:	460f      	mov	r7, r1
 8014a30:	4620      	mov	r0, r4
 8014a32:	4629      	mov	r1, r5
 8014a34:	4632      	mov	r2, r6
 8014a36:	463b      	mov	r3, r7
 8014a38:	f7ec f85c 	bl	8000af4 <__aeabi_dcmpge>
 8014a3c:	b908      	cbnz	r0, 8014a42 <m_kalman_3gyro.isra.0.constprop.0+0x1cea>
 8014a3e:	4634      	mov	r4, r6
 8014a40:	463d      	mov	r5, r7
 8014a42:	4620      	mov	r0, r4
 8014a44:	4629      	mov	r1, r5
 8014a46:	f7ec f8c7 	bl	8000bd8 <__aeabi_d2f>
 8014a4a:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014a4e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8014b80 <m_kalman_3gyro.isra.0.constprop.0+0x1e28>
 8014a52:	6018      	str	r0, [r3, #0]
 8014a54:	6058      	str	r0, [r3, #4]
 8014a56:	6098      	str	r0, [r3, #8]
 8014a58:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014a5c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8014a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a68:	f300 8621 	bgt.w	80156ae <m_kalman_3gyro.isra.0.constprop.0+0x2956>
 8014a6c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8014b84 <m_kalman_3gyro.isra.0.constprop.0+0x1e2c>
 8014a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a78:	f100 8619 	bmi.w	80156ae <m_kalman_3gyro.isra.0.constprop.0+0x2956>
 8014a7c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014a80:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8014a84:	eef0 7ac8 	vabs.f32	s15, s16
 8014a88:	ee17 0a90 	vmov	r0, s15
 8014a8c:	f7eb fd54 	bl	8000538 <__aeabi_f2d>
 8014a90:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014a94:	4604      	mov	r4, r0
 8014a96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8014a98:	460d      	mov	r5, r1
 8014a9a:	f7eb fd4d 	bl	8000538 <__aeabi_f2d>
 8014a9e:	4606      	mov	r6, r0
 8014aa0:	460f      	mov	r7, r1
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	4629      	mov	r1, r5
 8014aa6:	4632      	mov	r2, r6
 8014aa8:	463b      	mov	r3, r7
 8014aaa:	f7ec f823 	bl	8000af4 <__aeabi_dcmpge>
 8014aae:	2800      	cmp	r0, #0
 8014ab0:	f001 8603 	beq.w	80166ba <m_kalman_3gyro.isra.0.constprop.0+0x3962>
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	4629      	mov	r1, r5
 8014ab8:	f7ec f88e 	bl	8000bd8 <__aeabi_d2f>
 8014abc:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014ac0:	ed93 7a03 	vldr	s14, [r3, #12]
 8014ac4:	6298      	str	r0, [r3, #40]	; 0x28
 8014ac6:	ee68 7a08 	vmul.f32	s15, s16, s16
 8014aca:	ee67 6a07 	vmul.f32	s13, s14, s14
 8014ace:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad6:	f301 85d6 	bgt.w	8016686 <m_kalman_3gyro.isra.0.constprop.0+0x392e>
 8014ada:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014ade:	eeb4 bae7 	vcmpe.f32	s22, s15
 8014ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae6:	f340 85f5 	ble.w	80156d4 <m_kalman_3gyro.isra.0.constprop.0+0x297c>
 8014aea:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014aee:	2300      	movs	r3, #0
 8014af0:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 8014af4:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 8014af8:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8014afc:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8014b00:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8014b04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014b08:	ee7b 6a26 	vadd.f32	s13, s22, s13
 8014b0c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014b10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014b14:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014b18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014b1c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8014b20:	eeb4 bae6 	vcmpe.f32	s22, s13
 8014b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b28:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8014b2c:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 8014b30:	dd05      	ble.n	8014b3e <m_kalman_3gyro.isra.0.constprop.0+0x1de6>
 8014b32:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014b36:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 8014b3a:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 8014b3e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014b42:	f893 38ae 	ldrb.w	r3, [r3, #2222]	; 0x8ae
 8014b46:	2b0e      	cmp	r3, #14
 8014b48:	d804      	bhi.n	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8014b4a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8014b4e:	3305      	adds	r3, #5
 8014b50:	f882 38ae 	strb.w	r3, [r2, #2222]	; 0x8ae
 8014b54:	ab79      	add	r3, sp, #484	; 0x1e4
 8014b56:	9300      	str	r3, [sp, #0]
 8014b58:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014b5c:	eddf 8a0a 	vldr	s17, [pc, #40]	; 8014b88 <m_kalman_3gyro.isra.0.constprop.0+0x1e30>
 8014b60:	9e03      	ldr	r6, [sp, #12]
 8014b62:	f8dd 76d0 	ldr.w	r7, [sp, #1744]	; 0x6d0
 8014b66:	3364      	adds	r3, #100	; 0x64
 8014b68:	9301      	str	r3, [sp, #4]
 8014b6a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014b6e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8014b72:	f50d 780b 	add.w	r8, sp, #556	; 0x22c
 8014b76:	9302      	str	r3, [sp, #8]
 8014b78:	e02a      	b.n	8014bd0 <m_kalman_3gyro.isra.0.constprop.0+0x1e78>
 8014b7a:	bf00      	nop
 8014b7c:	3e4ccccd 	.word	0x3e4ccccd
 8014b80:	3f8f5c29 	.word	0x3f8f5c29
 8014b84:	3f59999a 	.word	0x3f59999a
 8014b88:	00000000 	.word	0x00000000
 8014b8c:	ed18 da03 	vldr	s26, [r8, #-12]
 8014b90:	edd8 da00 	vldr	s27, [r8]
 8014b94:	ed98 ea03 	vldr	s28, [r8, #12]
 8014b98:	9b02      	ldr	r3, [sp, #8]
 8014b9a:	ee3d da0d 	vadd.f32	s26, s26, s26
 8014b9e:	ee7d daad 	vadd.f32	s27, s27, s27
 8014ba2:	ee3e ea0e 	vadd.f32	s28, s28, s28
 8014ba6:	5d9b      	ldrb	r3, [r3, r6]
 8014ba8:	ed8d da79 	vstr	s26, [sp, #484]	; 0x1e4
 8014bac:	edcd da7a 	vstr	s27, [sp, #488]	; 0x1e8
 8014bb0:	ed8d ea7b 	vstr	s28, [sp, #492]	; 0x1ec
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	f040 80f1 	bne.w	8014d9c <m_kalman_3gyro.isra.0.constprop.0+0x2044>
 8014bba:	9b00      	ldr	r3, [sp, #0]
 8014bbc:	3304      	adds	r3, #4
 8014bbe:	9300      	str	r3, [sp, #0]
 8014bc0:	9b01      	ldr	r3, [sp, #4]
 8014bc2:	3304      	adds	r3, #4
 8014bc4:	3601      	adds	r6, #1
 8014bc6:	9301      	str	r3, [sp, #4]
 8014bc8:	f108 0804 	add.w	r8, r8, #4
 8014bcc:	f109 0904 	add.w	r9, r9, #4
 8014bd0:	2e02      	cmp	r6, #2
 8014bd2:	edcd 8a79 	vstr	s17, [sp, #484]	; 0x1e4
 8014bd6:	edcd 8a7a 	vstr	s17, [sp, #488]	; 0x1e8
 8014bda:	edcd 8a7b 	vstr	s17, [sp, #492]	; 0x1ec
 8014bde:	edcd 8a7c 	vstr	s17, [sp, #496]	; 0x1f0
 8014be2:	edcd 8a7d 	vstr	s17, [sp, #500]	; 0x1f4
 8014be6:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
 8014bea:	edcd 8a7f 	vstr	s17, [sp, #508]	; 0x1fc
 8014bee:	edcd 8a80 	vstr	s17, [sp, #512]	; 0x200
 8014bf2:	edcd 8a81 	vstr	s17, [sp, #516]	; 0x204
 8014bf6:	f240 80ca 	bls.w	8014d8e <m_kalman_3gyro.isra.0.constprop.0+0x2036>
 8014bfa:	2e05      	cmp	r6, #5
 8014bfc:	ddc6      	ble.n	8014b8c <m_kalman_3gyro.isra.0.constprop.0+0x1e34>
 8014bfe:	9b02      	ldr	r3, [sp, #8]
 8014c00:	9900      	ldr	r1, [sp, #0]
 8014c02:	5d9b      	ldrb	r3, [r3, r6]
 8014c04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014c08:	f841 2c0c 	str.w	r2, [r1, #-12]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	f040 857f 	bne.w	8015710 <m_kalman_3gyro.isra.0.constprop.0+0x29b8>
 8014c12:	2e0b      	cmp	r6, #11
 8014c14:	d1d1      	bne.n	8014bba <m_kalman_3gyro.isra.0.constprop.0+0x1e62>
 8014c16:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014c1a:	edd3 8a26 	vldr	s17, [r3, #152]	; 0x98
 8014c1e:	ed93 9a25 	vldr	s18, [r3, #148]	; 0x94
 8014c22:	ed93 8a27 	vldr	s16, [r3, #156]	; 0x9c
 8014c26:	ee68 9aa8 	vmul.f32	s19, s17, s17
 8014c2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014c2e:	eee9 9a09 	vfma.f32	s19, s18, s18
 8014c32:	eee8 9a08 	vfma.f32	s19, s16, s16
 8014c36:	eef4 9ae7 	vcmpe.f32	s19, s15
 8014c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c3e:	f100 860f 	bmi.w	8015860 <m_kalman_3gyro.isra.0.constprop.0+0x2b08>
 8014c42:	ed1f aa2f 	vldr	s20, [pc, #-188]	; 8014b88 <m_kalman_3gyro.isra.0.constprop.0+0x1e30>
 8014c46:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014c4a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f000 8579 	beq.w	8015744 <m_kalman_3gyro.isra.0.constprop.0+0x29ec>
 8014c52:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 8014c56:	9907      	ldr	r1, [sp, #28]
 8014c58:	2300      	movs	r3, #0
 8014c5a:	6003      	str	r3, [r0, #0]
 8014c5c:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 8014c60:	600b      	str	r3, [r1, #0]
 8014c62:	6043      	str	r3, [r0, #4]
 8014c64:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 8014c68:	604b      	str	r3, [r1, #4]
 8014c6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014c6e:	608b      	str	r3, [r1, #8]
 8014c70:	6083      	str	r3, [r0, #8]
 8014c72:	60ca      	str	r2, [r1, #12]
 8014c74:	60c2      	str	r2, [r0, #12]
 8014c76:	9f07      	ldr	r7, [sp, #28]
 8014c78:	9904      	ldr	r1, [sp, #16]
 8014c7a:	4638      	mov	r0, r7
 8014c7c:	f7fb ffa8 	bl	8010bd0 <m_q2dcm_eml>
 8014c80:	ed97 9a01 	vldr	s18, [r7, #4]
 8014c84:	edd7 9a00 	vldr	s19, [r7]
 8014c88:	edd7 8a02 	vldr	s17, [r7, #8]
 8014c8c:	ed97 8a03 	vldr	s16, [r7, #12]
 8014c90:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014c94:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8014c98:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014c9c:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014ca0:	ee17 0a90 	vmov	r0, s15
 8014ca4:	f7eb fc48 	bl	8000538 <__aeabi_f2d>
 8014ca8:	ec41 0b10 	vmov	d0, r0, r1
 8014cac:	f007 f9ac 	bl	801c008 <sqrt>
 8014cb0:	ec51 0b10 	vmov	r0, r1, d0
 8014cb4:	f7eb ff90 	bl	8000bd8 <__aeabi_d2f>
 8014cb8:	ee07 0a90 	vmov	s15, r0
 8014cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014cc0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014cc4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014cc8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014cca:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8014ccc:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8014cd0:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014cd4:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014cd8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014cdc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014ce0:	edc7 9a00 	vstr	s19, [r7]
 8014ce4:	ed87 9a01 	vstr	s18, [r7, #4]
 8014ce8:	edc7 8a02 	vstr	s17, [r7, #8]
 8014cec:	ed87 8a03 	vstr	s16, [r7, #12]
 8014cf0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014cf4:	f8dd 76b4 	ldr.w	r7, [sp, #1716]	; 0x6b4
 8014cf8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014cfc:	6821      	ldr	r1, [r4, #0]
 8014cfe:	6862      	ldr	r2, [r4, #4]
 8014d00:	68a3      	ldr	r3, [r4, #8]
 8014d02:	68e0      	ldr	r0, [r4, #12]
 8014d04:	60e8      	str	r0, [r5, #12]
 8014d06:	3410      	adds	r4, #16
 8014d08:	42b4      	cmp	r4, r6
 8014d0a:	6029      	str	r1, [r5, #0]
 8014d0c:	606a      	str	r2, [r5, #4]
 8014d0e:	60ab      	str	r3, [r5, #8]
 8014d10:	f105 0510 	add.w	r5, r5, #16
 8014d14:	d1f2      	bne.n	8014cfc <m_kalman_3gyro.isra.0.constprop.0+0x1fa4>
 8014d16:	6823      	ldr	r3, [r4, #0]
 8014d18:	602b      	str	r3, [r5, #0]
 8014d1a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d1e:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 8014d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014d26:	6013      	str	r3, [r2, #0]
 8014d28:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d30:	6053      	str	r3, [r2, #4]
 8014d32:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014d3a:	6093      	str	r3, [r2, #8]
 8014d3c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014d44:	60d3      	str	r3, [r2, #12]
 8014d46:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014d4e:	6113      	str	r3, [r2, #16]
 8014d50:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014d58:	6153      	str	r3, [r2, #20]
 8014d5a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014d62:	6193      	str	r3, [r2, #24]
 8014d64:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014d6c:	61d3      	str	r3, [r2, #28]
 8014d6e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8014d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014d76:	6213      	str	r3, [r2, #32]
 8014d78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	f8dd 26bc 	ldr.w	r2, [sp, #1724]	; 0x6bc
 8014d80:	6013      	str	r3, [r2, #0]
 8014d82:	f20d 6d24 	addw	sp, sp, #1572	; 0x624
 8014d86:	ecbd 8b10 	vpop	{d8-d15}
 8014d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d8e:	ed99 da00 	vldr	s26, [r9]
 8014d92:	edd9 da03 	vldr	s27, [r9, #12]
 8014d96:	ed99 ea06 	vldr	s28, [r9, #24]
 8014d9a:	e6fd      	b.n	8014b98 <m_kalman_3gyro.isra.0.constprop.0+0x1e40>
 8014d9c:	eef0 ea68 	vmov.f32	s29, s17
 8014da0:	eef0 5a68 	vmov.f32	s11, s17
 8014da4:	eeb0 6a68 	vmov.f32	s12, s17
 8014da8:	eef0 6a68 	vmov.f32	s13, s17
 8014dac:	eef0 fa68 	vmov.f32	s31, s17
 8014db0:	eeb0 fa68 	vmov.f32	s30, s17
 8014db4:	ad70      	add	r5, sp, #448	; 0x1c0
 8014db6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014dba:	9303      	str	r3, [sp, #12]
 8014dbc:	462a      	mov	r2, r5
 8014dbe:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8014dc2:	edc5 8a00 	vstr	s17, [r5]
 8014dc6:	edc5 8a01 	vstr	s17, [r5, #4]
 8014dca:	edc5 8a02 	vstr	s17, [r5, #8]
 8014dce:	edc5 8a03 	vstr	s17, [r5, #12]
 8014dd2:	edc5 8a04 	vstr	s17, [r5, #16]
 8014dd6:	edc5 8a05 	vstr	s17, [r5, #20]
 8014dda:	edc5 8a06 	vstr	s17, [r5, #24]
 8014dde:	edc5 8a07 	vstr	s17, [r5, #28]
 8014de2:	edc5 8a08 	vstr	s17, [r5, #32]
 8014de6:	ecb3 7a01 	vldmia	r3!, {s14}
 8014dea:	ecf2 7a01 	vldmia	r2!, {s15}
 8014dee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df6:	d006      	beq.n	8014e06 <m_kalman_3gyro.isra.0.constprop.0+0x20ae>
 8014df8:	eeb5 da40 	vcmp.f32	s26, #0.0
 8014dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e00:	bf18      	it	ne
 8014e02:	eeed 7a07 	vfmane.f32	s15, s26, s14
 8014e06:	ed93 7a08 	vldr	s14, [r3, #32]
 8014e0a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e12:	d006      	beq.n	8014e22 <m_kalman_3gyro.isra.0.constprop.0+0x20ca>
 8014e14:	eef5 da40 	vcmp.f32	s27, #0.0
 8014e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e1c:	bf18      	it	ne
 8014e1e:	eeed 7a87 	vfmane.f32	s15, s27, s14
 8014e22:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8014e26:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e2e:	d006      	beq.n	8014e3e <m_kalman_3gyro.isra.0.constprop.0+0x20e6>
 8014e30:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8014e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e38:	bf18      	it	ne
 8014e3a:	eeee 7a07 	vfmane.f32	s15, s28, s14
 8014e3e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8014e42:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e4a:	d006      	beq.n	8014e5a <m_kalman_3gyro.isra.0.constprop.0+0x2102>
 8014e4c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8014e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e54:	bf18      	it	ne
 8014e56:	eeef 7a07 	vfmane.f32	s15, s30, s14
 8014e5a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8014e5e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e66:	d006      	beq.n	8014e76 <m_kalman_3gyro.isra.0.constprop.0+0x211e>
 8014e68:	eef5 fa40 	vcmp.f32	s31, #0.0
 8014e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e70:	bf18      	it	ne
 8014e72:	eeef 7a87 	vfmane.f32	s15, s31, s14
 8014e76:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8014e7a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e82:	d006      	beq.n	8014e92 <m_kalman_3gyro.isra.0.constprop.0+0x213a>
 8014e84:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e8c:	bf18      	it	ne
 8014e8e:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8014e92:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8014e96:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e9e:	d006      	beq.n	8014eae <m_kalman_3gyro.isra.0.constprop.0+0x2156>
 8014ea0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ea8:	bf18      	it	ne
 8014eaa:	eee6 7a07 	vfmane.f32	s15, s12, s14
 8014eae:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8014eb2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eba:	d006      	beq.n	8014eca <m_kalman_3gyro.isra.0.constprop.0+0x2172>
 8014ebc:	eef5 5a40 	vcmp.f32	s11, #0.0
 8014ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ec4:	bf18      	it	ne
 8014ec6:	eee5 7a87 	vfmane.f32	s15, s11, s14
 8014eca:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8014ece:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed6:	d006      	beq.n	8014ee6 <m_kalman_3gyro.isra.0.constprop.0+0x218e>
 8014ed8:	eef5 ea40 	vcmp.f32	s29, #0.0
 8014edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ee0:	bf18      	it	ne
 8014ee2:	eeee 7a87 	vfmane.f32	s15, s29, s14
 8014ee6:	428b      	cmp	r3, r1
 8014ee8:	ed42 7a01 	vstr	s15, [r2, #-4]
 8014eec:	f47f af7b 	bne.w	8014de6 <m_kalman_3gyro.isra.0.constprop.0+0x208e>
 8014ef0:	eeb5 da40 	vcmp.f32	s26, #0.0
 8014ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ef8:	f000 83d6 	beq.w	80156a8 <m_kalman_3gyro.isra.0.constprop.0+0x2950>
 8014efc:	edd5 7a00 	vldr	s15, [r5]
 8014f00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f08:	d001      	beq.n	8014f0e <m_kalman_3gyro.isra.0.constprop.0+0x21b6>
 8014f0a:	ee67 7a8d 	vmul.f32	s15, s15, s26
 8014f0e:	eef5 da40 	vcmp.f32	s27, #0.0
 8014f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f16:	ed95 ba01 	vldr	s22, [r5, #4]
 8014f1a:	d006      	beq.n	8014f2a <m_kalman_3gyro.isra.0.constprop.0+0x21d2>
 8014f1c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8014f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f24:	bf18      	it	ne
 8014f26:	eeeb 7a2d 	vfmane.f32	s15, s22, s27
 8014f2a:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8014f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f32:	edd5 9a02 	vldr	s19, [r5, #8]
 8014f36:	d006      	beq.n	8014f46 <m_kalman_3gyro.isra.0.constprop.0+0x21ee>
 8014f38:	eef5 9a40 	vcmp.f32	s19, #0.0
 8014f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f40:	bf18      	it	ne
 8014f42:	eee9 7a8e 	vfmane.f32	s15, s19, s28
 8014f46:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8014f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f4e:	d008      	beq.n	8014f62 <m_kalman_3gyro.isra.0.constprop.0+0x220a>
 8014f50:	ed95 7a03 	vldr	s14, [r5, #12]
 8014f54:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f5c:	bf18      	it	ne
 8014f5e:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8014f62:	eef5 fa40 	vcmp.f32	s31, #0.0
 8014f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f6a:	d008      	beq.n	8014f7e <m_kalman_3gyro.isra.0.constprop.0+0x2226>
 8014f6c:	ed95 7a04 	vldr	s14, [r5, #16]
 8014f70:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f78:	bf18      	it	ne
 8014f7a:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8014f7e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f86:	d008      	beq.n	8014f9a <m_kalman_3gyro.isra.0.constprop.0+0x2242>
 8014f88:	ed95 7a05 	vldr	s14, [r5, #20]
 8014f8c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f94:	bf18      	it	ne
 8014f96:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8014f9a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa2:	d008      	beq.n	8014fb6 <m_kalman_3gyro.isra.0.constprop.0+0x225e>
 8014fa4:	ed95 7a06 	vldr	s14, [r5, #24]
 8014fa8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb0:	bf18      	it	ne
 8014fb2:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8014fb6:	eef5 5a40 	vcmp.f32	s11, #0.0
 8014fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fbe:	d008      	beq.n	8014fd2 <m_kalman_3gyro.isra.0.constprop.0+0x227a>
 8014fc0:	ed95 7a07 	vldr	s14, [r5, #28]
 8014fc4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fcc:	bf18      	it	ne
 8014fce:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8014fd2:	eef5 ea40 	vcmp.f32	s29, #0.0
 8014fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fda:	d008      	beq.n	8014fee <m_kalman_3gyro.isra.0.constprop.0+0x2296>
 8014fdc:	ed95 7a08 	vldr	s14, [r5, #32]
 8014fe0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe8:	bf18      	it	ne
 8014fea:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8014fee:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8014ff2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8014ff6:	ed93 7a00 	vldr	s14, [r3]
 8014ffa:	ed95 8a00 	vldr	s16, [r5]
 8014ffe:	edd5 ba03 	vldr	s23, [r5, #12]
 8015002:	ed95 ca04 	vldr	s24, [r5, #16]
 8015006:	edd5 ca05 	vldr	s25, [r5, #20]
 801500a:	edd5 aa06 	vldr	s21, [r5, #24]
 801500e:	ed95 aa07 	vldr	s20, [r5, #28]
 8015012:	ed95 5a08 	vldr	s10, [r5, #32]
 8015016:	eee7 7a07 	vfma.f32	s15, s14, s14
 801501a:	2e05      	cmp	r6, #5
 801501c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015020:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8015024:	ee2b ba09 	vmul.f32	s22, s22, s18
 8015028:	ee69 9a89 	vmul.f32	s19, s19, s18
 801502c:	ee29 8a08 	vmul.f32	s16, s18, s16
 8015030:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8015034:	ee29 ca0c 	vmul.f32	s24, s18, s24
 8015038:	ee69 ca2c 	vmul.f32	s25, s18, s25
 801503c:	ee69 aa2a 	vmul.f32	s21, s18, s21
 8015040:	ee29 aa0a 	vmul.f32	s20, s18, s20
 8015044:	ee29 9a05 	vmul.f32	s18, s18, s10
 8015048:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 801504c:	edcd 9a69 	vstr	s19, [sp, #420]	; 0x1a4
 8015050:	ed8d 8a67 	vstr	s16, [sp, #412]	; 0x19c
 8015054:	edcd ba6a 	vstr	s23, [sp, #424]	; 0x1a8
 8015058:	ed8d ca6b 	vstr	s24, [sp, #428]	; 0x1ac
 801505c:	edcd ca6c 	vstr	s25, [sp, #432]	; 0x1b0
 8015060:	edcd aa6d 	vstr	s21, [sp, #436]	; 0x1b4
 8015064:	ed8d aa6e 	vstr	s20, [sp, #440]	; 0x1b8
 8015068:	ed8d 9a6f 	vstr	s18, [sp, #444]	; 0x1bc
 801506c:	f240 8087 	bls.w	801517e <m_kalman_3gyro.isra.0.constprop.0+0x2426>
 8015070:	9b01      	ldr	r3, [sp, #4]
 8015072:	eeb5 da40 	vcmp.f32	s26, #0.0
 8015076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801507a:	ed93 7a00 	vldr	s14, [r3]
 801507e:	f000 835e 	beq.w	801573e <m_kalman_3gyro.isra.0.constprop.0+0x29e6>
 8015082:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8015086:	eef5 7a40 	vcmp.f32	s15, #0.0
 801508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801508e:	d001      	beq.n	8015094 <m_kalman_3gyro.isra.0.constprop.0+0x233c>
 8015090:	ee67 7a8d 	vmul.f32	s15, s15, s26
 8015094:	eef5 da40 	vcmp.f32	s27, #0.0
 8015098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801509c:	d008      	beq.n	80150b0 <m_kalman_3gyro.isra.0.constprop.0+0x2358>
 801509e:	ed97 5a26 	vldr	s10, [r7, #152]	; 0x98
 80150a2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80150a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150aa:	bf18      	it	ne
 80150ac:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 80150b0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80150b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b8:	d008      	beq.n	80150cc <m_kalman_3gyro.isra.0.constprop.0+0x2374>
 80150ba:	ed97 5a27 	vldr	s10, [r7, #156]	; 0x9c
 80150be:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80150c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150c6:	bf18      	it	ne
 80150c8:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 80150cc:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80150d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150d4:	d008      	beq.n	80150e8 <m_kalman_3gyro.isra.0.constprop.0+0x2390>
 80150d6:	ed97 5a28 	vldr	s10, [r7, #160]	; 0xa0
 80150da:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80150de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150e2:	bf18      	it	ne
 80150e4:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 80150e8:	eef5 fa40 	vcmp.f32	s31, #0.0
 80150ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150f0:	d008      	beq.n	8015104 <m_kalman_3gyro.isra.0.constprop.0+0x23ac>
 80150f2:	ed97 5a29 	vldr	s10, [r7, #164]	; 0xa4
 80150f6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80150fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150fe:	bf18      	it	ne
 8015100:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 8015104:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801510c:	d008      	beq.n	8015120 <m_kalman_3gyro.isra.0.constprop.0+0x23c8>
 801510e:	ed97 5a2a 	vldr	s10, [r7, #168]	; 0xa8
 8015112:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801511a:	bf18      	it	ne
 801511c:	eee5 7a26 	vfmane.f32	s15, s10, s13
 8015120:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8015124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015128:	d008      	beq.n	801513c <m_kalman_3gyro.isra.0.constprop.0+0x23e4>
 801512a:	ed97 5a2b 	vldr	s10, [r7, #172]	; 0xac
 801512e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015136:	bf18      	it	ne
 8015138:	eee5 7a06 	vfmane.f32	s15, s10, s12
 801513c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015144:	d008      	beq.n	8015158 <m_kalman_3gyro.isra.0.constprop.0+0x2400>
 8015146:	ed97 5a2c 	vldr	s10, [r7, #176]	; 0xb0
 801514a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801514e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015152:	bf18      	it	ne
 8015154:	eee5 7a25 	vfmane.f32	s15, s10, s11
 8015158:	eef5 ea40 	vcmp.f32	s29, #0.0
 801515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015160:	d008      	beq.n	8015174 <m_kalman_3gyro.isra.0.constprop.0+0x241c>
 8015162:	ed97 5a2d 	vldr	s10, [r7, #180]	; 0xb4
 8015166:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801516a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801516e:	bf18      	it	ne
 8015170:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 8015174:	9b01      	ldr	r3, [sp, #4]
 8015176:	ee77 7a67 	vsub.f32	s15, s14, s15
 801517a:	edc3 7a00 	vstr	s15, [r3]
 801517e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8015182:	2100      	movs	r1, #0
 8015184:	4658      	mov	r0, fp
 8015186:	edcd 5a08 	vstr	s11, [sp, #32]
 801518a:	ed8d 6a06 	vstr	s12, [sp, #24]
 801518e:	edcd 6a05 	vstr	s13, [sp, #20]
 8015192:	f006 f8e3 	bl	801b35c <memset>
 8015196:	eddd 5a08 	vldr	s11, [sp, #32]
 801519a:	ed9d 6a06 	vldr	s12, [sp, #24]
 801519e:	eddd 6a05 	vldr	s13, [sp, #20]
 80151a2:	465c      	mov	r4, fp
 80151a4:	aa67      	add	r2, sp, #412	; 0x19c
 80151a6:	465b      	mov	r3, fp
 80151a8:	ecf2 7a01 	vldmia	r2!, {s15}
 80151ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80151b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151b4:	d062      	beq.n	801527c <m_kalman_3gyro.isra.0.constprop.0+0x2524>
 80151b6:	eeb5 da40 	vcmp.f32	s26, #0.0
 80151ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151be:	d005      	beq.n	80151cc <m_kalman_3gyro.isra.0.constprop.0+0x2474>
 80151c0:	ed93 7a00 	vldr	s14, [r3]
 80151c4:	eea7 7a8d 	vfma.f32	s14, s15, s26
 80151c8:	ed83 7a00 	vstr	s14, [r3]
 80151cc:	eef5 da40 	vcmp.f32	s27, #0.0
 80151d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d4:	d005      	beq.n	80151e2 <m_kalman_3gyro.isra.0.constprop.0+0x248a>
 80151d6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80151da:	eea7 7aad 	vfma.f32	s14, s15, s27
 80151de:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 80151e2:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80151e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ea:	d005      	beq.n	80151f8 <m_kalman_3gyro.isra.0.constprop.0+0x24a0>
 80151ec:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80151f0:	eea7 7a8e 	vfma.f32	s14, s15, s28
 80151f4:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 80151f8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80151fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015200:	d005      	beq.n	801520e <m_kalman_3gyro.isra.0.constprop.0+0x24b6>
 8015202:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8015206:	eea7 7a8f 	vfma.f32	s14, s15, s30
 801520a:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 801520e:	eef5 fa40 	vcmp.f32	s31, #0.0
 8015212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015216:	d005      	beq.n	8015224 <m_kalman_3gyro.isra.0.constprop.0+0x24cc>
 8015218:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 801521c:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8015220:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8015224:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801522c:	d005      	beq.n	801523a <m_kalman_3gyro.isra.0.constprop.0+0x24e2>
 801522e:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8015232:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015236:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 801523a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015242:	d005      	beq.n	8015250 <m_kalman_3gyro.isra.0.constprop.0+0x24f8>
 8015244:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8015248:	eea7 7a86 	vfma.f32	s14, s15, s12
 801524c:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 8015250:	eef5 5a40 	vcmp.f32	s11, #0.0
 8015254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015258:	d005      	beq.n	8015266 <m_kalman_3gyro.isra.0.constprop.0+0x250e>
 801525a:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 801525e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015262:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 8015266:	eef5 ea40 	vcmp.f32	s29, #0.0
 801526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801526e:	d005      	beq.n	801527c <m_kalman_3gyro.isra.0.constprop.0+0x2524>
 8015270:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 8015274:	eea7 7aae 	vfma.f32	s14, s15, s29
 8015278:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 801527c:	4295      	cmp	r5, r2
 801527e:	f103 0304 	add.w	r3, r3, #4
 8015282:	d191      	bne.n	80151a8 <m_kalman_3gyro.isra.0.constprop.0+0x2450>
 8015284:	f8df e690 	ldr.w	lr, [pc, #1680]	; 8015918 <m_kalman_3gyro.isra.0.constprop.0+0x2bc0>
 8015288:	f8df c690 	ldr.w	ip, [pc, #1680]	; 801591c <m_kalman_3gyro.isra.0.constprop.0+0x2bc4>
 801528c:	f50b 70a2 	add.w	r0, fp, #324	; 0x144
 8015290:	465b      	mov	r3, fp
 8015292:	2200      	movs	r2, #0
 8015294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015298:	fb0e f102 	mul.w	r1, lr, r2
 801529c:	ebbc 0f71 	cmp.w	ip, r1, ror #1
 80152a0:	edd3 7a00 	vldr	s15, [r3]
 80152a4:	f0c0 81da 	bcc.w	801565c <m_kalman_3gyro.isra.0.constprop.0+0x2904>
 80152a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152ac:	3201      	adds	r2, #1
 80152ae:	ece3 7a01 	vstmia	r3!, {s15}
 80152b2:	4298      	cmp	r0, r3
 80152b4:	d1f0      	bne.n	8015298 <m_kalman_3gyro.isra.0.constprop.0+0x2540>
 80152b6:	ed9d da03 	vldr	s26, [sp, #12]
 80152ba:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80152be:	ee1d 1a10 	vmov	r1, s26
 80152c2:	4650      	mov	r0, sl
 80152c4:	f006 f83c 	bl	801b340 <memcpy>
 80152c8:	2100      	movs	r1, #0
 80152ca:	ee1d 0a10 	vmov	r0, s26
 80152ce:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80152d2:	f006 f843 	bl	801b35c <memset>
 80152d6:	46bc      	mov	ip, r7
 80152d8:	2000      	movs	r0, #0
 80152da:	f50d 61c4 	add.w	r1, sp, #1568	; 0x620
 80152de:	ecf4 3a01 	vldmia	r4!, {s7}
 80152e2:	ed94 4a08 	vldr	s8, [r4, #32]
 80152e6:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 80152ea:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 80152ee:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 80152f2:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 80152f6:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 80152fa:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 80152fe:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 8015302:	4653      	mov	r3, sl
 8015304:	4662      	mov	r2, ip
 8015306:	eef5 3a40 	vcmp.f32	s7, #0.0
 801530a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801530e:	d00c      	beq.n	801532a <m_kalman_3gyro.isra.0.constprop.0+0x25d2>
 8015310:	ed93 3a00 	vldr	s6, [r3]
 8015314:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801531c:	d005      	beq.n	801532a <m_kalman_3gyro.isra.0.constprop.0+0x25d2>
 801531e:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 8015322:	eee3 2a83 	vfma.f32	s5, s7, s6
 8015326:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 801532a:	eeb5 4a40 	vcmp.f32	s8, #0.0
 801532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015332:	d00c      	beq.n	801534e <m_kalman_3gyro.isra.0.constprop.0+0x25f6>
 8015334:	ed93 3a01 	vldr	s6, [r3, #4]
 8015338:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015340:	d005      	beq.n	801534e <m_kalman_3gyro.isra.0.constprop.0+0x25f6>
 8015342:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 8015346:	eee4 2a03 	vfma.f32	s5, s8, s6
 801534a:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 801534e:	eef5 4a40 	vcmp.f32	s9, #0.0
 8015352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015356:	d00c      	beq.n	8015372 <m_kalman_3gyro.isra.0.constprop.0+0x261a>
 8015358:	ed93 3a02 	vldr	s6, [r3, #8]
 801535c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015364:	d005      	beq.n	8015372 <m_kalman_3gyro.isra.0.constprop.0+0x261a>
 8015366:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 801536a:	eee4 2a83 	vfma.f32	s5, s9, s6
 801536e:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8015372:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8015376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537a:	d00c      	beq.n	8015396 <m_kalman_3gyro.isra.0.constprop.0+0x263e>
 801537c:	ed93 3a03 	vldr	s6, [r3, #12]
 8015380:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015388:	d005      	beq.n	8015396 <m_kalman_3gyro.isra.0.constprop.0+0x263e>
 801538a:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 801538e:	eee5 2a03 	vfma.f32	s5, s10, s6
 8015392:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8015396:	eef5 5a40 	vcmp.f32	s11, #0.0
 801539a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801539e:	d00c      	beq.n	80153ba <m_kalman_3gyro.isra.0.constprop.0+0x2662>
 80153a0:	ed93 3a04 	vldr	s6, [r3, #16]
 80153a4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80153a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ac:	d005      	beq.n	80153ba <m_kalman_3gyro.isra.0.constprop.0+0x2662>
 80153ae:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80153b2:	eee5 2a83 	vfma.f32	s5, s11, s6
 80153b6:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80153ba:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80153be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c2:	d00c      	beq.n	80153de <m_kalman_3gyro.isra.0.constprop.0+0x2686>
 80153c4:	ed93 3a05 	vldr	s6, [r3, #20]
 80153c8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80153cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d0:	d005      	beq.n	80153de <m_kalman_3gyro.isra.0.constprop.0+0x2686>
 80153d2:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80153d6:	eee6 2a03 	vfma.f32	s5, s12, s6
 80153da:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80153de:	eef5 6a40 	vcmp.f32	s13, #0.0
 80153e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e6:	d00c      	beq.n	8015402 <m_kalman_3gyro.isra.0.constprop.0+0x26aa>
 80153e8:	ed93 3a06 	vldr	s6, [r3, #24]
 80153ec:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80153f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f4:	d005      	beq.n	8015402 <m_kalman_3gyro.isra.0.constprop.0+0x26aa>
 80153f6:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80153fa:	eee6 2a83 	vfma.f32	s5, s13, s6
 80153fe:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8015402:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801540a:	d00c      	beq.n	8015426 <m_kalman_3gyro.isra.0.constprop.0+0x26ce>
 801540c:	ed93 3a07 	vldr	s6, [r3, #28]
 8015410:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015418:	d005      	beq.n	8015426 <m_kalman_3gyro.isra.0.constprop.0+0x26ce>
 801541a:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 801541e:	eee7 2a03 	vfma.f32	s5, s14, s6
 8015422:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8015426:	eef5 7a40 	vcmp.f32	s15, #0.0
 801542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801542e:	d00c      	beq.n	801544a <m_kalman_3gyro.isra.0.constprop.0+0x26f2>
 8015430:	ed93 3a08 	vldr	s6, [r3, #32]
 8015434:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8015438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801543c:	d005      	beq.n	801544a <m_kalman_3gyro.isra.0.constprop.0+0x26f2>
 801543e:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 8015442:	eee7 2a83 	vfma.f32	s5, s15, s6
 8015446:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 801544a:	3324      	adds	r3, #36	; 0x24
 801544c:	4299      	cmp	r1, r3
 801544e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8015452:	f47f af58 	bne.w	8015306 <m_kalman_3gyro.isra.0.constprop.0+0x25ae>
 8015456:	3001      	adds	r0, #1
 8015458:	2809      	cmp	r0, #9
 801545a:	f10c 0c04 	add.w	ip, ip, #4
 801545e:	f47f af3e 	bne.w	80152de <m_kalman_3gyro.isra.0.constprop.0+0x2586>
 8015462:	9b01      	ldr	r3, [sp, #4]
 8015464:	edc5 8a01 	vstr	s17, [r5, #4]
 8015468:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015470:	edd3 7a00 	vldr	s15, [r3]
 8015474:	f000 80fc 	beq.w	8015670 <m_kalman_3gyro.isra.0.constprop.0+0x2918>
 8015478:	eef5 7a40 	vcmp.f32	s15, #0.0
 801547c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015480:	f000 80f6 	beq.w	8015670 <m_kalman_3gyro.isra.0.constprop.0+0x2918>
 8015484:	ee27 8a88 	vmul.f32	s16, s15, s16
 8015488:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801548c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015490:	ed85 8a00 	vstr	s16, [r5]
 8015494:	f040 81cc 	bne.w	8015830 <m_kalman_3gyro.isra.0.constprop.0+0x2ad8>
 8015498:	eef5 9a40 	vcmp.f32	s19, #0.0
 801549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a0:	f040 808b 	bne.w	80155ba <m_kalman_3gyro.isra.0.constprop.0+0x2862>
 80154a4:	eef5 ba40 	vcmp.f32	s23, #0.0
 80154a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ac:	edc5 8a02 	vstr	s17, [r5, #8]
 80154b0:	d007      	beq.n	80154c2 <m_kalman_3gyro.isra.0.constprop.0+0x276a>
 80154b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80154b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ba:	f041 8011 	bne.w	80164e0 <m_kalman_3gyro.isra.0.constprop.0+0x3788>
 80154be:	eef0 ba67 	vmov.f32	s23, s15
 80154c2:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80154c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ca:	edc5 8a03 	vstr	s17, [r5, #12]
 80154ce:	f000 808a 	beq.w	80155e6 <m_kalman_3gyro.isra.0.constprop.0+0x288e>
 80154d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80154d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154da:	f041 8018 	bne.w	801650e <m_kalman_3gyro.isra.0.constprop.0+0x37b6>
 80154de:	edc5 8a04 	vstr	s17, [r5, #16]
 80154e2:	eef0 ca67 	vmov.f32	s25, s15
 80154e6:	eeb0 ca67 	vmov.f32	s24, s15
 80154ea:	eef5 aa40 	vcmp.f32	s21, #0.0
 80154ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154f2:	edc5 8a05 	vstr	s17, [r5, #20]
 80154f6:	f000 8094 	beq.w	8015622 <m_kalman_3gyro.isra.0.constprop.0+0x28ca>
 80154fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80154fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015502:	f040 87ea 	bne.w	80164da <m_kalman_3gyro.isra.0.constprop.0+0x3782>
 8015506:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801550e:	edc5 8a06 	vstr	s17, [r5, #24]
 8015512:	f040 819a 	bne.w	801584a <m_kalman_3gyro.isra.0.constprop.0+0x2af2>
 8015516:	eef0 aa4a 	vmov.f32	s21, s20
 801551a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801551e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015522:	edc5 8a07 	vstr	s17, [r5, #28]
 8015526:	f000 80f0 	beq.w	801570a <m_kalman_3gyro.isra.0.constprop.0+0x29b2>
 801552a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015532:	f000 80e8 	beq.w	8015706 <m_kalman_3gyro.isra.0.constprop.0+0x29ae>
 8015536:	eeb0 3a68 	vmov.f32	s6, s17
 801553a:	ee29 9a27 	vmul.f32	s18, s18, s15
 801553e:	edd7 3a25 	vldr	s7, [r7, #148]	; 0x94
 8015542:	ed97 4a26 	vldr	s8, [r7, #152]	; 0x98
 8015546:	edd7 4a27 	vldr	s9, [r7, #156]	; 0x9c
 801554a:	ed97 5a28 	vldr	s10, [r7, #160]	; 0xa0
 801554e:	edd7 5a29 	vldr	s11, [r7, #164]	; 0xa4
 8015552:	ed97 6a2a 	vldr	s12, [r7, #168]	; 0xa8
 8015556:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 801555a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801555e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8015562:	ed85 9a08 	vstr	s18, [r5, #32]
 8015566:	ee33 8a88 	vadd.f32	s16, s7, s16
 801556a:	ee74 9a29 	vadd.f32	s19, s8, s19
 801556e:	ee74 baab 	vadd.f32	s23, s9, s23
 8015572:	ee35 ca0c 	vadd.f32	s24, s10, s24
 8015576:	ee75 caac 	vadd.f32	s25, s11, s25
 801557a:	ee76 aa2a 	vadd.f32	s21, s12, s21
 801557e:	ee36 aa8a 	vadd.f32	s20, s13, s20
 8015582:	ee37 7a03 	vadd.f32	s14, s14, s6
 8015586:	ee37 9a89 	vadd.f32	s18, s15, s18
 801558a:	ed87 8a25 	vstr	s16, [r7, #148]	; 0x94
 801558e:	edc7 9a26 	vstr	s19, [r7, #152]	; 0x98
 8015592:	edc7 ba27 	vstr	s23, [r7, #156]	; 0x9c
 8015596:	ed87 ca28 	vstr	s24, [r7, #160]	; 0xa0
 801559a:	edc7 ca29 	vstr	s25, [r7, #164]	; 0xa4
 801559e:	edc7 aa2a 	vstr	s21, [r7, #168]	; 0xa8
 80155a2:	ed87 aa2b 	vstr	s20, [r7, #172]	; 0xac
 80155a6:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 80155aa:	ed87 9a2d 	vstr	s18, [r7, #180]	; 0xb4
 80155ae:	f7ff bb30 	b.w	8014c12 <m_kalman_3gyro.isra.0.constprop.0+0x1eba>
 80155b2:	ed9f bad8 	vldr	s22, [pc, #864]	; 8015914 <m_kalman_3gyro.isra.0.constprop.0+0x2bbc>
 80155b6:	eeb0 8a4b 	vmov.f32	s16, s22
 80155ba:	ee27 7aa9 	vmul.f32	s14, s15, s19
 80155be:	eef5 ba40 	vcmp.f32	s23, #0.0
 80155c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155c6:	ed85 7a02 	vstr	s14, [r5, #8]
 80155ca:	f040 86fe 	bne.w	80163ca <m_kalman_3gyro.isra.0.constprop.0+0x3672>
 80155ce:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80155d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155d6:	eef0 ba47 	vmov.f32	s23, s14
 80155da:	eef0 9a4b 	vmov.f32	s19, s22
 80155de:	edc5 8a03 	vstr	s17, [r5, #12]
 80155e2:	f47f af76 	bne.w	80154d2 <m_kalman_3gyro.isra.0.constprop.0+0x277a>
 80155e6:	eef5 ca40 	vcmp.f32	s25, #0.0
 80155ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ee:	edc5 8a04 	vstr	s17, [r5, #16]
 80155f2:	f43f af7a 	beq.w	80154ea <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 80155f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80155fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155fe:	f000 86dc 	beq.w	80163ba <m_kalman_3gyro.isra.0.constprop.0+0x3662>
 8015602:	eeb0 7a68 	vmov.f32	s14, s17
 8015606:	ee67 6aac 	vmul.f32	s13, s15, s25
 801560a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015612:	edc5 6a05 	vstr	s13, [r5, #20]
 8015616:	f040 86bf 	bne.w	8016398 <m_kalman_3gyro.isra.0.constprop.0+0x3640>
 801561a:	eef0 aa66 	vmov.f32	s21, s13
 801561e:	eef0 ca47 	vmov.f32	s25, s14
 8015622:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8015626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801562a:	edc5 8a06 	vstr	s17, [r5, #24]
 801562e:	f43f af74 	beq.w	801551a <m_kalman_3gyro.isra.0.constprop.0+0x27c2>
 8015632:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801563a:	f000 8108 	beq.w	801584e <m_kalman_3gyro.isra.0.constprop.0+0x2af6>
 801563e:	eeb0 7a68 	vmov.f32	s14, s17
 8015642:	ee27 3a8a 	vmul.f32	s6, s15, s20
 8015646:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801564e:	ed85 3a07 	vstr	s6, [r5, #28]
 8015652:	eeb0 aa47 	vmov.f32	s20, s14
 8015656:	f47f af70 	bne.w	801553a <m_kalman_3gyro.isra.0.constprop.0+0x27e2>
 801565a:	e770      	b.n	801553e <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 801565c:	eef1 7a67 	vneg.f32	s15, s15
 8015660:	ece3 7a01 	vstmia	r3!, {s15}
 8015664:	4298      	cmp	r0, r3
 8015666:	f102 0201 	add.w	r2, r2, #1
 801566a:	f47f ae15 	bne.w	8015298 <m_kalman_3gyro.isra.0.constprop.0+0x2540>
 801566e:	e622      	b.n	80152b6 <m_kalman_3gyro.isra.0.constprop.0+0x255e>
 8015670:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8015674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015678:	edc5 8a00 	vstr	s17, [r5]
 801567c:	d005      	beq.n	801568a <m_kalman_3gyro.isra.0.constprop.0+0x2932>
 801567e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015686:	f040 80d1 	bne.w	801582c <m_kalman_3gyro.isra.0.constprop.0+0x2ad4>
 801568a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801568e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015692:	d051      	beq.n	8015738 <m_kalman_3gyro.isra.0.constprop.0+0x29e0>
 8015694:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801569c:	d189      	bne.n	80155b2 <m_kalman_3gyro.isra.0.constprop.0+0x285a>
 801569e:	eef0 9a67 	vmov.f32	s19, s15
 80156a2:	eeb0 8a67 	vmov.f32	s16, s15
 80156a6:	e6fd      	b.n	80154a4 <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 80156a8:	eef0 7a4d 	vmov.f32	s15, s26
 80156ac:	e42f      	b.n	8014f0e <m_kalman_3gyro.isra.0.constprop.0+0x21b6>
 80156ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80156b2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80156b6:	eeb4 bae7 	vcmpe.f32	s22, s15
 80156ba:	2300      	movs	r3, #0
 80156bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c0:	f882 31ff 	strb.w	r3, [r2, #511]	; 0x1ff
 80156c4:	f8a2 3200 	strh.w	r3, [r2, #512]	; 0x200
 80156c8:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 80156cc:	f882 3206 	strb.w	r3, [r2, #518]	; 0x206
 80156d0:	f73f aa0b 	bgt.w	8014aea <m_kalman_3gyro.isra.0.constprop.0+0x1d92>
 80156d4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80156d8:	f893 28ae 	ldrb.w	r2, [r3, #2222]	; 0x8ae
 80156dc:	2a00      	cmp	r2, #0
 80156de:	f000 8702 	beq.w	80164e6 <m_kalman_3gyro.isra.0.constprop.0+0x378e>
 80156e2:	4619      	mov	r1, r3
 80156e4:	3a01      	subs	r2, #1
 80156e6:	2300      	movs	r3, #0
 80156e8:	f881 28ae 	strb.w	r2, [r1, #2222]	; 0x8ae
 80156ec:	f8a1 31fc 	strh.w	r3, [r1, #508]	; 0x1fc
 80156f0:	f881 31fe 	strb.w	r3, [r1, #510]	; 0x1fe
 80156f4:	f881 3205 	strb.w	r3, [r1, #517]	; 0x205
 80156f8:	f881 3207 	strb.w	r3, [r1, #519]	; 0x207
 80156fc:	f7ff ba2a 	b.w	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8015700:	2301      	movs	r3, #1
 8015702:	f7ff b961 	b.w	80149c8 <m_kalman_3gyro.isra.0.constprop.0+0x1c70>
 8015706:	eeb0 9a67 	vmov.f32	s18, s15
 801570a:	eeb0 3a49 	vmov.f32	s6, s18
 801570e:	e716      	b.n	801553e <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 8015710:	ed9d fa7c 	vldr	s30, [sp, #496]	; 0x1f0
 8015714:	eddd fa7d 	vldr	s31, [sp, #500]	; 0x1f4
 8015718:	eddd 6a7e 	vldr	s13, [sp, #504]	; 0x1f8
 801571c:	ed9d 6a7f 	vldr	s12, [sp, #508]	; 0x1fc
 8015720:	eddd 5a80 	vldr	s11, [sp, #512]	; 0x200
 8015724:	eddd ea81 	vldr	s29, [sp, #516]	; 0x204
 8015728:	eeb0 ea68 	vmov.f32	s28, s17
 801572c:	eef0 da68 	vmov.f32	s27, s17
 8015730:	eeb0 da68 	vmov.f32	s26, s17
 8015734:	f7ff bb3e 	b.w	8014db4 <m_kalman_3gyro.isra.0.constprop.0+0x205c>
 8015738:	eeb0 8a69 	vmov.f32	s16, s19
 801573c:	e6b2      	b.n	80154a4 <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 801573e:	eef0 7a4d 	vmov.f32	s15, s26
 8015742:	e4a7      	b.n	8015094 <m_kalman_3gyro.isra.0.constprop.0+0x233c>
 8015744:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8015748:	789b      	ldrb	r3, [r3, #2]
 801574a:	2b00      	cmp	r3, #0
 801574c:	f000 8660 	beq.w	8016410 <m_kalman_3gyro.isra.0.constprop.0+0x36b8>
 8015750:	9b07      	ldr	r3, [sp, #28]
 8015752:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 8015756:	eeea 9a0a 	vfma.f32	s19, s20, s20
 801575a:	685a      	ldr	r2, [r3, #4]
 801575c:	6899      	ldr	r1, [r3, #8]
 801575e:	681c      	ldr	r4, [r3, #0]
 8015760:	9248      	str	r2, [sp, #288]	; 0x120
 8015762:	461d      	mov	r5, r3
 8015764:	eeb1 9a49 	vneg.f32	s18, s18
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	9149      	str	r1, [sp, #292]	; 0x124
 801576c:	eef1 8a68 	vneg.f32	s17, s17
 8015770:	eeb1 8a48 	vneg.f32	s16, s16
 8015774:	462a      	mov	r2, r5
 8015776:	a84f      	add	r0, sp, #316	; 0x13c
 8015778:	a947      	add	r1, sp, #284	; 0x11c
 801577a:	934a      	str	r3, [sp, #296]	; 0x128
 801577c:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 8015780:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 8015784:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 8015788:	9447      	str	r4, [sp, #284]	; 0x11c
 801578a:	f7fb f9e7 	bl	8010b5c <m_qmult_eml>
 801578e:	ee19 0a90 	vmov	r0, s19
 8015792:	ed8d 9a47 	vstr	s18, [sp, #284]	; 0x11c
 8015796:	edcd 8a48 	vstr	s17, [sp, #288]	; 0x120
 801579a:	ed8d 8a49 	vstr	s16, [sp, #292]	; 0x124
 801579e:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 80157a2:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 80157a6:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 80157aa:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 80157ae:	ed8d aa4a 	vstr	s20, [sp, #296]	; 0x128
 80157b2:	f7ea fec1 	bl	8000538 <__aeabi_f2d>
 80157b6:	ec41 0b10 	vmov	d0, r0, r1
 80157ba:	f006 fc25 	bl	801c008 <sqrt>
 80157be:	ec51 0b10 	vmov	r0, r1, d0
 80157c2:	f7eb fa09 	bl	8000bd8 <__aeabi_d2f>
 80157c6:	ee07 0a90 	vmov	s15, r0
 80157ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80157ce:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80157d2:	ac4b      	add	r4, sp, #300	; 0x12c
 80157d4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80157d8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80157dc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80157e0:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80157e4:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 80157e8:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 80157ec:	ed8d 8a4d 	vstr	s16, [sp, #308]	; 0x134
 80157f0:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 80157f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157f6:	f8dd 46b8 	ldr.w	r4, [sp, #1720]	; 0x6b8
 80157fa:	6020      	str	r0, [r4, #0]
 80157fc:	6061      	str	r1, [r4, #4]
 80157fe:	60a2      	str	r2, [r4, #8]
 8015800:	60e3      	str	r3, [r4, #12]
 8015802:	f7ff ba38 	b.w	8014c76 <m_kalman_3gyro.isra.0.constprop.0+0x1f1e>
 8015806:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801580a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 801580e:	2b31      	cmp	r3, #49	; 0x31
 8015810:	f73e af1f 	bgt.w	8014652 <m_kalman_3gyro.isra.0.constprop.0+0x18fa>
 8015814:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015818:	2200      	movs	r2, #0
 801581a:	3301      	adds	r3, #1
 801581c:	f8c1 3458 	str.w	r3, [r1, #1112]	; 0x458
 8015820:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8015824:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 8015828:	f7fe bf13 	b.w	8014652 <m_kalman_3gyro.isra.0.constprop.0+0x18fa>
 801582c:	eeb0 8a68 	vmov.f32	s16, s17
 8015830:	ee2b ba27 	vmul.f32	s22, s22, s15
 8015834:	eef5 9a40 	vcmp.f32	s19, #0.0
 8015838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801583c:	ed85 ba01 	vstr	s22, [r5, #4]
 8015840:	f47f aebb 	bne.w	80155ba <m_kalman_3gyro.isra.0.constprop.0+0x2862>
 8015844:	eef0 9a4b 	vmov.f32	s19, s22
 8015848:	e62c      	b.n	80154a4 <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 801584a:	eef0 aa67 	vmov.f32	s21, s15
 801584e:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8015914 <m_kalman_3gyro.isra.0.constprop.0+0x2bbc>
 8015852:	edc5 8a07 	vstr	s17, [r5, #28]
 8015856:	eeb0 3a68 	vmov.f32	s6, s17
 801585a:	eeb0 aa68 	vmov.f32	s20, s17
 801585e:	e66e      	b.n	801553e <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 8015860:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8015864:	ee17 0a90 	vmov	r0, s15
 8015868:	f7ea fe66 	bl	8000538 <__aeabi_f2d>
 801586c:	ec41 0b10 	vmov	d0, r0, r1
 8015870:	f006 fbca 	bl	801c008 <sqrt>
 8015874:	ec51 0b10 	vmov	r0, r1, d0
 8015878:	f7eb f9ae 	bl	8000bd8 <__aeabi_d2f>
 801587c:	ee0a 0a10 	vmov	s20, r0
 8015880:	f7ff b9e1 	b.w	8014c46 <m_kalman_3gyro.isra.0.constprop.0+0x1eee>
 8015884:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015888:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801588c:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 8015890:	f240 1201 	movw	r2, #257	; 0x101
 8015894:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8015898:	9908      	ldr	r1, [sp, #32]
 801589a:	680a      	ldr	r2, [r1, #0]
 801589c:	67c2      	str	r2, [r0, #124]	; 0x7c
 801589e:	684a      	ldr	r2, [r1, #4]
 80158a0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80158a4:	688a      	ldr	r2, [r1, #8]
 80158a6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 80158aa:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 80158ae:	7013      	strb	r3, [r2, #0]
 80158b0:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 80158b4:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 80158b8:	3301      	adds	r3, #1
 80158ba:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 80158be:	b16a      	cbz	r2, 80158dc <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 80158c0:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 80158c2:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80158c6:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 80158ca:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 80158ce:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 80158d2:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
 80158d6:	2200      	movs	r2, #0
 80158d8:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 80158dc:	2b1e      	cmp	r3, #30
 80158de:	d114      	bne.n	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 80158e0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80158e4:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 80158e8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80158ec:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80158f0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80158f4:	6018      	str	r0, [r3, #0]
 80158f6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80158fa:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80158fe:	6019      	str	r1, [r3, #0]
 8015900:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8015904:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8015908:	601a      	str	r2, [r3, #0]
 801590a:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 801590e:	f7fe be8f 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8015912:	bf00      	nop
 8015914:	00000000 	.word	0x00000000
 8015918:	cccccccd 	.word	0xcccccccd
 801591c:	19999999 	.word	0x19999999
 8015920:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8015924:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8015928:	ed93 7a00 	vldr	s14, [r3]
 801592c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8015930:	ed8d 7a01 	vstr	s14, [sp, #4]
 8015934:	f603 0374 	addw	r3, r3, #2164	; 0x874
 8015938:	ee67 7a07 	vmul.f32	s15, s14, s14
 801593c:	ed93 ca00 	vldr	s24, [r3]
 8015940:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8015944:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8015948:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 801594c:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 8015950:	ed93 ea00 	vldr	s28, [r3]
 8015954:	eeee 7a0e 	vfma.f32	s15, s28, s28
 8015958:	ee17 0a90 	vmov	r0, s15
 801595c:	f7ea fdec 	bl	8000538 <__aeabi_f2d>
 8015960:	ec41 0b10 	vmov	d0, r0, r1
 8015964:	f006 fb50 	bl	801c008 <sqrt>
 8015968:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801596c:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8015970:	ed93 da00 	vldr	s26, [r3]
 8015974:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8015978:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 801597c:	ed93 fa00 	vldr	s30, [r3]
 8015980:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8015984:	ee6d 7a0d 	vmul.f32	s15, s26, s26
 8015988:	f603 0388 	addw	r3, r3, #2184	; 0x888
 801598c:	eeef 7a0f 	vfma.f32	s15, s30, s30
 8015990:	edd3 ca00 	vldr	s25, [r3]
 8015994:	eeec 7aac 	vfma.f32	s15, s25, s25
 8015998:	ec57 6b10 	vmov	r6, r7, d0
 801599c:	ee17 0a90 	vmov	r0, s15
 80159a0:	f7ea fdca 	bl	8000538 <__aeabi_f2d>
 80159a4:	ec41 0b10 	vmov	d0, r0, r1
 80159a8:	f006 fb2e 	bl	801c008 <sqrt>
 80159ac:	ec51 0b10 	vmov	r0, r1, d0
 80159b0:	f7eb f912 	bl	8000bd8 <__aeabi_d2f>
 80159b4:	4be0      	ldr	r3, [pc, #896]	; (8015d38 <m_kalman_3gyro.isra.0.constprop.0+0x2fe0>)
 80159b6:	ee07 0a90 	vmov	s15, r0
 80159ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80159be:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c
 80159c2:	4639      	mov	r1, r7
 80159c4:	4630      	mov	r0, r6
 80159c6:	eec6 ea27 	vdiv.f32	s29, s12, s15
 80159ca:	ed8d 6a00 	vstr	s12, [sp]
 80159ce:	f7eb f903 	bl	8000bd8 <__aeabi_d2f>
 80159d2:	ed9d 6a00 	vldr	s12, [sp]
 80159d6:	ed9d 7a01 	vldr	s14, [sp, #4]
 80159da:	ee07 0a90 	vmov	s15, r0
 80159de:	eec6 7a27 	vdiv.f32	s15, s12, s15
 80159e2:	ee2e fa8f 	vmul.f32	s30, s29, s30
 80159e6:	ee67 6a8e 	vmul.f32	s13, s15, s28
 80159ea:	ee6e caac 	vmul.f32	s25, s29, s25
 80159ee:	ee2f ea66 	vnmul.f32	s28, s30, s13
 80159f2:	ee27 ca8c 	vmul.f32	s24, s15, s24
 80159f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80159fa:	eeac ea8c 	vfma.f32	s28, s25, s24
 80159fe:	ee2e da8d 	vmul.f32	s26, s29, s26
 8015a02:	ee67 eaec 	vnmul.f32	s29, s15, s25
 8015a06:	ee2e 7a0e 	vmul.f32	s14, s28, s28
 8015a0a:	eee6 ea8d 	vfma.f32	s29, s13, s26
 8015a0e:	ee2c ca4d 	vnmul.f32	s24, s24, s26
 8015a12:	eea7 ca8f 	vfma.f32	s24, s15, s30
 8015a16:	eef0 7a47 	vmov.f32	s15, s14
 8015a1a:	eeee 7aae 	vfma.f32	s15, s29, s29
 8015a1e:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8015a22:	ee17 0a90 	vmov	r0, s15
 8015a26:	f7ea fd87 	bl	8000538 <__aeabi_f2d>
 8015a2a:	ec41 0b10 	vmov	d0, r0, r1
 8015a2e:	f006 faeb 	bl	801c008 <sqrt>
 8015a32:	ec51 0b10 	vmov	r0, r1, d0
 8015a36:	f7eb f8cf 	bl	8000bd8 <__aeabi_d2f>
 8015a3a:	ed9d 6a00 	vldr	s12, [sp]
 8015a3e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015a40:	ed89 fa02 	vstr	s30, [r9, #8]
 8015a44:	ee07 0a90 	vmov	s15, r0
 8015a48:	eec6 7a27 	vdiv.f32	s15, s12, s15
 8015a4c:	aa79      	add	r2, sp, #484	; 0x1e4
 8015a4e:	4648      	mov	r0, r9
 8015a50:	ee2e ea27 	vmul.f32	s28, s28, s15
 8015a54:	ee2c ca27 	vmul.f32	s24, s24, s15
 8015a58:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8015a5c:	ee2f 7a4e 	vnmul.f32	s14, s30, s28
 8015a60:	ee6d 6a4c 	vnmul.f32	s13, s26, s24
 8015a64:	ee6e 7aec 	vnmul.f32	s15, s29, s25
 8015a68:	eeec 6a8e 	vfma.f32	s13, s25, s28
 8015a6c:	eeae 7a8d 	vfma.f32	s14, s29, s26
 8015a70:	eeec 7a0f 	vfma.f32	s15, s24, s30
 8015a74:	edc9 6a00 	vstr	s13, [r9]
 8015a78:	ed89 7a06 	vstr	s14, [r9, #24]
 8015a7c:	edc9 7a03 	vstr	s15, [r9, #12]
 8015a80:	edc9 ea01 	vstr	s29, [r9, #4]
 8015a84:	ed89 ea04 	vstr	s28, [r9, #16]
 8015a88:	ed89 ca07 	vstr	s24, [r9, #28]
 8015a8c:	ed89 da05 	vstr	s26, [r9, #20]
 8015a90:	edc9 ca08 	vstr	s25, [r9, #32]
 8015a94:	f7fa febc 	bl	8010810 <m_mldivide>
 8015a98:	a947      	add	r1, sp, #284	; 0x11c
 8015a9a:	a879      	add	r0, sp, #484	; 0x1e4
 8015a9c:	f7fb fccc 	bl	8011438 <m_dcm2q_eml>
 8015aa0:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8015d3c <m_kalman_3gyro.isra.0.constprop.0+0x2fe4>
 8015aa4:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8015aa6:	9948      	ldr	r1, [sp, #288]	; 0x120
 8015aa8:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8015aaa:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8015aac:	904b      	str	r0, [sp, #300]	; 0x12c
 8015aae:	eeb0 7a67 	vmov.f32	s14, s15
 8015ab2:	eef0 6a67 	vmov.f32	s13, s15
 8015ab6:	914c      	str	r1, [sp, #304]	; 0x130
 8015ab8:	924d      	str	r2, [sp, #308]	; 0x134
 8015aba:	934e      	str	r3, [sp, #312]	; 0x138
 8015abc:	ed94 5a06 	vldr	s10, [r4, #24]
 8015ac0:	edd4 5a07 	vldr	s11, [r4, #28]
 8015ac4:	ed94 6a08 	vldr	s12, [r4, #32]
 8015ac8:	3424      	adds	r4, #36	; 0x24
 8015aca:	42a5      	cmp	r5, r4
 8015acc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015ad0:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015ad4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015ad8:	d1f0      	bne.n	8015abc <m_kalman_3gyro.isra.0.constprop.0+0x2d64>
 8015ada:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8015d40 <m_kalman_3gyro.isra.0.constprop.0+0x2fe8>
 8015ade:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015ae2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015ae6:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8015aea:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8015aee:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 8015af2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8015af6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b02:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 8015b06:	f340 8665 	ble.w	80167d4 <m_kalman_3gyro.isra.0.constprop.0+0x3a7c>
 8015b0a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8015b0e:	eef4 7aef 	vcmpe.f32	s15, s31
 8015b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b16:	f340 87a5 	ble.w	8016a64 <m_kalman_3gyro.isra.0.constprop.0+0x3d0c>
 8015b1a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8015b1e:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 8015b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b2a:	f77e ad5c 	ble.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8015b2e:	9b08      	ldr	r3, [sp, #32]
 8015b30:	eddf 7a84 	vldr	s15, [pc, #528]	; 8015d44 <m_kalman_3gyro.isra.0.constprop.0+0x2fec>
 8015b34:	ed93 7a00 	vldr	s14, [r3]
 8015b38:	eeb0 7ac7 	vabs.f32	s14, s14
 8015b3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b44:	f57e ad4f 	bpl.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8015b48:	ed93 7a01 	vldr	s14, [r3, #4]
 8015b4c:	eeb0 7ac7 	vabs.f32	s14, s14
 8015b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b58:	f57e ad45 	bpl.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8015b5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8015b60:	eeb0 7ac7 	vabs.f32	s14, s14
 8015b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b6c:	f57e ad3b 	bpl.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8015b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b72:	eddf 7a75 	vldr	s15, [pc, #468]	; 8015d48 <m_kalman_3gyro.isra.0.constprop.0+0x2ff0>
 8015b76:	ed93 7a00 	vldr	s14, [r3]
 8015b7a:	eeb0 7ac7 	vabs.f32	s14, s14
 8015b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b86:	f57e ad2e 	bpl.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8015b8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8015b8e:	eeb0 7ac7 	vabs.f32	s14, s14
 8015b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b9a:	f57e ad24 	bpl.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8015b9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8015ba2:	eeb0 7ac7 	vabs.f32	s14, s14
 8015ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bae:	f57e ad1a 	bpl.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8015bb2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8015bb6:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 8015bba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015bbc:	ed93 7a00 	vldr	s14, [r3]
 8015bc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015bc2:	ed93 6a00 	vldr	s12, [r3]
 8015bc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015bc8:	edd3 6a00 	vldr	s13, [r3]
 8015bcc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8015bd0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015bd4:	2a09      	cmp	r2, #9
 8015bd6:	f503 6198 	add.w	r1, r3, #1216	; 0x4c0
 8015bda:	bfcc      	ite	gt
 8015bdc:	230a      	movgt	r3, #10
 8015bde:	2305      	movle	r3, #5
 8015be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015be4:	bfb4      	ite	lt
 8015be6:	eef0 7a46 	vmovlt.f32	s15, s12
 8015bea:	eef0 7a47 	vmovge.f32	s15, s14
 8015bee:	bf98      	it	ls
 8015bf0:	eeb0 6a47 	vmovls.f32	s12, s14
 8015bf4:	ed91 7a00 	vldr	s14, [r1]
 8015bf8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c02:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015c06:	bfa8      	it	ge
 8015c08:	eef0 7a47 	vmovge.f32	s15, s14
 8015c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c10:	bf98      	it	ls
 8015c12:	eeb0 6a47 	vmovls.f32	s12, s14
 8015c16:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015c1a:	ed91 7a00 	vldr	s14, [r1]
 8015c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c22:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015c26:	bfa8      	it	ge
 8015c28:	eef0 7a66 	vmovge.f32	s15, s13
 8015c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c30:	bf88      	it	hi
 8015c32:	eef0 6a46 	vmovhi.f32	s13, s12
 8015c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c3e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015c42:	bfb8      	it	lt
 8015c44:	eef0 7a47 	vmovlt.f32	s15, s14
 8015c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c4c:	bf88      	it	hi
 8015c4e:	eeb0 7a66 	vmovhi.f32	s14, s13
 8015c52:	2b05      	cmp	r3, #5
 8015c54:	d065      	beq.n	8015d22 <m_kalman_3gyro.isra.0.constprop.0+0x2fca>
 8015c56:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015c5a:	f201 512c 	addw	r1, r1, #1324	; 0x52c
 8015c5e:	edd1 6a00 	vldr	s13, [r1]
 8015c62:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015c66:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015c6a:	f501 61aa 	add.w	r1, r1, #1360	; 0x550
 8015c6e:	ed91 6a00 	vldr	s12, [r1]
 8015c72:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c7a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015c7e:	bfa8      	it	ge
 8015c80:	eef0 7a66 	vmovge.f32	s15, s13
 8015c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c88:	bf98      	it	ls
 8015c8a:	eeb0 7a66 	vmovls.f32	s14, s13
 8015c8e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015c92:	f201 5174 	addw	r1, r1, #1396	; 0x574
 8015c96:	edd1 6a00 	vldr	s13, [r1]
 8015c9a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8015ca6:	bfa8      	it	ge
 8015ca8:	eef0 7a46 	vmovge.f32	s15, s12
 8015cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb0:	bf88      	it	hi
 8015cb2:	eeb0 6a47 	vmovhi.f32	s12, s14
 8015cb6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015cba:	f501 61b3 	add.w	r1, r1, #1432	; 0x598
 8015cbe:	ed91 7a00 	vldr	s14, [r1]
 8015cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc6:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015cca:	bfa8      	it	ge
 8015ccc:	eef0 7a66 	vmovge.f32	s15, s13
 8015cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd4:	bf88      	it	hi
 8015cd6:	eef0 6a46 	vmovhi.f32	s13, s12
 8015cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015ce6:	bfa8      	it	ge
 8015ce8:	eef0 7a47 	vmovge.f32	s15, s14
 8015cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf0:	bf88      	it	hi
 8015cf2:	eeb0 7a66 	vmovhi.f32	s14, s13
 8015cf6:	2b0a      	cmp	r3, #10
 8015cf8:	d113      	bne.n	8015d22 <m_kalman_3gyro.isra.0.constprop.0+0x2fca>
 8015cfa:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015cfe:	f201 51bc 	addw	r1, r1, #1468	; 0x5bc
 8015d02:	edd1 6a00 	vldr	s13, [r1]
 8015d06:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d0e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015d12:	bfb8      	it	lt
 8015d14:	eef0 7a66 	vmovlt.f32	s15, s13
 8015d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d1c:	bf88      	it	hi
 8015d1e:	eeb0 7a66 	vmovhi.f32	s14, s13
 8015d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d26:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8015d4c <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 8015d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d32:	f73e ac58 	bgt.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8015d36:	e00b      	b.n	8015d50 <m_kalman_3gyro.isra.0.constprop.0+0x2ff8>
 8015d38:	200013e8 	.word	0x200013e8
 8015d3c:	00000000 	.word	0x00000000
 8015d40:	3d088889 	.word	0x3d088889
 8015d44:	3e4ccccd 	.word	0x3e4ccccd
 8015d48:	3f99999a 	.word	0x3f99999a
 8015d4c:	3be56042 	.word	0x3be56042
 8015d50:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015d52:	ed91 6a00 	vldr	s12, [r1]
 8015d56:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015d58:	ed91 7a00 	vldr	s14, [r1]
 8015d5c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015d5e:	edd1 6a00 	vldr	s13, [r1]
 8015d62:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015d66:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d6e:	f201 41c4 	addw	r1, r1, #1220	; 0x4c4
 8015d72:	bfb4      	ite	lt
 8015d74:	eef0 7a46 	vmovlt.f32	s15, s12
 8015d78:	eef0 7a47 	vmovge.f32	s15, s14
 8015d7c:	bf98      	it	ls
 8015d7e:	eeb0 6a47 	vmovls.f32	s12, s14
 8015d82:	ed91 7a00 	vldr	s14, [r1]
 8015d86:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d90:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015d94:	bfa8      	it	ge
 8015d96:	eef0 7a47 	vmovge.f32	s15, s14
 8015d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d9e:	bf98      	it	ls
 8015da0:	eeb0 6a47 	vmovls.f32	s12, s14
 8015da4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015da8:	ed91 7a00 	vldr	s14, [r1]
 8015dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db0:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015db4:	bfa8      	it	ge
 8015db6:	eef0 7a66 	vmovge.f32	s15, s13
 8015dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dbe:	bf88      	it	hi
 8015dc0:	eef0 6a46 	vmovhi.f32	s13, s12
 8015dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dcc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015dd0:	bfa8      	it	ge
 8015dd2:	eef0 7a47 	vmovge.f32	s15, s14
 8015dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dda:	bf88      	it	hi
 8015ddc:	eeb0 7a66 	vmovhi.f32	s14, s13
 8015de0:	2b05      	cmp	r3, #5
 8015de2:	d065      	beq.n	8015eb0 <m_kalman_3gyro.isra.0.constprop.0+0x3158>
 8015de4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015de8:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 8015dec:	ed91 6a00 	vldr	s12, [r1]
 8015df0:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015df4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015df8:	f201 5154 	addw	r1, r1, #1364	; 0x554
 8015dfc:	edd1 6a00 	vldr	s13, [r1]
 8015e00:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e08:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8015e0c:	bfa8      	it	ge
 8015e0e:	eef0 7a46 	vmovge.f32	s15, s12
 8015e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e16:	bf88      	it	hi
 8015e18:	eeb0 6a47 	vmovhi.f32	s12, s14
 8015e1c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015e20:	f501 61af 	add.w	r1, r1, #1400	; 0x578
 8015e24:	ed91 7a00 	vldr	s14, [r1]
 8015e28:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e30:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015e34:	bfa8      	it	ge
 8015e36:	eef0 7a66 	vmovge.f32	s15, s13
 8015e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3e:	bf88      	it	hi
 8015e40:	eef0 6a46 	vmovhi.f32	s13, s12
 8015e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e48:	f201 519c 	addw	r1, r1, #1436	; 0x59c
 8015e4c:	ed91 6a00 	vldr	s12, [r1]
 8015e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e54:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015e58:	bfa8      	it	ge
 8015e5a:	eef0 7a47 	vmovge.f32	s15, s14
 8015e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e62:	bf88      	it	hi
 8015e64:	eeb0 7a66 	vmovhi.f32	s14, s13
 8015e68:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e70:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015e74:	bfa8      	it	ge
 8015e76:	eef0 7a46 	vmovge.f32	s15, s12
 8015e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e7e:	bf88      	it	hi
 8015e80:	eeb0 7a46 	vmovhi.f32	s14, s12
 8015e84:	2b0a      	cmp	r3, #10
 8015e86:	d113      	bne.n	8015eb0 <m_kalman_3gyro.isra.0.constprop.0+0x3158>
 8015e88:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015e8c:	f501 61b8 	add.w	r1, r1, #1472	; 0x5c0
 8015e90:	edd1 6a00 	vldr	s13, [r1]
 8015e94:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015ea0:	bfb8      	it	lt
 8015ea2:	eef0 7a66 	vmovlt.f32	s15, s13
 8015ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eaa:	bf88      	it	hi
 8015eac:	eeb0 7a66 	vmovhi.f32	s14, s13
 8015eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015eb4:	ed1f 7a5b 	vldr	s14, [pc, #-364]	; 8015d4c <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 8015eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec0:	f73e ab91 	bgt.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8015ec4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015ec6:	ed91 7a00 	vldr	s14, [r1]
 8015eca:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015ecc:	ed91 6a00 	vldr	s12, [r1]
 8015ed0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8015ed2:	edd1 6a00 	vldr	s13, [r1]
 8015ed6:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015eda:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee2:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 8015ee6:	bfb4      	ite	lt
 8015ee8:	eef0 7a46 	vmovlt.f32	s15, s12
 8015eec:	eef0 7a47 	vmovge.f32	s15, s14
 8015ef0:	bf98      	it	ls
 8015ef2:	eeb0 6a47 	vmovls.f32	s12, s14
 8015ef6:	ed91 7a00 	vldr	s14, [r1]
 8015efa:	993b      	ldr	r1, [sp, #236]	; 0xec
 8015efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f04:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015f08:	bfa8      	it	ge
 8015f0a:	eef0 7a47 	vmovge.f32	s15, s14
 8015f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f12:	bf98      	it	ls
 8015f14:	eeb0 6a47 	vmovls.f32	s12, s14
 8015f18:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015f1c:	ed91 7a00 	vldr	s14, [r1]
 8015f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f24:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015f28:	bfa8      	it	ge
 8015f2a:	eef0 7a66 	vmovge.f32	s15, s13
 8015f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f32:	bf88      	it	hi
 8015f34:	eef0 6a46 	vmovhi.f32	s13, s12
 8015f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f40:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015f44:	bfa8      	it	ge
 8015f46:	eef0 7a47 	vmovge.f32	s15, s14
 8015f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f4e:	bf88      	it	hi
 8015f50:	eeb0 7a66 	vmovhi.f32	s14, s13
 8015f54:	2b05      	cmp	r3, #5
 8015f56:	d065      	beq.n	8016024 <m_kalman_3gyro.isra.0.constprop.0+0x32cc>
 8015f58:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015f5c:	f201 5134 	addw	r1, r1, #1332	; 0x534
 8015f60:	edd1 6a00 	vldr	s13, [r1]
 8015f64:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015f68:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015f6c:	f501 61ab 	add.w	r1, r1, #1368	; 0x558
 8015f70:	ed91 6a00 	vldr	s12, [r1]
 8015f74:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f7c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015f80:	bfa8      	it	ge
 8015f82:	eef0 7a66 	vmovge.f32	s15, s13
 8015f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f8a:	bf98      	it	ls
 8015f8c:	eeb0 7a66 	vmovls.f32	s14, s13
 8015f90:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015f94:	f201 517c 	addw	r1, r1, #1404	; 0x57c
 8015f98:	edd1 6a00 	vldr	s13, [r1]
 8015f9c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8015fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fa4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8015fa8:	bfa8      	it	ge
 8015faa:	eef0 7a46 	vmovge.f32	s15, s12
 8015fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fb2:	bf88      	it	hi
 8015fb4:	eeb0 6a47 	vmovhi.f32	s12, s14
 8015fb8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015fbc:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 8015fc0:	ed91 7a00 	vldr	s14, [r1]
 8015fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fc8:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015fcc:	bfa8      	it	ge
 8015fce:	eef0 7a66 	vmovge.f32	s15, s13
 8015fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fd6:	bf88      	it	hi
 8015fd8:	eef0 6a46 	vmovhi.f32	s13, s12
 8015fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015fe8:	bfa8      	it	ge
 8015fea:	eef0 7a47 	vmovge.f32	s15, s14
 8015fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff2:	bf88      	it	hi
 8015ff4:	eeb0 7a66 	vmovhi.f32	s14, s13
 8015ff8:	2b0a      	cmp	r3, #10
 8015ffa:	d113      	bne.n	8016024 <m_kalman_3gyro.isra.0.constprop.0+0x32cc>
 8015ffc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016000:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 8016004:	edd3 6a00 	vldr	s13, [r3]
 8016008:	eef4 7ae6 	vcmpe.f32	s15, s13
 801600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016010:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016014:	bfb8      	it	lt
 8016016:	eef0 7a66 	vmovlt.f32	s15, s13
 801601a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801601e:	bf88      	it	hi
 8016020:	eeb0 7a66 	vmovhi.f32	s14, s13
 8016024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016028:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 8015d4c <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 801602c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016034:	f73e aad7 	bgt.w	80145e6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 8016038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801603a:	2b00      	cmp	r3, #0
 801603c:	f43e aad7 	beq.w	80145ee <m_kalman_3gyro.isra.0.constprop.0+0x1896>
 8016040:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8016044:	2b01      	cmp	r3, #1
 8016046:	d123      	bne.n	8016090 <m_kalman_3gyro.isra.0.constprop.0+0x3338>
 8016048:	2a0a      	cmp	r2, #10
 801604a:	f43f ac1b 	beq.w	8015884 <m_kalman_3gyro.isra.0.constprop.0+0x2b2c>
 801604e:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016052:	2300      	movs	r3, #0
 8016054:	3201      	adds	r2, #1
 8016056:	f8c1 2450 	str.w	r2, [r1, #1104]	; 0x450
 801605a:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 801605e:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 8016062:	f8c1 345c 	str.w	r3, [r1, #1116]	; 0x45c
 8016066:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 801606a:	f7fe bae1 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 801606e:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8016072:	eef4 7aef 	vcmpe.f32	s15, s31
 8016076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801607a:	f73f ad4e 	bgt.w	8015b1a <m_kalman_3gyro.isra.0.constprop.0+0x2dc2>
 801607e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016080:	2b00      	cmp	r3, #0
 8016082:	f43e aab4 	beq.w	80145ee <m_kalman_3gyro.isra.0.constprop.0+0x1896>
 8016086:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801608a:	2b01      	cmp	r3, #1
 801608c:	f000 837a 	beq.w	8016784 <m_kalman_3gyro.isra.0.constprop.0+0x3a2c>
 8016090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016092:	2b02      	cmp	r3, #2
 8016094:	bf08      	it	eq
 8016096:	f50d 7902 	addeq.w	r9, sp, #520	; 0x208
 801609a:	f000 84e3 	beq.w	8016a64 <m_kalman_3gyro.isra.0.constprop.0+0x3d0c>
 801609e:	2b04      	cmp	r3, #4
 80160a0:	f040 8370 	bne.w	8016784 <m_kalman_3gyro.isra.0.constprop.0+0x3a2c>
 80160a4:	4bd4      	ldr	r3, [pc, #848]	; (80163f8 <m_kalman_3gyro.isra.0.constprop.0+0x36a0>)
 80160a6:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
 80160aa:	2a04      	cmp	r2, #4
 80160ac:	f240 859a 	bls.w	8016be4 <m_kalman_3gyro.isra.0.constprop.0+0x3e8c>
 80160b0:	48d1      	ldr	r0, [pc, #836]	; (80163f8 <m_kalman_3gyro.isra.0.constprop.0+0x36a0>)
 80160b2:	eddf 7ad2 	vldr	s15, [pc, #840]	; 80163fc <m_kalman_3gyro.isra.0.constprop.0+0x36a4>
 80160b6:	ed90 7a74 	vldr	s14, [r0, #464]	; 0x1d0
 80160ba:	ed9f 3ad1 	vldr	s6, [pc, #836]	; 8016400 <m_kalman_3gyro.isra.0.constprop.0+0x36a8>
 80160be:	edd0 0a71 	vldr	s1, [r0, #452]	; 0x1c4
 80160c2:	edd0 3a73 	vldr	s7, [r0, #460]	; 0x1cc
 80160c6:	ed80 7a71 	vstr	s14, [r0, #452]	; 0x1c4
 80160ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80160ce:	ed90 4a70 	vldr	s8, [r0, #448]	; 0x1c0
 80160d2:	edd0 4a72 	vldr	s9, [r0, #456]	; 0x1c8
 80160d6:	ed90 1a7f 	vldr	s2, [r0, #508]	; 0x1fc
 80160da:	edd0 1a80 	vldr	s3, [r0, #512]	; 0x200
 80160de:	ed90 2a81 	vldr	s4, [r0, #516]	; 0x204
 80160e2:	edd0 5a75 	vldr	s11, [r0, #468]	; 0x1d4
 80160e6:	edd0 2a82 	vldr	s5, [r0, #520]	; 0x208
 80160ea:	ed90 6a83 	vldr	s12, [r0, #524]	; 0x20c
 80160ee:	edd0 6a84 	vldr	s13, [r0, #528]	; 0x210
 80160f2:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 80160f6:	f8d0 11dc 	ldr.w	r1, [r0, #476]	; 0x1dc
 80160fa:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
 80160fe:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
 8016102:	eea0 7a83 	vfma.f32	s14, s1, s6
 8016106:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801610a:	f8c0 11d0 	str.w	r1, [r0, #464]	; 0x1d0
 801610e:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8016112:	edc0 0a6e 	vstr	s1, [r0, #440]	; 0x1b8
 8016116:	eea4 5a03 	vfma.f32	s10, s8, s6
 801611a:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
 801611e:	f8c0 21d4 	str.w	r2, [r0, #468]	; 0x1d4
 8016122:	edc0 3a70 	vstr	s7, [r0, #448]	; 0x1c0
 8016126:	ed80 4a6d 	vstr	s8, [r0, #436]	; 0x1b4
 801612a:	edc0 4a6f 	vstr	s9, [r0, #444]	; 0x1bc
 801612e:	ed9f 4ab5 	vldr	s8, [pc, #724]	; 8016404 <m_kalman_3gyro.isra.0.constprop.0+0x36ac>
 8016132:	edc0 5a72 	vstr	s11, [r0, #456]	; 0x1c8
 8016136:	ed80 1a7c 	vstr	s2, [r0, #496]	; 0x1f0
 801613a:	edc0 2a7f 	vstr	s5, [r0, #508]	; 0x1fc
 801613e:	edc0 1a7d 	vstr	s3, [r0, #500]	; 0x1f4
 8016142:	ed80 6a80 	vstr	s12, [r0, #512]	; 0x200
 8016146:	ed80 2a7e 	vstr	s4, [r0, #504]	; 0x1f8
 801614a:	edc0 6a81 	vstr	s13, [r0, #516]	; 0x204
 801614e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
 8016152:	edd0 0a7a 	vldr	s1, [r0, #488]	; 0x1e8
 8016156:	ed90 0a79 	vldr	s0, [r0, #484]	; 0x1e4
 801615a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 801615e:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
 8016162:	eea0 7a84 	vfma.f32	s14, s1, s8
 8016166:	4601      	mov	r1, r0
 8016168:	980a      	ldr	r0, [sp, #40]	; 0x28
 801616a:	edc1 0a77 	vstr	s1, [r1, #476]	; 0x1dc
 801616e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8016172:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8016176:	edd0 3a01 	vldr	s7, [r0, #4]
 801617a:	edd0 0a00 	vldr	s1, [r0]
 801617e:	eea0 5a04 	vfma.f32	s10, s0, s8
 8016182:	460a      	mov	r2, r1
 8016184:	eee4 5a83 	vfma.f32	s11, s9, s6
 8016188:	eddf 4a9f 	vldr	s9, [pc, #636]	; 8016408 <m_kalman_3gyro.isra.0.constprop.0+0x36b0>
 801618c:	edd2 ba88 	vldr	s23, [r2, #544]	; 0x220
 8016190:	ed92 da89 	vldr	s26, [r2, #548]	; 0x224
 8016194:	edc2 3a7a 	vstr	s7, [r2, #488]	; 0x1e8
 8016198:	ee26 6a27 	vmul.f32	s12, s12, s15
 801619c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80161a0:	eef0 7a62 	vmov.f32	s15, s5
 80161a4:	eea3 7aa4 	vfma.f32	s14, s7, s9
 80161a8:	eee1 7a03 	vfma.f32	s15, s2, s6
 80161ac:	ed91 1a7b 	vldr	s2, [r1, #492]	; 0x1ec
 80161b0:	9908      	ldr	r1, [sp, #32]
 80161b2:	edd2 3a8a 	vldr	s7, [r2, #552]	; 0x228
 80161b6:	edd1 2a01 	vldr	s5, [r1, #4]
 80161ba:	ed82 0a76 	vstr	s0, [r2, #472]	; 0x1d8
 80161be:	eea0 5aa4 	vfma.f32	s10, s1, s9
 80161c2:	eee1 5a04 	vfma.f32	s11, s2, s8
 80161c6:	eea1 6a83 	vfma.f32	s12, s3, s6
 80161ca:	eee2 6a03 	vfma.f32	s13, s4, s6
 80161ce:	edd0 1a02 	vldr	s3, [r0, #8]
 80161d2:	ed91 2a00 	vldr	s4, [r1]
 80161d6:	ed91 3a02 	vldr	s6, [r1, #8]
 80161da:	ed82 7a8c 	vstr	s14, [r2, #560]	; 0x230
 80161de:	ee27 7a07 	vmul.f32	s14, s14, s14
 80161e2:	eee1 5aa4 	vfma.f32	s11, s3, s9
 80161e6:	eeeb 7a84 	vfma.f32	s15, s23, s8
 80161ea:	eead 6a04 	vfma.f32	s12, s26, s8
 80161ee:	eee3 6a84 	vfma.f32	s13, s7, s8
 80161f2:	eea5 7a05 	vfma.f32	s14, s10, s10
 80161f6:	eee2 7a24 	vfma.f32	s15, s4, s9
 80161fa:	eea2 6aa4 	vfma.f32	s12, s5, s9
 80161fe:	eee3 6a24 	vfma.f32	s13, s6, s9
 8016202:	eea5 7aa5 	vfma.f32	s14, s11, s11
 8016206:	edc2 0a79 	vstr	s1, [r2, #484]	; 0x1e4
 801620a:	edc2 7a8e 	vstr	s15, [r2, #568]	; 0x238
 801620e:	ee17 0a10 	vmov	r0, s14
 8016212:	ed82 5a8b 	vstr	s10, [r2, #556]	; 0x22c
 8016216:	edc2 5a8d 	vstr	s11, [r2, #564]	; 0x234
 801621a:	ed82 1a78 	vstr	s2, [r2, #480]	; 0x1e0
 801621e:	edc2 1a7b 	vstr	s3, [r2, #492]	; 0x1ec
 8016222:	edc2 ba85 	vstr	s23, [r2, #532]	; 0x214
 8016226:	ed82 2a88 	vstr	s4, [r2, #544]	; 0x220
 801622a:	ed82 da86 	vstr	s26, [r2, #536]	; 0x218
 801622e:	edc2 2a89 	vstr	s5, [r2, #548]	; 0x224
 8016232:	ed82 3a8a 	vstr	s6, [r2, #552]	; 0x228
 8016236:	edc2 3a87 	vstr	s7, [r2, #540]	; 0x21c
 801623a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
 801623e:	ed82 6a8f 	vstr	s12, [r2, #572]	; 0x23c
 8016242:	edc2 6a90 	vstr	s13, [r2, #576]	; 0x240
 8016246:	eeb0 ca67 	vmov.f32	s24, s15
 801624a:	eef0 ca46 	vmov.f32	s25, s12
 801624e:	eef0 da66 	vmov.f32	s27, s13
 8016252:	f7ea f971 	bl	8000538 <__aeabi_f2d>
 8016256:	ec41 0b10 	vmov	d0, r0, r1
 801625a:	f005 fed5 	bl	801c008 <sqrt>
 801625e:	ec51 0b10 	vmov	r0, r1, d0
 8016262:	f7ea fcb9 	bl	8000bd8 <__aeabi_d2f>
 8016266:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801626a:	ee07 0a10 	vmov	s14, r0
 801626e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016276:	f77f ab48 	ble.w	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 801627a:	ee6c 7a0c 	vmul.f32	s15, s24, s24
 801627e:	eeec 7aac 	vfma.f32	s15, s25, s25
 8016282:	eeed 7aad 	vfma.f32	s15, s27, s27
 8016286:	ee17 0a90 	vmov	r0, s15
 801628a:	f7ea f955 	bl	8000538 <__aeabi_f2d>
 801628e:	ec41 0b10 	vmov	d0, r0, r1
 8016292:	f005 feb9 	bl	801c008 <sqrt>
 8016296:	ec51 0b10 	vmov	r0, r1, d0
 801629a:	f7ea fc9d 	bl	8000bd8 <__aeabi_d2f>
 801629e:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80162a2:	ee07 0a10 	vmov	s14, r0
 80162a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80162aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ae:	f77f ab2c 	ble.w	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 80162b2:	9b08      	ldr	r3, [sp, #32]
 80162b4:	ed93 7a00 	vldr	s14, [r3]
 80162b8:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80162bc:	eeb0 7ac7 	vabs.f32	s14, s14
 80162c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c8:	f57f ab1f 	bpl.w	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 80162cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80162d0:	eeb0 7ac7 	vabs.f32	s14, s14
 80162d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162dc:	f57f ab15 	bpl.w	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 80162e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80162e4:	eeb0 7ac7 	vabs.f32	s14, s14
 80162e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f0:	f57f ab0b 	bpl.w	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 80162f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162f6:	edd3 7a00 	vldr	s15, [r3]
 80162fa:	eef0 7ae7 	vabs.f32	s15, s15
 80162fe:	ee17 0a90 	vmov	r0, s15
 8016302:	f7ea f919 	bl	8000538 <__aeabi_f2d>
 8016306:	a33a      	add	r3, pc, #232	; (adr r3, 80163f0 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 8016308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801630c:	f7ea fbde 	bl	8000acc <__aeabi_dcmplt>
 8016310:	2800      	cmp	r0, #0
 8016312:	f43f aafa 	beq.w	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 8016316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016318:	edd3 7a01 	vldr	s15, [r3, #4]
 801631c:	eef0 7ae7 	vabs.f32	s15, s15
 8016320:	ee17 0a90 	vmov	r0, s15
 8016324:	f7ea f908 	bl	8000538 <__aeabi_f2d>
 8016328:	a331      	add	r3, pc, #196	; (adr r3, 80163f0 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 801632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801632e:	f7ea fbcd 	bl	8000acc <__aeabi_dcmplt>
 8016332:	2800      	cmp	r0, #0
 8016334:	f43f aae9 	beq.w	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 8016338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801633a:	edd3 7a02 	vldr	s15, [r3, #8]
 801633e:	eef0 7ae7 	vabs.f32	s15, s15
 8016342:	ee17 0a90 	vmov	r0, s15
 8016346:	f7ea f8f7 	bl	8000538 <__aeabi_f2d>
 801634a:	a329      	add	r3, pc, #164	; (adr r3, 80163f0 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 801634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016350:	f7ea fbbc 	bl	8000acc <__aeabi_dcmplt>
 8016354:	2800      	cmp	r0, #0
 8016356:	f43f aad8 	beq.w	801590a <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 801635a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801635e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8016362:	2b0a      	cmp	r3, #10
 8016364:	f000 84b0 	beq.w	8016cc8 <m_kalman_3gyro.isra.0.constprop.0+0x3f70>
 8016368:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801636c:	2200      	movs	r2, #0
 801636e:	3301      	adds	r3, #1
 8016370:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 8016374:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8016378:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 801637c:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8016380:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 8016384:	f7fe b954 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8016388:	4f20      	ldr	r7, [pc, #128]	; (801640c <m_kalman_3gyro.isra.0.constprop.0+0x36b4>)
 801638a:	2600      	movs	r6, #0
 801638c:	f7fd bcaa 	b.w	8013ce4 <m_kalman_3gyro.isra.0.constprop.0+0xf8c>
 8016390:	eef1 ba04 	vmov.f32	s23, #20	; 0x40a00000  5.0
 8016394:	f7fe b89a 	b.w	80144cc <m_kalman_3gyro.isra.0.constprop.0+0x1774>
 8016398:	eef0 ca47 	vmov.f32	s25, s14
 801639c:	ee27 7aaa 	vmul.f32	s14, s15, s21
 80163a0:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80163a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163a8:	ed85 7a06 	vstr	s14, [r5, #24]
 80163ac:	d109      	bne.n	80163c2 <m_kalman_3gyro.isra.0.constprop.0+0x366a>
 80163ae:	eeb0 aa47 	vmov.f32	s20, s14
 80163b2:	eef0 aa66 	vmov.f32	s21, s13
 80163b6:	f7ff b8b0 	b.w	801551a <m_kalman_3gyro.isra.0.constprop.0+0x27c2>
 80163ba:	eef0 ca67 	vmov.f32	s25, s15
 80163be:	f7ff b894 	b.w	80154ea <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 80163c2:	eef0 aa66 	vmov.f32	s21, s13
 80163c6:	f7ff b93c 	b.w	8015642 <m_kalman_3gyro.isra.0.constprop.0+0x28ea>
 80163ca:	eef0 9a4b 	vmov.f32	s19, s22
 80163ce:	ee67 6aab 	vmul.f32	s13, s15, s23
 80163d2:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80163d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163da:	edc5 6a03 	vstr	s13, [r5, #12]
 80163de:	d16b      	bne.n	80164b8 <m_kalman_3gyro.isra.0.constprop.0+0x3760>
 80163e0:	eeb0 ca66 	vmov.f32	s24, s13
 80163e4:	eef0 ba47 	vmov.f32	s23, s14
 80163e8:	f7ff b8fd 	b.w	80155e6 <m_kalman_3gyro.isra.0.constprop.0+0x288e>
 80163ec:	f3af 8000 	nop.w
 80163f0:	66666666 	.word	0x66666666
 80163f4:	3ff66666 	.word	0x3ff66666
 80163f8:	200013e8 	.word	0x200013e8
 80163fc:	bdcccccd 	.word	0xbdcccccd
 8016400:	be4ccccd 	.word	0xbe4ccccd
 8016404:	3dcccccd 	.word	0x3dcccccd
 8016408:	3e4ccccd 	.word	0x3e4ccccd
 801640c:	40140000 	.word	0x40140000
 8016410:	9b07      	ldr	r3, [sp, #28]
 8016412:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 8016416:	eeea 9a0a 	vfma.f32	s19, s20, s20
 801641a:	685a      	ldr	r2, [r3, #4]
 801641c:	6899      	ldr	r1, [r3, #8]
 801641e:	681c      	ldr	r4, [r3, #0]
 8016420:	9248      	str	r2, [sp, #288]	; 0x120
 8016422:	461d      	mov	r5, r3
 8016424:	eeb1 9a49 	vneg.f32	s18, s18
 8016428:	68db      	ldr	r3, [r3, #12]
 801642a:	9149      	str	r1, [sp, #292]	; 0x124
 801642c:	eef1 8a68 	vneg.f32	s17, s17
 8016430:	eeb1 8a48 	vneg.f32	s16, s16
 8016434:	462a      	mov	r2, r5
 8016436:	a84f      	add	r0, sp, #316	; 0x13c
 8016438:	a947      	add	r1, sp, #284	; 0x11c
 801643a:	934a      	str	r3, [sp, #296]	; 0x128
 801643c:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 8016440:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 8016444:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 8016448:	9447      	str	r4, [sp, #284]	; 0x11c
 801644a:	f7fa fb87 	bl	8010b5c <m_qmult_eml>
 801644e:	ee19 0a90 	vmov	r0, s19
 8016452:	ed8d 9a47 	vstr	s18, [sp, #284]	; 0x11c
 8016456:	edcd 8a48 	vstr	s17, [sp, #288]	; 0x120
 801645a:	ed8d 8a49 	vstr	s16, [sp, #292]	; 0x124
 801645e:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 8016462:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 8016466:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 801646a:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 801646e:	ed8d aa4a 	vstr	s20, [sp, #296]	; 0x128
 8016472:	f7ea f861 	bl	8000538 <__aeabi_f2d>
 8016476:	ec41 0b10 	vmov	d0, r0, r1
 801647a:	f005 fdc5 	bl	801c008 <sqrt>
 801647e:	ec51 0b10 	vmov	r0, r1, d0
 8016482:	f7ea fba9 	bl	8000bd8 <__aeabi_d2f>
 8016486:	ee07 0a90 	vmov	s15, r0
 801648a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801648e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8016492:	ac4b      	add	r4, sp, #300	; 0x12c
 8016494:	ee29 9a27 	vmul.f32	s18, s18, s15
 8016498:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801649c:	ee28 8a27 	vmul.f32	s16, s16, s15
 80164a0:	ee2a aa27 	vmul.f32	s20, s20, s15
 80164a4:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 80164a8:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 80164ac:	ed8d 8a4d 	vstr	s16, [sp, #308]	; 0x134
 80164b0:	ed8d aa4e 	vstr	s20, [sp, #312]	; 0x138
 80164b4:	f7ff b99e 	b.w	80157f4 <m_kalman_3gyro.isra.0.constprop.0+0x2a9c>
 80164b8:	eef0 ba47 	vmov.f32	s23, s14
 80164bc:	ee27 7a8c 	vmul.f32	s14, s15, s24
 80164c0:	eef5 ca40 	vcmp.f32	s25, #0.0
 80164c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164c8:	ed85 7a04 	vstr	s14, [r5, #16]
 80164cc:	d122      	bne.n	8016514 <m_kalman_3gyro.isra.0.constprop.0+0x37bc>
 80164ce:	eef0 ca47 	vmov.f32	s25, s14
 80164d2:	eeb0 ca66 	vmov.f32	s24, s13
 80164d6:	f7ff b808 	b.w	80154ea <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 80164da:	eef0 6a68 	vmov.f32	s13, s17
 80164de:	e75d      	b.n	801639c <m_kalman_3gyro.isra.0.constprop.0+0x3644>
 80164e0:	eeb0 7a68 	vmov.f32	s14, s17
 80164e4:	e773      	b.n	80163ce <m_kalman_3gyro.isra.0.constprop.0+0x3676>
 80164e6:	f8d3 68b0 	ldr.w	r6, [r3, #2224]	; 0x8b0
 80164ea:	b1ee      	cbz	r6, 8016528 <m_kalman_3gyro.isra.0.constprop.0+0x37d0>
 80164ec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80164ee:	6818      	ldr	r0, [r3, #0]
 80164f0:	f7ea f822 	bl	8000538 <__aeabi_f2d>
 80164f4:	a3b5      	add	r3, pc, #724	; (adr r3, 80167cc <m_kalman_3gyro.isra.0.constprop.0+0x3a74>)
 80164f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164fa:	f7ea fb05 	bl	8000b08 <__aeabi_dcmpgt>
 80164fe:	b198      	cbz	r0, 8016528 <m_kalman_3gyro.isra.0.constprop.0+0x37d0>
 8016500:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016504:	3e01      	subs	r6, #1
 8016506:	f8c3 68b0 	str.w	r6, [r3, #2224]	; 0x8b0
 801650a:	f7fe bb23 	b.w	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 801650e:	eef0 6a68 	vmov.f32	s13, s17
 8016512:	e7d3      	b.n	80164bc <m_kalman_3gyro.isra.0.constprop.0+0x3764>
 8016514:	eeb0 ca66 	vmov.f32	s24, s13
 8016518:	f7ff b875 	b.w	8015606 <m_kalman_3gyro.isra.0.constprop.0+0x28ae>
 801651c:	a9bf      	add	r1, sp, #764	; 0x2fc
 801651e:	a8b2      	add	r0, sp, #712	; 0x2c8
 8016520:	eeb0 0a4a 	vmov.f32	s0, s20
 8016524:	f7fd bb76 	b.w	8013c14 <m_kalman_3gyro.isra.0.constprop.0+0xebc>
 8016528:	ee1f 0a90 	vmov	r0, s31
 801652c:	f7ea f804 	bl	8000538 <__aeabi_f2d>
 8016530:	4604      	mov	r4, r0
 8016532:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016534:	460d      	mov	r5, r1
 8016536:	f7e9 ffff 	bl	8000538 <__aeabi_f2d>
 801653a:	4b9f      	ldr	r3, [pc, #636]	; (80167b8 <m_kalman_3gyro.isra.0.constprop.0+0x3a60>)
 801653c:	2200      	movs	r2, #0
 801653e:	f7ea f853 	bl	80005e8 <__aeabi_dmul>
 8016542:	4602      	mov	r2, r0
 8016544:	460b      	mov	r3, r1
 8016546:	4620      	mov	r0, r4
 8016548:	4629      	mov	r1, r5
 801654a:	f7ea fabf 	bl	8000acc <__aeabi_dcmplt>
 801654e:	2800      	cmp	r0, #0
 8016550:	f43e ab00 	beq.w	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8016554:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016556:	f7e9 ffef 	bl	8000538 <__aeabi_f2d>
 801655a:	4604      	mov	r4, r0
 801655c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801655e:	460d      	mov	r5, r1
 8016560:	f7e9 ffea 	bl	8000538 <__aeabi_f2d>
 8016564:	4b94      	ldr	r3, [pc, #592]	; (80167b8 <m_kalman_3gyro.isra.0.constprop.0+0x3a60>)
 8016566:	2200      	movs	r2, #0
 8016568:	f7ea f83e 	bl	80005e8 <__aeabi_dmul>
 801656c:	4602      	mov	r2, r0
 801656e:	460b      	mov	r3, r1
 8016570:	4620      	mov	r0, r4
 8016572:	4629      	mov	r1, r5
 8016574:	f7ea faaa 	bl	8000acc <__aeabi_dcmplt>
 8016578:	2800      	cmp	r0, #0
 801657a:	f43e aaeb 	beq.w	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 801657e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016580:	f7e9 ffda 	bl	8000538 <__aeabi_f2d>
 8016584:	4604      	mov	r4, r0
 8016586:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016588:	460d      	mov	r5, r1
 801658a:	f7e9 ffd5 	bl	8000538 <__aeabi_f2d>
 801658e:	4602      	mov	r2, r0
 8016590:	460b      	mov	r3, r1
 8016592:	f7e9 fe73 	bl	800027c <__adddf3>
 8016596:	460b      	mov	r3, r1
 8016598:	4602      	mov	r2, r0
 801659a:	4629      	mov	r1, r5
 801659c:	4620      	mov	r0, r4
 801659e:	f7ea fab3 	bl	8000b08 <__aeabi_dcmpgt>
 80165a2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80165a6:	f893 38ad 	ldrb.w	r3, [r3, #2221]	; 0x8ad
 80165aa:	2800      	cmp	r0, #0
 80165ac:	f000 8309 	beq.w	8016bc2 <m_kalman_3gyro.isra.0.constprop.0+0x3e6a>
 80165b0:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80165b4:	2200      	movs	r2, #0
 80165b6:	2b0e      	cmp	r3, #14
 80165b8:	f8a1 21fc 	strh.w	r2, [r1, #508]	; 0x1fc
 80165bc:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 80165c0:	f881 2205 	strb.w	r2, [r1, #517]	; 0x205
 80165c4:	f881 2207 	strb.w	r2, [r1, #519]	; 0x207
 80165c8:	f200 83af 	bhi.w	8016d2a <m_kalman_3gyro.isra.0.constprop.0+0x3fd2>
 80165cc:	3303      	adds	r3, #3
 80165ce:	f881 38ad 	strb.w	r3, [r1, #2221]	; 0x8ad
 80165d2:	f7fe babf 	b.w	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 80165d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80165da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80165de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165e2:	f47d abe7 	bne.w	8013db4 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 80165e6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80165ea:	9804      	ldr	r0, [sp, #16]
 80165ec:	645c      	str	r4, [r3, #68]	; 0x44
 80165ee:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80165f2:	649c      	str	r4, [r3, #72]	; 0x48
 80165f4:	64dc      	str	r4, [r3, #76]	; 0x4c
 80165f6:	655c      	str	r4, [r3, #84]	; 0x54
 80165f8:	659c      	str	r4, [r3, #88]	; 0x58
 80165fa:	65dc      	str	r4, [r3, #92]	; 0x5c
 80165fc:	641d      	str	r5, [r3, #64]	; 0x40
 80165fe:	651d      	str	r5, [r3, #80]	; 0x50
 8016600:	661d      	str	r5, [r3, #96]	; 0x60
 8016602:	f7fa ff19 	bl	8011438 <m_dcm2q_eml>
 8016606:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801660a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801660e:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
 8016612:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
 8016616:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
 801661a:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 801661e:	681a      	ldr	r2, [r3, #0]
 8016620:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
 8016624:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 8016628:	4b64      	ldr	r3, [pc, #400]	; (80167bc <m_kalman_3gyro.isra.0.constprop.0+0x3a64>)
 801662a:	6852      	ldr	r2, [r2, #4]
 801662c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
 8016630:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 8016634:	6892      	ldr	r2, [r2, #8]
 8016636:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
 801663a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801663e:	f8c1 20a8 	str.w	r2, [r1, #168]	; 0xa8
 8016642:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
 8016646:	f8c1 50b4 	str.w	r5, [r1, #180]	; 0xb4
 801664a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801664e:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8016652:	2100      	movs	r1, #0
 8016654:	f004 fe82 	bl	801b35c <memset>
 8016658:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801665c:	4b58      	ldr	r3, [pc, #352]	; (80167c0 <m_kalman_3gyro.isra.0.constprop.0+0x3a68>)
 801665e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8016662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8016666:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 801666a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 801666e:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8016672:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 8016676:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 801667a:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 801667e:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 8016682:	f7fd bb97 	b.w	8013db4 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 8016686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801668a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801668e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016692:	f77e aa22 	ble.w	8014ada <m_kalman_3gyro.isra.0.constprop.0+0x1d82>
 8016696:	ed93 6a04 	vldr	s12, [r3, #16]
 801669a:	edd3 6a05 	vldr	s13, [r3, #20]
 801669e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80166a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80166a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80166aa:	ed83 7a03 	vstr	s14, [r3, #12]
 80166ae:	ed83 6a04 	vstr	s12, [r3, #16]
 80166b2:	edc3 7a05 	vstr	s15, [r3, #20]
 80166b6:	f7fe ba10 	b.w	8014ada <m_kalman_3gyro.isra.0.constprop.0+0x1d82>
 80166ba:	4634      	mov	r4, r6
 80166bc:	463d      	mov	r5, r7
 80166be:	f7fe b9f9 	b.w	8014ab4 <m_kalman_3gyro.isra.0.constprop.0+0x1d5c>
 80166c2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80166c6:	9907      	ldr	r1, [sp, #28]
 80166c8:	edc3 9a12 	vstr	s19, [r3, #72]	; 0x48
 80166cc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80166d0:	ed83 9a15 	vstr	s18, [r3, #84]	; 0x54
 80166d4:	edc3 8a18 	vstr	s17, [r3, #96]	; 0x60
 80166d8:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 80166dc:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 80166e0:	ed83 8a17 	vstr	s16, [r3, #92]	; 0x5c
 80166e4:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 80166e8:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 80166ec:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 80166f0:	9004      	str	r0, [sp, #16]
 80166f2:	f7fa fea1 	bl	8011438 <m_dcm2q_eml>
 80166f6:	eddf 7a33 	vldr	s15, [pc, #204]	; 80167c4 <m_kalman_3gyro.isra.0.constprop.0+0x3a6c>
 80166fa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80166fe:	eef4 aae7 	vcmpe.f32	s21, s15
 8016702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016706:	ed83 da2b 	vstr	s26, [r3, #172]	; 0xac
 801670a:	f140 814a 	bpl.w	80169a2 <m_kalman_3gyro.isra.0.constprop.0+0x3c4a>
 801670e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80167c8 <m_kalman_3gyro.isra.0.constprop.0+0x3a70>
 8016712:	eef4 aae7 	vcmpe.f32	s21, s15
 8016716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801671a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801671e:	bfc8      	it	gt
 8016720:	eef0 7a6a 	vmovgt.f32	s15, s21
 8016724:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 8016728:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801672c:	2100      	movs	r1, #0
 801672e:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8016732:	f004 fe13 	bl	801b35c <memset>
 8016736:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 801673a:	4b21      	ldr	r3, [pc, #132]	; (80167c0 <m_kalman_3gyro.isra.0.constprop.0+0x3a68>)
 801673c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8016740:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8016744:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8016748:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 801674c:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
 8016750:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8016754:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
 8016758:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
 801675c:	f8c0 31f8 	str.w	r3, [r0, #504]	; 0x1f8
 8016760:	f8dd 36cc 	ldr.w	r3, [sp, #1740]	; 0x6cc
 8016764:	2100      	movs	r1, #0
 8016766:	2201      	movs	r2, #1
 8016768:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 801676c:	701a      	strb	r2, [r3, #0]
 801676e:	f7fd baf3 	b.w	8013d58 <m_kalman_3gyro.isra.0.constprop.0+0x1000>
 8016772:	2201      	movs	r2, #1
 8016774:	f240 1301 	movw	r3, #257	; 0x101
 8016778:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 801677c:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 8016780:	f7fe b907 	b.w	8014992 <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 8016784:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016788:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801678c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8016790:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016794:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8016798:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 801679c:	2300      	movs	r3, #0
 801679e:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
 80167a2:	67ca      	str	r2, [r1, #124]	; 0x7c
 80167a4:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 80167a8:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 80167ac:	f8c1 345c 	str.w	r3, [r1, #1116]	; 0x45c
 80167b0:	f7fd bf3e 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 80167b4:	f3af 8000 	nop.w
 80167b8:	3ff80000 	.word	0x3ff80000
 80167bc:	3f666666 	.word	0x3f666666
 80167c0:	40a00000 	.word	0x40a00000
 80167c4:	3f99999a 	.word	0x3f99999a
 80167c8:	3f4ccccd 	.word	0x3f4ccccd
 80167cc:	33333333 	.word	0x33333333
 80167d0:	3fd33333 	.word	0x3fd33333
 80167d4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 80167d8:	2301      	movs	r3, #1
 80167da:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 80167de:	f240 1201 	movw	r2, #257	; 0x101
 80167e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80167e4:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 80167e8:	edd3 7a00 	vldr	s15, [r3]
 80167ec:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80167f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167f4:	eeb4 aae7 	vcmpe.f32	s20, s15
 80167f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167fc:	f200 80d4 	bhi.w	80169a8 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8016800:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016804:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 8016808:	2b00      	cmp	r3, #0
 801680a:	f000 81a2 	beq.w	8016b52 <m_kalman_3gyro.isra.0.constprop.0+0x3dfa>
 801680e:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8016812:	edd3 6a06 	vldr	s13, [r3, #24]
 8016816:	ed93 7a07 	vldr	s14, [r3, #28]
 801681a:	edd3 7a08 	vldr	s15, [r3, #32]
 801681e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016822:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016826:	ee27 7a06 	vmul.f32	s14, s14, s12
 801682a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801682e:	edc3 6a06 	vstr	s13, [r3, #24]
 8016832:	ed83 7a07 	vstr	s14, [r3, #28]
 8016836:	edc3 7a08 	vstr	s15, [r3, #32]
 801683a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801683e:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 8016842:	3301      	adds	r3, #1
 8016844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016848:	f000 81fa 	beq.w	8016c40 <m_kalman_3gyro.isra.0.constprop.0+0x3ee8>
 801684c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8016850:	2b31      	cmp	r3, #49	; 0x31
 8016852:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 8016856:	f200 81f3 	bhi.w	8016c40 <m_kalman_3gyro.isra.0.constprop.0+0x3ee8>
 801685a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801685e:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
 8016862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016866:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 801686a:	f000 81de 	beq.w	8016c2a <m_kalman_3gyro.isra.0.constprop.0+0x3ed2>
 801686e:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8016872:	f040 80b4 	bne.w	80169de <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 8016876:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801687a:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 801687e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8016882:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8016886:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 801688a:	2301      	movs	r3, #1
 801688c:	f884 38a4 	strb.w	r3, [r4, #2212]	; 0x8a4
 8016890:	f604 0398 	addw	r3, r4, #2200	; 0x898
 8016894:	6018      	str	r0, [r3, #0]
 8016896:	f604 039c 	addw	r3, r4, #2204	; 0x89c
 801689a:	6019      	str	r1, [r3, #0]
 801689c:	f504 630a 	add.w	r3, r4, #2208	; 0x8a0
 80168a0:	601a      	str	r2, [r3, #0]
 80168a2:	eddd 7a4c 	vldr	s15, [sp, #304]	; 0x130
 80168a6:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 80168aa:	ed9d 7a4d 	vldr	s14, [sp, #308]	; 0x134
 80168ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80168b2:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80168b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80168ba:	ee37 7a07 	vadd.f32	s14, s14, s14
 80168be:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80168c2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80168c6:	ee17 0a90 	vmov	r0, s15
 80168ca:	f7e9 fe35 	bl	8000538 <__aeabi_f2d>
 80168ce:	ec41 0b10 	vmov	d0, r0, r1
 80168d2:	f005 fb99 	bl	801c008 <sqrt>
 80168d6:	ec51 0b10 	vmov	r0, r1, d0
 80168da:	f7ea f97d 	bl	8000bd8 <__aeabi_d2f>
 80168de:	f7e9 fe2b 	bl	8000538 <__aeabi_f2d>
 80168e2:	a3f7      	add	r3, pc, #988	; (adr r3, 8016cc0 <m_kalman_3gyro.isra.0.constprop.0+0x3f68>)
 80168e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e8:	f7ea f8f0 	bl	8000acc <__aeabi_dcmplt>
 80168ec:	2800      	cmp	r0, #0
 80168ee:	f000 8124 	beq.w	8016b3a <m_kalman_3gyro.isra.0.constprop.0+0x3de2>
 80168f2:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
 80168f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80168fa:	2200      	movs	r2, #0
 80168fc:	2300      	movs	r3, #0
 80168fe:	f7ea f8db 	bl	8000ab8 <__aeabi_dcmpeq>
 8016902:	2800      	cmp	r0, #0
 8016904:	f000 81b4 	beq.w	8016c70 <m_kalman_3gyro.isra.0.constprop.0+0x3f18>
 8016908:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801690c:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8016910:	2b32      	cmp	r3, #50	; 0x32
 8016912:	f040 81ae 	bne.w	8016c72 <m_kalman_3gyro.isra.0.constprop.0+0x3f1a>
 8016916:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 801691a:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 8016cb0 <m_kalman_3gyro.isra.0.constprop.0+0x3f58>
 801691e:	edd3 7a06 	vldr	s15, [r3, #24]
 8016922:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 8016926:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 801692a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801692e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8016932:	edc1 7a06 	vstr	s15, [r1, #24]
 8016936:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 801693a:	2201      	movs	r2, #1
 801693c:	f881 2202 	strb.w	r2, [r1, #514]	; 0x202
 8016940:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 8016944:	edd1 7a07 	vldr	s15, [r1, #28]
 8016948:	ee67 7a87 	vmul.f32	s15, s15, s14
 801694c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016950:	edc1 7a07 	vstr	s15, [r1, #28]
 8016954:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016958:	f881 2203 	strb.w	r2, [r1, #515]	; 0x203
 801695c:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 8016960:	edd1 7a08 	vldr	s15, [r1, #32]
 8016964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016968:	edc1 7a08 	vstr	s15, [r1, #32]
 801696c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016970:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 8016974:	f000 81de 	beq.w	8016d34 <m_kalman_3gyro.isra.0.constprop.0+0x3fdc>
 8016978:	3301      	adds	r3, #1
 801697a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 801697e:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 8016982:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8016986:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016988:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 801698a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 801698c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 8016990:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 8016994:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8016998:	f7fd be4a 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 801699c:	1c5c      	adds	r4, r3, #1
 801699e:	f7fd bb09 	b.w	8013fb4 <m_kalman_3gyro.isra.0.constprop.0+0x125c>
 80169a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80169a6:	e6bd      	b.n	8016724 <m_kalman_3gyro.isra.0.constprop.0+0x39cc>
 80169a8:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 80169ac:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 80169b0:	edd3 6a06 	vldr	s13, [r3, #24]
 80169b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80169b8:	edd3 7a08 	vldr	s15, [r3, #32]
 80169bc:	ee66 6aab 	vmul.f32	s13, s13, s23
 80169c0:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80169c4:	ee67 baab 	vmul.f32	s23, s15, s23
 80169c8:	edc2 6a06 	vstr	s13, [r2, #24]
 80169cc:	ed82 7a07 	vstr	s14, [r2, #28]
 80169d0:	edc2 ba08 	vstr	s23, [r2, #32]
 80169d4:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80169d8:	2300      	movs	r3, #0
 80169da:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 80169de:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 80169e2:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	f47f af5b 	bne.w	80168a2 <m_kalman_3gyro.isra.0.constprop.0+0x3b4a>
 80169ec:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80169f0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80169f4:	b32a      	cbz	r2, 8016a42 <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 80169f6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80169fa:	eef4 dae7 	vcmpe.f32	s27, s15
 80169fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a02:	d51e      	bpl.n	8016a42 <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 8016a04:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8016a08:	ed92 7af1 	vldr	s14, [r2, #964]	; 0x3c4
 8016a0c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8016a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a18:	d513      	bpl.n	8016a42 <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 8016a1a:	4610      	mov	r0, r2
 8016a1c:	f8d2 13d8 	ldr.w	r1, [r2, #984]	; 0x3d8
 8016a20:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8016a24:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8016a28:	f8d0 13d4 	ldr.w	r1, [r0, #980]	; 0x3d4
 8016a2c:	67c1      	str	r1, [r0, #124]	; 0x7c
 8016a2e:	f8dd 16c8 	ldr.w	r1, [sp, #1736]	; 0x6c8
 8016a32:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8016a36:	2201      	movs	r2, #1
 8016a38:	700a      	strb	r2, [r1, #0]
 8016a3a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8016a3e:	f7fd bdf7 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8016a42:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016a46:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 8016a4a:	2b1e      	cmp	r3, #30
 8016a4c:	f000 808c 	beq.w	8016b68 <m_kalman_3gyro.isra.0.constprop.0+0x3e10>
 8016a50:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016a54:	3301      	adds	r3, #1
 8016a56:	2200      	movs	r2, #0
 8016a58:	f8c1 3454 	str.w	r3, [r1, #1108]	; 0x454
 8016a5c:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8016a60:	f7fd bde6 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8016a64:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016a68:	2301      	movs	r3, #1
 8016a6a:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 8016a6e:	f240 1201 	movw	r2, #257	; 0x101
 8016a72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a74:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8016a78:	edd3 7a00 	vldr	s15, [r3]
 8016a7c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8016a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016a84:	eef4 7aca 	vcmpe.f32	s15, s20
 8016a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a8c:	f6bf aeb8 	bge.w	8016800 <m_kalman_3gyro.isra.0.constprop.0+0x3aa8>
 8016a90:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8016a94:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 8016a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa0:	dd82      	ble.n	80169a8 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8016aa2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8016aa6:	eef4 7aef 	vcmpe.f32	s15, s31
 8016aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aae:	f77f af7b 	ble.w	80169a8 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8016ab2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8016ab6:	eddd 5a17 	vldr	s11, [sp, #92]	; 0x5c
 8016aba:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac2:	f77f af71 	ble.w	80169a8 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8016ac6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016aca:	eef4 dae6 	vcmpe.f32	s27, s13
 8016ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad2:	f57f af69 	bpl.w	80169a8 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8016ad6:	ed9d 6a0d 	vldr	s12, [sp, #52]	; 0x34
 8016ada:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8016ade:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 8016ae2:	ee8f 6a86 	vdiv.f32	s12, s31, s12
 8016ae6:	eec5 7aa7 	vdiv.f32	s15, s11, s15
 8016aea:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016aee:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8016af2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016af6:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016afe:	f57f af53 	bpl.w	80169a8 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 8016b02:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8016b06:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8016b0a:	ed93 6a06 	vldr	s12, [r3, #24]
 8016b0e:	ed93 7a07 	vldr	s14, [r3, #28]
 8016b12:	edd3 7a08 	vldr	s15, [r3, #32]
 8016b16:	ee26 6a26 	vmul.f32	s12, s12, s13
 8016b1a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016b1e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8016b22:	ed82 6a06 	vstr	s12, [r2, #24]
 8016b26:	ed82 7a07 	vstr	s14, [r2, #28]
 8016b2a:	edc2 6a08 	vstr	s13, [r2, #32]
 8016b2e:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8016b32:	2300      	movs	r3, #0
 8016b34:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 8016b38:	e751      	b.n	80169de <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 8016b3a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016b3e:	f8c3 0450 	str.w	r0, [r3, #1104]	; 0x450
 8016b42:	f8a3 0202 	strh.w	r0, [r3, #514]	; 0x202
 8016b46:	f883 0204 	strb.w	r0, [r3, #516]	; 0x204
 8016b4a:	f8c3 045c 	str.w	r0, [r3, #1116]	; 0x45c
 8016b4e:	f7fd bd6f 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8016b52:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8016b56:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8016cb4 <m_kalman_3gyro.isra.0.constprop.0+0x3f5c>
 8016b5a:	edd3 6a06 	vldr	s13, [r3, #24]
 8016b5e:	ed93 7a07 	vldr	s14, [r3, #28]
 8016b62:	edd3 7a08 	vldr	s15, [r3, #32]
 8016b66:	e65c      	b.n	8016822 <m_kalman_3gyro.isra.0.constprop.0+0x3aca>
 8016b68:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016b6c:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 8016b70:	2b27      	cmp	r3, #39	; 0x27
 8016b72:	f200 80f6 	bhi.w	8016d62 <m_kalman_3gyro.isra.0.constprop.0+0x400a>
 8016b76:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016b7a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016b7e:	f8d3 23d8 	ldr.w	r2, [r3, #984]	; 0x3d8
 8016b82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8016b86:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 8016b8a:	f8d1 23d4 	ldr.w	r2, [r1, #980]	; 0x3d4
 8016b8e:	67ca      	str	r2, [r1, #124]	; 0x7c
 8016b90:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8016b94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8016b98:	2301      	movs	r3, #1
 8016b9a:	7013      	strb	r3, [r2, #0]
 8016b9c:	460b      	mov	r3, r1
 8016b9e:	f8b3 38a8 	ldrh.w	r3, [r3, #2216]	; 0x8a8
 8016ba2:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016ba6:	2201      	movs	r2, #1
 8016ba8:	4413      	add	r3, r2
 8016baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016bae:	bf14      	ite	ne
 8016bb0:	b29b      	uxthne	r3, r3
 8016bb2:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8016bb6:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8016bba:	f8a1 38a8 	strh.w	r3, [r1, #2216]	; 0x8a8
 8016bbe:	f7fd bd37 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d063      	beq.n	8016c8e <m_kalman_3gyro.isra.0.constprop.0+0x3f36>
 8016bc6:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8016bca:	3b01      	subs	r3, #1
 8016bcc:	f882 38ad 	strb.w	r3, [r2, #2221]	; 0x8ad
 8016bd0:	f8a2 01fc 	strh.w	r0, [r2, #508]	; 0x1fc
 8016bd4:	f882 01fe 	strb.w	r0, [r2, #510]	; 0x1fe
 8016bd8:	f882 0205 	strb.w	r0, [r2, #517]	; 0x205
 8016bdc:	f882 0207 	strb.w	r0, [r2, #519]	; 0x207
 8016be0:	f7fd bfb8 	b.w	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8016be4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016be6:	4f34      	ldr	r7, [pc, #208]	; (8016cb8 <m_kalman_3gyro.isra.0.constprop.0+0x3f60>)
 8016be8:	6801      	ldr	r1, [r0, #0]
 8016bea:	6846      	ldr	r6, [r0, #4]
 8016bec:	6885      	ldr	r5, [r0, #8]
 8016bee:	9808      	ldr	r0, [sp, #32]
 8016bf0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016bf4:	3201      	adds	r2, #1
 8016bf6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016bfa:	f887 21b0 	strb.w	r2, [r7, #432]	; 0x1b0
 8016bfe:	4602      	mov	r2, r0
 8016c00:	6804      	ldr	r4, [r0, #0]
 8016c02:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
 8016c06:	6840      	ldr	r0, [r0, #4]
 8016c08:	6891      	ldr	r1, [r2, #8]
 8016c0a:	f8c3 61b8 	str.w	r6, [r3, #440]	; 0x1b8
 8016c0e:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
 8016c12:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
 8016c16:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 8016c1a:	f8c3 11f8 	str.w	r1, [r3, #504]	; 0x1f8
 8016c1e:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 8016c22:	2200      	movs	r2, #0
 8016c24:	701a      	strb	r2, [r3, #0]
 8016c26:	f7fe b8ac 	b.w	8014d82 <m_kalman_3gyro.isra.0.constprop.0+0x202a>
 8016c2a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8016c2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016c32:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 8016c36:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8016c3a:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 8016c3e:	e6ce      	b.n	80169de <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 8016c40:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016c44:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	f47f ae06 	bne.w	801685a <m_kalman_3gyro.isra.0.constprop.0+0x3b02>
 8016c4e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8016cbc <m_kalman_3gyro.isra.0.constprop.0+0x3f64>
 8016c52:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8016c56:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016c5a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016c5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016c62:	edc3 6a06 	vstr	s13, [r3, #24]
 8016c66:	ed83 7a07 	vstr	s14, [r3, #28]
 8016c6a:	edc3 7a08 	vstr	s15, [r3, #32]
 8016c6e:	e5f4      	b.n	801685a <m_kalman_3gyro.isra.0.constprop.0+0x3b02>
 8016c70:	4603      	mov	r3, r0
 8016c72:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016c76:	2200      	movs	r2, #0
 8016c78:	3301      	adds	r3, #1
 8016c7a:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 8016c7e:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8016c82:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 8016c86:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8016c8a:	f7fd bcd1 	b.w	8014630 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 8016c8e:	2e00      	cmp	r6, #0
 8016c90:	d078      	beq.n	8016d84 <m_kalman_3gyro.isra.0.constprop.0+0x402c>
 8016c92:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8016c96:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 8016c9a:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 8016c9e:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 8016ca2:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 8016ca6:	f7fd bf55 	b.w	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8016caa:	bf00      	nop
 8016cac:	f3af 8000 	nop.w
 8016cb0:	3e4ccccd 	.word	0x3e4ccccd
 8016cb4:	3eaaaaab 	.word	0x3eaaaaab
 8016cb8:	200013e8 	.word	0x200013e8
 8016cbc:	3f19999a 	.word	0x3f19999a
 8016cc0:	47ae147b 	.word	0x47ae147b
 8016cc4:	3f747ae1 	.word	0x3f747ae1
 8016cc8:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016ccc:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 8016cd0:	2301      	movs	r3, #1
 8016cd2:	f240 1201 	movw	r2, #257	; 0x101
 8016cd6:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8016cda:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 8016cde:	9908      	ldr	r1, [sp, #32]
 8016ce0:	680a      	ldr	r2, [r1, #0]
 8016ce2:	67c2      	str	r2, [r0, #124]	; 0x7c
 8016ce4:	684a      	ldr	r2, [r1, #4]
 8016ce6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8016cea:	688a      	ldr	r2, [r1, #8]
 8016cec:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8016cf0:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8016cf4:	7013      	strb	r3, [r2, #0]
 8016cf6:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 8016cfa:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 8016cfe:	3301      	adds	r3, #1
 8016d00:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 8016d04:	2a00      	cmp	r2, #0
 8016d06:	f43e ade9 	beq.w	80158dc <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 8016d0a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8016d0e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8016d12:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
 8016d16:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 8016d1a:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8016d1c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 8016d20:	2200      	movs	r2, #0
 8016d22:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 8016d26:	f7fe bdd9 	b.w	80158dc <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 8016d2a:	2364      	movs	r3, #100	; 0x64
 8016d2c:	f8c1 38b0 	str.w	r3, [r1, #2224]	; 0x8b0
 8016d30:	f7fd bf10 	b.w	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 8016d34:	460b      	mov	r3, r1
 8016d36:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 8016d3a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8016d3e:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 8016d42:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8016d46:	6018      	str	r0, [r3, #0]
 8016d48:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016d4c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8016d50:	6019      	str	r1, [r3, #0]
 8016d52:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8016d56:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8016d5a:	601a      	str	r2, [r3, #0]
 8016d5c:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8016d60:	e60b      	b.n	801697a <m_kalman_3gyro.isra.0.constprop.0+0x3c22>
 8016d62:	9a08      	ldr	r2, [sp, #32]
 8016d64:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8016d68:	6813      	ldr	r3, [r2, #0]
 8016d6a:	67cb      	str	r3, [r1, #124]	; 0x7c
 8016d6c:	6853      	ldr	r3, [r2, #4]
 8016d6e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8016d72:	6892      	ldr	r2, [r2, #8]
 8016d74:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 8016d78:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 8016d7c:	2301      	movs	r3, #1
 8016d7e:	7013      	strb	r3, [r2, #0]
 8016d80:	460b      	mov	r3, r1
 8016d82:	e70c      	b.n	8016b9e <m_kalman_3gyro.isra.0.constprop.0+0x3e46>
 8016d84:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8016d88:	edd3 6a00 	vldr	s13, [r3]
 8016d8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8016d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8016d94:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8016d98:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016d9c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016da0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016da4:	edc3 6a00 	vstr	s13, [r3]
 8016da8:	ed83 7a01 	vstr	s14, [r3, #4]
 8016dac:	edc3 7a02 	vstr	s15, [r3, #8]
 8016db0:	f7fd bed0 	b.w	8014b54 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>

08016db4 <SpacePointAlgorithm.isra.0>:
 8016db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db8:	ed2d 8b10 	vpush	{d8-d15}
 8016dbc:	b0bb      	sub	sp, #236	; 0xec
 8016dbe:	f8df e3e8 	ldr.w	lr, [pc, #1000]	; 80171a8 <SpacePointAlgorithm.isra.0+0x3f4>
 8016dc2:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 8016dc6:	9515      	str	r5, [sp, #84]	; 0x54
 8016dc8:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8016dcc:	9516      	str	r5, [sp, #88]	; 0x58
 8016dce:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8016dd2:	9517      	str	r5, [sp, #92]	; 0x5c
 8016dd4:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 8016dd8:	9518      	str	r5, [sp, #96]	; 0x60
 8016dda:	4681      	mov	r9, r0
 8016ddc:	460e      	mov	r6, r1
 8016dde:	4692      	mov	sl, r2
 8016de0:	461d      	mov	r5, r3
 8016de2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016de6:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 8016dea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016dee:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016df2:	9f69      	ldr	r7, [sp, #420]	; 0x1a4
 8016df4:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 8016df8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016dfc:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 8016e00:	eef0 ba40 	vmov.f32	s23, s0
 8016e04:	eeb0 ea60 	vmov.f32	s28, s1
 8016e08:	eef0 da61 	vmov.f32	s27, s3
 8016e0c:	eeb0 ba42 	vmov.f32	s22, s4
 8016e10:	eef0 9a62 	vmov.f32	s19, s5
 8016e14:	eeb0 aa43 	vmov.f32	s20, s6
 8016e18:	eef0 aa63 	vmov.f32	s21, s7
 8016e1c:	f7e9 fedc 	bl	8000bd8 <__aeabi_d2f>
 8016e20:	f897 38cc 	ldrb.w	r3, [r7, #2252]	; 0x8cc
 8016e24:	9c54      	ldr	r4, [sp, #336]	; 0x150
 8016e26:	f89d b164 	ldrb.w	fp, [sp, #356]	; 0x164
 8016e2a:	f8dd 8190 	ldr.w	r8, [sp, #400]	; 0x190
 8016e2e:	ee0c 0a90 	vmov	s25, r0
 8016e32:	b923      	cbnz	r3, 8016e3e <SpacePointAlgorithm.isra.0+0x8a>
 8016e34:	2200      	movs	r2, #0
 8016e36:	2301      	movs	r3, #1
 8016e38:	603a      	str	r2, [r7, #0]
 8016e3a:	f887 38cc 	strb.w	r3, [r7, #2252]	; 0x8cc
 8016e3e:	eddf 7ace 	vldr	s15, [pc, #824]	; 8017178 <SpacePointAlgorithm.isra.0+0x3c4>
 8016e42:	eec7 7aab 	vdiv.f32	s15, s15, s23
 8016e46:	ee17 0a90 	vmov	r0, s15
 8016e4a:	f7e9 fb75 	bl	8000538 <__aeabi_f2d>
 8016e4e:	ec41 0b10 	vmov	d0, r0, r1
 8016e52:	f005 f8d9 	bl	801c008 <sqrt>
 8016e56:	ec51 0b10 	vmov	r0, r1, d0
 8016e5a:	f7e9 febd 	bl	8000bd8 <__aeabi_d2f>
 8016e5e:	eddf 4ac7 	vldr	s9, [pc, #796]	; 801717c <SpacePointAlgorithm.isra.0+0x3c8>
 8016e62:	ed95 5a00 	vldr	s10, [r5]
 8016e66:	edd5 5a01 	vldr	s11, [r5, #4]
 8016e6a:	ed95 6a02 	vldr	s12, [r5, #8]
 8016e6e:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8017180 <SpacePointAlgorithm.isra.0+0x3cc>
 8016e72:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 8016e76:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8016e7a:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 8016e7e:	ed9d da23 	vldr	s26, [sp, #140]	; 0x8c
 8016e82:	ed9d 9a24 	vldr	s18, [sp, #144]	; 0x90
 8016e86:	ee07 0a90 	vmov	s15, r0
 8016e8a:	ee25 5a24 	vmul.f32	s10, s10, s9
 8016e8e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8016e92:	ee26 6a24 	vmul.f32	s12, s12, s9
 8016e96:	ee86 8aa7 	vdiv.f32	s16, s13, s15
 8016e9a:	ee27 fa81 	vmul.f32	s30, s15, s2
 8016e9e:	ee67 fa87 	vmul.f32	s31, s15, s14
 8016ea2:	ee67 8aae 	vmul.f32	s17, s15, s29
 8016ea6:	ee27 da8d 	vmul.f32	s26, s15, s26
 8016eaa:	ee27 9a89 	vmul.f32	s18, s15, s18
 8016eae:	ed85 5a00 	vstr	s10, [r5]
 8016eb2:	edc5 5a01 	vstr	s11, [r5, #4]
 8016eb6:	ed85 6a02 	vstr	s12, [r5, #8]
 8016eba:	f1bb 0f04 	cmp.w	fp, #4
 8016ebe:	f200 812f 	bhi.w	8017120 <SpacePointAlgorithm.isra.0+0x36c>
 8016ec2:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8016ec6:	0140      	.short	0x0140
 8016ec8:	0122014d 	.word	0x0122014d
 8016ecc:	0005012d 	.word	0x0005012d
 8016ed0:	ed9f caac 	vldr	s24, [pc, #688]	; 8017184 <SpacePointAlgorithm.isra.0+0x3d0>
 8016ed4:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 8016ed8:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 8016edc:	2200      	movs	r2, #0
 8016ede:	2300      	movs	r3, #0
 8016ee0:	f7e9 fdea 	bl	8000ab8 <__aeabi_dcmpeq>
 8016ee4:	ed97 7a00 	vldr	s14, [r7]
 8016ee8:	b168      	cbz	r0, 8016f06 <SpacePointAlgorithm.isra.0+0x152>
 8016eea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef2:	f340 80ee 	ble.w	80170d2 <SpacePointAlgorithm.isra.0+0x31e>
 8016ef6:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8016efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f02:	f140 80e6 	bpl.w	80170d2 <SpacePointAlgorithm.isra.0+0x31e>
 8016f06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016f0a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8016f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f12:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f1a:	edc7 7a00 	vstr	s15, [r7]
 8016f1e:	f100 80ef 	bmi.w	8017100 <SpacePointAlgorithm.isra.0+0x34c>
 8016f22:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8016f26:	eec6 4a27 	vdiv.f32	s9, s12, s15
 8016f2a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8017188 <SpacePointAlgorithm.isra.0+0x3d4>
 8016f2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016f32:	ee2b da0d 	vmul.f32	s26, s22, s26
 8016f36:	eddf 7a95 	vldr	s15, [pc, #596]	; 801718c <SpacePointAlgorithm.isra.0+0x3d8>
 8016f3a:	ee2d da07 	vmul.f32	s26, s26, s14
 8016f3e:	ee27 fa0f 	vmul.f32	s30, s14, s30
 8016f42:	ee68 4a24 	vmul.f32	s9, s16, s9
 8016f46:	ee27 7a2f 	vmul.f32	s14, s14, s31
 8016f4a:	ee6e eaa8 	vmul.f32	s29, s29, s17
 8016f4e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8016f52:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8016f56:	edd6 7a01 	vldr	s15, [r6, #4]
 8016f5a:	ed94 4a09 	vldr	s8, [r4, #36]	; 0x24
 8016f5e:	ed94 6a03 	vldr	s12, [r4, #12]
 8016f62:	ed96 5a00 	vldr	s10, [r6]
 8016f66:	edd4 5a05 	vldr	s11, [r4, #20]
 8016f6a:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8016f6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016f72:	edd4 6a04 	vldr	s13, [r4, #16]
 8016f76:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
 8016f7a:	ee35 5a44 	vsub.f32	s10, s10, s8
 8016f7e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8016f82:	ed94 4a00 	vldr	s8, [r4]
 8016f86:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016f8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8016f8e:	eea5 6a04 	vfma.f32	s12, s10, s8
 8016f92:	462b      	mov	r3, r5
 8016f94:	ad1a      	add	r5, sp, #104	; 0x68
 8016f96:	ed94 4a02 	vldr	s8, [r4, #8]
 8016f9a:	edcd 4a25 	vstr	s9, [sp, #148]	; 0x94
 8016f9e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016fa2:	edd4 5a01 	vldr	s11, [r4, #4]
 8016fa6:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 8016faa:	eeb0 7a66 	vmov.f32	s14, s13
 8016fae:	eea5 7a25 	vfma.f32	s14, s10, s11
 8016fb2:	a92e      	add	r1, sp, #184	; 0xb8
 8016fb4:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 80171ac <SpacePointAlgorithm.isra.0+0x3f8>
 8016fb8:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8016fbc:	edd6 5a02 	vldr	s11, [r6, #8]
 8016fc0:	ed8d fa2e 	vstr	s30, [sp, #184]	; 0xb8
 8016fc4:	eee4 7a05 	vfma.f32	s15, s8, s10
 8016fc8:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 80171b0 <SpacePointAlgorithm.isra.0+0x3fc>
 8016fcc:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8016fd0:	ed94 4a07 	vldr	s8, [r4, #28]
 8016fd4:	edd4 6a06 	vldr	s13, [r4, #24]
 8016fd8:	ed94 5a08 	vldr	s10, [r4, #32]
 8016fdc:	ed8d fa2f 	vstr	s30, [sp, #188]	; 0xbc
 8016fe0:	eea4 7a25 	vfma.f32	s14, s8, s11
 8016fe4:	ac25      	add	r4, sp, #148	; 0x94
 8016fe6:	4652      	mov	r2, sl
 8016fe8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8016fec:	4648      	mov	r0, r9
 8016fee:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80171b4 <SpacePointAlgorithm.isra.0+0x400>
 8016ff2:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 8016ff6:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8016ffa:	eeb7 2a08 	vmov.f32	s4, #120	; 0x3fc00000  1.5
 8016ffe:	ee2b ba02 	vmul.f32	s22, s22, s4
 8017002:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8017006:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 801700a:	ed8d fa30 	vstr	s30, [sp, #192]	; 0xc0
 801700e:	edcd ea34 	vstr	s29, [sp, #208]	; 0xd0
 8017012:	edcd ea35 	vstr	s29, [sp, #212]	; 0xd4
 8017016:	edcd ea36 	vstr	s29, [sp, #216]	; 0xd8
 801701a:	ed8d da37 	vstr	s26, [sp, #220]	; 0xdc
 801701e:	ed8d 9a38 	vstr	s18, [sp, #224]	; 0xe0
 8017022:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 8017026:	edcd 4a27 	vstr	s9, [sp, #156]	; 0x9c
 801702a:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801702c:	9602      	str	r6, [sp, #8]
 801702e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8017030:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
 8017034:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8017036:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
 801703a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801703c:	f88d 606a 	strb.w	r6, [sp, #106]	; 0x6a
 8017040:	9e68      	ldr	r6, [sp, #416]	; 0x1a0
 8017042:	9611      	str	r6, [sp, #68]	; 0x44
 8017044:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 8017048:	9e67      	ldr	r6, [sp, #412]	; 0x19c
 801704a:	9610      	str	r6, [sp, #64]	; 0x40
 801704c:	9e66      	ldr	r6, [sp, #408]	; 0x198
 801704e:	9504      	str	r5, [sp, #16]
 8017050:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017054:	e9cd 860e 	strd	r8, r6, [sp, #56]	; 0x38
 8017058:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 801705c:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 801705e:	960c      	str	r6, [sp, #48]	; 0x30
 8017060:	9e62      	ldr	r6, [sp, #392]	; 0x188
 8017062:	960b      	str	r6, [sp, #44]	; 0x2c
 8017064:	ad1b      	add	r5, sp, #108	; 0x6c
 8017066:	9e55      	ldr	r6, [sp, #340]	; 0x154
 8017068:	f8cd b00c 	str.w	fp, [sp, #12]
 801706c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017070:	e9cd 1400 	strd	r1, r4, [sp]
 8017074:	eeb0 2a6c 	vmov.f32	s4, s25
 8017078:	eef0 1a6b 	vmov.f32	s3, s23
 801707c:	eeb0 1a6a 	vmov.f32	s2, s21
 8017080:	eef0 0a4a 	vmov.f32	s1, s20
 8017084:	eeb0 0a69 	vmov.f32	s0, s19
 8017088:	a91c      	add	r1, sp, #112	; 0x70
 801708a:	ed8d ca28 	vstr	s24, [sp, #160]	; 0xa0
 801708e:	ed8d ca29 	vstr	s24, [sp, #164]	; 0xa4
 8017092:	ed8d ca2a 	vstr	s24, [sp, #168]	; 0xa8
 8017096:	9712      	str	r7, [sp, #72]	; 0x48
 8017098:	960a      	str	r6, [sp, #40]	; 0x28
 801709a:	950d      	str	r5, [sp, #52]	; 0x34
 801709c:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 80170a0:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 80170a4:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
 80170a8:	f7fb fe56 	bl	8012d58 <m_kalman_3gyro.isra.0.constprop.0>
 80170ac:	9862      	ldr	r0, [sp, #392]	; 0x188
 80170ae:	4621      	mov	r1, r4
 80170b0:	f7f9 fd8e 	bl	8010bd0 <m_q2dcm_eml>
 80170b4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80170b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80170ba:	6013      	str	r3, [r2, #0]
 80170bc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80170c0:	6053      	str	r3, [r2, #4]
 80170c2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80170c6:	6093      	str	r3, [r2, #8]
 80170c8:	b03b      	add	sp, #236	; 0xec
 80170ca:	ecbd 8b10 	vpop	{d8-d15}
 80170ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8017190 <SpacePointAlgorithm.isra.0+0x3dc>
 80170d6:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 80170da:	ee7d daa7 	vadd.f32	s27, s27, s15
 80170de:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801718c <SpacePointAlgorithm.isra.0+0x3d8>
 80170e2:	2300      	movs	r3, #0
 80170e4:	ee27 fa0f 	vmul.f32	s30, s14, s30
 80170e8:	eec8 4a2d 	vdiv.f32	s9, s16, s27
 80170ec:	603b      	str	r3, [r7, #0]
 80170ee:	ee2e 7a2f 	vmul.f32	s14, s28, s31
 80170f2:	ee6e eaa8 	vmul.f32	s29, s29, s17
 80170f6:	ee2b da0d 	vmul.f32	s26, s22, s26
 80170fa:	ee29 9a27 	vmul.f32	s18, s18, s15
 80170fe:	e728      	b.n	8016f52 <SpacePointAlgorithm.isra.0+0x19e>
 8017100:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8017194 <SpacePointAlgorithm.isra.0+0x3e0>
 8017104:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 8017108:	e713      	b.n	8016f32 <SpacePointAlgorithm.isra.0+0x17e>
 801710a:	ee69 9aac 	vmul.f32	s19, s19, s25
 801710e:	ee2a aa2c 	vmul.f32	s20, s20, s25
 8017112:	ee6a aaac 	vmul.f32	s21, s21, s25
 8017116:	ed9f ca20 	vldr	s24, [pc, #128]	; 8017198 <SpacePointAlgorithm.isra.0+0x3e4>
 801711a:	eef1 ea04 	vmov.f32	s29, #20	; 0x40a00000  5.0
 801711e:	e6db      	b.n	8016ed8 <SpacePointAlgorithm.isra.0+0x124>
 8017120:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801719c <SpacePointAlgorithm.isra.0+0x3e8>
 8017124:	ed9f ca1e 	vldr	s24, [pc, #120]	; 80171a0 <SpacePointAlgorithm.isra.0+0x3ec>
 8017128:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801712c:	ee2a aa27 	vmul.f32	s20, s20, s15
 8017130:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8017134:	ee69 9aac 	vmul.f32	s19, s19, s25
 8017138:	ee2a aa2c 	vmul.f32	s20, s20, s25
 801713c:	ee6a aaac 	vmul.f32	s21, s21, s25
 8017140:	eef6 ea00 	vmov.f32	s29, #96	; 0x3f000000  0.5
 8017144:	e6c8      	b.n	8016ed8 <SpacePointAlgorithm.isra.0+0x124>
 8017146:	eddf 7a17 	vldr	s15, [pc, #92]	; 80171a4 <SpacePointAlgorithm.isra.0+0x3f0>
 801714a:	ed9f ca15 	vldr	s24, [pc, #84]	; 80171a0 <SpacePointAlgorithm.isra.0+0x3ec>
 801714e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8017152:	ee2a aa27 	vmul.f32	s20, s20, s15
 8017156:	ee6a aaa7 	vmul.f32	s21, s21, s15
 801715a:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 801715e:	e6bb      	b.n	8016ed8 <SpacePointAlgorithm.isra.0+0x124>
 8017160:	ee69 9aac 	vmul.f32	s19, s19, s25
 8017164:	ee2a aa2c 	vmul.f32	s20, s20, s25
 8017168:	ee6a aaac 	vmul.f32	s21, s21, s25
 801716c:	ed9f ca05 	vldr	s24, [pc, #20]	; 8017184 <SpacePointAlgorithm.isra.0+0x3d0>
 8017170:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 8017174:	e6b0      	b.n	8016ed8 <SpacePointAlgorithm.isra.0+0x124>
 8017176:	bf00      	nop
 8017178:	3c03126f 	.word	0x3c03126f
 801717c:	3c8efa35 	.word	0x3c8efa35
 8017180:	3b656042 	.word	0x3b656042
 8017184:	3ac49ba6 	.word	0x3ac49ba6
 8017188:	3d4ccccd 	.word	0x3d4ccccd
 801718c:	3f333333 	.word	0x3f333333
 8017190:	358637bd 	.word	0x358637bd
 8017194:	3e4ccccd 	.word	0x3e4ccccd
 8017198:	3727c5ac 	.word	0x3727c5ac
 801719c:	42c80000 	.word	0x42c80000
 80171a0:	3a83126f 	.word	0x3a83126f
 80171a4:	3dcccccd 	.word	0x3dcccccd
 80171a8:	0801de70 	.word	0x0801de70
 80171ac:	3b449ba6 	.word	0x3b449ba6
 80171b0:	3c23d70a 	.word	0x3c23d70a
 80171b4:	3a9d4952 	.word	0x3a9d4952

080171b8 <MotionDI_Initialize>:
 80171b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171bc:	4a12      	ldr	r2, [pc, #72]	; (8017208 <MotionDI_Initialize+0x50>)
 80171be:	4913      	ldr	r1, [pc, #76]	; (801720c <MotionDI_Initialize+0x54>)
 80171c0:	6813      	ldr	r3, [r2, #0]
 80171c2:	f023 0301 	bic.w	r3, r3, #1
 80171c6:	ed2d 8b02 	vpush	{d8}
 80171ca:	6013      	str	r3, [r2, #0]
 80171cc:	680b      	ldr	r3, [r1, #0]
 80171ce:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80171d2:	4013      	ands	r3, r2
 80171d4:	f24c 2440 	movw	r4, #49728	; 0xc240
 80171d8:	42a3      	cmp	r3, r4
 80171da:	b091      	sub	sp, #68	; 0x44
 80171dc:	4607      	mov	r7, r0
 80171de:	d01f      	beq.n	8017220 <MotionDI_Initialize+0x68>
 80171e0:	680b      	ldr	r3, [r1, #0]
 80171e2:	f24c 2170 	movw	r1, #49776	; 0xc270
 80171e6:	4013      	ands	r3, r2
 80171e8:	428b      	cmp	r3, r1
 80171ea:	d019      	beq.n	8017220 <MotionDI_Initialize+0x68>
 80171ec:	4b08      	ldr	r3, [pc, #32]	; (8017210 <MotionDI_Initialize+0x58>)
 80171ee:	2201      	movs	r2, #1
 80171f0:	601a      	str	r2, [r3, #0]
 80171f2:	681a      	ldr	r2, [r3, #0]
 80171f4:	2a00      	cmp	r2, #0
 80171f6:	d1fc      	bne.n	80171f2 <MotionDI_Initialize+0x3a>
 80171f8:	4b06      	ldr	r3, [pc, #24]	; (8017214 <MotionDI_Initialize+0x5c>)
 80171fa:	4a07      	ldr	r2, [pc, #28]	; (8017218 <MotionDI_Initialize+0x60>)
 80171fc:	601a      	str	r2, [r3, #0]
 80171fe:	681a      	ldr	r2, [r3, #0]
 8017200:	4b06      	ldr	r3, [pc, #24]	; (801721c <MotionDI_Initialize+0x64>)
 8017202:	429a      	cmp	r2, r3
 8017204:	d02b      	beq.n	801725e <MotionDI_Initialize+0xa6>
 8017206:	e7fe      	b.n	8017206 <MotionDI_Initialize+0x4e>
 8017208:	e0002000 	.word	0xe0002000
 801720c:	e000ed00 	.word	0xe000ed00
 8017210:	40023008 	.word	0x40023008
 8017214:	40023000 	.word	0x40023000
 8017218:	f407a5c2 	.word	0xf407a5c2
 801721c:	b5e8b5cd 	.word	0xb5e8b5cd
 8017220:	4be3      	ldr	r3, [pc, #908]	; (80175b0 <MotionDI_Initialize+0x3f8>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d1e1      	bne.n	80171ec <MotionDI_Initialize+0x34>
 8017228:	4ae2      	ldr	r2, [pc, #904]	; (80175b4 <MotionDI_Initialize+0x3fc>)
 801722a:	6813      	ldr	r3, [r2, #0]
 801722c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017230:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8017234:	d006      	beq.n	8017244 <MotionDI_Initialize+0x8c>
 8017236:	6813      	ldr	r3, [r2, #0]
 8017238:	f240 4283 	movw	r2, #1155	; 0x483
 801723c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017240:	4293      	cmp	r3, r2
 8017242:	d1d3      	bne.n	80171ec <MotionDI_Initialize+0x34>
 8017244:	4bdc      	ldr	r3, [pc, #880]	; (80175b8 <MotionDI_Initialize+0x400>)
 8017246:	2201      	movs	r2, #1
 8017248:	601a      	str	r2, [r3, #0]
 801724a:	681a      	ldr	r2, [r3, #0]
 801724c:	2a00      	cmp	r2, #0
 801724e:	d1fc      	bne.n	801724a <MotionDI_Initialize+0x92>
 8017250:	4bda      	ldr	r3, [pc, #872]	; (80175bc <MotionDI_Initialize+0x404>)
 8017252:	4adb      	ldr	r2, [pc, #876]	; (80175c0 <MotionDI_Initialize+0x408>)
 8017254:	601a      	str	r2, [r3, #0]
 8017256:	681a      	ldr	r2, [r3, #0]
 8017258:	4bda      	ldr	r3, [pc, #872]	; (80175c4 <MotionDI_Initialize+0x40c>)
 801725a:	429a      	cmp	r2, r3
 801725c:	d1d3      	bne.n	8017206 <MotionDI_Initialize+0x4e>
 801725e:	4cda      	ldr	r4, [pc, #872]	; (80175c8 <MotionDI_Initialize+0x410>)
 8017260:	4dda      	ldr	r5, [pc, #872]	; (80175cc <MotionDI_Initialize+0x414>)
 8017262:	f8d7 c000 	ldr.w	ip, [r7]
 8017266:	4bda      	ldr	r3, [pc, #872]	; (80175d0 <MotionDI_Initialize+0x418>)
 8017268:	49da      	ldr	r1, [pc, #872]	; (80175d4 <MotionDI_Initialize+0x41c>)
 801726a:	f504 62c9 	add.w	r2, r4, #1608	; 0x648
 801726e:	2001      	movs	r0, #1
 8017270:	f8c2 c000 	str.w	ip, [r2]
 8017274:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 8017278:	f884 0644 	strb.w	r0, [r4, #1604]	; 0x644
 801727c:	652a      	str	r2, [r5, #80]	; 0x50
 801727e:	2014      	movs	r0, #20
 8017280:	f505 628c 	add.w	r2, r5, #1120	; 0x460
 8017284:	f505 6b8d 	add.w	fp, r5, #1128	; 0x468
 8017288:	2600      	movs	r6, #0
 801728a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801728e:	f8c5 0464 	str.w	r0, [r5, #1124]	; 0x464
 8017292:	f44f 00dc 	mov.w	r0, #7208960	; 0x6e0000
 8017296:	6011      	str	r1, [r2, #0]
 8017298:	f8c5 01c8 	str.w	r0, [r5, #456]	; 0x1c8
 801729c:	2230      	movs	r2, #48	; 0x30
 801729e:	f8cb 3000 	str.w	r3, [fp]
 80172a2:	f8a5 c058 	strh.w	ip, [r5, #88]	; 0x58
 80172a6:	f105 0014 	add.w	r0, r5, #20
 80172aa:	4631      	mov	r1, r6
 80172ac:	702e      	strb	r6, [r5, #0]
 80172ae:	f885 646c 	strb.w	r6, [r5, #1132]	; 0x46c
 80172b2:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
 80172b6:	656e      	str	r6, [r5, #84]	; 0x54
 80172b8:	64ae      	str	r6, [r5, #72]	; 0x48
 80172ba:	f004 f84f 	bl	801b35c <memset>
 80172be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80172c2:	f44f 7281 	mov.w	r2, #258	; 0x102
 80172c6:	82aa      	strh	r2, [r5, #20]
 80172c8:	626b      	str	r3, [r5, #36]	; 0x24
 80172ca:	636b      	str	r3, [r5, #52]	; 0x34
 80172cc:	646b      	str	r3, [r5, #68]	; 0x44
 80172ce:	ed97 0a00 	vldr	s0, [r7]
 80172d2:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 80175d8 <MotionDI_Initialize+0x420>
 80172d6:	612e      	str	r6, [r5, #16]
 80172d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80172dc:	f884 664c 	strb.w	r6, [r4, #1612]	; 0x64c
 80172e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80172e4:	ee17 2a90 	vmov	r2, s15
 80172e8:	1e53      	subs	r3, r2, #1
 80172ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80172ee:	d20b      	bcs.n	8017308 <MotionDI_Initialize+0x150>
 80172f0:	f1a2 030a 	sub.w	r3, r2, #10
 80172f4:	b29b      	uxth	r3, r3
 80172f6:	2b5a      	cmp	r3, #90	; 0x5a
 80172f8:	bf8c      	ite	hi
 80172fa:	2300      	movhi	r3, #0
 80172fc:	2301      	movls	r3, #1
 80172fe:	f8c5 2464 	str.w	r2, [r5, #1124]	; 0x464
 8017302:	702b      	strb	r3, [r5, #0]
 8017304:	ed97 0a00 	vldr	s0, [r7]
 8017308:	4eb4      	ldr	r6, [pc, #720]	; (80175dc <MotionDI_Initialize+0x424>)
 801730a:	eddf 6ab5 	vldr	s13, [pc, #724]	; 80175e0 <MotionDI_Initialize+0x428>
 801730e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80175e4 <MotionDI_Initialize+0x42c>
 8017312:	4fb5      	ldr	r7, [pc, #724]	; (80175e8 <MotionDI_Initialize+0x430>)
 8017314:	f7f9 f9ce 	bl	80106b4 <iNemoEngine_gbias_init>
 8017318:	f20f 296c 	addw	r9, pc, #620	; 0x26c
 801731c:	e9d9 8900 	ldrd	r8, r9, [r9]
 8017320:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 8017590 <MotionDI_Initialize+0x3d8>
 8017324:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 8017598 <MotionDI_Initialize+0x3e0>
 8017328:	ed9f 2b9d 	vldr	d2, [pc, #628]	; 80175a0 <MotionDI_Initialize+0x3e8>
 801732c:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 80175a8 <MotionDI_Initialize+0x3f0>
 8017330:	eddf 7aae 	vldr	s15, [pc, #696]	; 80175ec <MotionDI_Initialize+0x434>
 8017334:	eddf 4aae 	vldr	s9, [pc, #696]	; 80175f0 <MotionDI_Initialize+0x438>
 8017338:	ed9f 6aae 	vldr	s12, [pc, #696]	; 80175f4 <MotionDI_Initialize+0x43c>
 801733c:	ed9f 3aae 	vldr	s6, [pc, #696]	; 80175f8 <MotionDI_Initialize+0x440>
 8017340:	eddf 3aae 	vldr	s7, [pc, #696]	; 80175fc <MotionDI_Initialize+0x444>
 8017344:	ed9f 4aae 	vldr	s8, [pc, #696]	; 8017600 <MotionDI_Initialize+0x448>
 8017348:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 8017610 <MotionDI_Initialize+0x458>
 801734c:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 8017350:	f241 1ab6 	movw	sl, #4534	; 0x11b6
 8017354:	f241 13b4 	movw	r3, #4532	; 0x11b4
 8017358:	2500      	movs	r5, #0
 801735a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801735e:	f606 00e8 	addw	r0, r6, #2280	; 0x8e8
 8017362:	210a      	movs	r1, #10
 8017364:	f886 18e0 	strb.w	r1, [r6, #2272]	; 0x8e0
 8017368:	ed86 0b08 	vstr	d0, [r6, #32]
 801736c:	ed86 1b0c 	vstr	d1, [r6, #48]	; 0x30
 8017370:	ed86 2b0e 	vstr	d2, [r6, #56]	; 0x38
 8017374:	ed86 5b06 	vstr	d5, [r6, #24]
 8017378:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
 801737c:	613d      	str	r5, [r7, #16]
 801737e:	753d      	strb	r5, [r7, #20]
 8017380:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 8017384:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 8017388:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 801738c:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 8017390:	52f5      	strh	r5, [r6, r3]
 8017392:	607d      	str	r5, [r7, #4]
 8017394:	723d      	strb	r5, [r7, #8]
 8017396:	61fd      	str	r5, [r7, #28]
 8017398:	f887 5020 	strb.w	r5, [r7, #32]
 801739c:	62bd      	str	r5, [r7, #40]	; 0x28
 801739e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
 80173a2:	637d      	str	r5, [r7, #52]	; 0x34
 80173a4:	f887 5038 	strb.w	r5, [r7, #56]	; 0x38
 80173a8:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 80173ac:	edc4 4a27 	vstr	s9, [r4, #156]	; 0x9c
 80173b0:	ed84 6a28 	vstr	s12, [r4, #160]	; 0xa0
 80173b4:	f806 500a 	strb.w	r5, [r6, sl]
 80173b8:	ed9f 6a92 	vldr	s12, [pc, #584]	; 8017604 <MotionDI_Initialize+0x44c>
 80173bc:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
 80173c0:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 80173c4:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 80173c8:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 80173cc:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 80173d0:	ed86 8a86 	vstr	s16, [r6, #536]	; 0x218
 80173d4:	643d      	str	r5, [r7, #64]	; 0x40
 80173d6:	ed80 5b02 	vstr	d5, [r0, #8]
 80173da:	ed9f 5a8b 	vldr	s10, [pc, #556]	; 8017608 <MotionDI_Initialize+0x450>
 80173de:	eddf 5a8b 	vldr	s11, [pc, #556]	; 801760c <MotionDI_Initialize+0x454>
 80173e2:	ed80 8a82 	vstr	s16, [r0, #520]	; 0x208
 80173e6:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 80173ea:	e9c0 8906 	strd	r8, r9, [r0, #24]
 80173ee:	eef2 4a04 	vmov.f32	s9, #36	; 0x41200000  10.0
 80173f2:	f04f 0801 	mov.w	r8, #1
 80173f6:	f04f 0902 	mov.w	r9, #2
 80173fa:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80173fe:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8017402:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8017406:	ed80 0b04 	vstr	d0, [r0, #16]
 801740a:	ed80 1b08 	vstr	d1, [r0, #32]
 801740e:	ed80 2b0a 	vstr	d2, [r0, #40]	; 0x28
 8017412:	f88e 80c0 	strb.w	r8, [lr, #192]	; 0xc0
 8017416:	edc0 7a83 	vstr	s15, [r0, #524]	; 0x20c
 801741a:	edc0 7a84 	vstr	s15, [r0, #528]	; 0x210
 801741e:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
 8017422:	edc4 7aaf 	vstr	s15, [r4, #700]	; 0x2bc
 8017426:	edc4 7ab0 	vstr	s15, [r4, #704]	; 0x2c0
 801742a:	edc4 7ab1 	vstr	s15, [r4, #708]	; 0x2c4
 801742e:	edc4 7ab3 	vstr	s15, [r4, #716]	; 0x2cc
 8017432:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 8017436:	edc4 7ab5 	vstr	s15, [r4, #724]	; 0x2d4
 801743a:	edc4 7ab7 	vstr	s15, [r4, #732]	; 0x2dc
 801743e:	edc4 7ab8 	vstr	s15, [r4, #736]	; 0x2e0
 8017442:	edc4 7ab9 	vstr	s15, [r4, #740]	; 0x2e4
 8017446:	edc4 7abb 	vstr	s15, [r4, #748]	; 0x2ec
 801744a:	edc4 7abc 	vstr	s15, [r4, #752]	; 0x2f0
 801744e:	edc4 7abd 	vstr	s15, [r4, #756]	; 0x2f4
 8017452:	edc4 7abf 	vstr	s15, [r4, #764]	; 0x2fc
 8017456:	edc4 7ac0 	vstr	s15, [r4, #768]	; 0x300
 801745a:	edc4 7ac1 	vstr	s15, [r4, #772]	; 0x304
 801745e:	edc4 7ac3 	vstr	s15, [r4, #780]	; 0x30c
 8017462:	edc4 7ac4 	vstr	s15, [r4, #784]	; 0x310
 8017466:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 801746a:	ed84 8ab6 	vstr	s16, [r4, #728]	; 0x2d8
 801746e:	ed84 8aba 	vstr	s16, [r4, #744]	; 0x2e8
 8017472:	ed84 8abe 	vstr	s16, [r4, #760]	; 0x2f8
 8017476:	ed84 8ac2 	vstr	s16, [r4, #776]	; 0x308
 801747a:	edc4 7ac5 	vstr	s15, [r4, #788]	; 0x314
 801747e:	ed84 3a3b 	vstr	s6, [r4, #236]	; 0xec
 8017482:	edc4 3a3c 	vstr	s7, [r4, #240]	; 0xf0
 8017486:	ed84 4a3d 	vstr	s8, [r4, #244]	; 0xf4
 801748a:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801748e:	edc4 4a3f 	vstr	s9, [r4, #252]	; 0xfc
 8017492:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8017496:	edc4 7ac7 	vstr	s15, [r4, #796]	; 0x31c
 801749a:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 801749e:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 80174a2:	edc4 7acb 	vstr	s15, [r4, #812]	; 0x32c
 80174a6:	edc4 7acc 	vstr	s15, [r4, #816]	; 0x330
 80174aa:	edc4 7acd 	vstr	s15, [r4, #820]	; 0x334
 80174ae:	edc4 7aa1 	vstr	s15, [r4, #644]	; 0x284
 80174b2:	edc4 7aa2 	vstr	s15, [r4, #648]	; 0x288
 80174b6:	edc4 7aa3 	vstr	s15, [r4, #652]	; 0x28c
 80174ba:	edc4 7aa5 	vstr	s15, [r4, #660]	; 0x294
 80174be:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
 80174c2:	edc4 7aa7 	vstr	s15, [r4, #668]	; 0x29c
 80174c6:	edc4 7aa9 	vstr	s15, [r4, #676]	; 0x2a4
 80174ca:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
 80174ce:	edc4 7aab 	vstr	s15, [r4, #684]	; 0x2ac
 80174d2:	edc4 7aac 	vstr	s15, [r4, #688]	; 0x2b0
 80174d6:	edc4 7aad 	vstr	s15, [r4, #692]	; 0x2b4
 80174da:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 80174de:	ed84 8ac6 	vstr	s16, [r4, #792]	; 0x318
 80174e2:	ed84 8aca 	vstr	s16, [r4, #808]	; 0x328
 80174e6:	ed84 8ace 	vstr	s16, [r4, #824]	; 0x338
 80174ea:	ed84 8aa0 	vstr	s16, [r4, #640]	; 0x280
 80174ee:	ed84 8aa4 	vstr	s16, [r4, #656]	; 0x290
 80174f2:	ed84 8aa8 	vstr	s16, [r4, #672]	; 0x2a0
 80174f6:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
 80174fa:	ed84 8a43 	vstr	s16, [r4, #268]	; 0x10c
 80174fe:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
 8017502:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 8017506:	ed84 5a45 	vstr	s10, [r4, #276]	; 0x114
 801750a:	edc4 5a46 	vstr	s11, [r4, #280]	; 0x118
 801750e:	ed84 6a47 	vstr	s12, [r4, #284]	; 0x11c
 8017512:	f8a4 c124 	strh.w	ip, [r4, #292]	; 0x124
 8017516:	ed81 8a21 	vstr	s16, [r1, #132]	; 0x84
 801751a:	ed81 8a25 	vstr	s16, [r1, #148]	; 0x94
 801751e:	ed81 8a29 	vstr	s16, [r1, #164]	; 0xa4
 8017522:	ed81 8a2d 	vstr	s16, [r1, #180]	; 0xb4
 8017526:	ed81 8a31 	vstr	s16, [r1, #196]	; 0xc4
 801752a:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 801752e:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 8017532:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 8017536:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
 801753a:	edc1 7a1e 	vstr	s15, [r1, #120]	; 0x78
 801753e:	edc1 7a1f 	vstr	s15, [r1, #124]	; 0x7c
 8017542:	edc1 7a20 	vstr	s15, [r1, #128]	; 0x80
 8017546:	edc1 7a22 	vstr	s15, [r1, #136]	; 0x88
 801754a:	edc1 7a23 	vstr	s15, [r1, #140]	; 0x8c
 801754e:	edc1 7a24 	vstr	s15, [r1, #144]	; 0x90
 8017552:	edc1 7a26 	vstr	s15, [r1, #152]	; 0x98
 8017556:	edc1 7a27 	vstr	s15, [r1, #156]	; 0x9c
 801755a:	edc1 7a28 	vstr	s15, [r1, #160]	; 0xa0
 801755e:	edc1 7a2a 	vstr	s15, [r1, #168]	; 0xa8
 8017562:	edc1 7a2b 	vstr	s15, [r1, #172]	; 0xac
 8017566:	edc1 7a2c 	vstr	s15, [r1, #176]	; 0xb0
 801756a:	edc1 7a2e 	vstr	s15, [r1, #184]	; 0xb8
 801756e:	edc1 7a2f 	vstr	s15, [r1, #188]	; 0xbc
 8017572:	edc1 7a30 	vstr	s15, [r1, #192]	; 0xc0
 8017576:	edc1 7a32 	vstr	s15, [r1, #200]	; 0xc8
 801757a:	edc1 7a33 	vstr	s15, [r1, #204]	; 0xcc
 801757e:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 8017582:	edc1 7a34 	vstr	s15, [r1, #208]	; 0xd0
 8017586:	e04d      	b.n	8017624 <MotionDI_Initialize+0x46c>
 8017588:	00000000 	.word	0x00000000
 801758c:	3fbfdfb7 	.word	0x3fbfdfb7
 8017590:	20000000 	.word	0x20000000
 8017594:	3fc55a40 	.word	0x3fc55a40
 8017598:	c0000000 	.word	0xc0000000
 801759c:	3fb2875e 	.word	0x3fb2875e
 80175a0:	60000000 	.word	0x60000000
 80175a4:	3f9f1fed 	.word	0x3f9f1fed
 80175a8:	60000000 	.word	0x60000000
 80175ac:	3fc76cab 	.word	0x3fc76cab
 80175b0:	e0042000 	.word	0xe0042000
 80175b4:	5c001000 	.word	0x5c001000
 80175b8:	58024c08 	.word	0x58024c08
 80175bc:	58024c00 	.word	0x58024c00
 80175c0:	f407a5c2 	.word	0xf407a5c2
 80175c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80175c8:	200013e8 	.word	0x200013e8
 80175cc:	200026b0 	.word	0x200026b0
 80175d0:	3e4ccccd 	.word	0x3e4ccccd
 80175d4:	3a83126f 	.word	0x3a83126f
 80175d8:	447a0000 	.word	0x447a0000
 80175dc:	20000000 	.word	0x20000000
 80175e0:	3dcccccd 	.word	0x3dcccccd
 80175e4:	3f2ac083 	.word	0x3f2ac083
 80175e8:	2000148c 	.word	0x2000148c
 80175ec:	00000000 	.word	0x00000000
 80175f0:	7f800000 	.word	0x7f800000
 80175f4:	ff800000 	.word	0xff800000
 80175f8:	3f639581 	.word	0x3f639581
 80175fc:	402ab021 	.word	0x402ab021
 8017600:	3f13f7cf 	.word	0x3f13f7cf
 8017604:	39b24207 	.word	0x39b24207
 8017608:	39712c28 	.word	0x39712c28
 801760c:	3a09a027 	.word	0x3a09a027
 8017610:	200010f8 	.word	0x200010f8
 8017614:	3a51b717 	.word	0x3a51b717
 8017618:	3a378034 	.word	0x3a378034
 801761c:	3b378034 	.word	0x3b378034
 8017620:	3f666666 	.word	0x3f666666
 8017624:	ed84 3a4a 	vstr	s6, [r4, #296]	; 0x128
 8017628:	edc4 3a4b 	vstr	s7, [r4, #300]	; 0x12c
 801762c:	ed84 4a4c 	vstr	s8, [r4, #304]	; 0x130
 8017630:	edc4 4a4e 	vstr	s9, [r4, #312]	; 0x138
 8017634:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 8017638:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 801763c:	ed81 8a35 	vstr	s16, [r1, #212]	; 0xd4
 8017640:	ed81 8a39 	vstr	s16, [r1, #228]	; 0xe4
 8017644:	ed81 8a3d 	vstr	s16, [r1, #244]	; 0xf4
 8017648:	ed81 8a0f 	vstr	s16, [r1, #60]	; 0x3c
 801764c:	ed81 8a13 	vstr	s16, [r1, #76]	; 0x4c
 8017650:	ed81 8a17 	vstr	s16, [r1, #92]	; 0x5c
 8017654:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
 8017658:	edc1 7a37 	vstr	s15, [r1, #220]	; 0xdc
 801765c:	edc1 7a38 	vstr	s15, [r1, #224]	; 0xe0
 8017660:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
 8017664:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
 8017668:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
 801766c:	edc1 7a10 	vstr	s15, [r1, #64]	; 0x40
 8017670:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
 8017674:	edc1 7a12 	vstr	s15, [r1, #72]	; 0x48
 8017678:	edc1 7a14 	vstr	s15, [r1, #80]	; 0x50
 801767c:	edc1 7a15 	vstr	s15, [r1, #84]	; 0x54
 8017680:	edc1 7a16 	vstr	s15, [r1, #88]	; 0x58
 8017684:	edc1 7a18 	vstr	s15, [r1, #96]	; 0x60
 8017688:	edc1 7a19 	vstr	s15, [r1, #100]	; 0x64
 801768c:	edc1 7a1a 	vstr	s15, [r1, #104]	; 0x68
 8017690:	edc1 7a1b 	vstr	s15, [r1, #108]	; 0x6c
 8017694:	edc1 7a1c 	vstr	s15, [r1, #112]	; 0x70
 8017698:	edc1 7a1d 	vstr	s15, [r1, #116]	; 0x74
 801769c:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 80176a0:	ed84 8a52 	vstr	s16, [r4, #328]	; 0x148
 80176a4:	f884 814c 	strb.w	r8, [r4, #332]	; 0x14c
 80176a8:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
 80176ac:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 80176b0:	ed84 5a54 	vstr	s10, [r4, #336]	; 0x150
 80176b4:	edc4 5a55 	vstr	s11, [r4, #340]	; 0x154
 80176b8:	ed84 6a56 	vstr	s12, [r4, #344]	; 0x158
 80176bc:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
 80176c0:	edc0 7a29 	vstr	s15, [r0, #164]	; 0xa4
 80176c4:	edc0 7a2a 	vstr	s15, [r0, #168]	; 0xa8
 80176c8:	f884 9144 	strb.w	r9, [r4, #324]	; 0x144
 80176cc:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 80176d0:	f7fa fc0e 	bl	8011ef0 <iNemo_setOrientation.constprop.0>
 80176d4:	f7fa fdde 	bl	8012294 <iNemo_setOrientation_6X.constprop.0>
 80176d8:	4631      	mov	r1, r6
 80176da:	ed5f 4a32 	vldr	s9, [pc, #-200]	; 8017614 <MotionDI_Initialize+0x45c>
 80176de:	f831 3f04 	ldrh.w	r3, [r1, #4]!
 80176e2:	ed1f 5a33 	vldr	s10, [pc, #-204]	; 8017618 <MotionDI_Initialize+0x460>
 80176e6:	ed5f 5a33 	vldr	s11, [pc, #-204]	; 801761c <MotionDI_Initialize+0x464>
 80176ea:	ed5f 7a33 	vldr	s15, [pc, #-204]	; 8017620 <MotionDI_Initialize+0x468>
 80176ee:	f891 e002 	ldrb.w	lr, [r1, #2]
 80176f2:	f8b6 c000 	ldrh.w	ip, [r6]
 80176f6:	78b0      	ldrb	r0, [r6, #2]
 80176f8:	494f      	ldr	r1, [pc, #316]	; (8017838 <MotionDI_Initialize+0x680>)
 80176fa:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
 80176fe:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8017702:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8017706:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 801770a:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 801770e:	edc4 4a54 	vstr	s9, [r4, #336]	; 0x150
 8017712:	edc4 4a45 	vstr	s9, [r4, #276]	; 0x114
 8017716:	ed84 5a55 	vstr	s10, [r4, #340]	; 0x154
 801771a:	ed84 5a46 	vstr	s10, [r4, #280]	; 0x118
 801771e:	edc4 5a56 	vstr	s11, [r4, #344]	; 0x158
 8017722:	edc4 5a47 	vstr	s11, [r4, #284]	; 0x11c
 8017726:	ed84 6a4b 	vstr	s12, [r4, #300]	; 0x12c
 801772a:	ed84 6a3c 	vstr	s12, [r4, #240]	; 0xf0
 801772e:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 8017732:	f884 9161 	strb.w	r9, [r4, #353]	; 0x161
 8017736:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801773a:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
 801773e:	f8c4 2101 	str.w	r2, [r4, #257]	; 0x101
 8017742:	ed84 7a62 	vstr	s14, [r4, #392]	; 0x188
 8017746:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
 801774a:	f8ad c02d 	strh.w	ip, [sp, #45]	; 0x2d
 801774e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8017752:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
 8017756:	edc4 7a3b 	vstr	s15, [r4, #236]	; 0xec
 801775a:	edc4 7a61 	vstr	s15, [r4, #388]	; 0x184
 801775e:	f8c4 113d 	str.w	r1, [r4, #317]	; 0x13d
 8017762:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 8017766:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 801776a:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801776e:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
 8017772:	f8a4 918c 	strh.w	r9, [r4, #396]	; 0x18c
 8017776:	f8dd 1031 	ldr.w	r1, [sp, #49]	; 0x31
 801777a:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 801777e:	ed94 7a02 	vldr	s14, [r4, #8]
 8017782:	edd4 7a03 	vldr	s15, [r4, #12]
 8017786:	f8db 0000 	ldr.w	r0, [fp]
 801778a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 801783c <MotionDI_Initialize+0x684>
 801778e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8017840 <MotionDI_Initialize+0x688>
 8017792:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8017796:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
 801779a:	f507 6bb6 	add.w	fp, r7, #1456	; 0x5b0
 801779e:	e9c4 2164 	strd	r2, r1, [r4, #400]	; 0x190
 80177a2:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80177a6:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
 80177aa:	edc4 7a5f 	vstr	s15, [r4, #380]	; 0x17c
 80177ae:	f8c4 e16c 	str.w	lr, [r4, #364]	; 0x16c
 80177b2:	f8c4 c170 	str.w	ip, [r4, #368]	; 0x170
 80177b6:	f8c4 9174 	str.w	r9, [r4, #372]	; 0x174
 80177ba:	f7fa ff3d 	bl	8012638 <MotionDI_setKnobs.part.0>
 80177be:	f207 59e4 	addw	r9, r7, #1508	; 0x5e4
 80177c2:	4629      	mov	r1, r5
 80177c4:	4658      	mov	r0, fp
 80177c6:	2234      	movs	r2, #52	; 0x34
 80177c8:	f003 fdc8 	bl	801b35c <memset>
 80177cc:	4629      	mov	r1, r5
 80177ce:	4648      	mov	r0, r9
 80177d0:	2234      	movs	r2, #52	; 0x34
 80177d2:	ed8b 8a03 	vstr	s16, [fp, #12]
 80177d6:	ed8b 8a07 	vstr	s16, [fp, #28]
 80177da:	ed8b 8a0b 	vstr	s16, [fp, #44]	; 0x2c
 80177de:	f884 5684 	strb.w	r5, [r4, #1668]	; 0x684
 80177e2:	f003 fdbb 	bl	801b35c <memset>
 80177e6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8017830 <MotionDI_Initialize+0x678>
 80177ea:	f241 13b4 	movw	r3, #4532	; 0x11b4
 80177ee:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 80177f2:	2000      	movs	r0, #0
 80177f4:	f207 672c 	addw	r7, r7, #1580	; 0x62c
 80177f8:	2100      	movs	r1, #0
 80177fa:	e9c2 0100 	strd	r0, r1, [r2]
 80177fe:	ed87 7b00 	vstr	d7, [r7]
 8017802:	52f5      	strh	r5, [r6, r3]
 8017804:	f806 500a 	strb.w	r5, [r6, sl]
 8017808:	ed89 8a03 	vstr	s16, [r9, #12]
 801780c:	ed89 8a07 	vstr	s16, [r9, #28]
 8017810:	ed89 8a0b 	vstr	s16, [r9, #44]	; 0x2c
 8017814:	f8c4 86cc 	str.w	r8, [r4, #1740]	; 0x6cc
 8017818:	f884 56b8 	strb.w	r5, [r4, #1720]	; 0x6b8
 801781c:	f884 56c8 	strb.w	r5, [r4, #1736]	; 0x6c8
 8017820:	b011      	add	sp, #68	; 0x44
 8017822:	ecbd 8b02 	vpop	{d8}
 8017826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801782a:	bf00      	nop
 801782c:	f3af 8000 	nop.w
 8017830:	00000000 	.word	0x00000000
 8017834:	fff80000 	.word	0xfff80000
 8017838:	01010001 	.word	0x01010001
 801783c:	3a2c7da2 	.word	0x3a2c7da2
 8017840:	3e051eb8 	.word	0x3e051eb8

08017844 <MotionDI_setKnobs>:
 8017844:	4b03      	ldr	r3, [pc, #12]	; (8017854 <MotionDI_setKnobs+0x10>)
 8017846:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 801784a:	b903      	cbnz	r3, 801784e <MotionDI_setKnobs+0xa>
 801784c:	4770      	bx	lr
 801784e:	f7fa bef3 	b.w	8012638 <MotionDI_setKnobs.part.0>
 8017852:	bf00      	nop
 8017854:	200013e8 	.word	0x200013e8

08017858 <MotionDI_getKnobs>:
 8017858:	4a22      	ldr	r2, [pc, #136]	; (80178e4 <MotionDI_getKnobs+0x8c>)
 801785a:	f892 3644 	ldrb.w	r3, [r2, #1604]	; 0x644
 801785e:	b903      	cbnz	r3, 8017862 <MotionDI_getKnobs+0xa>
 8017860:	4770      	bx	lr
 8017862:	b470      	push	{r4, r5, r6}
 8017864:	4920      	ldr	r1, [pc, #128]	; (80178e8 <MotionDI_getKnobs+0x90>)
 8017866:	f892 5126 	ldrb.w	r5, [r2, #294]	; 0x126
 801786a:	880b      	ldrh	r3, [r1, #0]
 801786c:	f892 6125 	ldrb.w	r6, [r2, #293]	; 0x125
 8017870:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
 8017874:	b091      	sub	sp, #68	; 0x44
 8017876:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
 801787a:	f8ad 302d 	strh.w	r3, [sp, #45]	; 0x2d
 801787e:	460b      	mov	r3, r1
 8017880:	7889      	ldrb	r1, [r1, #2]
 8017882:	f833 4f04 	ldrh.w	r4, [r3, #4]!
 8017886:	f8ad 4031 	strh.w	r4, [sp, #49]	; 0x31
 801788a:	789b      	ldrb	r3, [r3, #2]
 801788c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8017890:	2300      	movs	r3, #0
 8017892:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8017896:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 801789a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801789e:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
 80178a2:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
 80178a6:	f8d2 40ec 	ldr.w	r4, [r2, #236]	; 0xec
 80178aa:	f8dd 502d 	ldr.w	r5, [sp, #45]	; 0x2d
 80178ae:	6303      	str	r3, [r0, #48]	; 0x30
 80178b0:	4b0e      	ldr	r3, [pc, #56]	; (80178ec <MotionDI_getKnobs+0x94>)
 80178b2:	62c5      	str	r5, [r0, #44]	; 0x2c
 80178b4:	6204      	str	r4, [r0, #32]
 80178b6:	6241      	str	r1, [r0, #36]	; 0x24
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	6003      	str	r3, [r0, #0]
 80178bc:	f892 4168 	ldrb.w	r4, [r2, #360]	; 0x168
 80178c0:	68d3      	ldr	r3, [r2, #12]
 80178c2:	6855      	ldr	r5, [r2, #4]
 80178c4:	6891      	ldr	r1, [r2, #8]
 80178c6:	7104      	strb	r4, [r0, #4]
 80178c8:	6816      	ldr	r6, [r2, #0]
 80178ca:	6954      	ldr	r4, [r2, #20]
 80178cc:	6086      	str	r6, [r0, #8]
 80178ce:	60c5      	str	r5, [r0, #12]
 80178d0:	6104      	str	r4, [r0, #16]
 80178d2:	6141      	str	r1, [r0, #20]
 80178d4:	6183      	str	r3, [r0, #24]
 80178d6:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
 80178da:	7703      	strb	r3, [r0, #28]
 80178dc:	b011      	add	sp, #68	; 0x44
 80178de:	bc70      	pop	{r4, r5, r6}
 80178e0:	4770      	bx	lr
 80178e2:	bf00      	nop
 80178e4:	200013e8 	.word	0x200013e8
 80178e8:	20000000 	.word	0x20000000
 80178ec:	20002b18 	.word	0x20002b18

080178f0 <MotionDI_AccCal_getParams>:
 80178f0:	b4f0      	push	{r4, r5, r6, r7}
 80178f2:	4e0d      	ldr	r6, [pc, #52]	; (8017928 <MotionDI_AccCal_getParams+0x38>)
 80178f4:	f896 2644 	ldrb.w	r2, [r6, #1604]	; 0x644
 80178f8:	b90a      	cbnz	r2, 80178fe <MotionDI_AccCal_getParams+0xe>
 80178fa:	bcf0      	pop	{r4, r5, r6, r7}
 80178fc:	4770      	bx	lr
 80178fe:	f206 6754 	addw	r7, r6, #1620	; 0x654
 8017902:	4604      	mov	r4, r0
 8017904:	f206 6684 	addw	r6, r6, #1668	; 0x684
 8017908:	463d      	mov	r5, r7
 801790a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801790c:	42b5      	cmp	r5, r6
 801790e:	6020      	str	r0, [r4, #0]
 8017910:	6061      	str	r1, [r4, #4]
 8017912:	60a2      	str	r2, [r4, #8]
 8017914:	60e3      	str	r3, [r4, #12]
 8017916:	462f      	mov	r7, r5
 8017918:	f104 0410 	add.w	r4, r4, #16
 801791c:	d1f4      	bne.n	8017908 <MotionDI_AccCal_getParams+0x18>
 801791e:	6828      	ldr	r0, [r5, #0]
 8017920:	6020      	str	r0, [r4, #0]
 8017922:	bcf0      	pop	{r4, r5, r6, r7}
 8017924:	4770      	bx	lr
 8017926:	bf00      	nop
 8017928:	200013e8 	.word	0x200013e8

0801792c <MotionDI_AccCal_reset>:
 801792c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017930:	4e34      	ldr	r6, [pc, #208]	; (8017a04 <MotionDI_AccCal_reset+0xd8>)
 8017932:	f896 3644 	ldrb.w	r3, [r6, #1604]	; 0x644
 8017936:	ed2d 8b02 	vpush	{d8}
 801793a:	b91b      	cbnz	r3, 8017944 <MotionDI_AccCal_reset+0x18>
 801793c:	ecbd 8b02 	vpop	{d8}
 8017940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017944:	f206 6354 	addw	r3, r6, #1620	; 0x654
 8017948:	4618      	mov	r0, r3
 801794a:	2234      	movs	r2, #52	; 0x34
 801794c:	2100      	movs	r1, #0
 801794e:	f003 fd05 	bl	801b35c <memset>
 8017952:	4c2d      	ldr	r4, [pc, #180]	; (8017a08 <MotionDI_AccCal_reset+0xdc>)
 8017954:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8017a10 <MotionDI_AccCal_reset+0xe4>
 8017958:	f8d4 b464 	ldr.w	fp, [r4, #1124]	; 0x464
 801795c:	4a2b      	ldr	r2, [pc, #172]	; (8017a0c <MotionDI_AccCal_reset+0xe0>)
 801795e:	f894 a46c 	ldrb.w	sl, [r4, #1132]	; 0x46c
 8017962:	f504 698c 	add.w	r9, r4, #1120	; 0x460
 8017966:	f504 688d 	add.w	r8, r4, #1128	; 0x468
 801796a:	2500      	movs	r5, #0
 801796c:	4603      	mov	r3, r0
 801796e:	f44f 17f0 	mov.w	r7, #1966080	; 0x1e0000
 8017972:	2014      	movs	r0, #20
 8017974:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017978:	edd9 8a00 	vldr	s17, [r9]
 801797c:	ed98 8a00 	vldr	s16, [r8]
 8017980:	f8c4 0464 	str.w	r0, [r4, #1124]	; 0x464
 8017984:	f44f 0edc 	mov.w	lr, #7208960	; 0x6e0000
 8017988:	6527      	str	r7, [r4, #80]	; 0x50
 801798a:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
 801798e:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8017992:	f8c8 2000 	str.w	r2, [r8]
 8017996:	1820      	adds	r0, r4, r0
 8017998:	2230      	movs	r2, #48	; 0x30
 801799a:	4629      	mov	r1, r5
 801799c:	f8c9 c000 	str.w	ip, [r9]
 80179a0:	60df      	str	r7, [r3, #12]
 80179a2:	61df      	str	r7, [r3, #28]
 80179a4:	62df      	str	r7, [r3, #44]	; 0x2c
 80179a6:	7025      	strb	r5, [r4, #0]
 80179a8:	f8c4 e1c8 	str.w	lr, [r4, #456]	; 0x1c8
 80179ac:	f886 5684 	strb.w	r5, [r6, #1668]	; 0x684
 80179b0:	f884 546c 	strb.w	r5, [r4, #1132]	; 0x46c
 80179b4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80179b8:	6565      	str	r5, [r4, #84]	; 0x54
 80179ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80179bc:	f003 fcce 	bl	801b35c <memset>
 80179c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80179c4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80179c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80179cc:	6125      	str	r5, [r4, #16]
 80179ce:	6267      	str	r7, [r4, #36]	; 0x24
 80179d0:	6367      	str	r7, [r4, #52]	; 0x34
 80179d2:	6467      	str	r7, [r4, #68]	; 0x44
 80179d4:	f886 564c 	strb.w	r5, [r6, #1612]	; 0x64c
 80179d8:	82a2      	strh	r2, [r4, #20]
 80179da:	d2af      	bcs.n	801793c <MotionDI_AccCal_reset+0x10>
 80179dc:	edc9 8a00 	vstr	s17, [r9]
 80179e0:	ed88 8a00 	vstr	s16, [r8]
 80179e4:	ecbd 8b02 	vpop	{d8}
 80179e8:	f1ab 030a 	sub.w	r3, fp, #10
 80179ec:	b29b      	uxth	r3, r3
 80179ee:	2b5a      	cmp	r3, #90	; 0x5a
 80179f0:	bf8c      	ite	hi
 80179f2:	2300      	movhi	r3, #0
 80179f4:	2301      	movls	r3, #1
 80179f6:	f8c4 b464 	str.w	fp, [r4, #1124]	; 0x464
 80179fa:	7023      	strb	r3, [r4, #0]
 80179fc:	f884 a46c 	strb.w	sl, [r4, #1132]	; 0x46c
 8017a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a04:	200013e8 	.word	0x200013e8
 8017a08:	200026b0 	.word	0x200026b0
 8017a0c:	3e4ccccd 	.word	0x3e4ccccd
 8017a10:	3a83126f 	.word	0x3a83126f

08017a14 <MotionDI_GyrCal_getParams>:
 8017a14:	b538      	push	{r3, r4, r5, lr}
 8017a16:	4d10      	ldr	r5, [pc, #64]	; (8017a58 <MotionDI_GyrCal_getParams+0x44>)
 8017a18:	f895 3644 	ldrb.w	r3, [r5, #1604]	; 0x644
 8017a1c:	b903      	cbnz	r3, 8017a20 <MotionDI_GyrCal_getParams+0xc>
 8017a1e:	bd38      	pop	{r3, r4, r5, pc}
 8017a20:	4604      	mov	r4, r0
 8017a22:	2224      	movs	r2, #36	; 0x24
 8017a24:	2100      	movs	r1, #0
 8017a26:	3010      	adds	r0, #16
 8017a28:	f003 fc98 	bl	801b35c <memset>
 8017a2c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8017a30:	6063      	str	r3, [r4, #4]
 8017a32:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 8017a36:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8017a3a:	60a0      	str	r0, [r4, #8]
 8017a3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017a40:	2200      	movs	r2, #0
 8017a42:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8017a46:	6021      	str	r1, [r4, #0]
 8017a48:	60e3      	str	r3, [r4, #12]
 8017a4a:	61e3      	str	r3, [r4, #28]
 8017a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017a4e:	f895 36b8 	ldrb.w	r3, [r5, #1720]	; 0x6b8
 8017a52:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8017a56:	bd38      	pop	{r3, r4, r5, pc}
 8017a58:	200013e8 	.word	0x200013e8

08017a5c <MotionDI_GyrCal_reset>:
 8017a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a60:	4c17      	ldr	r4, [pc, #92]	; (8017ac0 <MotionDI_GyrCal_reset+0x64>)
 8017a62:	f894 3644 	ldrb.w	r3, [r4, #1604]	; 0x644
 8017a66:	b343      	cbz	r3, 8017aba <MotionDI_GyrCal_reset+0x5e>
 8017a68:	f504 63d1 	add.w	r3, r4, #1672	; 0x688
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	2234      	movs	r2, #52	; 0x34
 8017a70:	2100      	movs	r1, #0
 8017a72:	f003 fc73 	bl	801b35c <memset>
 8017a76:	f504 62c9 	add.w	r2, r4, #1608	; 0x648
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	f8d4 a000 	ldr.w	sl, [r4]
 8017a80:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8017a84:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8017a88:	68e6      	ldr	r6, [r4, #12]
 8017a8a:	ed92 0a00 	vldr	s0, [r2]
 8017a8e:	6965      	ldr	r5, [r4, #20]
 8017a90:	6927      	ldr	r7, [r4, #16]
 8017a92:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 8017a96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017a9a:	60c2      	str	r2, [r0, #12]
 8017a9c:	61c2      	str	r2, [r0, #28]
 8017a9e:	62c2      	str	r2, [r0, #44]	; 0x2c
 8017aa0:	f884 36c8 	strb.w	r3, [r4, #1736]	; 0x6c8
 8017aa4:	f7f8 fe06 	bl	80106b4 <iNemoEngine_gbias_init>
 8017aa8:	f8c4 a000 	str.w	sl, [r4]
 8017aac:	f8c4 9004 	str.w	r9, [r4, #4]
 8017ab0:	f8c4 8008 	str.w	r8, [r4, #8]
 8017ab4:	6127      	str	r7, [r4, #16]
 8017ab6:	60e6      	str	r6, [r4, #12]
 8017ab8:	6165      	str	r5, [r4, #20]
 8017aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017abe:	bf00      	nop
 8017ac0:	200013e8 	.word	0x200013e8
 8017ac4:	00000000 	.word	0x00000000

08017ac8 <MotionDI_update>:
 8017ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017acc:	ed2d 8b10 	vpush	{d8-d15}
 8017ad0:	4cd2      	ldr	r4, [pc, #840]	; (8017e1c <MotionDI_update+0x354>)
 8017ad2:	f894 3644 	ldrb.w	r3, [r4, #1604]	; 0x644
 8017ad6:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	f000 8197 	beq.w	8017e0e <MotionDI_update+0x346>
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	4681      	mov	r9, r0
 8017ae4:	460d      	mov	r5, r1
 8017ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017aea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017aee:	f7e9 f9d1 	bl	8000e94 <__aeabi_ldivmod>
 8017af2:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 8017af6:	9017      	str	r0, [sp, #92]	; 0x5c
 8017af8:	2b01      	cmp	r3, #1
 8017afa:	f000 81a7 	beq.w	8017e4c <MotionDI_update+0x384>
 8017afe:	2b02      	cmp	r3, #2
 8017b00:	f000 81a9 	beq.w	8017e56 <MotionDI_update+0x38e>
 8017b04:	ab58      	add	r3, sp, #352	; 0x160
 8017b06:	9318      	str	r3, [sp, #96]	; 0x60
 8017b08:	ab65      	add	r3, sp, #404	; 0x194
 8017b0a:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 8017b0e:	931c      	str	r3, [sp, #112]	; 0x70
 8017b10:	f204 6754 	addw	r7, r4, #1620	; 0x654
 8017b14:	f894 8180 	ldrb.w	r8, [r4, #384]	; 0x180
 8017b18:	f1b8 0f01 	cmp.w	r8, #1
 8017b1c:	f000 85de 	beq.w	80186dc <MotionDI_update+0xc14>
 8017b20:	f1b8 0f02 	cmp.w	r8, #2
 8017b24:	f000 85df 	beq.w	80186e6 <MotionDI_update+0xc1e>
 8017b28:	4ebd      	ldr	r6, [pc, #756]	; (8017e20 <MotionDI_update+0x358>)
 8017b2a:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8017e40 <MotionDI_update+0x378>
 8017b2e:	edd7 0a00 	vldr	s1, [r7]
 8017b32:	ed97 1a01 	vldr	s2, [r7, #4]
 8017b36:	edd7 1a02 	vldr	s3, [r7, #8]
 8017b3a:	ed97 2a03 	vldr	s4, [r7, #12]
 8017b3e:	edd7 2a07 	vldr	s5, [r7, #28]
 8017b42:	ed97 3a0b 	vldr	s6, [r7, #44]	; 0x2c
 8017b46:	f8d8 3000 	ldr.w	r3, [r8]
 8017b4a:	682f      	ldr	r7, [r5, #0]
 8017b4c:	edd5 6a02 	vldr	s13, [r5, #8]
 8017b50:	ed95 7a03 	vldr	s14, [r5, #12]
 8017b54:	edd5 7a04 	vldr	s15, [r5, #16]
 8017b58:	ed95 5a05 	vldr	s10, [r5, #20]
 8017b5c:	edd5 5a06 	vldr	s11, [r5, #24]
 8017b60:	ed95 6a07 	vldr	s12, [r5, #28]
 8017b64:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8017b68:	686d      	ldr	r5, [r5, #4]
 8017b6a:	edd6 3a00 	vldr	s7, [r6]
 8017b6e:	ed96 4a01 	vldr	s8, [r6, #4]
 8017b72:	edd6 4a02 	vldr	s9, [r6, #8]
 8017b76:	1afb      	subs	r3, r7, r3
 8017b78:	931a      	str	r3, [sp, #104]	; 0x68
 8017b7a:	eb65 0302 	sbc.w	r3, r5, r2
 8017b7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8017b80:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8017b84:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8017b88:	ee37 7a41 	vsub.f32	s14, s14, s2
 8017b8c:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8017b90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017b92:	ee66 6a82 	vmul.f32	s13, s13, s4
 8017b96:	ee27 7a22 	vmul.f32	s14, s14, s5
 8017b9a:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017b9e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8017ba2:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8017ba6:	ee36 6a64 	vsub.f32	s12, s12, s9
 8017baa:	2800      	cmp	r0, #0
 8017bac:	edc3 6a03 	vstr	s13, [r3, #12]
 8017bb0:	ed83 7a04 	vstr	s14, [r3, #16]
 8017bb4:	edc3 7a05 	vstr	s15, [r3, #20]
 8017bb8:	ed83 5a06 	vstr	s10, [r3, #24]
 8017bbc:	edc3 5a07 	vstr	s11, [r3, #28]
 8017bc0:	ed83 6a08 	vstr	s12, [r3, #32]
 8017bc4:	f171 0300 	sbcs.w	r3, r1, #0
 8017bc8:	f2c0 86c1 	blt.w	801894e <MotionDI_update+0xe86>
 8017bcc:	f7e9 f924 	bl	8000e18 <__aeabi_l2f>
 8017bd0:	eddf 7a94 	vldr	s15, [pc, #592]	; 8017e24 <MotionDI_update+0x35c>
 8017bd4:	ee07 0a10 	vmov	s14, r0
 8017bd8:	ee27 9a27 	vmul.f32	s18, s14, s15
 8017bdc:	ab5b      	add	r3, sp, #364	; 0x16c
 8017bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017be2:	4e91      	ldr	r6, [pc, #580]	; (8017e28 <MotionDI_update+0x360>)
 8017be4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017be6:	f8c8 7000 	str.w	r7, [r8]
 8017bea:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8017bee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017bf2:	f1a6 070c 	sub.w	r7, r6, #12
 8017bf6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017bfa:	aa5e      	add	r2, sp, #376	; 0x178
 8017bfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8017bfe:	3718      	adds	r7, #24
 8017c00:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017c04:	aa5b      	add	r2, sp, #364	; 0x16c
 8017c06:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c08:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8017c0c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017c10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017c14:	f506 73fa 	add.w	r3, r6, #500	; 0x1f4
 8017c18:	f8c8 5004 	str.w	r5, [r8, #4]
 8017c1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017c20:	ab5e      	add	r3, sp, #376	; 0x178
 8017c22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017c26:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
 8017c2a:	f506 7503 	add.w	r5, r6, #524	; 0x20c
 8017c2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8017c32:	b183      	cbz	r3, 8017c56 <MotionDI_update+0x18e>
 8017c34:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8017c38:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8017c3c:	431a      	orrs	r2, r3
 8017c3e:	07d5      	lsls	r5, r2, #31
 8017c40:	f141 80ea 	bpl.w	8018e18 <MotionDI_update+0x1350>
 8017c44:	4979      	ldr	r1, [pc, #484]	; (8017e2c <MotionDI_update+0x364>)
 8017c46:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
 8017c4a:	2a00      	cmp	r2, #0
 8017c4c:	f341 8231 	ble.w	80190b2 <MotionDI_update+0x15ea>
 8017c50:	3a01      	subs	r2, #1
 8017c52:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
 8017c56:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 8017c5a:	931d      	str	r3, [sp, #116]	; 0x74
 8017c5c:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 8017c60:	931e      	str	r3, [sp, #120]	; 0x78
 8017c62:	b133      	cbz	r3, 8017c72 <MotionDI_update+0x1aa>
 8017c64:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8017c68:	f003 0301 	and.w	r3, r3, #1
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	f041 80f3 	bne.w	8018e58 <MotionDI_update+0x1390>
 8017c72:	ab84      	add	r3, sp, #528	; 0x210
 8017c74:	931a      	str	r3, [sp, #104]	; 0x68
 8017c76:	ab90      	add	r3, sp, #576	; 0x240
 8017c78:	9317      	str	r3, [sp, #92]	; 0x5c
 8017c7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c7c:	b123      	cbz	r3, 8017c88 <MotionDI_update+0x1c0>
 8017c7e:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8017c82:	07d8      	lsls	r0, r3, #31
 8017c84:	f101 836e 	bmi.w	8019364 <MotionDI_update+0x189c>
 8017c88:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8017e44 <MotionDI_update+0x37c>
 8017c8c:	4f68      	ldr	r7, [pc, #416]	; (8017e30 <MotionDI_update+0x368>)
 8017c8e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017c92:	f5a7 7800 	sub.w	r8, r7, #512	; 0x200
 8017c96:	ad93      	add	r5, sp, #588	; 0x24c
 8017c98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8017c9c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8017ca0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8017ca2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017ca6:	f508 73fa 	add.w	r3, r8, #500	; 0x1f4
 8017caa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017cae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017cb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017cb4:	f508 721f 	add.w	r2, r8, #636	; 0x27c
 8017cb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8017cba:	ad97      	add	r5, sp, #604	; 0x25c
 8017cbc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8017cc0:	f508 7222 	add.w	r2, r8, #648	; 0x288
 8017cc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8017cc6:	f1a8 030c 	sub.w	r3, r8, #12
 8017cca:	ad9a      	add	r5, sp, #616	; 0x268
 8017ccc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8017cd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017cd4:	f108 077c 	add.w	r7, r8, #124	; 0x7c
 8017cd8:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8017cdc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017ce0:	af88      	add	r7, sp, #544	; 0x220
 8017ce2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017ce6:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8017cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8017cec:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8017cee:	f50d 7e0b 	add.w	lr, sp, #556	; 0x22c
 8017cf2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8017cf6:	4661      	mov	r1, ip
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	462a      	mov	r2, r5
 8017cfc:	f7f9 fd64 	bl	80117c8 <quatErr2EulerErr>
 8017d00:	f508 70fa 	add.w	r0, r8, #500	; 0x1f4
 8017d04:	682b      	ldr	r3, [r5, #0]
 8017d06:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
 8017d0a:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8017d0e:	462a      	mov	r2, r5
 8017d10:	f7f9 fd5a 	bl	80117c8 <quatErr2EulerErr>
 8017d14:	682a      	ldr	r2, [r5, #0]
 8017d16:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 8017d1a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8017d1c:	f8cb 2074 	str.w	r2, [fp, #116]	; 0x74
 8017d20:	a893      	add	r0, sp, #588	; 0x24c
 8017d22:	aa97      	add	r2, sp, #604	; 0x25c
 8017d24:	f7fa fdf4 	bl	8012910 <iNemo_quat2heading>
 8017d28:	463a      	mov	r2, r7
 8017d2a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017d2c:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8017d30:	ed8b 0a1c 	vstr	s0, [fp, #112]	; 0x70
 8017d34:	4659      	mov	r1, fp
 8017d36:	f7fa fdeb 	bl	8012910 <iNemo_quat2heading>
 8017d3a:	ab5b      	add	r3, sp, #364	; 0x16c
 8017d3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017d40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017d42:	ed8b 0a0d 	vstr	s0, [fp, #52]	; 0x34
 8017d46:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8017d4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017d4e:	f5a8 7782 	sub.w	r7, r8, #260	; 0x104
 8017d52:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017d56:	aa5e      	add	r2, sp, #376	; 0x178
 8017d58:	ca07      	ldmia	r2, {r0, r1, r2}
 8017d5a:	3718      	adds	r7, #24
 8017d5c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017d60:	aa5b      	add	r2, sp, #364	; 0x16c
 8017d62:	ca07      	ldmia	r2, {r0, r1, r2}
 8017d64:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8017d68:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017d6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017d70:	f1a7 030c 	sub.w	r3, r7, #12
 8017d74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017d78:	ab5e      	add	r3, sp, #376	; 0x178
 8017d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017d7e:	f107 030c 	add.w	r3, r7, #12
 8017d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017d86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	f040 872b 	bne.w	8018be4 <MotionDI_update+0x111c>
 8017d8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	f040 85e0 	bne.w	8018956 <MotionDI_update+0xe8e>
 8017d96:	4b26      	ldr	r3, [pc, #152]	; (8017e30 <MotionDI_update+0x368>)
 8017d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017d9a:	ac93      	add	r4, sp, #588	; 0x24c
 8017d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017da0:	4b24      	ldr	r3, [pc, #144]	; (8017e34 <MotionDI_update+0x36c>)
 8017da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017da6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017da8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017dac:	4a22      	ldr	r2, [pc, #136]	; (8017e38 <MotionDI_update+0x370>)
 8017dae:	ca07      	ldmia	r2, {r0, r1, r2}
 8017db0:	ac97      	add	r4, sp, #604	; 0x25c
 8017db2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017db6:	4a21      	ldr	r2, [pc, #132]	; (8017e3c <MotionDI_update+0x374>)
 8017db8:	ca07      	ldmia	r2, {r0, r1, r2}
 8017dba:	ac9a      	add	r4, sp, #616	; 0x268
 8017dbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017dc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017dc2:	ab97      	add	r3, sp, #604	; 0x25c
 8017dc4:	f8c9 0000 	str.w	r0, [r9]
 8017dc8:	f8c9 1004 	str.w	r1, [r9, #4]
 8017dcc:	f8c9 2008 	str.w	r2, [r9, #8]
 8017dd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017dd2:	4623      	mov	r3, r4
 8017dd4:	f8c9 001c 	str.w	r0, [r9, #28]
 8017dd8:	f8c9 1020 	str.w	r1, [r9, #32]
 8017ddc:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
 8017de0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017de2:	f8db 6048 	ldr.w	r6, [fp, #72]	; 0x48
 8017de6:	f8db 504c 	ldr.w	r5, [fp, #76]	; 0x4c
 8017dea:	f8db 4050 	ldr.w	r4, [fp, #80]	; 0x50
 8017dee:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 8017df2:	f8c9 600c 	str.w	r6, [r9, #12]
 8017df6:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 8017dfa:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
 8017dfe:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 8017e02:	f8c9 5010 	str.w	r5, [r9, #16]
 8017e06:	f8c9 4014 	str.w	r4, [r9, #20]
 8017e0a:	f8c9 3018 	str.w	r3, [r9, #24]
 8017e0e:	f20d 4da4 	addw	sp, sp, #1188	; 0x4a4
 8017e12:	ecbd 8b10 	vpop	{d8-d15}
 8017e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e1a:	bf00      	nop
 8017e1c:	200013e8 	.word	0x200013e8
 8017e20:	20001a70 	.word	0x20001a70
 8017e24:	358637bd 	.word	0x358637bd
 8017e28:	20001644 	.word	0x20001644
 8017e2c:	200010f8 	.word	0x200010f8
 8017e30:	2000193c 	.word	0x2000193c
 8017e34:	20001930 	.word	0x20001930
 8017e38:	200019b8 	.word	0x200019b8
 8017e3c:	200019c4 	.word	0x200019c4
 8017e40:	20001aa8 	.word	0x20001aa8
 8017e44:	20001820 	.word	0x20001820
 8017e48:	447a0000 	.word	0x447a0000
 8017e4c:	f894 3684 	ldrb.w	r3, [r4, #1668]	; 0x684
 8017e50:	2b03      	cmp	r3, #3
 8017e52:	f43f ae57 	beq.w	8017b04 <MotionDI_update+0x3c>
 8017e56:	ed95 7a02 	vldr	s14, [r5, #8]
 8017e5a:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8017e48 <MotionDI_update+0x380>
 8017e5e:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
 8017e62:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e6a:	bfb4      	ite	lt
 8017e6c:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8017e70:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8017e74:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017e78:	af36      	add	r7, sp, #216	; 0xd8
 8017e7a:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8017e48 <MotionDI_update+0x380>
 8017e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e82:	ee17 3a90 	vmov	r3, s15
 8017e86:	edd5 7a03 	vldr	s15, [r5, #12]
 8017e8a:	603b      	str	r3, [r7, #0]
 8017e8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e94:	bfb4      	ite	lt
 8017e96:	eebe 7a00 	vmovlt.f32	s14, #224	; 0xbf000000 -0.5
 8017e9a:	eeb6 7a00 	vmovge.f32	s14, #96	; 0x3f000000  0.5
 8017e9e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8017ea2:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 8017e48 <MotionDI_update+0x380>
 8017ea6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017eaa:	ed95 7a04 	vldr	s14, [r5, #16]
 8017eae:	edc7 7a01 	vstr	s15, [r7, #4]
 8017eb2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eba:	ee17 1a90 	vmov	r1, s15
 8017ebe:	bfac      	ite	ge
 8017ec0:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8017ec4:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8017ec8:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017ecc:	2809      	cmp	r0, #9
 8017ece:	bf9c      	itt	ls
 8017ed0:	3001      	addls	r0, #1
 8017ed2:	f884 064c 	strbls.w	r0, [r4, #1612]	; 0x64c
 8017ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017eda:	48de      	ldr	r0, [pc, #888]	; (8018254 <MotionDI_update+0x78c>)
 8017edc:	edc7 7a02 	vstr	s15, [r7, #8]
 8017ee0:	ee17 2a90 	vmov	r2, s15
 8017ee4:	f647 77fe 	movw	r7, #32766	; 0x7ffe
 8017ee8:	42bb      	cmp	r3, r7
 8017eea:	bfa8      	it	ge
 8017eec:	463b      	movge	r3, r7
 8017eee:	42ba      	cmp	r2, r7
 8017ef0:	bfa8      	it	ge
 8017ef2:	463a      	movge	r2, r7
 8017ef4:	4283      	cmp	r3, r0
 8017ef6:	bfb8      	it	lt
 8017ef8:	4603      	movlt	r3, r0
 8017efa:	4281      	cmp	r1, r0
 8017efc:	f2c0 8794 	blt.w	8018e28 <MotionDI_update+0x1360>
 8017f00:	428f      	cmp	r7, r1
 8017f02:	bfa8      	it	ge
 8017f04:	460f      	movge	r7, r1
 8017f06:	fa0f fe87 	sxth.w	lr, r7
 8017f0a:	4ed3      	ldr	r6, [pc, #844]	; (8018258 <MotionDI_update+0x790>)
 8017f0c:	48d1      	ldr	r0, [pc, #836]	; (8018254 <MotionDI_update+0x78c>)
 8017f0e:	f8b6 11c8 	ldrh.w	r1, [r6, #456]	; 0x1c8
 8017f12:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8017f14:	f8c6 71c4 	str.w	r7, [r6, #452]	; 0x1c4
 8017f18:	4282      	cmp	r2, r0
 8017f1a:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8017f1e:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 8017f22:	bfb8      	it	lt
 8017f24:	4602      	movlt	r2, r0
 8017f26:	3101      	adds	r1, #1
 8017f28:	f8b6 01ca 	ldrh.w	r0, [r6, #458]	; 0x1ca
 8017f2c:	f8ac e1ce 	strh.w	lr, [ip, #462]	; 0x1ce
 8017f30:	b289      	uxth	r1, r1
 8017f32:	b21b      	sxth	r3, r3
 8017f34:	4281      	cmp	r1, r0
 8017f36:	f8ac 31cc 	strh.w	r3, [ip, #460]	; 0x1cc
 8017f3a:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8017f3e:	7833      	ldrb	r3, [r6, #0]
 8017f40:	f8a6 11c8 	strh.w	r1, [r6, #456]	; 0x1c8
 8017f44:	b212      	sxth	r2, r2
 8017f46:	bf88      	it	hi
 8017f48:	2100      	movhi	r1, #0
 8017f4a:	f8ac 21d0 	strh.w	r2, [ip, #464]	; 0x1d0
 8017f4e:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
 8017f52:	9739      	str	r7, [sp, #228]	; 0xe4
 8017f54:	f8ad e0ea 	strh.w	lr, [sp, #234]	; 0xea
 8017f58:	9720      	str	r7, [sp, #128]	; 0x80
 8017f5a:	bf88      	it	hi
 8017f5c:	f8a6 11c8 	strhhi.w	r1, [r6, #456]	; 0x1c8
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	f001 81bb 	beq.w	80192dc <MotionDI_update+0x1814>
 8017f66:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8017f6a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8017f6e:	4313      	orrs	r3, r2
 8017f70:	f001 8343 	beq.w	80195fa <MotionDI_update+0x1b32>
 8017f74:	e9dd 7317 	ldrd	r7, r3, [sp, #92]	; 0x5c
 8017f78:	ebb7 0a03 	subs.w	sl, r7, r3
 8017f7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017f7e:	f04f 0200 	mov.w	r2, #0
 8017f82:	eb62 0b03 	sbc.w	fp, r2, r3
 8017f86:	f1bb 0f00 	cmp.w	fp, #0
 8017f8a:	bf08      	it	eq
 8017f8c:	f5ba 7f7a 	cmpeq.w	sl, #1000	; 0x3e8
 8017f90:	f0c1 81a1 	bcc.w	80192d6 <MotionDI_update+0x180e>
 8017f94:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8017f98:	fb03 f301 	mul.w	r3, r3, r1
 8017f9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8017fa0:	bf34      	ite	cc
 8017fa2:	2300      	movcc	r3, #0
 8017fa4:	2301      	movcs	r3, #1
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	f001 8195 	beq.w	80192d6 <MotionDI_update+0x180e>
 8017fac:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 8017fb0:	49aa      	ldr	r1, [pc, #680]	; (801825c <MotionDI_update+0x794>)
 8017fb2:	4658      	mov	r0, fp
 8017fb4:	f44f 7227 	mov.w	r2, #668	; 0x29c
 8017fb8:	f003 f9c2 	bl	801b340 <memcpy>
 8017fbc:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8017fc0:	9322      	str	r3, [sp, #136]	; 0x88
 8017fc2:	2b02      	cmp	r3, #2
 8017fc4:	f241 8613 	bls.w	8019bee <MotionDI_update+0x2126>
 8017fc8:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 8017fcc:	9221      	str	r2, [sp, #132]	; 0x84
 8017fce:	2a00      	cmp	r2, #0
 8017fd0:	f001 845a 	beq.w	8019888 <MotionDI_update+0x1dc0>
 8017fd4:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8017fd8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8017fdc:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8018260 <MotionDI_update+0x798>
 8017fe0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8017fe8:	f003 fefa 	bl	801bde0 <roundf>
 8017fec:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8017fee:	9325      	str	r3, [sp, #148]	; 0x94
 8017ff0:	eefc 8ac0 	vcvt.u32.f32	s17, s0
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	f002 8127 	beq.w	801a248 <MotionDI_update+0x2780>
 8017ffa:	ee18 1a90 	vmov	r1, s17
 8017ffe:	4a99      	ldr	r2, [pc, #612]	; (8018264 <MotionDI_update+0x79c>)
 8018000:	1acb      	subs	r3, r1, r3
 8018002:	4293      	cmp	r3, r2
 8018004:	f242 8247 	bls.w	801a496 <MotionDI_update+0x29ce>
 8018008:	2300      	movs	r3, #0
 801800a:	7533      	strb	r3, [r6, #20]
 801800c:	4a96      	ldr	r2, [pc, #600]	; (8018268 <MotionDI_update+0x7a0>)
 801800e:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8018012:	edd2 7a00 	vldr	s15, [r2]
 8018016:	9318      	str	r3, [sp, #96]	; 0x60
 8018018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801801c:	2b01      	cmp	r3, #1
 801801e:	ee87 ca27 	vdiv.f32	s24, s14, s15
 8018022:	f002 81d0 	beq.w	801a3c6 <MotionDI_update+0x28fe>
 8018026:	ee6c ba0c 	vmul.f32	s23, s24, s24
 801802a:	ed9f 2a90 	vldr	s4, [pc, #576]	; 801826c <MotionDI_update+0x7a4>
 801802e:	ee2b 2a82 	vmul.f32	s4, s23, s4
 8018032:	f9bb 700a 	ldrsh.w	r7, [fp, #10]
 8018036:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018038:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 801803c:	f9bb 800c 	ldrsh.w	r8, [fp, #12]
 8018040:	eddf ca8b 	vldr	s25, [pc, #556]	; 8018270 <MotionDI_update+0x7a8>
 8018044:	eddf 3a8b 	vldr	s7, [pc, #556]	; 8018274 <MotionDI_update+0x7ac>
 8018048:	eddf 1a8b 	vldr	s3, [pc, #556]	; 8018278 <MotionDI_update+0x7b0>
 801804c:	ed9f 3a8b 	vldr	s6, [pc, #556]	; 801827c <MotionDI_update+0x7b4>
 8018050:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 8018054:	ee07 7a90 	vmov	s15, r7
 8018058:	ee0f 3a90 	vmov	s31, r3
 801805c:	eeb8 eae7 	vcvt.f32.s32	s28, s15
 8018060:	0853      	lsrs	r3, r2, #1
 8018062:	ee07 8a90 	vmov	s15, r8
 8018066:	4293      	cmp	r3, r2
 8018068:	eef8 daef 	vcvt.f32.s32	s27, s31
 801806c:	eeb8 fae7 	vcvt.f32.s32	s30, s15
 8018070:	931c      	str	r3, [sp, #112]	; 0x70
 8018072:	bf28      	it	cs
 8018074:	4613      	movcs	r3, r2
 8018076:	469a      	mov	sl, r3
 8018078:	ee6c ca2c 	vmul.f32	s25, s24, s25
 801807c:	ee13 3a90 	vmov	r3, s7
 8018080:	eeb0 5a6d 	vmov.f32	s10, s27
 8018084:	eef0 4a6d 	vmov.f32	s9, s27
 8018088:	eeb0 4a4e 	vmov.f32	s8, s28
 801808c:	eeb0 0a4e 	vmov.f32	s0, s28
 8018090:	eeb0 1a4f 	vmov.f32	s2, s30
 8018094:	eef0 0a4f 	vmov.f32	s1, s30
 8018098:	eef0 2a61 	vmov.f32	s5, s3
 801809c:	46de      	mov	lr, fp
 801809e:	f9be 100a 	ldrsh.w	r1, [lr, #10]
 80180a2:	f9be 0008 	ldrsh.w	r0, [lr, #8]
 80180a6:	f9be 200c 	ldrsh.w	r2, [lr, #12]
 80180aa:	fb01 fc01 	mul.w	ip, r1, r1
 80180ae:	fb00 cc00 	mla	ip, r0, r0, ip
 80180b2:	fb02 cc02 	mla	ip, r2, r2, ip
 80180b6:	ee07 ca90 	vmov	s15, ip
 80180ba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80180be:	eeb8 9a63 	vcvt.f32.u32	s18, s7
 80180c2:	eef1 5ac6 	vsqrt.f32	s11, s12
 80180c6:	3301      	adds	r3, #1
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	f10e 0e06 	add.w	lr, lr, #6
 80180ce:	ee07 0a90 	vmov	s15, r0
 80180d2:	eef8 9a43 	vcvt.f32.u32	s19, s6
 80180d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80180da:	eeb4 9ae5 	vcmpe.f32	s18, s11
 80180de:	ee07 1a90 	vmov	s15, r1
 80180e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e6:	eef4 9ae5 	vcmpe.f32	s19, s11
 80180ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80180ee:	bf48      	it	mi
 80180f0:	eefc 3ae5 	vcvtmi.u32.f32	s7, s11
 80180f4:	ee07 2a90 	vmov	s15, r2
 80180f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180fc:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8018100:	bfc8      	it	gt
 8018102:	eebc 3ae5 	vcvtgt.u32.f32	s6, s11
 8018106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801810a:	eef4 4ae6 	vcmpe.f32	s9, s13
 801810e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018112:	bfb8      	it	lt
 8018114:	eeb0 5a66 	vmovlt.f32	s10, s13
 8018118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801811c:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8018120:	bf88      	it	hi
 8018122:	eef0 4a66 	vmovhi.f32	s9, s13
 8018126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801812a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801812e:	bfb8      	it	lt
 8018130:	eeb0 4a47 	vmovlt.f32	s8, s14
 8018134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018138:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801813c:	bf88      	it	hi
 801813e:	eeb0 0a47 	vmovhi.f32	s0, s14
 8018142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018146:	eef4 0ae7 	vcmpe.f32	s1, s15
 801814a:	bfb8      	it	lt
 801814c:	eeb0 1a67 	vmovlt.f32	s2, s15
 8018150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018154:	bf88      	it	hi
 8018156:	eef0 0a67 	vmovhi.f32	s1, s15
 801815a:	4553      	cmp	r3, sl
 801815c:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8018160:	ee71 1a86 	vadd.f32	s3, s3, s12
 8018164:	d39b      	bcc.n	801809e <MotionDI_update+0x5d6>
 8018166:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018168:	4293      	cmp	r3, r2
 801816a:	f082 81c2 	bcs.w	801a4f2 <MotionDI_update+0x2a2a>
 801816e:	3a01      	subs	r2, #1
 8018170:	1ad2      	subs	r2, r2, r3
 8018172:	fa13 fe82 	uxtah	lr, r3, r2
 8018176:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
 801817a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801817e:	f10b 0e06 	add.w	lr, fp, #6
 8018182:	eddf 9a3d 	vldr	s19, [pc, #244]	; 8018278 <MotionDI_update+0x7b0>
 8018186:	eb0b 0c43 	add.w	ip, fp, r3, lsl #1
 801818a:	eb0e 0e42 	add.w	lr, lr, r2, lsl #1
 801818e:	f9bc 200a 	ldrsh.w	r2, [ip, #10]
 8018192:	f9bc 1008 	ldrsh.w	r1, [ip, #8]
 8018196:	f9bc 300c 	ldrsh.w	r3, [ip, #12]
 801819a:	fb02 f002 	mul.w	r0, r2, r2
 801819e:	fb01 0001 	mla	r0, r1, r1, r0
 80181a2:	fb03 0003 	mla	r0, r3, r3, r0
 80181a6:	ee07 0a90 	vmov	s15, r0
 80181aa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80181ae:	eeb8 9a63 	vcvt.f32.u32	s18, s7
 80181b2:	eef1 5ac6 	vsqrt.f32	s11, s12
 80181b6:	f10c 0c06 	add.w	ip, ip, #6
 80181ba:	ee07 1a90 	vmov	s15, r1
 80181be:	eeb8 aa43 	vcvt.f32.u32	s20, s6
 80181c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80181c6:	eef4 5ac9 	vcmpe.f32	s11, s18
 80181ca:	ee07 2a90 	vmov	s15, r2
 80181ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d2:	eef4 5aca 	vcmpe.f32	s11, s20
 80181d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80181da:	bfc8      	it	gt
 80181dc:	eefc 3ae5 	vcvtgt.u32.f32	s7, s11
 80181e0:	ee07 3a90 	vmov	s15, r3
 80181e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181e8:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80181ec:	bf48      	it	mi
 80181ee:	eebc 3ae5 	vcvtmi.u32.f32	s6, s11
 80181f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181f6:	eef4 4ae6 	vcmpe.f32	s9, s13
 80181fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181fe:	bfb8      	it	lt
 8018200:	eeb0 5a66 	vmovlt.f32	s10, s13
 8018204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018208:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801820c:	bf88      	it	hi
 801820e:	eef0 4a66 	vmovhi.f32	s9, s13
 8018212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018216:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801821a:	bfb8      	it	lt
 801821c:	eeb0 4a47 	vmovlt.f32	s8, s14
 8018220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018224:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8018228:	bf88      	it	hi
 801822a:	eeb0 0a47 	vmovhi.f32	s0, s14
 801822e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018232:	eef4 0ae7 	vcmpe.f32	s1, s15
 8018236:	bfb8      	it	lt
 8018238:	eeb0 1a67 	vmovlt.f32	s2, s15
 801823c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018240:	bf88      	it	hi
 8018242:	eef0 0a67 	vmovhi.f32	s1, s15
 8018246:	45e6      	cmp	lr, ip
 8018248:	ee79 9aa5 	vadd.f32	s19, s19, s11
 801824c:	ee71 1a86 	vadd.f32	s3, s3, s12
 8018250:	d19d      	bne.n	801818e <MotionDI_update+0x6c6>
 8018252:	e015      	b.n	8018280 <MotionDI_update+0x7b8>
 8018254:	ffff8002 	.word	0xffff8002
 8018258:	200026b0 	.word	0x200026b0
 801825c:	20002874 	.word	0x20002874
 8018260:	3a83126f 	.word	0x3a83126f
 8018264:	00278d00 	.word	0x00278d00
 8018268:	20002b10 	.word	0x20002b10
 801826c:	3ca3d70a 	.word	0x3ca3d70a
 8018270:	3dcccccd 	.word	0x3dcccccd
	...
 801827c:	fffffffe 	.word	0xfffffffe
 8018280:	ee75 7a64 	vsub.f32	s15, s10, s9
 8018284:	eef4 cae7 	vcmpe.f32	s25, s15
 8018288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801828c:	f101 87fa 	bmi.w	801a284 <MotionDI_update+0x27bc>
 8018290:	ee74 7a40 	vsub.f32	s15, s8, s0
 8018294:	eef4 cae7 	vcmpe.f32	s25, s15
 8018298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801829c:	f101 87f2 	bmi.w	801a284 <MotionDI_update+0x27bc>
 80182a0:	ee71 7a60 	vsub.f32	s15, s2, s1
 80182a4:	eef4 cae7 	vcmpe.f32	s25, s15
 80182a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182ac:	f101 87ea 	bmi.w	801a284 <MotionDI_update+0x27bc>
 80182b0:	2301      	movs	r3, #1
 80182b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80182b4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80182b6:	ee07 1a90 	vmov	s15, r1
 80182ba:	ee39 7aa2 	vadd.f32	s14, s19, s5
 80182be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182c2:	1e4b      	subs	r3, r1, #1
 80182c4:	ee87 da27 	vdiv.f32	s26, s14, s15
 80182c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80182ca:	ee07 3a10 	vmov	s14, r3
 80182ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80182d2:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 80182d6:	eee7 1ac7 	vfms.f32	s3, s15, s14
 80182da:	ee81 7aa6 	vdiv.f32	s14, s3, s13
 80182de:	eeb4 7ac2 	vcmpe.f32	s14, s4
 80182e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182e6:	f301 8482 	bgt.w	8019bee <MotionDI_update+0x2126>
 80182ea:	4b53      	ldr	r3, [pc, #332]	; (8018438 <MotionDI_update+0x970>)
 80182ec:	ee13 2a10 	vmov	r2, s6
 80182f0:	ed93 7a00 	vldr	s14, [r3]
 80182f4:	ee13 3a90 	vmov	r3, s7
 80182f8:	1a9b      	subs	r3, r3, r2
 80182fa:	ee07 3a90 	vmov	s15, r3
 80182fe:	ee2c 7a07 	vmul.f32	s14, s24, s14
 8018302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801830e:	f101 846e 	bmi.w	8019bee <MotionDI_update+0x2126>
 8018312:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018314:	1aca      	subs	r2, r1, r3
 8018316:	ee07 2a10 	vmov	s14, r2
 801831a:	ee07 3a90 	vmov	s15, r3
 801831e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018326:	eec9 6a87 	vdiv.f32	s13, s19, s14
 801832a:	ee82 7aa7 	vdiv.f32	s14, s5, s15
 801832e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8018332:	eef0 7ae7 	vabs.f32	s15, s15
 8018336:	eef4 cae7 	vcmpe.f32	s25, s15
 801833a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801833e:	f101 8456 	bmi.w	8019bee <MotionDI_update+0x2126>
 8018342:	ee7d 7a4c 	vsub.f32	s15, s26, s24
 8018346:	eef0 7ae7 	vabs.f32	s15, s15
 801834a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801834e:	eeb4 cae7 	vcmpe.f32	s24, s15
 8018352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018356:	f101 844a 	bmi.w	8019bee <MotionDI_update+0x2126>
 801835a:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 801835e:	eddf 7a37 	vldr	s15, [pc, #220]	; 801843c <MotionDI_update+0x974>
 8018362:	ee07 3a10 	vmov	s14, r3
 8018366:	eeb8 9a47 	vcvt.f32.u32	s18, s14
 801836a:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801836e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018372:	f50d 7a03 	add.w	sl, sp, #524	; 0x20c
 8018376:	ee17 0a90 	vmov	r0, s15
 801837a:	f7e8 f8dd 	bl	8000538 <__aeabi_f2d>
 801837e:	ec41 0b10 	vmov	d0, r0, r1
 8018382:	f003 fdf9 	bl	801bf78 <exp>
 8018386:	ec51 0b10 	vmov	r0, r1, d0
 801838a:	f7e8 fc25 	bl	8000bd8 <__aeabi_d2f>
 801838e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8018440 <MotionDI_update+0x978>
 8018392:	9922      	ldr	r1, [sp, #136]	; 0x88
 8018394:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
 8018398:	eec7 7a09 	vdiv.f32	s15, s14, s18
 801839c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80183a0:	0052      	lsls	r2, r2, #1
 80183a2:	1f93      	subs	r3, r2, #6
 80183a4:	4453      	add	r3, sl
 80183a6:	3a0c      	subs	r2, #12
 80183a8:	9318      	str	r3, [sp, #96]	; 0x60
 80183aa:	eb0a 0302 	add.w	r3, sl, r2
 80183ae:	931c      	str	r3, [sp, #112]	; 0x70
 80183b0:	b20b      	sxth	r3, r1
 80183b2:	9324      	str	r3, [sp, #144]	; 0x90
 80183b4:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80183b8:	971d      	str	r7, [sp, #116]	; 0x74
 80183ba:	2303      	movs	r3, #3
 80183bc:	ee09 0a90 	vmov	s19, r0
 80183c0:	ee0a 0a90 	vmov	s21, r0
 80183c4:	ee7a 6a69 	vsub.f32	s13, s20, s19
 80183c8:	ee39 7aca 	vsub.f32	s14, s19, s20
 80183cc:	eed7 aaa6 	vfnms.f32	s21, s15, s13
 80183d0:	931f      	str	r3, [sp, #124]	; 0x7c
 80183d2:	46c4      	mov	ip, r8
 80183d4:	eea7 aa87 	vfma.f32	s20, s15, s14
 80183d8:	9527      	str	r5, [sp, #156]	; 0x9c
 80183da:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 80183de:	eef0 ea6d 	vmov.f32	s29, s27
 80183e2:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 80183e6:	eef0 da4e 	vmov.f32	s27, s28
 80183ea:	eeb0 9a4f 	vmov.f32	s18, s30
 80183ee:	465a      	mov	r2, fp
 80183f0:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
 80183f4:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 80183f8:	f9b2 1012 	ldrsh.w	r1, [r2, #18]
 80183fc:	ee1f 2a90 	vmov	r2, s31
 8018400:	4402      	add	r2, r0
 8018402:	ee00 2a10 	vmov	s0, r2
 8018406:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018408:	441a      	add	r2, r3
 801840a:	4663      	mov	r3, ip
 801840c:	440b      	add	r3, r1
 801840e:	ee0f 2a10 	vmov	s30, r2
 8018412:	ee0e 3a10 	vmov	s28, r3
 8018416:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801841a:	eeb8 facf 	vcvt.f32.s32	s30, s30
 801841e:	eeb8 eace 	vcvt.f32.s32	s28, s28
 8018422:	f04f 0800 	mov.w	r8, #0
 8018426:	ee20 0a0b 	vmul.f32	s0, s0, s22
 801842a:	ee2f fa0b 	vmul.f32	s30, s30, s22
 801842e:	ee2e ea0b 	vmul.f32	s28, s28, s22
 8018432:	4647      	mov	r7, r8
 8018434:	e020      	b.n	8018478 <MotionDI_update+0x9b0>
 8018436:	bf00      	nop
 8018438:	20002b18 	.word	0x20002b18
 801843c:	bdd5e54c 	.word	0xbdd5e54c
 8018440:	41193238 	.word	0x41193238
 8018444:	f93a 0013 	ldrsh.w	r0, [sl, r3, lsl #1]
 8018448:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 801844c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8018450:	ee07 0a90 	vmov	s15, r0
 8018454:	eeb0 0a6e 	vmov.f32	s0, s29
 8018458:	eef8 eae7 	vcvt.f32.s32	s29, s15
 801845c:	ee07 1a90 	vmov	s15, r1
 8018460:	eeb0 fa6d 	vmov.f32	s30, s27
 8018464:	eef8 dae7 	vcvt.f32.s32	s27, s15
 8018468:	ee07 3a90 	vmov	s15, r3
 801846c:	eeb0 ea49 	vmov.f32	s28, s18
 8018470:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8018474:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8018478:	4447      	add	r7, r8
 801847a:	007d      	lsls	r5, r7, #1
 801847c:	3506      	adds	r5, #6
 801847e:	ee6e eaaa 	vmul.f32	s29, s29, s21
 8018482:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8018486:	eee9 ea80 	vfma.f32	s29, s19, s0
 801848a:	4455      	add	r5, sl
 801848c:	f108 0801 	add.w	r8, r8, #1
 8018490:	ee07 3a90 	vmov	s15, r3
 8018494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018498:	ee6d daaa 	vmul.f32	s27, s27, s21
 801849c:	eeea ea27 	vfma.f32	s29, s20, s15
 80184a0:	f003 fc9e 	bl	801bde0 <roundf>
 80184a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80184a8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80184ac:	ee07 3a90 	vmov	s15, r3
 80184b0:	eee9 da8f 	vfma.f32	s27, s19, s30
 80184b4:	fa0f f888 	sxth.w	r8, r8
 80184b8:	ee17 3a10 	vmov	r3, s14
 80184bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184c0:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
 80184c4:	eeb0 0a4f 	vmov.f32	s0, s30
 80184c8:	eeea da27 	vfma.f32	s27, s20, s15
 80184cc:	f003 fc88 	bl	801bde0 <roundf>
 80184d0:	ee29 9a2a 	vmul.f32	s18, s18, s21
 80184d4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80184d8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80184dc:	ee07 3a90 	vmov	s15, r3
 80184e0:	eea9 9a8e 	vfma.f32	s18, s19, s28
 80184e4:	eb0a 0747 	add.w	r7, sl, r7, lsl #1
 80184e8:	ee17 3a10 	vmov	r3, s14
 80184ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184f0:	807b      	strh	r3, [r7, #2]
 80184f2:	eeb0 0a4e 	vmov.f32	s0, s28
 80184f6:	eeaa 9a27 	vfma.f32	s18, s20, s15
 80184fa:	f003 fc71 	bl	801bde0 <roundf>
 80184fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018502:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8018506:	ee10 1a10 	vmov	r1, s0
 801850a:	45c1      	cmp	r9, r8
 801850c:	eb0a 0243 	add.w	r2, sl, r3, lsl #1
 8018510:	80b9      	strh	r1, [r7, #4]
 8018512:	dc97      	bgt.n	8018444 <MotionDI_update+0x97c>
 8018514:	eeb0 0a6e 	vmov.f32	s0, s29
 8018518:	f003 fc62 	bl	801bde0 <roundf>
 801851c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018520:	eeb0 0a6d 	vmov.f32	s0, s27
 8018524:	ee17 3a90 	vmov	r3, s15
 8018528:	b21f      	sxth	r7, r3
 801852a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801852c:	801f      	strh	r7, [r3, #0]
 801852e:	f003 fc57 	bl	801bde0 <roundf>
 8018532:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018536:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018538:	ee17 1a90 	vmov	r1, s15
 801853c:	b20d      	sxth	r5, r1
 801853e:	eeb0 0a49 	vmov.f32	s0, s18
 8018542:	8055      	strh	r5, [r2, #2]
 8018544:	f003 fc4c 	bl	801bde0 <roundf>
 8018548:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801854c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801854e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018550:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018554:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018558:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 801855c:	ee10 ca10 	vmov	ip, s0
 8018560:	fa0f f38c 	sxth.w	r3, ip
 8018564:	8083      	strh	r3, [r0, #4]
 8018566:	19c8      	adds	r0, r1, r7
 8018568:	991c      	ldr	r1, [sp, #112]	; 0x70
 801856a:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 801856e:	442a      	add	r2, r5
 8018570:	18cb      	adds	r3, r1, r3
 8018572:	ee0e 0a10 	vmov	s28, r0
 8018576:	ee0d 2a90 	vmov	s27, r2
 801857a:	ee09 3a10 	vmov	s18, r3
 801857e:	eeb8 eace 	vcvt.f32.s32	s28, s28
 8018582:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8018586:	eef8 daed 	vcvt.f32.s32	s27, s27
 801858a:	ee29 9a0b 	vmul.f32	s18, s18, s22
 801858e:	ee2e ea0b 	vmul.f32	s28, s28, s22
 8018592:	ee6d da8b 	vmul.f32	s27, s27, s22
 8018596:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 801859a:	006d      	lsls	r5, r5, #1
 801859c:	f1a5 070c 	sub.w	r7, r5, #12
 80185a0:	3d06      	subs	r5, #6
 80185a2:	f93a 3007 	ldrsh.w	r3, [sl, r7]
 80185a6:	ee07 3a90 	vmov	s15, r3
 80185aa:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 80185ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185b2:	ee07 3a10 	vmov	s14, r3
 80185b6:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80185ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80185be:	4457      	add	r7, sl
 80185c0:	eeea 7a87 	vfma.f32	s15, s21, s14
 80185c4:	eb0a 0b05 	add.w	fp, sl, r5
 80185c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80185cc:	eeb0 0a4e 	vmov.f32	s0, s28
 80185d0:	eee9 7a8e 	vfma.f32	s15, s19, s28
 80185d4:	fa0f f888 	sxth.w	r8, r8
 80185d8:	eeb0 ea67 	vmov.f32	s28, s15
 80185dc:	f003 fc00 	bl	801bde0 <roundf>
 80185e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80185e4:	ee07 3a90 	vmov	s15, r3
 80185e8:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 80185ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185f0:	ee07 3a10 	vmov	s14, r3
 80185f4:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80185f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80185fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018600:	eeea 7a87 	vfma.f32	s15, s21, s14
 8018604:	ee10 3a10 	vmov	r3, s0
 8018608:	eee9 7aad 	vfma.f32	s15, s19, s27
 801860c:	f82a 3005 	strh.w	r3, [sl, r5]
 8018610:	eeb0 0a6d 	vmov.f32	s0, s27
 8018614:	eef0 da67 	vmov.f32	s27, s15
 8018618:	f003 fbe2 	bl	801bde0 <roundf>
 801861c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8018620:	ee07 3a90 	vmov	s15, r3
 8018624:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
 8018628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801862c:	ee06 3a90 	vmov	s13, r3
 8018630:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8018634:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018638:	eeb0 7a40 	vmov.f32	s14, s0
 801863c:	eeea 7aa6 	vfma.f32	s15, s21, s13
 8018640:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018644:	eee9 7a89 	vfma.f32	s15, s19, s18
 8018648:	ee17 3a10 	vmov	r3, s14
 801864c:	eeb0 0a49 	vmov.f32	s0, s18
 8018650:	f8ab 3002 	strh.w	r3, [fp, #2]
 8018654:	eeb0 9a67 	vmov.f32	s18, s15
 8018658:	f003 fbc2 	bl	801bde0 <roundf>
 801865c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018660:	f1b8 0f01 	cmp.w	r8, #1
 8018664:	ee10 3a10 	vmov	r3, s0
 8018668:	f8ab 3004 	strh.w	r3, [fp, #4]
 801866c:	dc93      	bgt.n	8018596 <MotionDI_update+0xace>
 801866e:	eeb0 0a4e 	vmov.f32	s0, s28
 8018672:	f003 fbb5 	bl	801bde0 <roundf>
 8018676:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801867a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801867c:	ee17 3a90 	vmov	r3, s15
 8018680:	b21f      	sxth	r7, r3
 8018682:	eeb0 0a6d 	vmov.f32	s0, s27
 8018686:	812f      	strh	r7, [r5, #8]
 8018688:	f003 fbaa 	bl	801bde0 <roundf>
 801868c:	eebd fac0 	vcvt.s32.f32	s30, s0
 8018690:	eeb0 0a49 	vmov.f32	s0, s18
 8018694:	ee1f 3a10 	vmov	r3, s30
 8018698:	b21a      	sxth	r2, r3
 801869a:	816a      	strh	r2, [r5, #10]
 801869c:	921d      	str	r2, [sp, #116]	; 0x74
 801869e:	f003 fb9f 	bl	801bde0 <roundf>
 80186a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80186a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80186a8:	3b01      	subs	r3, #1
 80186aa:	b29b      	uxth	r3, r3
 80186ac:	461a      	mov	r2, r3
 80186ae:	931f      	str	r3, [sp, #124]	; 0x7c
 80186b0:	ee10 3a10 	vmov	r3, s0
 80186b4:	b21b      	sxth	r3, r3
 80186b6:	ee0f 7a90 	vmov	s31, r7
 80186ba:	469c      	mov	ip, r3
 80186bc:	81ab      	strh	r3, [r5, #12]
 80186be:	2a00      	cmp	r2, #0
 80186c0:	f001 82b5 	beq.w	8019c2e <MotionDI_update+0x2166>
 80186c4:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 80186c8:	eef8 dae7 	vcvt.f32.s32	s27, s15
 80186cc:	ee07 3a90 	vmov	s15, r3
 80186d0:	eef8 eaef 	vcvt.f32.s32	s29, s31
 80186d4:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 80186d8:	462a      	mov	r2, r5
 80186da:	e689      	b.n	80183f0 <MotionDI_update+0x928>
 80186dc:	f894 36b8 	ldrb.w	r3, [r4, #1720]	; 0x6b8
 80186e0:	2b03      	cmp	r3, #3
 80186e2:	f43f aa21 	beq.w	8017b28 <MotionDI_update+0x60>
 80186e6:	462a      	mov	r2, r5
 80186e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80186ea:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80186ee:	f8cb 1000 	str.w	r1, [fp]
 80186f2:	6851      	ldr	r1, [r2, #4]
 80186f4:	6892      	ldr	r2, [r2, #8]
 80186f6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80186f8:	edd4 2a23 	vldr	s5, [r4, #140]	; 0x8c
 80186fc:	ed94 2a24 	vldr	s4, [r4, #144]	; 0x90
 8018700:	edc6 2a00 	vstr	s5, [r6]
 8018704:	ab82      	add	r3, sp, #520	; 0x208
 8018706:	c307      	stmia	r3!, {r0, r1, r2}
 8018708:	462e      	mov	r6, r5
 801870a:	edd4 1a25 	vldr	s3, [r4, #148]	; 0x94
 801870e:	f856 0f14 	ldr.w	r0, [r6, #20]!
 8018712:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8018716:	6871      	ldr	r1, [r6, #4]
 8018718:	68b2      	ldr	r2, [r6, #8]
 801871a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801871c:	ed86 2a01 	vstr	s4, [r6, #4]
 8018720:	ae85      	add	r6, sp, #532	; 0x214
 8018722:	c607      	stmia	r6!, {r0, r1, r2}
 8018724:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8018726:	edc6 1a02 	vstr	s3, [r6, #8]
 801872a:	b913      	cbnz	r3, 8018732 <MotionDI_update+0xc6a>
 801872c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801872e:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
 8018732:	eddb 6a01 	vldr	s13, [fp, #4]
 8018736:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 801873a:	ed94 8a16 	vldr	s16, [r4, #88]	; 0x58
 801873e:	ed9b 7a02 	vldr	s14, [fp, #8]
 8018742:	ed94 3a19 	vldr	s6, [r4, #100]	; 0x64
 8018746:	eddb 7a03 	vldr	s15, [fp, #12]
 801874a:	edd4 3a1a 	vldr	s7, [r4, #104]	; 0x68
 801874e:	eddb 4a04 	vldr	s9, [fp, #16]
 8018752:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
 8018756:	ed9b 5a05 	vldr	s10, [fp, #20]
 801875a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801875e:	eddb 5a06 	vldr	s11, [fp, #24]
 8018762:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 8018766:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801876a:	ed94 9a15 	vldr	s18, [r4, #84]	; 0x54
 801876e:	edd4 8a17 	vldr	s17, [r4, #92]	; 0x5c
 8018772:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8018776:	3301      	adds	r3, #1
 8018778:	3201      	adds	r2, #1
 801877a:	eea7 3a07 	vfma.f32	s6, s14, s14
 801877e:	b21b      	sxth	r3, r3
 8018780:	b212      	sxth	r2, r2
 8018782:	eeb0 4a46 	vmov.f32	s8, s12
 8018786:	ed94 6a07 	vldr	s12, [r4, #28]
 801878a:	8323      	strh	r3, [r4, #24]
 801878c:	eee7 3aa7 	vfma.f32	s7, s15, s15
 8018790:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8018794:	eea4 1aa4 	vfma.f32	s2, s9, s9
 8018798:	eea5 0a05 	vfma.f32	s0, s10, s10
 801879c:	eee5 0aa5 	vfma.f32	s1, s11, s11
 80187a0:	ee37 7a08 	vadd.f32	s14, s14, s16
 80187a4:	ee74 4a86 	vadd.f32	s9, s9, s12
 80187a8:	ed94 8a08 	vldr	s16, [r4, #32]
 80187ac:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80187b0:	ed84 4a18 	vstr	s8, [r4, #96]	; 0x60
 80187b4:	ee76 6a89 	vadd.f32	s13, s13, s18
 80187b8:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80187bc:	ee35 5a08 	vadd.f32	s10, s10, s16
 80187c0:	ee75 5a86 	vadd.f32	s11, s11, s12
 80187c4:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 80187c8:	ed84 3a19 	vstr	s6, [r4, #100]	; 0x64
 80187cc:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 80187d0:	edc4 3a1a 	vstr	s7, [r4, #104]	; 0x68
 80187d4:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 80187d8:	ed84 1a0a 	vstr	s2, [r4, #40]	; 0x28
 80187dc:	edc4 4a07 	vstr	s9, [r4, #28]
 80187e0:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
 80187e4:	ed84 5a08 	vstr	s10, [r4, #32]
 80187e8:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
 80187ec:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 80187f0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80187f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80187f6:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80187fa:	4288      	cmp	r0, r1
 80187fc:	f4ff a994 	bcc.w	8017b28 <MotionDI_update+0x60>
 8018800:	2a00      	cmp	r2, #0
 8018802:	f341 81d1 	ble.w	8019ba8 <MotionDI_update+0x20e0>
 8018806:	ee06 2a10 	vmov	s12, r2
 801880a:	eeb8 8ac6 	vcvt.f32.s32	s16, s12
 801880e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018812:	ee88 6a88 	vdiv.f32	s12, s17, s16
 8018816:	2b00      	cmp	r3, #0
 8018818:	edd4 9a1d 	vldr	s19, [r4, #116]	; 0x74
 801881c:	ee26 3a03 	vmul.f32	s6, s12, s6
 8018820:	ee63 3a86 	vmul.f32	s7, s7, s12
 8018824:	ee26 7a07 	vmul.f32	s14, s12, s14
 8018828:	ee67 7a86 	vmul.f32	s15, s15, s12
 801882c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8018830:	ee33 9a83 	vadd.f32	s18, s7, s6
 8018834:	ee26 6a04 	vmul.f32	s12, s12, s8
 8018838:	ed94 4a1e 	vldr	s8, [r4, #120]	; 0x78
 801883c:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 8018840:	eea7 9a47 	vfms.f32	s18, s14, s14
 8018844:	ee77 9a69 	vsub.f32	s19, s14, s19
 8018848:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801884c:	eef0 9ae9 	vabs.f32	s19, s19
 8018850:	eeb0 4ac4 	vabs.f32	s8, s8
 8018854:	ee34 4a29 	vadd.f32	s8, s8, s19
 8018858:	edd4 9a1c 	vldr	s19, [r4, #112]	; 0x70
 801885c:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 8018860:	eea6 6ae6 	vfms.f32	s12, s13, s13
 8018864:	eea7 9ae7 	vfms.f32	s18, s15, s15
 8018868:	ee76 6ae9 	vsub.f32	s13, s13, s19
 801886c:	ee36 6a09 	vadd.f32	s12, s12, s18
 8018870:	eef0 6ae6 	vabs.f32	s13, s13
 8018874:	ee74 6a26 	vadd.f32	s13, s8, s13
 8018878:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 801887c:	ed84 3a19 	vstr	s6, [r4, #100]	; 0x64
 8018880:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 8018884:	edc4 3a1a 	vstr	s7, [r4, #104]	; 0x68
 8018888:	f341 81c5 	ble.w	8019c16 <MotionDI_update+0x214e>
 801888c:	ee07 3a90 	vmov	s15, r3
 8018890:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8018894:	ed94 4a0e 	vldr	s8, [r4, #56]	; 0x38
 8018898:	ed94 3a0f 	vldr	s6, [r4, #60]	; 0x3c
 801889c:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80188a0:	6921      	ldr	r1, [r4, #16]
 80188a2:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80188a6:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 80188aa:	ee27 0a00 	vmul.f32	s0, s14, s0
 80188ae:	ee60 0a87 	vmul.f32	s1, s1, s14
 80188b2:	ee27 5a05 	vmul.f32	s10, s14, s10
 80188b6:	ee70 3a80 	vadd.f32	s7, s1, s0
 80188ba:	ee65 5a87 	vmul.f32	s11, s11, s14
 80188be:	eee5 3a45 	vfms.f32	s7, s10, s10
 80188c2:	ee64 4a87 	vmul.f32	s9, s9, s14
 80188c6:	ee21 1a07 	vmul.f32	s2, s2, s14
 80188ca:	ee35 3a43 	vsub.f32	s6, s10, s6
 80188ce:	ee34 7ac4 	vsub.f32	s14, s9, s8
 80188d2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80188d6:	eeb0 4a41 	vmov.f32	s8, s2
 80188da:	eee5 3ae5 	vfms.f32	s7, s11, s11
 80188de:	eea4 4ae4 	vfms.f32	s8, s9, s9
 80188e2:	eeb0 3ac3 	vabs.f32	s6, s6
 80188e6:	eef0 7ae7 	vabs.f32	s15, s15
 80188ea:	ee77 7a83 	vadd.f32	s15, s15, s6
 80188ee:	eeb0 7ac7 	vabs.f32	s14, s14
 80188f2:	ee74 3a23 	vadd.f32	s7, s8, s7
 80188f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80188fa:	edc4 4a07 	vstr	s9, [r4, #28]
 80188fe:	ed84 1a0a 	vstr	s2, [r4, #40]	; 0x28
 8018902:	ed84 5a08 	vstr	s10, [r4, #32]
 8018906:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
 801890a:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
 801890e:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 8018912:	f280 845b 	bge.w	80191cc <MotionDI_update+0x1704>
 8018916:	3b01      	subs	r3, #1
 8018918:	ee07 3a90 	vmov	s15, r3
 801891c:	ee69 3a23 	vmul.f32	s7, s18, s7
 8018920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018924:	edd4 5a01 	vldr	s11, [r4, #4]
 8018928:	ee83 5aa7 	vdiv.f32	s10, s7, s15
 801892c:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8018930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018934:	f140 844a 	bpl.w	80191cc <MotionDI_update+0x1704>
 8018938:	edd4 7a02 	vldr	s15, [r4, #8]
 801893c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018944:	bf4c      	ite	mi
 8018946:	2301      	movmi	r3, #1
 8018948:	2300      	movpl	r3, #0
 801894a:	f000 bc40 	b.w	80191ce <MotionDI_update+0x1706>
 801894e:	ed9f 9a9c 	vldr	s18, [pc, #624]	; 8018bc0 <MotionDI_update+0x10f8>
 8018952:	f7ff b943 	b.w	8017bdc <MotionDI_update+0x114>
 8018956:	ad3f      	add	r5, sp, #252	; 0xfc
 8018958:	a846      	add	r0, sp, #280	; 0x118
 801895a:	2300      	movs	r3, #0
 801895c:	4999      	ldr	r1, [pc, #612]	; (8018bc4 <MotionDI_update+0x10fc>)
 801895e:	901d      	str	r0, [sp, #116]	; 0x74
 8018960:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8018964:	602b      	str	r3, [r5, #0]
 8018966:	606b      	str	r3, [r5, #4]
 8018968:	60ab      	str	r3, [r5, #8]
 801896a:	af36      	add	r7, sp, #216	; 0xd8
 801896c:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8018970:	edc5 aa03 	vstr	s21, [r5, #12]
 8018974:	951f      	str	r5, [sp, #124]	; 0x7c
 8018976:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8018978:	9218      	str	r2, [sp, #96]	; 0x60
 801897a:	4638      	mov	r0, r7
 801897c:	f501 7265 	add.w	r2, r1, #916	; 0x394
 8018980:	602b      	str	r3, [r5, #0]
 8018982:	606b      	str	r3, [r5, #4]
 8018984:	60ab      	str	r3, [r5, #8]
 8018986:	edc5 aa03 	vstr	s21, [r5, #12]
 801898a:	f7f7 fedf 	bl	801074c <rotVect>
 801898e:	4a8e      	ldr	r2, [pc, #568]	; (8018bc8 <MotionDI_update+0x1100>)
 8018990:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8018994:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 8018998:	4650      	mov	r0, sl
 801899a:	f7f7 fed7 	bl	801074c <rotVect>
 801899e:	4a8b      	ldr	r2, [pc, #556]	; (8018bcc <MotionDI_update+0x1104>)
 80189a0:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80189a4:	4640      	mov	r0, r8
 80189a6:	f5a2 715f 	sub.w	r1, r2, #892	; 0x37c
 80189aa:	f7f7 fecf 	bl	801074c <rotVect>
 80189ae:	4b88      	ldr	r3, [pc, #544]	; (8018bd0 <MotionDI_update+0x1108>)
 80189b0:	edd7 7a00 	vldr	s15, [r7]
 80189b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80189b8:	ed9a 8a00 	vldr	s16, [sl]
 80189bc:	edda 8a01 	vldr	s17, [sl, #4]
 80189c0:	ed98 ba02 	vldr	s22, [r8, #8]
 80189c4:	edd8 9a00 	vldr	s19, [r8]
 80189c8:	ed98 aa01 	vldr	s20, [r8, #4]
 80189cc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80189d0:	edc8 9a01 	vstr	s19, [r8, #4]
 80189d4:	eeb1 ca67 	vneg.f32	s24, s15
 80189d8:	eef1 ca47 	vneg.f32	s25, s14
 80189dc:	eeb1 8a48 	vneg.f32	s16, s16
 80189e0:	eef1 8a68 	vneg.f32	s17, s17
 80189e4:	eef1 ba4b 	vneg.f32	s23, s22
 80189e8:	ed87 ca01 	vstr	s24, [r7, #4]
 80189ec:	edc7 ca00 	vstr	s25, [r7]
 80189f0:	ed8a 8a01 	vstr	s16, [sl, #4]
 80189f4:	edca 8a00 	vstr	s17, [sl]
 80189f8:	edc8 ba02 	vstr	s23, [r8, #8]
 80189fc:	ed88 aa00 	vstr	s20, [r8]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d057      	beq.n	8018ab4 <MotionDI_update+0xfec>
 8018a04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018a08:	ed97 da02 	vldr	s26, [r7, #8]
 8018a0c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8018a10:	eeed 7a0d 	vfma.f32	s15, s26, s26
 8018a14:	ee17 0a90 	vmov	r0, s15
 8018a18:	f7e7 fd8e 	bl	8000538 <__aeabi_f2d>
 8018a1c:	ec41 0b10 	vmov	d0, r0, r1
 8018a20:	f003 faf2 	bl	801c008 <sqrt>
 8018a24:	ec51 0b10 	vmov	r0, r1, d0
 8018a28:	f7e8 f8d6 	bl	8000bd8 <__aeabi_d2f>
 8018a2c:	ee0d 0a90 	vmov	s27, r0
 8018a30:	f7e7 fd82 	bl	8000538 <__aeabi_f2d>
 8018a34:	a360      	add	r3, pc, #384	; (adr r3, 8018bb8 <MotionDI_update+0x10f0>)
 8018a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a3a:	f7e8 f847 	bl	8000acc <__aeabi_dcmplt>
 8018a3e:	b938      	cbnz	r0, 8018a50 <MotionDI_update+0xf88>
 8018a40:	eeca 7aad 	vdiv.f32	s15, s21, s27
 8018a44:	ee6c caa7 	vmul.f32	s25, s25, s15
 8018a48:	ee2c ca27 	vmul.f32	s24, s24, s15
 8018a4c:	ee2d da27 	vmul.f32	s26, s26, s15
 8018a50:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8018a54:	edc7 ca00 	vstr	s25, [r7]
 8018a58:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8018a5c:	ed87 ca01 	vstr	s24, [r7, #4]
 8018a60:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8018a64:	ed87 da02 	vstr	s26, [r7, #8]
 8018a68:	ee17 0a90 	vmov	r0, s15
 8018a6c:	f7e7 fd64 	bl	8000538 <__aeabi_f2d>
 8018a70:	ec41 0b10 	vmov	d0, r0, r1
 8018a74:	f003 fac8 	bl	801c008 <sqrt>
 8018a78:	ec51 0b10 	vmov	r0, r1, d0
 8018a7c:	f7e8 f8ac 	bl	8000bd8 <__aeabi_d2f>
 8018a80:	ee0a 0a90 	vmov	s21, r0
 8018a84:	f7e7 fd58 	bl	8000538 <__aeabi_f2d>
 8018a88:	a34b      	add	r3, pc, #300	; (adr r3, 8018bb8 <MotionDI_update+0x10f0>)
 8018a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a8e:	f7e8 f81d 	bl	8000acc <__aeabi_dcmplt>
 8018a92:	b948      	cbnz	r0, 8018aa8 <MotionDI_update+0xfe0>
 8018a94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018a98:	eec7 7a2a 	vdiv.f32	s15, s14, s21
 8018a9c:	ee2a aa27 	vmul.f32	s20, s20, s15
 8018aa0:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8018aa4:	ee6b baa7 	vmul.f32	s23, s23, s15
 8018aa8:	ed88 aa00 	vstr	s20, [r8]
 8018aac:	edc8 9a01 	vstr	s19, [r8, #4]
 8018ab0:	edc8 ba02 	vstr	s23, [r8, #8]
 8018ab4:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8018ab8:	2a00      	cmp	r2, #0
 8018aba:	f000 81b8 	beq.w	8018e2e <MotionDI_update+0x1366>
 8018abe:	ee07 2a90 	vmov	s15, r2
 8018ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ac6:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8018aca:	ee88 8a27 	vdiv.f32	s16, s16, s15
 8018ace:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8018be0 <MotionDI_update+0x1118>
 8018ad2:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 8018ad6:	3301      	adds	r3, #1
 8018ad8:	b2db      	uxtb	r3, r3
 8018ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8018ade:	fb02 3311 	mls	r3, r2, r1, r3
 8018ae2:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
 8018ae6:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 8018aea:	ed9a 7a02 	vldr	s14, [sl, #8]
 8018aee:	ed98 6a0e 	vldr	s12, [r8, #56]	; 0x38
 8018af2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018af6:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 8018afa:	edd8 7a0d 	vldr	s15, [r8, #52]	; 0x34
 8018afe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b02:	ee77 8a28 	vadd.f32	s17, s14, s17
 8018b06:	ee37 8a88 	vadd.f32	s16, s15, s16
 8018b0a:	edc8 6a0e 	vstr	s13, [r8, #56]	; 0x38
 8018b0e:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 8018b12:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 8018b16:	2a00      	cmp	r2, #0
 8018b18:	f040 8587 	bne.w	801962a <MotionDI_update+0x1b62>
 8018b1c:	4a2d      	ldr	r2, [pc, #180]	; (8018bd4 <MotionDI_update+0x110c>)
 8018b1e:	9220      	str	r2, [sp, #128]	; 0x80
 8018b20:	f102 0318 	add.w	r3, r2, #24
 8018b24:	9301      	str	r3, [sp, #4]
 8018b26:	4611      	mov	r1, r2
 8018b28:	f1a2 0360 	sub.w	r3, r2, #96	; 0x60
 8018b2c:	9300      	str	r3, [sp, #0]
 8018b2e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018b30:	f1a2 0310 	sub.w	r3, r2, #16
 8018b34:	3940      	subs	r1, #64	; 0x40
 8018b36:	3a20      	subs	r2, #32
 8018b38:	f7f8 fdf8 	bl	801172c <SpacePointGyroPropRedist>
 8018b3c:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 8018b40:	2b01      	cmp	r3, #1
 8018b42:	f001 8027 	beq.w	8019b94 <MotionDI_update+0x20cc>
 8018b46:	4b24      	ldr	r3, [pc, #144]	; (8018bd8 <MotionDI_update+0x1110>)
 8018b48:	f894 c162 	ldrb.w	ip, [r4, #354]	; 0x162
 8018b4c:	f8cd c004 	str.w	ip, [sp, #4]
 8018b50:	f103 020c 	add.w	r2, r3, #12
 8018b54:	9200      	str	r2, [sp, #0]
 8018b56:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 8018b5a:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 8018b5e:	4639      	mov	r1, r7
 8018b60:	f7f9 f844 	bl	8011bec <output_update>
 8018b64:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
 8018b68:	2300      	movs	r3, #0
 8018b6a:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
 8018b6e:	0793      	lsls	r3, r2, #30
 8018b70:	d40a      	bmi.n	8018b88 <MotionDI_update+0x10c0>
 8018b72:	f894 1144 	ldrb.w	r1, [r4, #324]	; 0x144
 8018b76:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018b78:	fbb1 f3f0 	udiv	r3, r1, r0
 8018b7c:	fb00 1613 	mls	r6, r0, r3, r1
 8018b80:	f016 0fff 	tst.w	r6, #255	; 0xff
 8018b84:	f000 8687 	beq.w	8019896 <MotionDI_update+0x1dce>
 8018b88:	4a14      	ldr	r2, [pc, #80]	; (8018bdc <MotionDI_update+0x1114>)
 8018b8a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018b8c:	4611      	mov	r1, r2
 8018b8e:	f7f7 ffe5 	bl	8010b5c <m_qmult_eml>
 8018b92:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 8018b96:	2b01      	cmp	r3, #1
 8018b98:	f47f a8fd 	bne.w	8017d96 <MotionDI_update+0x2ce>
 8018b9c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018b9e:	edd1 7a08 	vldr	s15, [r1, #32]
 8018ba2:	698a      	ldr	r2, [r1, #24]
 8018ba4:	69cb      	ldr	r3, [r1, #28]
 8018ba6:	618b      	str	r3, [r1, #24]
 8018ba8:	eef1 7a67 	vneg.f32	s15, s15
 8018bac:	61ca      	str	r2, [r1, #28]
 8018bae:	edc1 7a08 	vstr	s15, [r1, #32]
 8018bb2:	f7ff b8f0 	b.w	8017d96 <MotionDI_update+0x2ce>
 8018bb6:	bf00      	nop
 8018bb8:	a0b5ed8d 	.word	0xa0b5ed8d
 8018bbc:	3eb0c6f7 	.word	0x3eb0c6f7
 8018bc0:	3c23d70a 	.word	0x3c23d70a
 8018bc4:	200014b0 	.word	0x200014b0
 8018bc8:	20001850 	.word	0x20001850
 8018bcc:	20001838 	.word	0x20001838
 8018bd0:	200010f8 	.word	0x200010f8
 8018bd4:	20001924 	.word	0x20001924
 8018bd8:	200019b8 	.word	0x200019b8
 8018bdc:	200018d4 	.word	0x200018d4
 8018be0:	2000182c 	.word	0x2000182c
 8018be4:	ad46      	add	r5, sp, #280	; 0x118
 8018be6:	951d      	str	r5, [sp, #116]	; 0x74
 8018be8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8018bea:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8018bee:	9218      	str	r2, [sp, #96]	; 0x60
 8018bf0:	af36      	add	r7, sp, #216	; 0xd8
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	4632      	mov	r2, r6
 8018bf6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8018bfa:	4638      	mov	r0, r7
 8018bfc:	f5a8 712c 	sub.w	r1, r8, #688	; 0x2b0
 8018c00:	ae3f      	add	r6, sp, #252	; 0xfc
 8018c02:	602b      	str	r3, [r5, #0]
 8018c04:	606b      	str	r3, [r5, #4]
 8018c06:	60ab      	str	r3, [r5, #8]
 8018c08:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8018c0c:	933f      	str	r3, [sp, #252]	; 0xfc
 8018c0e:	9340      	str	r3, [sp, #256]	; 0x100
 8018c10:	9341      	str	r3, [sp, #260]	; 0x104
 8018c12:	edc5 9a03 	vstr	s19, [r5, #12]
 8018c16:	961f      	str	r6, [sp, #124]	; 0x7c
 8018c18:	edcd 9a42 	vstr	s19, [sp, #264]	; 0x108
 8018c1c:	f7f7 fd96 	bl	801074c <rotVect>
 8018c20:	f1a8 02ec 	sub.w	r2, r8, #236	; 0xec
 8018c24:	f5a2 71d6 	sub.w	r1, r2, #428	; 0x1ac
 8018c28:	4650      	mov	r0, sl
 8018c2a:	f502 753b 	add.w	r5, r2, #748	; 0x2ec
 8018c2e:	f7f7 fd8d 	bl	801074c <rotVect>
 8018c32:	a83c      	add	r0, sp, #240	; 0xf0
 8018c34:	3a18      	subs	r2, #24
 8018c36:	f2a5 41a4 	subw	r1, r5, #1188	; 0x4a4
 8018c3a:	f7f7 fd87 	bl	801074c <rotVect>
 8018c3e:	4b82      	ldr	r3, [pc, #520]	; (8018e48 <MotionDI_update+0x1380>)
 8018c40:	edd7 7a00 	vldr	s15, [r7]
 8018c44:	edd7 5a01 	vldr	s11, [r7, #4]
 8018c48:	edda ba00 	vldr	s23, [sl]
 8018c4c:	ed9a 7a01 	vldr	s14, [sl, #4]
 8018c50:	ed9d ba3e 	vldr	s22, [sp, #248]	; 0xf8
 8018c54:	ed9d 8a3c 	vldr	s16, [sp, #240]	; 0xf0
 8018c58:	eddd 8a3d 	vldr	s17, [sp, #244]	; 0xf4
 8018c5c:	f893 38e0 	ldrb.w	r3, [r3, #2272]	; 0x8e0
 8018c60:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 8018c64:	eeb1 aa67 	vneg.f32	s20, s15
 8018c68:	eef1 aa65 	vneg.f32	s21, s11
 8018c6c:	eef1 ba6b 	vneg.f32	s23, s23
 8018c70:	eeb1 ca47 	vneg.f32	s24, s14
 8018c74:	eeb1 da4b 	vneg.f32	s26, s22
 8018c78:	ed87 aa01 	vstr	s20, [r7, #4]
 8018c7c:	edc7 aa00 	vstr	s21, [r7]
 8018c80:	edca ba01 	vstr	s23, [sl, #4]
 8018c84:	ed8a ca00 	vstr	s24, [sl]
 8018c88:	ed8d da3e 	vstr	s26, [sp, #248]	; 0xf8
 8018c8c:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d045      	beq.n	8018d20 <MotionDI_update+0x1258>
 8018c94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018c98:	edd7 ca02 	vldr	s25, [r7, #8]
 8018c9c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8018ca0:	eeec 7aac 	vfma.f32	s15, s25, s25
 8018ca4:	ee17 0a90 	vmov	r0, s15
 8018ca8:	f7e7 fc46 	bl	8000538 <__aeabi_f2d>
 8018cac:	ec41 0b10 	vmov	d0, r0, r1
 8018cb0:	f003 f9aa 	bl	801c008 <sqrt>
 8018cb4:	ec51 0b10 	vmov	r0, r1, d0
 8018cb8:	f7e7 ff8e 	bl	8000bd8 <__aeabi_d2f>
 8018cbc:	ee07 0a90 	vmov	s15, r0
 8018cc0:	ee89 6aa7 	vdiv.f32	s12, s19, s15
 8018cc4:	ee68 7a08 	vmul.f32	s15, s16, s16
 8018cc8:	ee66 aa2a 	vmul.f32	s21, s12, s21
 8018ccc:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8018cd0:	ee26 aa0a 	vmul.f32	s20, s12, s20
 8018cd4:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8018cd8:	ee26 6a2c 	vmul.f32	s12, s12, s25
 8018cdc:	ee17 0a90 	vmov	r0, s15
 8018ce0:	ed87 6a02 	vstr	s12, [r7, #8]
 8018ce4:	edc7 aa00 	vstr	s21, [r7]
 8018ce8:	ed87 aa01 	vstr	s20, [r7, #4]
 8018cec:	f7e7 fc24 	bl	8000538 <__aeabi_f2d>
 8018cf0:	ec41 0b10 	vmov	d0, r0, r1
 8018cf4:	f003 f988 	bl	801c008 <sqrt>
 8018cf8:	ec51 0b10 	vmov	r0, r1, d0
 8018cfc:	f7e7 ff6c 	bl	8000bd8 <__aeabi_d2f>
 8018d00:	ee07 0a90 	vmov	s15, r0
 8018d04:	eec9 6aa7 	vdiv.f32	s13, s19, s15
 8018d08:	ee66 8aa8 	vmul.f32	s17, s13, s17
 8018d0c:	ee26 8a88 	vmul.f32	s16, s13, s16
 8018d10:	ee66 6a8d 	vmul.f32	s13, s13, s26
 8018d14:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 8018d18:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 8018d1c:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 8018d20:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8018d24:	2a00      	cmp	r2, #0
 8018d26:	f000 8088 	beq.w	8018e3a <MotionDI_update+0x1372>
 8018d2a:	ee07 2a90 	vmov	s15, r2
 8018d2e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018d32:	ee8c ca06 	vdiv.f32	s24, s24, s12
 8018d36:	eecb ba86 	vdiv.f32	s23, s23, s12
 8018d3a:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8018d3e:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 8018d42:	3301      	adds	r3, #1
 8018d44:	b2db      	uxtb	r3, r3
 8018d46:	fbb3 f0f2 	udiv	r0, r3, r2
 8018d4a:	fb02 3310 	mls	r3, r2, r0, r3
 8018d4e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
 8018d52:	ed9a 5a02 	vldr	s10, [sl, #8]
 8018d56:	edd4 5a9f 	vldr	s11, [r4, #636]	; 0x27c
 8018d5a:	ed94 7a9d 	vldr	s14, [r4, #628]	; 0x274
 8018d5e:	edd4 7a9e 	vldr	s15, [r4, #632]	; 0x278
 8018d62:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8018d66:	ee37 7a0c 	vadd.f32	s14, s14, s24
 8018d6a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018d6e:	ee77 7aab 	vadd.f32	s15, s15, s23
 8018d72:	edc4 6a9f 	vstr	s13, [r4, #636]	; 0x27c
 8018d76:	ed84 7a9d 	vstr	s14, [r4, #628]	; 0x274
 8018d7a:	edc4 7a9e 	vstr	s15, [r4, #632]	; 0x278
 8018d7e:	2900      	cmp	r1, #0
 8018d80:	f040 8446 	bne.w	8019610 <MotionDI_update+0x1b48>
 8018d84:	4931      	ldr	r1, [pc, #196]	; (8018e4c <MotionDI_update+0x1384>)
 8018d86:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018d88:	f101 0350 	add.w	r3, r1, #80	; 0x50
 8018d8c:	e9cd 1800 	strd	r1, r8, [sp]
 8018d90:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8018d94:	3120      	adds	r1, #32
 8018d96:	f7f8 fcc9 	bl	801172c <SpacePointGyroPropRedist>
 8018d9a:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8018d9e:	2b01      	cmp	r3, #1
 8018da0:	f000 86eb 	beq.w	8019b7a <MotionDI_update+0x20b2>
 8018da4:	4b2a      	ldr	r3, [pc, #168]	; (8018e50 <MotionDI_update+0x1388>)
 8018da6:	f894 6126 	ldrb.w	r6, [r4, #294]	; 0x126
 8018daa:	9601      	str	r6, [sp, #4]
 8018dac:	f103 020c 	add.w	r2, r3, #12
 8018db0:	9200      	str	r2, [sp, #0]
 8018db2:	4639      	mov	r1, r7
 8018db4:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 8018db8:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 8018dbc:	f7f8 ff16 	bl	8011bec <output_update>
 8018dc0:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	0791      	lsls	r1, r2, #30
 8018dc8:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
 8018dcc:	d40a      	bmi.n	8018de4 <MotionDI_update+0x131c>
 8018dce:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 8018dd2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018dd4:	fbb1 f3f0 	udiv	r3, r1, r0
 8018dd8:	fb00 1313 	mls	r3, r0, r3, r1
 8018ddc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018de0:	f000 860e 	beq.w	8019a00 <MotionDI_update+0x1f38>
 8018de4:	4a1b      	ldr	r2, [pc, #108]	; (8018e54 <MotionDI_update+0x138c>)
 8018de6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018de8:	4611      	mov	r1, r2
 8018dea:	f7f7 feb7 	bl	8010b5c <m_qmult_eml>
 8018dee:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8018df2:	2b01      	cmp	r3, #1
 8018df4:	f47e afcb 	bne.w	8017d8e <MotionDI_update+0x2c6>
 8018df8:	edd4 7ad7 	vldr	s15, [r4, #860]	; 0x35c
 8018dfc:	f8d4 2354 	ldr.w	r2, [r4, #852]	; 0x354
 8018e00:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 8018e04:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 8018e08:	eef1 7a67 	vneg.f32	s15, s15
 8018e0c:	f8c4 2358 	str.w	r2, [r4, #856]	; 0x358
 8018e10:	edc4 7ad7 	vstr	s15, [r4, #860]	; 0x35c
 8018e14:	f7fe bfbb 	b.w	8017d8e <MotionDI_update+0x2c6>
 8018e18:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 8018e1c:	931e      	str	r3, [sp, #120]	; 0x78
 8018e1e:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 8018e22:	931d      	str	r3, [sp, #116]	; 0x74
 8018e24:	f7fe bf25 	b.w	8017c72 <MotionDI_update+0x1aa>
 8018e28:	46be      	mov	lr, r7
 8018e2a:	f7ff b86e 	b.w	8017f0a <MotionDI_update+0x442>
 8018e2e:	2201      	movs	r2, #1
 8018e30:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
 8018e34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018e38:	e649      	b.n	8018ace <MotionDI_update+0x1006>
 8018e3a:	2201      	movs	r2, #1
 8018e3c:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
 8018e40:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018e44:	e779      	b.n	8018d3a <MotionDI_update+0x1272>
 8018e46:	bf00      	nop
 8018e48:	20000000 	.word	0x20000000
 8018e4c:	200016c4 	.word	0x200016c4
 8018e50:	200017b8 	.word	0x200017b8
 8018e54:	200016d4 	.word	0x200016d4
 8018e58:	4ad2      	ldr	r2, [pc, #840]	; (80191a4 <MotionDI_update+0x16dc>)
 8018e5a:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8018e5e:	2300      	movs	r3, #0
 8018e60:	f5a2 7165 	sub.w	r1, r2, #916	; 0x394
 8018e64:	a83c      	add	r0, sp, #240	; 0xf0
 8018e66:	e9ca 3300 	strd	r3, r3, [sl]
 8018e6a:	f8ca 3008 	str.w	r3, [sl, #8]
 8018e6e:	f7f7 fc6d 	bl	801074c <rotVect>
 8018e72:	4acd      	ldr	r2, [pc, #820]	; (80191a8 <MotionDI_update+0x16e0>)
 8018e74:	ab3f      	add	r3, sp, #252	; 0xfc
 8018e76:	4618      	mov	r0, r3
 8018e78:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 8018e7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8018e7e:	f7f7 fc65 	bl	801074c <rotVect>
 8018e82:	4bca      	ldr	r3, [pc, #808]	; (80191ac <MotionDI_update+0x16e4>)
 8018e84:	eddd 7a3c 	vldr	s15, [sp, #240]	; 0xf0
 8018e88:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8018e8c:	ed90 8a00 	vldr	s16, [r0]
 8018e90:	edd0 8a01 	vldr	s17, [r0, #4]
 8018e94:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8018e98:	eef1 9a67 	vneg.f32	s19, s15
 8018e9c:	eeb1 aa47 	vneg.f32	s20, s14
 8018ea0:	eeb1 8a48 	vneg.f32	s16, s16
 8018ea4:	eef1 8a68 	vneg.f32	s17, s17
 8018ea8:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 8018eac:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 8018eb0:	ed80 8a01 	vstr	s16, [r0, #4]
 8018eb4:	edc0 8a00 	vstr	s17, [r0]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	f040 83d6 	bne.w	801966a <MotionDI_update+0x1ba2>
 8018ebe:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 8018ec2:	ed9f babb 	vldr	s22, [pc, #748]	; 80191b0 <MotionDI_update+0x16e8>
 8018ec6:	4dbb      	ldr	r5, [pc, #748]	; (80191b4 <MotionDI_update+0x16ec>)
 8018ec8:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8018ecc:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 80191c8 <MotionDI_update+0x1700>
 8018ed0:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8018ed4:	f8d8 1078 	ldr.w	r1, [r8, #120]	; 0x78
 8018ed8:	f8d8 0080 	ldr.w	r0, [r8, #128]	; 0x80
 8018edc:	f8d8 c084 	ldr.w	ip, [r8, #132]	; 0x84
 8018ee0:	f8c8 1088 	str.w	r1, [r8, #136]	; 0x88
 8018ee4:	ee00 2a10 	vmov	s0, r2
 8018ee8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8018eec:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 8018ef0:	f8c8 208c 	str.w	r2, [r8, #140]	; 0x8c
 8018ef4:	ee20 0a09 	vmul.f32	s0, s0, s18
 8018ef8:	f043 0302 	orr.w	r3, r3, #2
 8018efc:	f083 0301 	eor.w	r3, r3, #1
 8018f00:	4641      	mov	r1, r8
 8018f02:	22f8      	movs	r2, #248	; 0xf8
 8018f04:	f8c8 0090 	str.w	r0, [r8, #144]	; 0x90
 8018f08:	4658      	mov	r0, fp
 8018f0a:	ed8d 0a20 	vstr	s0, [sp, #128]	; 0x80
 8018f0e:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8018f12:	f8c8 c094 	str.w	ip, [r8, #148]	; 0x94
 8018f16:	f002 fa13 	bl	801b340 <memcpy>
 8018f1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018f1c:	f8cb 500c 	str.w	r5, [fp, #12]
 8018f20:	6892      	ldr	r2, [r2, #8]
 8018f22:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
 8018f26:	2300      	movs	r3, #0
 8018f28:	f508 7ef9 	add.w	lr, r8, #498	; 0x1f2
 8018f2c:	f208 1cf1 	addw	ip, r8, #497	; 0x1f1
 8018f30:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8018f32:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 8018f36:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8018f3a:	f108 02c8 	add.w	r2, r8, #200	; 0xc8
 8018f3e:	f508 71f8 	add.w	r1, r8, #496	; 0x1f0
 8018f42:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8018f46:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 8018f4a:	ed8b aa06 	vstr	s20, [fp, #24]
 8018f4e:	edcb 9a07 	vstr	s19, [fp, #28]
 8018f52:	edcb aa08 	vstr	s21, [fp, #32]
 8018f56:	ed8b ba05 	vstr	s22, [fp, #20]
 8018f5a:	edcb 8a09 	vstr	s17, [fp, #36]	; 0x24
 8018f5e:	ed8b 8a0a 	vstr	s16, [fp, #40]	; 0x28
 8018f62:	4f95      	ldr	r7, [pc, #596]	; (80191b8 <MotionDI_update+0x16f0>)
 8018f64:	9510      	str	r5, [sp, #64]	; 0x40
 8018f66:	e9cd ce13 	strd	ip, lr, [sp, #76]	; 0x4c
 8018f6a:	920f      	str	r2, [sp, #60]	; 0x3c
 8018f6c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8018f70:	9112      	str	r1, [sp, #72]	; 0x48
 8018f72:	f8cb 3010 	str.w	r3, [fp, #16]
 8018f76:	ab46      	add	r3, sp, #280	; 0x118
 8018f78:	9715      	str	r7, [sp, #84]	; 0x54
 8018f7a:	930e      	str	r3, [sp, #56]	; 0x38
 8018f7c:	f7e7 fadc 	bl	8000538 <__aeabi_f2d>
 8018f80:	edd4 3a56 	vldr	s7, [r4, #344]	; 0x158
 8018f84:	ed94 3a55 	vldr	s6, [r4, #340]	; 0x154
 8018f88:	edd4 2a54 	vldr	s5, [r4, #336]	; 0x150
 8018f8c:	edcd 3a1f 	vstr	s7, [sp, #124]	; 0x7c
 8018f90:	4602      	mov	r2, r0
 8018f92:	460b      	mov	r3, r1
 8018f94:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
 8018f98:	ed8d 3a1a 	vstr	s6, [sp, #104]	; 0x68
 8018f9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018fa0:	edcd 2a17 	vstr	s5, [sp, #92]	; 0x5c
 8018fa4:	f7e7 faa6 	bl	80004f4 <__aeabi_ui2d>
 8018fa8:	460b      	mov	r3, r1
 8018faa:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8018fae:	9108      	str	r1, [sp, #32]
 8018fb0:	f894 113f 	ldrb.w	r1, [r4, #319]	; 0x13f
 8018fb4:	9107      	str	r1, [sp, #28]
 8018fb6:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
 8018fba:	9106      	str	r1, [sp, #24]
 8018fbc:	f894 113d 	ldrb.w	r1, [r4, #317]	; 0x13d
 8018fc0:	9105      	str	r1, [sp, #20]
 8018fc2:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 8018fc6:	9104      	str	r1, [sp, #16]
 8018fc8:	4602      	mov	r2, r0
 8018fca:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 8018fce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018fd2:	f7e7 fab1 	bl	8000538 <__aeabi_f2d>
 8018fd6:	ed94 2a4d 	vldr	s4, [r4, #308]	; 0x134
 8018fda:	edd4 1a4c 	vldr	s3, [r4, #304]	; 0x130
 8018fde:	ed9d 3a1a 	vldr	s6, [sp, #104]	; 0x68
 8018fe2:	eddd 2a17 	vldr	s5, [sp, #92]	; 0x5c
 8018fe6:	ed9d 0a20 	vldr	s0, [sp, #128]	; 0x80
 8018fea:	eddd 3a1f 	vldr	s7, [sp, #124]	; 0x7c
 8018fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ff2:	ad90      	add	r5, sp, #576	; 0x240
 8018ff4:	f50d 7c1c 	add.w	ip, sp, #624	; 0x270
 8018ff8:	a984      	add	r1, sp, #528	; 0x210
 8018ffa:	ed94 1a4b 	vldr	s2, [r4, #300]	; 0x12c
 8018ffe:	edd4 0a4a 	vldr	s1, [r4, #296]	; 0x128
 8019002:	9517      	str	r5, [sp, #92]	; 0x5c
 8019004:	e9cd 5c00 	strd	r5, ip, [sp]
 8019008:	ab8d      	add	r3, sp, #564	; 0x234
 801900a:	aa87      	add	r2, sp, #540	; 0x21c
 801900c:	a8a3      	add	r0, sp, #652	; 0x28c
 801900e:	911a      	str	r1, [sp, #104]	; 0x68
 8019010:	f7fd fed0 	bl	8016db4 <SpacePointAlgorithm.isra.0>
 8019014:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
 8019018:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801901c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8019020:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8019024:	f8c8 01f4 	str.w	r0, [r8, #500]	; 0x1f4
 8019028:	f108 05f8 	add.w	r5, r8, #248	; 0xf8
 801902c:	2b01      	cmp	r3, #1
 801902e:	f8c8 11f8 	str.w	r1, [r8, #504]	; 0x1f8
 8019032:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
 8019036:	9f46      	ldr	r7, [sp, #280]	; 0x118
 8019038:	9847      	ldr	r0, [sp, #284]	; 0x11c
 801903a:	9948      	ldr	r1, [sp, #288]	; 0x120
 801903c:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801903e:	9520      	str	r5, [sp, #128]	; 0x80
 8019040:	d115      	bne.n	801906e <MotionDI_update+0x15a6>
 8019042:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
 8019046:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 801904a:	4a58      	ldr	r2, [pc, #352]	; (80191ac <MotionDI_update+0x16e4>)
 801904c:	f8c8 7078 	str.w	r7, [r8, #120]	; 0x78
 8019050:	2300      	movs	r3, #0
 8019052:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8019056:	f8c8 1080 	str.w	r1, [r8, #128]	; 0x80
 801905a:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
 801905e:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 8019062:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 8019066:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
 801906a:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
 801906e:	eddf 7a53 	vldr	s15, [pc, #332]	; 80191bc <MotionDI_update+0x16f4>
 8019072:	ed9a 6a00 	vldr	s12, [sl]
 8019076:	edda 6a01 	vldr	s13, [sl, #4]
 801907a:	ed9a 7a02 	vldr	s14, [sl, #8]
 801907e:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
 8019082:	ee26 5a27 	vmul.f32	s10, s12, s15
 8019086:	ee66 5aa7 	vmul.f32	s11, s13, s15
 801908a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801908e:	ed88 5a1b 	vstr	s10, [r8, #108]	; 0x6c
 8019092:	edc8 5a1c 	vstr	s11, [r8, #112]	; 0x70
 8019096:	edc8 7a1d 	vstr	s15, [r8, #116]	; 0x74
 801909a:	2b00      	cmp	r3, #0
 801909c:	f000 82db 	beq.w	8019656 <MotionDI_update+0x1b8e>
 80190a0:	f894 36ec 	ldrb.w	r3, [r4, #1772]	; 0x6ec
 80190a4:	2b09      	cmp	r3, #9
 80190a6:	f200 83e0 	bhi.w	801986a <MotionDI_update+0x1da2>
 80190aa:	3301      	adds	r3, #1
 80190ac:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 80190b0:	e2d3      	b.n	801965a <MotionDI_update+0x1b92>
 80190b2:	f8d4 2650 	ldr.w	r2, [r4, #1616]	; 0x650
 80190b6:	f8d4 e6dc 	ldr.w	lr, [r4, #1756]	; 0x6dc
 80190ba:	921d      	str	r2, [sp, #116]	; 0x74
 80190bc:	2a00      	cmp	r2, #0
 80190be:	f040 837d 	bne.w	80197bc <MotionDI_update+0x1cf4>
 80190c2:	f10e 0c01 	add.w	ip, lr, #1
 80190c6:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 80190ca:	921e      	str	r2, [sp, #120]	; 0x78
 80190cc:	2a00      	cmp	r2, #0
 80190ce:	f000 8544 	beq.w	8019b5a <MotionDI_update+0x2092>
 80190d2:	ee07 ca90 	vmov	s15, ip
 80190d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80190de:	eec7 5a27 	vdiv.f32	s11, s14, s15
 80190e2:	4f37      	ldr	r7, [pc, #220]	; (80191c0 <MotionDI_update+0x16f8>)
 80190e4:	4a37      	ldr	r2, [pc, #220]	; (80191c4 <MotionDI_update+0x16fc>)
 80190e6:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 80190ea:	463d      	mov	r5, r7
 80190ec:	4611      	mov	r1, r2
 80190ee:	4610      	mov	r0, r2
 80190f0:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 80190f4:	f101 0104 	add.w	r1, r1, #4
 80190f8:	f100 0008 	add.w	r0, r0, #8
 80190fc:	ecb5 7a01 	vldmia	r5!, {s14}
 8019100:	ed92 4a00 	vldr	s8, [r2]
 8019104:	edd1 4a00 	vldr	s9, [r1]
 8019108:	ed90 5a00 	vldr	s10, [r0]
 801910c:	ed95 6a00 	vldr	s12, [r5]
 8019110:	edd7 6a02 	vldr	s13, [r7, #8]
 8019114:	ee07 ea90 	vmov	s15, lr
 8019118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801911c:	eea7 7a84 	vfma.f32	s14, s15, s8
 8019120:	eea7 6aa4 	vfma.f32	s12, s15, s9
 8019124:	eee7 6a85 	vfma.f32	s13, s15, s10
 8019128:	ee26 6a25 	vmul.f32	s12, s12, s11
 801912c:	ee67 7a25 	vmul.f32	s15, s14, s11
 8019130:	ee26 7aa5 	vmul.f32	s14, s13, s11
 8019134:	ed81 6a00 	vstr	s12, [r1]
 8019138:	edc2 7a00 	vstr	s15, [r2]
 801913c:	ed80 7a00 	vstr	s14, [r0]
 8019140:	f47e ad92 	bne.w	8017c68 <MotionDI_update+0x1a0>
 8019144:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019146:	b16b      	cbz	r3, 8019164 <MotionDI_update+0x169c>
 8019148:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801914c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8019150:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019154:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019158:	ed84 6a46 	vstr	s12, [r4, #280]	; 0x118
 801915c:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 8019160:	edc4 7a45 	vstr	s15, [r4, #276]	; 0x114
 8019164:	edd1 6a00 	vldr	s13, [r1]
 8019168:	ed90 7a00 	vldr	s14, [r0]
 801916c:	edd2 7a00 	vldr	s15, [r2]
 8019170:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019174:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019178:	ee27 7a06 	vmul.f32	s14, s14, s12
 801917c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019180:	edc4 6a55 	vstr	s13, [r4, #340]	; 0x154
 8019184:	ed84 7a56 	vstr	s14, [r4, #344]	; 0x158
 8019188:	edc4 7a54 	vstr	s15, [r4, #336]	; 0x150
 801918c:	2300      	movs	r3, #0
 801918e:	2500      	movs	r5, #0
 8019190:	6013      	str	r3, [r2, #0]
 8019192:	600b      	str	r3, [r1, #0]
 8019194:	6003      	str	r3, [r0, #0]
 8019196:	f8c4 56dc 	str.w	r5, [r4, #1756]	; 0x6dc
 801919a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801919c:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
 80191a0:	f7fe bd5f 	b.w	8017c62 <MotionDI_update+0x19a>
 80191a4:	20001844 	.word	0x20001844
 80191a8:	20001850 	.word	0x20001850
 80191ac:	200010f8 	.word	0x200010f8
 80191b0:	bf333333 	.word	0xbf333333
 80191b4:	3f333333 	.word	0x3f333333
 80191b8:	200008e8 	.word	0x200008e8
 80191bc:	42652ee1 	.word	0x42652ee1
 80191c0:	20000cec 	.word	0x20000cec
 80191c4:	20001ac8 	.word	0x20001ac8
 80191c8:	2000182c 	.word	0x2000182c
 80191cc:	2300      	movs	r3, #0
 80191ce:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 80191d2:	f2c0 8328 	blt.w	8019826 <MotionDI_update+0x1d5e>
 80191d6:	f04f 0a00 	mov.w	sl, #0
 80191da:	4e5f      	ldr	r6, [pc, #380]	; (8019358 <MotionDI_update+0x1890>)
 80191dc:	f8a4 a088 	strh.w	sl, [r4, #136]	; 0x88
 80191e0:	f1a6 0c1c 	sub.w	ip, r6, #28
 80191e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80191e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80191ea:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80191ee:	f1a6 0e64 	sub.w	lr, r6, #100	; 0x64
 80191f2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80191f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80191fa:	f1a6 0c48 	sub.w	ip, r6, #72	; 0x48
 80191fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019202:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8019206:	2300      	movs	r3, #0
 8019208:	f04f 0e00 	mov.w	lr, #0
 801920c:	f1ba 0f01 	cmp.w	sl, #1
 8019210:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8019214:	bf98      	it	ls
 8019216:	f206 660c 	addwls	r6, r6, #1548	; 0x60c
 801921a:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 801921e:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
 8019222:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8019226:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
 801922a:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
 801922e:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
 8019232:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
 8019236:	8323      	strh	r3, [r4, #24]
 8019238:	f8c4 e01c 	str.w	lr, [r4, #28]
 801923c:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 8019240:	f8c4 e020 	str.w	lr, [r4, #32]
 8019244:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 8019248:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
 801924c:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8019250:	f67e ac6b 	bls.w	8017b2a <MotionDI_update+0x62>
 8019254:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
 8019258:	ed94 9a0e 	vldr	s18, [r4, #56]	; 0x38
 801925c:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8019260:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 8019264:	2b00      	cmp	r3, #0
 8019266:	f000 84cb 	beq.w	8019c00 <MotionDI_update+0x2138>
 801926a:	ee71 1a88 	vadd.f32	s3, s3, s16
 801926e:	ee72 2a89 	vadd.f32	s5, s5, s18
 8019272:	ee32 2a28 	vadd.f32	s4, s4, s17
 8019276:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801927a:	ee22 9a88 	vmul.f32	s18, s5, s16
 801927e:	ee62 8a08 	vmul.f32	s17, s4, s16
 8019282:	ee21 8a88 	vmul.f32	s16, s3, s16
 8019286:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 801928a:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 801928e:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 8019292:	4e32      	ldr	r6, [pc, #200]	; (801935c <MotionDI_update+0x1894>)
 8019294:	2224      	movs	r2, #36	; 0x24
 8019296:	f106 0010 	add.w	r0, r6, #16
 801929a:	2100      	movs	r1, #0
 801929c:	f002 f85e 	bl	801b35c <memset>
 80192a0:	f894 26c8 	ldrb.w	r2, [r4, #1736]	; 0x6c8
 80192a4:	ed86 9a00 	vstr	s18, [r6]
 80192a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80192ac:	2a01      	cmp	r2, #1
 80192ae:	edc6 8a01 	vstr	s17, [r6, #4]
 80192b2:	ed86 8a02 	vstr	s16, [r6, #8]
 80192b6:	60f3      	str	r3, [r6, #12]
 80192b8:	61f3      	str	r3, [r6, #28]
 80192ba:	62f3      	str	r3, [r6, #44]	; 0x2c
 80192bc:	f240 81c3 	bls.w	8019646 <MotionDI_update+0x1b7e>
 80192c0:	2303      	movs	r3, #3
 80192c2:	f1b8 0f01 	cmp.w	r8, #1
 80192c6:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 80192ca:	bf04      	itt	eq
 80192cc:	2300      	moveq	r3, #0
 80192ce:	f884 3180 	strbeq.w	r3, [r4, #384]	; 0x180
 80192d2:	f7fe bc2a 	b.w	8017b2a <MotionDI_update+0x62>
 80192d6:	4288      	cmp	r0, r1
 80192d8:	f43e ae68 	beq.w	8017fac <MotionDI_update+0x4e4>
 80192dc:	7d33      	ldrb	r3, [r6, #20]
 80192de:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 80192e2:	aa58      	add	r2, sp, #352	; 0x160
 80192e4:	9218      	str	r2, [sp, #96]	; 0x60
 80192e6:	aa33      	add	r2, sp, #204	; 0xcc
 80192e8:	921e      	str	r2, [sp, #120]	; 0x78
 80192ea:	aa65      	add	r2, sp, #404	; 0x194
 80192ec:	921c      	str	r2, [sp, #112]	; 0x70
 80192ee:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 80192f2:	edd6 6a07 	vldr	s13, [r6, #28]
 80192f6:	ed96 7a08 	vldr	s14, [r6, #32]
 80192fa:	edd6 7a06 	vldr	s15, [r6, #24]
 80192fe:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8019300:	f8ca 2000 	str.w	r2, [sl]
 8019304:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8019308:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801930a:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 801930e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019316:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8019318:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 801931a:	edc2 6a01 	vstr	s13, [r2, #4]
 801931e:	ed82 7a02 	vstr	s14, [r2, #8]
 8019322:	edc2 7a00 	vstr	s15, [r2]
 8019326:	f8ca 3004 	str.w	r3, [sl, #4]
 801932a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 801932c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801932e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8019330:	f8ca 1008 	str.w	r1, [sl, #8]
 8019334:	f8ca 200c 	str.w	r2, [sl, #12]
 8019338:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 801933a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801933c:	f8ca 3010 	str.w	r3, [sl, #16]
 8019340:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8019342:	4f07      	ldr	r7, [pc, #28]	; (8019360 <MotionDI_update+0x1898>)
 8019344:	f8ca 0014 	str.w	r0, [sl, #20]
 8019348:	f8ca 1018 	str.w	r1, [sl, #24]
 801934c:	f8ca 201c 	str.w	r2, [sl, #28]
 8019350:	f8ca 3020 	str.w	r3, [sl, #32]
 8019354:	f7fe bbde 	b.w	8017b14 <MotionDI_update+0x4c>
 8019358:	20001454 	.word	0x20001454
 801935c:	20001a70 	.word	0x20001a70
 8019360:	20001a3c 	.word	0x20001a3c
 8019364:	4ad6      	ldr	r2, [pc, #856]	; (80196c0 <MotionDI_update+0x1bf8>)
 8019366:	4dd7      	ldr	r5, [pc, #860]	; (80196c4 <MotionDI_update+0x1bfc>)
 8019368:	af36      	add	r7, sp, #216	; 0xd8
 801936a:	2300      	movs	r3, #0
 801936c:	f5a2 71dc 	sub.w	r1, r2, #440	; 0x1b8
 8019370:	a839      	add	r0, sp, #228	; 0xe4
 8019372:	e9c7 3300 	strd	r3, r3, [r7]
 8019376:	60bb      	str	r3, [r7, #8]
 8019378:	f7f7 f9e8 	bl	801074c <rotVect>
 801937c:	4ad2      	ldr	r2, [pc, #840]	; (80196c8 <MotionDI_update+0x1c00>)
 801937e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8019382:	f5a2 71d6 	sub.w	r1, r2, #428	; 0x1ac
 8019386:	4640      	mov	r0, r8
 8019388:	f7f7 f9e0 	bl	801074c <rotVect>
 801938c:	4acf      	ldr	r2, [pc, #828]	; (80196cc <MotionDI_update+0x1c04>)
 801938e:	a83f      	add	r0, sp, #252	; 0xfc
 8019390:	f5a2 71d0 	sub.w	r1, r2, #416	; 0x1a0
 8019394:	f7f7 f9da 	bl	801074c <rotVect>
 8019398:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 801939c:	ed9d 7a3a 	vldr	s14, [sp, #232]	; 0xe8
 80193a0:	edd8 9a00 	vldr	s19, [r8]
 80193a4:	ed98 aa01 	vldr	s20, [r8, #4]
 80193a8:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 80193ac:	ed9d 8a3f 	vldr	s16, [sp, #252]	; 0xfc
 80193b0:	eddd 8a40 	vldr	s17, [sp, #256]	; 0x100
 80193b4:	f895 38e0 	ldrb.w	r3, [r5, #2272]	; 0x8e0
 80193b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80193ba:	eeb1 ca67 	vneg.f32	s24, s15
 80193be:	eef1 ca47 	vneg.f32	s25, s14
 80193c2:	eef1 9a69 	vneg.f32	s19, s19
 80193c6:	eeb1 aa4a 	vneg.f32	s20, s20
 80193ca:	eef1 ba4b 	vneg.f32	s23, s22
 80193ce:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 80193d2:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 80193d6:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 80193da:	edc8 9a01 	vstr	s19, [r8, #4]
 80193de:	ed88 aa00 	vstr	s20, [r8]
 80193e2:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 80193e6:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	f040 819d 	bne.w	801972a <MotionDI_update+0x1c62>
 80193f0:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 80193f4:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 80193f8:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 80193fc:	49b4      	ldr	r1, [pc, #720]	; (80196d0 <MotionDI_update+0x1c08>)
 80193fe:	edd4 7ab0 	vldr	s15, [r4, #704]	; 0x2c0
 8019402:	f8d4 e2c4 	ldr.w	lr, [r4, #708]	; 0x2c4
 8019406:	f8d4 c2c8 	ldr.w	ip, [r4, #712]	; 0x2c8
 801940a:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 801940e:	ee00 2a10 	vmov	s0, r2
 8019412:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8019416:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 801941a:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
 801941e:	ee20 0a09 	vmul.f32	s0, s0, s18
 8019422:	f043 0302 	orr.w	r3, r3, #2
 8019426:	f501 7af9 	add.w	sl, r1, #498	; 0x1f2
 801942a:	f083 0301 	eor.w	r3, r3, #1
 801942e:	22f8      	movs	r2, #248	; 0xf8
 8019430:	4658      	mov	r0, fp
 8019432:	ed8d 0a26 	vstr	s0, [sp, #152]	; 0x98
 8019436:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 801943a:	f8c4 e2d4 	str.w	lr, [r4, #724]	; 0x2d4
 801943e:	f8c4 c2d8 	str.w	ip, [r4, #728]	; 0x2d8
 8019442:	f001 ff7d 	bl	801b340 <memcpy>
 8019446:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801944a:	f8d5 c0c4 	ldr.w	ip, [r5, #196]	; 0xc4
 801944e:	f8d5 80c0 	ldr.w	r8, [r5, #192]	; 0xc0
 8019452:	edd5 7a2f 	vldr	s15, [r5, #188]	; 0xbc
 8019456:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
 801945a:	f10a 3eff 	add.w	lr, sl, #4294967295
 801945e:	edcb ca06 	vstr	s25, [fp, #24]
 8019462:	ed8b ca07 	vstr	s24, [fp, #28]
 8019466:	edcb aa08 	vstr	s21, [fp, #32]
 801946a:	edcb 8a03 	vstr	s17, [fp, #12]
 801946e:	ed8b 8a04 	vstr	s16, [fp, #16]
 8019472:	edcb ba05 	vstr	s23, [fp, #20]
 8019476:	ed8b aa09 	vstr	s20, [fp, #36]	; 0x24
 801947a:	edcb 9a0a 	vstr	s19, [fp, #40]	; 0x28
 801947e:	e9cd ea13 	strd	lr, sl, [sp, #76]	; 0x4c
 8019482:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019484:	4993      	ldr	r1, [pc, #588]	; (80196d4 <MotionDI_update+0x1c0c>)
 8019486:	9210      	str	r2, [sp, #64]	; 0x40
 8019488:	2300      	movs	r3, #0
 801948a:	f1aa 0002 	sub.w	r0, sl, #2
 801948e:	9012      	str	r0, [sp, #72]	; 0x48
 8019490:	9711      	str	r7, [sp, #68]	; 0x44
 8019492:	f8c4 838c 	str.w	r8, [r4, #908]	; 0x38c
 8019496:	f8c4 c390 	str.w	ip, [r4, #912]	; 0x390
 801949a:	edc4 7ae2 	vstr	s15, [r4, #904]	; 0x388
 801949e:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 80194a2:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
 80194a6:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80194aa:	9115      	str	r1, [sp, #84]	; 0x54
 80194ac:	edd4 3a47 	vldr	s7, [r4, #284]	; 0x11c
 80194b0:	ed94 3a46 	vldr	s6, [r4, #280]	; 0x118
 80194b4:	edd4 2a45 	vldr	s5, [r4, #276]	; 0x114
 80194b8:	edcd 3a25 	vstr	s7, [sp, #148]	; 0x94
 80194bc:	f5aa 7395 	sub.w	r3, sl, #298	; 0x12a
 80194c0:	ed8d 3a24 	vstr	s6, [sp, #144]	; 0x90
 80194c4:	edcd 2a23 	vstr	s5, [sp, #140]	; 0x8c
 80194c8:	ed94 2a3e 	vldr	s4, [r4, #248]	; 0xf8
 80194cc:	edd4 1a3d 	vldr	s3, [r4, #244]	; 0xf4
 80194d0:	ed94 1a3c 	vldr	s2, [r4, #240]	; 0xf0
 80194d4:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 80194d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80194da:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 80194de:	ed8d 2a22 	vstr	s4, [sp, #136]	; 0x88
 80194e2:	f50d 788c 	add.w	r8, sp, #280	; 0x118
 80194e6:	edcd 1a21 	vstr	s3, [sp, #132]	; 0x84
 80194ea:	ed8d 1a20 	vstr	s2, [sp, #128]	; 0x80
 80194ee:	edcd 0a1f 	vstr	s1, [sp, #124]	; 0x7c
 80194f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80194f6:	f7e7 f81f 	bl	8000538 <__aeabi_f2d>
 80194fa:	4602      	mov	r2, r0
 80194fc:	460b      	mov	r3, r1
 80194fe:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
 8019502:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8019506:	f7e6 fff5 	bl	80004f4 <__aeabi_ui2d>
 801950a:	460b      	mov	r3, r1
 801950c:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 8019510:	9108      	str	r1, [sp, #32]
 8019512:	f894 1103 	ldrb.w	r1, [r4, #259]	; 0x103
 8019516:	9107      	str	r1, [sp, #28]
 8019518:	f894 1102 	ldrb.w	r1, [r4, #258]	; 0x102
 801951c:	9106      	str	r1, [sp, #24]
 801951e:	f894 1101 	ldrb.w	r1, [r4, #257]	; 0x101
 8019522:	9105      	str	r1, [sp, #20]
 8019524:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
 8019528:	9104      	str	r1, [sp, #16]
 801952a:	4602      	mov	r2, r0
 801952c:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 8019530:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019534:	f7e7 f800 	bl	8000538 <__aeabi_f2d>
 8019538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801953a:	9300      	str	r3, [sp, #0]
 801953c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019540:	a99c      	add	r1, sp, #624	; 0x270
 8019542:	ab8d      	add	r3, sp, #564	; 0x234
 8019544:	aa87      	add	r2, sp, #540	; 0x21c
 8019546:	a8a3      	add	r0, sp, #652	; 0x28c
 8019548:	9101      	str	r1, [sp, #4]
 801954a:	ed9d 0a26 	vldr	s0, [sp, #152]	; 0x98
 801954e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019550:	eddd 3a25 	vldr	s7, [sp, #148]	; 0x94
 8019554:	ed9d 3a24 	vldr	s6, [sp, #144]	; 0x90
 8019558:	eddd 2a23 	vldr	s5, [sp, #140]	; 0x8c
 801955c:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 8019560:	eddd 1a21 	vldr	s3, [sp, #132]	; 0x84
 8019564:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 8019568:	eddd 0a1f 	vldr	s1, [sp, #124]	; 0x7c
 801956c:	f7fd fc22 	bl	8016db4 <SpacePointAlgorithm.isra.0>
 8019570:	46d4      	mov	ip, sl
 8019572:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
 8019576:	f894 3436 	ldrb.w	r3, [r4, #1078]	; 0x436
 801957a:	f84c 1f02 	str.w	r1, [ip, #2]!
 801957e:	f10a 0106 	add.w	r1, sl, #6
 8019582:	f10a 0a0a 	add.w	sl, sl, #10
 8019586:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
 801958a:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 801958e:	6008      	str	r0, [r1, #0]
 8019590:	2b01      	cmp	r3, #1
 8019592:	f8ca 2000 	str.w	r2, [sl]
 8019596:	f8d8 e000 	ldr.w	lr, [r8]
 801959a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801959e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80195a2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80195a6:	f000 830c 	beq.w	8019bc2 <MotionDI_update+0x20fa>
 80195aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80195ac:	3b01      	subs	r3, #1
 80195ae:	b2db      	uxtb	r3, r3
 80195b0:	2b08      	cmp	r3, #8
 80195b2:	bf98      	it	ls
 80195b4:	f885 38e0 	strbls.w	r3, [r5, #2272]	; 0x8e0
 80195b8:	eddf 7a47 	vldr	s15, [pc, #284]	; 80196d8 <MotionDI_update+0x1c10>
 80195bc:	ed97 6a00 	vldr	s12, [r7]
 80195c0:	edd7 6a01 	vldr	s13, [r7, #4]
 80195c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80195c8:	f894 3435 	ldrb.w	r3, [r4, #1077]	; 0x435
 80195cc:	ee26 5a27 	vmul.f32	s10, s12, s15
 80195d0:	ee66 5aa7 	vmul.f32	s11, s13, s15
 80195d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80195d8:	ed84 5aac 	vstr	s10, [r4, #688]	; 0x2b0
 80195dc:	edc4 5aad 	vstr	s11, [r4, #692]	; 0x2b4
 80195e0:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d07f      	beq.n	80196e8 <MotionDI_update+0x1c20>
 80195e8:	f894 36ed 	ldrb.w	r3, [r4, #1773]	; 0x6ed
 80195ec:	2b09      	cmp	r3, #9
 80195ee:	f200 8144 	bhi.w	801987a <MotionDI_update+0x1db2>
 80195f2:	3301      	adds	r3, #1
 80195f4:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 80195f8:	e078      	b.n	80196ec <MotionDI_update+0x1c24>
 80195fa:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 80195fe:	fb03 f301 	mul.w	r3, r3, r1
 8019602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019606:	bf34      	ite	cc
 8019608:	2300      	movcc	r3, #0
 801960a:	2301      	movcs	r3, #1
 801960c:	f7fe bccb 	b.w	8017fa6 <MotionDI_update+0x4de>
 8019610:	4b32      	ldr	r3, [pc, #200]	; (80196dc <MotionDI_update+0x1c14>)
 8019612:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019614:	9200      	str	r2, [sp, #0]
 8019616:	4651      	mov	r1, sl
 8019618:	f1a3 020c 	sub.w	r2, r3, #12
 801961c:	4618      	mov	r0, r3
 801961e:	eeb0 0a49 	vmov.f32	s0, s18
 8019622:	f7f7 fff3 	bl	801160c <SpacePointGyroProp>
 8019626:	f7ff bbad 	b.w	8018d84 <MotionDI_update+0x12bc>
 801962a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801962c:	9200      	str	r2, [sp, #0]
 801962e:	f108 0378 	add.w	r3, r8, #120	; 0x78
 8019632:	eeb0 0a49 	vmov.f32	s0, s18
 8019636:	4651      	mov	r1, sl
 8019638:	4618      	mov	r0, r3
 801963a:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 801963e:	f7f7 ffe5 	bl	801160c <SpacePointGyroProp>
 8019642:	f7ff ba6b 	b.w	8018b1c <MotionDI_update+0x1054>
 8019646:	3201      	adds	r2, #1
 8019648:	2302      	movs	r3, #2
 801964a:	f884 26c8 	strb.w	r2, [r4, #1736]	; 0x6c8
 801964e:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 8019652:	f7fe ba6a 	b.w	8017b2a <MotionDI_update+0x62>
 8019656:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 801965a:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 801965e:	f083 0302 	eor.w	r3, r3, #2
 8019662:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8019666:	f7fe bb08 	b.w	8017c7a <MotionDI_update+0x1b2>
 801966a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801966e:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 8019672:	ed9f ba1b 	vldr	s22, [pc, #108]	; 80196e0 <MotionDI_update+0x1c18>
 8019676:	4d1b      	ldr	r5, [pc, #108]	; (80196e4 <MotionDI_update+0x1c1c>)
 8019678:	eee7 7a07 	vfma.f32	s15, s14, s14
 801967c:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8019680:	ee17 0a90 	vmov	r0, s15
 8019684:	f7e6 ff58 	bl	8000538 <__aeabi_f2d>
 8019688:	ec41 0b10 	vmov	d0, r0, r1
 801968c:	f002 fcbc 	bl	801c008 <sqrt>
 8019690:	ec51 0b10 	vmov	r0, r1, d0
 8019694:	f7e7 faa0 	bl	8000bd8 <__aeabi_d2f>
 8019698:	ee07 0a90 	vmov	s15, r0
 801969c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80196a0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80196a4:	ee2a aa27 	vmul.f32	s20, s20, s15
 80196a8:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80196ac:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80196b0:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 80196b4:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 80196b8:	edcd aa3e 	vstr	s21, [sp, #248]	; 0xf8
 80196bc:	e404      	b.n	8018ec8 <MotionDI_update+0x1400>
 80196be:	bf00      	nop
 80196c0:	20001644 	.word	0x20001644
 80196c4:	20000000 	.word	0x20000000
 80196c8:	20001650 	.word	0x20001650
 80196cc:	20001638 	.word	0x20001638
 80196d0:	2000162c 	.word	0x2000162c
 80196d4:	20000010 	.word	0x20000010
 80196d8:	42652ee1 	.word	0x42652ee1
 80196dc:	200016a4 	.word	0x200016a4
 80196e0:	bf3504f3 	.word	0xbf3504f3
 80196e4:	3f3504f3 	.word	0x3f3504f3
 80196e8:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 80196ec:	4bc0      	ldr	r3, [pc, #768]	; (80199f0 <MotionDI_update+0x1f28>)
 80196ee:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
 80196f2:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80196f6:	6098      	str	r0, [r3, #8]
 80196f8:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 80196fc:	f843 1b04 	str.w	r1, [r3], #4
 8019700:	f8d5 10c0 	ldr.w	r1, [r5, #192]	; 0xc0
 8019704:	6019      	str	r1, [r3, #0]
 8019706:	f8d5 70a4 	ldr.w	r7, [r5, #164]	; 0xa4
 801970a:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
 801970e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8019712:	f8c4 73e8 	str.w	r7, [r4, #1000]	; 0x3e8
 8019716:	f082 0302 	eor.w	r3, r2, #2
 801971a:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 801971e:	f8c4 03ec 	str.w	r0, [r4, #1004]	; 0x3ec
 8019722:	f8c4 13f0 	str.w	r1, [r4, #1008]	; 0x3f0
 8019726:	f7fe bab1 	b.w	8017c8c <MotionDI_update+0x1c4>
 801972a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801972e:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 8019732:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019736:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 801973a:	eeea 7aaa 	vfma.f32	s15, s21, s21
 801973e:	ee17 0a90 	vmov	r0, s15
 8019742:	f7e6 fef9 	bl	8000538 <__aeabi_f2d>
 8019746:	ec41 0b10 	vmov	d0, r0, r1
 801974a:	f002 fc5d 	bl	801c008 <sqrt>
 801974e:	ec51 0b10 	vmov	r0, r1, d0
 8019752:	f7e7 fa41 	bl	8000bd8 <__aeabi_d2f>
 8019756:	ee07 0a90 	vmov	s15, r0
 801975a:	ee8d 7a27 	vdiv.f32	s14, s26, s15
 801975e:	ee68 7a08 	vmul.f32	s15, s16, s16
 8019762:	ee6c ca87 	vmul.f32	s25, s25, s14
 8019766:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801976a:	ee2c ca07 	vmul.f32	s24, s24, s14
 801976e:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8019772:	ee6a aa87 	vmul.f32	s21, s21, s14
 8019776:	ee17 0a90 	vmov	r0, s15
 801977a:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 801977e:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 8019782:	edcd aa3b 	vstr	s21, [sp, #236]	; 0xec
 8019786:	f7e6 fed7 	bl	8000538 <__aeabi_f2d>
 801978a:	ec41 0b10 	vmov	d0, r0, r1
 801978e:	f002 fc3b 	bl	801c008 <sqrt>
 8019792:	ec51 0b10 	vmov	r0, r1, d0
 8019796:	f7e7 fa1f 	bl	8000bd8 <__aeabi_d2f>
 801979a:	ee07 0a90 	vmov	s15, r0
 801979e:	eecd 7a27 	vdiv.f32	s15, s26, s15
 80197a2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80197a6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80197aa:	ee6b baa7 	vmul.f32	s23, s23, s15
 80197ae:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 80197b2:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 80197b6:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 80197ba:	e61b      	b.n	80193f4 <MotionDI_update+0x192c>
 80197bc:	f10e 0c01 	add.w	ip, lr, #1
 80197c0:	ee07 ca90 	vmov	s15, ip
 80197c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80197c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80197cc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80197d0:	4d88      	ldr	r5, [pc, #544]	; (80199f4 <MotionDI_update+0x1f2c>)
 80197d2:	4628      	mov	r0, r5
 80197d4:	f206 4284 	addw	r2, r6, #1156	; 0x484
 80197d8:	f506 6191 	add.w	r1, r6, #1160	; 0x488
 80197dc:	ecf0 6a01 	vldmia	r0!, {s13}
 80197e0:	ed92 4a00 	vldr	s8, [r2]
 80197e4:	ed90 7a00 	vldr	s14, [r0]
 80197e8:	edd1 4a00 	vldr	s9, [r1]
 80197ec:	edd5 7a02 	vldr	s15, [r5, #8]
 80197f0:	ee05 ea90 	vmov	s11, lr
 80197f4:	f206 408c 	addw	r0, r6, #1164	; 0x48c
 80197f8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80197fc:	ed90 5a00 	vldr	s10, [r0]
 8019800:	eee5 6a84 	vfma.f32	s13, s11, s8
 8019804:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8019808:	eee5 7a85 	vfma.f32	s15, s11, s10
 801980c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019810:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019814:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019818:	edc2 6a00 	vstr	s13, [r2]
 801981c:	ed81 7a00 	vstr	s14, [r1]
 8019820:	edc0 7a00 	vstr	s15, [r0]
 8019824:	e44f      	b.n	80190c6 <MotionDI_update+0x15fe>
 8019826:	3a01      	subs	r2, #1
 8019828:	ee07 2a90 	vmov	s15, r2
 801982c:	ee28 6a06 	vmul.f32	s12, s16, s12
 8019830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019834:	ed94 7a00 	vldr	s14, [r4]
 8019838:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801983c:	eef4 5ac7 	vcmpe.f32	s11, s14
 8019840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019844:	f57f acc7 	bpl.w	80191d6 <MotionDI_update+0x170e>
 8019848:	edd4 7a03 	vldr	s15, [r4, #12]
 801984c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8019850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019854:	f57f acbf 	bpl.w	80191d6 <MotionDI_update+0x170e>
 8019858:	2b00      	cmp	r3, #0
 801985a:	f43f acbc 	beq.w	80191d6 <MotionDI_update+0x170e>
 801985e:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 8019862:	3301      	adds	r3, #1
 8019864:	fa1f fa83 	uxth.w	sl, r3
 8019868:	e4b7      	b.n	80191da <MotionDI_update+0x1712>
 801986a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801986c:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 8019870:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 8019874:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8019878:	e6ef      	b.n	801965a <MotionDI_update+0x1b92>
 801987a:	ed84 6af1 	vstr	s12, [r4, #964]	; 0x3c4
 801987e:	edc4 6af2 	vstr	s13, [r4, #968]	; 0x3c8
 8019882:	ed84 7af3 	vstr	s14, [r4, #972]	; 0x3cc
 8019886:	e731      	b.n	80196ec <MotionDI_update+0x1c24>
 8019888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801988c:	6572      	str	r2, [r6, #84]	; 0x54
 801988e:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 8019892:	f7fe bb9f 	b.w	8017fd4 <MotionDI_update+0x50c>
 8019896:	e9dd 701c 	ldrd	r7, r0, [sp, #112]	; 0x70
 801989a:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 801989e:	f8d8 108c 	ldr.w	r1, [r8, #140]	; 0x8c
 80198a2:	f8c8 3098 	str.w	r3, [r8, #152]	; 0x98
 80198a6:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 80198aa:	f8d8 6094 	ldr.w	r6, [r8, #148]	; 0x94
 80198ae:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 80198b2:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
 80198b6:	4950      	ldr	r1, [pc, #320]	; (80199f8 <MotionDI_update+0x1f30>)
 80198b8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
 80198bc:	f042 0301 	orr.w	r3, r2, #1
 80198c0:	463a      	mov	r2, r7
 80198c2:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 80198c6:	f7f7 f949 	bl	8010b5c <m_qmult_eml>
 80198ca:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80198cc:	494b      	ldr	r1, [pc, #300]	; (80199fc <MotionDI_update+0x1f34>)
 80198ce:	462a      	mov	r2, r5
 80198d0:	f101 0040 	add.w	r0, r1, #64	; 0x40
 80198d4:	f7f7 f942 	bl	8010b5c <m_qmult_eml>
 80198d8:	4629      	mov	r1, r5
 80198da:	4638      	mov	r0, r7
 80198dc:	f7f7 f93e 	bl	8010b5c <m_qmult_eml>
 80198e0:	ed95 9a01 	vldr	s18, [r5, #4]
 80198e4:	edd5 9a00 	vldr	s19, [r5]
 80198e8:	edd5 8a02 	vldr	s17, [r5, #8]
 80198ec:	ed95 8a03 	vldr	s16, [r5, #12]
 80198f0:	ee69 7a09 	vmul.f32	s15, s18, s18
 80198f4:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80198f8:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80198fc:	eee8 7a08 	vfma.f32	s15, s16, s16
 8019900:	ee17 0a90 	vmov	r0, s15
 8019904:	f7e6 fe18 	bl	8000538 <__aeabi_f2d>
 8019908:	ec41 0b10 	vmov	d0, r0, r1
 801990c:	f002 fb7c 	bl	801c008 <sqrt>
 8019910:	ec51 0b10 	vmov	r0, r1, d0
 8019914:	f7e7 f960 	bl	8000bd8 <__aeabi_d2f>
 8019918:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
 801991c:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 8019920:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 8019924:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 8019928:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 801992c:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 8019930:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 8019934:	ee07 3a10 	vmov	s14, r3
 8019938:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801993c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019940:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8019944:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8019948:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 801994c:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 8019950:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 8019954:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 8019958:	ee07 0a10 	vmov	s14, r0
 801995c:	eec5 5a07 	vdiv.f32	s11, s10, s14
 8019960:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019964:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019968:	ee26 7a06 	vmul.f32	s14, s12, s12
 801996c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019970:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8019974:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8019978:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801997c:	ee29 9a25 	vmul.f32	s18, s18, s11
 8019980:	ee68 8aa5 	vmul.f32	s17, s17, s11
 8019984:	ee28 8a25 	vmul.f32	s16, s16, s11
 8019988:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801998c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019990:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 8019994:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 8019998:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 801999c:	edc5 9a00 	vstr	s19, [r5]
 80199a0:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 80199a4:	ed85 9a01 	vstr	s18, [r5, #4]
 80199a8:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 80199ac:	edc5 8a02 	vstr	s17, [r5, #8]
 80199b0:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 80199b4:	ed85 8a03 	vstr	s16, [r5, #12]
 80199b8:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 80199bc:	f100 846a 	bmi.w	801a294 <MotionDI_update+0x27cc>
 80199c0:	2000      	movs	r0, #0
 80199c2:	2300      	movs	r3, #0
 80199c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80199c8:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 80199cc:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 80199d0:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 80199d4:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 80199d8:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 80199dc:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 80199e0:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 80199e4:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 80199e8:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 80199ec:	f7ff b8d1 	b.w	8018b92 <MotionDI_update+0x10ca>
 80199f0:	200017e8 	.word	0x200017e8
 80199f4:	20000414 	.word	0x20000414
 80199f8:	200018d4 	.word	0x200018d4
 80199fc:	200018b4 	.word	0x200018b4
 8019a00:	e9dd 701c 	ldrd	r7, r0, [sp, #112]	; 0x70
 8019a04:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
 8019a08:	f8d4 12d0 	ldr.w	r1, [r4, #720]	; 0x2d0
 8019a0c:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 8019a10:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8019a14:	f8d4 62d8 	ldr.w	r6, [r4, #728]	; 0x2d8
 8019a18:	f8c4 12e0 	str.w	r1, [r4, #736]	; 0x2e0
 8019a1c:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8019a20:	49a2      	ldr	r1, [pc, #648]	; (8019cac <MotionDI_update+0x21e4>)
 8019a22:	f8c4 62e8 	str.w	r6, [r4, #744]	; 0x2e8
 8019a26:	f042 0301 	orr.w	r3, r2, #1
 8019a2a:	463a      	mov	r2, r7
 8019a2c:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8019a30:	f7f7 f894 	bl	8010b5c <m_qmult_eml>
 8019a34:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8019a36:	499e      	ldr	r1, [pc, #632]	; (8019cb0 <MotionDI_update+0x21e8>)
 8019a38:	462a      	mov	r2, r5
 8019a3a:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8019a3e:	f7f7 f88d 	bl	8010b5c <m_qmult_eml>
 8019a42:	4629      	mov	r1, r5
 8019a44:	4638      	mov	r0, r7
 8019a46:	f7f7 f889 	bl	8010b5c <m_qmult_eml>
 8019a4a:	edd5 9a01 	vldr	s19, [r5, #4]
 8019a4e:	ed95 aa00 	vldr	s20, [r5]
 8019a52:	edd5 8a02 	vldr	s17, [r5, #8]
 8019a56:	ed95 8a03 	vldr	s16, [r5, #12]
 8019a5a:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8019a5e:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8019a62:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8019a66:	eee8 7a08 	vfma.f32	s15, s16, s16
 8019a6a:	ee17 0a90 	vmov	r0, s15
 8019a6e:	f7e6 fd63 	bl	8000538 <__aeabi_f2d>
 8019a72:	ec41 0b10 	vmov	d0, r0, r1
 8019a76:	f002 fac7 	bl	801c008 <sqrt>
 8019a7a:	ec51 0b10 	vmov	r0, r1, d0
 8019a7e:	f7e7 f8ab 	bl	8000bd8 <__aeabi_d2f>
 8019a82:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 8019a86:	ed94 6ac4 	vldr	s12, [r4, #784]	; 0x310
 8019a8a:	edd4 6ac3 	vldr	s13, [r4, #780]	; 0x30c
 8019a8e:	edd4 4ac5 	vldr	s9, [r4, #788]	; 0x314
 8019a92:	f8d4 12f0 	ldr.w	r1, [r4, #752]	; 0x2f0
 8019a96:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 8019a9a:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
 8019a9e:	ee07 3a10 	vmov	s14, r3
 8019aa2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019aa6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019aaa:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8019aae:	f8d4 32ec 	ldr.w	r3, [r4, #748]	; 0x2ec
 8019ab2:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
 8019ab6:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
 8019aba:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
 8019abe:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
 8019ac2:	ee07 0a10 	vmov	s14, r0
 8019ac6:	eec5 5a07 	vdiv.f32	s11, s10, s14
 8019aca:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019ace:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019ad2:	ee26 7a06 	vmul.f32	s14, s12, s12
 8019ad6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019ada:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8019ade:	ee25 aa8a 	vmul.f32	s20, s11, s20
 8019ae2:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8019ae6:	ee65 9aa9 	vmul.f32	s19, s11, s19
 8019aea:	ee65 8aa8 	vmul.f32	s17, s11, s17
 8019aee:	ee28 8a25 	vmul.f32	s16, s16, s11
 8019af2:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8019af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019afa:	ed84 6ac8 	vstr	s12, [r4, #800]	; 0x320
 8019afe:	edc4 6ac7 	vstr	s13, [r4, #796]	; 0x31c
 8019b02:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 8019b06:	ed85 aa00 	vstr	s20, [r5]
 8019b0a:	ed84 aaaf 	vstr	s20, [r4, #700]	; 0x2bc
 8019b0e:	edc5 9a01 	vstr	s19, [r5, #4]
 8019b12:	edc4 9ab0 	vstr	s19, [r4, #704]	; 0x2c0
 8019b16:	edc5 8a02 	vstr	s17, [r5, #8]
 8019b1a:	edc4 8ab1 	vstr	s17, [r4, #708]	; 0x2c4
 8019b1e:	ed85 8a03 	vstr	s16, [r5, #12]
 8019b22:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 8019b26:	f100 83c5 	bmi.w	801a2b4 <MotionDI_update+0x27ec>
 8019b2a:	2000      	movs	r0, #0
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019b32:	f8c4 0328 	str.w	r0, [r4, #808]	; 0x328
 8019b36:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
 8019b3a:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 8019b3e:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
 8019b42:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 8019b46:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
 8019b4a:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
 8019b4e:	f8c4 22f8 	str.w	r2, [r4, #760]	; 0x2f8
 8019b52:	f8c4 2338 	str.w	r2, [r4, #824]	; 0x338
 8019b56:	f7ff b94a 	b.w	8018dee <MotionDI_update+0x1326>
 8019b5a:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 8019b5e:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 8019b62:	f47e a886 	bne.w	8017c72 <MotionDI_update+0x1aa>
 8019b66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	f040 84e4 	bne.w	801a536 <MotionDI_update+0x2a6e>
 8019b6e:	4a51      	ldr	r2, [pc, #324]	; (8019cb4 <MotionDI_update+0x21ec>)
 8019b70:	1d11      	adds	r1, r2, #4
 8019b72:	f102 0008 	add.w	r0, r2, #8
 8019b76:	f7ff bb09 	b.w	801918c <MotionDI_update+0x16c4>
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019b80:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 8019b84:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
 8019b88:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
 8019b8c:	f8c4 2360 	str.w	r2, [r4, #864]	; 0x360
 8019b90:	f7ff b908 	b.w	8018da4 <MotionDI_update+0x12dc>
 8019b94:	9920      	ldr	r1, [sp, #128]	; 0x80
 8019b96:	2300      	movs	r3, #0
 8019b98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019b9c:	618b      	str	r3, [r1, #24]
 8019b9e:	61cb      	str	r3, [r1, #28]
 8019ba0:	620b      	str	r3, [r1, #32]
 8019ba2:	624a      	str	r2, [r1, #36]	; 0x24
 8019ba4:	f7fe bfcf 	b.w	8018b46 <MotionDI_update+0x107e>
 8019ba8:	2300      	movs	r3, #0
 8019baa:	6563      	str	r3, [r4, #84]	; 0x54
 8019bac:	6623      	str	r3, [r4, #96]	; 0x60
 8019bae:	65a3      	str	r3, [r4, #88]	; 0x58
 8019bb0:	6663      	str	r3, [r4, #100]	; 0x64
 8019bb2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019bb4:	66a3      	str	r3, [r4, #104]	; 0x68
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	4e3f      	ldr	r6, [pc, #252]	; (8019cb8 <MotionDI_update+0x21f0>)
 8019bba:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8019bbe:	f7fd bfb4 	b.w	8017b2a <MotionDI_update+0x62>
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	f8c4 e2bc 	str.w	lr, [r4, #700]	; 0x2bc
 8019bc8:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
 8019bcc:	f8c4 12c4 	str.w	r1, [r4, #708]	; 0x2c4
 8019bd0:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
 8019bd4:	f8c4 e2cc 	str.w	lr, [r4, #716]	; 0x2cc
 8019bd8:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
 8019bdc:	f8c4 12d4 	str.w	r1, [r4, #724]	; 0x2d4
 8019be0:	f8c4 22d8 	str.w	r2, [r4, #728]	; 0x2d8
 8019be4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
 8019be8:	f885 38e0 	strb.w	r3, [r5, #2272]	; 0x8e0
 8019bec:	e4e4      	b.n	80195b8 <MotionDI_update+0x1af0>
 8019bee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019bf0:	60b2      	str	r2, [r6, #8]
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	60f3      	str	r3, [r6, #12]
 8019bf6:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 8019bfa:	7d33      	ldrb	r3, [r6, #20]
 8019bfc:	f7ff bb71 	b.w	80192e2 <MotionDI_update+0x181a>
 8019c00:	2301      	movs	r3, #1
 8019c02:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 8019c06:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 8019c0a:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 8019c0e:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
 8019c12:	f7ff bb3e 	b.w	8019292 <MotionDI_update+0x17ca>
 8019c16:	2300      	movs	r3, #0
 8019c18:	61e3      	str	r3, [r4, #28]
 8019c1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8019c1c:	6223      	str	r3, [r4, #32]
 8019c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019c20:	6263      	str	r3, [r4, #36]	; 0x24
 8019c22:	6323      	str	r3, [r4, #48]	; 0x30
 8019c24:	2300      	movs	r3, #0
 8019c26:	4e24      	ldr	r6, [pc, #144]	; (8019cb8 <MotionDI_update+0x21f0>)
 8019c28:	8323      	strh	r3, [r4, #24]
 8019c2a:	f7fd bf7e 	b.w	8017b2a <MotionDI_update+0x62>
 8019c2e:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8019c30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019c32:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8019c34:	4698      	mov	r8, r3
 8019c36:	f500 4372 	add.w	r3, r0, #61952	; 0xf200
 8019c3a:	3330      	adds	r3, #48	; 0x30
 8019c3c:	429a      	cmp	r2, r3
 8019c3e:	46ab      	mov	fp, r5
 8019c40:	e9dd 9526 	ldrd	r9, r5, [sp, #152]	; 0x98
 8019c44:	f200 83c7 	bhi.w	801a3d6 <MotionDI_update+0x290e>
 8019c48:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 8019c4c:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 8019c50:	9324      	str	r3, [sp, #144]	; 0x90
 8019c52:	e9cd 021c 	strd	r0, r2, [sp, #112]	; 0x70
 8019c56:	931f      	str	r3, [sp, #124]	; 0x7c
 8019c58:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
 8019c5c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8019c60:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
 8019c64:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019cbc <MotionDI_update+0x21f4>
 8019c68:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8019cc0 <MotionDI_update+0x21f8>
 8019c6c:	eddf 5a15 	vldr	s11, [pc, #84]	; 8019cc4 <MotionDI_update+0x21fc>
 8019c70:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8019c74:	ee1f 2a90 	vmov	r2, s31
 8019c78:	1bc9      	subs	r1, r1, r7
 8019c7a:	1a9b      	subs	r3, r3, r2
 8019c7c:	fb01 f101 	mul.w	r1, r1, r1
 8019c80:	fb03 1103 	mla	r1, r3, r3, r1
 8019c84:	eba0 0308 	sub.w	r3, r0, r8
 8019c88:	fb03 1303 	mla	r3, r3, r3, r1
 8019c8c:	2201      	movs	r2, #1
 8019c8e:	9318      	str	r3, [sp, #96]	; 0x60
 8019c90:	2300      	movs	r3, #0
 8019c92:	e9cd 9526 	strd	r9, r5, [sp, #152]	; 0x98
 8019c96:	ee6b baa7 	vmul.f32	s23, s23, s15
 8019c9a:	ee2c 5a05 	vmul.f32	s10, s24, s10
 8019c9e:	4611      	mov	r1, r2
 8019ca0:	931e      	str	r3, [sp, #120]	; 0x78
 8019ca2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8019ca6:	4684      	mov	ip, r0
 8019ca8:	e016      	b.n	8019cd8 <MotionDI_update+0x2210>
 8019caa:	bf00      	nop
 8019cac:	200016d4 	.word	0x200016d4
 8019cb0:	200016b4 	.word	0x200016b4
 8019cb4:	20001ac8 	.word	0x20001ac8
 8019cb8:	20001a70 	.word	0x20001a70
 8019cbc:	3c23d70a 	.word	0x3c23d70a
 8019cc0:	3e99999a 	.word	0x3e99999a
 8019cc4:	3f6b851f 	.word	0x3f6b851f
 8019cc8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8019ccc:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8019cd0:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 8019cd4:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
 8019cd8:	1c4b      	adds	r3, r1, #1
 8019cda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019cde:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8019ce2:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8019ce6:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 8019cea:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 8019cee:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8019cf2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8019cf6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019cfa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8019cfe:	eba8 0805 	sub.w	r8, r8, r5
 8019d02:	fb08 f808 	mul.w	r8, r8, r8
 8019d06:	1bc0      	subs	r0, r0, r7
 8019d08:	fb00 8000 	mla	r0, r0, r0, r8
 8019d0c:	eba3 030c 	sub.w	r3, r3, ip
 8019d10:	fb03 0303 	mla	r3, r3, r3, r0
 8019d14:	ee07 3a10 	vmov	s14, r3
 8019d18:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8019d1c:	eef4 bae7 	vcmpe.f32	s23, s15
 8019d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d24:	d445      	bmi.n	8019db2 <MotionDI_update+0x22ea>
 8019d26:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8019d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019d2e:	eef4 bae7 	vcmpe.f32	s23, s15
 8019d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d36:	d43c      	bmi.n	8019db2 <MotionDI_update+0x22ea>
 8019d38:	fb05 f905 	mul.w	r9, r5, r5
 8019d3c:	fb07 9907 	mla	r9, r7, r7, r9
 8019d40:	fb0c 990c 	mla	r9, ip, ip, r9
 8019d44:	ee07 9a90 	vmov	s15, r9
 8019d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d4c:	eef1 6ae7 	vsqrt.f32	s13, s15
 8019d50:	ee36 6acc 	vsub.f32	s12, s13, s24
 8019d54:	eeb0 6ac6 	vabs.f32	s12, s12
 8019d58:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8019d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d60:	d427      	bmi.n	8019db2 <MotionDI_update+0x22ea>
 8019d62:	ee76 6acd 	vsub.f32	s13, s13, s26
 8019d66:	eef0 6ae6 	vabs.f32	s13, s13
 8019d6a:	eef4 cae6 	vcmpe.f32	s25, s13
 8019d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d72:	d41e      	bmi.n	8019db2 <MotionDI_update+0x22ea>
 8019d74:	9821      	ldr	r0, [sp, #132]	; 0x84
 8019d76:	2800      	cmp	r0, #0
 8019d78:	f040 82ab 	bne.w	801a2d2 <MotionDI_update+0x280a>
 8019d7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	f040 837c 	bne.w	801a47c <MotionDI_update+0x29b4>
 8019d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019d86:	1a59      	subs	r1, r3, r1
 8019d88:	f101 39ff 	add.w	r9, r1, #4294967295
 8019d8c:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8019d90:	4601      	mov	r1, r0
 8019d92:	9820      	ldr	r0, [sp, #128]	; 0x80
 8019d94:	fb03 0319 	mls	r3, r3, r9, r0
 8019d98:	931c      	str	r3, [sp, #112]	; 0x70
 8019d9a:	2301      	movs	r3, #1
 8019d9c:	9321      	str	r3, [sp, #132]	; 0x84
 8019d9e:	931e      	str	r3, [sp, #120]	; 0x78
 8019da0:	2300      	movs	r3, #0
 8019da2:	65f1      	str	r1, [r6, #92]	; 0x5c
 8019da4:	f8a6 7060 	strh.w	r7, [r6, #96]	; 0x60
 8019da8:	f8a6 5062 	strh.w	r5, [r6, #98]	; 0x62
 8019dac:	f8a6 c064 	strh.w	ip, [r6, #100]	; 0x64
 8019db0:	931d      	str	r3, [sp, #116]	; 0x74
 8019db2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019db4:	3201      	adds	r2, #1
 8019db6:	b212      	sxth	r2, r2
 8019db8:	4293      	cmp	r3, r2
 8019dba:	4611      	mov	r1, r2
 8019dbc:	dc84      	bgt.n	8019cc8 <MotionDI_update+0x2200>
 8019dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019dc0:	f896 804c 	ldrb.w	r8, [r6, #76]	; 0x4c
 8019dc4:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 8019dc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019dca:	ea43 0808 	orr.w	r8, r3, r8
 8019dce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019dd0:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 8019dd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019dd6:	6573      	str	r3, [r6, #84]	; 0x54
 8019dd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019dda:	f886 804c 	strb.w	r8, [r6, #76]	; 0x4c
 8019dde:	e9dd 9526 	ldrd	r9, r5, [sp, #152]	; 0x98
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	f040 81c4 	bne.w	801a170 <MotionDI_update+0x26a8>
 8019de8:	f1b8 0f00 	cmp.w	r8, #0
 8019dec:	f000 835d 	beq.w	801a4aa <MotionDI_update+0x29e2>
 8019df0:	6937      	ldr	r7, [r6, #16]
 8019df2:	b1df      	cbz	r7, 8019e2c <MotionDI_update+0x2364>
 8019df4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019df6:	f7e6 fb7d 	bl	80004f4 <__aeabi_ui2d>
 8019dfa:	a3d3      	add	r3, pc, #844	; (adr r3, 801a148 <MotionDI_update+0x2680>)
 8019dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e00:	f7e6 fbf2 	bl	80005e8 <__aeabi_dmul>
 8019e04:	4602      	mov	r2, r0
 8019e06:	4638      	mov	r0, r7
 8019e08:	4688      	mov	r8, r1
 8019e0a:	4617      	mov	r7, r2
 8019e0c:	f7e6 fb72 	bl	80004f4 <__aeabi_ui2d>
 8019e10:	4602      	mov	r2, r0
 8019e12:	460b      	mov	r3, r1
 8019e14:	4638      	mov	r0, r7
 8019e16:	4641      	mov	r1, r8
 8019e18:	f7e6 fa2e 	bl	8000278 <__aeabi_dsub>
 8019e1c:	2200      	movs	r2, #0
 8019e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019e22:	f7e6 fe53 	bl	8000acc <__aeabi_dcmplt>
 8019e26:	2800      	cmp	r0, #0
 8019e28:	f040 836a 	bne.w	801a500 <MotionDI_update+0x2a38>
 8019e2c:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8019e30:	2b01      	cmp	r3, #1
 8019e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019e34:	f000 8361 	beq.w	801a4fa <MotionDI_update+0x2a32>
 8019e38:	2b0a      	cmp	r3, #10
 8019e3a:	f240 8361 	bls.w	801a500 <MotionDI_update+0x2a38>
 8019e3e:	4ac4      	ldr	r2, [pc, #784]	; (801a150 <MotionDI_update+0x2688>)
 8019e40:	edd2 9a00 	vldr	s19, [r2]
 8019e44:	aa58      	add	r2, sp, #352	; 0x160
 8019e46:	2100      	movs	r1, #0
 8019e48:	2300      	movs	r3, #0
 8019e4a:	9218      	str	r2, [sp, #96]	; 0x60
 8019e4c:	4610      	mov	r0, r2
 8019e4e:	2234      	movs	r2, #52	; 0x34
 8019e50:	932b      	str	r3, [sp, #172]	; 0xac
 8019e52:	932c      	str	r3, [sp, #176]	; 0xb0
 8019e54:	932d      	str	r3, [sp, #180]	; 0xb4
 8019e56:	932e      	str	r3, [sp, #184]	; 0xb8
 8019e58:	f88d 10aa 	strb.w	r1, [sp, #170]	; 0xaa
 8019e5c:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8019e60:	912f      	str	r1, [sp, #188]	; 0xbc
 8019e62:	f8ad 10c0 	strh.w	r1, [sp, #192]	; 0xc0
 8019e66:	9131      	str	r1, [sp, #196]	; 0xc4
 8019e68:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 8019e6c:	f001 fa76 	bl	801b35c <memset>
 8019e70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019e72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019e74:	4293      	cmp	r3, r2
 8019e76:	f000 8382 	beq.w	801a57e <MotionDI_update+0x2ab6>
 8019e7a:	461a      	mov	r2, r3
 8019e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019e7e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8019e80:	3301      	adds	r3, #1
 8019e82:	1a9b      	subs	r3, r3, r2
 8019e84:	fb93 f2f1 	sdiv	r2, r3, r1
 8019e88:	fb01 3312 	mls	r3, r1, r2, r3
 8019e8c:	fa0f fa83 	sxth.w	sl, r3
 8019e90:	f1ba 0f00 	cmp.w	sl, #0
 8019e94:	da03      	bge.n	8019e9e <MotionDI_update+0x23d6>
 8019e96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019e98:	441a      	add	r2, r3
 8019e9a:	fa0f fa82 	sxth.w	sl, r2
 8019e9e:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 8019ea2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019ea6:	f9b3 0062 	ldrsh.w	r0, [r3, #98]	; 0x62
 8019eaa:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8019eae:	f9b3 7064 	ldrsh.w	r7, [r3, #100]	; 0x64
 8019eb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019eb4:	4602      	mov	r2, r0
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	f000 8382 	beq.w	801a5c0 <MotionDI_update+0x2af8>
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 8019ec2:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8019ec6:	951d      	str	r5, [sp, #116]	; 0x74
 8019ec8:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 8019ecc:	4611      	mov	r1, r2
 8019ece:	46d3      	mov	fp, sl
 8019ed0:	4686      	mov	lr, r0
 8019ed2:	46e0      	mov	r8, ip
 8019ed4:	463d      	mov	r5, r7
 8019ed6:	4682      	mov	sl, r0
 8019ed8:	4459      	add	r1, fp
 8019eda:	fb91 f3f9 	sdiv	r3, r1, r9
 8019ede:	fb09 1313 	mls	r3, r9, r3, r1
 8019ee2:	b21b      	sxth	r3, r3
 8019ee4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ee8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019eec:	3201      	adds	r2, #1
 8019eee:	f9b3 0060 	ldrsh.w	r0, [r3, #96]	; 0x60
 8019ef2:	f9b3 1062 	ldrsh.w	r1, [r3, #98]	; 0x62
 8019ef6:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8019efa:	4584      	cmp	ip, r0
 8019efc:	bfb8      	it	lt
 8019efe:	4684      	movlt	ip, r0
 8019f00:	4580      	cmp	r8, r0
 8019f02:	bfa8      	it	ge
 8019f04:	4680      	movge	r8, r0
 8019f06:	458a      	cmp	sl, r1
 8019f08:	bfb8      	it	lt
 8019f0a:	468a      	movlt	sl, r1
 8019f0c:	458e      	cmp	lr, r1
 8019f0e:	bfa8      	it	ge
 8019f10:	468e      	movge	lr, r1
 8019f12:	429f      	cmp	r7, r3
 8019f14:	bfb8      	it	lt
 8019f16:	461f      	movlt	r7, r3
 8019f18:	429d      	cmp	r5, r3
 8019f1a:	bfa8      	it	ge
 8019f1c:	461d      	movge	r5, r3
 8019f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019f20:	b212      	sxth	r2, r2
 8019f22:	429a      	cmp	r2, r3
 8019f24:	4611      	mov	r1, r2
 8019f26:	dbd7      	blt.n	8019ed8 <MotionDI_update+0x2410>
 8019f28:	ebac 0808 	sub.w	r8, ip, r8
 8019f2c:	ee07 8a90 	vmov	s15, r8
 8019f30:	4629      	mov	r1, r5
 8019f32:	e9dd 951c 	ldrd	r9, r5, [sp, #112]	; 0x70
 8019f36:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8019f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f3e:	4652      	mov	r2, sl
 8019f40:	ed9f 7a84 	vldr	s14, [pc, #528]	; 801a154 <MotionDI_update+0x268c>
 8019f44:	ed9f 6a84 	vldr	s12, [pc, #528]	; 801a158 <MotionDI_update+0x2690>
 8019f48:	eec7 5a29 	vdiv.f32	s11, s14, s19
 8019f4c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019f50:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8019f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f58:	f300 82b8 	bgt.w	801a4cc <MotionDI_update+0x2a04>
 8019f5c:	eba2 0e0e 	sub.w	lr, r2, lr
 8019f60:	ee07 ea10 	vmov	s14, lr
 8019f64:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8019f68:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8019f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f70:	f300 82ac 	bgt.w	801a4cc <MotionDI_update+0x2a04>
 8019f74:	1a7f      	subs	r7, r7, r1
 8019f76:	ee07 7a10 	vmov	s14, r7
 8019f7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f7e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8019f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f86:	f300 82a1 	bgt.w	801a4cc <MotionDI_update+0x2a04>
 8019f8a:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
 8019f8e:	ee65 5a86 	vmul.f32	s11, s11, s12
 8019f92:	eef4 5ae7 	vcmpe.f32	s11, s15
 8019f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f9a:	f100 8297 	bmi.w	801a4cc <MotionDI_update+0x2a04>
 8019f9e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fa6:	f300 8291 	bgt.w	801a4cc <MotionDI_update+0x2a04>
 8019faa:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8019fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fb2:	f300 828b 	bgt.w	801a4cc <MotionDI_update+0x2a04>
 8019fb6:	edd6 6a06 	vldr	s13, [r6, #24]
 8019fba:	ed96 7a07 	vldr	s14, [r6, #28]
 8019fbe:	edd6 7a08 	vldr	s15, [r6, #32]
 8019fc2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8019fc6:	f10d 03ab 	add.w	r3, sp, #171	; 0xab
 8019fca:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019fd2:	9300      	str	r3, [sp, #0]
 8019fd4:	ee16 3a90 	vmov	r3, s13
 8019fd8:	ee17 1a90 	vmov	r1, s15
 8019fdc:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
 8019fe0:	ee17 3a10 	vmov	r3, s14
 8019fe4:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 8019fe8:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
 8019fec:	495b      	ldr	r1, [pc, #364]	; (801a15c <MotionDI_update+0x2694>)
 8019fee:	aa2d      	add	r2, sp, #180	; 0xb4
 8019ff0:	eeb0 0a69 	vmov.f32	s0, s19
 8019ff4:	a831      	add	r0, sp, #196	; 0xc4
 8019ff6:	ab2e      	add	r3, sp, #184	; 0xb8
 8019ff8:	f7f8 fba6 	bl	8012748 <getAccStats.constprop.0>
 8019ffc:	eddf 7a58 	vldr	s15, [pc, #352]	; 801a160 <MotionDI_update+0x2698>
 801a000:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 801a004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a00c:	f140 82e4 	bpl.w	801a5d8 <MotionDI_update+0x2b10>
 801a010:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 801a014:	2b01      	cmp	r3, #1
 801a016:	f000 82df 	beq.w	801a5d8 <MotionDI_update+0x2b10>
 801a01a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	f000 82db 	beq.w	801a5d8 <MotionDI_update+0x2b10>
 801a022:	7d33      	ldrb	r3, [r6, #20]
 801a024:	2b03      	cmp	r3, #3
 801a026:	f001 8123 	beq.w	801b270 <MotionDI_update+0x37a8>
 801a02a:	f8df c138 	ldr.w	ip, [pc, #312]	; 801a164 <MotionDI_update+0x269c>
 801a02e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801a030:	edc6 8a04 	vstr	s17, [r6, #16]
 801a034:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a038:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a03a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a03e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a040:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a044:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a046:	f8dc 2000 	ldr.w	r2, [ip]
 801a04a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801a04c:	603a      	str	r2, [r7, #0]
 801a04e:	2103      	movs	r1, #3
 801a050:	2200      	movs	r2, #0
 801a052:	7531      	strb	r1, [r6, #20]
 801a054:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
 801a058:	2b00      	cmp	r3, #0
 801a05a:	f041 8104 	bne.w	801b266 <MotionDI_update+0x379e>
 801a05e:	ab33      	add	r3, sp, #204	; 0xcc
 801a060:	931e      	str	r3, [sp, #120]	; 0x78
 801a062:	ab65      	add	r3, sp, #404	; 0x194
 801a064:	931c      	str	r3, [sp, #112]	; 0x70
 801a066:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a06a:	4f3e      	ldr	r7, [pc, #248]	; (801a164 <MotionDI_update+0x269c>)
 801a06c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a070:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a072:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a076:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a078:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a07c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a07e:	f8dc 3000 	ldr.w	r3, [ip]
 801a082:	603b      	str	r3, [r7, #0]
 801a084:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a086:	4f38      	ldr	r7, [pc, #224]	; (801a168 <MotionDI_update+0x26a0>)
 801a088:	f7e6 fa34 	bl	80004f4 <__aeabi_ui2d>
 801a08c:	a32e      	add	r3, pc, #184	; (adr r3, 801a148 <MotionDI_update+0x2680>)
 801a08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a092:	f7e6 faa9 	bl	80005e8 <__aeabi_dmul>
 801a096:	f7e6 fd7f 	bl	8000b98 <__aeabi_d2uiz>
 801a09a:	edd6 6a07 	vldr	s13, [r6, #28]
 801a09e:	ed96 7a08 	vldr	s14, [r6, #32]
 801a0a2:	edd6 7a06 	vldr	s15, [r6, #24]
 801a0a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a0a8:	f8d6 c028 	ldr.w	ip, [r6, #40]	; 0x28
 801a0ac:	6b31      	ldr	r1, [r6, #48]	; 0x30
 801a0ae:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 801a0b0:	64b0      	str	r0, [r6, #72]	; 0x48
 801a0b2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801a0b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a0ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a0be:	edc3 6a01 	vstr	s13, [r3, #4]
 801a0c2:	ed83 7a02 	vstr	s14, [r3, #8]
 801a0c6:	edc3 7a00 	vstr	s15, [r3]
 801a0ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801a0cc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 801a0ce:	61fb      	str	r3, [r7, #28]
 801a0d0:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 801a0d4:	eddf 4a25 	vldr	s9, [pc, #148]	; 801a16c <MotionDI_update+0x26a4>
 801a0d8:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
 801a0dc:	f8c7 c010 	str.w	ip, [r7, #16]
 801a0e0:	6178      	str	r0, [r7, #20]
 801a0e2:	f8d6 c03c 	ldr.w	ip, [r6, #60]	; 0x3c
 801a0e6:	6c30      	ldr	r0, [r6, #64]	; 0x40
 801a0e8:	61b9      	str	r1, [r7, #24]
 801a0ea:	623a      	str	r2, [r7, #32]
 801a0ec:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801a0ee:	f8c7 e00c 	str.w	lr, [r7, #12]
 801a0f2:	2200      	movs	r2, #0
 801a0f4:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 801a0f8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 801a0fc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801a100:	e9c6 3202 	strd	r3, r2, [r6, #8]
 801a104:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 801a108:	62b8      	str	r0, [r7, #40]	; 0x28
 801a10a:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 801a10e:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a110:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 801a114:	7d33      	ldrb	r3, [r6, #20]
 801a116:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 801a11a:	ee65 6a24 	vmul.f32	s13, s10, s9
 801a11e:	ee26 7a24 	vmul.f32	s14, s12, s9
 801a122:	ee65 7aa4 	vmul.f32	s15, s11, s9
 801a126:	2901      	cmp	r1, #1
 801a128:	edc7 6a01 	vstr	s13, [r7, #4]
 801a12c:	edc7 7a00 	vstr	s15, [r7]
 801a130:	ed87 7a02 	vstr	s14, [r7, #8]
 801a134:	f47d acee 	bne.w	8017b14 <MotionDI_update+0x4c>
 801a138:	2b03      	cmp	r3, #3
 801a13a:	f47d aceb 	bne.w	8017b14 <MotionDI_update+0x4c>
 801a13e:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
 801a142:	f7fd bce7 	b.w	8017b14 <MotionDI_update+0x4c>
 801a146:	bf00      	nop
 801a148:	d2f1a9fc 	.word	0xd2f1a9fc
 801a14c:	3f50624d 	.word	0x3f50624d
 801a150:	20002b10 	.word	0x20002b10
 801a154:	3f8ccccd 	.word	0x3f8ccccd
 801a158:	3f99999a 	.word	0x3f99999a
 801a15c:	200026d4 	.word	0x200026d4
 801a160:	3d23d70a 	.word	0x3d23d70a
 801a164:	200026c4 	.word	0x200026c4
 801a168:	20001a3c 	.word	0x20001a3c
 801a16c:	3a83126f 	.word	0x3a83126f
 801a170:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a172:	2b00      	cmp	r3, #0
 801a174:	f47f ae38 	bne.w	8019de8 <MotionDI_update+0x2320>
 801a178:	461a      	mov	r2, r3
 801a17a:	4bd0      	ldr	r3, [pc, #832]	; (801a4bc <MotionDI_update+0x29f4>)
 801a17c:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 801a180:	edd3 7a00 	vldr	s15, [r3]
 801a184:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 801a186:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 801a18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a192:	4611      	mov	r1, r2
 801a194:	4610      	mov	r0, r2
 801a196:	4613      	mov	r3, r2
 801a198:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 801a19c:	3101      	adds	r1, #1
 801a19e:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801a1a2:	f9b7 800a 	ldrsh.w	r8, [r7, #10]
 801a1a6:	f9b7 e00c 	ldrsh.w	lr, [r7, #12]
 801a1aa:	fa1f fc81 	uxth.w	ip, r1
 801a1ae:	45e2      	cmp	sl, ip
 801a1b0:	444a      	add	r2, r9
 801a1b2:	4443      	add	r3, r8
 801a1b4:	4470      	add	r0, lr
 801a1b6:	f107 0706 	add.w	r7, r7, #6
 801a1ba:	d8ef      	bhi.n	801a19c <MotionDI_update+0x26d4>
 801a1bc:	9922      	ldr	r1, [sp, #136]	; 0x88
 801a1be:	fb92 f2f1 	sdiv	r2, r2, r1
 801a1c2:	ee07 2a90 	vmov	s15, r2
 801a1c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1ca:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a1ce:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 801a1d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1da:	f100 81ec 	bmi.w	801a5b6 <MotionDI_update+0x2aee>
 801a1de:	eef1 6a47 	vneg.f32	s13, s14
 801a1e2:	eef4 6ae7 	vcmpe.f32	s13, s15
 801a1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1ea:	dd03      	ble.n	801a1f4 <MotionDI_update+0x272c>
 801a1ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a1f0:	edc6 7a06 	vstr	s15, [r6, #24]
 801a1f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801a1f6:	fb93 f3f2 	sdiv	r3, r3, r2
 801a1fa:	ee07 3a90 	vmov	s15, r3
 801a1fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a20a:	f100 81cf 	bmi.w	801a5ac <MotionDI_update+0x2ae4>
 801a20e:	eef1 6a47 	vneg.f32	s13, s14
 801a212:	eef4 6ae7 	vcmpe.f32	s13, s15
 801a216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a21a:	dd03      	ble.n	801a224 <MotionDI_update+0x275c>
 801a21c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a220:	edc6 7a07 	vstr	s15, [r6, #28]
 801a224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a226:	fb90 f3f3 	sdiv	r3, r0, r3
 801a22a:	ee07 3a90 	vmov	s15, r3
 801a22e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a23a:	f140 81ab 	bpl.w	801a594 <MotionDI_update+0x2acc>
 801a23e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a242:	edc6 7a08 	vstr	s15, [r6, #32]
 801a246:	e5cf      	b.n	8019de8 <MotionDI_update+0x2320>
 801a248:	7d33      	ldrb	r3, [r6, #20]
 801a24a:	2b03      	cmp	r3, #3
 801a24c:	f47d aede 	bne.w	801800c <MotionDI_update+0x544>
 801a250:	6932      	ldr	r2, [r6, #16]
 801a252:	2a00      	cmp	r2, #0
 801a254:	f43d aeda 	beq.w	801800c <MotionDI_update+0x544>
 801a258:	ee07 2a90 	vmov	s15, r2
 801a25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a260:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 801a264:	ee78 7a67 	vsub.f32	s15, s16, s15
 801a268:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a270:	f77d aecc 	ble.w	801800c <MotionDI_update+0x544>
 801a274:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a276:	2200      	movs	r2, #0
 801a278:	e9c6 1202 	strd	r1, r2, [r6, #8]
 801a27c:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 801a280:	f7ff b82f 	b.w	80192e2 <MotionDI_update+0x181a>
 801a284:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a286:	2b01      	cmp	r3, #1
 801a288:	f43f acb1 	beq.w	8019bee <MotionDI_update+0x2126>
 801a28c:	2300      	movs	r3, #0
 801a28e:	9328      	str	r3, [sp, #160]	; 0xa0
 801a290:	f7fe b810 	b.w	80182b4 <MotionDI_update+0x7ec>
 801a294:	ee75 7a47 	vsub.f32	s15, s10, s14
 801a298:	ee17 0a90 	vmov	r0, s15
 801a29c:	f7e6 f94c 	bl	8000538 <__aeabi_f2d>
 801a2a0:	ec41 0b10 	vmov	d0, r0, r1
 801a2a4:	f001 feb0 	bl	801c008 <sqrt>
 801a2a8:	ec51 0b10 	vmov	r0, r1, d0
 801a2ac:	f7e6 fc94 	bl	8000bd8 <__aeabi_d2f>
 801a2b0:	f7ff bb87 	b.w	80199c2 <MotionDI_update+0x1efa>
 801a2b4:	ee75 7a47 	vsub.f32	s15, s10, s14
 801a2b8:	ee17 0a90 	vmov	r0, s15
 801a2bc:	f7e6 f93c 	bl	8000538 <__aeabi_f2d>
 801a2c0:	ec41 0b10 	vmov	d0, r0, r1
 801a2c4:	f001 fea0 	bl	801c008 <sqrt>
 801a2c8:	ec51 0b10 	vmov	r0, r1, d0
 801a2cc:	f7e6 fc84 	bl	8000bd8 <__aeabi_d2f>
 801a2d0:	e42c      	b.n	8019b2c <MotionDI_update+0x2064>
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	9824      	ldr	r0, [sp, #144]	; 0x90
 801a2d6:	4283      	cmp	r3, r0
 801a2d8:	f000 8118 	beq.w	801a50c <MotionDI_update+0x2a44>
 801a2dc:	4618      	mov	r0, r3
 801a2de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a2e0:	3301      	adds	r3, #1
 801a2e2:	eba3 0a00 	sub.w	sl, r3, r0
 801a2e6:	fb9a f9fe 	sdiv	r9, sl, lr
 801a2ea:	fb0e a919 	mls	r9, lr, r9, sl
 801a2ee:	9318      	str	r3, [sp, #96]	; 0x60
 801a2f0:	fa0f f389 	sxth.w	r3, r9
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	da03      	bge.n	801a300 <MotionDI_update+0x2838>
 801a2f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a2fa:	4499      	add	r9, r3
 801a2fc:	fa0f f389 	sxth.w	r3, r9
 801a300:	9821      	ldr	r0, [sp, #132]	; 0x84
 801a302:	f100 3aff 	add.w	sl, r0, #4294967295
 801a306:	fa0f f08a 	sxth.w	r0, sl
 801a30a:	2800      	cmp	r0, #0
 801a30c:	fa1f fa8a 	uxth.w	sl, sl
 801a310:	db2a      	blt.n	801a368 <MotionDI_update+0x28a0>
 801a312:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 801a316:	4418      	add	r0, r3
 801a318:	ebaa 0a00 	sub.w	sl, sl, r0
 801a31c:	fb90 f3fe 	sdiv	r3, r0, lr
 801a320:	fb0e 0313 	mls	r3, lr, r3, r0
 801a324:	b21b      	sxth	r3, r3
 801a326:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a32a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a32e:	3801      	subs	r0, #1
 801a330:	f8b3 9062 	ldrh.w	r9, [r3, #98]	; 0x62
 801a334:	f8b3 8060 	ldrh.w	r8, [r3, #96]	; 0x60
 801a338:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a33c:	fb19 f905 	smulbb	r9, r9, r5
 801a340:	fb17 9808 	smlabb	r8, r7, r8, r9
 801a344:	fb1c 8303 	smlabb	r3, ip, r3, r8
 801a348:	ee07 3a90 	vmov	s15, r3
 801a34c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a350:	eb0a 0300 	add.w	r3, sl, r0
 801a354:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a358:	eef4 7ae5 	vcmpe.f32	s15, s11
 801a35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a360:	f73f ad27 	bgt.w	8019db2 <MotionDI_update+0x22ea>
 801a364:	041b      	lsls	r3, r3, #16
 801a366:	d5d9      	bpl.n	801a31c <MotionDI_update+0x2854>
 801a368:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a36a:	fb93 f9fe 	sdiv	r9, r3, lr
 801a36e:	fb0e 3919 	mls	r9, lr, r9, r3
 801a372:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a374:	fa0f f089 	sxth.w	r0, r9
 801a378:	eba3 0901 	sub.w	r9, r3, r1
 801a37c:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 801a380:	9318      	str	r3, [sp, #96]	; 0x60
 801a382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a384:	901d      	str	r0, [sp, #116]	; 0x74
 801a386:	f103 0801 	add.w	r8, r3, #1
 801a38a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a38c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801a390:	f109 30ff 	add.w	r0, r9, #4294967295
 801a394:	4699      	mov	r9, r3
 801a396:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a398:	eba9 0903 	sub.w	r9, r9, r3
 801a39c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a39e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 801a3a2:	45f0      	cmp	r8, lr
 801a3a4:	fb03 9310 	mls	r3, r3, r0, r9
 801a3a8:	bfa8      	it	ge
 801a3aa:	46f0      	movge	r8, lr
 801a3ac:	fa1f f088 	uxth.w	r0, r8
 801a3b0:	65cb      	str	r3, [r1, #92]	; 0x5c
 801a3b2:	2301      	movs	r3, #1
 801a3b4:	9021      	str	r0, [sp, #132]	; 0x84
 801a3b6:	f8a1 7060 	strh.w	r7, [r1, #96]	; 0x60
 801a3ba:	f8a1 5062 	strh.w	r5, [r1, #98]	; 0x62
 801a3be:	f8a1 c064 	strh.w	ip, [r1, #100]	; 0x64
 801a3c2:	931e      	str	r3, [sp, #120]	; 0x78
 801a3c4:	e4f5      	b.n	8019db2 <MotionDI_update+0x22ea>
 801a3c6:	ee6c ba0c 	vmul.f32	s23, s24, s24
 801a3ca:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 801a4c0 <MotionDI_update+0x29f8>
 801a3ce:	ee2b 2a82 	vmul.f32	s4, s23, s4
 801a3d2:	f7fd be2e 	b.w	8018032 <MotionDI_update+0x56a>
 801a3d6:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a3da:	429a      	cmp	r2, r3
 801a3dc:	bf14      	ite	ne
 801a3de:	f5a2 436a 	subne.w	r3, r2, #59904	; 0xea00
 801a3e2:	9b1f      	ldreq	r3, [sp, #124]	; 0x7c
 801a3e4:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 801a3e8:	921d      	str	r2, [sp, #116]	; 0x74
 801a3ea:	bf18      	it	ne
 801a3ec:	3b60      	subne	r3, #96	; 0x60
 801a3ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a3f0:	931c      	str	r3, [sp, #112]	; 0x70
 801a3f2:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 801a3f6:	9324      	str	r3, [sp, #144]	; 0x90
 801a3f8:	429a      	cmp	r2, r3
 801a3fa:	f000 80b6 	beq.w	801a56a <MotionDI_update+0x2aa2>
 801a3fe:	4619      	mov	r1, r3
 801a400:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a402:	911f      	str	r1, [sp, #124]	; 0x7c
 801a404:	3301      	adds	r3, #1
 801a406:	1a9a      	subs	r2, r3, r2
 801a408:	fb92 fcf1 	sdiv	ip, r2, r1
 801a40c:	fb01 231c 	mls	r3, r1, ip, r2
 801a410:	b21a      	sxth	r2, r3
 801a412:	2a00      	cmp	r2, #0
 801a414:	bfbc      	itt	lt
 801a416:	18ca      	addlt	r2, r1, r3
 801a418:	b212      	sxthlt	r2, r2
 801a41a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801a41c:	b20b      	sxth	r3, r1
 801a41e:	2b00      	cmp	r3, #0
 801a420:	dd28      	ble.n	801a474 <MotionDI_update+0x29ac>
 801a422:	f101 3cff 	add.w	ip, r1, #4294967295
 801a426:	460b      	mov	r3, r1
 801a428:	fa1f fc8c 	uxth.w	ip, ip
 801a42c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a42e:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 801a432:	f10c 0c01 	add.w	ip, ip, #1
 801a436:	46aa      	mov	sl, r5
 801a438:	1a40      	subs	r0, r0, r1
 801a43a:	4494      	add	ip, r2
 801a43c:	461d      	mov	r5, r3
 801a43e:	e002      	b.n	801a446 <MotionDI_update+0x297e>
 801a440:	3201      	adds	r2, #1
 801a442:	4594      	cmp	ip, r2
 801a444:	d011      	beq.n	801a46a <MotionDI_update+0x29a2>
 801a446:	fb92 f3fe 	sdiv	r3, r2, lr
 801a44a:	fb0e 2313 	mls	r3, lr, r3, r2
 801a44e:	b21b      	sxth	r3, r3
 801a450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a454:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a458:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a45a:	1841      	adds	r1, r0, r1
 801a45c:	65d9      	str	r1, [r3, #92]	; 0x5c
 801a45e:	d5ef      	bpl.n	801a440 <MotionDI_update+0x2978>
 801a460:	2d00      	cmp	r5, #0
 801a462:	d0ed      	beq.n	801a440 <MotionDI_update+0x2978>
 801a464:	3d01      	subs	r5, #1
 801a466:	b2ad      	uxth	r5, r5
 801a468:	e7ea      	b.n	801a440 <MotionDI_update+0x2978>
 801a46a:	462b      	mov	r3, r5
 801a46c:	9521      	str	r5, [sp, #132]	; 0x84
 801a46e:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 801a472:	4655      	mov	r5, sl
 801a474:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a476:	6573      	str	r3, [r6, #84]	; 0x54
 801a478:	f7ff bbee 	b.w	8019c58 <MotionDI_update+0x2190>
 801a47c:	9820      	ldr	r0, [sp, #128]	; 0x80
 801a47e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a480:	4680      	mov	r8, r0
 801a482:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a484:	1a59      	subs	r1, r3, r1
 801a486:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 801a48a:	3901      	subs	r1, #1
 801a48c:	eba8 0900 	sub.w	r9, r8, r0
 801a490:	fb03 9111 	mls	r1, r3, r1, r9
 801a494:	e481      	b.n	8019d9a <MotionDI_update+0x22d2>
 801a496:	4a0b      	ldr	r2, [pc, #44]	; (801a4c4 <MotionDI_update+0x29fc>)
 801a498:	4293      	cmp	r3, r2
 801a49a:	d941      	bls.n	801a520 <MotionDI_update+0x2a58>
 801a49c:	7d33      	ldrb	r3, [r6, #20]
 801a49e:	3b00      	subs	r3, #0
 801a4a0:	bf18      	it	ne
 801a4a2:	2301      	movne	r3, #1
 801a4a4:	7533      	strb	r3, [r6, #20]
 801a4a6:	f7fd bdb1 	b.w	801800c <MotionDI_update+0x544>
 801a4aa:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 801a4ae:	f8c6 800c 	str.w	r8, [r6, #12]
 801a4b2:	f8a6 81c8 	strh.w	r8, [r6, #456]	; 0x1c8
 801a4b6:	60b3      	str	r3, [r6, #8]
 801a4b8:	f7ff bb9f 	b.w	8019bfa <MotionDI_update+0x2132>
 801a4bc:	20002b10 	.word	0x20002b10
 801a4c0:	3a03126f 	.word	0x3a03126f
 801a4c4:	000d2f00 	.word	0x000d2f00
 801a4c8:	00000000 	.word	0x00000000
 801a4cc:	ab33      	add	r3, sp, #204	; 0xcc
 801a4ce:	931e      	str	r3, [sp, #120]	; 0x78
 801a4d0:	ab65      	add	r3, sp, #404	; 0x194
 801a4d2:	931c      	str	r3, [sp, #112]	; 0x70
 801a4d4:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 801a4d8:	2300      	movs	r3, #0
 801a4da:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 801a4de:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 801a4e2:	60b3      	str	r3, [r6, #8]
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	60f3      	str	r3, [r6, #12]
 801a4e8:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 801a4ec:	7d33      	ldrb	r3, [r6, #20]
 801a4ee:	f7fe bf00 	b.w	80192f2 <MotionDI_update+0x182a>
 801a4f2:	ed5f 9a0b 	vldr	s19, [pc, #-44]	; 801a4c8 <MotionDI_update+0x2a00>
 801a4f6:	f7fd bec3 	b.w	8018280 <MotionDI_update+0x7b8>
 801a4fa:	2b05      	cmp	r3, #5
 801a4fc:	f63f ac9f 	bhi.w	8019e3e <MotionDI_update+0x2376>
 801a500:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 801a504:	60b3      	str	r3, [r6, #8]
 801a506:	2300      	movs	r3, #0
 801a508:	f7ff bb74 	b.w	8019bf4 <MotionDI_update+0x212c>
 801a50c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a50e:	3301      	adds	r3, #1
 801a510:	fb93 f9fe 	sdiv	r9, r3, lr
 801a514:	fb0e 3919 	mls	r9, lr, r9, r3
 801a518:	9318      	str	r3, [sp, #96]	; 0x60
 801a51a:	fa0f f389 	sxth.w	r3, r9
 801a51e:	e6ef      	b.n	801a300 <MotionDI_update+0x2838>
 801a520:	4a2a      	ldr	r2, [pc, #168]	; (801a5cc <MotionDI_update+0x2b04>)
 801a522:	4293      	cmp	r3, r2
 801a524:	f67f ae90 	bls.w	801a248 <MotionDI_update+0x2780>
 801a528:	7d33      	ldrb	r3, [r6, #20]
 801a52a:	2b02      	cmp	r3, #2
 801a52c:	bf28      	it	cs
 801a52e:	2302      	movcs	r3, #2
 801a530:	7533      	strb	r3, [r6, #20]
 801a532:	f7fd bd6b 	b.w	801800c <MotionDI_update+0x544>
 801a536:	4926      	ldr	r1, [pc, #152]	; (801a5d0 <MotionDI_update+0x2b08>)
 801a538:	4608      	mov	r0, r1
 801a53a:	460a      	mov	r2, r1
 801a53c:	ed32 7a01 	vldmdb	r2!, {s14}
 801a540:	edd1 7a00 	vldr	s15, [r1]
 801a544:	edd0 6a01 	vldr	s13, [r0, #4]
 801a548:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a54c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a550:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a554:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a558:	3004      	adds	r0, #4
 801a55a:	edc4 6a47 	vstr	s13, [r4, #284]	; 0x11c
 801a55e:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 801a562:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
 801a566:	f7fe be11 	b.w	801918c <MotionDI_update+0x16c4>
 801a56a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a56c:	3301      	adds	r3, #1
 801a56e:	4611      	mov	r1, r2
 801a570:	fb93 fcf2 	sdiv	ip, r3, r2
 801a574:	fb02 321c 	mls	r2, r2, ip, r3
 801a578:	b212      	sxth	r2, r2
 801a57a:	911f      	str	r1, [sp, #124]	; 0x7c
 801a57c:	e74d      	b.n	801a41a <MotionDI_update+0x2952>
 801a57e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a580:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a582:	f103 0801 	add.w	r8, r3, #1
 801a586:	fb98 f3f2 	sdiv	r3, r8, r2
 801a58a:	fb02 8313 	mls	r3, r2, r3, r8
 801a58e:	fa0f fa83 	sxth.w	sl, r3
 801a592:	e484      	b.n	8019e9e <MotionDI_update+0x23d6>
 801a594:	eef1 6a47 	vneg.f32	s13, s14
 801a598:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5a0:	bf44      	itt	mi
 801a5a2:	ee77 7a27 	vaddmi.f32	s15, s14, s15
 801a5a6:	edc6 7a08 	vstrmi	s15, [r6, #32]
 801a5aa:	e41d      	b.n	8019de8 <MotionDI_update+0x2320>
 801a5ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a5b0:	edc6 7a07 	vstr	s15, [r6, #28]
 801a5b4:	e636      	b.n	801a224 <MotionDI_update+0x275c>
 801a5b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a5ba:	edc6 7a06 	vstr	s15, [r6, #24]
 801a5be:	e619      	b.n	801a1f4 <MotionDI_update+0x272c>
 801a5c0:	eddf 7a04 	vldr	s15, [pc, #16]	; 801a5d4 <MotionDI_update+0x2b0c>
 801a5c4:	4639      	mov	r1, r7
 801a5c6:	4686      	mov	lr, r0
 801a5c8:	e4ba      	b.n	8019f40 <MotionDI_update+0x2478>
 801a5ca:	bf00      	nop
 801a5cc:	00069780 	.word	0x00069780
 801a5d0:	20001acc 	.word	0x20001acc
 801a5d4:	00000000 	.word	0x00000000
 801a5d8:	4bb8      	ldr	r3, [pc, #736]	; (801a8bc <MotionDI_update+0x2df4>)
 801a5da:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a5de:	ab33      	add	r3, sp, #204	; 0xcc
 801a5e0:	931e      	str	r3, [sp, #120]	; 0x78
 801a5e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a5e6:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
 801a5ea:	af3f      	add	r7, sp, #252	; 0xfc
 801a5ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a5ee:	971f      	str	r7, [sp, #124]	; 0x7c
 801a5f0:	6008      	str	r0, [r1, #0]
 801a5f2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801a5f6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801a5f8:	f88d c0d2 	strb.w	ip, [sp, #210]	; 0xd2
 801a5fc:	af65      	add	r7, sp, #404	; 0x194
 801a5fe:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 801a602:	2300      	movs	r3, #0
 801a604:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 801a608:	971c      	str	r7, [sp, #112]	; 0x70
 801a60a:	4619      	mov	r1, r3
 801a60c:	e9c8 3300 	strd	r3, r3, [r8]
 801a610:	e9c0 3300 	strd	r3, r3, [r0]
 801a614:	e9c0 3302 	strd	r3, r3, [r0, #8]
 801a618:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a61c:	f8c8 3008 	str.w	r3, [r8, #8]
 801a620:	6183      	str	r3, [r0, #24]
 801a622:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
 801a626:	2200      	movs	r2, #0
 801a628:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 801a62c:	605a      	str	r2, [r3, #4]
 801a62e:	609a      	str	r2, [r3, #8]
 801a630:	60da      	str	r2, [r3, #12]
 801a632:	615a      	str	r2, [r3, #20]
 801a634:	619a      	str	r2, [r3, #24]
 801a636:	61da      	str	r2, [r3, #28]
 801a638:	601a      	str	r2, [r3, #0]
 801a63a:	f8c3 c010 	str.w	ip, [r3, #16]
 801a63e:	2270      	movs	r2, #112	; 0x70
 801a640:	f8c3 c020 	str.w	ip, [r3, #32]
 801a644:	f000 fe8a 	bl	801b35c <memset>
 801a648:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 801a64c:	f8b6 1052 	ldrh.w	r1, [r6, #82]	; 0x52
 801a650:	f9b6 3058 	ldrsh.w	r3, [r6, #88]	; 0x58
 801a654:	428a      	cmp	r2, r1
 801a656:	f103 0301 	add.w	r3, r3, #1
 801a65a:	f000 8616 	beq.w	801b28a <MotionDI_update+0x37c2>
 801a65e:	1a9b      	subs	r3, r3, r2
 801a660:	fb93 f0f1 	sdiv	r0, r3, r1
 801a664:	fb01 3310 	mls	r3, r1, r0, r3
 801a668:	b21f      	sxth	r7, r3
 801a66a:	2f00      	cmp	r7, #0
 801a66c:	bfbc      	itt	lt
 801a66e:	185b      	addlt	r3, r3, r1
 801a670:	b21f      	sxthlt	r7, r3
 801a672:	2a00      	cmp	r2, #0
 801a674:	f000 85ef 	beq.w	801b256 <MotionDI_update+0x378e>
 801a678:	eddf 6a91 	vldr	s13, [pc, #580]	; 801a8c0 <MotionDI_update+0x2df8>
 801a67c:	2000      	movs	r0, #0
 801a67e:	eeb0 6a66 	vmov.f32	s12, s13
 801a682:	eef0 5a66 	vmov.f32	s11, s13
 801a686:	eb00 0c07 	add.w	ip, r0, r7
 801a68a:	fb9c f3f1 	sdiv	r3, ip, r1
 801a68e:	fb01 c313 	mls	r3, r1, r3, ip
 801a692:	b2db      	uxtb	r3, r3
 801a694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a698:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a69c:	3001      	adds	r0, #1
 801a69e:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 801a6a2:	ee05 ca10 	vmov	s10, ip
 801a6a6:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 801a6aa:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 801a6ae:	ee07 ca10 	vmov	s14, ip
 801a6b2:	ee07 3a90 	vmov	s15, r3
 801a6b6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801a6ba:	b2c3      	uxtb	r3, r0
 801a6bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a6c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6c4:	429a      	cmp	r2, r3
 801a6c6:	ee75 5a85 	vadd.f32	s11, s11, s10
 801a6ca:	ee36 6a07 	vadd.f32	s12, s12, s14
 801a6ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	d8d7      	bhi.n	801a686 <MotionDI_update+0x2bbe>
 801a6d6:	ee07 2a10 	vmov	s14, r2
 801a6da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a6de:	eddf 7a78 	vldr	s15, [pc, #480]	; 801a8c0 <MotionDI_update+0x2df8>
 801a6e2:	ee86 aa07 	vdiv.f32	s20, s12, s14
 801a6e6:	2000      	movs	r0, #0
 801a6e8:	ee86 9a87 	vdiv.f32	s18, s13, s14
 801a6ec:	eec5 aa87 	vdiv.f32	s21, s11, s14
 801a6f0:	eef0 3a67 	vmov.f32	s7, s15
 801a6f4:	eeb0 4a67 	vmov.f32	s8, s15
 801a6f8:	eef0 4a67 	vmov.f32	s9, s15
 801a6fc:	eeb0 5a67 	vmov.f32	s10, s15
 801a700:	eef0 5a67 	vmov.f32	s11, s15
 801a704:	eb00 0c07 	add.w	ip, r0, r7
 801a708:	fb9c f3f1 	sdiv	r3, ip, r1
 801a70c:	fb01 c313 	mls	r3, r1, r3, ip
 801a710:	b2db      	uxtb	r3, r3
 801a712:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a716:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a71a:	3001      	adds	r0, #1
 801a71c:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 801a720:	ee06 ca10 	vmov	s12, ip
 801a724:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 801a728:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 801a72c:	ee06 ca90 	vmov	s13, ip
 801a730:	ee07 3a10 	vmov	s14, r3
 801a734:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801a738:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a73c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a740:	ee36 6a6a 	vsub.f32	s12, s12, s21
 801a744:	ee76 6aca 	vsub.f32	s13, s13, s20
 801a748:	ee37 7a49 	vsub.f32	s14, s14, s18
 801a74c:	b2c3      	uxtb	r3, r0
 801a74e:	429a      	cmp	r2, r3
 801a750:	eee6 5a06 	vfma.f32	s11, s12, s12
 801a754:	4618      	mov	r0, r3
 801a756:	eea6 5a26 	vfma.f32	s10, s12, s13
 801a75a:	eea6 4aa6 	vfma.f32	s8, s13, s13
 801a75e:	eee6 4a07 	vfma.f32	s9, s12, s14
 801a762:	eee6 3a87 	vfma.f32	s7, s13, s14
 801a766:	eee7 7a07 	vfma.f32	s15, s14, s14
 801a76a:	d8cb      	bhi.n	801a704 <MotionDI_update+0x2c3c>
 801a76c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a76e:	edc3 5a00 	vstr	s11, [r3]
 801a772:	ed83 5a01 	vstr	s10, [r3, #4]
 801a776:	edc3 4a02 	vstr	s9, [r3, #8]
 801a77a:	ed83 4a03 	vstr	s8, [r3, #12]
 801a77e:	edc3 3a04 	vstr	s7, [r3, #16]
 801a782:	edc3 7a05 	vstr	s15, [r3, #20]
 801a786:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a788:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 801a78c:	6819      	ldr	r1, [r3, #0]
 801a78e:	68da      	ldr	r2, [r3, #12]
 801a790:	f8ca 1000 	str.w	r1, [sl]
 801a794:	4618      	mov	r0, r3
 801a796:	695b      	ldr	r3, [r3, #20]
 801a798:	f8ca 3020 	str.w	r3, [sl, #32]
 801a79c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a79e:	6841      	ldr	r1, [r0, #4]
 801a7a0:	691b      	ldr	r3, [r3, #16]
 801a7a2:	f8ca 2010 	str.w	r2, [sl, #16]
 801a7a6:	f8ca 1004 	str.w	r1, [sl, #4]
 801a7aa:	6882      	ldr	r2, [r0, #8]
 801a7ac:	f8ca 100c 	str.w	r1, [sl, #12]
 801a7b0:	4650      	mov	r0, sl
 801a7b2:	4641      	mov	r1, r8
 801a7b4:	f8ca 2008 	str.w	r2, [sl, #8]
 801a7b8:	f8ca 2018 	str.w	r2, [sl, #24]
 801a7bc:	f8ca 3014 	str.w	r3, [sl, #20]
 801a7c0:	f8ca 301c 	str.w	r3, [sl, #28]
 801a7c4:	f7f6 fa66 	bl	8010c94 <st_accCal_MEMS_EIG3>
 801a7c8:	edd8 7a01 	vldr	s15, [r8, #4]
 801a7cc:	edd8 6a00 	vldr	s13, [r8]
 801a7d0:	ed98 7a02 	vldr	s14, [r8, #8]
 801a7d4:	eef0 7ae7 	vabs.f32	s15, s15
 801a7d8:	eef0 6ae6 	vabs.f32	s13, s13
 801a7dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7e4:	eeb0 7ac7 	vabs.f32	s14, s14
 801a7e8:	bfb4      	ite	lt
 801a7ea:	eeb0 6a66 	vmovlt.f32	s12, s13
 801a7ee:	eeb0 6a67 	vmovge.f32	s12, s15
 801a7f2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801a7f6:	bf88      	it	hi
 801a7f8:	eef0 7a66 	vmovhi.f32	s15, s13
 801a7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a800:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a804:	bfa8      	it	ge
 801a806:	eeb0 6a47 	vmovge.f32	s12, s14
 801a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a80e:	bf88      	it	hi
 801a810:	eef0 7a47 	vmovhi.f32	s15, s14
 801a814:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 801a818:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a81c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801a820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a824:	f73f ae58 	bgt.w	801a4d8 <MotionDI_update+0x2a10>
 801a828:	eddf 7a25 	vldr	s15, [pc, #148]	; 801a8c0 <MotionDI_update+0x2df8>
 801a82c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a82e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801a830:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 801a834:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 801a838:	2200      	movs	r2, #0
 801a83a:	e9c0 2200 	strd	r2, r2, [r0]
 801a83e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801a842:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 801a846:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 801a84a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 801a84e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 801a852:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 801a856:	6102      	str	r2, [r0, #16]
 801a858:	6142      	str	r2, [r0, #20]
 801a85a:	6182      	str	r2, [r0, #24]
 801a85c:	2900      	cmp	r1, #0
 801a85e:	f000 80be 	beq.w	801a9de <MotionDI_update+0x2f16>
 801a862:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a864:	f8b6 c052 	ldrh.w	ip, [r6, #82]	; 0x52
 801a868:	edd3 fa00 	vldr	s31, [r3]
 801a86c:	ed93 fa07 	vldr	s30, [r3, #28]
 801a870:	edd3 ea0d 	vldr	s29, [r3, #52]	; 0x34
 801a874:	edd3 ca01 	vldr	s25, [r3, #4]
 801a878:	ed93 ca02 	vldr	s24, [r3, #8]
 801a87c:	edd3 ba08 	vldr	s23, [r3, #32]
 801a880:	ed93 ba03 	vldr	s22, [r3, #12]
 801a884:	ed93 0a04 	vldr	s0, [r3, #16]
 801a888:	edd3 0a05 	vldr	s1, [r3, #20]
 801a88c:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
 801a890:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a894:	ed93 2a0b 	vldr	s4, [r3, #44]	; 0x2c
 801a898:	edd3 2a0e 	vldr	s5, [r3, #56]	; 0x38
 801a89c:	ed93 3a0f 	vldr	s6, [r3, #60]	; 0x3c
 801a8a0:	edd3 3a10 	vldr	s7, [r3, #64]	; 0x40
 801a8a4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a8a8:	eeb0 4a67 	vmov.f32	s8, s15
 801a8ac:	eeb0 da67 	vmov.f32	s26, s15
 801a8b0:	eef0 da67 	vmov.f32	s27, s15
 801a8b4:	eeb0 ea67 	vmov.f32	s28, s15
 801a8b8:	4660      	mov	r0, ip
 801a8ba:	e003      	b.n	801a8c4 <MotionDI_update+0x2dfc>
 801a8bc:	0801df00 	.word	0x0801df00
 801a8c0:	00000000 	.word	0x00000000
 801a8c4:	eb02 0c07 	add.w	ip, r2, r7
 801a8c8:	fb9c f3f0 	sdiv	r3, ip, r0
 801a8cc:	fb00 c313 	mls	r3, r0, r3, ip
 801a8d0:	b2db      	uxtb	r3, r3
 801a8d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a8d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a8da:	3201      	adds	r2, #1
 801a8dc:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 801a8e0:	ee06 ca10 	vmov	s12, ip
 801a8e4:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 801a8e8:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 801a8ec:	ee06 ca90 	vmov	s13, ip
 801a8f0:	ee07 3a10 	vmov	s14, r3
 801a8f4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801a8f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a8fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a900:	ee36 6a6a 	vsub.f32	s12, s12, s21
 801a904:	ee37 7a49 	vsub.f32	s14, s14, s18
 801a908:	ee76 6aca 	vsub.f32	s13, s13, s20
 801a90c:	ee66 4a06 	vmul.f32	s9, s12, s12
 801a910:	ee26 5aa6 	vmul.f32	s10, s13, s13
 801a914:	ee67 5a07 	vmul.f32	s11, s14, s14
 801a918:	eea6 ba24 	vfma.f32	s22, s12, s9
 801a91c:	b2d3      	uxtb	r3, r2
 801a91e:	4299      	cmp	r1, r3
 801a920:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a924:	461a      	mov	r2, r3
 801a926:	eea6 1a05 	vfma.f32	s2, s12, s10
 801a92a:	eea7 2a05 	vfma.f32	s4, s14, s10
 801a92e:	eee4 faa4 	vfma.f32	s31, s9, s9
 801a932:	eea6 0aa4 	vfma.f32	s0, s13, s9
 801a936:	eea5 fa05 	vfma.f32	s30, s10, s10
 801a93a:	eee6 1a85 	vfma.f32	s3, s13, s10
 801a93e:	eee6 2a25 	vfma.f32	s5, s12, s11
 801a942:	eee7 3a25 	vfma.f32	s7, s14, s11
 801a946:	ee3e ea24 	vadd.f32	s28, s28, s9
 801a94a:	ee7d da85 	vadd.f32	s27, s27, s10
 801a94e:	ee66 4a26 	vmul.f32	s9, s12, s13
 801a952:	ee26 5a07 	vmul.f32	s10, s12, s14
 801a956:	ee26 6a87 	vmul.f32	s12, s13, s14
 801a95a:	ed9d 7a20 	vldr	s14, [sp, #128]	; 0x80
 801a95e:	ee37 7a05 	vadd.f32	s14, s14, s10
 801a962:	eee5 eaa5 	vfma.f32	s29, s11, s11
 801a966:	eea6 3aa5 	vfma.f32	s6, s13, s11
 801a96a:	eee4 caa4 	vfma.f32	s25, s9, s9
 801a96e:	eea5 ca05 	vfma.f32	s24, s10, s10
 801a972:	eee6 ba06 	vfma.f32	s23, s12, s12
 801a976:	ee3d da25 	vadd.f32	s26, s26, s11
 801a97a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801a97e:	ee34 4a06 	vadd.f32	s8, s8, s12
 801a982:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
 801a986:	d89d      	bhi.n	801a8c4 <MotionDI_update+0x2dfc>
 801a988:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a98a:	edc3 fa00 	vstr	s31, [r3]
 801a98e:	ed83 fa07 	vstr	s30, [r3, #28]
 801a992:	edc3 ea0d 	vstr	s29, [r3, #52]	; 0x34
 801a996:	ed83 ea12 	vstr	s28, [r3, #72]	; 0x48
 801a99a:	edc3 da16 	vstr	s27, [r3, #88]	; 0x58
 801a99e:	ed83 da19 	vstr	s26, [r3, #100]	; 0x64
 801a9a2:	edc3 ca01 	vstr	s25, [r3, #4]
 801a9a6:	ed83 ca02 	vstr	s24, [r3, #8]
 801a9aa:	edc3 ba08 	vstr	s23, [r3, #32]
 801a9ae:	ed83 ba03 	vstr	s22, [r3, #12]
 801a9b2:	ed83 0a04 	vstr	s0, [r3, #16]
 801a9b6:	edc3 0a05 	vstr	s1, [r3, #20]
 801a9ba:	ed83 1a09 	vstr	s2, [r3, #36]	; 0x24
 801a9be:	edc3 1a0a 	vstr	s3, [r3, #40]	; 0x28
 801a9c2:	ed83 2a0b 	vstr	s4, [r3, #44]	; 0x2c
 801a9c6:	edc3 2a0e 	vstr	s5, [r3, #56]	; 0x38
 801a9ca:	ed83 3a0f 	vstr	s6, [r3, #60]	; 0x3c
 801a9ce:	edc3 3a10 	vstr	s7, [r3, #64]	; 0x40
 801a9d2:	ed83 4a17 	vstr	s8, [r3, #92]	; 0x5c
 801a9d6:	ed83 7a14 	vstr	s14, [r3, #80]	; 0x50
 801a9da:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 801a9de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a9e0:	f8cd a098 	str.w	sl, [sp, #152]	; 0x98
 801a9e4:	4617      	mov	r7, r2
 801a9e6:	ee07 1a90 	vmov	s15, r1
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	f8d2 c048 	ldr.w	ip, [r2, #72]	; 0x48
 801a9f0:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801a9f2:	657b      	str	r3, [r7, #84]	; 0x54
 801a9f4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801a9f6:	663b      	str	r3, [r7, #96]	; 0x60
 801a9f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a9fc:	66bb      	str	r3, [r7, #104]	; 0x68
 801a9fe:	e9cd 9523 	strd	r9, r5, [sp, #140]	; 0x8c
 801aa02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801aa04:	647a      	str	r2, [r7, #68]	; 0x44
 801aa06:	2201      	movs	r2, #1
 801aa08:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 801aa0c:	f8c7 c018 	str.w	ip, [r7, #24]
 801aa10:	6338      	str	r0, [r7, #48]	; 0x30
 801aa12:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 801aa16:	2100      	movs	r1, #0
 801aa18:	4692      	mov	sl, r2
 801aa1a:	469b      	mov	fp, r3
 801aa1c:	f10a 33ff 	add.w	r3, sl, #4294967295
 801aa20:	fb0a f303 	mul.w	r3, sl, r3
 801aa24:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801aa28:	f81b 2b01 	ldrb.w	r2, [fp], #1
 801aa2c:	9220      	str	r2, [sp, #128]	; 0x80
 801aa2e:	105b      	asrs	r3, r3, #1
 801aa30:	425b      	negs	r3, r3
 801aa32:	1c8f      	adds	r7, r1, #2
 801aa34:	1ccd      	adds	r5, r1, #3
 801aa36:	1d0a      	adds	r2, r1, #4
 801aa38:	f101 0e05 	add.w	lr, r1, #5
 801aa3c:	eb07 0803 	add.w	r8, r7, r3
 801aa40:	462f      	mov	r7, r5
 801aa42:	4615      	mov	r5, r2
 801aa44:	4672      	mov	r2, lr
 801aa46:	441a      	add	r2, r3
 801aa48:	9222      	str	r2, [sp, #136]	; 0x88
 801aa4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801aa4c:	f101 0c01 	add.w	ip, r1, #1
 801aa50:	18c8      	adds	r0, r1, r3
 801aa52:	eb0c 0903 	add.w	r9, ip, r3
 801aa56:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801aa5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801aa5c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801aa5e:	ed9c 7a00 	vldr	s14, [ip]
 801aa62:	fb12 fe02 	smulbb	lr, r2, r2
 801aa66:	ee07 ea90 	vmov	s15, lr
 801aa6a:	441d      	add	r5, r3
 801aa6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa70:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 801aa74:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801aa76:	9221      	str	r2, [sp, #132]	; 0x84
 801aa78:	ee67 7a87 	vmul.f32	s15, s15, s14
 801aa7c:	441f      	add	r7, r3
 801aa7e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 801aa82:	f1ba 0f07 	cmp.w	sl, #7
 801aa86:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 801aa8a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 801aa8e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801aa92:	9222      	str	r2, [sp, #136]	; 0x88
 801aa94:	edcc 7a00 	vstr	s15, [ip]
 801aa98:	fa5f fe8a 	uxtb.w	lr, sl
 801aa9c:	d06e      	beq.n	801ab7c <MotionDI_update+0x30b4>
 801aa9e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801aaa0:	f89b c000 	ldrb.w	ip, [fp]
 801aaa4:	ed99 7a00 	vldr	s14, [r9]
 801aaa8:	fb1c fc05 	smulbb	ip, ip, r5
 801aaac:	ee07 ca90 	vmov	s15, ip
 801aab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aab4:	f101 0c06 	add.w	ip, r1, #6
 801aab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801aabc:	4463      	add	r3, ip
 801aabe:	f1be 0f06 	cmp.w	lr, #6
 801aac2:	462a      	mov	r2, r5
 801aac4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801aac8:	edc9 7a00 	vstr	s15, [r9]
 801aacc:	d056      	beq.n	801ab7c <MotionDI_update+0x30b4>
 801aace:	f89b c001 	ldrb.w	ip, [fp, #1]
 801aad2:	ed98 7a00 	vldr	s14, [r8]
 801aad6:	fb1c f005 	smulbb	r0, ip, r5
 801aada:	ee07 0a90 	vmov	s15, r0
 801aade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aae2:	f1be 0f05 	cmp.w	lr, #5
 801aae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801aaea:	edc8 7a00 	vstr	s15, [r8]
 801aaee:	d045      	beq.n	801ab7c <MotionDI_update+0x30b4>
 801aaf0:	f89b c002 	ldrb.w	ip, [fp, #2]
 801aaf4:	ed97 7a00 	vldr	s14, [r7]
 801aaf8:	fb1c f005 	smulbb	r0, ip, r5
 801aafc:	ee07 0a90 	vmov	s15, r0
 801ab00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab04:	f1be 0f04 	cmp.w	lr, #4
 801ab08:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ab0c:	edc7 7a00 	vstr	s15, [r7]
 801ab10:	d034      	beq.n	801ab7c <MotionDI_update+0x30b4>
 801ab12:	9821      	ldr	r0, [sp, #132]	; 0x84
 801ab14:	f89b 7003 	ldrb.w	r7, [fp, #3]
 801ab18:	ed90 7a00 	vldr	s14, [r0]
 801ab1c:	fb17 f005 	smulbb	r0, r7, r5
 801ab20:	ee07 0a90 	vmov	s15, r0
 801ab24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab28:	9821      	ldr	r0, [sp, #132]	; 0x84
 801ab2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ab2e:	f1be 0f03 	cmp.w	lr, #3
 801ab32:	edc0 7a00 	vstr	s15, [r0]
 801ab36:	d021      	beq.n	801ab7c <MotionDI_update+0x30b4>
 801ab38:	9822      	ldr	r0, [sp, #136]	; 0x88
 801ab3a:	f89b 5004 	ldrb.w	r5, [fp, #4]
 801ab3e:	ed90 7a00 	vldr	s14, [r0]
 801ab42:	fb15 f002 	smulbb	r0, r5, r2
 801ab46:	ee07 0a90 	vmov	s15, r0
 801ab4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ab50:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ab54:	f1be 0f01 	cmp.w	lr, #1
 801ab58:	edc2 7a00 	vstr	s15, [r2]
 801ab5c:	d10e      	bne.n	801ab7c <MotionDI_update+0x30b4>
 801ab5e:	f89b 2005 	ldrb.w	r2, [fp, #5]
 801ab62:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ab64:	ed93 7a00 	vldr	s14, [r3]
 801ab68:	fb12 f200 	smulbb	r2, r2, r0
 801ab6c:	ee07 2a90 	vmov	s15, r2
 801ab70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab74:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ab78:	edc3 7a00 	vstr	s15, [r3]
 801ab7c:	f10a 0a01 	add.w	sl, sl, #1
 801ab80:	f1ba 0f08 	cmp.w	sl, #8
 801ab84:	f101 0108 	add.w	r1, r1, #8
 801ab88:	f47f af48 	bne.w	801aa1c <MotionDI_update+0x2f54>
 801ab8c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801ab8e:	e9dd 9523 	ldrd	r9, r5, [sp, #140]	; 0x8c
 801ab92:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
 801ab96:	4613      	mov	r3, r2
 801ab98:	edd3 6a00 	vldr	s13, [r3]
 801ab9c:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 801aba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801aba4:	ece3 7a01 	vstmia	r3!, {s15}
 801aba8:	455b      	cmp	r3, fp
 801abaa:	d1f5      	bne.n	801ab98 <MotionDI_update+0x30d0>
 801abac:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801abae:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 801abb2:	4638      	mov	r0, r7
 801abb4:	4641      	mov	r1, r8
 801abb6:	f7f6 f95f 	bl	8010e78 <st_accCal_MEMS_ellipsoidFit7>
 801abba:	ed98 5a04 	vldr	s10, [r8, #16]
 801abbe:	ed98 3a01 	vldr	s6, [r8, #4]
 801abc2:	edd8 4a03 	vldr	s9, [r8, #12]
 801abc6:	ed97 6a07 	vldr	s12, [r7, #28]
 801abca:	edd8 3a00 	vldr	s7, [r8]
 801abce:	edd7 ca01 	vldr	s25, [r7, #4]
 801abd2:	edd8 5a05 	vldr	s11, [r8, #20]
 801abd6:	ed98 4a02 	vldr	s8, [r8, #8]
 801abda:	edd7 6a08 	vldr	s13, [r7, #32]
 801abde:	ed97 0a02 	vldr	s0, [r7, #8]
 801abe2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801abe6:	ed97 1a03 	vldr	s2, [r7, #12]
 801abea:	ed97 da00 	vldr	s26, [r7]
 801abee:	edd8 2a06 	vldr	s5, [r8, #24]
 801abf2:	edd7 1a04 	vldr	s3, [r7, #16]
 801abf6:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801abfa:	eef1 7a45 	vneg.f32	s15, s10
 801abfe:	eec7 ba83 	vdiv.f32	s23, s15, s6
 801ac02:	ee23 6a06 	vmul.f32	s12, s6, s12
 801ac06:	eef1 7a64 	vneg.f32	s15, s9
 801ac0a:	ee87 caa3 	vdiv.f32	s24, s15, s7
 801ac0e:	eea3 6aac 	vfma.f32	s12, s7, s25
 801ac12:	eef1 7a65 	vneg.f32	s15, s11
 801ac16:	eea4 6a26 	vfma.f32	s12, s8, s13
 801ac1a:	ee63 6a26 	vmul.f32	s13, s6, s13
 801ac1e:	ee87 ba84 	vdiv.f32	s22, s15, s8
 801ac22:	eee3 6a80 	vfma.f32	s13, s7, s0
 801ac26:	ee64 7a00 	vmul.f32	s15, s8, s0
 801ac2a:	eeb0 0a66 	vmov.f32	s0, s13
 801ac2e:	eee3 7a2c 	vfma.f32	s15, s6, s25
 801ac32:	eef0 6a46 	vmov.f32	s13, s12
 801ac36:	eee4 6a87 	vfma.f32	s13, s9, s14
 801ac3a:	ee23 7a07 	vmul.f32	s14, s6, s14
 801ac3e:	ee25 2a2b 	vmul.f32	s4, s10, s23
 801ac42:	eee3 7a8d 	vfma.f32	s15, s7, s26
 801ac46:	eea3 7a81 	vfma.f32	s14, s7, s2
 801ac4a:	eea4 2a8c 	vfma.f32	s4, s9, s24
 801ac4e:	eee4 7a81 	vfma.f32	s15, s9, s2
 801ac52:	eeb0 1a47 	vmov.f32	s2, s14
 801ac56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ac5a:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801ac5e:	edd7 ca0b 	vldr	s25, [r7, #44]	; 0x2c
 801ac62:	ee32 2a82 	vadd.f32	s4, s5, s4
 801ac66:	eee5 6a07 	vfma.f32	s13, s10, s14
 801ac6a:	ee23 7a07 	vmul.f32	s14, s6, s14
 801ac6e:	eea5 2a8b 	vfma.f32	s4, s11, s22
 801ac72:	eea3 7aa1 	vfma.f32	s14, s7, s3
 801ac76:	eee5 7a21 	vfma.f32	s15, s10, s3
 801ac7a:	eeb0 2ac2 	vabs.f32	s4, s4
 801ac7e:	eeb1 dac2 	vsqrt.f32	s26, s4
 801ac82:	eef0 1a47 	vmov.f32	s3, s14
 801ac86:	ed97 2a05 	vldr	s4, [r7, #20]
 801ac8a:	ee22 7a86 	vmul.f32	s14, s5, s12
 801ac8e:	eee5 7a82 	vfma.f32	s15, s11, s4
 801ac92:	eea5 7aac 	vfma.f32	s14, s11, s25
 801ac96:	eea4 0a20 	vfma.f32	s0, s8, s1
 801ac9a:	edd7 0a06 	vldr	s1, [r7, #24]
 801ac9e:	ee37 7a26 	vadd.f32	s14, s14, s13
 801aca2:	eee2 7aa0 	vfma.f32	s15, s5, s1
 801aca6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 801acaa:	ee27 7a03 	vmul.f32	s14, s14, s6
 801acae:	eea4 0aa6 	vfma.f32	s0, s9, s13
 801acb2:	eea4 1a26 	vfma.f32	s2, s8, s13
 801acb6:	ee63 6a2c 	vmul.f32	s13, s6, s25
 801acba:	eea3 7aa7 	vfma.f32	s14, s7, s15
 801acbe:	eee3 6a82 	vfma.f32	s13, s7, s4
 801acc2:	edd7 ca11 	vldr	s25, [r7, #68]	; 0x44
 801acc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801acca:	ed97 2a12 	vldr	s4, [r7, #72]	; 0x48
 801acce:	ee23 6a06 	vmul.f32	s12, s6, s12
 801acd2:	eea5 0a27 	vfma.f32	s0, s10, s15
 801acd6:	eea3 6aa0 	vfma.f32	s12, s7, s1
 801acda:	eee4 1a27 	vfma.f32	s3, s8, s15
 801acde:	eef0 0a66 	vmov.f32	s1, s13
 801ace2:	ee62 7aac 	vmul.f32	s15, s5, s25
 801ace6:	eef0 6a47 	vmov.f32	s13, s14
 801acea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801acee:	eee5 7a87 	vfma.f32	s15, s11, s14
 801acf2:	eea4 1a82 	vfma.f32	s2, s9, s4
 801acf6:	eee4 0a07 	vfma.f32	s1, s8, s14
 801acfa:	ee77 7a80 	vadd.f32	s15, s15, s0
 801acfe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801ad02:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 801ad06:	eeb0 2a41 	vmov.f32	s4, s2
 801ad0a:	eea5 2a07 	vfma.f32	s4, s10, s14
 801ad0e:	eee4 1a87 	vfma.f32	s3, s9, s14
 801ad12:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 801ad16:	ee22 7a80 	vmul.f32	s14, s5, s0
 801ad1a:	eea4 6a2c 	vfma.f32	s12, s8, s25
 801ad1e:	eea5 7a81 	vfma.f32	s14, s11, s2
 801ad22:	eee4 6a27 	vfma.f32	s13, s8, s15
 801ad26:	eef1 dac3 	vsqrt.f32	s27, s6
 801ad2a:	eeb1 3ae3 	vsqrt.f32	s6, s7
 801ad2e:	eef1 3ac4 	vsqrt.f32	s7, s8
 801ad32:	ee37 4a02 	vadd.f32	s8, s14, s4
 801ad36:	eef0 7a46 	vmov.f32	s15, s12
 801ad3a:	eee4 7a80 	vfma.f32	s15, s9, s0
 801ad3e:	eee4 6a84 	vfma.f32	s13, s9, s8
 801ad42:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 801ad46:	ed97 4a16 	vldr	s8, [r7, #88]	; 0x58
 801ad4a:	eeb0 2a60 	vmov.f32	s4, s1
 801ad4e:	eea4 2a81 	vfma.f32	s4, s9, s2
 801ad52:	eee5 1a04 	vfma.f32	s3, s10, s8
 801ad56:	edd7 4a17 	vldr	s9, [r7, #92]	; 0x5c
 801ad5a:	ed97 1a1a 	vldr	s2, [r7, #104]	; 0x68
 801ad5e:	ee22 4a80 	vmul.f32	s8, s5, s0
 801ad62:	ee69 ca8d 	vmul.f32	s25, s19, s26
 801ad66:	eea5 4aa4 	vfma.f32	s8, s11, s9
 801ad6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad6e:	ee34 4a21 	vadd.f32	s8, s8, s3
 801ad72:	ee87 6a2c 	vdiv.f32	s12, s14, s25
 801ad76:	eea5 2a24 	vfma.f32	s4, s10, s9
 801ad7a:	eee5 7a00 	vfma.f32	s15, s10, s0
 801ad7e:	eee5 6a04 	vfma.f32	s13, s10, s8
 801ad82:	ee62 4a81 	vmul.f32	s9, s5, s2
 801ad86:	ed97 5a19 	vldr	s10, [r7, #100]	; 0x64
 801ad8a:	eee5 4a85 	vfma.f32	s9, s11, s10
 801ad8e:	eee5 7a81 	vfma.f32	s15, s11, s2
 801ad92:	ee74 4a82 	vadd.f32	s9, s9, s4
 801ad96:	ed97 5a1b 	vldr	s10, [r7, #108]	; 0x6c
 801ad9a:	eee5 6aa4 	vfma.f32	s13, s11, s9
 801ad9e:	eee2 7a85 	vfma.f32	s15, s5, s10
 801ada2:	ee66 da2d 	vmul.f32	s27, s12, s27
 801ada6:	eee2 6aa7 	vfma.f32	s13, s5, s15
 801adaa:	ee26 ea23 	vmul.f32	s28, s12, s7
 801adae:	ee26 6a03 	vmul.f32	s12, s12, s6
 801adb2:	eef4 dac7 	vcmpe.f32	s27, s14
 801adb6:	eef0 5a66 	vmov.f32	s11, s13
 801adba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801adbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adc2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801adc6:	bf4c      	ite	mi
 801adc8:	ee37 7a6d 	vsubmi.f32	s14, s14, s27
 801adcc:	ee3d 7ac7 	vsubpl.f32	s14, s27, s14
 801add0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801add4:	bf4c      	ite	mi
 801add6:	ee76 6ac6 	vsubmi.f32	s13, s13, s12
 801adda:	ee76 6a66 	vsubpl.f32	s13, s12, s13
 801adde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ade2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801ade6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adea:	eeb4 eae7 	vcmpe.f32	s28, s15
 801adee:	bfb8      	it	lt
 801adf0:	eeb0 7a66 	vmovlt.f32	s14, s13
 801adf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adf8:	bf4c      	ite	mi
 801adfa:	ee77 7ace 	vsubmi.f32	s15, s15, s28
 801adfe:	ee7e 7a67 	vsubpl.f32	s15, s28, s15
 801ae02:	eddf 6af2 	vldr	s13, [pc, #968]	; 801b1cc <MotionDI_update+0x3704>
 801ae06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ae0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae0e:	bfa8      	it	ge
 801ae10:	eef0 7a47 	vmovge.f32	s15, s14
 801ae14:	eef4 7ae6 	vcmpe.f32	s15, s13
 801ae18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae1c:	f57f ab5c 	bpl.w	801a4d8 <MotionDI_update+0x2a10>
 801ae20:	ee3e 7a2d 	vadd.f32	s14, s28, s27
 801ae24:	eddf 4aea 	vldr	s9, [pc, #936]	; 801b1d0 <MotionDI_update+0x3708>
 801ae28:	eddf 6aea 	vldr	s13, [pc, #936]	; 801b1d4 <MotionDI_update+0x370c>
 801ae2c:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ae30:	eeb0 4a4e 	vmov.f32	s8, s28
 801ae34:	eea7 4a64 	vfms.f32	s8, s14, s9
 801ae38:	eeb0 7ac4 	vabs.f32	s14, s8
 801ae3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ae40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae44:	bfa8      	it	ge
 801ae46:	eef0 7a47 	vmovge.f32	s15, s14
 801ae4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801ae4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae52:	f57f ab41 	bpl.w	801a4d8 <MotionDI_update+0x2a10>
 801ae56:	eef0 7ae5 	vabs.f32	s15, s11
 801ae5a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 801ae5e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801ae62:	eef1 5ac7 	vsqrt.f32	s11, s14
 801ae66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ae6a:	eef1 7ae5 	vsqrt.f32	s15, s11
 801ae6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ae72:	eec7 ca8d 	vdiv.f32	s25, s15, s26
 801ae76:	eef4 cac7 	vcmpe.f32	s25, s14
 801ae7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae7e:	f73f ab2b 	bgt.w	801a4d8 <MotionDI_update+0x2a10>
 801ae82:	eddf ead5 	vldr	s29, [pc, #852]	; 801b1d8 <MotionDI_update+0x3710>
 801ae86:	ed9f dad5 	vldr	s26, [pc, #852]	; 801b1dc <MotionDI_update+0x3714>
 801ae8a:	ee26 0a2e 	vmul.f32	s0, s12, s29
 801ae8e:	f000 ffa7 	bl	801bde0 <roundf>
 801ae92:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801ae94:	ee60 7a0d 	vmul.f32	s15, s0, s26
 801ae98:	ee2d 0aae 	vmul.f32	s0, s27, s29
 801ae9c:	edc7 7a00 	vstr	s15, [r7]
 801aea0:	f000 ff9e 	bl	801bde0 <roundf>
 801aea4:	ee60 7a0d 	vmul.f32	s15, s0, s26
 801aea8:	ee2e 0a2e 	vmul.f32	s0, s28, s29
 801aeac:	edc7 7a04 	vstr	s15, [r7, #16]
 801aeb0:	f000 ff96 	bl	801bde0 <roundf>
 801aeb4:	ee60 7a0d 	vmul.f32	s15, s0, s26
 801aeb8:	ee3c 0a2a 	vadd.f32	s0, s24, s21
 801aebc:	edc7 7a08 	vstr	s15, [r7, #32]
 801aec0:	971d      	str	r7, [sp, #116]	; 0x74
 801aec2:	f000 ff8d 	bl	801bde0 <roundf>
 801aec6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801aeca:	ee3b 0a8a 	vadd.f32	s0, s23, s20
 801aece:	ee17 3a90 	vmov	r3, s15
 801aed2:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 801aed6:	f000 ff83 	bl	801bde0 <roundf>
 801aeda:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801aede:	ee3b 0a09 	vadd.f32	s0, s22, s18
 801aee2:	ee17 3a90 	vmov	r3, s15
 801aee6:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 801aeea:	f000 ff79 	bl	801bde0 <roundf>
 801aeee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801aef2:	f10d 03aa 	add.w	r3, sp, #170	; 0xaa
 801aef6:	ee17 7a90 	vmov	r7, s15
 801aefa:	9300      	str	r3, [sp, #0]
 801aefc:	991d      	ldr	r1, [sp, #116]	; 0x74
 801aefe:	edc6 8a04 	vstr	s17, [r6, #16]
 801af02:	aa2b      	add	r2, sp, #172	; 0xac
 801af04:	ab2c      	add	r3, sp, #176	; 0xb0
 801af06:	eeb0 0a69 	vmov.f32	s0, s19
 801af0a:	a82f      	add	r0, sp, #188	; 0xbc
 801af0c:	f8ad 70c0 	strh.w	r7, [sp, #192]	; 0xc0
 801af10:	f7f7 fc1a 	bl	8012748 <getAccStats.constprop.0>
 801af14:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 801af18:	f89d 20aa 	ldrb.w	r2, [sp, #170]	; 0xaa
 801af1c:	eddf 6ab0 	vldr	s13, [pc, #704]	; 801b1e0 <MotionDI_update+0x3718>
 801af20:	231e      	movs	r3, #30
 801af22:	fb03 f301 	mul.w	r3, r3, r1
 801af26:	ee07 3a90 	vmov	s15, r3
 801af2a:	ee07 2a10 	vmov	s14, r2
 801af2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801af3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801af3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af42:	f73f aac9 	bgt.w	801a4d8 <MotionDI_update+0x2a10>
 801af46:	eddd 3a2c 	vldr	s7, [sp, #176]	; 0xb0
 801af4a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801b1e4 <MotionDI_update+0x371c>
 801af4e:	eef4 3ae7 	vcmpe.f32	s7, s15
 801af52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af56:	f73f aabf 	bgt.w	801a4d8 <MotionDI_update+0x2a10>
 801af5a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801af5e:	eef4 3ae7 	vcmpe.f32	s7, s15
 801af62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af66:	dd04      	ble.n	801af72 <MotionDI_update+0x34aa>
 801af68:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 801af6c:	4293      	cmp	r3, r2
 801af6e:	f67f aab3 	bls.w	801a4d8 <MotionDI_update+0x2a10>
 801af72:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801af74:	2b00      	cmp	r3, #0
 801af76:	d170      	bne.n	801b05a <MotionDI_update+0x3592>
 801af78:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 801af7c:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 801af80:	f9bd 10c0 	ldrsh.w	r1, [sp, #192]	; 0xc0
 801af84:	ed96 1a06 	vldr	s2, [r6, #24]
 801af88:	edd6 1a07 	vldr	s3, [r6, #28]
 801af8c:	eddf 2a91 	vldr	s5, [pc, #580]	; 801b1d4 <MotionDI_update+0x370c>
 801af90:	ed96 2a08 	vldr	s4, [r6, #32]
 801af94:	ee06 2a90 	vmov	s13, r2
 801af98:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 801af9c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801afa0:	ee07 2a10 	vmov	s14, r2
 801afa4:	2b01      	cmp	r3, #1
 801afa6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801afaa:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801afae:	bf18      	it	ne
 801afb0:	eef0 5a46 	vmovne.f32	s11, s12
 801afb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801afb6:	eeb1 3a04 	vmov.f32	s6, #20	; 0x40a00000  5.0
 801afba:	ee33 3a65 	vsub.f32	s6, s6, s11
 801afbe:	ee07 1a90 	vmov	s15, r1
 801afc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afc6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801afca:	ed92 4a00 	vldr	s8, [r2]
 801afce:	edd2 4a04 	vldr	s9, [r2, #16]
 801afd2:	ed92 5a08 	vldr	s10, [r2, #32]
 801afd6:	eee1 6a03 	vfma.f32	s13, s2, s6
 801afda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afde:	ee27 7a25 	vmul.f32	s14, s14, s11
 801afe2:	ee34 4a46 	vsub.f32	s8, s8, s12
 801afe6:	eea3 7a21 	vfma.f32	s14, s6, s3
 801afea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801afee:	ee24 4a22 	vmul.f32	s8, s8, s5
 801aff2:	eee3 7a02 	vfma.f32	s15, s6, s4
 801aff6:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801affa:	eeb0 3a46 	vmov.f32	s6, s12
 801affe:	eea5 3a84 	vfma.f32	s6, s11, s8
 801b002:	ee74 4ac6 	vsub.f32	s9, s9, s12
 801b006:	ee35 5a46 	vsub.f32	s10, s10, s12
 801b00a:	ee27 7a22 	vmul.f32	s14, s14, s5
 801b00e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801b012:	ee64 4aa2 	vmul.f32	s9, s9, s5
 801b016:	ee16 3a90 	vmov	r3, s13
 801b01a:	ee25 5a22 	vmul.f32	s10, s10, s5
 801b01e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801b022:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801b026:	eeb0 4a43 	vmov.f32	s8, s6
 801b02a:	eeb0 3a46 	vmov.f32	s6, s12
 801b02e:	eea4 3aa5 	vfma.f32	s6, s9, s11
 801b032:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 801b036:	eea5 6a25 	vfma.f32	s12, s10, s11
 801b03a:	ee17 3a10 	vmov	r3, s14
 801b03e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b042:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 801b046:	ee17 3a90 	vmov	r3, s15
 801b04a:	ed82 4a00 	vstr	s8, [r2]
 801b04e:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
 801b052:	ed82 3a04 	vstr	s6, [r2, #16]
 801b056:	ed82 6a08 	vstr	s12, [r2, #32]
 801b05a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b05e:	ee77 caec 	vsub.f32	s25, s15, s25
 801b062:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801b066:	eddf 5a60 	vldr	s11, [pc, #384]	; 801b1e8 <MotionDI_update+0x3720>
 801b06a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b06c:	ee83 6aac 	vdiv.f32	s12, s7, s25
 801b070:	ee06 3a90 	vmov	s13, r3
 801b074:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 801b078:	ee07 3a10 	vmov	s14, r3
 801b07c:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801b080:	ee07 3a90 	vmov	s15, r3
 801b084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b086:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b08a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b092:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801b096:	6818      	ldr	r0, [r3, #0]
 801b098:	6919      	ldr	r1, [r3, #16]
 801b09a:	f8d3 c020 	ldr.w	ip, [r3, #32]
 801b09e:	edc7 6a01 	vstr	s13, [r7, #4]
 801b0a2:	f240 1303 	movw	r3, #259	; 0x103
 801b0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0aa:	ed87 7a02 	vstr	s14, [r7, #8]
 801b0ae:	edc7 7a03 	vstr	s15, [r7, #12]
 801b0b2:	6138      	str	r0, [r7, #16]
 801b0b4:	6239      	str	r1, [r7, #32]
 801b0b6:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 801b0ba:	803b      	strh	r3, [r7, #0]
 801b0bc:	f340 80ad 	ble.w	801b21a <MotionDI_update+0x3752>
 801b0c0:	2302      	movs	r3, #2
 801b0c2:	703b      	strb	r3, [r7, #0]
 801b0c4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801b0c6:	2200      	movs	r2, #0
 801b0c8:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	f43e afca 	beq.w	801a066 <MotionDI_update+0x259e>
 801b0d2:	7d32      	ldrb	r2, [r6, #20]
 801b0d4:	2a03      	cmp	r2, #3
 801b0d6:	f47e afc6 	bne.w	801a066 <MotionDI_update+0x259e>
 801b0da:	ee07 3a90 	vmov	s15, r3
 801b0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b0e2:	eddf 6a42 	vldr	s13, [pc, #264]	; 801b1ec <MotionDI_update+0x3724>
 801b0e6:	ee38 6a67 	vsub.f32	s12, s16, s15
 801b0ea:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801b0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0f2:	f100 808f 	bmi.w	801b214 <MotionDI_update+0x374c>
 801b0f6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 801b1f0 <MotionDI_update+0x3728>
 801b0fa:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b102:	f140 8096 	bpl.w	801b232 <MotionDI_update+0x376a>
 801b106:	ee36 7ac8 	vsub.f32	s14, s13, s16
 801b10a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801b1f4 <MotionDI_update+0x372c>
 801b10e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b112:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b116:	eee7 7a26 	vfma.f32	s15, s14, s13
 801b11a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b11c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801b120:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b124:	ed9f 8a34 	vldr	s16, [pc, #208]	; 801b1f8 <MotionDI_update+0x3730>
 801b128:	ed93 7a04 	vldr	s14, [r3, #16]
 801b12c:	ed96 6a09 	vldr	s12, [r6, #36]	; 0x24
 801b130:	ed93 0a01 	vldr	s0, [r3, #4]
 801b134:	edd6 6a06 	vldr	s13, [r6, #24]
 801b138:	eef4 7ac8 	vcmpe.f32	s15, s16
 801b13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b140:	bfa8      	it	ge
 801b142:	eeb0 8a67 	vmovge.f32	s16, s15
 801b146:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801b14a:	ee78 8ac8 	vsub.f32	s17, s17, s16
 801b14e:	461f      	mov	r7, r3
 801b150:	ee68 7a87 	vmul.f32	s15, s17, s14
 801b154:	ee28 0a80 	vmul.f32	s0, s17, s0
 801b158:	eee8 7a06 	vfma.f32	s15, s16, s12
 801b15c:	eea8 0a26 	vfma.f32	s0, s16, s13
 801b160:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
 801b164:	f000 fe3c 	bl	801bde0 <roundf>
 801b168:	edd7 7a08 	vldr	s15, [r7, #32]
 801b16c:	ed97 7a02 	vldr	s14, [r7, #8]
 801b170:	ed96 6a0d 	vldr	s12, [r6, #52]	; 0x34
 801b174:	edd6 6a07 	vldr	s13, [r6, #28]
 801b178:	ed86 0a06 	vstr	s0, [r6, #24]
 801b17c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801b180:	ee28 7a87 	vmul.f32	s14, s17, s14
 801b184:	eee8 7a06 	vfma.f32	s15, s16, s12
 801b188:	eea8 7a26 	vfma.f32	s14, s16, s13
 801b18c:	edc6 7a0d 	vstr	s15, [r6, #52]	; 0x34
 801b190:	eeb0 0a47 	vmov.f32	s0, s14
 801b194:	f000 fe24 	bl	801bde0 <roundf>
 801b198:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b19c:	edd6 6a11 	vldr	s13, [r6, #68]	; 0x44
 801b1a0:	ed97 6a03 	vldr	s12, [r7, #12]
 801b1a4:	ed96 7a08 	vldr	s14, [r6, #32]
 801b1a8:	ed86 0a07 	vstr	s0, [r6, #28]
 801b1ac:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801b1b0:	ee28 0a86 	vmul.f32	s0, s17, s12
 801b1b4:	eee8 7a26 	vfma.f32	s15, s16, s13
 801b1b8:	eea8 0a07 	vfma.f32	s0, s16, s14
 801b1bc:	edc6 7a11 	vstr	s15, [r6, #68]	; 0x44
 801b1c0:	f000 fe0e 	bl	801bde0 <roundf>
 801b1c4:	ed86 0a08 	vstr	s0, [r6, #32]
 801b1c8:	e022      	b.n	801b210 <MotionDI_update+0x3748>
 801b1ca:	bf00      	nop
 801b1cc:	3e99999a 	.word	0x3e99999a
 801b1d0:	3eaaaaab 	.word	0x3eaaaaab
 801b1d4:	3e4ccccd 	.word	0x3e4ccccd
 801b1d8:	49742400 	.word	0x49742400
 801b1dc:	358637bd 	.word	0x358637bd
 801b1e0:	3c23d70a 	.word	0x3c23d70a
 801b1e4:	3e19999a 	.word	0x3e19999a
 801b1e8:	3d75c28f 	.word	0x3d75c28f
 801b1ec:	42f00000 	.word	0x42f00000
 801b1f0:	45e10000 	.word	0x45e10000
 801b1f4:	38941a9d 	.word	0x38941a9d
 801b1f8:	00000000 	.word	0x00000000
 801b1fc:	3df5c28f 	.word	0x3df5c28f
 801b200:	47a8c000 	.word	0x47a8c000
 801b204:	367e3344 	.word	0x367e3344
 801b208:	7fc00000 	.word	0x7fc00000
 801b20c:	3dcccccd 	.word	0x3dcccccd
 801b210:	f7fe bf38 	b.w	801a084 <MotionDI_update+0x25bc>
 801b214:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b218:	e77f      	b.n	801b11a <MotionDI_update+0x3652>
 801b21a:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 801b1fc <MotionDI_update+0x3734>
 801b21e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b226:	f77f af4d 	ble.w	801b0c4 <MotionDI_update+0x35fc>
 801b22a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b22c:	2301      	movs	r3, #1
 801b22e:	7013      	strb	r3, [r2, #0]
 801b230:	e748      	b.n	801b0c4 <MotionDI_update+0x35fc>
 801b232:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 801b200 <MotionDI_update+0x3738>
 801b236:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801b23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b23e:	d52b      	bpl.n	801b298 <MotionDI_update+0x37d0>
 801b240:	ee37 7a48 	vsub.f32	s14, s14, s16
 801b244:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 801b204 <MotionDI_update+0x373c>
 801b248:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b24c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b250:	eee7 7a26 	vfma.f32	s15, s14, s13
 801b254:	e761      	b.n	801b11a <MotionDI_update+0x3652>
 801b256:	ed1f 9a14 	vldr	s18, [pc, #-80]	; 801b208 <MotionDI_update+0x3740>
 801b25a:	eeb0 aa49 	vmov.f32	s20, s18
 801b25e:	eef0 aa49 	vmov.f32	s21, s18
 801b262:	f7ff ba90 	b.w	801a786 <MotionDI_update+0x2cbe>
 801b266:	aa33      	add	r2, sp, #204	; 0xcc
 801b268:	921e      	str	r2, [sp, #120]	; 0x78
 801b26a:	aa65      	add	r2, sp, #404	; 0x194
 801b26c:	921c      	str	r2, [sp, #112]	; 0x70
 801b26e:	e734      	b.n	801b0da <MotionDI_update+0x3612>
 801b270:	2300      	movs	r3, #0
 801b272:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 801b276:	ab33      	add	r3, sp, #204	; 0xcc
 801b278:	931e      	str	r3, [sp, #120]	; 0x78
 801b27a:	ab65      	add	r3, sp, #404	; 0x194
 801b27c:	edc6 8a04 	vstr	s17, [r6, #16]
 801b280:	931c      	str	r3, [sp, #112]	; 0x70
 801b282:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 801b286:	f7ff b92a 	b.w	801a4de <MotionDI_update+0x2a16>
 801b28a:	fb93 f7f2 	sdiv	r7, r3, r2
 801b28e:	fb02 3317 	mls	r3, r2, r7, r3
 801b292:	b21f      	sxth	r7, r3
 801b294:	f7ff b9ed 	b.w	801a672 <MotionDI_update+0x2baa>
 801b298:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 801b20c <MotionDI_update+0x3744>
 801b29c:	e73d      	b.n	801b11a <MotionDI_update+0x3652>
 801b29e:	bf00      	nop

0801b2a0 <MotionDI_GetLibVersion>:
 801b2a0:	4b10      	ldr	r3, [pc, #64]	; (801b2e4 <MotionDI_GetLibVersion+0x44>)
 801b2a2:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 801b2a6:	b90b      	cbnz	r3, 801b2ac <MotionDI_GetLibVersion+0xc>
 801b2a8:	4618      	mov	r0, r3
 801b2aa:	4770      	bx	lr
 801b2ac:	b470      	push	{r4, r5, r6}
 801b2ae:	4e0e      	ldr	r6, [pc, #56]	; (801b2e8 <MotionDI_GetLibVersion+0x48>)
 801b2b0:	4604      	mov	r4, r0
 801b2b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b2b4:	b08b      	sub	sp, #44	; 0x2c
 801b2b6:	ad01      	add	r5, sp, #4
 801b2b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b2ba:	6833      	ldr	r3, [r6, #0]
 801b2bc:	f825 3b02 	strh.w	r3, [r5], #2
 801b2c0:	0c1b      	lsrs	r3, r3, #16
 801b2c2:	702b      	strb	r3, [r5, #0]
 801b2c4:	ad01      	add	r5, sp, #4
 801b2c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b2c8:	882e      	ldrh	r6, [r5, #0]
 801b2ca:	60e3      	str	r3, [r4, #12]
 801b2cc:	78ad      	ldrb	r5, [r5, #2]
 801b2ce:	6020      	str	r0, [r4, #0]
 801b2d0:	2312      	movs	r3, #18
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	6061      	str	r1, [r4, #4]
 801b2d6:	60a2      	str	r2, [r4, #8]
 801b2d8:	8226      	strh	r6, [r4, #16]
 801b2da:	74a5      	strb	r5, [r4, #18]
 801b2dc:	b00b      	add	sp, #44	; 0x2c
 801b2de:	bc70      	pop	{r4, r5, r6}
 801b2e0:	4770      	bx	lr
 801b2e2:	bf00      	nop
 801b2e4:	200013e8 	.word	0x200013e8
 801b2e8:	0801de88 	.word	0x0801de88

0801b2ec <__errno>:
 801b2ec:	4b01      	ldr	r3, [pc, #4]	; (801b2f4 <__errno+0x8>)
 801b2ee:	6818      	ldr	r0, [r3, #0]
 801b2f0:	4770      	bx	lr
 801b2f2:	bf00      	nop
 801b2f4:	20001360 	.word	0x20001360

0801b2f8 <__libc_init_array>:
 801b2f8:	b570      	push	{r4, r5, r6, lr}
 801b2fa:	4d0d      	ldr	r5, [pc, #52]	; (801b330 <__libc_init_array+0x38>)
 801b2fc:	4c0d      	ldr	r4, [pc, #52]	; (801b334 <__libc_init_array+0x3c>)
 801b2fe:	1b64      	subs	r4, r4, r5
 801b300:	10a4      	asrs	r4, r4, #2
 801b302:	2600      	movs	r6, #0
 801b304:	42a6      	cmp	r6, r4
 801b306:	d109      	bne.n	801b31c <__libc_init_array+0x24>
 801b308:	4d0b      	ldr	r5, [pc, #44]	; (801b338 <__libc_init_array+0x40>)
 801b30a:	4c0c      	ldr	r4, [pc, #48]	; (801b33c <__libc_init_array+0x44>)
 801b30c:	f002 fcce 	bl	801dcac <_init>
 801b310:	1b64      	subs	r4, r4, r5
 801b312:	10a4      	asrs	r4, r4, #2
 801b314:	2600      	movs	r6, #0
 801b316:	42a6      	cmp	r6, r4
 801b318:	d105      	bne.n	801b326 <__libc_init_array+0x2e>
 801b31a:	bd70      	pop	{r4, r5, r6, pc}
 801b31c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b320:	4798      	blx	r3
 801b322:	3601      	adds	r6, #1
 801b324:	e7ee      	b.n	801b304 <__libc_init_array+0xc>
 801b326:	f855 3b04 	ldr.w	r3, [r5], #4
 801b32a:	4798      	blx	r3
 801b32c:	3601      	adds	r6, #1
 801b32e:	e7f2      	b.n	801b316 <__libc_init_array+0x1e>
 801b330:	0801e3b8 	.word	0x0801e3b8
 801b334:	0801e3b8 	.word	0x0801e3b8
 801b338:	0801e3b8 	.word	0x0801e3b8
 801b33c:	0801e3bc 	.word	0x0801e3bc

0801b340 <memcpy>:
 801b340:	440a      	add	r2, r1
 801b342:	4291      	cmp	r1, r2
 801b344:	f100 33ff 	add.w	r3, r0, #4294967295
 801b348:	d100      	bne.n	801b34c <memcpy+0xc>
 801b34a:	4770      	bx	lr
 801b34c:	b510      	push	{r4, lr}
 801b34e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b352:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b356:	4291      	cmp	r1, r2
 801b358:	d1f9      	bne.n	801b34e <memcpy+0xe>
 801b35a:	bd10      	pop	{r4, pc}

0801b35c <memset>:
 801b35c:	4402      	add	r2, r0
 801b35e:	4603      	mov	r3, r0
 801b360:	4293      	cmp	r3, r2
 801b362:	d100      	bne.n	801b366 <memset+0xa>
 801b364:	4770      	bx	lr
 801b366:	f803 1b01 	strb.w	r1, [r3], #1
 801b36a:	e7f9      	b.n	801b360 <memset+0x4>

0801b36c <sniprintf>:
 801b36c:	b40c      	push	{r2, r3}
 801b36e:	b530      	push	{r4, r5, lr}
 801b370:	4b17      	ldr	r3, [pc, #92]	; (801b3d0 <sniprintf+0x64>)
 801b372:	1e0c      	subs	r4, r1, #0
 801b374:	681d      	ldr	r5, [r3, #0]
 801b376:	b09d      	sub	sp, #116	; 0x74
 801b378:	da08      	bge.n	801b38c <sniprintf+0x20>
 801b37a:	238b      	movs	r3, #139	; 0x8b
 801b37c:	602b      	str	r3, [r5, #0]
 801b37e:	f04f 30ff 	mov.w	r0, #4294967295
 801b382:	b01d      	add	sp, #116	; 0x74
 801b384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b388:	b002      	add	sp, #8
 801b38a:	4770      	bx	lr
 801b38c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b390:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b394:	bf14      	ite	ne
 801b396:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b39a:	4623      	moveq	r3, r4
 801b39c:	9304      	str	r3, [sp, #16]
 801b39e:	9307      	str	r3, [sp, #28]
 801b3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b3a4:	9002      	str	r0, [sp, #8]
 801b3a6:	9006      	str	r0, [sp, #24]
 801b3a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b3ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b3ae:	ab21      	add	r3, sp, #132	; 0x84
 801b3b0:	a902      	add	r1, sp, #8
 801b3b2:	4628      	mov	r0, r5
 801b3b4:	9301      	str	r3, [sp, #4]
 801b3b6:	f000 f869 	bl	801b48c <_svfiprintf_r>
 801b3ba:	1c43      	adds	r3, r0, #1
 801b3bc:	bfbc      	itt	lt
 801b3be:	238b      	movlt	r3, #139	; 0x8b
 801b3c0:	602b      	strlt	r3, [r5, #0]
 801b3c2:	2c00      	cmp	r4, #0
 801b3c4:	d0dd      	beq.n	801b382 <sniprintf+0x16>
 801b3c6:	9b02      	ldr	r3, [sp, #8]
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	701a      	strb	r2, [r3, #0]
 801b3cc:	e7d9      	b.n	801b382 <sniprintf+0x16>
 801b3ce:	bf00      	nop
 801b3d0:	20001360 	.word	0x20001360

0801b3d4 <__ssputs_r>:
 801b3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3d8:	688e      	ldr	r6, [r1, #8]
 801b3da:	429e      	cmp	r6, r3
 801b3dc:	4682      	mov	sl, r0
 801b3de:	460c      	mov	r4, r1
 801b3e0:	4690      	mov	r8, r2
 801b3e2:	461f      	mov	r7, r3
 801b3e4:	d838      	bhi.n	801b458 <__ssputs_r+0x84>
 801b3e6:	898a      	ldrh	r2, [r1, #12]
 801b3e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b3ec:	d032      	beq.n	801b454 <__ssputs_r+0x80>
 801b3ee:	6825      	ldr	r5, [r4, #0]
 801b3f0:	6909      	ldr	r1, [r1, #16]
 801b3f2:	eba5 0901 	sub.w	r9, r5, r1
 801b3f6:	6965      	ldr	r5, [r4, #20]
 801b3f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b3fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b400:	3301      	adds	r3, #1
 801b402:	444b      	add	r3, r9
 801b404:	106d      	asrs	r5, r5, #1
 801b406:	429d      	cmp	r5, r3
 801b408:	bf38      	it	cc
 801b40a:	461d      	movcc	r5, r3
 801b40c:	0553      	lsls	r3, r2, #21
 801b40e:	d531      	bpl.n	801b474 <__ssputs_r+0xa0>
 801b410:	4629      	mov	r1, r5
 801b412:	f000 fb55 	bl	801bac0 <_malloc_r>
 801b416:	4606      	mov	r6, r0
 801b418:	b950      	cbnz	r0, 801b430 <__ssputs_r+0x5c>
 801b41a:	230c      	movs	r3, #12
 801b41c:	f8ca 3000 	str.w	r3, [sl]
 801b420:	89a3      	ldrh	r3, [r4, #12]
 801b422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b426:	81a3      	strh	r3, [r4, #12]
 801b428:	f04f 30ff 	mov.w	r0, #4294967295
 801b42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b430:	6921      	ldr	r1, [r4, #16]
 801b432:	464a      	mov	r2, r9
 801b434:	f7ff ff84 	bl	801b340 <memcpy>
 801b438:	89a3      	ldrh	r3, [r4, #12]
 801b43a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b43e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b442:	81a3      	strh	r3, [r4, #12]
 801b444:	6126      	str	r6, [r4, #16]
 801b446:	6165      	str	r5, [r4, #20]
 801b448:	444e      	add	r6, r9
 801b44a:	eba5 0509 	sub.w	r5, r5, r9
 801b44e:	6026      	str	r6, [r4, #0]
 801b450:	60a5      	str	r5, [r4, #8]
 801b452:	463e      	mov	r6, r7
 801b454:	42be      	cmp	r6, r7
 801b456:	d900      	bls.n	801b45a <__ssputs_r+0x86>
 801b458:	463e      	mov	r6, r7
 801b45a:	6820      	ldr	r0, [r4, #0]
 801b45c:	4632      	mov	r2, r6
 801b45e:	4641      	mov	r1, r8
 801b460:	f000 faa8 	bl	801b9b4 <memmove>
 801b464:	68a3      	ldr	r3, [r4, #8]
 801b466:	1b9b      	subs	r3, r3, r6
 801b468:	60a3      	str	r3, [r4, #8]
 801b46a:	6823      	ldr	r3, [r4, #0]
 801b46c:	4433      	add	r3, r6
 801b46e:	6023      	str	r3, [r4, #0]
 801b470:	2000      	movs	r0, #0
 801b472:	e7db      	b.n	801b42c <__ssputs_r+0x58>
 801b474:	462a      	mov	r2, r5
 801b476:	f000 fb97 	bl	801bba8 <_realloc_r>
 801b47a:	4606      	mov	r6, r0
 801b47c:	2800      	cmp	r0, #0
 801b47e:	d1e1      	bne.n	801b444 <__ssputs_r+0x70>
 801b480:	6921      	ldr	r1, [r4, #16]
 801b482:	4650      	mov	r0, sl
 801b484:	f000 fab0 	bl	801b9e8 <_free_r>
 801b488:	e7c7      	b.n	801b41a <__ssputs_r+0x46>
	...

0801b48c <_svfiprintf_r>:
 801b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b490:	4698      	mov	r8, r3
 801b492:	898b      	ldrh	r3, [r1, #12]
 801b494:	061b      	lsls	r3, r3, #24
 801b496:	b09d      	sub	sp, #116	; 0x74
 801b498:	4607      	mov	r7, r0
 801b49a:	460d      	mov	r5, r1
 801b49c:	4614      	mov	r4, r2
 801b49e:	d50e      	bpl.n	801b4be <_svfiprintf_r+0x32>
 801b4a0:	690b      	ldr	r3, [r1, #16]
 801b4a2:	b963      	cbnz	r3, 801b4be <_svfiprintf_r+0x32>
 801b4a4:	2140      	movs	r1, #64	; 0x40
 801b4a6:	f000 fb0b 	bl	801bac0 <_malloc_r>
 801b4aa:	6028      	str	r0, [r5, #0]
 801b4ac:	6128      	str	r0, [r5, #16]
 801b4ae:	b920      	cbnz	r0, 801b4ba <_svfiprintf_r+0x2e>
 801b4b0:	230c      	movs	r3, #12
 801b4b2:	603b      	str	r3, [r7, #0]
 801b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 801b4b8:	e0d1      	b.n	801b65e <_svfiprintf_r+0x1d2>
 801b4ba:	2340      	movs	r3, #64	; 0x40
 801b4bc:	616b      	str	r3, [r5, #20]
 801b4be:	2300      	movs	r3, #0
 801b4c0:	9309      	str	r3, [sp, #36]	; 0x24
 801b4c2:	2320      	movs	r3, #32
 801b4c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b4c8:	f8cd 800c 	str.w	r8, [sp, #12]
 801b4cc:	2330      	movs	r3, #48	; 0x30
 801b4ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b678 <_svfiprintf_r+0x1ec>
 801b4d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b4d6:	f04f 0901 	mov.w	r9, #1
 801b4da:	4623      	mov	r3, r4
 801b4dc:	469a      	mov	sl, r3
 801b4de:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b4e2:	b10a      	cbz	r2, 801b4e8 <_svfiprintf_r+0x5c>
 801b4e4:	2a25      	cmp	r2, #37	; 0x25
 801b4e6:	d1f9      	bne.n	801b4dc <_svfiprintf_r+0x50>
 801b4e8:	ebba 0b04 	subs.w	fp, sl, r4
 801b4ec:	d00b      	beq.n	801b506 <_svfiprintf_r+0x7a>
 801b4ee:	465b      	mov	r3, fp
 801b4f0:	4622      	mov	r2, r4
 801b4f2:	4629      	mov	r1, r5
 801b4f4:	4638      	mov	r0, r7
 801b4f6:	f7ff ff6d 	bl	801b3d4 <__ssputs_r>
 801b4fa:	3001      	adds	r0, #1
 801b4fc:	f000 80aa 	beq.w	801b654 <_svfiprintf_r+0x1c8>
 801b500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b502:	445a      	add	r2, fp
 801b504:	9209      	str	r2, [sp, #36]	; 0x24
 801b506:	f89a 3000 	ldrb.w	r3, [sl]
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	f000 80a2 	beq.w	801b654 <_svfiprintf_r+0x1c8>
 801b510:	2300      	movs	r3, #0
 801b512:	f04f 32ff 	mov.w	r2, #4294967295
 801b516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b51a:	f10a 0a01 	add.w	sl, sl, #1
 801b51e:	9304      	str	r3, [sp, #16]
 801b520:	9307      	str	r3, [sp, #28]
 801b522:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b526:	931a      	str	r3, [sp, #104]	; 0x68
 801b528:	4654      	mov	r4, sl
 801b52a:	2205      	movs	r2, #5
 801b52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b530:	4851      	ldr	r0, [pc, #324]	; (801b678 <_svfiprintf_r+0x1ec>)
 801b532:	f7e4 fe4d 	bl	80001d0 <memchr>
 801b536:	9a04      	ldr	r2, [sp, #16]
 801b538:	b9d8      	cbnz	r0, 801b572 <_svfiprintf_r+0xe6>
 801b53a:	06d0      	lsls	r0, r2, #27
 801b53c:	bf44      	itt	mi
 801b53e:	2320      	movmi	r3, #32
 801b540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b544:	0711      	lsls	r1, r2, #28
 801b546:	bf44      	itt	mi
 801b548:	232b      	movmi	r3, #43	; 0x2b
 801b54a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b54e:	f89a 3000 	ldrb.w	r3, [sl]
 801b552:	2b2a      	cmp	r3, #42	; 0x2a
 801b554:	d015      	beq.n	801b582 <_svfiprintf_r+0xf6>
 801b556:	9a07      	ldr	r2, [sp, #28]
 801b558:	4654      	mov	r4, sl
 801b55a:	2000      	movs	r0, #0
 801b55c:	f04f 0c0a 	mov.w	ip, #10
 801b560:	4621      	mov	r1, r4
 801b562:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b566:	3b30      	subs	r3, #48	; 0x30
 801b568:	2b09      	cmp	r3, #9
 801b56a:	d94e      	bls.n	801b60a <_svfiprintf_r+0x17e>
 801b56c:	b1b0      	cbz	r0, 801b59c <_svfiprintf_r+0x110>
 801b56e:	9207      	str	r2, [sp, #28]
 801b570:	e014      	b.n	801b59c <_svfiprintf_r+0x110>
 801b572:	eba0 0308 	sub.w	r3, r0, r8
 801b576:	fa09 f303 	lsl.w	r3, r9, r3
 801b57a:	4313      	orrs	r3, r2
 801b57c:	9304      	str	r3, [sp, #16]
 801b57e:	46a2      	mov	sl, r4
 801b580:	e7d2      	b.n	801b528 <_svfiprintf_r+0x9c>
 801b582:	9b03      	ldr	r3, [sp, #12]
 801b584:	1d19      	adds	r1, r3, #4
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	9103      	str	r1, [sp, #12]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	bfbb      	ittet	lt
 801b58e:	425b      	neglt	r3, r3
 801b590:	f042 0202 	orrlt.w	r2, r2, #2
 801b594:	9307      	strge	r3, [sp, #28]
 801b596:	9307      	strlt	r3, [sp, #28]
 801b598:	bfb8      	it	lt
 801b59a:	9204      	strlt	r2, [sp, #16]
 801b59c:	7823      	ldrb	r3, [r4, #0]
 801b59e:	2b2e      	cmp	r3, #46	; 0x2e
 801b5a0:	d10c      	bne.n	801b5bc <_svfiprintf_r+0x130>
 801b5a2:	7863      	ldrb	r3, [r4, #1]
 801b5a4:	2b2a      	cmp	r3, #42	; 0x2a
 801b5a6:	d135      	bne.n	801b614 <_svfiprintf_r+0x188>
 801b5a8:	9b03      	ldr	r3, [sp, #12]
 801b5aa:	1d1a      	adds	r2, r3, #4
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	9203      	str	r2, [sp, #12]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	bfb8      	it	lt
 801b5b4:	f04f 33ff 	movlt.w	r3, #4294967295
 801b5b8:	3402      	adds	r4, #2
 801b5ba:	9305      	str	r3, [sp, #20]
 801b5bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b688 <_svfiprintf_r+0x1fc>
 801b5c0:	7821      	ldrb	r1, [r4, #0]
 801b5c2:	2203      	movs	r2, #3
 801b5c4:	4650      	mov	r0, sl
 801b5c6:	f7e4 fe03 	bl	80001d0 <memchr>
 801b5ca:	b140      	cbz	r0, 801b5de <_svfiprintf_r+0x152>
 801b5cc:	2340      	movs	r3, #64	; 0x40
 801b5ce:	eba0 000a 	sub.w	r0, r0, sl
 801b5d2:	fa03 f000 	lsl.w	r0, r3, r0
 801b5d6:	9b04      	ldr	r3, [sp, #16]
 801b5d8:	4303      	orrs	r3, r0
 801b5da:	3401      	adds	r4, #1
 801b5dc:	9304      	str	r3, [sp, #16]
 801b5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5e2:	4826      	ldr	r0, [pc, #152]	; (801b67c <_svfiprintf_r+0x1f0>)
 801b5e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b5e8:	2206      	movs	r2, #6
 801b5ea:	f7e4 fdf1 	bl	80001d0 <memchr>
 801b5ee:	2800      	cmp	r0, #0
 801b5f0:	d038      	beq.n	801b664 <_svfiprintf_r+0x1d8>
 801b5f2:	4b23      	ldr	r3, [pc, #140]	; (801b680 <_svfiprintf_r+0x1f4>)
 801b5f4:	bb1b      	cbnz	r3, 801b63e <_svfiprintf_r+0x1b2>
 801b5f6:	9b03      	ldr	r3, [sp, #12]
 801b5f8:	3307      	adds	r3, #7
 801b5fa:	f023 0307 	bic.w	r3, r3, #7
 801b5fe:	3308      	adds	r3, #8
 801b600:	9303      	str	r3, [sp, #12]
 801b602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b604:	4433      	add	r3, r6
 801b606:	9309      	str	r3, [sp, #36]	; 0x24
 801b608:	e767      	b.n	801b4da <_svfiprintf_r+0x4e>
 801b60a:	fb0c 3202 	mla	r2, ip, r2, r3
 801b60e:	460c      	mov	r4, r1
 801b610:	2001      	movs	r0, #1
 801b612:	e7a5      	b.n	801b560 <_svfiprintf_r+0xd4>
 801b614:	2300      	movs	r3, #0
 801b616:	3401      	adds	r4, #1
 801b618:	9305      	str	r3, [sp, #20]
 801b61a:	4619      	mov	r1, r3
 801b61c:	f04f 0c0a 	mov.w	ip, #10
 801b620:	4620      	mov	r0, r4
 801b622:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b626:	3a30      	subs	r2, #48	; 0x30
 801b628:	2a09      	cmp	r2, #9
 801b62a:	d903      	bls.n	801b634 <_svfiprintf_r+0x1a8>
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d0c5      	beq.n	801b5bc <_svfiprintf_r+0x130>
 801b630:	9105      	str	r1, [sp, #20]
 801b632:	e7c3      	b.n	801b5bc <_svfiprintf_r+0x130>
 801b634:	fb0c 2101 	mla	r1, ip, r1, r2
 801b638:	4604      	mov	r4, r0
 801b63a:	2301      	movs	r3, #1
 801b63c:	e7f0      	b.n	801b620 <_svfiprintf_r+0x194>
 801b63e:	ab03      	add	r3, sp, #12
 801b640:	9300      	str	r3, [sp, #0]
 801b642:	462a      	mov	r2, r5
 801b644:	4b0f      	ldr	r3, [pc, #60]	; (801b684 <_svfiprintf_r+0x1f8>)
 801b646:	a904      	add	r1, sp, #16
 801b648:	4638      	mov	r0, r7
 801b64a:	f3af 8000 	nop.w
 801b64e:	1c42      	adds	r2, r0, #1
 801b650:	4606      	mov	r6, r0
 801b652:	d1d6      	bne.n	801b602 <_svfiprintf_r+0x176>
 801b654:	89ab      	ldrh	r3, [r5, #12]
 801b656:	065b      	lsls	r3, r3, #25
 801b658:	f53f af2c 	bmi.w	801b4b4 <_svfiprintf_r+0x28>
 801b65c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b65e:	b01d      	add	sp, #116	; 0x74
 801b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b664:	ab03      	add	r3, sp, #12
 801b666:	9300      	str	r3, [sp, #0]
 801b668:	462a      	mov	r2, r5
 801b66a:	4b06      	ldr	r3, [pc, #24]	; (801b684 <_svfiprintf_r+0x1f8>)
 801b66c:	a904      	add	r1, sp, #16
 801b66e:	4638      	mov	r0, r7
 801b670:	f000 f87a 	bl	801b768 <_printf_i>
 801b674:	e7eb      	b.n	801b64e <_svfiprintf_r+0x1c2>
 801b676:	bf00      	nop
 801b678:	0801df08 	.word	0x0801df08
 801b67c:	0801df12 	.word	0x0801df12
 801b680:	00000000 	.word	0x00000000
 801b684:	0801b3d5 	.word	0x0801b3d5
 801b688:	0801df0e 	.word	0x0801df0e

0801b68c <_printf_common>:
 801b68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b690:	4616      	mov	r6, r2
 801b692:	4699      	mov	r9, r3
 801b694:	688a      	ldr	r2, [r1, #8]
 801b696:	690b      	ldr	r3, [r1, #16]
 801b698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b69c:	4293      	cmp	r3, r2
 801b69e:	bfb8      	it	lt
 801b6a0:	4613      	movlt	r3, r2
 801b6a2:	6033      	str	r3, [r6, #0]
 801b6a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b6a8:	4607      	mov	r7, r0
 801b6aa:	460c      	mov	r4, r1
 801b6ac:	b10a      	cbz	r2, 801b6b2 <_printf_common+0x26>
 801b6ae:	3301      	adds	r3, #1
 801b6b0:	6033      	str	r3, [r6, #0]
 801b6b2:	6823      	ldr	r3, [r4, #0]
 801b6b4:	0699      	lsls	r1, r3, #26
 801b6b6:	bf42      	ittt	mi
 801b6b8:	6833      	ldrmi	r3, [r6, #0]
 801b6ba:	3302      	addmi	r3, #2
 801b6bc:	6033      	strmi	r3, [r6, #0]
 801b6be:	6825      	ldr	r5, [r4, #0]
 801b6c0:	f015 0506 	ands.w	r5, r5, #6
 801b6c4:	d106      	bne.n	801b6d4 <_printf_common+0x48>
 801b6c6:	f104 0a19 	add.w	sl, r4, #25
 801b6ca:	68e3      	ldr	r3, [r4, #12]
 801b6cc:	6832      	ldr	r2, [r6, #0]
 801b6ce:	1a9b      	subs	r3, r3, r2
 801b6d0:	42ab      	cmp	r3, r5
 801b6d2:	dc26      	bgt.n	801b722 <_printf_common+0x96>
 801b6d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b6d8:	1e13      	subs	r3, r2, #0
 801b6da:	6822      	ldr	r2, [r4, #0]
 801b6dc:	bf18      	it	ne
 801b6de:	2301      	movne	r3, #1
 801b6e0:	0692      	lsls	r2, r2, #26
 801b6e2:	d42b      	bmi.n	801b73c <_printf_common+0xb0>
 801b6e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b6e8:	4649      	mov	r1, r9
 801b6ea:	4638      	mov	r0, r7
 801b6ec:	47c0      	blx	r8
 801b6ee:	3001      	adds	r0, #1
 801b6f0:	d01e      	beq.n	801b730 <_printf_common+0xa4>
 801b6f2:	6823      	ldr	r3, [r4, #0]
 801b6f4:	68e5      	ldr	r5, [r4, #12]
 801b6f6:	6832      	ldr	r2, [r6, #0]
 801b6f8:	f003 0306 	and.w	r3, r3, #6
 801b6fc:	2b04      	cmp	r3, #4
 801b6fe:	bf08      	it	eq
 801b700:	1aad      	subeq	r5, r5, r2
 801b702:	68a3      	ldr	r3, [r4, #8]
 801b704:	6922      	ldr	r2, [r4, #16]
 801b706:	bf0c      	ite	eq
 801b708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b70c:	2500      	movne	r5, #0
 801b70e:	4293      	cmp	r3, r2
 801b710:	bfc4      	itt	gt
 801b712:	1a9b      	subgt	r3, r3, r2
 801b714:	18ed      	addgt	r5, r5, r3
 801b716:	2600      	movs	r6, #0
 801b718:	341a      	adds	r4, #26
 801b71a:	42b5      	cmp	r5, r6
 801b71c:	d11a      	bne.n	801b754 <_printf_common+0xc8>
 801b71e:	2000      	movs	r0, #0
 801b720:	e008      	b.n	801b734 <_printf_common+0xa8>
 801b722:	2301      	movs	r3, #1
 801b724:	4652      	mov	r2, sl
 801b726:	4649      	mov	r1, r9
 801b728:	4638      	mov	r0, r7
 801b72a:	47c0      	blx	r8
 801b72c:	3001      	adds	r0, #1
 801b72e:	d103      	bne.n	801b738 <_printf_common+0xac>
 801b730:	f04f 30ff 	mov.w	r0, #4294967295
 801b734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b738:	3501      	adds	r5, #1
 801b73a:	e7c6      	b.n	801b6ca <_printf_common+0x3e>
 801b73c:	18e1      	adds	r1, r4, r3
 801b73e:	1c5a      	adds	r2, r3, #1
 801b740:	2030      	movs	r0, #48	; 0x30
 801b742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b746:	4422      	add	r2, r4
 801b748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b74c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b750:	3302      	adds	r3, #2
 801b752:	e7c7      	b.n	801b6e4 <_printf_common+0x58>
 801b754:	2301      	movs	r3, #1
 801b756:	4622      	mov	r2, r4
 801b758:	4649      	mov	r1, r9
 801b75a:	4638      	mov	r0, r7
 801b75c:	47c0      	blx	r8
 801b75e:	3001      	adds	r0, #1
 801b760:	d0e6      	beq.n	801b730 <_printf_common+0xa4>
 801b762:	3601      	adds	r6, #1
 801b764:	e7d9      	b.n	801b71a <_printf_common+0x8e>
	...

0801b768 <_printf_i>:
 801b768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b76c:	7e0f      	ldrb	r7, [r1, #24]
 801b76e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b770:	2f78      	cmp	r7, #120	; 0x78
 801b772:	4691      	mov	r9, r2
 801b774:	4680      	mov	r8, r0
 801b776:	460c      	mov	r4, r1
 801b778:	469a      	mov	sl, r3
 801b77a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b77e:	d807      	bhi.n	801b790 <_printf_i+0x28>
 801b780:	2f62      	cmp	r7, #98	; 0x62
 801b782:	d80a      	bhi.n	801b79a <_printf_i+0x32>
 801b784:	2f00      	cmp	r7, #0
 801b786:	f000 80d8 	beq.w	801b93a <_printf_i+0x1d2>
 801b78a:	2f58      	cmp	r7, #88	; 0x58
 801b78c:	f000 80a3 	beq.w	801b8d6 <_printf_i+0x16e>
 801b790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b798:	e03a      	b.n	801b810 <_printf_i+0xa8>
 801b79a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b79e:	2b15      	cmp	r3, #21
 801b7a0:	d8f6      	bhi.n	801b790 <_printf_i+0x28>
 801b7a2:	a101      	add	r1, pc, #4	; (adr r1, 801b7a8 <_printf_i+0x40>)
 801b7a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b7a8:	0801b801 	.word	0x0801b801
 801b7ac:	0801b815 	.word	0x0801b815
 801b7b0:	0801b791 	.word	0x0801b791
 801b7b4:	0801b791 	.word	0x0801b791
 801b7b8:	0801b791 	.word	0x0801b791
 801b7bc:	0801b791 	.word	0x0801b791
 801b7c0:	0801b815 	.word	0x0801b815
 801b7c4:	0801b791 	.word	0x0801b791
 801b7c8:	0801b791 	.word	0x0801b791
 801b7cc:	0801b791 	.word	0x0801b791
 801b7d0:	0801b791 	.word	0x0801b791
 801b7d4:	0801b921 	.word	0x0801b921
 801b7d8:	0801b845 	.word	0x0801b845
 801b7dc:	0801b903 	.word	0x0801b903
 801b7e0:	0801b791 	.word	0x0801b791
 801b7e4:	0801b791 	.word	0x0801b791
 801b7e8:	0801b943 	.word	0x0801b943
 801b7ec:	0801b791 	.word	0x0801b791
 801b7f0:	0801b845 	.word	0x0801b845
 801b7f4:	0801b791 	.word	0x0801b791
 801b7f8:	0801b791 	.word	0x0801b791
 801b7fc:	0801b90b 	.word	0x0801b90b
 801b800:	682b      	ldr	r3, [r5, #0]
 801b802:	1d1a      	adds	r2, r3, #4
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	602a      	str	r2, [r5, #0]
 801b808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b80c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b810:	2301      	movs	r3, #1
 801b812:	e0a3      	b.n	801b95c <_printf_i+0x1f4>
 801b814:	6820      	ldr	r0, [r4, #0]
 801b816:	6829      	ldr	r1, [r5, #0]
 801b818:	0606      	lsls	r6, r0, #24
 801b81a:	f101 0304 	add.w	r3, r1, #4
 801b81e:	d50a      	bpl.n	801b836 <_printf_i+0xce>
 801b820:	680e      	ldr	r6, [r1, #0]
 801b822:	602b      	str	r3, [r5, #0]
 801b824:	2e00      	cmp	r6, #0
 801b826:	da03      	bge.n	801b830 <_printf_i+0xc8>
 801b828:	232d      	movs	r3, #45	; 0x2d
 801b82a:	4276      	negs	r6, r6
 801b82c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b830:	485e      	ldr	r0, [pc, #376]	; (801b9ac <_printf_i+0x244>)
 801b832:	230a      	movs	r3, #10
 801b834:	e019      	b.n	801b86a <_printf_i+0x102>
 801b836:	680e      	ldr	r6, [r1, #0]
 801b838:	602b      	str	r3, [r5, #0]
 801b83a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b83e:	bf18      	it	ne
 801b840:	b236      	sxthne	r6, r6
 801b842:	e7ef      	b.n	801b824 <_printf_i+0xbc>
 801b844:	682b      	ldr	r3, [r5, #0]
 801b846:	6820      	ldr	r0, [r4, #0]
 801b848:	1d19      	adds	r1, r3, #4
 801b84a:	6029      	str	r1, [r5, #0]
 801b84c:	0601      	lsls	r1, r0, #24
 801b84e:	d501      	bpl.n	801b854 <_printf_i+0xec>
 801b850:	681e      	ldr	r6, [r3, #0]
 801b852:	e002      	b.n	801b85a <_printf_i+0xf2>
 801b854:	0646      	lsls	r6, r0, #25
 801b856:	d5fb      	bpl.n	801b850 <_printf_i+0xe8>
 801b858:	881e      	ldrh	r6, [r3, #0]
 801b85a:	4854      	ldr	r0, [pc, #336]	; (801b9ac <_printf_i+0x244>)
 801b85c:	2f6f      	cmp	r7, #111	; 0x6f
 801b85e:	bf0c      	ite	eq
 801b860:	2308      	moveq	r3, #8
 801b862:	230a      	movne	r3, #10
 801b864:	2100      	movs	r1, #0
 801b866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b86a:	6865      	ldr	r5, [r4, #4]
 801b86c:	60a5      	str	r5, [r4, #8]
 801b86e:	2d00      	cmp	r5, #0
 801b870:	bfa2      	ittt	ge
 801b872:	6821      	ldrge	r1, [r4, #0]
 801b874:	f021 0104 	bicge.w	r1, r1, #4
 801b878:	6021      	strge	r1, [r4, #0]
 801b87a:	b90e      	cbnz	r6, 801b880 <_printf_i+0x118>
 801b87c:	2d00      	cmp	r5, #0
 801b87e:	d04d      	beq.n	801b91c <_printf_i+0x1b4>
 801b880:	4615      	mov	r5, r2
 801b882:	fbb6 f1f3 	udiv	r1, r6, r3
 801b886:	fb03 6711 	mls	r7, r3, r1, r6
 801b88a:	5dc7      	ldrb	r7, [r0, r7]
 801b88c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b890:	4637      	mov	r7, r6
 801b892:	42bb      	cmp	r3, r7
 801b894:	460e      	mov	r6, r1
 801b896:	d9f4      	bls.n	801b882 <_printf_i+0x11a>
 801b898:	2b08      	cmp	r3, #8
 801b89a:	d10b      	bne.n	801b8b4 <_printf_i+0x14c>
 801b89c:	6823      	ldr	r3, [r4, #0]
 801b89e:	07de      	lsls	r6, r3, #31
 801b8a0:	d508      	bpl.n	801b8b4 <_printf_i+0x14c>
 801b8a2:	6923      	ldr	r3, [r4, #16]
 801b8a4:	6861      	ldr	r1, [r4, #4]
 801b8a6:	4299      	cmp	r1, r3
 801b8a8:	bfde      	ittt	le
 801b8aa:	2330      	movle	r3, #48	; 0x30
 801b8ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b8b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b8b4:	1b52      	subs	r2, r2, r5
 801b8b6:	6122      	str	r2, [r4, #16]
 801b8b8:	f8cd a000 	str.w	sl, [sp]
 801b8bc:	464b      	mov	r3, r9
 801b8be:	aa03      	add	r2, sp, #12
 801b8c0:	4621      	mov	r1, r4
 801b8c2:	4640      	mov	r0, r8
 801b8c4:	f7ff fee2 	bl	801b68c <_printf_common>
 801b8c8:	3001      	adds	r0, #1
 801b8ca:	d14c      	bne.n	801b966 <_printf_i+0x1fe>
 801b8cc:	f04f 30ff 	mov.w	r0, #4294967295
 801b8d0:	b004      	add	sp, #16
 801b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8d6:	4835      	ldr	r0, [pc, #212]	; (801b9ac <_printf_i+0x244>)
 801b8d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b8dc:	6829      	ldr	r1, [r5, #0]
 801b8de:	6823      	ldr	r3, [r4, #0]
 801b8e0:	f851 6b04 	ldr.w	r6, [r1], #4
 801b8e4:	6029      	str	r1, [r5, #0]
 801b8e6:	061d      	lsls	r5, r3, #24
 801b8e8:	d514      	bpl.n	801b914 <_printf_i+0x1ac>
 801b8ea:	07df      	lsls	r7, r3, #31
 801b8ec:	bf44      	itt	mi
 801b8ee:	f043 0320 	orrmi.w	r3, r3, #32
 801b8f2:	6023      	strmi	r3, [r4, #0]
 801b8f4:	b91e      	cbnz	r6, 801b8fe <_printf_i+0x196>
 801b8f6:	6823      	ldr	r3, [r4, #0]
 801b8f8:	f023 0320 	bic.w	r3, r3, #32
 801b8fc:	6023      	str	r3, [r4, #0]
 801b8fe:	2310      	movs	r3, #16
 801b900:	e7b0      	b.n	801b864 <_printf_i+0xfc>
 801b902:	6823      	ldr	r3, [r4, #0]
 801b904:	f043 0320 	orr.w	r3, r3, #32
 801b908:	6023      	str	r3, [r4, #0]
 801b90a:	2378      	movs	r3, #120	; 0x78
 801b90c:	4828      	ldr	r0, [pc, #160]	; (801b9b0 <_printf_i+0x248>)
 801b90e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b912:	e7e3      	b.n	801b8dc <_printf_i+0x174>
 801b914:	0659      	lsls	r1, r3, #25
 801b916:	bf48      	it	mi
 801b918:	b2b6      	uxthmi	r6, r6
 801b91a:	e7e6      	b.n	801b8ea <_printf_i+0x182>
 801b91c:	4615      	mov	r5, r2
 801b91e:	e7bb      	b.n	801b898 <_printf_i+0x130>
 801b920:	682b      	ldr	r3, [r5, #0]
 801b922:	6826      	ldr	r6, [r4, #0]
 801b924:	6961      	ldr	r1, [r4, #20]
 801b926:	1d18      	adds	r0, r3, #4
 801b928:	6028      	str	r0, [r5, #0]
 801b92a:	0635      	lsls	r5, r6, #24
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	d501      	bpl.n	801b934 <_printf_i+0x1cc>
 801b930:	6019      	str	r1, [r3, #0]
 801b932:	e002      	b.n	801b93a <_printf_i+0x1d2>
 801b934:	0670      	lsls	r0, r6, #25
 801b936:	d5fb      	bpl.n	801b930 <_printf_i+0x1c8>
 801b938:	8019      	strh	r1, [r3, #0]
 801b93a:	2300      	movs	r3, #0
 801b93c:	6123      	str	r3, [r4, #16]
 801b93e:	4615      	mov	r5, r2
 801b940:	e7ba      	b.n	801b8b8 <_printf_i+0x150>
 801b942:	682b      	ldr	r3, [r5, #0]
 801b944:	1d1a      	adds	r2, r3, #4
 801b946:	602a      	str	r2, [r5, #0]
 801b948:	681d      	ldr	r5, [r3, #0]
 801b94a:	6862      	ldr	r2, [r4, #4]
 801b94c:	2100      	movs	r1, #0
 801b94e:	4628      	mov	r0, r5
 801b950:	f7e4 fc3e 	bl	80001d0 <memchr>
 801b954:	b108      	cbz	r0, 801b95a <_printf_i+0x1f2>
 801b956:	1b40      	subs	r0, r0, r5
 801b958:	6060      	str	r0, [r4, #4]
 801b95a:	6863      	ldr	r3, [r4, #4]
 801b95c:	6123      	str	r3, [r4, #16]
 801b95e:	2300      	movs	r3, #0
 801b960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b964:	e7a8      	b.n	801b8b8 <_printf_i+0x150>
 801b966:	6923      	ldr	r3, [r4, #16]
 801b968:	462a      	mov	r2, r5
 801b96a:	4649      	mov	r1, r9
 801b96c:	4640      	mov	r0, r8
 801b96e:	47d0      	blx	sl
 801b970:	3001      	adds	r0, #1
 801b972:	d0ab      	beq.n	801b8cc <_printf_i+0x164>
 801b974:	6823      	ldr	r3, [r4, #0]
 801b976:	079b      	lsls	r3, r3, #30
 801b978:	d413      	bmi.n	801b9a2 <_printf_i+0x23a>
 801b97a:	68e0      	ldr	r0, [r4, #12]
 801b97c:	9b03      	ldr	r3, [sp, #12]
 801b97e:	4298      	cmp	r0, r3
 801b980:	bfb8      	it	lt
 801b982:	4618      	movlt	r0, r3
 801b984:	e7a4      	b.n	801b8d0 <_printf_i+0x168>
 801b986:	2301      	movs	r3, #1
 801b988:	4632      	mov	r2, r6
 801b98a:	4649      	mov	r1, r9
 801b98c:	4640      	mov	r0, r8
 801b98e:	47d0      	blx	sl
 801b990:	3001      	adds	r0, #1
 801b992:	d09b      	beq.n	801b8cc <_printf_i+0x164>
 801b994:	3501      	adds	r5, #1
 801b996:	68e3      	ldr	r3, [r4, #12]
 801b998:	9903      	ldr	r1, [sp, #12]
 801b99a:	1a5b      	subs	r3, r3, r1
 801b99c:	42ab      	cmp	r3, r5
 801b99e:	dcf2      	bgt.n	801b986 <_printf_i+0x21e>
 801b9a0:	e7eb      	b.n	801b97a <_printf_i+0x212>
 801b9a2:	2500      	movs	r5, #0
 801b9a4:	f104 0619 	add.w	r6, r4, #25
 801b9a8:	e7f5      	b.n	801b996 <_printf_i+0x22e>
 801b9aa:	bf00      	nop
 801b9ac:	0801df19 	.word	0x0801df19
 801b9b0:	0801df2a 	.word	0x0801df2a

0801b9b4 <memmove>:
 801b9b4:	4288      	cmp	r0, r1
 801b9b6:	b510      	push	{r4, lr}
 801b9b8:	eb01 0402 	add.w	r4, r1, r2
 801b9bc:	d902      	bls.n	801b9c4 <memmove+0x10>
 801b9be:	4284      	cmp	r4, r0
 801b9c0:	4623      	mov	r3, r4
 801b9c2:	d807      	bhi.n	801b9d4 <memmove+0x20>
 801b9c4:	1e43      	subs	r3, r0, #1
 801b9c6:	42a1      	cmp	r1, r4
 801b9c8:	d008      	beq.n	801b9dc <memmove+0x28>
 801b9ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b9ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b9d2:	e7f8      	b.n	801b9c6 <memmove+0x12>
 801b9d4:	4402      	add	r2, r0
 801b9d6:	4601      	mov	r1, r0
 801b9d8:	428a      	cmp	r2, r1
 801b9da:	d100      	bne.n	801b9de <memmove+0x2a>
 801b9dc:	bd10      	pop	{r4, pc}
 801b9de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b9e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b9e6:	e7f7      	b.n	801b9d8 <memmove+0x24>

0801b9e8 <_free_r>:
 801b9e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b9ea:	2900      	cmp	r1, #0
 801b9ec:	d044      	beq.n	801ba78 <_free_r+0x90>
 801b9ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b9f2:	9001      	str	r0, [sp, #4]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	f1a1 0404 	sub.w	r4, r1, #4
 801b9fa:	bfb8      	it	lt
 801b9fc:	18e4      	addlt	r4, r4, r3
 801b9fe:	f000 f913 	bl	801bc28 <__malloc_lock>
 801ba02:	4a1e      	ldr	r2, [pc, #120]	; (801ba7c <_free_r+0x94>)
 801ba04:	9801      	ldr	r0, [sp, #4]
 801ba06:	6813      	ldr	r3, [r2, #0]
 801ba08:	b933      	cbnz	r3, 801ba18 <_free_r+0x30>
 801ba0a:	6063      	str	r3, [r4, #4]
 801ba0c:	6014      	str	r4, [r2, #0]
 801ba0e:	b003      	add	sp, #12
 801ba10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba14:	f000 b90e 	b.w	801bc34 <__malloc_unlock>
 801ba18:	42a3      	cmp	r3, r4
 801ba1a:	d908      	bls.n	801ba2e <_free_r+0x46>
 801ba1c:	6825      	ldr	r5, [r4, #0]
 801ba1e:	1961      	adds	r1, r4, r5
 801ba20:	428b      	cmp	r3, r1
 801ba22:	bf01      	itttt	eq
 801ba24:	6819      	ldreq	r1, [r3, #0]
 801ba26:	685b      	ldreq	r3, [r3, #4]
 801ba28:	1949      	addeq	r1, r1, r5
 801ba2a:	6021      	streq	r1, [r4, #0]
 801ba2c:	e7ed      	b.n	801ba0a <_free_r+0x22>
 801ba2e:	461a      	mov	r2, r3
 801ba30:	685b      	ldr	r3, [r3, #4]
 801ba32:	b10b      	cbz	r3, 801ba38 <_free_r+0x50>
 801ba34:	42a3      	cmp	r3, r4
 801ba36:	d9fa      	bls.n	801ba2e <_free_r+0x46>
 801ba38:	6811      	ldr	r1, [r2, #0]
 801ba3a:	1855      	adds	r5, r2, r1
 801ba3c:	42a5      	cmp	r5, r4
 801ba3e:	d10b      	bne.n	801ba58 <_free_r+0x70>
 801ba40:	6824      	ldr	r4, [r4, #0]
 801ba42:	4421      	add	r1, r4
 801ba44:	1854      	adds	r4, r2, r1
 801ba46:	42a3      	cmp	r3, r4
 801ba48:	6011      	str	r1, [r2, #0]
 801ba4a:	d1e0      	bne.n	801ba0e <_free_r+0x26>
 801ba4c:	681c      	ldr	r4, [r3, #0]
 801ba4e:	685b      	ldr	r3, [r3, #4]
 801ba50:	6053      	str	r3, [r2, #4]
 801ba52:	4421      	add	r1, r4
 801ba54:	6011      	str	r1, [r2, #0]
 801ba56:	e7da      	b.n	801ba0e <_free_r+0x26>
 801ba58:	d902      	bls.n	801ba60 <_free_r+0x78>
 801ba5a:	230c      	movs	r3, #12
 801ba5c:	6003      	str	r3, [r0, #0]
 801ba5e:	e7d6      	b.n	801ba0e <_free_r+0x26>
 801ba60:	6825      	ldr	r5, [r4, #0]
 801ba62:	1961      	adds	r1, r4, r5
 801ba64:	428b      	cmp	r3, r1
 801ba66:	bf04      	itt	eq
 801ba68:	6819      	ldreq	r1, [r3, #0]
 801ba6a:	685b      	ldreq	r3, [r3, #4]
 801ba6c:	6063      	str	r3, [r4, #4]
 801ba6e:	bf04      	itt	eq
 801ba70:	1949      	addeq	r1, r1, r5
 801ba72:	6021      	streq	r1, [r4, #0]
 801ba74:	6054      	str	r4, [r2, #4]
 801ba76:	e7ca      	b.n	801ba0e <_free_r+0x26>
 801ba78:	b003      	add	sp, #12
 801ba7a:	bd30      	pop	{r4, r5, pc}
 801ba7c:	200026a0 	.word	0x200026a0

0801ba80 <sbrk_aligned>:
 801ba80:	b570      	push	{r4, r5, r6, lr}
 801ba82:	4e0e      	ldr	r6, [pc, #56]	; (801babc <sbrk_aligned+0x3c>)
 801ba84:	460c      	mov	r4, r1
 801ba86:	6831      	ldr	r1, [r6, #0]
 801ba88:	4605      	mov	r5, r0
 801ba8a:	b911      	cbnz	r1, 801ba92 <sbrk_aligned+0x12>
 801ba8c:	f000 f8bc 	bl	801bc08 <_sbrk_r>
 801ba90:	6030      	str	r0, [r6, #0]
 801ba92:	4621      	mov	r1, r4
 801ba94:	4628      	mov	r0, r5
 801ba96:	f000 f8b7 	bl	801bc08 <_sbrk_r>
 801ba9a:	1c43      	adds	r3, r0, #1
 801ba9c:	d00a      	beq.n	801bab4 <sbrk_aligned+0x34>
 801ba9e:	1cc4      	adds	r4, r0, #3
 801baa0:	f024 0403 	bic.w	r4, r4, #3
 801baa4:	42a0      	cmp	r0, r4
 801baa6:	d007      	beq.n	801bab8 <sbrk_aligned+0x38>
 801baa8:	1a21      	subs	r1, r4, r0
 801baaa:	4628      	mov	r0, r5
 801baac:	f000 f8ac 	bl	801bc08 <_sbrk_r>
 801bab0:	3001      	adds	r0, #1
 801bab2:	d101      	bne.n	801bab8 <sbrk_aligned+0x38>
 801bab4:	f04f 34ff 	mov.w	r4, #4294967295
 801bab8:	4620      	mov	r0, r4
 801baba:	bd70      	pop	{r4, r5, r6, pc}
 801babc:	200026a4 	.word	0x200026a4

0801bac0 <_malloc_r>:
 801bac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bac4:	1ccd      	adds	r5, r1, #3
 801bac6:	f025 0503 	bic.w	r5, r5, #3
 801baca:	3508      	adds	r5, #8
 801bacc:	2d0c      	cmp	r5, #12
 801bace:	bf38      	it	cc
 801bad0:	250c      	movcc	r5, #12
 801bad2:	2d00      	cmp	r5, #0
 801bad4:	4607      	mov	r7, r0
 801bad6:	db01      	blt.n	801badc <_malloc_r+0x1c>
 801bad8:	42a9      	cmp	r1, r5
 801bada:	d905      	bls.n	801bae8 <_malloc_r+0x28>
 801badc:	230c      	movs	r3, #12
 801bade:	603b      	str	r3, [r7, #0]
 801bae0:	2600      	movs	r6, #0
 801bae2:	4630      	mov	r0, r6
 801bae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bae8:	4e2e      	ldr	r6, [pc, #184]	; (801bba4 <_malloc_r+0xe4>)
 801baea:	f000 f89d 	bl	801bc28 <__malloc_lock>
 801baee:	6833      	ldr	r3, [r6, #0]
 801baf0:	461c      	mov	r4, r3
 801baf2:	bb34      	cbnz	r4, 801bb42 <_malloc_r+0x82>
 801baf4:	4629      	mov	r1, r5
 801baf6:	4638      	mov	r0, r7
 801baf8:	f7ff ffc2 	bl	801ba80 <sbrk_aligned>
 801bafc:	1c43      	adds	r3, r0, #1
 801bafe:	4604      	mov	r4, r0
 801bb00:	d14d      	bne.n	801bb9e <_malloc_r+0xde>
 801bb02:	6834      	ldr	r4, [r6, #0]
 801bb04:	4626      	mov	r6, r4
 801bb06:	2e00      	cmp	r6, #0
 801bb08:	d140      	bne.n	801bb8c <_malloc_r+0xcc>
 801bb0a:	6823      	ldr	r3, [r4, #0]
 801bb0c:	4631      	mov	r1, r6
 801bb0e:	4638      	mov	r0, r7
 801bb10:	eb04 0803 	add.w	r8, r4, r3
 801bb14:	f000 f878 	bl	801bc08 <_sbrk_r>
 801bb18:	4580      	cmp	r8, r0
 801bb1a:	d13a      	bne.n	801bb92 <_malloc_r+0xd2>
 801bb1c:	6821      	ldr	r1, [r4, #0]
 801bb1e:	3503      	adds	r5, #3
 801bb20:	1a6d      	subs	r5, r5, r1
 801bb22:	f025 0503 	bic.w	r5, r5, #3
 801bb26:	3508      	adds	r5, #8
 801bb28:	2d0c      	cmp	r5, #12
 801bb2a:	bf38      	it	cc
 801bb2c:	250c      	movcc	r5, #12
 801bb2e:	4629      	mov	r1, r5
 801bb30:	4638      	mov	r0, r7
 801bb32:	f7ff ffa5 	bl	801ba80 <sbrk_aligned>
 801bb36:	3001      	adds	r0, #1
 801bb38:	d02b      	beq.n	801bb92 <_malloc_r+0xd2>
 801bb3a:	6823      	ldr	r3, [r4, #0]
 801bb3c:	442b      	add	r3, r5
 801bb3e:	6023      	str	r3, [r4, #0]
 801bb40:	e00e      	b.n	801bb60 <_malloc_r+0xa0>
 801bb42:	6822      	ldr	r2, [r4, #0]
 801bb44:	1b52      	subs	r2, r2, r5
 801bb46:	d41e      	bmi.n	801bb86 <_malloc_r+0xc6>
 801bb48:	2a0b      	cmp	r2, #11
 801bb4a:	d916      	bls.n	801bb7a <_malloc_r+0xba>
 801bb4c:	1961      	adds	r1, r4, r5
 801bb4e:	42a3      	cmp	r3, r4
 801bb50:	6025      	str	r5, [r4, #0]
 801bb52:	bf18      	it	ne
 801bb54:	6059      	strne	r1, [r3, #4]
 801bb56:	6863      	ldr	r3, [r4, #4]
 801bb58:	bf08      	it	eq
 801bb5a:	6031      	streq	r1, [r6, #0]
 801bb5c:	5162      	str	r2, [r4, r5]
 801bb5e:	604b      	str	r3, [r1, #4]
 801bb60:	4638      	mov	r0, r7
 801bb62:	f104 060b 	add.w	r6, r4, #11
 801bb66:	f000 f865 	bl	801bc34 <__malloc_unlock>
 801bb6a:	f026 0607 	bic.w	r6, r6, #7
 801bb6e:	1d23      	adds	r3, r4, #4
 801bb70:	1af2      	subs	r2, r6, r3
 801bb72:	d0b6      	beq.n	801bae2 <_malloc_r+0x22>
 801bb74:	1b9b      	subs	r3, r3, r6
 801bb76:	50a3      	str	r3, [r4, r2]
 801bb78:	e7b3      	b.n	801bae2 <_malloc_r+0x22>
 801bb7a:	6862      	ldr	r2, [r4, #4]
 801bb7c:	42a3      	cmp	r3, r4
 801bb7e:	bf0c      	ite	eq
 801bb80:	6032      	streq	r2, [r6, #0]
 801bb82:	605a      	strne	r2, [r3, #4]
 801bb84:	e7ec      	b.n	801bb60 <_malloc_r+0xa0>
 801bb86:	4623      	mov	r3, r4
 801bb88:	6864      	ldr	r4, [r4, #4]
 801bb8a:	e7b2      	b.n	801baf2 <_malloc_r+0x32>
 801bb8c:	4634      	mov	r4, r6
 801bb8e:	6876      	ldr	r6, [r6, #4]
 801bb90:	e7b9      	b.n	801bb06 <_malloc_r+0x46>
 801bb92:	230c      	movs	r3, #12
 801bb94:	603b      	str	r3, [r7, #0]
 801bb96:	4638      	mov	r0, r7
 801bb98:	f000 f84c 	bl	801bc34 <__malloc_unlock>
 801bb9c:	e7a1      	b.n	801bae2 <_malloc_r+0x22>
 801bb9e:	6025      	str	r5, [r4, #0]
 801bba0:	e7de      	b.n	801bb60 <_malloc_r+0xa0>
 801bba2:	bf00      	nop
 801bba4:	200026a0 	.word	0x200026a0

0801bba8 <_realloc_r>:
 801bba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbac:	4680      	mov	r8, r0
 801bbae:	4614      	mov	r4, r2
 801bbb0:	460e      	mov	r6, r1
 801bbb2:	b921      	cbnz	r1, 801bbbe <_realloc_r+0x16>
 801bbb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bbb8:	4611      	mov	r1, r2
 801bbba:	f7ff bf81 	b.w	801bac0 <_malloc_r>
 801bbbe:	b92a      	cbnz	r2, 801bbcc <_realloc_r+0x24>
 801bbc0:	f7ff ff12 	bl	801b9e8 <_free_r>
 801bbc4:	4625      	mov	r5, r4
 801bbc6:	4628      	mov	r0, r5
 801bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbcc:	f000 f838 	bl	801bc40 <_malloc_usable_size_r>
 801bbd0:	4284      	cmp	r4, r0
 801bbd2:	4607      	mov	r7, r0
 801bbd4:	d802      	bhi.n	801bbdc <_realloc_r+0x34>
 801bbd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bbda:	d812      	bhi.n	801bc02 <_realloc_r+0x5a>
 801bbdc:	4621      	mov	r1, r4
 801bbde:	4640      	mov	r0, r8
 801bbe0:	f7ff ff6e 	bl	801bac0 <_malloc_r>
 801bbe4:	4605      	mov	r5, r0
 801bbe6:	2800      	cmp	r0, #0
 801bbe8:	d0ed      	beq.n	801bbc6 <_realloc_r+0x1e>
 801bbea:	42bc      	cmp	r4, r7
 801bbec:	4622      	mov	r2, r4
 801bbee:	4631      	mov	r1, r6
 801bbf0:	bf28      	it	cs
 801bbf2:	463a      	movcs	r2, r7
 801bbf4:	f7ff fba4 	bl	801b340 <memcpy>
 801bbf8:	4631      	mov	r1, r6
 801bbfa:	4640      	mov	r0, r8
 801bbfc:	f7ff fef4 	bl	801b9e8 <_free_r>
 801bc00:	e7e1      	b.n	801bbc6 <_realloc_r+0x1e>
 801bc02:	4635      	mov	r5, r6
 801bc04:	e7df      	b.n	801bbc6 <_realloc_r+0x1e>
	...

0801bc08 <_sbrk_r>:
 801bc08:	b538      	push	{r3, r4, r5, lr}
 801bc0a:	4d06      	ldr	r5, [pc, #24]	; (801bc24 <_sbrk_r+0x1c>)
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	4604      	mov	r4, r0
 801bc10:	4608      	mov	r0, r1
 801bc12:	602b      	str	r3, [r5, #0]
 801bc14:	f7f4 fcbc 	bl	8010590 <_sbrk>
 801bc18:	1c43      	adds	r3, r0, #1
 801bc1a:	d102      	bne.n	801bc22 <_sbrk_r+0x1a>
 801bc1c:	682b      	ldr	r3, [r5, #0]
 801bc1e:	b103      	cbz	r3, 801bc22 <_sbrk_r+0x1a>
 801bc20:	6023      	str	r3, [r4, #0]
 801bc22:	bd38      	pop	{r3, r4, r5, pc}
 801bc24:	200026a8 	.word	0x200026a8

0801bc28 <__malloc_lock>:
 801bc28:	4801      	ldr	r0, [pc, #4]	; (801bc30 <__malloc_lock+0x8>)
 801bc2a:	f000 b811 	b.w	801bc50 <__retarget_lock_acquire_recursive>
 801bc2e:	bf00      	nop
 801bc30:	200026ac 	.word	0x200026ac

0801bc34 <__malloc_unlock>:
 801bc34:	4801      	ldr	r0, [pc, #4]	; (801bc3c <__malloc_unlock+0x8>)
 801bc36:	f000 b80c 	b.w	801bc52 <__retarget_lock_release_recursive>
 801bc3a:	bf00      	nop
 801bc3c:	200026ac 	.word	0x200026ac

0801bc40 <_malloc_usable_size_r>:
 801bc40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc44:	1f18      	subs	r0, r3, #4
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	bfbc      	itt	lt
 801bc4a:	580b      	ldrlt	r3, [r1, r0]
 801bc4c:	18c0      	addlt	r0, r0, r3
 801bc4e:	4770      	bx	lr

0801bc50 <__retarget_lock_acquire_recursive>:
 801bc50:	4770      	bx	lr

0801bc52 <__retarget_lock_release_recursive>:
 801bc52:	4770      	bx	lr
 801bc54:	0000      	movs	r0, r0
	...

0801bc58 <floor>:
 801bc58:	ec51 0b10 	vmov	r0, r1, d0
 801bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801bc64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801bc68:	2e13      	cmp	r6, #19
 801bc6a:	ee10 5a10 	vmov	r5, s0
 801bc6e:	ee10 8a10 	vmov	r8, s0
 801bc72:	460c      	mov	r4, r1
 801bc74:	dc32      	bgt.n	801bcdc <floor+0x84>
 801bc76:	2e00      	cmp	r6, #0
 801bc78:	da14      	bge.n	801bca4 <floor+0x4c>
 801bc7a:	a333      	add	r3, pc, #204	; (adr r3, 801bd48 <floor+0xf0>)
 801bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc80:	f7e4 fafc 	bl	800027c <__adddf3>
 801bc84:	2200      	movs	r2, #0
 801bc86:	2300      	movs	r3, #0
 801bc88:	f7e4 ff3e 	bl	8000b08 <__aeabi_dcmpgt>
 801bc8c:	b138      	cbz	r0, 801bc9e <floor+0x46>
 801bc8e:	2c00      	cmp	r4, #0
 801bc90:	da57      	bge.n	801bd42 <floor+0xea>
 801bc92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801bc96:	431d      	orrs	r5, r3
 801bc98:	d001      	beq.n	801bc9e <floor+0x46>
 801bc9a:	4c2d      	ldr	r4, [pc, #180]	; (801bd50 <floor+0xf8>)
 801bc9c:	2500      	movs	r5, #0
 801bc9e:	4621      	mov	r1, r4
 801bca0:	4628      	mov	r0, r5
 801bca2:	e025      	b.n	801bcf0 <floor+0x98>
 801bca4:	4f2b      	ldr	r7, [pc, #172]	; (801bd54 <floor+0xfc>)
 801bca6:	4137      	asrs	r7, r6
 801bca8:	ea01 0307 	and.w	r3, r1, r7
 801bcac:	4303      	orrs	r3, r0
 801bcae:	d01f      	beq.n	801bcf0 <floor+0x98>
 801bcb0:	a325      	add	r3, pc, #148	; (adr r3, 801bd48 <floor+0xf0>)
 801bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcb6:	f7e4 fae1 	bl	800027c <__adddf3>
 801bcba:	2200      	movs	r2, #0
 801bcbc:	2300      	movs	r3, #0
 801bcbe:	f7e4 ff23 	bl	8000b08 <__aeabi_dcmpgt>
 801bcc2:	2800      	cmp	r0, #0
 801bcc4:	d0eb      	beq.n	801bc9e <floor+0x46>
 801bcc6:	2c00      	cmp	r4, #0
 801bcc8:	bfbe      	ittt	lt
 801bcca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801bcce:	fa43 f606 	asrlt.w	r6, r3, r6
 801bcd2:	19a4      	addlt	r4, r4, r6
 801bcd4:	ea24 0407 	bic.w	r4, r4, r7
 801bcd8:	2500      	movs	r5, #0
 801bcda:	e7e0      	b.n	801bc9e <floor+0x46>
 801bcdc:	2e33      	cmp	r6, #51	; 0x33
 801bcde:	dd0b      	ble.n	801bcf8 <floor+0xa0>
 801bce0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801bce4:	d104      	bne.n	801bcf0 <floor+0x98>
 801bce6:	ee10 2a10 	vmov	r2, s0
 801bcea:	460b      	mov	r3, r1
 801bcec:	f7e4 fac6 	bl	800027c <__adddf3>
 801bcf0:	ec41 0b10 	vmov	d0, r0, r1
 801bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcf8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801bcfc:	f04f 33ff 	mov.w	r3, #4294967295
 801bd00:	fa23 f707 	lsr.w	r7, r3, r7
 801bd04:	4207      	tst	r7, r0
 801bd06:	d0f3      	beq.n	801bcf0 <floor+0x98>
 801bd08:	a30f      	add	r3, pc, #60	; (adr r3, 801bd48 <floor+0xf0>)
 801bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd0e:	f7e4 fab5 	bl	800027c <__adddf3>
 801bd12:	2200      	movs	r2, #0
 801bd14:	2300      	movs	r3, #0
 801bd16:	f7e4 fef7 	bl	8000b08 <__aeabi_dcmpgt>
 801bd1a:	2800      	cmp	r0, #0
 801bd1c:	d0bf      	beq.n	801bc9e <floor+0x46>
 801bd1e:	2c00      	cmp	r4, #0
 801bd20:	da02      	bge.n	801bd28 <floor+0xd0>
 801bd22:	2e14      	cmp	r6, #20
 801bd24:	d103      	bne.n	801bd2e <floor+0xd6>
 801bd26:	3401      	adds	r4, #1
 801bd28:	ea25 0507 	bic.w	r5, r5, r7
 801bd2c:	e7b7      	b.n	801bc9e <floor+0x46>
 801bd2e:	2301      	movs	r3, #1
 801bd30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801bd34:	fa03 f606 	lsl.w	r6, r3, r6
 801bd38:	4435      	add	r5, r6
 801bd3a:	4545      	cmp	r5, r8
 801bd3c:	bf38      	it	cc
 801bd3e:	18e4      	addcc	r4, r4, r3
 801bd40:	e7f2      	b.n	801bd28 <floor+0xd0>
 801bd42:	2500      	movs	r5, #0
 801bd44:	462c      	mov	r4, r5
 801bd46:	e7aa      	b.n	801bc9e <floor+0x46>
 801bd48:	8800759c 	.word	0x8800759c
 801bd4c:	7e37e43c 	.word	0x7e37e43c
 801bd50:	bff00000 	.word	0xbff00000
 801bd54:	000fffff 	.word	0x000fffff

0801bd58 <cosf>:
 801bd58:	ee10 3a10 	vmov	r3, s0
 801bd5c:	b507      	push	{r0, r1, r2, lr}
 801bd5e:	4a1e      	ldr	r2, [pc, #120]	; (801bdd8 <cosf+0x80>)
 801bd60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bd64:	4293      	cmp	r3, r2
 801bd66:	dc06      	bgt.n	801bd76 <cosf+0x1e>
 801bd68:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801bddc <cosf+0x84>
 801bd6c:	b003      	add	sp, #12
 801bd6e:	f85d eb04 	ldr.w	lr, [sp], #4
 801bd72:	f001 b8ed 	b.w	801cf50 <__kernel_cosf>
 801bd76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bd7a:	db04      	blt.n	801bd86 <cosf+0x2e>
 801bd7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 801bd80:	b003      	add	sp, #12
 801bd82:	f85d fb04 	ldr.w	pc, [sp], #4
 801bd86:	4668      	mov	r0, sp
 801bd88:	f000 ffa2 	bl	801ccd0 <__ieee754_rem_pio2f>
 801bd8c:	f000 0003 	and.w	r0, r0, #3
 801bd90:	2801      	cmp	r0, #1
 801bd92:	d009      	beq.n	801bda8 <cosf+0x50>
 801bd94:	2802      	cmp	r0, #2
 801bd96:	d010      	beq.n	801bdba <cosf+0x62>
 801bd98:	b9b0      	cbnz	r0, 801bdc8 <cosf+0x70>
 801bd9a:	eddd 0a01 	vldr	s1, [sp, #4]
 801bd9e:	ed9d 0a00 	vldr	s0, [sp]
 801bda2:	f001 f8d5 	bl	801cf50 <__kernel_cosf>
 801bda6:	e7eb      	b.n	801bd80 <cosf+0x28>
 801bda8:	eddd 0a01 	vldr	s1, [sp, #4]
 801bdac:	ed9d 0a00 	vldr	s0, [sp]
 801bdb0:	f001 fba4 	bl	801d4fc <__kernel_sinf>
 801bdb4:	eeb1 0a40 	vneg.f32	s0, s0
 801bdb8:	e7e2      	b.n	801bd80 <cosf+0x28>
 801bdba:	eddd 0a01 	vldr	s1, [sp, #4]
 801bdbe:	ed9d 0a00 	vldr	s0, [sp]
 801bdc2:	f001 f8c5 	bl	801cf50 <__kernel_cosf>
 801bdc6:	e7f5      	b.n	801bdb4 <cosf+0x5c>
 801bdc8:	eddd 0a01 	vldr	s1, [sp, #4]
 801bdcc:	ed9d 0a00 	vldr	s0, [sp]
 801bdd0:	2001      	movs	r0, #1
 801bdd2:	f001 fb93 	bl	801d4fc <__kernel_sinf>
 801bdd6:	e7d3      	b.n	801bd80 <cosf+0x28>
 801bdd8:	3f490fd8 	.word	0x3f490fd8
 801bddc:	00000000 	.word	0x00000000

0801bde0 <roundf>:
 801bde0:	ee10 0a10 	vmov	r0, s0
 801bde4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801bde8:	3a7f      	subs	r2, #127	; 0x7f
 801bdea:	2a16      	cmp	r2, #22
 801bdec:	dc15      	bgt.n	801be1a <roundf+0x3a>
 801bdee:	2a00      	cmp	r2, #0
 801bdf0:	da08      	bge.n	801be04 <roundf+0x24>
 801bdf2:	3201      	adds	r2, #1
 801bdf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801bdf8:	d101      	bne.n	801bdfe <roundf+0x1e>
 801bdfa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801bdfe:	ee00 3a10 	vmov	s0, r3
 801be02:	4770      	bx	lr
 801be04:	4907      	ldr	r1, [pc, #28]	; (801be24 <roundf+0x44>)
 801be06:	4111      	asrs	r1, r2
 801be08:	4208      	tst	r0, r1
 801be0a:	d0fa      	beq.n	801be02 <roundf+0x22>
 801be0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801be10:	4113      	asrs	r3, r2
 801be12:	4403      	add	r3, r0
 801be14:	ea23 0301 	bic.w	r3, r3, r1
 801be18:	e7f1      	b.n	801bdfe <roundf+0x1e>
 801be1a:	2a80      	cmp	r2, #128	; 0x80
 801be1c:	d1f1      	bne.n	801be02 <roundf+0x22>
 801be1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801be22:	4770      	bx	lr
 801be24:	007fffff 	.word	0x007fffff

0801be28 <sinf>:
 801be28:	ee10 3a10 	vmov	r3, s0
 801be2c:	b507      	push	{r0, r1, r2, lr}
 801be2e:	4a1f      	ldr	r2, [pc, #124]	; (801beac <sinf+0x84>)
 801be30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801be34:	4293      	cmp	r3, r2
 801be36:	dc07      	bgt.n	801be48 <sinf+0x20>
 801be38:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801beb0 <sinf+0x88>
 801be3c:	2000      	movs	r0, #0
 801be3e:	b003      	add	sp, #12
 801be40:	f85d eb04 	ldr.w	lr, [sp], #4
 801be44:	f001 bb5a 	b.w	801d4fc <__kernel_sinf>
 801be48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801be4c:	db04      	blt.n	801be58 <sinf+0x30>
 801be4e:	ee30 0a40 	vsub.f32	s0, s0, s0
 801be52:	b003      	add	sp, #12
 801be54:	f85d fb04 	ldr.w	pc, [sp], #4
 801be58:	4668      	mov	r0, sp
 801be5a:	f000 ff39 	bl	801ccd0 <__ieee754_rem_pio2f>
 801be5e:	f000 0003 	and.w	r0, r0, #3
 801be62:	2801      	cmp	r0, #1
 801be64:	d00a      	beq.n	801be7c <sinf+0x54>
 801be66:	2802      	cmp	r0, #2
 801be68:	d00f      	beq.n	801be8a <sinf+0x62>
 801be6a:	b9c0      	cbnz	r0, 801be9e <sinf+0x76>
 801be6c:	eddd 0a01 	vldr	s1, [sp, #4]
 801be70:	ed9d 0a00 	vldr	s0, [sp]
 801be74:	2001      	movs	r0, #1
 801be76:	f001 fb41 	bl	801d4fc <__kernel_sinf>
 801be7a:	e7ea      	b.n	801be52 <sinf+0x2a>
 801be7c:	eddd 0a01 	vldr	s1, [sp, #4]
 801be80:	ed9d 0a00 	vldr	s0, [sp]
 801be84:	f001 f864 	bl	801cf50 <__kernel_cosf>
 801be88:	e7e3      	b.n	801be52 <sinf+0x2a>
 801be8a:	eddd 0a01 	vldr	s1, [sp, #4]
 801be8e:	ed9d 0a00 	vldr	s0, [sp]
 801be92:	2001      	movs	r0, #1
 801be94:	f001 fb32 	bl	801d4fc <__kernel_sinf>
 801be98:	eeb1 0a40 	vneg.f32	s0, s0
 801be9c:	e7d9      	b.n	801be52 <sinf+0x2a>
 801be9e:	eddd 0a01 	vldr	s1, [sp, #4]
 801bea2:	ed9d 0a00 	vldr	s0, [sp]
 801bea6:	f001 f853 	bl	801cf50 <__kernel_cosf>
 801beaa:	e7f5      	b.n	801be98 <sinf+0x70>
 801beac:	3f490fd8 	.word	0x3f490fd8
 801beb0:	00000000 	.word	0x00000000

0801beb4 <tanf>:
 801beb4:	ee10 3a10 	vmov	r3, s0
 801beb8:	b507      	push	{r0, r1, r2, lr}
 801beba:	4a12      	ldr	r2, [pc, #72]	; (801bf04 <tanf+0x50>)
 801bebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bec0:	4293      	cmp	r3, r2
 801bec2:	dc07      	bgt.n	801bed4 <tanf+0x20>
 801bec4:	eddf 0a10 	vldr	s1, [pc, #64]	; 801bf08 <tanf+0x54>
 801bec8:	2001      	movs	r0, #1
 801beca:	b003      	add	sp, #12
 801becc:	f85d eb04 	ldr.w	lr, [sp], #4
 801bed0:	f001 bb5c 	b.w	801d58c <__kernel_tanf>
 801bed4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bed8:	db04      	blt.n	801bee4 <tanf+0x30>
 801beda:	ee30 0a40 	vsub.f32	s0, s0, s0
 801bede:	b003      	add	sp, #12
 801bee0:	f85d fb04 	ldr.w	pc, [sp], #4
 801bee4:	4668      	mov	r0, sp
 801bee6:	f000 fef3 	bl	801ccd0 <__ieee754_rem_pio2f>
 801beea:	0040      	lsls	r0, r0, #1
 801beec:	f000 0002 	and.w	r0, r0, #2
 801bef0:	eddd 0a01 	vldr	s1, [sp, #4]
 801bef4:	ed9d 0a00 	vldr	s0, [sp]
 801bef8:	f1c0 0001 	rsb	r0, r0, #1
 801befc:	f001 fb46 	bl	801d58c <__kernel_tanf>
 801bf00:	e7ed      	b.n	801bede <tanf+0x2a>
 801bf02:	bf00      	nop
 801bf04:	3f490fda 	.word	0x3f490fda
 801bf08:	00000000 	.word	0x00000000

0801bf0c <asin>:
 801bf0c:	b538      	push	{r3, r4, r5, lr}
 801bf0e:	ed2d 8b02 	vpush	{d8}
 801bf12:	ec55 4b10 	vmov	r4, r5, d0
 801bf16:	f000 f8cf 	bl	801c0b8 <__ieee754_asin>
 801bf1a:	4622      	mov	r2, r4
 801bf1c:	462b      	mov	r3, r5
 801bf1e:	4620      	mov	r0, r4
 801bf20:	4629      	mov	r1, r5
 801bf22:	eeb0 8a40 	vmov.f32	s16, s0
 801bf26:	eef0 8a60 	vmov.f32	s17, s1
 801bf2a:	f7e4 fdf7 	bl	8000b1c <__aeabi_dcmpun>
 801bf2e:	b9a8      	cbnz	r0, 801bf5c <asin+0x50>
 801bf30:	ec45 4b10 	vmov	d0, r4, r5
 801bf34:	f001 fddc 	bl	801daf0 <fabs>
 801bf38:	4b0c      	ldr	r3, [pc, #48]	; (801bf6c <asin+0x60>)
 801bf3a:	ec51 0b10 	vmov	r0, r1, d0
 801bf3e:	2200      	movs	r2, #0
 801bf40:	f7e4 fde2 	bl	8000b08 <__aeabi_dcmpgt>
 801bf44:	b150      	cbz	r0, 801bf5c <asin+0x50>
 801bf46:	f7ff f9d1 	bl	801b2ec <__errno>
 801bf4a:	ecbd 8b02 	vpop	{d8}
 801bf4e:	2321      	movs	r3, #33	; 0x21
 801bf50:	6003      	str	r3, [r0, #0]
 801bf52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bf56:	4806      	ldr	r0, [pc, #24]	; (801bf70 <asin+0x64>)
 801bf58:	f001 bdde 	b.w	801db18 <nan>
 801bf5c:	eeb0 0a48 	vmov.f32	s0, s16
 801bf60:	eef0 0a68 	vmov.f32	s1, s17
 801bf64:	ecbd 8b02 	vpop	{d8}
 801bf68:	bd38      	pop	{r3, r4, r5, pc}
 801bf6a:	bf00      	nop
 801bf6c:	3ff00000 	.word	0x3ff00000
 801bf70:	0801df0d 	.word	0x0801df0d

0801bf74 <atan2>:
 801bf74:	f000 bab4 	b.w	801c4e0 <__ieee754_atan2>

0801bf78 <exp>:
 801bf78:	b538      	push	{r3, r4, r5, lr}
 801bf7a:	ed2d 8b02 	vpush	{d8}
 801bf7e:	ec55 4b10 	vmov	r4, r5, d0
 801bf82:	f000 fb79 	bl	801c678 <__ieee754_exp>
 801bf86:	eeb0 8a40 	vmov.f32	s16, s0
 801bf8a:	eef0 8a60 	vmov.f32	s17, s1
 801bf8e:	ec45 4b10 	vmov	d0, r4, r5
 801bf92:	f001 fdb6 	bl	801db02 <finite>
 801bf96:	b168      	cbz	r0, 801bfb4 <exp+0x3c>
 801bf98:	a317      	add	r3, pc, #92	; (adr r3, 801bff8 <exp+0x80>)
 801bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf9e:	4620      	mov	r0, r4
 801bfa0:	4629      	mov	r1, r5
 801bfa2:	f7e4 fdb1 	bl	8000b08 <__aeabi_dcmpgt>
 801bfa6:	b160      	cbz	r0, 801bfc2 <exp+0x4a>
 801bfa8:	f7ff f9a0 	bl	801b2ec <__errno>
 801bfac:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 801bfe8 <exp+0x70>
 801bfb0:	2322      	movs	r3, #34	; 0x22
 801bfb2:	6003      	str	r3, [r0, #0]
 801bfb4:	eeb0 0a48 	vmov.f32	s0, s16
 801bfb8:	eef0 0a68 	vmov.f32	s1, s17
 801bfbc:	ecbd 8b02 	vpop	{d8}
 801bfc0:	bd38      	pop	{r3, r4, r5, pc}
 801bfc2:	a30f      	add	r3, pc, #60	; (adr r3, 801c000 <exp+0x88>)
 801bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfc8:	4620      	mov	r0, r4
 801bfca:	4629      	mov	r1, r5
 801bfcc:	f7e4 fd7e 	bl	8000acc <__aeabi_dcmplt>
 801bfd0:	2800      	cmp	r0, #0
 801bfd2:	d0ef      	beq.n	801bfb4 <exp+0x3c>
 801bfd4:	f7ff f98a 	bl	801b2ec <__errno>
 801bfd8:	2322      	movs	r3, #34	; 0x22
 801bfda:	ed9f 8b05 	vldr	d8, [pc, #20]	; 801bff0 <exp+0x78>
 801bfde:	6003      	str	r3, [r0, #0]
 801bfe0:	e7e8      	b.n	801bfb4 <exp+0x3c>
 801bfe2:	bf00      	nop
 801bfe4:	f3af 8000 	nop.w
 801bfe8:	00000000 	.word	0x00000000
 801bfec:	7ff00000 	.word	0x7ff00000
	...
 801bff8:	fefa39ef 	.word	0xfefa39ef
 801bffc:	40862e42 	.word	0x40862e42
 801c000:	d52d3051 	.word	0xd52d3051
 801c004:	c0874910 	.word	0xc0874910

0801c008 <sqrt>:
 801c008:	b538      	push	{r3, r4, r5, lr}
 801c00a:	ed2d 8b02 	vpush	{d8}
 801c00e:	ec55 4b10 	vmov	r4, r5, d0
 801c012:	f000 fcb3 	bl	801c97c <__ieee754_sqrt>
 801c016:	4622      	mov	r2, r4
 801c018:	462b      	mov	r3, r5
 801c01a:	4620      	mov	r0, r4
 801c01c:	4629      	mov	r1, r5
 801c01e:	eeb0 8a40 	vmov.f32	s16, s0
 801c022:	eef0 8a60 	vmov.f32	s17, s1
 801c026:	f7e4 fd79 	bl	8000b1c <__aeabi_dcmpun>
 801c02a:	b990      	cbnz	r0, 801c052 <sqrt+0x4a>
 801c02c:	2200      	movs	r2, #0
 801c02e:	2300      	movs	r3, #0
 801c030:	4620      	mov	r0, r4
 801c032:	4629      	mov	r1, r5
 801c034:	f7e4 fd4a 	bl	8000acc <__aeabi_dcmplt>
 801c038:	b158      	cbz	r0, 801c052 <sqrt+0x4a>
 801c03a:	f7ff f957 	bl	801b2ec <__errno>
 801c03e:	2321      	movs	r3, #33	; 0x21
 801c040:	6003      	str	r3, [r0, #0]
 801c042:	2200      	movs	r2, #0
 801c044:	2300      	movs	r3, #0
 801c046:	4610      	mov	r0, r2
 801c048:	4619      	mov	r1, r3
 801c04a:	f7e4 fbf7 	bl	800083c <__aeabi_ddiv>
 801c04e:	ec41 0b18 	vmov	d8, r0, r1
 801c052:	eeb0 0a48 	vmov.f32	s0, s16
 801c056:	eef0 0a68 	vmov.f32	s1, s17
 801c05a:	ecbd 8b02 	vpop	{d8}
 801c05e:	bd38      	pop	{r3, r4, r5, pc}

0801c060 <acosf>:
 801c060:	b508      	push	{r3, lr}
 801c062:	ed2d 8b02 	vpush	{d8}
 801c066:	eeb0 8a40 	vmov.f32	s16, s0
 801c06a:	f000 fd39 	bl	801cae0 <__ieee754_acosf>
 801c06e:	eeb4 8a48 	vcmp.f32	s16, s16
 801c072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c076:	eef0 8a40 	vmov.f32	s17, s0
 801c07a:	d615      	bvs.n	801c0a8 <acosf+0x48>
 801c07c:	eeb0 0a48 	vmov.f32	s0, s16
 801c080:	f001 fd52 	bl	801db28 <fabsf>
 801c084:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c088:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c090:	dd0a      	ble.n	801c0a8 <acosf+0x48>
 801c092:	f7ff f92b 	bl	801b2ec <__errno>
 801c096:	ecbd 8b02 	vpop	{d8}
 801c09a:	2321      	movs	r3, #33	; 0x21
 801c09c:	6003      	str	r3, [r0, #0]
 801c09e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c0a2:	4804      	ldr	r0, [pc, #16]	; (801c0b4 <acosf+0x54>)
 801c0a4:	f001 bd8a 	b.w	801dbbc <nanf>
 801c0a8:	eeb0 0a68 	vmov.f32	s0, s17
 801c0ac:	ecbd 8b02 	vpop	{d8}
 801c0b0:	bd08      	pop	{r3, pc}
 801c0b2:	bf00      	nop
 801c0b4:	0801df0d 	.word	0x0801df0d

0801c0b8 <__ieee754_asin>:
 801c0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0bc:	ed2d 8b04 	vpush	{d8-d9}
 801c0c0:	ec55 4b10 	vmov	r4, r5, d0
 801c0c4:	4bcc      	ldr	r3, [pc, #816]	; (801c3f8 <__ieee754_asin+0x340>)
 801c0c6:	b083      	sub	sp, #12
 801c0c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801c0cc:	4598      	cmp	r8, r3
 801c0ce:	9501      	str	r5, [sp, #4]
 801c0d0:	dd35      	ble.n	801c13e <__ieee754_asin+0x86>
 801c0d2:	ee10 3a10 	vmov	r3, s0
 801c0d6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801c0da:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801c0de:	ea58 0303 	orrs.w	r3, r8, r3
 801c0e2:	d117      	bne.n	801c114 <__ieee754_asin+0x5c>
 801c0e4:	a3aa      	add	r3, pc, #680	; (adr r3, 801c390 <__ieee754_asin+0x2d8>)
 801c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ea:	ee10 0a10 	vmov	r0, s0
 801c0ee:	4629      	mov	r1, r5
 801c0f0:	f7e4 fa7a 	bl	80005e8 <__aeabi_dmul>
 801c0f4:	a3a8      	add	r3, pc, #672	; (adr r3, 801c398 <__ieee754_asin+0x2e0>)
 801c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0fa:	4606      	mov	r6, r0
 801c0fc:	460f      	mov	r7, r1
 801c0fe:	4620      	mov	r0, r4
 801c100:	4629      	mov	r1, r5
 801c102:	f7e4 fa71 	bl	80005e8 <__aeabi_dmul>
 801c106:	4602      	mov	r2, r0
 801c108:	460b      	mov	r3, r1
 801c10a:	4630      	mov	r0, r6
 801c10c:	4639      	mov	r1, r7
 801c10e:	f7e4 f8b5 	bl	800027c <__adddf3>
 801c112:	e00b      	b.n	801c12c <__ieee754_asin+0x74>
 801c114:	ee10 2a10 	vmov	r2, s0
 801c118:	462b      	mov	r3, r5
 801c11a:	ee10 0a10 	vmov	r0, s0
 801c11e:	4629      	mov	r1, r5
 801c120:	f7e4 f8aa 	bl	8000278 <__aeabi_dsub>
 801c124:	4602      	mov	r2, r0
 801c126:	460b      	mov	r3, r1
 801c128:	f7e4 fb88 	bl	800083c <__aeabi_ddiv>
 801c12c:	4604      	mov	r4, r0
 801c12e:	460d      	mov	r5, r1
 801c130:	ec45 4b10 	vmov	d0, r4, r5
 801c134:	b003      	add	sp, #12
 801c136:	ecbd 8b04 	vpop	{d8-d9}
 801c13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c13e:	4baf      	ldr	r3, [pc, #700]	; (801c3fc <__ieee754_asin+0x344>)
 801c140:	4598      	cmp	r8, r3
 801c142:	dc11      	bgt.n	801c168 <__ieee754_asin+0xb0>
 801c144:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801c148:	f280 80ae 	bge.w	801c2a8 <__ieee754_asin+0x1f0>
 801c14c:	a394      	add	r3, pc, #592	; (adr r3, 801c3a0 <__ieee754_asin+0x2e8>)
 801c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c152:	ee10 0a10 	vmov	r0, s0
 801c156:	4629      	mov	r1, r5
 801c158:	f7e4 f890 	bl	800027c <__adddf3>
 801c15c:	4ba8      	ldr	r3, [pc, #672]	; (801c400 <__ieee754_asin+0x348>)
 801c15e:	2200      	movs	r2, #0
 801c160:	f7e4 fcd2 	bl	8000b08 <__aeabi_dcmpgt>
 801c164:	2800      	cmp	r0, #0
 801c166:	d1e3      	bne.n	801c130 <__ieee754_asin+0x78>
 801c168:	ec45 4b10 	vmov	d0, r4, r5
 801c16c:	f001 fcc0 	bl	801daf0 <fabs>
 801c170:	49a3      	ldr	r1, [pc, #652]	; (801c400 <__ieee754_asin+0x348>)
 801c172:	ec53 2b10 	vmov	r2, r3, d0
 801c176:	2000      	movs	r0, #0
 801c178:	f7e4 f87e 	bl	8000278 <__aeabi_dsub>
 801c17c:	4ba1      	ldr	r3, [pc, #644]	; (801c404 <__ieee754_asin+0x34c>)
 801c17e:	2200      	movs	r2, #0
 801c180:	f7e4 fa32 	bl	80005e8 <__aeabi_dmul>
 801c184:	a388      	add	r3, pc, #544	; (adr r3, 801c3a8 <__ieee754_asin+0x2f0>)
 801c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c18a:	4604      	mov	r4, r0
 801c18c:	460d      	mov	r5, r1
 801c18e:	f7e4 fa2b 	bl	80005e8 <__aeabi_dmul>
 801c192:	a387      	add	r3, pc, #540	; (adr r3, 801c3b0 <__ieee754_asin+0x2f8>)
 801c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c198:	f7e4 f870 	bl	800027c <__adddf3>
 801c19c:	4622      	mov	r2, r4
 801c19e:	462b      	mov	r3, r5
 801c1a0:	f7e4 fa22 	bl	80005e8 <__aeabi_dmul>
 801c1a4:	a384      	add	r3, pc, #528	; (adr r3, 801c3b8 <__ieee754_asin+0x300>)
 801c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1aa:	f7e4 f865 	bl	8000278 <__aeabi_dsub>
 801c1ae:	4622      	mov	r2, r4
 801c1b0:	462b      	mov	r3, r5
 801c1b2:	f7e4 fa19 	bl	80005e8 <__aeabi_dmul>
 801c1b6:	a382      	add	r3, pc, #520	; (adr r3, 801c3c0 <__ieee754_asin+0x308>)
 801c1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1bc:	f7e4 f85e 	bl	800027c <__adddf3>
 801c1c0:	4622      	mov	r2, r4
 801c1c2:	462b      	mov	r3, r5
 801c1c4:	f7e4 fa10 	bl	80005e8 <__aeabi_dmul>
 801c1c8:	a37f      	add	r3, pc, #508	; (adr r3, 801c3c8 <__ieee754_asin+0x310>)
 801c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ce:	f7e4 f853 	bl	8000278 <__aeabi_dsub>
 801c1d2:	4622      	mov	r2, r4
 801c1d4:	462b      	mov	r3, r5
 801c1d6:	f7e4 fa07 	bl	80005e8 <__aeabi_dmul>
 801c1da:	a37d      	add	r3, pc, #500	; (adr r3, 801c3d0 <__ieee754_asin+0x318>)
 801c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1e0:	f7e4 f84c 	bl	800027c <__adddf3>
 801c1e4:	4622      	mov	r2, r4
 801c1e6:	462b      	mov	r3, r5
 801c1e8:	f7e4 f9fe 	bl	80005e8 <__aeabi_dmul>
 801c1ec:	a37a      	add	r3, pc, #488	; (adr r3, 801c3d8 <__ieee754_asin+0x320>)
 801c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1f2:	ec41 0b18 	vmov	d8, r0, r1
 801c1f6:	4620      	mov	r0, r4
 801c1f8:	4629      	mov	r1, r5
 801c1fa:	f7e4 f9f5 	bl	80005e8 <__aeabi_dmul>
 801c1fe:	a378      	add	r3, pc, #480	; (adr r3, 801c3e0 <__ieee754_asin+0x328>)
 801c200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c204:	f7e4 f838 	bl	8000278 <__aeabi_dsub>
 801c208:	4622      	mov	r2, r4
 801c20a:	462b      	mov	r3, r5
 801c20c:	f7e4 f9ec 	bl	80005e8 <__aeabi_dmul>
 801c210:	a375      	add	r3, pc, #468	; (adr r3, 801c3e8 <__ieee754_asin+0x330>)
 801c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c216:	f7e4 f831 	bl	800027c <__adddf3>
 801c21a:	4622      	mov	r2, r4
 801c21c:	462b      	mov	r3, r5
 801c21e:	f7e4 f9e3 	bl	80005e8 <__aeabi_dmul>
 801c222:	a373      	add	r3, pc, #460	; (adr r3, 801c3f0 <__ieee754_asin+0x338>)
 801c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c228:	f7e4 f826 	bl	8000278 <__aeabi_dsub>
 801c22c:	4622      	mov	r2, r4
 801c22e:	462b      	mov	r3, r5
 801c230:	f7e4 f9da 	bl	80005e8 <__aeabi_dmul>
 801c234:	4b72      	ldr	r3, [pc, #456]	; (801c400 <__ieee754_asin+0x348>)
 801c236:	2200      	movs	r2, #0
 801c238:	f7e4 f820 	bl	800027c <__adddf3>
 801c23c:	ec45 4b10 	vmov	d0, r4, r5
 801c240:	4606      	mov	r6, r0
 801c242:	460f      	mov	r7, r1
 801c244:	f000 fb9a 	bl	801c97c <__ieee754_sqrt>
 801c248:	4b6f      	ldr	r3, [pc, #444]	; (801c408 <__ieee754_asin+0x350>)
 801c24a:	4598      	cmp	r8, r3
 801c24c:	ec5b ab10 	vmov	sl, fp, d0
 801c250:	f340 80dc 	ble.w	801c40c <__ieee754_asin+0x354>
 801c254:	4632      	mov	r2, r6
 801c256:	463b      	mov	r3, r7
 801c258:	ec51 0b18 	vmov	r0, r1, d8
 801c25c:	f7e4 faee 	bl	800083c <__aeabi_ddiv>
 801c260:	4652      	mov	r2, sl
 801c262:	465b      	mov	r3, fp
 801c264:	f7e4 f9c0 	bl	80005e8 <__aeabi_dmul>
 801c268:	4652      	mov	r2, sl
 801c26a:	465b      	mov	r3, fp
 801c26c:	f7e4 f806 	bl	800027c <__adddf3>
 801c270:	4602      	mov	r2, r0
 801c272:	460b      	mov	r3, r1
 801c274:	f7e4 f802 	bl	800027c <__adddf3>
 801c278:	a347      	add	r3, pc, #284	; (adr r3, 801c398 <__ieee754_asin+0x2e0>)
 801c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c27e:	f7e3 fffb 	bl	8000278 <__aeabi_dsub>
 801c282:	4602      	mov	r2, r0
 801c284:	460b      	mov	r3, r1
 801c286:	a142      	add	r1, pc, #264	; (adr r1, 801c390 <__ieee754_asin+0x2d8>)
 801c288:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c28c:	f7e3 fff4 	bl	8000278 <__aeabi_dsub>
 801c290:	9b01      	ldr	r3, [sp, #4]
 801c292:	2b00      	cmp	r3, #0
 801c294:	bfdc      	itt	le
 801c296:	4602      	movle	r2, r0
 801c298:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801c29c:	4604      	mov	r4, r0
 801c29e:	460d      	mov	r5, r1
 801c2a0:	bfdc      	itt	le
 801c2a2:	4614      	movle	r4, r2
 801c2a4:	461d      	movle	r5, r3
 801c2a6:	e743      	b.n	801c130 <__ieee754_asin+0x78>
 801c2a8:	ee10 2a10 	vmov	r2, s0
 801c2ac:	ee10 0a10 	vmov	r0, s0
 801c2b0:	462b      	mov	r3, r5
 801c2b2:	4629      	mov	r1, r5
 801c2b4:	f7e4 f998 	bl	80005e8 <__aeabi_dmul>
 801c2b8:	a33b      	add	r3, pc, #236	; (adr r3, 801c3a8 <__ieee754_asin+0x2f0>)
 801c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2be:	4606      	mov	r6, r0
 801c2c0:	460f      	mov	r7, r1
 801c2c2:	f7e4 f991 	bl	80005e8 <__aeabi_dmul>
 801c2c6:	a33a      	add	r3, pc, #232	; (adr r3, 801c3b0 <__ieee754_asin+0x2f8>)
 801c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2cc:	f7e3 ffd6 	bl	800027c <__adddf3>
 801c2d0:	4632      	mov	r2, r6
 801c2d2:	463b      	mov	r3, r7
 801c2d4:	f7e4 f988 	bl	80005e8 <__aeabi_dmul>
 801c2d8:	a337      	add	r3, pc, #220	; (adr r3, 801c3b8 <__ieee754_asin+0x300>)
 801c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2de:	f7e3 ffcb 	bl	8000278 <__aeabi_dsub>
 801c2e2:	4632      	mov	r2, r6
 801c2e4:	463b      	mov	r3, r7
 801c2e6:	f7e4 f97f 	bl	80005e8 <__aeabi_dmul>
 801c2ea:	a335      	add	r3, pc, #212	; (adr r3, 801c3c0 <__ieee754_asin+0x308>)
 801c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2f0:	f7e3 ffc4 	bl	800027c <__adddf3>
 801c2f4:	4632      	mov	r2, r6
 801c2f6:	463b      	mov	r3, r7
 801c2f8:	f7e4 f976 	bl	80005e8 <__aeabi_dmul>
 801c2fc:	a332      	add	r3, pc, #200	; (adr r3, 801c3c8 <__ieee754_asin+0x310>)
 801c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c302:	f7e3 ffb9 	bl	8000278 <__aeabi_dsub>
 801c306:	4632      	mov	r2, r6
 801c308:	463b      	mov	r3, r7
 801c30a:	f7e4 f96d 	bl	80005e8 <__aeabi_dmul>
 801c30e:	a330      	add	r3, pc, #192	; (adr r3, 801c3d0 <__ieee754_asin+0x318>)
 801c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c314:	f7e3 ffb2 	bl	800027c <__adddf3>
 801c318:	4632      	mov	r2, r6
 801c31a:	463b      	mov	r3, r7
 801c31c:	f7e4 f964 	bl	80005e8 <__aeabi_dmul>
 801c320:	a32d      	add	r3, pc, #180	; (adr r3, 801c3d8 <__ieee754_asin+0x320>)
 801c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c326:	4680      	mov	r8, r0
 801c328:	4689      	mov	r9, r1
 801c32a:	4630      	mov	r0, r6
 801c32c:	4639      	mov	r1, r7
 801c32e:	f7e4 f95b 	bl	80005e8 <__aeabi_dmul>
 801c332:	a32b      	add	r3, pc, #172	; (adr r3, 801c3e0 <__ieee754_asin+0x328>)
 801c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c338:	f7e3 ff9e 	bl	8000278 <__aeabi_dsub>
 801c33c:	4632      	mov	r2, r6
 801c33e:	463b      	mov	r3, r7
 801c340:	f7e4 f952 	bl	80005e8 <__aeabi_dmul>
 801c344:	a328      	add	r3, pc, #160	; (adr r3, 801c3e8 <__ieee754_asin+0x330>)
 801c346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c34a:	f7e3 ff97 	bl	800027c <__adddf3>
 801c34e:	4632      	mov	r2, r6
 801c350:	463b      	mov	r3, r7
 801c352:	f7e4 f949 	bl	80005e8 <__aeabi_dmul>
 801c356:	a326      	add	r3, pc, #152	; (adr r3, 801c3f0 <__ieee754_asin+0x338>)
 801c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c35c:	f7e3 ff8c 	bl	8000278 <__aeabi_dsub>
 801c360:	4632      	mov	r2, r6
 801c362:	463b      	mov	r3, r7
 801c364:	f7e4 f940 	bl	80005e8 <__aeabi_dmul>
 801c368:	4b25      	ldr	r3, [pc, #148]	; (801c400 <__ieee754_asin+0x348>)
 801c36a:	2200      	movs	r2, #0
 801c36c:	f7e3 ff86 	bl	800027c <__adddf3>
 801c370:	4602      	mov	r2, r0
 801c372:	460b      	mov	r3, r1
 801c374:	4640      	mov	r0, r8
 801c376:	4649      	mov	r1, r9
 801c378:	f7e4 fa60 	bl	800083c <__aeabi_ddiv>
 801c37c:	4622      	mov	r2, r4
 801c37e:	462b      	mov	r3, r5
 801c380:	f7e4 f932 	bl	80005e8 <__aeabi_dmul>
 801c384:	4602      	mov	r2, r0
 801c386:	460b      	mov	r3, r1
 801c388:	4620      	mov	r0, r4
 801c38a:	4629      	mov	r1, r5
 801c38c:	e6bf      	b.n	801c10e <__ieee754_asin+0x56>
 801c38e:	bf00      	nop
 801c390:	54442d18 	.word	0x54442d18
 801c394:	3ff921fb 	.word	0x3ff921fb
 801c398:	33145c07 	.word	0x33145c07
 801c39c:	3c91a626 	.word	0x3c91a626
 801c3a0:	8800759c 	.word	0x8800759c
 801c3a4:	7e37e43c 	.word	0x7e37e43c
 801c3a8:	0dfdf709 	.word	0x0dfdf709
 801c3ac:	3f023de1 	.word	0x3f023de1
 801c3b0:	7501b288 	.word	0x7501b288
 801c3b4:	3f49efe0 	.word	0x3f49efe0
 801c3b8:	b5688f3b 	.word	0xb5688f3b
 801c3bc:	3fa48228 	.word	0x3fa48228
 801c3c0:	0e884455 	.word	0x0e884455
 801c3c4:	3fc9c155 	.word	0x3fc9c155
 801c3c8:	03eb6f7d 	.word	0x03eb6f7d
 801c3cc:	3fd4d612 	.word	0x3fd4d612
 801c3d0:	55555555 	.word	0x55555555
 801c3d4:	3fc55555 	.word	0x3fc55555
 801c3d8:	b12e9282 	.word	0xb12e9282
 801c3dc:	3fb3b8c5 	.word	0x3fb3b8c5
 801c3e0:	1b8d0159 	.word	0x1b8d0159
 801c3e4:	3fe6066c 	.word	0x3fe6066c
 801c3e8:	9c598ac8 	.word	0x9c598ac8
 801c3ec:	40002ae5 	.word	0x40002ae5
 801c3f0:	1c8a2d4b 	.word	0x1c8a2d4b
 801c3f4:	40033a27 	.word	0x40033a27
 801c3f8:	3fefffff 	.word	0x3fefffff
 801c3fc:	3fdfffff 	.word	0x3fdfffff
 801c400:	3ff00000 	.word	0x3ff00000
 801c404:	3fe00000 	.word	0x3fe00000
 801c408:	3fef3332 	.word	0x3fef3332
 801c40c:	ee10 2a10 	vmov	r2, s0
 801c410:	ee10 0a10 	vmov	r0, s0
 801c414:	465b      	mov	r3, fp
 801c416:	4659      	mov	r1, fp
 801c418:	f7e3 ff30 	bl	800027c <__adddf3>
 801c41c:	4632      	mov	r2, r6
 801c41e:	463b      	mov	r3, r7
 801c420:	ec41 0b19 	vmov	d9, r0, r1
 801c424:	ec51 0b18 	vmov	r0, r1, d8
 801c428:	f7e4 fa08 	bl	800083c <__aeabi_ddiv>
 801c42c:	4602      	mov	r2, r0
 801c42e:	460b      	mov	r3, r1
 801c430:	ec51 0b19 	vmov	r0, r1, d9
 801c434:	f7e4 f8d8 	bl	80005e8 <__aeabi_dmul>
 801c438:	f04f 0800 	mov.w	r8, #0
 801c43c:	4606      	mov	r6, r0
 801c43e:	460f      	mov	r7, r1
 801c440:	4642      	mov	r2, r8
 801c442:	465b      	mov	r3, fp
 801c444:	4640      	mov	r0, r8
 801c446:	4659      	mov	r1, fp
 801c448:	f7e4 f8ce 	bl	80005e8 <__aeabi_dmul>
 801c44c:	4602      	mov	r2, r0
 801c44e:	460b      	mov	r3, r1
 801c450:	4620      	mov	r0, r4
 801c452:	4629      	mov	r1, r5
 801c454:	f7e3 ff10 	bl	8000278 <__aeabi_dsub>
 801c458:	4642      	mov	r2, r8
 801c45a:	4604      	mov	r4, r0
 801c45c:	460d      	mov	r5, r1
 801c45e:	465b      	mov	r3, fp
 801c460:	4650      	mov	r0, sl
 801c462:	4659      	mov	r1, fp
 801c464:	f7e3 ff0a 	bl	800027c <__adddf3>
 801c468:	4602      	mov	r2, r0
 801c46a:	460b      	mov	r3, r1
 801c46c:	4620      	mov	r0, r4
 801c46e:	4629      	mov	r1, r5
 801c470:	f7e4 f9e4 	bl	800083c <__aeabi_ddiv>
 801c474:	4602      	mov	r2, r0
 801c476:	460b      	mov	r3, r1
 801c478:	f7e3 ff00 	bl	800027c <__adddf3>
 801c47c:	4602      	mov	r2, r0
 801c47e:	460b      	mov	r3, r1
 801c480:	a113      	add	r1, pc, #76	; (adr r1, 801c4d0 <__ieee754_asin+0x418>)
 801c482:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c486:	f7e3 fef7 	bl	8000278 <__aeabi_dsub>
 801c48a:	4602      	mov	r2, r0
 801c48c:	460b      	mov	r3, r1
 801c48e:	4630      	mov	r0, r6
 801c490:	4639      	mov	r1, r7
 801c492:	f7e3 fef1 	bl	8000278 <__aeabi_dsub>
 801c496:	4642      	mov	r2, r8
 801c498:	4604      	mov	r4, r0
 801c49a:	460d      	mov	r5, r1
 801c49c:	465b      	mov	r3, fp
 801c49e:	4640      	mov	r0, r8
 801c4a0:	4659      	mov	r1, fp
 801c4a2:	f7e3 feeb 	bl	800027c <__adddf3>
 801c4a6:	4602      	mov	r2, r0
 801c4a8:	460b      	mov	r3, r1
 801c4aa:	a10b      	add	r1, pc, #44	; (adr r1, 801c4d8 <__ieee754_asin+0x420>)
 801c4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4b0:	f7e3 fee2 	bl	8000278 <__aeabi_dsub>
 801c4b4:	4602      	mov	r2, r0
 801c4b6:	460b      	mov	r3, r1
 801c4b8:	4620      	mov	r0, r4
 801c4ba:	4629      	mov	r1, r5
 801c4bc:	f7e3 fedc 	bl	8000278 <__aeabi_dsub>
 801c4c0:	4602      	mov	r2, r0
 801c4c2:	460b      	mov	r3, r1
 801c4c4:	a104      	add	r1, pc, #16	; (adr r1, 801c4d8 <__ieee754_asin+0x420>)
 801c4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4ca:	e6df      	b.n	801c28c <__ieee754_asin+0x1d4>
 801c4cc:	f3af 8000 	nop.w
 801c4d0:	33145c07 	.word	0x33145c07
 801c4d4:	3c91a626 	.word	0x3c91a626
 801c4d8:	54442d18 	.word	0x54442d18
 801c4dc:	3fe921fb 	.word	0x3fe921fb

0801c4e0 <__ieee754_atan2>:
 801c4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4e4:	ec57 6b11 	vmov	r6, r7, d1
 801c4e8:	4273      	negs	r3, r6
 801c4ea:	f8df e184 	ldr.w	lr, [pc, #388]	; 801c670 <__ieee754_atan2+0x190>
 801c4ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801c4f2:	4333      	orrs	r3, r6
 801c4f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801c4f8:	4573      	cmp	r3, lr
 801c4fa:	ec51 0b10 	vmov	r0, r1, d0
 801c4fe:	ee11 8a10 	vmov	r8, s2
 801c502:	d80a      	bhi.n	801c51a <__ieee754_atan2+0x3a>
 801c504:	4244      	negs	r4, r0
 801c506:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c50a:	4304      	orrs	r4, r0
 801c50c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801c510:	4574      	cmp	r4, lr
 801c512:	ee10 9a10 	vmov	r9, s0
 801c516:	468c      	mov	ip, r1
 801c518:	d907      	bls.n	801c52a <__ieee754_atan2+0x4a>
 801c51a:	4632      	mov	r2, r6
 801c51c:	463b      	mov	r3, r7
 801c51e:	f7e3 fead 	bl	800027c <__adddf3>
 801c522:	ec41 0b10 	vmov	d0, r0, r1
 801c526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c52a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801c52e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c532:	4334      	orrs	r4, r6
 801c534:	d103      	bne.n	801c53e <__ieee754_atan2+0x5e>
 801c536:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c53a:	f001 b939 	b.w	801d7b0 <atan>
 801c53e:	17bc      	asrs	r4, r7, #30
 801c540:	f004 0402 	and.w	r4, r4, #2
 801c544:	ea53 0909 	orrs.w	r9, r3, r9
 801c548:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801c54c:	d107      	bne.n	801c55e <__ieee754_atan2+0x7e>
 801c54e:	2c02      	cmp	r4, #2
 801c550:	d060      	beq.n	801c614 <__ieee754_atan2+0x134>
 801c552:	2c03      	cmp	r4, #3
 801c554:	d1e5      	bne.n	801c522 <__ieee754_atan2+0x42>
 801c556:	a142      	add	r1, pc, #264	; (adr r1, 801c660 <__ieee754_atan2+0x180>)
 801c558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c55c:	e7e1      	b.n	801c522 <__ieee754_atan2+0x42>
 801c55e:	ea52 0808 	orrs.w	r8, r2, r8
 801c562:	d106      	bne.n	801c572 <__ieee754_atan2+0x92>
 801c564:	f1bc 0f00 	cmp.w	ip, #0
 801c568:	da5f      	bge.n	801c62a <__ieee754_atan2+0x14a>
 801c56a:	a13f      	add	r1, pc, #252	; (adr r1, 801c668 <__ieee754_atan2+0x188>)
 801c56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c570:	e7d7      	b.n	801c522 <__ieee754_atan2+0x42>
 801c572:	4572      	cmp	r2, lr
 801c574:	d10f      	bne.n	801c596 <__ieee754_atan2+0xb6>
 801c576:	4293      	cmp	r3, r2
 801c578:	f104 34ff 	add.w	r4, r4, #4294967295
 801c57c:	d107      	bne.n	801c58e <__ieee754_atan2+0xae>
 801c57e:	2c02      	cmp	r4, #2
 801c580:	d84c      	bhi.n	801c61c <__ieee754_atan2+0x13c>
 801c582:	4b35      	ldr	r3, [pc, #212]	; (801c658 <__ieee754_atan2+0x178>)
 801c584:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801c588:	e9d4 0100 	ldrd	r0, r1, [r4]
 801c58c:	e7c9      	b.n	801c522 <__ieee754_atan2+0x42>
 801c58e:	2c02      	cmp	r4, #2
 801c590:	d848      	bhi.n	801c624 <__ieee754_atan2+0x144>
 801c592:	4b32      	ldr	r3, [pc, #200]	; (801c65c <__ieee754_atan2+0x17c>)
 801c594:	e7f6      	b.n	801c584 <__ieee754_atan2+0xa4>
 801c596:	4573      	cmp	r3, lr
 801c598:	d0e4      	beq.n	801c564 <__ieee754_atan2+0x84>
 801c59a:	1a9b      	subs	r3, r3, r2
 801c59c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801c5a0:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c5a4:	da1e      	bge.n	801c5e4 <__ieee754_atan2+0x104>
 801c5a6:	2f00      	cmp	r7, #0
 801c5a8:	da01      	bge.n	801c5ae <__ieee754_atan2+0xce>
 801c5aa:	323c      	adds	r2, #60	; 0x3c
 801c5ac:	db1e      	blt.n	801c5ec <__ieee754_atan2+0x10c>
 801c5ae:	4632      	mov	r2, r6
 801c5b0:	463b      	mov	r3, r7
 801c5b2:	f7e4 f943 	bl	800083c <__aeabi_ddiv>
 801c5b6:	ec41 0b10 	vmov	d0, r0, r1
 801c5ba:	f001 fa99 	bl	801daf0 <fabs>
 801c5be:	f001 f8f7 	bl	801d7b0 <atan>
 801c5c2:	ec51 0b10 	vmov	r0, r1, d0
 801c5c6:	2c01      	cmp	r4, #1
 801c5c8:	d013      	beq.n	801c5f2 <__ieee754_atan2+0x112>
 801c5ca:	2c02      	cmp	r4, #2
 801c5cc:	d015      	beq.n	801c5fa <__ieee754_atan2+0x11a>
 801c5ce:	2c00      	cmp	r4, #0
 801c5d0:	d0a7      	beq.n	801c522 <__ieee754_atan2+0x42>
 801c5d2:	a319      	add	r3, pc, #100	; (adr r3, 801c638 <__ieee754_atan2+0x158>)
 801c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5d8:	f7e3 fe4e 	bl	8000278 <__aeabi_dsub>
 801c5dc:	a318      	add	r3, pc, #96	; (adr r3, 801c640 <__ieee754_atan2+0x160>)
 801c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5e2:	e014      	b.n	801c60e <__ieee754_atan2+0x12e>
 801c5e4:	a118      	add	r1, pc, #96	; (adr r1, 801c648 <__ieee754_atan2+0x168>)
 801c5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5ea:	e7ec      	b.n	801c5c6 <__ieee754_atan2+0xe6>
 801c5ec:	2000      	movs	r0, #0
 801c5ee:	2100      	movs	r1, #0
 801c5f0:	e7e9      	b.n	801c5c6 <__ieee754_atan2+0xe6>
 801c5f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c5f6:	4619      	mov	r1, r3
 801c5f8:	e793      	b.n	801c522 <__ieee754_atan2+0x42>
 801c5fa:	a30f      	add	r3, pc, #60	; (adr r3, 801c638 <__ieee754_atan2+0x158>)
 801c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c600:	f7e3 fe3a 	bl	8000278 <__aeabi_dsub>
 801c604:	4602      	mov	r2, r0
 801c606:	460b      	mov	r3, r1
 801c608:	a10d      	add	r1, pc, #52	; (adr r1, 801c640 <__ieee754_atan2+0x160>)
 801c60a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c60e:	f7e3 fe33 	bl	8000278 <__aeabi_dsub>
 801c612:	e786      	b.n	801c522 <__ieee754_atan2+0x42>
 801c614:	a10a      	add	r1, pc, #40	; (adr r1, 801c640 <__ieee754_atan2+0x160>)
 801c616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c61a:	e782      	b.n	801c522 <__ieee754_atan2+0x42>
 801c61c:	a10c      	add	r1, pc, #48	; (adr r1, 801c650 <__ieee754_atan2+0x170>)
 801c61e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c622:	e77e      	b.n	801c522 <__ieee754_atan2+0x42>
 801c624:	2000      	movs	r0, #0
 801c626:	2100      	movs	r1, #0
 801c628:	e77b      	b.n	801c522 <__ieee754_atan2+0x42>
 801c62a:	a107      	add	r1, pc, #28	; (adr r1, 801c648 <__ieee754_atan2+0x168>)
 801c62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c630:	e777      	b.n	801c522 <__ieee754_atan2+0x42>
 801c632:	bf00      	nop
 801c634:	f3af 8000 	nop.w
 801c638:	33145c07 	.word	0x33145c07
 801c63c:	3ca1a626 	.word	0x3ca1a626
 801c640:	54442d18 	.word	0x54442d18
 801c644:	400921fb 	.word	0x400921fb
 801c648:	54442d18 	.word	0x54442d18
 801c64c:	3ff921fb 	.word	0x3ff921fb
 801c650:	54442d18 	.word	0x54442d18
 801c654:	3fe921fb 	.word	0x3fe921fb
 801c658:	0801df40 	.word	0x0801df40
 801c65c:	0801df58 	.word	0x0801df58
 801c660:	54442d18 	.word	0x54442d18
 801c664:	c00921fb 	.word	0xc00921fb
 801c668:	54442d18 	.word	0x54442d18
 801c66c:	bff921fb 	.word	0xbff921fb
 801c670:	7ff00000 	.word	0x7ff00000
 801c674:	00000000 	.word	0x00000000

0801c678 <__ieee754_exp>:
 801c678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c67c:	ec55 4b10 	vmov	r4, r5, d0
 801c680:	49b5      	ldr	r1, [pc, #724]	; (801c958 <__ieee754_exp+0x2e0>)
 801c682:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c686:	428b      	cmp	r3, r1
 801c688:	ed2d 8b04 	vpush	{d8-d9}
 801c68c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801c690:	d93d      	bls.n	801c70e <__ieee754_exp+0x96>
 801c692:	49b2      	ldr	r1, [pc, #712]	; (801c95c <__ieee754_exp+0x2e4>)
 801c694:	428b      	cmp	r3, r1
 801c696:	d918      	bls.n	801c6ca <__ieee754_exp+0x52>
 801c698:	ee10 3a10 	vmov	r3, s0
 801c69c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801c6a0:	4313      	orrs	r3, r2
 801c6a2:	d009      	beq.n	801c6b8 <__ieee754_exp+0x40>
 801c6a4:	ee10 2a10 	vmov	r2, s0
 801c6a8:	462b      	mov	r3, r5
 801c6aa:	4620      	mov	r0, r4
 801c6ac:	4629      	mov	r1, r5
 801c6ae:	f7e3 fde5 	bl	800027c <__adddf3>
 801c6b2:	4604      	mov	r4, r0
 801c6b4:	460d      	mov	r5, r1
 801c6b6:	e002      	b.n	801c6be <__ieee754_exp+0x46>
 801c6b8:	b10e      	cbz	r6, 801c6be <__ieee754_exp+0x46>
 801c6ba:	2400      	movs	r4, #0
 801c6bc:	2500      	movs	r5, #0
 801c6be:	ecbd 8b04 	vpop	{d8-d9}
 801c6c2:	ec45 4b10 	vmov	d0, r4, r5
 801c6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6ca:	a38d      	add	r3, pc, #564	; (adr r3, 801c900 <__ieee754_exp+0x288>)
 801c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6d0:	ee10 0a10 	vmov	r0, s0
 801c6d4:	4629      	mov	r1, r5
 801c6d6:	f7e4 fa17 	bl	8000b08 <__aeabi_dcmpgt>
 801c6da:	4607      	mov	r7, r0
 801c6dc:	b130      	cbz	r0, 801c6ec <__ieee754_exp+0x74>
 801c6de:	ecbd 8b04 	vpop	{d8-d9}
 801c6e2:	2000      	movs	r0, #0
 801c6e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6e8:	f001 b857 	b.w	801d79a <__math_oflow>
 801c6ec:	a386      	add	r3, pc, #536	; (adr r3, 801c908 <__ieee754_exp+0x290>)
 801c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6f2:	4620      	mov	r0, r4
 801c6f4:	4629      	mov	r1, r5
 801c6f6:	f7e4 f9e9 	bl	8000acc <__aeabi_dcmplt>
 801c6fa:	2800      	cmp	r0, #0
 801c6fc:	f000 808b 	beq.w	801c816 <__ieee754_exp+0x19e>
 801c700:	ecbd 8b04 	vpop	{d8-d9}
 801c704:	4638      	mov	r0, r7
 801c706:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c70a:	f001 b83d 	b.w	801d788 <__math_uflow>
 801c70e:	4a94      	ldr	r2, [pc, #592]	; (801c960 <__ieee754_exp+0x2e8>)
 801c710:	4293      	cmp	r3, r2
 801c712:	f240 80ac 	bls.w	801c86e <__ieee754_exp+0x1f6>
 801c716:	4a93      	ldr	r2, [pc, #588]	; (801c964 <__ieee754_exp+0x2ec>)
 801c718:	4293      	cmp	r3, r2
 801c71a:	d87c      	bhi.n	801c816 <__ieee754_exp+0x19e>
 801c71c:	4b92      	ldr	r3, [pc, #584]	; (801c968 <__ieee754_exp+0x2f0>)
 801c71e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c726:	ee10 0a10 	vmov	r0, s0
 801c72a:	4629      	mov	r1, r5
 801c72c:	f7e3 fda4 	bl	8000278 <__aeabi_dsub>
 801c730:	4b8e      	ldr	r3, [pc, #568]	; (801c96c <__ieee754_exp+0x2f4>)
 801c732:	00f7      	lsls	r7, r6, #3
 801c734:	443b      	add	r3, r7
 801c736:	ed93 7b00 	vldr	d7, [r3]
 801c73a:	f1c6 0a01 	rsb	sl, r6, #1
 801c73e:	4680      	mov	r8, r0
 801c740:	4689      	mov	r9, r1
 801c742:	ebaa 0a06 	sub.w	sl, sl, r6
 801c746:	eeb0 8a47 	vmov.f32	s16, s14
 801c74a:	eef0 8a67 	vmov.f32	s17, s15
 801c74e:	ec53 2b18 	vmov	r2, r3, d8
 801c752:	4640      	mov	r0, r8
 801c754:	4649      	mov	r1, r9
 801c756:	f7e3 fd8f 	bl	8000278 <__aeabi_dsub>
 801c75a:	4604      	mov	r4, r0
 801c75c:	460d      	mov	r5, r1
 801c75e:	4622      	mov	r2, r4
 801c760:	462b      	mov	r3, r5
 801c762:	4620      	mov	r0, r4
 801c764:	4629      	mov	r1, r5
 801c766:	f7e3 ff3f 	bl	80005e8 <__aeabi_dmul>
 801c76a:	a369      	add	r3, pc, #420	; (adr r3, 801c910 <__ieee754_exp+0x298>)
 801c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c770:	4606      	mov	r6, r0
 801c772:	460f      	mov	r7, r1
 801c774:	f7e3 ff38 	bl	80005e8 <__aeabi_dmul>
 801c778:	a367      	add	r3, pc, #412	; (adr r3, 801c918 <__ieee754_exp+0x2a0>)
 801c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c77e:	f7e3 fd7b 	bl	8000278 <__aeabi_dsub>
 801c782:	4632      	mov	r2, r6
 801c784:	463b      	mov	r3, r7
 801c786:	f7e3 ff2f 	bl	80005e8 <__aeabi_dmul>
 801c78a:	a365      	add	r3, pc, #404	; (adr r3, 801c920 <__ieee754_exp+0x2a8>)
 801c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c790:	f7e3 fd74 	bl	800027c <__adddf3>
 801c794:	4632      	mov	r2, r6
 801c796:	463b      	mov	r3, r7
 801c798:	f7e3 ff26 	bl	80005e8 <__aeabi_dmul>
 801c79c:	a362      	add	r3, pc, #392	; (adr r3, 801c928 <__ieee754_exp+0x2b0>)
 801c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7a2:	f7e3 fd69 	bl	8000278 <__aeabi_dsub>
 801c7a6:	4632      	mov	r2, r6
 801c7a8:	463b      	mov	r3, r7
 801c7aa:	f7e3 ff1d 	bl	80005e8 <__aeabi_dmul>
 801c7ae:	a360      	add	r3, pc, #384	; (adr r3, 801c930 <__ieee754_exp+0x2b8>)
 801c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7b4:	f7e3 fd62 	bl	800027c <__adddf3>
 801c7b8:	4632      	mov	r2, r6
 801c7ba:	463b      	mov	r3, r7
 801c7bc:	f7e3 ff14 	bl	80005e8 <__aeabi_dmul>
 801c7c0:	4602      	mov	r2, r0
 801c7c2:	460b      	mov	r3, r1
 801c7c4:	4620      	mov	r0, r4
 801c7c6:	4629      	mov	r1, r5
 801c7c8:	f7e3 fd56 	bl	8000278 <__aeabi_dsub>
 801c7cc:	4602      	mov	r2, r0
 801c7ce:	460b      	mov	r3, r1
 801c7d0:	4606      	mov	r6, r0
 801c7d2:	460f      	mov	r7, r1
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	4629      	mov	r1, r5
 801c7d8:	f7e3 ff06 	bl	80005e8 <__aeabi_dmul>
 801c7dc:	ec41 0b19 	vmov	d9, r0, r1
 801c7e0:	f1ba 0f00 	cmp.w	sl, #0
 801c7e4:	d15d      	bne.n	801c8a2 <__ieee754_exp+0x22a>
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c7ec:	4630      	mov	r0, r6
 801c7ee:	4639      	mov	r1, r7
 801c7f0:	f7e3 fd42 	bl	8000278 <__aeabi_dsub>
 801c7f4:	4602      	mov	r2, r0
 801c7f6:	460b      	mov	r3, r1
 801c7f8:	ec51 0b19 	vmov	r0, r1, d9
 801c7fc:	f7e4 f81e 	bl	800083c <__aeabi_ddiv>
 801c800:	4622      	mov	r2, r4
 801c802:	462b      	mov	r3, r5
 801c804:	f7e3 fd38 	bl	8000278 <__aeabi_dsub>
 801c808:	4602      	mov	r2, r0
 801c80a:	460b      	mov	r3, r1
 801c80c:	2000      	movs	r0, #0
 801c80e:	4958      	ldr	r1, [pc, #352]	; (801c970 <__ieee754_exp+0x2f8>)
 801c810:	f7e3 fd32 	bl	8000278 <__aeabi_dsub>
 801c814:	e74d      	b.n	801c6b2 <__ieee754_exp+0x3a>
 801c816:	4857      	ldr	r0, [pc, #348]	; (801c974 <__ieee754_exp+0x2fc>)
 801c818:	a347      	add	r3, pc, #284	; (adr r3, 801c938 <__ieee754_exp+0x2c0>)
 801c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c81e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801c822:	4629      	mov	r1, r5
 801c824:	4620      	mov	r0, r4
 801c826:	f7e3 fedf 	bl	80005e8 <__aeabi_dmul>
 801c82a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c82e:	f7e3 fd25 	bl	800027c <__adddf3>
 801c832:	f7e4 f989 	bl	8000b48 <__aeabi_d2iz>
 801c836:	4682      	mov	sl, r0
 801c838:	f7e3 fe6c 	bl	8000514 <__aeabi_i2d>
 801c83c:	a340      	add	r3, pc, #256	; (adr r3, 801c940 <__ieee754_exp+0x2c8>)
 801c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c842:	4606      	mov	r6, r0
 801c844:	460f      	mov	r7, r1
 801c846:	f7e3 fecf 	bl	80005e8 <__aeabi_dmul>
 801c84a:	4602      	mov	r2, r0
 801c84c:	460b      	mov	r3, r1
 801c84e:	4620      	mov	r0, r4
 801c850:	4629      	mov	r1, r5
 801c852:	f7e3 fd11 	bl	8000278 <__aeabi_dsub>
 801c856:	a33c      	add	r3, pc, #240	; (adr r3, 801c948 <__ieee754_exp+0x2d0>)
 801c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c85c:	4680      	mov	r8, r0
 801c85e:	4689      	mov	r9, r1
 801c860:	4630      	mov	r0, r6
 801c862:	4639      	mov	r1, r7
 801c864:	f7e3 fec0 	bl	80005e8 <__aeabi_dmul>
 801c868:	ec41 0b18 	vmov	d8, r0, r1
 801c86c:	e76f      	b.n	801c74e <__ieee754_exp+0xd6>
 801c86e:	4a42      	ldr	r2, [pc, #264]	; (801c978 <__ieee754_exp+0x300>)
 801c870:	4293      	cmp	r3, r2
 801c872:	d811      	bhi.n	801c898 <__ieee754_exp+0x220>
 801c874:	a336      	add	r3, pc, #216	; (adr r3, 801c950 <__ieee754_exp+0x2d8>)
 801c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c87a:	ee10 0a10 	vmov	r0, s0
 801c87e:	4629      	mov	r1, r5
 801c880:	f7e3 fcfc 	bl	800027c <__adddf3>
 801c884:	4b3a      	ldr	r3, [pc, #232]	; (801c970 <__ieee754_exp+0x2f8>)
 801c886:	2200      	movs	r2, #0
 801c888:	f7e4 f93e 	bl	8000b08 <__aeabi_dcmpgt>
 801c88c:	b138      	cbz	r0, 801c89e <__ieee754_exp+0x226>
 801c88e:	4b38      	ldr	r3, [pc, #224]	; (801c970 <__ieee754_exp+0x2f8>)
 801c890:	2200      	movs	r2, #0
 801c892:	4620      	mov	r0, r4
 801c894:	4629      	mov	r1, r5
 801c896:	e70a      	b.n	801c6ae <__ieee754_exp+0x36>
 801c898:	f04f 0a00 	mov.w	sl, #0
 801c89c:	e75f      	b.n	801c75e <__ieee754_exp+0xe6>
 801c89e:	4682      	mov	sl, r0
 801c8a0:	e75d      	b.n	801c75e <__ieee754_exp+0xe6>
 801c8a2:	4632      	mov	r2, r6
 801c8a4:	463b      	mov	r3, r7
 801c8a6:	2000      	movs	r0, #0
 801c8a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801c8ac:	f7e3 fce4 	bl	8000278 <__aeabi_dsub>
 801c8b0:	4602      	mov	r2, r0
 801c8b2:	460b      	mov	r3, r1
 801c8b4:	ec51 0b19 	vmov	r0, r1, d9
 801c8b8:	f7e3 ffc0 	bl	800083c <__aeabi_ddiv>
 801c8bc:	4602      	mov	r2, r0
 801c8be:	460b      	mov	r3, r1
 801c8c0:	ec51 0b18 	vmov	r0, r1, d8
 801c8c4:	f7e3 fcd8 	bl	8000278 <__aeabi_dsub>
 801c8c8:	4642      	mov	r2, r8
 801c8ca:	464b      	mov	r3, r9
 801c8cc:	f7e3 fcd4 	bl	8000278 <__aeabi_dsub>
 801c8d0:	4602      	mov	r2, r0
 801c8d2:	460b      	mov	r3, r1
 801c8d4:	2000      	movs	r0, #0
 801c8d6:	4926      	ldr	r1, [pc, #152]	; (801c970 <__ieee754_exp+0x2f8>)
 801c8d8:	f7e3 fcce 	bl	8000278 <__aeabi_dsub>
 801c8dc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801c8e0:	4592      	cmp	sl, r2
 801c8e2:	db02      	blt.n	801c8ea <__ieee754_exp+0x272>
 801c8e4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801c8e8:	e6e3      	b.n	801c6b2 <__ieee754_exp+0x3a>
 801c8ea:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801c8ee:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801c8f2:	2200      	movs	r2, #0
 801c8f4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801c8f8:	f7e3 fe76 	bl	80005e8 <__aeabi_dmul>
 801c8fc:	e6d9      	b.n	801c6b2 <__ieee754_exp+0x3a>
 801c8fe:	bf00      	nop
 801c900:	fefa39ef 	.word	0xfefa39ef
 801c904:	40862e42 	.word	0x40862e42
 801c908:	d52d3051 	.word	0xd52d3051
 801c90c:	c0874910 	.word	0xc0874910
 801c910:	72bea4d0 	.word	0x72bea4d0
 801c914:	3e663769 	.word	0x3e663769
 801c918:	c5d26bf1 	.word	0xc5d26bf1
 801c91c:	3ebbbd41 	.word	0x3ebbbd41
 801c920:	af25de2c 	.word	0xaf25de2c
 801c924:	3f11566a 	.word	0x3f11566a
 801c928:	16bebd93 	.word	0x16bebd93
 801c92c:	3f66c16c 	.word	0x3f66c16c
 801c930:	5555553e 	.word	0x5555553e
 801c934:	3fc55555 	.word	0x3fc55555
 801c938:	652b82fe 	.word	0x652b82fe
 801c93c:	3ff71547 	.word	0x3ff71547
 801c940:	fee00000 	.word	0xfee00000
 801c944:	3fe62e42 	.word	0x3fe62e42
 801c948:	35793c76 	.word	0x35793c76
 801c94c:	3dea39ef 	.word	0x3dea39ef
 801c950:	8800759c 	.word	0x8800759c
 801c954:	7e37e43c 	.word	0x7e37e43c
 801c958:	40862e41 	.word	0x40862e41
 801c95c:	7fefffff 	.word	0x7fefffff
 801c960:	3fd62e42 	.word	0x3fd62e42
 801c964:	3ff0a2b1 	.word	0x3ff0a2b1
 801c968:	0801df80 	.word	0x0801df80
 801c96c:	0801df90 	.word	0x0801df90
 801c970:	3ff00000 	.word	0x3ff00000
 801c974:	0801df70 	.word	0x0801df70
 801c978:	3defffff 	.word	0x3defffff

0801c97c <__ieee754_sqrt>:
 801c97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c980:	ec55 4b10 	vmov	r4, r5, d0
 801c984:	4e55      	ldr	r6, [pc, #340]	; (801cadc <__ieee754_sqrt+0x160>)
 801c986:	43ae      	bics	r6, r5
 801c988:	ee10 0a10 	vmov	r0, s0
 801c98c:	ee10 3a10 	vmov	r3, s0
 801c990:	462a      	mov	r2, r5
 801c992:	4629      	mov	r1, r5
 801c994:	d110      	bne.n	801c9b8 <__ieee754_sqrt+0x3c>
 801c996:	ee10 2a10 	vmov	r2, s0
 801c99a:	462b      	mov	r3, r5
 801c99c:	f7e3 fe24 	bl	80005e8 <__aeabi_dmul>
 801c9a0:	4602      	mov	r2, r0
 801c9a2:	460b      	mov	r3, r1
 801c9a4:	4620      	mov	r0, r4
 801c9a6:	4629      	mov	r1, r5
 801c9a8:	f7e3 fc68 	bl	800027c <__adddf3>
 801c9ac:	4604      	mov	r4, r0
 801c9ae:	460d      	mov	r5, r1
 801c9b0:	ec45 4b10 	vmov	d0, r4, r5
 801c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9b8:	2d00      	cmp	r5, #0
 801c9ba:	dc10      	bgt.n	801c9de <__ieee754_sqrt+0x62>
 801c9bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c9c0:	4330      	orrs	r0, r6
 801c9c2:	d0f5      	beq.n	801c9b0 <__ieee754_sqrt+0x34>
 801c9c4:	b15d      	cbz	r5, 801c9de <__ieee754_sqrt+0x62>
 801c9c6:	ee10 2a10 	vmov	r2, s0
 801c9ca:	462b      	mov	r3, r5
 801c9cc:	ee10 0a10 	vmov	r0, s0
 801c9d0:	f7e3 fc52 	bl	8000278 <__aeabi_dsub>
 801c9d4:	4602      	mov	r2, r0
 801c9d6:	460b      	mov	r3, r1
 801c9d8:	f7e3 ff30 	bl	800083c <__aeabi_ddiv>
 801c9dc:	e7e6      	b.n	801c9ac <__ieee754_sqrt+0x30>
 801c9de:	1512      	asrs	r2, r2, #20
 801c9e0:	d074      	beq.n	801cacc <__ieee754_sqrt+0x150>
 801c9e2:	07d4      	lsls	r4, r2, #31
 801c9e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801c9e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801c9ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801c9f0:	bf5e      	ittt	pl
 801c9f2:	0fda      	lsrpl	r2, r3, #31
 801c9f4:	005b      	lslpl	r3, r3, #1
 801c9f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801c9fa:	2400      	movs	r4, #0
 801c9fc:	0fda      	lsrs	r2, r3, #31
 801c9fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801ca02:	107f      	asrs	r7, r7, #1
 801ca04:	005b      	lsls	r3, r3, #1
 801ca06:	2516      	movs	r5, #22
 801ca08:	4620      	mov	r0, r4
 801ca0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801ca0e:	1886      	adds	r6, r0, r2
 801ca10:	428e      	cmp	r6, r1
 801ca12:	bfde      	ittt	le
 801ca14:	1b89      	suble	r1, r1, r6
 801ca16:	18b0      	addle	r0, r6, r2
 801ca18:	18a4      	addle	r4, r4, r2
 801ca1a:	0049      	lsls	r1, r1, #1
 801ca1c:	3d01      	subs	r5, #1
 801ca1e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801ca22:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801ca26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ca2a:	d1f0      	bne.n	801ca0e <__ieee754_sqrt+0x92>
 801ca2c:	462a      	mov	r2, r5
 801ca2e:	f04f 0e20 	mov.w	lr, #32
 801ca32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801ca36:	4281      	cmp	r1, r0
 801ca38:	eb06 0c05 	add.w	ip, r6, r5
 801ca3c:	dc02      	bgt.n	801ca44 <__ieee754_sqrt+0xc8>
 801ca3e:	d113      	bne.n	801ca68 <__ieee754_sqrt+0xec>
 801ca40:	459c      	cmp	ip, r3
 801ca42:	d811      	bhi.n	801ca68 <__ieee754_sqrt+0xec>
 801ca44:	f1bc 0f00 	cmp.w	ip, #0
 801ca48:	eb0c 0506 	add.w	r5, ip, r6
 801ca4c:	da43      	bge.n	801cad6 <__ieee754_sqrt+0x15a>
 801ca4e:	2d00      	cmp	r5, #0
 801ca50:	db41      	blt.n	801cad6 <__ieee754_sqrt+0x15a>
 801ca52:	f100 0801 	add.w	r8, r0, #1
 801ca56:	1a09      	subs	r1, r1, r0
 801ca58:	459c      	cmp	ip, r3
 801ca5a:	bf88      	it	hi
 801ca5c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801ca60:	eba3 030c 	sub.w	r3, r3, ip
 801ca64:	4432      	add	r2, r6
 801ca66:	4640      	mov	r0, r8
 801ca68:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801ca6c:	f1be 0e01 	subs.w	lr, lr, #1
 801ca70:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801ca74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ca78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ca7c:	d1db      	bne.n	801ca36 <__ieee754_sqrt+0xba>
 801ca7e:	430b      	orrs	r3, r1
 801ca80:	d006      	beq.n	801ca90 <__ieee754_sqrt+0x114>
 801ca82:	1c50      	adds	r0, r2, #1
 801ca84:	bf13      	iteet	ne
 801ca86:	3201      	addne	r2, #1
 801ca88:	3401      	addeq	r4, #1
 801ca8a:	4672      	moveq	r2, lr
 801ca8c:	f022 0201 	bicne.w	r2, r2, #1
 801ca90:	1063      	asrs	r3, r4, #1
 801ca92:	0852      	lsrs	r2, r2, #1
 801ca94:	07e1      	lsls	r1, r4, #31
 801ca96:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ca9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ca9e:	bf48      	it	mi
 801caa0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801caa4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801caa8:	4614      	mov	r4, r2
 801caaa:	e781      	b.n	801c9b0 <__ieee754_sqrt+0x34>
 801caac:	0ad9      	lsrs	r1, r3, #11
 801caae:	3815      	subs	r0, #21
 801cab0:	055b      	lsls	r3, r3, #21
 801cab2:	2900      	cmp	r1, #0
 801cab4:	d0fa      	beq.n	801caac <__ieee754_sqrt+0x130>
 801cab6:	02cd      	lsls	r5, r1, #11
 801cab8:	d50a      	bpl.n	801cad0 <__ieee754_sqrt+0x154>
 801caba:	f1c2 0420 	rsb	r4, r2, #32
 801cabe:	fa23 f404 	lsr.w	r4, r3, r4
 801cac2:	1e55      	subs	r5, r2, #1
 801cac4:	4093      	lsls	r3, r2
 801cac6:	4321      	orrs	r1, r4
 801cac8:	1b42      	subs	r2, r0, r5
 801caca:	e78a      	b.n	801c9e2 <__ieee754_sqrt+0x66>
 801cacc:	4610      	mov	r0, r2
 801cace:	e7f0      	b.n	801cab2 <__ieee754_sqrt+0x136>
 801cad0:	0049      	lsls	r1, r1, #1
 801cad2:	3201      	adds	r2, #1
 801cad4:	e7ef      	b.n	801cab6 <__ieee754_sqrt+0x13a>
 801cad6:	4680      	mov	r8, r0
 801cad8:	e7bd      	b.n	801ca56 <__ieee754_sqrt+0xda>
 801cada:	bf00      	nop
 801cadc:	7ff00000 	.word	0x7ff00000

0801cae0 <__ieee754_acosf>:
 801cae0:	b508      	push	{r3, lr}
 801cae2:	ee10 3a10 	vmov	r3, s0
 801cae6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801caea:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801caee:	ed2d 8b0c 	vpush	{d8-d13}
 801caf2:	d10a      	bne.n	801cb0a <__ieee754_acosf+0x2a>
 801caf4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 801cc8c <__ieee754_acosf+0x1ac>
 801caf8:	ed9f 8a65 	vldr	s16, [pc, #404]	; 801cc90 <__ieee754_acosf+0x1b0>
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	bfd8      	it	le
 801cb00:	eeb0 0a48 	vmovle.f32	s0, s16
 801cb04:	ecbd 8b0c 	vpop	{d8-d13}
 801cb08:	bd08      	pop	{r3, pc}
 801cb0a:	dd04      	ble.n	801cb16 <__ieee754_acosf+0x36>
 801cb0c:	ee30 8a40 	vsub.f32	s16, s0, s0
 801cb10:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801cb14:	e7f6      	b.n	801cb04 <__ieee754_acosf+0x24>
 801cb16:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801cb1a:	da3c      	bge.n	801cb96 <__ieee754_acosf+0xb6>
 801cb1c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801cb20:	f340 80b1 	ble.w	801cc86 <__ieee754_acosf+0x1a6>
 801cb24:	ee60 7a00 	vmul.f32	s15, s0, s0
 801cb28:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801cc94 <__ieee754_acosf+0x1b4>
 801cb2c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801cc98 <__ieee754_acosf+0x1b8>
 801cb30:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 801cc9c <__ieee754_acosf+0x1bc>
 801cb34:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 801cca0 <__ieee754_acosf+0x1c0>
 801cb38:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801cb3c:	eddf 6a59 	vldr	s13, [pc, #356]	; 801cca4 <__ieee754_acosf+0x1c4>
 801cb40:	eee7 6a27 	vfma.f32	s13, s14, s15
 801cb44:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801cca8 <__ieee754_acosf+0x1c8>
 801cb48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801cb4c:	eddf 6a57 	vldr	s13, [pc, #348]	; 801ccac <__ieee754_acosf+0x1cc>
 801cb50:	eee7 6a27 	vfma.f32	s13, s14, s15
 801cb54:	ed9f 7a56 	vldr	s14, [pc, #344]	; 801ccb0 <__ieee754_acosf+0x1d0>
 801cb58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801cb5c:	eddf 6a55 	vldr	s13, [pc, #340]	; 801ccb4 <__ieee754_acosf+0x1d4>
 801cb60:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801cb64:	eddf 6a54 	vldr	s13, [pc, #336]	; 801ccb8 <__ieee754_acosf+0x1d8>
 801cb68:	eee6 6a27 	vfma.f32	s13, s12, s15
 801cb6c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 801ccbc <__ieee754_acosf+0x1dc>
 801cb70:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801cb74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cb78:	eee6 6a27 	vfma.f32	s13, s12, s15
 801cb7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cb80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801cb84:	eea0 8a67 	vfms.f32	s16, s0, s15
 801cb88:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801ccc0 <__ieee754_acosf+0x1e0>
 801cb8c:	ee30 0a48 	vsub.f32	s0, s0, s16
 801cb90:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801cb94:	e7b6      	b.n	801cb04 <__ieee754_acosf+0x24>
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	eddf da3e 	vldr	s27, [pc, #248]	; 801cc94 <__ieee754_acosf+0x1b4>
 801cb9c:	eddf ca3e 	vldr	s25, [pc, #248]	; 801cc98 <__ieee754_acosf+0x1b8>
 801cba0:	ed9f ca40 	vldr	s24, [pc, #256]	; 801cca4 <__ieee754_acosf+0x1c4>
 801cba4:	eddf ba40 	vldr	s23, [pc, #256]	; 801cca8 <__ieee754_acosf+0x1c8>
 801cba8:	ed9f ba40 	vldr	s22, [pc, #256]	; 801ccac <__ieee754_acosf+0x1cc>
 801cbac:	eddf 8a40 	vldr	s17, [pc, #256]	; 801ccb0 <__ieee754_acosf+0x1d0>
 801cbb0:	ed9f da40 	vldr	s26, [pc, #256]	; 801ccb4 <__ieee754_acosf+0x1d4>
 801cbb4:	eddf aa39 	vldr	s21, [pc, #228]	; 801cc9c <__ieee754_acosf+0x1bc>
 801cbb8:	ed9f aa3f 	vldr	s20, [pc, #252]	; 801ccb8 <__ieee754_acosf+0x1d8>
 801cbbc:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801ccbc <__ieee754_acosf+0x1dc>
 801cbc0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801cbc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801cbc8:	da28      	bge.n	801cc1c <__ieee754_acosf+0x13c>
 801cbca:	ee30 0a09 	vadd.f32	s0, s0, s18
 801cbce:	ee20 0a27 	vmul.f32	s0, s0, s15
 801cbd2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801cbd6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801cbda:	eeac ca80 	vfma.f32	s24, s25, s0
 801cbde:	eeaa aa80 	vfma.f32	s20, s21, s0
 801cbe2:	eeec ba00 	vfma.f32	s23, s24, s0
 801cbe6:	eeea 9a00 	vfma.f32	s19, s20, s0
 801cbea:	eeab ba80 	vfma.f32	s22, s23, s0
 801cbee:	eea9 9a80 	vfma.f32	s18, s19, s0
 801cbf2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801cbf6:	ee68 8a80 	vmul.f32	s17, s17, s0
 801cbfa:	f000 f9a5 	bl	801cf48 <__ieee754_sqrtf>
 801cbfe:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801cc02:	eddf 7a30 	vldr	s15, [pc, #192]	; 801ccc4 <__ieee754_acosf+0x1e4>
 801cc06:	eee0 7a07 	vfma.f32	s15, s0, s14
 801cc0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801cc0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801cc12:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801ccc8 <__ieee754_acosf+0x1e8>
 801cc16:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801cc1a:	e773      	b.n	801cb04 <__ieee754_acosf+0x24>
 801cc1c:	ee39 8a40 	vsub.f32	s16, s18, s0
 801cc20:	ee28 8a27 	vmul.f32	s16, s16, s15
 801cc24:	eeb0 0a48 	vmov.f32	s0, s16
 801cc28:	f000 f98e 	bl	801cf48 <__ieee754_sqrtf>
 801cc2c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801cc30:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801cc34:	eeac ca88 	vfma.f32	s24, s25, s16
 801cc38:	eeaa aa88 	vfma.f32	s20, s21, s16
 801cc3c:	eeec ba08 	vfma.f32	s23, s24, s16
 801cc40:	ee10 3a10 	vmov	r3, s0
 801cc44:	eeab ba88 	vfma.f32	s22, s23, s16
 801cc48:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801cc4c:	f023 030f 	bic.w	r3, r3, #15
 801cc50:	eeea 9a08 	vfma.f32	s19, s20, s16
 801cc54:	ee07 3a90 	vmov	s15, r3
 801cc58:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801cc5c:	eeb0 6a48 	vmov.f32	s12, s16
 801cc60:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801cc64:	eea9 9a88 	vfma.f32	s18, s19, s16
 801cc68:	ee70 6a27 	vadd.f32	s13, s0, s15
 801cc6c:	ee68 8a88 	vmul.f32	s17, s17, s16
 801cc70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801cc74:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801cc78:	eea0 7a26 	vfma.f32	s14, s0, s13
 801cc7c:	ee37 0a87 	vadd.f32	s0, s15, s14
 801cc80:	ee30 0a00 	vadd.f32	s0, s0, s0
 801cc84:	e73e      	b.n	801cb04 <__ieee754_acosf+0x24>
 801cc86:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801cccc <__ieee754_acosf+0x1ec>
 801cc8a:	e73b      	b.n	801cb04 <__ieee754_acosf+0x24>
 801cc8c:	00000000 	.word	0x00000000
 801cc90:	40490fdb 	.word	0x40490fdb
 801cc94:	3811ef08 	.word	0x3811ef08
 801cc98:	3a4f7f04 	.word	0x3a4f7f04
 801cc9c:	bf303361 	.word	0xbf303361
 801cca0:	33a22168 	.word	0x33a22168
 801cca4:	bd241146 	.word	0xbd241146
 801cca8:	3e4e0aa8 	.word	0x3e4e0aa8
 801ccac:	bea6b090 	.word	0xbea6b090
 801ccb0:	3e2aaaab 	.word	0x3e2aaaab
 801ccb4:	3d9dc62e 	.word	0x3d9dc62e
 801ccb8:	4001572d 	.word	0x4001572d
 801ccbc:	c019d139 	.word	0xc019d139
 801ccc0:	3fc90fda 	.word	0x3fc90fda
 801ccc4:	b3a22168 	.word	0xb3a22168
 801ccc8:	40490fda 	.word	0x40490fda
 801cccc:	3fc90fdb 	.word	0x3fc90fdb

0801ccd0 <__ieee754_rem_pio2f>:
 801ccd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccd2:	ee10 6a10 	vmov	r6, s0
 801ccd6:	4b8e      	ldr	r3, [pc, #568]	; (801cf10 <__ieee754_rem_pio2f+0x240>)
 801ccd8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801ccdc:	429d      	cmp	r5, r3
 801ccde:	b087      	sub	sp, #28
 801cce0:	eef0 7a40 	vmov.f32	s15, s0
 801cce4:	4604      	mov	r4, r0
 801cce6:	dc05      	bgt.n	801ccf4 <__ieee754_rem_pio2f+0x24>
 801cce8:	2300      	movs	r3, #0
 801ccea:	ed80 0a00 	vstr	s0, [r0]
 801ccee:	6043      	str	r3, [r0, #4]
 801ccf0:	2000      	movs	r0, #0
 801ccf2:	e01a      	b.n	801cd2a <__ieee754_rem_pio2f+0x5a>
 801ccf4:	4b87      	ldr	r3, [pc, #540]	; (801cf14 <__ieee754_rem_pio2f+0x244>)
 801ccf6:	429d      	cmp	r5, r3
 801ccf8:	dc46      	bgt.n	801cd88 <__ieee754_rem_pio2f+0xb8>
 801ccfa:	2e00      	cmp	r6, #0
 801ccfc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801cf18 <__ieee754_rem_pio2f+0x248>
 801cd00:	4b86      	ldr	r3, [pc, #536]	; (801cf1c <__ieee754_rem_pio2f+0x24c>)
 801cd02:	f025 050f 	bic.w	r5, r5, #15
 801cd06:	dd1f      	ble.n	801cd48 <__ieee754_rem_pio2f+0x78>
 801cd08:	429d      	cmp	r5, r3
 801cd0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801cd0e:	d00e      	beq.n	801cd2e <__ieee754_rem_pio2f+0x5e>
 801cd10:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801cf20 <__ieee754_rem_pio2f+0x250>
 801cd14:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801cd18:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801cd1c:	ed80 0a00 	vstr	s0, [r0]
 801cd20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cd24:	2001      	movs	r0, #1
 801cd26:	edc4 7a01 	vstr	s15, [r4, #4]
 801cd2a:	b007      	add	sp, #28
 801cd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd2e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801cf24 <__ieee754_rem_pio2f+0x254>
 801cd32:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801cf28 <__ieee754_rem_pio2f+0x258>
 801cd36:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801cd3a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801cd3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cd42:	edc0 6a00 	vstr	s13, [r0]
 801cd46:	e7eb      	b.n	801cd20 <__ieee754_rem_pio2f+0x50>
 801cd48:	429d      	cmp	r5, r3
 801cd4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801cd4e:	d00e      	beq.n	801cd6e <__ieee754_rem_pio2f+0x9e>
 801cd50:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801cf20 <__ieee754_rem_pio2f+0x250>
 801cd54:	ee37 0a87 	vadd.f32	s0, s15, s14
 801cd58:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801cd5c:	ed80 0a00 	vstr	s0, [r0]
 801cd60:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cd64:	f04f 30ff 	mov.w	r0, #4294967295
 801cd68:	edc4 7a01 	vstr	s15, [r4, #4]
 801cd6c:	e7dd      	b.n	801cd2a <__ieee754_rem_pio2f+0x5a>
 801cd6e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801cf24 <__ieee754_rem_pio2f+0x254>
 801cd72:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801cf28 <__ieee754_rem_pio2f+0x258>
 801cd76:	ee77 7a80 	vadd.f32	s15, s15, s0
 801cd7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801cd7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cd82:	edc0 6a00 	vstr	s13, [r0]
 801cd86:	e7eb      	b.n	801cd60 <__ieee754_rem_pio2f+0x90>
 801cd88:	4b68      	ldr	r3, [pc, #416]	; (801cf2c <__ieee754_rem_pio2f+0x25c>)
 801cd8a:	429d      	cmp	r5, r3
 801cd8c:	dc72      	bgt.n	801ce74 <__ieee754_rem_pio2f+0x1a4>
 801cd8e:	f000 fecb 	bl	801db28 <fabsf>
 801cd92:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801cf30 <__ieee754_rem_pio2f+0x260>
 801cd96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801cd9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801cd9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cda2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cda6:	ee17 0a90 	vmov	r0, s15
 801cdaa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801cf18 <__ieee754_rem_pio2f+0x248>
 801cdae:	eea7 0a67 	vfms.f32	s0, s14, s15
 801cdb2:	281f      	cmp	r0, #31
 801cdb4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801cf20 <__ieee754_rem_pio2f+0x250>
 801cdb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cdbc:	eeb1 6a47 	vneg.f32	s12, s14
 801cdc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801cdc4:	ee16 2a90 	vmov	r2, s13
 801cdc8:	dc1c      	bgt.n	801ce04 <__ieee754_rem_pio2f+0x134>
 801cdca:	495a      	ldr	r1, [pc, #360]	; (801cf34 <__ieee754_rem_pio2f+0x264>)
 801cdcc:	1e47      	subs	r7, r0, #1
 801cdce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801cdd2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801cdd6:	428b      	cmp	r3, r1
 801cdd8:	d014      	beq.n	801ce04 <__ieee754_rem_pio2f+0x134>
 801cdda:	6022      	str	r2, [r4, #0]
 801cddc:	ed94 7a00 	vldr	s14, [r4]
 801cde0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801cde4:	2e00      	cmp	r6, #0
 801cde6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801cdea:	ed84 0a01 	vstr	s0, [r4, #4]
 801cdee:	da9c      	bge.n	801cd2a <__ieee754_rem_pio2f+0x5a>
 801cdf0:	eeb1 7a47 	vneg.f32	s14, s14
 801cdf4:	eeb1 0a40 	vneg.f32	s0, s0
 801cdf8:	ed84 7a00 	vstr	s14, [r4]
 801cdfc:	ed84 0a01 	vstr	s0, [r4, #4]
 801ce00:	4240      	negs	r0, r0
 801ce02:	e792      	b.n	801cd2a <__ieee754_rem_pio2f+0x5a>
 801ce04:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801ce08:	15eb      	asrs	r3, r5, #23
 801ce0a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801ce0e:	2d08      	cmp	r5, #8
 801ce10:	dde3      	ble.n	801cdda <__ieee754_rem_pio2f+0x10a>
 801ce12:	eddf 7a44 	vldr	s15, [pc, #272]	; 801cf24 <__ieee754_rem_pio2f+0x254>
 801ce16:	eddf 5a44 	vldr	s11, [pc, #272]	; 801cf28 <__ieee754_rem_pio2f+0x258>
 801ce1a:	eef0 6a40 	vmov.f32	s13, s0
 801ce1e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801ce22:	ee30 0a66 	vsub.f32	s0, s0, s13
 801ce26:	eea6 0a27 	vfma.f32	s0, s12, s15
 801ce2a:	eef0 7a40 	vmov.f32	s15, s0
 801ce2e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801ce32:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801ce36:	ee15 2a90 	vmov	r2, s11
 801ce3a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801ce3e:	1a5b      	subs	r3, r3, r1
 801ce40:	2b19      	cmp	r3, #25
 801ce42:	dc04      	bgt.n	801ce4e <__ieee754_rem_pio2f+0x17e>
 801ce44:	edc4 5a00 	vstr	s11, [r4]
 801ce48:	eeb0 0a66 	vmov.f32	s0, s13
 801ce4c:	e7c6      	b.n	801cddc <__ieee754_rem_pio2f+0x10c>
 801ce4e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801cf38 <__ieee754_rem_pio2f+0x268>
 801ce52:	eeb0 0a66 	vmov.f32	s0, s13
 801ce56:	eea6 0a25 	vfma.f32	s0, s12, s11
 801ce5a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801ce5e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801cf3c <__ieee754_rem_pio2f+0x26c>
 801ce62:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ce66:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801ce6a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801ce6e:	ed84 7a00 	vstr	s14, [r4]
 801ce72:	e7b3      	b.n	801cddc <__ieee754_rem_pio2f+0x10c>
 801ce74:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801ce78:	db06      	blt.n	801ce88 <__ieee754_rem_pio2f+0x1b8>
 801ce7a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801ce7e:	edc0 7a01 	vstr	s15, [r0, #4]
 801ce82:	edc0 7a00 	vstr	s15, [r0]
 801ce86:	e733      	b.n	801ccf0 <__ieee754_rem_pio2f+0x20>
 801ce88:	15ea      	asrs	r2, r5, #23
 801ce8a:	3a86      	subs	r2, #134	; 0x86
 801ce8c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801ce90:	ee07 3a90 	vmov	s15, r3
 801ce94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ce98:	eddf 6a29 	vldr	s13, [pc, #164]	; 801cf40 <__ieee754_rem_pio2f+0x270>
 801ce9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cea0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cea4:	ed8d 7a03 	vstr	s14, [sp, #12]
 801cea8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ceac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ceb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ceb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ceb8:	ed8d 7a04 	vstr	s14, [sp, #16]
 801cebc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cec0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801cec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cec8:	edcd 7a05 	vstr	s15, [sp, #20]
 801cecc:	d11e      	bne.n	801cf0c <__ieee754_rem_pio2f+0x23c>
 801cece:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801ced2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ced6:	bf14      	ite	ne
 801ced8:	2302      	movne	r3, #2
 801ceda:	2301      	moveq	r3, #1
 801cedc:	4919      	ldr	r1, [pc, #100]	; (801cf44 <__ieee754_rem_pio2f+0x274>)
 801cede:	9101      	str	r1, [sp, #4]
 801cee0:	2102      	movs	r1, #2
 801cee2:	9100      	str	r1, [sp, #0]
 801cee4:	a803      	add	r0, sp, #12
 801cee6:	4621      	mov	r1, r4
 801cee8:	f000 f892 	bl	801d010 <__kernel_rem_pio2f>
 801ceec:	2e00      	cmp	r6, #0
 801ceee:	f6bf af1c 	bge.w	801cd2a <__ieee754_rem_pio2f+0x5a>
 801cef2:	edd4 7a00 	vldr	s15, [r4]
 801cef6:	eef1 7a67 	vneg.f32	s15, s15
 801cefa:	edc4 7a00 	vstr	s15, [r4]
 801cefe:	edd4 7a01 	vldr	s15, [r4, #4]
 801cf02:	eef1 7a67 	vneg.f32	s15, s15
 801cf06:	edc4 7a01 	vstr	s15, [r4, #4]
 801cf0a:	e779      	b.n	801ce00 <__ieee754_rem_pio2f+0x130>
 801cf0c:	2303      	movs	r3, #3
 801cf0e:	e7e5      	b.n	801cedc <__ieee754_rem_pio2f+0x20c>
 801cf10:	3f490fd8 	.word	0x3f490fd8
 801cf14:	4016cbe3 	.word	0x4016cbe3
 801cf18:	3fc90f80 	.word	0x3fc90f80
 801cf1c:	3fc90fd0 	.word	0x3fc90fd0
 801cf20:	37354443 	.word	0x37354443
 801cf24:	37354400 	.word	0x37354400
 801cf28:	2e85a308 	.word	0x2e85a308
 801cf2c:	43490f80 	.word	0x43490f80
 801cf30:	3f22f984 	.word	0x3f22f984
 801cf34:	0801dfa0 	.word	0x0801dfa0
 801cf38:	2e85a300 	.word	0x2e85a300
 801cf3c:	248d3132 	.word	0x248d3132
 801cf40:	43800000 	.word	0x43800000
 801cf44:	0801e020 	.word	0x0801e020

0801cf48 <__ieee754_sqrtf>:
 801cf48:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801cf4c:	4770      	bx	lr
	...

0801cf50 <__kernel_cosf>:
 801cf50:	ee10 3a10 	vmov	r3, s0
 801cf54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cf58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801cf5c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801cf60:	da05      	bge.n	801cf6e <__kernel_cosf+0x1e>
 801cf62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801cf66:	ee17 2a90 	vmov	r2, s15
 801cf6a:	2a00      	cmp	r2, #0
 801cf6c:	d03d      	beq.n	801cfea <__kernel_cosf+0x9a>
 801cf6e:	ee60 5a00 	vmul.f32	s11, s0, s0
 801cf72:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801cff0 <__kernel_cosf+0xa0>
 801cf76:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801cff4 <__kernel_cosf+0xa4>
 801cf7a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801cff8 <__kernel_cosf+0xa8>
 801cf7e:	4a1f      	ldr	r2, [pc, #124]	; (801cffc <__kernel_cosf+0xac>)
 801cf80:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801cf84:	4293      	cmp	r3, r2
 801cf86:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801d000 <__kernel_cosf+0xb0>
 801cf8a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801cf8e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801d004 <__kernel_cosf+0xb4>
 801cf92:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801cf96:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801d008 <__kernel_cosf+0xb8>
 801cf9a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801cf9e:	eeb0 7a66 	vmov.f32	s14, s13
 801cfa2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801cfa6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801cfaa:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801cfae:	ee67 6a25 	vmul.f32	s13, s14, s11
 801cfb2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801cfb6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801cfba:	dc04      	bgt.n	801cfc6 <__kernel_cosf+0x76>
 801cfbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801cfc0:	ee36 0a47 	vsub.f32	s0, s12, s14
 801cfc4:	4770      	bx	lr
 801cfc6:	4a11      	ldr	r2, [pc, #68]	; (801d00c <__kernel_cosf+0xbc>)
 801cfc8:	4293      	cmp	r3, r2
 801cfca:	bfda      	itte	le
 801cfcc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801cfd0:	ee06 3a90 	vmovle	s13, r3
 801cfd4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801cfd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cfdc:	ee36 0a66 	vsub.f32	s0, s12, s13
 801cfe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cfe4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801cfe8:	4770      	bx	lr
 801cfea:	eeb0 0a46 	vmov.f32	s0, s12
 801cfee:	4770      	bx	lr
 801cff0:	ad47d74e 	.word	0xad47d74e
 801cff4:	310f74f6 	.word	0x310f74f6
 801cff8:	3d2aaaab 	.word	0x3d2aaaab
 801cffc:	3e999999 	.word	0x3e999999
 801d000:	b493f27c 	.word	0xb493f27c
 801d004:	37d00d01 	.word	0x37d00d01
 801d008:	bab60b61 	.word	0xbab60b61
 801d00c:	3f480000 	.word	0x3f480000

0801d010 <__kernel_rem_pio2f>:
 801d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d014:	ed2d 8b04 	vpush	{d8-d9}
 801d018:	b0d9      	sub	sp, #356	; 0x164
 801d01a:	4688      	mov	r8, r1
 801d01c:	9002      	str	r0, [sp, #8]
 801d01e:	49bb      	ldr	r1, [pc, #748]	; (801d30c <__kernel_rem_pio2f+0x2fc>)
 801d020:	9866      	ldr	r0, [sp, #408]	; 0x198
 801d022:	9301      	str	r3, [sp, #4]
 801d024:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801d028:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801d02c:	1e59      	subs	r1, r3, #1
 801d02e:	1d13      	adds	r3, r2, #4
 801d030:	db27      	blt.n	801d082 <__kernel_rem_pio2f+0x72>
 801d032:	f1b2 0b03 	subs.w	fp, r2, #3
 801d036:	bf48      	it	mi
 801d038:	f102 0b04 	addmi.w	fp, r2, #4
 801d03c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801d040:	1c45      	adds	r5, r0, #1
 801d042:	00ec      	lsls	r4, r5, #3
 801d044:	1a47      	subs	r7, r0, r1
 801d046:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801d31c <__kernel_rem_pio2f+0x30c>
 801d04a:	9403      	str	r4, [sp, #12]
 801d04c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801d050:	eb0a 0c01 	add.w	ip, sl, r1
 801d054:	ae1c      	add	r6, sp, #112	; 0x70
 801d056:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801d05a:	2400      	movs	r4, #0
 801d05c:	4564      	cmp	r4, ip
 801d05e:	dd12      	ble.n	801d086 <__kernel_rem_pio2f+0x76>
 801d060:	9b01      	ldr	r3, [sp, #4]
 801d062:	ac1c      	add	r4, sp, #112	; 0x70
 801d064:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d068:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801d06c:	f04f 0c00 	mov.w	ip, #0
 801d070:	45d4      	cmp	ip, sl
 801d072:	dc27      	bgt.n	801d0c4 <__kernel_rem_pio2f+0xb4>
 801d074:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801d078:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801d31c <__kernel_rem_pio2f+0x30c>
 801d07c:	4627      	mov	r7, r4
 801d07e:	2600      	movs	r6, #0
 801d080:	e016      	b.n	801d0b0 <__kernel_rem_pio2f+0xa0>
 801d082:	2000      	movs	r0, #0
 801d084:	e7dc      	b.n	801d040 <__kernel_rem_pio2f+0x30>
 801d086:	42e7      	cmn	r7, r4
 801d088:	bf5d      	ittte	pl
 801d08a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801d08e:	ee07 3a90 	vmovpl	s15, r3
 801d092:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801d096:	eef0 7a47 	vmovmi.f32	s15, s14
 801d09a:	ece6 7a01 	vstmia	r6!, {s15}
 801d09e:	3401      	adds	r4, #1
 801d0a0:	e7dc      	b.n	801d05c <__kernel_rem_pio2f+0x4c>
 801d0a2:	ecf9 6a01 	vldmia	r9!, {s13}
 801d0a6:	ed97 7a00 	vldr	s14, [r7]
 801d0aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d0ae:	3601      	adds	r6, #1
 801d0b0:	428e      	cmp	r6, r1
 801d0b2:	f1a7 0704 	sub.w	r7, r7, #4
 801d0b6:	ddf4      	ble.n	801d0a2 <__kernel_rem_pio2f+0x92>
 801d0b8:	eceb 7a01 	vstmia	fp!, {s15}
 801d0bc:	f10c 0c01 	add.w	ip, ip, #1
 801d0c0:	3404      	adds	r4, #4
 801d0c2:	e7d5      	b.n	801d070 <__kernel_rem_pio2f+0x60>
 801d0c4:	ab08      	add	r3, sp, #32
 801d0c6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801d0ca:	eddf 8a93 	vldr	s17, [pc, #588]	; 801d318 <__kernel_rem_pio2f+0x308>
 801d0ce:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801d314 <__kernel_rem_pio2f+0x304>
 801d0d2:	9304      	str	r3, [sp, #16]
 801d0d4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801d0d8:	4656      	mov	r6, sl
 801d0da:	00b3      	lsls	r3, r6, #2
 801d0dc:	9305      	str	r3, [sp, #20]
 801d0de:	ab58      	add	r3, sp, #352	; 0x160
 801d0e0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801d0e4:	ac08      	add	r4, sp, #32
 801d0e6:	ab44      	add	r3, sp, #272	; 0x110
 801d0e8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801d0ec:	46a4      	mov	ip, r4
 801d0ee:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801d0f2:	4637      	mov	r7, r6
 801d0f4:	2f00      	cmp	r7, #0
 801d0f6:	f1a0 0004 	sub.w	r0, r0, #4
 801d0fa:	dc4f      	bgt.n	801d19c <__kernel_rem_pio2f+0x18c>
 801d0fc:	4628      	mov	r0, r5
 801d0fe:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801d102:	f000 fd61 	bl	801dbc8 <scalbnf>
 801d106:	eeb0 8a40 	vmov.f32	s16, s0
 801d10a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801d10e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801d112:	f000 fd11 	bl	801db38 <floorf>
 801d116:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801d11a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801d11e:	2d00      	cmp	r5, #0
 801d120:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801d124:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801d128:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801d12c:	ee17 9a90 	vmov	r9, s15
 801d130:	ee38 8a40 	vsub.f32	s16, s16, s0
 801d134:	dd44      	ble.n	801d1c0 <__kernel_rem_pio2f+0x1b0>
 801d136:	f106 3cff 	add.w	ip, r6, #4294967295
 801d13a:	ab08      	add	r3, sp, #32
 801d13c:	f1c5 0e08 	rsb	lr, r5, #8
 801d140:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801d144:	fa47 f00e 	asr.w	r0, r7, lr
 801d148:	4481      	add	r9, r0
 801d14a:	fa00 f00e 	lsl.w	r0, r0, lr
 801d14e:	1a3f      	subs	r7, r7, r0
 801d150:	f1c5 0007 	rsb	r0, r5, #7
 801d154:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801d158:	4107      	asrs	r7, r0
 801d15a:	2f00      	cmp	r7, #0
 801d15c:	dd3f      	ble.n	801d1de <__kernel_rem_pio2f+0x1ce>
 801d15e:	f04f 0e00 	mov.w	lr, #0
 801d162:	f109 0901 	add.w	r9, r9, #1
 801d166:	4673      	mov	r3, lr
 801d168:	4576      	cmp	r6, lr
 801d16a:	dc6b      	bgt.n	801d244 <__kernel_rem_pio2f+0x234>
 801d16c:	2d00      	cmp	r5, #0
 801d16e:	dd04      	ble.n	801d17a <__kernel_rem_pio2f+0x16a>
 801d170:	2d01      	cmp	r5, #1
 801d172:	d078      	beq.n	801d266 <__kernel_rem_pio2f+0x256>
 801d174:	2d02      	cmp	r5, #2
 801d176:	f000 8081 	beq.w	801d27c <__kernel_rem_pio2f+0x26c>
 801d17a:	2f02      	cmp	r7, #2
 801d17c:	d12f      	bne.n	801d1de <__kernel_rem_pio2f+0x1ce>
 801d17e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d182:	ee30 8a48 	vsub.f32	s16, s0, s16
 801d186:	b353      	cbz	r3, 801d1de <__kernel_rem_pio2f+0x1ce>
 801d188:	4628      	mov	r0, r5
 801d18a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801d18e:	f000 fd1b 	bl	801dbc8 <scalbnf>
 801d192:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801d196:	ee38 8a40 	vsub.f32	s16, s16, s0
 801d19a:	e020      	b.n	801d1de <__kernel_rem_pio2f+0x1ce>
 801d19c:	ee60 7a28 	vmul.f32	s15, s0, s17
 801d1a0:	3f01      	subs	r7, #1
 801d1a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d1a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1aa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801d1ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d1b2:	ecac 0a01 	vstmia	ip!, {s0}
 801d1b6:	ed90 0a00 	vldr	s0, [r0]
 801d1ba:	ee37 0a80 	vadd.f32	s0, s15, s0
 801d1be:	e799      	b.n	801d0f4 <__kernel_rem_pio2f+0xe4>
 801d1c0:	d105      	bne.n	801d1ce <__kernel_rem_pio2f+0x1be>
 801d1c2:	1e70      	subs	r0, r6, #1
 801d1c4:	ab08      	add	r3, sp, #32
 801d1c6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801d1ca:	11ff      	asrs	r7, r7, #7
 801d1cc:	e7c5      	b.n	801d15a <__kernel_rem_pio2f+0x14a>
 801d1ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d1d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1da:	da31      	bge.n	801d240 <__kernel_rem_pio2f+0x230>
 801d1dc:	2700      	movs	r7, #0
 801d1de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1e6:	f040 809b 	bne.w	801d320 <__kernel_rem_pio2f+0x310>
 801d1ea:	1e74      	subs	r4, r6, #1
 801d1ec:	46a4      	mov	ip, r4
 801d1ee:	2000      	movs	r0, #0
 801d1f0:	45d4      	cmp	ip, sl
 801d1f2:	da4a      	bge.n	801d28a <__kernel_rem_pio2f+0x27a>
 801d1f4:	2800      	cmp	r0, #0
 801d1f6:	d07a      	beq.n	801d2ee <__kernel_rem_pio2f+0x2de>
 801d1f8:	ab08      	add	r3, sp, #32
 801d1fa:	3d08      	subs	r5, #8
 801d1fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d200:	2b00      	cmp	r3, #0
 801d202:	f000 8081 	beq.w	801d308 <__kernel_rem_pio2f+0x2f8>
 801d206:	4628      	mov	r0, r5
 801d208:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d20c:	00a5      	lsls	r5, r4, #2
 801d20e:	f000 fcdb 	bl	801dbc8 <scalbnf>
 801d212:	aa44      	add	r2, sp, #272	; 0x110
 801d214:	1d2b      	adds	r3, r5, #4
 801d216:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801d318 <__kernel_rem_pio2f+0x308>
 801d21a:	18d1      	adds	r1, r2, r3
 801d21c:	4622      	mov	r2, r4
 801d21e:	2a00      	cmp	r2, #0
 801d220:	f280 80ae 	bge.w	801d380 <__kernel_rem_pio2f+0x370>
 801d224:	4622      	mov	r2, r4
 801d226:	2a00      	cmp	r2, #0
 801d228:	f2c0 80cc 	blt.w	801d3c4 <__kernel_rem_pio2f+0x3b4>
 801d22c:	a944      	add	r1, sp, #272	; 0x110
 801d22e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801d232:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801d310 <__kernel_rem_pio2f+0x300>
 801d236:	eddf 7a39 	vldr	s15, [pc, #228]	; 801d31c <__kernel_rem_pio2f+0x30c>
 801d23a:	2000      	movs	r0, #0
 801d23c:	1aa1      	subs	r1, r4, r2
 801d23e:	e0b6      	b.n	801d3ae <__kernel_rem_pio2f+0x39e>
 801d240:	2702      	movs	r7, #2
 801d242:	e78c      	b.n	801d15e <__kernel_rem_pio2f+0x14e>
 801d244:	6820      	ldr	r0, [r4, #0]
 801d246:	b94b      	cbnz	r3, 801d25c <__kernel_rem_pio2f+0x24c>
 801d248:	b118      	cbz	r0, 801d252 <__kernel_rem_pio2f+0x242>
 801d24a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801d24e:	6020      	str	r0, [r4, #0]
 801d250:	2001      	movs	r0, #1
 801d252:	f10e 0e01 	add.w	lr, lr, #1
 801d256:	3404      	adds	r4, #4
 801d258:	4603      	mov	r3, r0
 801d25a:	e785      	b.n	801d168 <__kernel_rem_pio2f+0x158>
 801d25c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801d260:	6020      	str	r0, [r4, #0]
 801d262:	4618      	mov	r0, r3
 801d264:	e7f5      	b.n	801d252 <__kernel_rem_pio2f+0x242>
 801d266:	1e74      	subs	r4, r6, #1
 801d268:	a808      	add	r0, sp, #32
 801d26a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801d26e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801d272:	f10d 0c20 	add.w	ip, sp, #32
 801d276:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801d27a:	e77e      	b.n	801d17a <__kernel_rem_pio2f+0x16a>
 801d27c:	1e74      	subs	r4, r6, #1
 801d27e:	a808      	add	r0, sp, #32
 801d280:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801d284:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801d288:	e7f3      	b.n	801d272 <__kernel_rem_pio2f+0x262>
 801d28a:	ab08      	add	r3, sp, #32
 801d28c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801d290:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d294:	4318      	orrs	r0, r3
 801d296:	e7ab      	b.n	801d1f0 <__kernel_rem_pio2f+0x1e0>
 801d298:	f10c 0c01 	add.w	ip, ip, #1
 801d29c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801d2a0:	2c00      	cmp	r4, #0
 801d2a2:	d0f9      	beq.n	801d298 <__kernel_rem_pio2f+0x288>
 801d2a4:	9b05      	ldr	r3, [sp, #20]
 801d2a6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801d2aa:	eb0d 0003 	add.w	r0, sp, r3
 801d2ae:	9b01      	ldr	r3, [sp, #4]
 801d2b0:	18f4      	adds	r4, r6, r3
 801d2b2:	ab1c      	add	r3, sp, #112	; 0x70
 801d2b4:	1c77      	adds	r7, r6, #1
 801d2b6:	384c      	subs	r0, #76	; 0x4c
 801d2b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d2bc:	4466      	add	r6, ip
 801d2be:	42be      	cmp	r6, r7
 801d2c0:	f6ff af0b 	blt.w	801d0da <__kernel_rem_pio2f+0xca>
 801d2c4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801d2c8:	f8dd e008 	ldr.w	lr, [sp, #8]
 801d2cc:	ee07 3a90 	vmov	s15, r3
 801d2d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d2d4:	f04f 0c00 	mov.w	ip, #0
 801d2d8:	ece4 7a01 	vstmia	r4!, {s15}
 801d2dc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801d31c <__kernel_rem_pio2f+0x30c>
 801d2e0:	46a1      	mov	r9, r4
 801d2e2:	458c      	cmp	ip, r1
 801d2e4:	dd07      	ble.n	801d2f6 <__kernel_rem_pio2f+0x2e6>
 801d2e6:	ece0 7a01 	vstmia	r0!, {s15}
 801d2ea:	3701      	adds	r7, #1
 801d2ec:	e7e7      	b.n	801d2be <__kernel_rem_pio2f+0x2ae>
 801d2ee:	9804      	ldr	r0, [sp, #16]
 801d2f0:	f04f 0c01 	mov.w	ip, #1
 801d2f4:	e7d2      	b.n	801d29c <__kernel_rem_pio2f+0x28c>
 801d2f6:	ecfe 6a01 	vldmia	lr!, {s13}
 801d2fa:	ed39 7a01 	vldmdb	r9!, {s14}
 801d2fe:	f10c 0c01 	add.w	ip, ip, #1
 801d302:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d306:	e7ec      	b.n	801d2e2 <__kernel_rem_pio2f+0x2d2>
 801d308:	3c01      	subs	r4, #1
 801d30a:	e775      	b.n	801d1f8 <__kernel_rem_pio2f+0x1e8>
 801d30c:	0801e364 	.word	0x0801e364
 801d310:	0801e338 	.word	0x0801e338
 801d314:	43800000 	.word	0x43800000
 801d318:	3b800000 	.word	0x3b800000
 801d31c:	00000000 	.word	0x00000000
 801d320:	9b03      	ldr	r3, [sp, #12]
 801d322:	eeb0 0a48 	vmov.f32	s0, s16
 801d326:	1a98      	subs	r0, r3, r2
 801d328:	f000 fc4e 	bl	801dbc8 <scalbnf>
 801d32c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801d314 <__kernel_rem_pio2f+0x304>
 801d330:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801d334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d338:	db19      	blt.n	801d36e <__kernel_rem_pio2f+0x35e>
 801d33a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801d318 <__kernel_rem_pio2f+0x308>
 801d33e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d342:	aa08      	add	r2, sp, #32
 801d344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d348:	1c74      	adds	r4, r6, #1
 801d34a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d34e:	3508      	adds	r5, #8
 801d350:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801d354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d358:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d35c:	ee10 3a10 	vmov	r3, s0
 801d360:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801d364:	ee17 3a90 	vmov	r3, s15
 801d368:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d36c:	e74b      	b.n	801d206 <__kernel_rem_pio2f+0x1f6>
 801d36e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d372:	aa08      	add	r2, sp, #32
 801d374:	ee10 3a10 	vmov	r3, s0
 801d378:	4634      	mov	r4, r6
 801d37a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801d37e:	e742      	b.n	801d206 <__kernel_rem_pio2f+0x1f6>
 801d380:	a808      	add	r0, sp, #32
 801d382:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801d386:	9001      	str	r0, [sp, #4]
 801d388:	ee07 0a90 	vmov	s15, r0
 801d38c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d390:	3a01      	subs	r2, #1
 801d392:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d396:	ee20 0a07 	vmul.f32	s0, s0, s14
 801d39a:	ed61 7a01 	vstmdb	r1!, {s15}
 801d39e:	e73e      	b.n	801d21e <__kernel_rem_pio2f+0x20e>
 801d3a0:	ecfc 6a01 	vldmia	ip!, {s13}
 801d3a4:	ecb6 7a01 	vldmia	r6!, {s14}
 801d3a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d3ac:	3001      	adds	r0, #1
 801d3ae:	4550      	cmp	r0, sl
 801d3b0:	dc01      	bgt.n	801d3b6 <__kernel_rem_pio2f+0x3a6>
 801d3b2:	4288      	cmp	r0, r1
 801d3b4:	ddf4      	ble.n	801d3a0 <__kernel_rem_pio2f+0x390>
 801d3b6:	a858      	add	r0, sp, #352	; 0x160
 801d3b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d3bc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801d3c0:	3a01      	subs	r2, #1
 801d3c2:	e730      	b.n	801d226 <__kernel_rem_pio2f+0x216>
 801d3c4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801d3c6:	2a02      	cmp	r2, #2
 801d3c8:	dc09      	bgt.n	801d3de <__kernel_rem_pio2f+0x3ce>
 801d3ca:	2a00      	cmp	r2, #0
 801d3cc:	dc2a      	bgt.n	801d424 <__kernel_rem_pio2f+0x414>
 801d3ce:	d043      	beq.n	801d458 <__kernel_rem_pio2f+0x448>
 801d3d0:	f009 0007 	and.w	r0, r9, #7
 801d3d4:	b059      	add	sp, #356	; 0x164
 801d3d6:	ecbd 8b04 	vpop	{d8-d9}
 801d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3de:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801d3e0:	2b03      	cmp	r3, #3
 801d3e2:	d1f5      	bne.n	801d3d0 <__kernel_rem_pio2f+0x3c0>
 801d3e4:	ab30      	add	r3, sp, #192	; 0xc0
 801d3e6:	442b      	add	r3, r5
 801d3e8:	461a      	mov	r2, r3
 801d3ea:	4619      	mov	r1, r3
 801d3ec:	4620      	mov	r0, r4
 801d3ee:	2800      	cmp	r0, #0
 801d3f0:	f1a1 0104 	sub.w	r1, r1, #4
 801d3f4:	dc51      	bgt.n	801d49a <__kernel_rem_pio2f+0x48a>
 801d3f6:	4621      	mov	r1, r4
 801d3f8:	2901      	cmp	r1, #1
 801d3fa:	f1a2 0204 	sub.w	r2, r2, #4
 801d3fe:	dc5c      	bgt.n	801d4ba <__kernel_rem_pio2f+0x4aa>
 801d400:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801d31c <__kernel_rem_pio2f+0x30c>
 801d404:	3304      	adds	r3, #4
 801d406:	2c01      	cmp	r4, #1
 801d408:	dc67      	bgt.n	801d4da <__kernel_rem_pio2f+0x4ca>
 801d40a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801d40e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801d412:	2f00      	cmp	r7, #0
 801d414:	d167      	bne.n	801d4e6 <__kernel_rem_pio2f+0x4d6>
 801d416:	edc8 6a00 	vstr	s13, [r8]
 801d41a:	ed88 7a01 	vstr	s14, [r8, #4]
 801d41e:	edc8 7a02 	vstr	s15, [r8, #8]
 801d422:	e7d5      	b.n	801d3d0 <__kernel_rem_pio2f+0x3c0>
 801d424:	aa30      	add	r2, sp, #192	; 0xc0
 801d426:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801d31c <__kernel_rem_pio2f+0x30c>
 801d42a:	4413      	add	r3, r2
 801d42c:	4622      	mov	r2, r4
 801d42e:	2a00      	cmp	r2, #0
 801d430:	da24      	bge.n	801d47c <__kernel_rem_pio2f+0x46c>
 801d432:	b34f      	cbz	r7, 801d488 <__kernel_rem_pio2f+0x478>
 801d434:	eef1 7a47 	vneg.f32	s15, s14
 801d438:	edc8 7a00 	vstr	s15, [r8]
 801d43c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801d440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d444:	aa31      	add	r2, sp, #196	; 0xc4
 801d446:	2301      	movs	r3, #1
 801d448:	429c      	cmp	r4, r3
 801d44a:	da20      	bge.n	801d48e <__kernel_rem_pio2f+0x47e>
 801d44c:	b10f      	cbz	r7, 801d452 <__kernel_rem_pio2f+0x442>
 801d44e:	eef1 7a67 	vneg.f32	s15, s15
 801d452:	edc8 7a01 	vstr	s15, [r8, #4]
 801d456:	e7bb      	b.n	801d3d0 <__kernel_rem_pio2f+0x3c0>
 801d458:	aa30      	add	r2, sp, #192	; 0xc0
 801d45a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801d31c <__kernel_rem_pio2f+0x30c>
 801d45e:	4413      	add	r3, r2
 801d460:	2c00      	cmp	r4, #0
 801d462:	da05      	bge.n	801d470 <__kernel_rem_pio2f+0x460>
 801d464:	b10f      	cbz	r7, 801d46a <__kernel_rem_pio2f+0x45a>
 801d466:	eef1 7a67 	vneg.f32	s15, s15
 801d46a:	edc8 7a00 	vstr	s15, [r8]
 801d46e:	e7af      	b.n	801d3d0 <__kernel_rem_pio2f+0x3c0>
 801d470:	ed33 7a01 	vldmdb	r3!, {s14}
 801d474:	3c01      	subs	r4, #1
 801d476:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d47a:	e7f1      	b.n	801d460 <__kernel_rem_pio2f+0x450>
 801d47c:	ed73 7a01 	vldmdb	r3!, {s15}
 801d480:	3a01      	subs	r2, #1
 801d482:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d486:	e7d2      	b.n	801d42e <__kernel_rem_pio2f+0x41e>
 801d488:	eef0 7a47 	vmov.f32	s15, s14
 801d48c:	e7d4      	b.n	801d438 <__kernel_rem_pio2f+0x428>
 801d48e:	ecb2 7a01 	vldmia	r2!, {s14}
 801d492:	3301      	adds	r3, #1
 801d494:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d498:	e7d6      	b.n	801d448 <__kernel_rem_pio2f+0x438>
 801d49a:	edd1 7a00 	vldr	s15, [r1]
 801d49e:	edd1 6a01 	vldr	s13, [r1, #4]
 801d4a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d4a6:	3801      	subs	r0, #1
 801d4a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d4ac:	ed81 7a00 	vstr	s14, [r1]
 801d4b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4b4:	edc1 7a01 	vstr	s15, [r1, #4]
 801d4b8:	e799      	b.n	801d3ee <__kernel_rem_pio2f+0x3de>
 801d4ba:	edd2 7a00 	vldr	s15, [r2]
 801d4be:	edd2 6a01 	vldr	s13, [r2, #4]
 801d4c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d4c6:	3901      	subs	r1, #1
 801d4c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d4cc:	ed82 7a00 	vstr	s14, [r2]
 801d4d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4d4:	edc2 7a01 	vstr	s15, [r2, #4]
 801d4d8:	e78e      	b.n	801d3f8 <__kernel_rem_pio2f+0x3e8>
 801d4da:	ed33 7a01 	vldmdb	r3!, {s14}
 801d4de:	3c01      	subs	r4, #1
 801d4e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d4e4:	e78f      	b.n	801d406 <__kernel_rem_pio2f+0x3f6>
 801d4e6:	eef1 6a66 	vneg.f32	s13, s13
 801d4ea:	eeb1 7a47 	vneg.f32	s14, s14
 801d4ee:	edc8 6a00 	vstr	s13, [r8]
 801d4f2:	ed88 7a01 	vstr	s14, [r8, #4]
 801d4f6:	eef1 7a67 	vneg.f32	s15, s15
 801d4fa:	e790      	b.n	801d41e <__kernel_rem_pio2f+0x40e>

0801d4fc <__kernel_sinf>:
 801d4fc:	ee10 3a10 	vmov	r3, s0
 801d500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d504:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801d508:	da04      	bge.n	801d514 <__kernel_sinf+0x18>
 801d50a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d50e:	ee17 3a90 	vmov	r3, s15
 801d512:	b35b      	cbz	r3, 801d56c <__kernel_sinf+0x70>
 801d514:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d518:	eddf 7a15 	vldr	s15, [pc, #84]	; 801d570 <__kernel_sinf+0x74>
 801d51c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801d574 <__kernel_sinf+0x78>
 801d520:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d524:	eddf 7a14 	vldr	s15, [pc, #80]	; 801d578 <__kernel_sinf+0x7c>
 801d528:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d52c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801d57c <__kernel_sinf+0x80>
 801d530:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d534:	eddf 7a12 	vldr	s15, [pc, #72]	; 801d580 <__kernel_sinf+0x84>
 801d538:	ee60 6a07 	vmul.f32	s13, s0, s14
 801d53c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d540:	b930      	cbnz	r0, 801d550 <__kernel_sinf+0x54>
 801d542:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801d584 <__kernel_sinf+0x88>
 801d546:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d54a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801d54e:	4770      	bx	lr
 801d550:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801d554:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801d558:	eee0 7a86 	vfma.f32	s15, s1, s12
 801d55c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801d560:	eddf 7a09 	vldr	s15, [pc, #36]	; 801d588 <__kernel_sinf+0x8c>
 801d564:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801d568:	ee30 0a60 	vsub.f32	s0, s0, s1
 801d56c:	4770      	bx	lr
 801d56e:	bf00      	nop
 801d570:	2f2ec9d3 	.word	0x2f2ec9d3
 801d574:	b2d72f34 	.word	0xb2d72f34
 801d578:	3638ef1b 	.word	0x3638ef1b
 801d57c:	b9500d01 	.word	0xb9500d01
 801d580:	3c088889 	.word	0x3c088889
 801d584:	be2aaaab 	.word	0xbe2aaaab
 801d588:	3e2aaaab 	.word	0x3e2aaaab

0801d58c <__kernel_tanf>:
 801d58c:	b508      	push	{r3, lr}
 801d58e:	ee10 3a10 	vmov	r3, s0
 801d592:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d596:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801d59a:	eef0 7a40 	vmov.f32	s15, s0
 801d59e:	da17      	bge.n	801d5d0 <__kernel_tanf+0x44>
 801d5a0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801d5a4:	ee17 1a10 	vmov	r1, s14
 801d5a8:	bb41      	cbnz	r1, 801d5fc <__kernel_tanf+0x70>
 801d5aa:	1c43      	adds	r3, r0, #1
 801d5ac:	4313      	orrs	r3, r2
 801d5ae:	d108      	bne.n	801d5c2 <__kernel_tanf+0x36>
 801d5b0:	f000 faba 	bl	801db28 <fabsf>
 801d5b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d5b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5bc:	eeb0 0a67 	vmov.f32	s0, s15
 801d5c0:	bd08      	pop	{r3, pc}
 801d5c2:	2801      	cmp	r0, #1
 801d5c4:	d0fa      	beq.n	801d5bc <__kernel_tanf+0x30>
 801d5c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d5ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5ce:	e7f5      	b.n	801d5bc <__kernel_tanf+0x30>
 801d5d0:	494c      	ldr	r1, [pc, #304]	; (801d704 <__kernel_tanf+0x178>)
 801d5d2:	428a      	cmp	r2, r1
 801d5d4:	db12      	blt.n	801d5fc <__kernel_tanf+0x70>
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	bfb8      	it	lt
 801d5da:	eef1 7a40 	vneglt.f32	s15, s0
 801d5de:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801d708 <__kernel_tanf+0x17c>
 801d5e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 801d5e6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801d70c <__kernel_tanf+0x180>
 801d5ea:	bfb8      	it	lt
 801d5ec:	eef1 0a60 	vneglt.f32	s1, s1
 801d5f0:	ee70 0a60 	vsub.f32	s1, s0, s1
 801d5f4:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801d5f8:	eddf 0a45 	vldr	s1, [pc, #276]	; 801d710 <__kernel_tanf+0x184>
 801d5fc:	eddf 5a45 	vldr	s11, [pc, #276]	; 801d714 <__kernel_tanf+0x188>
 801d600:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801d718 <__kernel_tanf+0x18c>
 801d604:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801d71c <__kernel_tanf+0x190>
 801d608:	493e      	ldr	r1, [pc, #248]	; (801d704 <__kernel_tanf+0x178>)
 801d60a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801d60e:	428a      	cmp	r2, r1
 801d610:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801d614:	eea7 6a25 	vfma.f32	s12, s14, s11
 801d618:	eddf 5a41 	vldr	s11, [pc, #260]	; 801d720 <__kernel_tanf+0x194>
 801d61c:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d620:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801d724 <__kernel_tanf+0x198>
 801d624:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d628:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801d728 <__kernel_tanf+0x19c>
 801d62c:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d630:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801d72c <__kernel_tanf+0x1a0>
 801d634:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d638:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801d730 <__kernel_tanf+0x1a4>
 801d63c:	eee7 5a05 	vfma.f32	s11, s14, s10
 801d640:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801d734 <__kernel_tanf+0x1a8>
 801d644:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d648:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801d738 <__kernel_tanf+0x1ac>
 801d64c:	eee5 5a07 	vfma.f32	s11, s10, s14
 801d650:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801d73c <__kernel_tanf+0x1b0>
 801d654:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d658:	eddf 5a39 	vldr	s11, [pc, #228]	; 801d740 <__kernel_tanf+0x1b4>
 801d65c:	eee5 5a07 	vfma.f32	s11, s10, s14
 801d660:	eeb0 7a46 	vmov.f32	s14, s12
 801d664:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d668:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801d66c:	eeb0 6a60 	vmov.f32	s12, s1
 801d670:	eea7 6a05 	vfma.f32	s12, s14, s10
 801d674:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801d744 <__kernel_tanf+0x1b8>
 801d678:	eee6 0a26 	vfma.f32	s1, s12, s13
 801d67c:	eee5 0a07 	vfma.f32	s1, s10, s14
 801d680:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801d684:	db1d      	blt.n	801d6c2 <__kernel_tanf+0x136>
 801d686:	ee06 0a90 	vmov	s13, r0
 801d68a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801d68e:	ee27 6a07 	vmul.f32	s12, s14, s14
 801d692:	ee37 7a00 	vadd.f32	s14, s14, s0
 801d696:	179b      	asrs	r3, r3, #30
 801d698:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801d69c:	f003 0302 	and.w	r3, r3, #2
 801d6a0:	f1c3 0301 	rsb	r3, r3, #1
 801d6a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801d6a8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801d6ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d6b0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801d6b4:	ee07 3a90 	vmov	s15, r3
 801d6b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d6bc:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d6c0:	e77c      	b.n	801d5bc <__kernel_tanf+0x30>
 801d6c2:	2801      	cmp	r0, #1
 801d6c4:	d01b      	beq.n	801d6fe <__kernel_tanf+0x172>
 801d6c6:	4b20      	ldr	r3, [pc, #128]	; (801d748 <__kernel_tanf+0x1bc>)
 801d6c8:	ee17 2a10 	vmov	r2, s14
 801d6cc:	401a      	ands	r2, r3
 801d6ce:	ee06 2a10 	vmov	s12, r2
 801d6d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 801d6d6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801d6da:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801d6de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801d6e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6e6:	ee16 2a90 	vmov	r2, s13
 801d6ea:	4013      	ands	r3, r2
 801d6ec:	ee07 3a90 	vmov	s15, r3
 801d6f0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d6f4:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801d6f8:	eee7 7a26 	vfma.f32	s15, s14, s13
 801d6fc:	e75e      	b.n	801d5bc <__kernel_tanf+0x30>
 801d6fe:	eef0 7a47 	vmov.f32	s15, s14
 801d702:	e75b      	b.n	801d5bc <__kernel_tanf+0x30>
 801d704:	3f2ca140 	.word	0x3f2ca140
 801d708:	3f490fda 	.word	0x3f490fda
 801d70c:	33222168 	.word	0x33222168
 801d710:	00000000 	.word	0x00000000
 801d714:	b79bae5f 	.word	0xb79bae5f
 801d718:	38a3f445 	.word	0x38a3f445
 801d71c:	37d95384 	.word	0x37d95384
 801d720:	3a1a26c8 	.word	0x3a1a26c8
 801d724:	3b6b6916 	.word	0x3b6b6916
 801d728:	3cb327a4 	.word	0x3cb327a4
 801d72c:	3e088889 	.word	0x3e088889
 801d730:	3895c07a 	.word	0x3895c07a
 801d734:	398137b9 	.word	0x398137b9
 801d738:	3abede48 	.word	0x3abede48
 801d73c:	3c11371f 	.word	0x3c11371f
 801d740:	3d5d0dd1 	.word	0x3d5d0dd1
 801d744:	3eaaaaab 	.word	0x3eaaaaab
 801d748:	fffff000 	.word	0xfffff000

0801d74c <with_errno>:
 801d74c:	b570      	push	{r4, r5, r6, lr}
 801d74e:	4604      	mov	r4, r0
 801d750:	460d      	mov	r5, r1
 801d752:	4616      	mov	r6, r2
 801d754:	f7fd fdca 	bl	801b2ec <__errno>
 801d758:	4629      	mov	r1, r5
 801d75a:	6006      	str	r6, [r0, #0]
 801d75c:	4620      	mov	r0, r4
 801d75e:	bd70      	pop	{r4, r5, r6, pc}

0801d760 <xflow>:
 801d760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d762:	4614      	mov	r4, r2
 801d764:	461d      	mov	r5, r3
 801d766:	b108      	cbz	r0, 801d76c <xflow+0xc>
 801d768:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d76c:	e9cd 2300 	strd	r2, r3, [sp]
 801d770:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d774:	4620      	mov	r0, r4
 801d776:	4629      	mov	r1, r5
 801d778:	f7e2 ff36 	bl	80005e8 <__aeabi_dmul>
 801d77c:	2222      	movs	r2, #34	; 0x22
 801d77e:	b003      	add	sp, #12
 801d780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d784:	f7ff bfe2 	b.w	801d74c <with_errno>

0801d788 <__math_uflow>:
 801d788:	b508      	push	{r3, lr}
 801d78a:	2200      	movs	r2, #0
 801d78c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d790:	f7ff ffe6 	bl	801d760 <xflow>
 801d794:	ec41 0b10 	vmov	d0, r0, r1
 801d798:	bd08      	pop	{r3, pc}

0801d79a <__math_oflow>:
 801d79a:	b508      	push	{r3, lr}
 801d79c:	2200      	movs	r2, #0
 801d79e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801d7a2:	f7ff ffdd 	bl	801d760 <xflow>
 801d7a6:	ec41 0b10 	vmov	d0, r0, r1
 801d7aa:	bd08      	pop	{r3, pc}
 801d7ac:	0000      	movs	r0, r0
	...

0801d7b0 <atan>:
 801d7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7b4:	ec55 4b10 	vmov	r4, r5, d0
 801d7b8:	4bc3      	ldr	r3, [pc, #780]	; (801dac8 <atan+0x318>)
 801d7ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d7be:	429e      	cmp	r6, r3
 801d7c0:	46ab      	mov	fp, r5
 801d7c2:	dd18      	ble.n	801d7f6 <atan+0x46>
 801d7c4:	4bc1      	ldr	r3, [pc, #772]	; (801dacc <atan+0x31c>)
 801d7c6:	429e      	cmp	r6, r3
 801d7c8:	dc01      	bgt.n	801d7ce <atan+0x1e>
 801d7ca:	d109      	bne.n	801d7e0 <atan+0x30>
 801d7cc:	b144      	cbz	r4, 801d7e0 <atan+0x30>
 801d7ce:	4622      	mov	r2, r4
 801d7d0:	462b      	mov	r3, r5
 801d7d2:	4620      	mov	r0, r4
 801d7d4:	4629      	mov	r1, r5
 801d7d6:	f7e2 fd51 	bl	800027c <__adddf3>
 801d7da:	4604      	mov	r4, r0
 801d7dc:	460d      	mov	r5, r1
 801d7de:	e006      	b.n	801d7ee <atan+0x3e>
 801d7e0:	f1bb 0f00 	cmp.w	fp, #0
 801d7e4:	f300 8131 	bgt.w	801da4a <atan+0x29a>
 801d7e8:	a59b      	add	r5, pc, #620	; (adr r5, 801da58 <atan+0x2a8>)
 801d7ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d7ee:	ec45 4b10 	vmov	d0, r4, r5
 801d7f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7f6:	4bb6      	ldr	r3, [pc, #728]	; (801dad0 <atan+0x320>)
 801d7f8:	429e      	cmp	r6, r3
 801d7fa:	dc14      	bgt.n	801d826 <atan+0x76>
 801d7fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801d800:	429e      	cmp	r6, r3
 801d802:	dc0d      	bgt.n	801d820 <atan+0x70>
 801d804:	a396      	add	r3, pc, #600	; (adr r3, 801da60 <atan+0x2b0>)
 801d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d80a:	ee10 0a10 	vmov	r0, s0
 801d80e:	4629      	mov	r1, r5
 801d810:	f7e2 fd34 	bl	800027c <__adddf3>
 801d814:	4baf      	ldr	r3, [pc, #700]	; (801dad4 <atan+0x324>)
 801d816:	2200      	movs	r2, #0
 801d818:	f7e3 f976 	bl	8000b08 <__aeabi_dcmpgt>
 801d81c:	2800      	cmp	r0, #0
 801d81e:	d1e6      	bne.n	801d7ee <atan+0x3e>
 801d820:	f04f 3aff 	mov.w	sl, #4294967295
 801d824:	e02b      	b.n	801d87e <atan+0xce>
 801d826:	f000 f963 	bl	801daf0 <fabs>
 801d82a:	4bab      	ldr	r3, [pc, #684]	; (801dad8 <atan+0x328>)
 801d82c:	429e      	cmp	r6, r3
 801d82e:	ec55 4b10 	vmov	r4, r5, d0
 801d832:	f300 80bf 	bgt.w	801d9b4 <atan+0x204>
 801d836:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801d83a:	429e      	cmp	r6, r3
 801d83c:	f300 80a0 	bgt.w	801d980 <atan+0x1d0>
 801d840:	ee10 2a10 	vmov	r2, s0
 801d844:	ee10 0a10 	vmov	r0, s0
 801d848:	462b      	mov	r3, r5
 801d84a:	4629      	mov	r1, r5
 801d84c:	f7e2 fd16 	bl	800027c <__adddf3>
 801d850:	4ba0      	ldr	r3, [pc, #640]	; (801dad4 <atan+0x324>)
 801d852:	2200      	movs	r2, #0
 801d854:	f7e2 fd10 	bl	8000278 <__aeabi_dsub>
 801d858:	2200      	movs	r2, #0
 801d85a:	4606      	mov	r6, r0
 801d85c:	460f      	mov	r7, r1
 801d85e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d862:	4620      	mov	r0, r4
 801d864:	4629      	mov	r1, r5
 801d866:	f7e2 fd09 	bl	800027c <__adddf3>
 801d86a:	4602      	mov	r2, r0
 801d86c:	460b      	mov	r3, r1
 801d86e:	4630      	mov	r0, r6
 801d870:	4639      	mov	r1, r7
 801d872:	f7e2 ffe3 	bl	800083c <__aeabi_ddiv>
 801d876:	f04f 0a00 	mov.w	sl, #0
 801d87a:	4604      	mov	r4, r0
 801d87c:	460d      	mov	r5, r1
 801d87e:	4622      	mov	r2, r4
 801d880:	462b      	mov	r3, r5
 801d882:	4620      	mov	r0, r4
 801d884:	4629      	mov	r1, r5
 801d886:	f7e2 feaf 	bl	80005e8 <__aeabi_dmul>
 801d88a:	4602      	mov	r2, r0
 801d88c:	460b      	mov	r3, r1
 801d88e:	4680      	mov	r8, r0
 801d890:	4689      	mov	r9, r1
 801d892:	f7e2 fea9 	bl	80005e8 <__aeabi_dmul>
 801d896:	a374      	add	r3, pc, #464	; (adr r3, 801da68 <atan+0x2b8>)
 801d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d89c:	4606      	mov	r6, r0
 801d89e:	460f      	mov	r7, r1
 801d8a0:	f7e2 fea2 	bl	80005e8 <__aeabi_dmul>
 801d8a4:	a372      	add	r3, pc, #456	; (adr r3, 801da70 <atan+0x2c0>)
 801d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8aa:	f7e2 fce7 	bl	800027c <__adddf3>
 801d8ae:	4632      	mov	r2, r6
 801d8b0:	463b      	mov	r3, r7
 801d8b2:	f7e2 fe99 	bl	80005e8 <__aeabi_dmul>
 801d8b6:	a370      	add	r3, pc, #448	; (adr r3, 801da78 <atan+0x2c8>)
 801d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8bc:	f7e2 fcde 	bl	800027c <__adddf3>
 801d8c0:	4632      	mov	r2, r6
 801d8c2:	463b      	mov	r3, r7
 801d8c4:	f7e2 fe90 	bl	80005e8 <__aeabi_dmul>
 801d8c8:	a36d      	add	r3, pc, #436	; (adr r3, 801da80 <atan+0x2d0>)
 801d8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ce:	f7e2 fcd5 	bl	800027c <__adddf3>
 801d8d2:	4632      	mov	r2, r6
 801d8d4:	463b      	mov	r3, r7
 801d8d6:	f7e2 fe87 	bl	80005e8 <__aeabi_dmul>
 801d8da:	a36b      	add	r3, pc, #428	; (adr r3, 801da88 <atan+0x2d8>)
 801d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8e0:	f7e2 fccc 	bl	800027c <__adddf3>
 801d8e4:	4632      	mov	r2, r6
 801d8e6:	463b      	mov	r3, r7
 801d8e8:	f7e2 fe7e 	bl	80005e8 <__aeabi_dmul>
 801d8ec:	a368      	add	r3, pc, #416	; (adr r3, 801da90 <atan+0x2e0>)
 801d8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8f2:	f7e2 fcc3 	bl	800027c <__adddf3>
 801d8f6:	4642      	mov	r2, r8
 801d8f8:	464b      	mov	r3, r9
 801d8fa:	f7e2 fe75 	bl	80005e8 <__aeabi_dmul>
 801d8fe:	a366      	add	r3, pc, #408	; (adr r3, 801da98 <atan+0x2e8>)
 801d900:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d904:	4680      	mov	r8, r0
 801d906:	4689      	mov	r9, r1
 801d908:	4630      	mov	r0, r6
 801d90a:	4639      	mov	r1, r7
 801d90c:	f7e2 fe6c 	bl	80005e8 <__aeabi_dmul>
 801d910:	a363      	add	r3, pc, #396	; (adr r3, 801daa0 <atan+0x2f0>)
 801d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d916:	f7e2 fcaf 	bl	8000278 <__aeabi_dsub>
 801d91a:	4632      	mov	r2, r6
 801d91c:	463b      	mov	r3, r7
 801d91e:	f7e2 fe63 	bl	80005e8 <__aeabi_dmul>
 801d922:	a361      	add	r3, pc, #388	; (adr r3, 801daa8 <atan+0x2f8>)
 801d924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d928:	f7e2 fca6 	bl	8000278 <__aeabi_dsub>
 801d92c:	4632      	mov	r2, r6
 801d92e:	463b      	mov	r3, r7
 801d930:	f7e2 fe5a 	bl	80005e8 <__aeabi_dmul>
 801d934:	a35e      	add	r3, pc, #376	; (adr r3, 801dab0 <atan+0x300>)
 801d936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d93a:	f7e2 fc9d 	bl	8000278 <__aeabi_dsub>
 801d93e:	4632      	mov	r2, r6
 801d940:	463b      	mov	r3, r7
 801d942:	f7e2 fe51 	bl	80005e8 <__aeabi_dmul>
 801d946:	a35c      	add	r3, pc, #368	; (adr r3, 801dab8 <atan+0x308>)
 801d948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d94c:	f7e2 fc94 	bl	8000278 <__aeabi_dsub>
 801d950:	4632      	mov	r2, r6
 801d952:	463b      	mov	r3, r7
 801d954:	f7e2 fe48 	bl	80005e8 <__aeabi_dmul>
 801d958:	4602      	mov	r2, r0
 801d95a:	460b      	mov	r3, r1
 801d95c:	4640      	mov	r0, r8
 801d95e:	4649      	mov	r1, r9
 801d960:	f7e2 fc8c 	bl	800027c <__adddf3>
 801d964:	4622      	mov	r2, r4
 801d966:	462b      	mov	r3, r5
 801d968:	f7e2 fe3e 	bl	80005e8 <__aeabi_dmul>
 801d96c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d970:	4602      	mov	r2, r0
 801d972:	460b      	mov	r3, r1
 801d974:	d14b      	bne.n	801da0e <atan+0x25e>
 801d976:	4620      	mov	r0, r4
 801d978:	4629      	mov	r1, r5
 801d97a:	f7e2 fc7d 	bl	8000278 <__aeabi_dsub>
 801d97e:	e72c      	b.n	801d7da <atan+0x2a>
 801d980:	ee10 0a10 	vmov	r0, s0
 801d984:	4b53      	ldr	r3, [pc, #332]	; (801dad4 <atan+0x324>)
 801d986:	2200      	movs	r2, #0
 801d988:	4629      	mov	r1, r5
 801d98a:	f7e2 fc75 	bl	8000278 <__aeabi_dsub>
 801d98e:	4b51      	ldr	r3, [pc, #324]	; (801dad4 <atan+0x324>)
 801d990:	4606      	mov	r6, r0
 801d992:	460f      	mov	r7, r1
 801d994:	2200      	movs	r2, #0
 801d996:	4620      	mov	r0, r4
 801d998:	4629      	mov	r1, r5
 801d99a:	f7e2 fc6f 	bl	800027c <__adddf3>
 801d99e:	4602      	mov	r2, r0
 801d9a0:	460b      	mov	r3, r1
 801d9a2:	4630      	mov	r0, r6
 801d9a4:	4639      	mov	r1, r7
 801d9a6:	f7e2 ff49 	bl	800083c <__aeabi_ddiv>
 801d9aa:	f04f 0a01 	mov.w	sl, #1
 801d9ae:	4604      	mov	r4, r0
 801d9b0:	460d      	mov	r5, r1
 801d9b2:	e764      	b.n	801d87e <atan+0xce>
 801d9b4:	4b49      	ldr	r3, [pc, #292]	; (801dadc <atan+0x32c>)
 801d9b6:	429e      	cmp	r6, r3
 801d9b8:	da1d      	bge.n	801d9f6 <atan+0x246>
 801d9ba:	ee10 0a10 	vmov	r0, s0
 801d9be:	4b48      	ldr	r3, [pc, #288]	; (801dae0 <atan+0x330>)
 801d9c0:	2200      	movs	r2, #0
 801d9c2:	4629      	mov	r1, r5
 801d9c4:	f7e2 fc58 	bl	8000278 <__aeabi_dsub>
 801d9c8:	4b45      	ldr	r3, [pc, #276]	; (801dae0 <atan+0x330>)
 801d9ca:	4606      	mov	r6, r0
 801d9cc:	460f      	mov	r7, r1
 801d9ce:	2200      	movs	r2, #0
 801d9d0:	4620      	mov	r0, r4
 801d9d2:	4629      	mov	r1, r5
 801d9d4:	f7e2 fe08 	bl	80005e8 <__aeabi_dmul>
 801d9d8:	4b3e      	ldr	r3, [pc, #248]	; (801dad4 <atan+0x324>)
 801d9da:	2200      	movs	r2, #0
 801d9dc:	f7e2 fc4e 	bl	800027c <__adddf3>
 801d9e0:	4602      	mov	r2, r0
 801d9e2:	460b      	mov	r3, r1
 801d9e4:	4630      	mov	r0, r6
 801d9e6:	4639      	mov	r1, r7
 801d9e8:	f7e2 ff28 	bl	800083c <__aeabi_ddiv>
 801d9ec:	f04f 0a02 	mov.w	sl, #2
 801d9f0:	4604      	mov	r4, r0
 801d9f2:	460d      	mov	r5, r1
 801d9f4:	e743      	b.n	801d87e <atan+0xce>
 801d9f6:	462b      	mov	r3, r5
 801d9f8:	ee10 2a10 	vmov	r2, s0
 801d9fc:	4939      	ldr	r1, [pc, #228]	; (801dae4 <atan+0x334>)
 801d9fe:	2000      	movs	r0, #0
 801da00:	f7e2 ff1c 	bl	800083c <__aeabi_ddiv>
 801da04:	f04f 0a03 	mov.w	sl, #3
 801da08:	4604      	mov	r4, r0
 801da0a:	460d      	mov	r5, r1
 801da0c:	e737      	b.n	801d87e <atan+0xce>
 801da0e:	4b36      	ldr	r3, [pc, #216]	; (801dae8 <atan+0x338>)
 801da10:	4e36      	ldr	r6, [pc, #216]	; (801daec <atan+0x33c>)
 801da12:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801da16:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801da1a:	e9da 2300 	ldrd	r2, r3, [sl]
 801da1e:	f7e2 fc2b 	bl	8000278 <__aeabi_dsub>
 801da22:	4622      	mov	r2, r4
 801da24:	462b      	mov	r3, r5
 801da26:	f7e2 fc27 	bl	8000278 <__aeabi_dsub>
 801da2a:	4602      	mov	r2, r0
 801da2c:	460b      	mov	r3, r1
 801da2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801da32:	f7e2 fc21 	bl	8000278 <__aeabi_dsub>
 801da36:	f1bb 0f00 	cmp.w	fp, #0
 801da3a:	4604      	mov	r4, r0
 801da3c:	460d      	mov	r5, r1
 801da3e:	f6bf aed6 	bge.w	801d7ee <atan+0x3e>
 801da42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801da46:	461d      	mov	r5, r3
 801da48:	e6d1      	b.n	801d7ee <atan+0x3e>
 801da4a:	a51d      	add	r5, pc, #116	; (adr r5, 801dac0 <atan+0x310>)
 801da4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801da50:	e6cd      	b.n	801d7ee <atan+0x3e>
 801da52:	bf00      	nop
 801da54:	f3af 8000 	nop.w
 801da58:	54442d18 	.word	0x54442d18
 801da5c:	bff921fb 	.word	0xbff921fb
 801da60:	8800759c 	.word	0x8800759c
 801da64:	7e37e43c 	.word	0x7e37e43c
 801da68:	e322da11 	.word	0xe322da11
 801da6c:	3f90ad3a 	.word	0x3f90ad3a
 801da70:	24760deb 	.word	0x24760deb
 801da74:	3fa97b4b 	.word	0x3fa97b4b
 801da78:	a0d03d51 	.word	0xa0d03d51
 801da7c:	3fb10d66 	.word	0x3fb10d66
 801da80:	c54c206e 	.word	0xc54c206e
 801da84:	3fb745cd 	.word	0x3fb745cd
 801da88:	920083ff 	.word	0x920083ff
 801da8c:	3fc24924 	.word	0x3fc24924
 801da90:	5555550d 	.word	0x5555550d
 801da94:	3fd55555 	.word	0x3fd55555
 801da98:	2c6a6c2f 	.word	0x2c6a6c2f
 801da9c:	bfa2b444 	.word	0xbfa2b444
 801daa0:	52defd9a 	.word	0x52defd9a
 801daa4:	3fadde2d 	.word	0x3fadde2d
 801daa8:	af749a6d 	.word	0xaf749a6d
 801daac:	3fb3b0f2 	.word	0x3fb3b0f2
 801dab0:	fe231671 	.word	0xfe231671
 801dab4:	3fbc71c6 	.word	0x3fbc71c6
 801dab8:	9998ebc4 	.word	0x9998ebc4
 801dabc:	3fc99999 	.word	0x3fc99999
 801dac0:	54442d18 	.word	0x54442d18
 801dac4:	3ff921fb 	.word	0x3ff921fb
 801dac8:	440fffff 	.word	0x440fffff
 801dacc:	7ff00000 	.word	0x7ff00000
 801dad0:	3fdbffff 	.word	0x3fdbffff
 801dad4:	3ff00000 	.word	0x3ff00000
 801dad8:	3ff2ffff 	.word	0x3ff2ffff
 801dadc:	40038000 	.word	0x40038000
 801dae0:	3ff80000 	.word	0x3ff80000
 801dae4:	bff00000 	.word	0xbff00000
 801dae8:	0801e390 	.word	0x0801e390
 801daec:	0801e370 	.word	0x0801e370

0801daf0 <fabs>:
 801daf0:	ec51 0b10 	vmov	r0, r1, d0
 801daf4:	ee10 2a10 	vmov	r2, s0
 801daf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801dafc:	ec43 2b10 	vmov	d0, r2, r3
 801db00:	4770      	bx	lr

0801db02 <finite>:
 801db02:	b082      	sub	sp, #8
 801db04:	ed8d 0b00 	vstr	d0, [sp]
 801db08:	9801      	ldr	r0, [sp, #4]
 801db0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801db0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801db12:	0fc0      	lsrs	r0, r0, #31
 801db14:	b002      	add	sp, #8
 801db16:	4770      	bx	lr

0801db18 <nan>:
 801db18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801db20 <nan+0x8>
 801db1c:	4770      	bx	lr
 801db1e:	bf00      	nop
 801db20:	00000000 	.word	0x00000000
 801db24:	7ff80000 	.word	0x7ff80000

0801db28 <fabsf>:
 801db28:	ee10 3a10 	vmov	r3, s0
 801db2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801db30:	ee00 3a10 	vmov	s0, r3
 801db34:	4770      	bx	lr
	...

0801db38 <floorf>:
 801db38:	ee10 3a10 	vmov	r3, s0
 801db3c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801db40:	3a7f      	subs	r2, #127	; 0x7f
 801db42:	2a16      	cmp	r2, #22
 801db44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801db48:	dc2a      	bgt.n	801dba0 <floorf+0x68>
 801db4a:	2a00      	cmp	r2, #0
 801db4c:	da11      	bge.n	801db72 <floorf+0x3a>
 801db4e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801dbb0 <floorf+0x78>
 801db52:	ee30 0a27 	vadd.f32	s0, s0, s15
 801db56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801db5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db5e:	dd05      	ble.n	801db6c <floorf+0x34>
 801db60:	2b00      	cmp	r3, #0
 801db62:	da23      	bge.n	801dbac <floorf+0x74>
 801db64:	4a13      	ldr	r2, [pc, #76]	; (801dbb4 <floorf+0x7c>)
 801db66:	2900      	cmp	r1, #0
 801db68:	bf18      	it	ne
 801db6a:	4613      	movne	r3, r2
 801db6c:	ee00 3a10 	vmov	s0, r3
 801db70:	4770      	bx	lr
 801db72:	4911      	ldr	r1, [pc, #68]	; (801dbb8 <floorf+0x80>)
 801db74:	4111      	asrs	r1, r2
 801db76:	420b      	tst	r3, r1
 801db78:	d0fa      	beq.n	801db70 <floorf+0x38>
 801db7a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801dbb0 <floorf+0x78>
 801db7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801db82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801db86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db8a:	ddef      	ble.n	801db6c <floorf+0x34>
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	bfbe      	ittt	lt
 801db90:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801db94:	fa40 f202 	asrlt.w	r2, r0, r2
 801db98:	189b      	addlt	r3, r3, r2
 801db9a:	ea23 0301 	bic.w	r3, r3, r1
 801db9e:	e7e5      	b.n	801db6c <floorf+0x34>
 801dba0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801dba4:	d3e4      	bcc.n	801db70 <floorf+0x38>
 801dba6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dbaa:	4770      	bx	lr
 801dbac:	2300      	movs	r3, #0
 801dbae:	e7dd      	b.n	801db6c <floorf+0x34>
 801dbb0:	7149f2ca 	.word	0x7149f2ca
 801dbb4:	bf800000 	.word	0xbf800000
 801dbb8:	007fffff 	.word	0x007fffff

0801dbbc <nanf>:
 801dbbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801dbc4 <nanf+0x8>
 801dbc0:	4770      	bx	lr
 801dbc2:	bf00      	nop
 801dbc4:	7fc00000 	.word	0x7fc00000

0801dbc8 <scalbnf>:
 801dbc8:	ee10 3a10 	vmov	r3, s0
 801dbcc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801dbd0:	d025      	beq.n	801dc1e <scalbnf+0x56>
 801dbd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801dbd6:	d302      	bcc.n	801dbde <scalbnf+0x16>
 801dbd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dbdc:	4770      	bx	lr
 801dbde:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801dbe2:	d122      	bne.n	801dc2a <scalbnf+0x62>
 801dbe4:	4b2a      	ldr	r3, [pc, #168]	; (801dc90 <scalbnf+0xc8>)
 801dbe6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801dc94 <scalbnf+0xcc>
 801dbea:	4298      	cmp	r0, r3
 801dbec:	ee20 0a27 	vmul.f32	s0, s0, s15
 801dbf0:	db16      	blt.n	801dc20 <scalbnf+0x58>
 801dbf2:	ee10 3a10 	vmov	r3, s0
 801dbf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801dbfa:	3a19      	subs	r2, #25
 801dbfc:	4402      	add	r2, r0
 801dbfe:	2afe      	cmp	r2, #254	; 0xfe
 801dc00:	dd15      	ble.n	801dc2e <scalbnf+0x66>
 801dc02:	ee10 3a10 	vmov	r3, s0
 801dc06:	eddf 7a24 	vldr	s15, [pc, #144]	; 801dc98 <scalbnf+0xd0>
 801dc0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801dc9c <scalbnf+0xd4>
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	eeb0 7a67 	vmov.f32	s14, s15
 801dc14:	bfb8      	it	lt
 801dc16:	eef0 7a66 	vmovlt.f32	s15, s13
 801dc1a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801dc1e:	4770      	bx	lr
 801dc20:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801dca0 <scalbnf+0xd8>
 801dc24:	ee20 0a27 	vmul.f32	s0, s0, s15
 801dc28:	4770      	bx	lr
 801dc2a:	0dd2      	lsrs	r2, r2, #23
 801dc2c:	e7e6      	b.n	801dbfc <scalbnf+0x34>
 801dc2e:	2a00      	cmp	r2, #0
 801dc30:	dd06      	ble.n	801dc40 <scalbnf+0x78>
 801dc32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801dc36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801dc3a:	ee00 3a10 	vmov	s0, r3
 801dc3e:	4770      	bx	lr
 801dc40:	f112 0f16 	cmn.w	r2, #22
 801dc44:	da1a      	bge.n	801dc7c <scalbnf+0xb4>
 801dc46:	f24c 3350 	movw	r3, #50000	; 0xc350
 801dc4a:	4298      	cmp	r0, r3
 801dc4c:	ee10 3a10 	vmov	r3, s0
 801dc50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dc54:	dd0a      	ble.n	801dc6c <scalbnf+0xa4>
 801dc56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801dc98 <scalbnf+0xd0>
 801dc5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801dc9c <scalbnf+0xd4>
 801dc5e:	eef0 7a40 	vmov.f32	s15, s0
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	bf18      	it	ne
 801dc66:	eeb0 0a47 	vmovne.f32	s0, s14
 801dc6a:	e7db      	b.n	801dc24 <scalbnf+0x5c>
 801dc6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801dca0 <scalbnf+0xd8>
 801dc70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801dca4 <scalbnf+0xdc>
 801dc74:	eef0 7a40 	vmov.f32	s15, s0
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	e7f3      	b.n	801dc64 <scalbnf+0x9c>
 801dc7c:	3219      	adds	r2, #25
 801dc7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801dc82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801dc86:	eddf 7a08 	vldr	s15, [pc, #32]	; 801dca8 <scalbnf+0xe0>
 801dc8a:	ee07 3a10 	vmov	s14, r3
 801dc8e:	e7c4      	b.n	801dc1a <scalbnf+0x52>
 801dc90:	ffff3cb0 	.word	0xffff3cb0
 801dc94:	4c000000 	.word	0x4c000000
 801dc98:	7149f2ca 	.word	0x7149f2ca
 801dc9c:	f149f2ca 	.word	0xf149f2ca
 801dca0:	0da24260 	.word	0x0da24260
 801dca4:	8da24260 	.word	0x8da24260
 801dca8:	33000000 	.word	0x33000000

0801dcac <_init>:
 801dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcae:	bf00      	nop
 801dcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcb2:	bc08      	pop	{r3}
 801dcb4:	469e      	mov	lr, r3
 801dcb6:	4770      	bx	lr

0801dcb8 <_fini>:
 801dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcba:	bf00      	nop
 801dcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcbe:	bc08      	pop	{r3}
 801dcc0:	469e      	mov	lr, r3
 801dcc2:	4770      	bx	lr
